
weather_node_L4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008310  0800018c  0800018c  0000118c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  0800849c  0800849c  0000949c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080084ec  080084ec  0000a010  2**0
                  CONTENTS
  4 .ARM          00000008  080084ec  080084ec  000094ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080084f4  080084f4  0000a010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080084f4  080084f4  000094f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080084f8  080084f8  000094f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  080084fc  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002fc  20000010  0800850c  0000a010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000030c  0800850c  0000a30c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001bb52  00000000  00000000  0000a040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000389d  00000000  00000000  00025b92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a58  00000000  00000000  00029430  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000149d  00000000  00000000  0002ae88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002491d  00000000  00000000  0002c325  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d9b7  00000000  00000000  00050c42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e2974  00000000  00000000  0006e5f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00150f6d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007218  00000000  00000000  00150fb0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  001581c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	@ (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	20000010 	.word	0x20000010
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08008484 	.word	0x08008484

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	@ (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	@ (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	@ (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000014 	.word	0x20000014
 80001c8:	08008484 	.word	0x08008484

080001cc <__aeabi_drsub>:
 80001cc:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001d0:	e002      	b.n	80001d8 <__adddf3>
 80001d2:	bf00      	nop

080001d4 <__aeabi_dsub>:
 80001d4:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001d8 <__adddf3>:
 80001d8:	b530      	push	{r4, r5, lr}
 80001da:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001de:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001e2:	ea94 0f05 	teq	r4, r5
 80001e6:	bf08      	it	eq
 80001e8:	ea90 0f02 	teqeq	r0, r2
 80001ec:	bf1f      	itttt	ne
 80001ee:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001f2:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001fa:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fe:	f000 80e2 	beq.w	80003c6 <__adddf3+0x1ee>
 8000202:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000206:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800020a:	bfb8      	it	lt
 800020c:	426d      	neglt	r5, r5
 800020e:	dd0c      	ble.n	800022a <__adddf3+0x52>
 8000210:	442c      	add	r4, r5
 8000212:	ea80 0202 	eor.w	r2, r0, r2
 8000216:	ea81 0303 	eor.w	r3, r1, r3
 800021a:	ea82 0000 	eor.w	r0, r2, r0
 800021e:	ea83 0101 	eor.w	r1, r3, r1
 8000222:	ea80 0202 	eor.w	r2, r0, r2
 8000226:	ea81 0303 	eor.w	r3, r1, r3
 800022a:	2d36      	cmp	r5, #54	@ 0x36
 800022c:	bf88      	it	hi
 800022e:	bd30      	pophi	{r4, r5, pc}
 8000230:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000234:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000238:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 800023c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000240:	d002      	beq.n	8000248 <__adddf3+0x70>
 8000242:	4240      	negs	r0, r0
 8000244:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000248:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 800024c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000250:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000254:	d002      	beq.n	800025c <__adddf3+0x84>
 8000256:	4252      	negs	r2, r2
 8000258:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800025c:	ea94 0f05 	teq	r4, r5
 8000260:	f000 80a7 	beq.w	80003b2 <__adddf3+0x1da>
 8000264:	f1a4 0401 	sub.w	r4, r4, #1
 8000268:	f1d5 0e20 	rsbs	lr, r5, #32
 800026c:	db0d      	blt.n	800028a <__adddf3+0xb2>
 800026e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000272:	fa22 f205 	lsr.w	r2, r2, r5
 8000276:	1880      	adds	r0, r0, r2
 8000278:	f141 0100 	adc.w	r1, r1, #0
 800027c:	fa03 f20e 	lsl.w	r2, r3, lr
 8000280:	1880      	adds	r0, r0, r2
 8000282:	fa43 f305 	asr.w	r3, r3, r5
 8000286:	4159      	adcs	r1, r3
 8000288:	e00e      	b.n	80002a8 <__adddf3+0xd0>
 800028a:	f1a5 0520 	sub.w	r5, r5, #32
 800028e:	f10e 0e20 	add.w	lr, lr, #32
 8000292:	2a01      	cmp	r2, #1
 8000294:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000298:	bf28      	it	cs
 800029a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029e:	fa43 f305 	asr.w	r3, r3, r5
 80002a2:	18c0      	adds	r0, r0, r3
 80002a4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002ac:	d507      	bpl.n	80002be <__adddf3+0xe6>
 80002ae:	f04f 0e00 	mov.w	lr, #0
 80002b2:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b6:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002ba:	eb6e 0101 	sbc.w	r1, lr, r1
 80002be:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002c2:	d31b      	bcc.n	80002fc <__adddf3+0x124>
 80002c4:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002c8:	d30c      	bcc.n	80002e4 <__adddf3+0x10c>
 80002ca:	0849      	lsrs	r1, r1, #1
 80002cc:	ea5f 0030 	movs.w	r0, r0, rrx
 80002d0:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d4:	f104 0401 	add.w	r4, r4, #1
 80002d8:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002dc:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002e0:	f080 809a 	bcs.w	8000418 <__adddf3+0x240>
 80002e4:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002e8:	bf08      	it	eq
 80002ea:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ee:	f150 0000 	adcs.w	r0, r0, #0
 80002f2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f6:	ea41 0105 	orr.w	r1, r1, r5
 80002fa:	bd30      	pop	{r4, r5, pc}
 80002fc:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000300:	4140      	adcs	r0, r0
 8000302:	eb41 0101 	adc.w	r1, r1, r1
 8000306:	3c01      	subs	r4, #1
 8000308:	bf28      	it	cs
 800030a:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800030e:	d2e9      	bcs.n	80002e4 <__adddf3+0x10c>
 8000310:	f091 0f00 	teq	r1, #0
 8000314:	bf04      	itt	eq
 8000316:	4601      	moveq	r1, r0
 8000318:	2000      	moveq	r0, #0
 800031a:	fab1 f381 	clz	r3, r1
 800031e:	bf08      	it	eq
 8000320:	3320      	addeq	r3, #32
 8000322:	f1a3 030b 	sub.w	r3, r3, #11
 8000326:	f1b3 0220 	subs.w	r2, r3, #32
 800032a:	da0c      	bge.n	8000346 <__adddf3+0x16e>
 800032c:	320c      	adds	r2, #12
 800032e:	dd08      	ble.n	8000342 <__adddf3+0x16a>
 8000330:	f102 0c14 	add.w	ip, r2, #20
 8000334:	f1c2 020c 	rsb	r2, r2, #12
 8000338:	fa01 f00c 	lsl.w	r0, r1, ip
 800033c:	fa21 f102 	lsr.w	r1, r1, r2
 8000340:	e00c      	b.n	800035c <__adddf3+0x184>
 8000342:	f102 0214 	add.w	r2, r2, #20
 8000346:	bfd8      	it	le
 8000348:	f1c2 0c20 	rsble	ip, r2, #32
 800034c:	fa01 f102 	lsl.w	r1, r1, r2
 8000350:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000354:	bfdc      	itt	le
 8000356:	ea41 010c 	orrle.w	r1, r1, ip
 800035a:	4090      	lslle	r0, r2
 800035c:	1ae4      	subs	r4, r4, r3
 800035e:	bfa2      	ittt	ge
 8000360:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000364:	4329      	orrge	r1, r5
 8000366:	bd30      	popge	{r4, r5, pc}
 8000368:	ea6f 0404 	mvn.w	r4, r4
 800036c:	3c1f      	subs	r4, #31
 800036e:	da1c      	bge.n	80003aa <__adddf3+0x1d2>
 8000370:	340c      	adds	r4, #12
 8000372:	dc0e      	bgt.n	8000392 <__adddf3+0x1ba>
 8000374:	f104 0414 	add.w	r4, r4, #20
 8000378:	f1c4 0220 	rsb	r2, r4, #32
 800037c:	fa20 f004 	lsr.w	r0, r0, r4
 8000380:	fa01 f302 	lsl.w	r3, r1, r2
 8000384:	ea40 0003 	orr.w	r0, r0, r3
 8000388:	fa21 f304 	lsr.w	r3, r1, r4
 800038c:	ea45 0103 	orr.w	r1, r5, r3
 8000390:	bd30      	pop	{r4, r5, pc}
 8000392:	f1c4 040c 	rsb	r4, r4, #12
 8000396:	f1c4 0220 	rsb	r2, r4, #32
 800039a:	fa20 f002 	lsr.w	r0, r0, r2
 800039e:	fa01 f304 	lsl.w	r3, r1, r4
 80003a2:	ea40 0003 	orr.w	r0, r0, r3
 80003a6:	4629      	mov	r1, r5
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	fa21 f004 	lsr.w	r0, r1, r4
 80003ae:	4629      	mov	r1, r5
 80003b0:	bd30      	pop	{r4, r5, pc}
 80003b2:	f094 0f00 	teq	r4, #0
 80003b6:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003ba:	bf06      	itte	eq
 80003bc:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003c0:	3401      	addeq	r4, #1
 80003c2:	3d01      	subne	r5, #1
 80003c4:	e74e      	b.n	8000264 <__adddf3+0x8c>
 80003c6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ca:	bf18      	it	ne
 80003cc:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d0:	d029      	beq.n	8000426 <__adddf3+0x24e>
 80003d2:	ea94 0f05 	teq	r4, r5
 80003d6:	bf08      	it	eq
 80003d8:	ea90 0f02 	teqeq	r0, r2
 80003dc:	d005      	beq.n	80003ea <__adddf3+0x212>
 80003de:	ea54 0c00 	orrs.w	ip, r4, r0
 80003e2:	bf04      	itt	eq
 80003e4:	4619      	moveq	r1, r3
 80003e6:	4610      	moveq	r0, r2
 80003e8:	bd30      	pop	{r4, r5, pc}
 80003ea:	ea91 0f03 	teq	r1, r3
 80003ee:	bf1e      	ittt	ne
 80003f0:	2100      	movne	r1, #0
 80003f2:	2000      	movne	r0, #0
 80003f4:	bd30      	popne	{r4, r5, pc}
 80003f6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003fa:	d105      	bne.n	8000408 <__adddf3+0x230>
 80003fc:	0040      	lsls	r0, r0, #1
 80003fe:	4149      	adcs	r1, r1
 8000400:	bf28      	it	cs
 8000402:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000406:	bd30      	pop	{r4, r5, pc}
 8000408:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 800040c:	bf3c      	itt	cc
 800040e:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000412:	bd30      	popcc	{r4, r5, pc}
 8000414:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000418:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 800041c:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000420:	f04f 0000 	mov.w	r0, #0
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042a:	bf1a      	itte	ne
 800042c:	4619      	movne	r1, r3
 800042e:	4610      	movne	r0, r2
 8000430:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000434:	bf1c      	itt	ne
 8000436:	460b      	movne	r3, r1
 8000438:	4602      	movne	r2, r0
 800043a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043e:	bf06      	itte	eq
 8000440:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000444:	ea91 0f03 	teqeq	r1, r3
 8000448:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	bf00      	nop

08000450 <__aeabi_ui2d>:
 8000450:	f090 0f00 	teq	r0, #0
 8000454:	bf04      	itt	eq
 8000456:	2100      	moveq	r1, #0
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000460:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000464:	f04f 0500 	mov.w	r5, #0
 8000468:	f04f 0100 	mov.w	r1, #0
 800046c:	e750      	b.n	8000310 <__adddf3+0x138>
 800046e:	bf00      	nop

08000470 <__aeabi_i2d>:
 8000470:	f090 0f00 	teq	r0, #0
 8000474:	bf04      	itt	eq
 8000476:	2100      	moveq	r1, #0
 8000478:	4770      	bxeq	lr
 800047a:	b530      	push	{r4, r5, lr}
 800047c:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000480:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000484:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000488:	bf48      	it	mi
 800048a:	4240      	negmi	r0, r0
 800048c:	f04f 0100 	mov.w	r1, #0
 8000490:	e73e      	b.n	8000310 <__adddf3+0x138>
 8000492:	bf00      	nop

08000494 <__aeabi_f2d>:
 8000494:	0042      	lsls	r2, r0, #1
 8000496:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800049a:	ea4f 0131 	mov.w	r1, r1, rrx
 800049e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004a2:	bf1f      	itttt	ne
 80004a4:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004a8:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004ac:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004b0:	4770      	bxne	lr
 80004b2:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004b6:	bf08      	it	eq
 80004b8:	4770      	bxeq	lr
 80004ba:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004be:	bf04      	itt	eq
 80004c0:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004cc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004d0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004d4:	e71c      	b.n	8000310 <__adddf3+0x138>
 80004d6:	bf00      	nop

080004d8 <__aeabi_ul2d>:
 80004d8:	ea50 0201 	orrs.w	r2, r0, r1
 80004dc:	bf08      	it	eq
 80004de:	4770      	bxeq	lr
 80004e0:	b530      	push	{r4, r5, lr}
 80004e2:	f04f 0500 	mov.w	r5, #0
 80004e6:	e00a      	b.n	80004fe <__aeabi_l2d+0x16>

080004e8 <__aeabi_l2d>:
 80004e8:	ea50 0201 	orrs.w	r2, r0, r1
 80004ec:	bf08      	it	eq
 80004ee:	4770      	bxeq	lr
 80004f0:	b530      	push	{r4, r5, lr}
 80004f2:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80004f6:	d502      	bpl.n	80004fe <__aeabi_l2d+0x16>
 80004f8:	4240      	negs	r0, r0
 80004fa:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fe:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000502:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000506:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800050a:	f43f aed8 	beq.w	80002be <__adddf3+0xe6>
 800050e:	f04f 0203 	mov.w	r2, #3
 8000512:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000516:	bf18      	it	ne
 8000518:	3203      	addne	r2, #3
 800051a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051e:	bf18      	it	ne
 8000520:	3203      	addne	r2, #3
 8000522:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000526:	f1c2 0320 	rsb	r3, r2, #32
 800052a:	fa00 fc03 	lsl.w	ip, r0, r3
 800052e:	fa20 f002 	lsr.w	r0, r0, r2
 8000532:	fa01 fe03 	lsl.w	lr, r1, r3
 8000536:	ea40 000e 	orr.w	r0, r0, lr
 800053a:	fa21 f102 	lsr.w	r1, r1, r2
 800053e:	4414      	add	r4, r2
 8000540:	e6bd      	b.n	80002be <__adddf3+0xe6>
 8000542:	bf00      	nop

08000544 <__aeabi_dmul>:
 8000544:	b570      	push	{r4, r5, r6, lr}
 8000546:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800054a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800054e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000552:	bf1d      	ittte	ne
 8000554:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000558:	ea94 0f0c 	teqne	r4, ip
 800055c:	ea95 0f0c 	teqne	r5, ip
 8000560:	f000 f8de 	bleq	8000720 <__aeabi_dmul+0x1dc>
 8000564:	442c      	add	r4, r5
 8000566:	ea81 0603 	eor.w	r6, r1, r3
 800056a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000572:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000576:	bf18      	it	ne
 8000578:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 800057c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000580:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000584:	d038      	beq.n	80005f8 <__aeabi_dmul+0xb4>
 8000586:	fba0 ce02 	umull	ip, lr, r0, r2
 800058a:	f04f 0500 	mov.w	r5, #0
 800058e:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000592:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000596:	fbe0 e503 	umlal	lr, r5, r0, r3
 800059a:	f04f 0600 	mov.w	r6, #0
 800059e:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005a2:	f09c 0f00 	teq	ip, #0
 80005a6:	bf18      	it	ne
 80005a8:	f04e 0e01 	orrne.w	lr, lr, #1
 80005ac:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005b0:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005b4:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005b8:	d204      	bcs.n	80005c4 <__aeabi_dmul+0x80>
 80005ba:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005be:	416d      	adcs	r5, r5
 80005c0:	eb46 0606 	adc.w	r6, r6, r6
 80005c4:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c8:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005cc:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005d0:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d4:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d8:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005dc:	bf88      	it	hi
 80005de:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005e2:	d81e      	bhi.n	8000622 <__aeabi_dmul+0xde>
 80005e4:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005e8:	bf08      	it	eq
 80005ea:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ee:	f150 0000 	adcs.w	r0, r0, #0
 80005f2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f6:	bd70      	pop	{r4, r5, r6, pc}
 80005f8:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80005fc:	ea46 0101 	orr.w	r1, r6, r1
 8000600:	ea40 0002 	orr.w	r0, r0, r2
 8000604:	ea81 0103 	eor.w	r1, r1, r3
 8000608:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800060c:	bfc2      	ittt	gt
 800060e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000612:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000616:	bd70      	popgt	{r4, r5, r6, pc}
 8000618:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800061c:	f04f 0e00 	mov.w	lr, #0
 8000620:	3c01      	subs	r4, #1
 8000622:	f300 80ab 	bgt.w	800077c <__aeabi_dmul+0x238>
 8000626:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800062a:	bfde      	ittt	le
 800062c:	2000      	movle	r0, #0
 800062e:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000632:	bd70      	pople	{r4, r5, r6, pc}
 8000634:	f1c4 0400 	rsb	r4, r4, #0
 8000638:	3c20      	subs	r4, #32
 800063a:	da35      	bge.n	80006a8 <__aeabi_dmul+0x164>
 800063c:	340c      	adds	r4, #12
 800063e:	dc1b      	bgt.n	8000678 <__aeabi_dmul+0x134>
 8000640:	f104 0414 	add.w	r4, r4, #20
 8000644:	f1c4 0520 	rsb	r5, r4, #32
 8000648:	fa00 f305 	lsl.w	r3, r0, r5
 800064c:	fa20 f004 	lsr.w	r0, r0, r4
 8000650:	fa01 f205 	lsl.w	r2, r1, r5
 8000654:	ea40 0002 	orr.w	r0, r0, r2
 8000658:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 800065c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000660:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000664:	fa21 f604 	lsr.w	r6, r1, r4
 8000668:	eb42 0106 	adc.w	r1, r2, r6
 800066c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000670:	bf08      	it	eq
 8000672:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000676:	bd70      	pop	{r4, r5, r6, pc}
 8000678:	f1c4 040c 	rsb	r4, r4, #12
 800067c:	f1c4 0520 	rsb	r5, r4, #32
 8000680:	fa00 f304 	lsl.w	r3, r0, r4
 8000684:	fa20 f005 	lsr.w	r0, r0, r5
 8000688:	fa01 f204 	lsl.w	r2, r1, r4
 800068c:	ea40 0002 	orr.w	r0, r0, r2
 8000690:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000694:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000698:	f141 0100 	adc.w	r1, r1, #0
 800069c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a0:	bf08      	it	eq
 80006a2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a6:	bd70      	pop	{r4, r5, r6, pc}
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f205 	lsl.w	r2, r0, r5
 80006b0:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b4:	fa20 f304 	lsr.w	r3, r0, r4
 80006b8:	fa01 f205 	lsl.w	r2, r1, r5
 80006bc:	ea43 0302 	orr.w	r3, r3, r2
 80006c0:	fa21 f004 	lsr.w	r0, r1, r4
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c8:	fa21 f204 	lsr.w	r2, r1, r4
 80006cc:	ea20 0002 	bic.w	r0, r0, r2
 80006d0:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d8:	bf08      	it	eq
 80006da:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006de:	bd70      	pop	{r4, r5, r6, pc}
 80006e0:	f094 0f00 	teq	r4, #0
 80006e4:	d10f      	bne.n	8000706 <__aeabi_dmul+0x1c2>
 80006e6:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006ea:	0040      	lsls	r0, r0, #1
 80006ec:	eb41 0101 	adc.w	r1, r1, r1
 80006f0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80006f4:	bf08      	it	eq
 80006f6:	3c01      	subeq	r4, #1
 80006f8:	d0f7      	beq.n	80006ea <__aeabi_dmul+0x1a6>
 80006fa:	ea41 0106 	orr.w	r1, r1, r6
 80006fe:	f095 0f00 	teq	r5, #0
 8000702:	bf18      	it	ne
 8000704:	4770      	bxne	lr
 8000706:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800070a:	0052      	lsls	r2, r2, #1
 800070c:	eb43 0303 	adc.w	r3, r3, r3
 8000710:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000714:	bf08      	it	eq
 8000716:	3d01      	subeq	r5, #1
 8000718:	d0f7      	beq.n	800070a <__aeabi_dmul+0x1c6>
 800071a:	ea43 0306 	orr.w	r3, r3, r6
 800071e:	4770      	bx	lr
 8000720:	ea94 0f0c 	teq	r4, ip
 8000724:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000728:	bf18      	it	ne
 800072a:	ea95 0f0c 	teqne	r5, ip
 800072e:	d00c      	beq.n	800074a <__aeabi_dmul+0x206>
 8000730:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000734:	bf18      	it	ne
 8000736:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800073a:	d1d1      	bne.n	80006e0 <__aeabi_dmul+0x19c>
 800073c:	ea81 0103 	eor.w	r1, r1, r3
 8000740:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000744:	f04f 0000 	mov.w	r0, #0
 8000748:	bd70      	pop	{r4, r5, r6, pc}
 800074a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074e:	bf06      	itte	eq
 8000750:	4610      	moveq	r0, r2
 8000752:	4619      	moveq	r1, r3
 8000754:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000758:	d019      	beq.n	800078e <__aeabi_dmul+0x24a>
 800075a:	ea94 0f0c 	teq	r4, ip
 800075e:	d102      	bne.n	8000766 <__aeabi_dmul+0x222>
 8000760:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000764:	d113      	bne.n	800078e <__aeabi_dmul+0x24a>
 8000766:	ea95 0f0c 	teq	r5, ip
 800076a:	d105      	bne.n	8000778 <__aeabi_dmul+0x234>
 800076c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000770:	bf1c      	itt	ne
 8000772:	4610      	movne	r0, r2
 8000774:	4619      	movne	r1, r3
 8000776:	d10a      	bne.n	800078e <__aeabi_dmul+0x24a>
 8000778:	ea81 0103 	eor.w	r1, r1, r3
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000780:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000784:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000788:	f04f 0000 	mov.w	r0, #0
 800078c:	bd70      	pop	{r4, r5, r6, pc}
 800078e:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000792:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000796:	bd70      	pop	{r4, r5, r6, pc}

08000798 <__aeabi_ddiv>:
 8000798:	b570      	push	{r4, r5, r6, lr}
 800079a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800079e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007a2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a6:	bf1d      	ittte	ne
 80007a8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007ac:	ea94 0f0c 	teqne	r4, ip
 80007b0:	ea95 0f0c 	teqne	r5, ip
 80007b4:	f000 f8a7 	bleq	8000906 <__aeabi_ddiv+0x16e>
 80007b8:	eba4 0405 	sub.w	r4, r4, r5
 80007bc:	ea81 0e03 	eor.w	lr, r1, r3
 80007c0:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c8:	f000 8088 	beq.w	80008dc <__aeabi_ddiv+0x144>
 80007cc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007d0:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007d4:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d8:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007dc:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007e0:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e4:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e8:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007ec:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007f0:	429d      	cmp	r5, r3
 80007f2:	bf08      	it	eq
 80007f4:	4296      	cmpeq	r6, r2
 80007f6:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007fa:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80007fe:	d202      	bcs.n	8000806 <__aeabi_ddiv+0x6e>
 8000800:	085b      	lsrs	r3, r3, #1
 8000802:	ea4f 0232 	mov.w	r2, r2, rrx
 8000806:	1ab6      	subs	r6, r6, r2
 8000808:	eb65 0503 	sbc.w	r5, r5, r3
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000816:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800081a:	ebb6 0e02 	subs.w	lr, r6, r2
 800081e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000822:	bf22      	ittt	cs
 8000824:	1ab6      	subcs	r6, r6, r2
 8000826:	4675      	movcs	r5, lr
 8000828:	ea40 000c 	orrcs.w	r0, r0, ip
 800082c:	085b      	lsrs	r3, r3, #1
 800082e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000832:	ebb6 0e02 	subs.w	lr, r6, r2
 8000836:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083a:	bf22      	ittt	cs
 800083c:	1ab6      	subcs	r6, r6, r2
 800083e:	4675      	movcs	r5, lr
 8000840:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000844:	085b      	lsrs	r3, r3, #1
 8000846:	ea4f 0232 	mov.w	r2, r2, rrx
 800084a:	ebb6 0e02 	subs.w	lr, r6, r2
 800084e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000852:	bf22      	ittt	cs
 8000854:	1ab6      	subcs	r6, r6, r2
 8000856:	4675      	movcs	r5, lr
 8000858:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800085c:	085b      	lsrs	r3, r3, #1
 800085e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000862:	ebb6 0e02 	subs.w	lr, r6, r2
 8000866:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086a:	bf22      	ittt	cs
 800086c:	1ab6      	subcs	r6, r6, r2
 800086e:	4675      	movcs	r5, lr
 8000870:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000874:	ea55 0e06 	orrs.w	lr, r5, r6
 8000878:	d018      	beq.n	80008ac <__aeabi_ddiv+0x114>
 800087a:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000882:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000886:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800088a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000892:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000896:	d1c0      	bne.n	800081a <__aeabi_ddiv+0x82>
 8000898:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800089c:	d10b      	bne.n	80008b6 <__aeabi_ddiv+0x11e>
 800089e:	ea41 0100 	orr.w	r1, r1, r0
 80008a2:	f04f 0000 	mov.w	r0, #0
 80008a6:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008aa:	e7b6      	b.n	800081a <__aeabi_ddiv+0x82>
 80008ac:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008b0:	bf04      	itt	eq
 80008b2:	4301      	orreq	r1, r0
 80008b4:	2000      	moveq	r0, #0
 80008b6:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008ba:	bf88      	it	hi
 80008bc:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008c0:	f63f aeaf 	bhi.w	8000622 <__aeabi_dmul+0xde>
 80008c4:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c8:	bf04      	itt	eq
 80008ca:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008d2:	f150 0000 	adcs.w	r0, r0, #0
 80008d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008da:	bd70      	pop	{r4, r5, r6, pc}
 80008dc:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008e0:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e4:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e8:	bfc2      	ittt	gt
 80008ea:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ee:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008f2:	bd70      	popgt	{r4, r5, r6, pc}
 80008f4:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008f8:	f04f 0e00 	mov.w	lr, #0
 80008fc:	3c01      	subs	r4, #1
 80008fe:	e690      	b.n	8000622 <__aeabi_dmul+0xde>
 8000900:	ea45 0e06 	orr.w	lr, r5, r6
 8000904:	e68d      	b.n	8000622 <__aeabi_dmul+0xde>
 8000906:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800090a:	ea94 0f0c 	teq	r4, ip
 800090e:	bf08      	it	eq
 8000910:	ea95 0f0c 	teqeq	r5, ip
 8000914:	f43f af3b 	beq.w	800078e <__aeabi_dmul+0x24a>
 8000918:	ea94 0f0c 	teq	r4, ip
 800091c:	d10a      	bne.n	8000934 <__aeabi_ddiv+0x19c>
 800091e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000922:	f47f af34 	bne.w	800078e <__aeabi_dmul+0x24a>
 8000926:	ea95 0f0c 	teq	r5, ip
 800092a:	f47f af25 	bne.w	8000778 <__aeabi_dmul+0x234>
 800092e:	4610      	mov	r0, r2
 8000930:	4619      	mov	r1, r3
 8000932:	e72c      	b.n	800078e <__aeabi_dmul+0x24a>
 8000934:	ea95 0f0c 	teq	r5, ip
 8000938:	d106      	bne.n	8000948 <__aeabi_ddiv+0x1b0>
 800093a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093e:	f43f aefd 	beq.w	800073c <__aeabi_dmul+0x1f8>
 8000942:	4610      	mov	r0, r2
 8000944:	4619      	mov	r1, r3
 8000946:	e722      	b.n	800078e <__aeabi_dmul+0x24a>
 8000948:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800094c:	bf18      	it	ne
 800094e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000952:	f47f aec5 	bne.w	80006e0 <__aeabi_dmul+0x19c>
 8000956:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800095a:	f47f af0d 	bne.w	8000778 <__aeabi_dmul+0x234>
 800095e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000962:	f47f aeeb 	bne.w	800073c <__aeabi_dmul+0x1f8>
 8000966:	e712      	b.n	800078e <__aeabi_dmul+0x24a>

08000968 <__aeabi_d2iz>:
 8000968:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800096c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000970:	d215      	bcs.n	800099e <__aeabi_d2iz+0x36>
 8000972:	d511      	bpl.n	8000998 <__aeabi_d2iz+0x30>
 8000974:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000978:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 800097c:	d912      	bls.n	80009a4 <__aeabi_d2iz+0x3c>
 800097e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000982:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000986:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800098a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800098e:	fa23 f002 	lsr.w	r0, r3, r2
 8000992:	bf18      	it	ne
 8000994:	4240      	negne	r0, r0
 8000996:	4770      	bx	lr
 8000998:	f04f 0000 	mov.w	r0, #0
 800099c:	4770      	bx	lr
 800099e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009a2:	d105      	bne.n	80009b0 <__aeabi_d2iz+0x48>
 80009a4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 80009a8:	bf08      	it	eq
 80009aa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 80009ae:	4770      	bx	lr
 80009b0:	f04f 0000 	mov.w	r0, #0
 80009b4:	4770      	bx	lr
 80009b6:	bf00      	nop

080009b8 <__aeabi_d2uiz>:
 80009b8:	004a      	lsls	r2, r1, #1
 80009ba:	d211      	bcs.n	80009e0 <__aeabi_d2uiz+0x28>
 80009bc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80009c0:	d211      	bcs.n	80009e6 <__aeabi_d2uiz+0x2e>
 80009c2:	d50d      	bpl.n	80009e0 <__aeabi_d2uiz+0x28>
 80009c4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80009c8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009cc:	d40e      	bmi.n	80009ec <__aeabi_d2uiz+0x34>
 80009ce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009d2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80009d6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009da:	fa23 f002 	lsr.w	r0, r3, r2
 80009de:	4770      	bx	lr
 80009e0:	f04f 0000 	mov.w	r0, #0
 80009e4:	4770      	bx	lr
 80009e6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009ea:	d102      	bne.n	80009f2 <__aeabi_d2uiz+0x3a>
 80009ec:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80009f0:	4770      	bx	lr
 80009f2:	f04f 0000 	mov.w	r0, #0
 80009f6:	4770      	bx	lr

080009f8 <__aeabi_d2f>:
 80009f8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009fc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a00:	bf24      	itt	cs
 8000a02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a0a:	d90d      	bls.n	8000a28 <__aeabi_d2f+0x30>
 8000a0c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a18:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000a1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a20:	bf08      	it	eq
 8000a22:	f020 0001 	biceq.w	r0, r0, #1
 8000a26:	4770      	bx	lr
 8000a28:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000a2c:	d121      	bne.n	8000a72 <__aeabi_d2f+0x7a>
 8000a2e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000a32:	bfbc      	itt	lt
 8000a34:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000a38:	4770      	bxlt	lr
 8000a3a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a42:	f1c2 0218 	rsb	r2, r2, #24
 8000a46:	f1c2 0c20 	rsb	ip, r2, #32
 8000a4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000a52:	bf18      	it	ne
 8000a54:	f040 0001 	orrne.w	r0, r0, #1
 8000a58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a64:	ea40 000c 	orr.w	r0, r0, ip
 8000a68:	fa23 f302 	lsr.w	r3, r3, r2
 8000a6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a70:	e7cc      	b.n	8000a0c <__aeabi_d2f+0x14>
 8000a72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a76:	d107      	bne.n	8000a88 <__aeabi_d2f+0x90>
 8000a78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a7c:	bf1e      	ittt	ne
 8000a7e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000a82:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000a86:	4770      	bxne	lr
 8000a88:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000a8c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000a90:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <__aeabi_uldivmod>:
 8000a98:	b953      	cbnz	r3, 8000ab0 <__aeabi_uldivmod+0x18>
 8000a9a:	b94a      	cbnz	r2, 8000ab0 <__aeabi_uldivmod+0x18>
 8000a9c:	2900      	cmp	r1, #0
 8000a9e:	bf08      	it	eq
 8000aa0:	2800      	cmpeq	r0, #0
 8000aa2:	bf1c      	itt	ne
 8000aa4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000aa8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000aac:	f000 b96a 	b.w	8000d84 <__aeabi_idiv0>
 8000ab0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ab4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ab8:	f000 f806 	bl	8000ac8 <__udivmoddi4>
 8000abc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ac0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ac4:	b004      	add	sp, #16
 8000ac6:	4770      	bx	lr

08000ac8 <__udivmoddi4>:
 8000ac8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000acc:	9d08      	ldr	r5, [sp, #32]
 8000ace:	460c      	mov	r4, r1
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d14e      	bne.n	8000b72 <__udivmoddi4+0xaa>
 8000ad4:	4694      	mov	ip, r2
 8000ad6:	458c      	cmp	ip, r1
 8000ad8:	4686      	mov	lr, r0
 8000ada:	fab2 f282 	clz	r2, r2
 8000ade:	d962      	bls.n	8000ba6 <__udivmoddi4+0xde>
 8000ae0:	b14a      	cbz	r2, 8000af6 <__udivmoddi4+0x2e>
 8000ae2:	f1c2 0320 	rsb	r3, r2, #32
 8000ae6:	4091      	lsls	r1, r2
 8000ae8:	fa20 f303 	lsr.w	r3, r0, r3
 8000aec:	fa0c fc02 	lsl.w	ip, ip, r2
 8000af0:	4319      	orrs	r1, r3
 8000af2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000af6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000afa:	fa1f f68c 	uxth.w	r6, ip
 8000afe:	fbb1 f4f7 	udiv	r4, r1, r7
 8000b02:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b06:	fb07 1114 	mls	r1, r7, r4, r1
 8000b0a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b0e:	fb04 f106 	mul.w	r1, r4, r6
 8000b12:	4299      	cmp	r1, r3
 8000b14:	d90a      	bls.n	8000b2c <__udivmoddi4+0x64>
 8000b16:	eb1c 0303 	adds.w	r3, ip, r3
 8000b1a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000b1e:	f080 8112 	bcs.w	8000d46 <__udivmoddi4+0x27e>
 8000b22:	4299      	cmp	r1, r3
 8000b24:	f240 810f 	bls.w	8000d46 <__udivmoddi4+0x27e>
 8000b28:	3c02      	subs	r4, #2
 8000b2a:	4463      	add	r3, ip
 8000b2c:	1a59      	subs	r1, r3, r1
 8000b2e:	fa1f f38e 	uxth.w	r3, lr
 8000b32:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b36:	fb07 1110 	mls	r1, r7, r0, r1
 8000b3a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b3e:	fb00 f606 	mul.w	r6, r0, r6
 8000b42:	429e      	cmp	r6, r3
 8000b44:	d90a      	bls.n	8000b5c <__udivmoddi4+0x94>
 8000b46:	eb1c 0303 	adds.w	r3, ip, r3
 8000b4a:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000b4e:	f080 80fc 	bcs.w	8000d4a <__udivmoddi4+0x282>
 8000b52:	429e      	cmp	r6, r3
 8000b54:	f240 80f9 	bls.w	8000d4a <__udivmoddi4+0x282>
 8000b58:	4463      	add	r3, ip
 8000b5a:	3802      	subs	r0, #2
 8000b5c:	1b9b      	subs	r3, r3, r6
 8000b5e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000b62:	2100      	movs	r1, #0
 8000b64:	b11d      	cbz	r5, 8000b6e <__udivmoddi4+0xa6>
 8000b66:	40d3      	lsrs	r3, r2
 8000b68:	2200      	movs	r2, #0
 8000b6a:	e9c5 3200 	strd	r3, r2, [r5]
 8000b6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b72:	428b      	cmp	r3, r1
 8000b74:	d905      	bls.n	8000b82 <__udivmoddi4+0xba>
 8000b76:	b10d      	cbz	r5, 8000b7c <__udivmoddi4+0xb4>
 8000b78:	e9c5 0100 	strd	r0, r1, [r5]
 8000b7c:	2100      	movs	r1, #0
 8000b7e:	4608      	mov	r0, r1
 8000b80:	e7f5      	b.n	8000b6e <__udivmoddi4+0xa6>
 8000b82:	fab3 f183 	clz	r1, r3
 8000b86:	2900      	cmp	r1, #0
 8000b88:	d146      	bne.n	8000c18 <__udivmoddi4+0x150>
 8000b8a:	42a3      	cmp	r3, r4
 8000b8c:	d302      	bcc.n	8000b94 <__udivmoddi4+0xcc>
 8000b8e:	4290      	cmp	r0, r2
 8000b90:	f0c0 80f0 	bcc.w	8000d74 <__udivmoddi4+0x2ac>
 8000b94:	1a86      	subs	r6, r0, r2
 8000b96:	eb64 0303 	sbc.w	r3, r4, r3
 8000b9a:	2001      	movs	r0, #1
 8000b9c:	2d00      	cmp	r5, #0
 8000b9e:	d0e6      	beq.n	8000b6e <__udivmoddi4+0xa6>
 8000ba0:	e9c5 6300 	strd	r6, r3, [r5]
 8000ba4:	e7e3      	b.n	8000b6e <__udivmoddi4+0xa6>
 8000ba6:	2a00      	cmp	r2, #0
 8000ba8:	f040 8090 	bne.w	8000ccc <__udivmoddi4+0x204>
 8000bac:	eba1 040c 	sub.w	r4, r1, ip
 8000bb0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000bb4:	fa1f f78c 	uxth.w	r7, ip
 8000bb8:	2101      	movs	r1, #1
 8000bba:	fbb4 f6f8 	udiv	r6, r4, r8
 8000bbe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000bc2:	fb08 4416 	mls	r4, r8, r6, r4
 8000bc6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000bca:	fb07 f006 	mul.w	r0, r7, r6
 8000bce:	4298      	cmp	r0, r3
 8000bd0:	d908      	bls.n	8000be4 <__udivmoddi4+0x11c>
 8000bd2:	eb1c 0303 	adds.w	r3, ip, r3
 8000bd6:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000bda:	d202      	bcs.n	8000be2 <__udivmoddi4+0x11a>
 8000bdc:	4298      	cmp	r0, r3
 8000bde:	f200 80cd 	bhi.w	8000d7c <__udivmoddi4+0x2b4>
 8000be2:	4626      	mov	r6, r4
 8000be4:	1a1c      	subs	r4, r3, r0
 8000be6:	fa1f f38e 	uxth.w	r3, lr
 8000bea:	fbb4 f0f8 	udiv	r0, r4, r8
 8000bee:	fb08 4410 	mls	r4, r8, r0, r4
 8000bf2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000bf6:	fb00 f707 	mul.w	r7, r0, r7
 8000bfa:	429f      	cmp	r7, r3
 8000bfc:	d908      	bls.n	8000c10 <__udivmoddi4+0x148>
 8000bfe:	eb1c 0303 	adds.w	r3, ip, r3
 8000c02:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000c06:	d202      	bcs.n	8000c0e <__udivmoddi4+0x146>
 8000c08:	429f      	cmp	r7, r3
 8000c0a:	f200 80b0 	bhi.w	8000d6e <__udivmoddi4+0x2a6>
 8000c0e:	4620      	mov	r0, r4
 8000c10:	1bdb      	subs	r3, r3, r7
 8000c12:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c16:	e7a5      	b.n	8000b64 <__udivmoddi4+0x9c>
 8000c18:	f1c1 0620 	rsb	r6, r1, #32
 8000c1c:	408b      	lsls	r3, r1
 8000c1e:	fa22 f706 	lsr.w	r7, r2, r6
 8000c22:	431f      	orrs	r7, r3
 8000c24:	fa20 fc06 	lsr.w	ip, r0, r6
 8000c28:	fa04 f301 	lsl.w	r3, r4, r1
 8000c2c:	ea43 030c 	orr.w	r3, r3, ip
 8000c30:	40f4      	lsrs	r4, r6
 8000c32:	fa00 f801 	lsl.w	r8, r0, r1
 8000c36:	0c38      	lsrs	r0, r7, #16
 8000c38:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000c3c:	fbb4 fef0 	udiv	lr, r4, r0
 8000c40:	fa1f fc87 	uxth.w	ip, r7
 8000c44:	fb00 441e 	mls	r4, r0, lr, r4
 8000c48:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c4c:	fb0e f90c 	mul.w	r9, lr, ip
 8000c50:	45a1      	cmp	r9, r4
 8000c52:	fa02 f201 	lsl.w	r2, r2, r1
 8000c56:	d90a      	bls.n	8000c6e <__udivmoddi4+0x1a6>
 8000c58:	193c      	adds	r4, r7, r4
 8000c5a:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000c5e:	f080 8084 	bcs.w	8000d6a <__udivmoddi4+0x2a2>
 8000c62:	45a1      	cmp	r9, r4
 8000c64:	f240 8081 	bls.w	8000d6a <__udivmoddi4+0x2a2>
 8000c68:	f1ae 0e02 	sub.w	lr, lr, #2
 8000c6c:	443c      	add	r4, r7
 8000c6e:	eba4 0409 	sub.w	r4, r4, r9
 8000c72:	fa1f f983 	uxth.w	r9, r3
 8000c76:	fbb4 f3f0 	udiv	r3, r4, r0
 8000c7a:	fb00 4413 	mls	r4, r0, r3, r4
 8000c7e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c82:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c86:	45a4      	cmp	ip, r4
 8000c88:	d907      	bls.n	8000c9a <__udivmoddi4+0x1d2>
 8000c8a:	193c      	adds	r4, r7, r4
 8000c8c:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000c90:	d267      	bcs.n	8000d62 <__udivmoddi4+0x29a>
 8000c92:	45a4      	cmp	ip, r4
 8000c94:	d965      	bls.n	8000d62 <__udivmoddi4+0x29a>
 8000c96:	3b02      	subs	r3, #2
 8000c98:	443c      	add	r4, r7
 8000c9a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000c9e:	fba0 9302 	umull	r9, r3, r0, r2
 8000ca2:	eba4 040c 	sub.w	r4, r4, ip
 8000ca6:	429c      	cmp	r4, r3
 8000ca8:	46ce      	mov	lr, r9
 8000caa:	469c      	mov	ip, r3
 8000cac:	d351      	bcc.n	8000d52 <__udivmoddi4+0x28a>
 8000cae:	d04e      	beq.n	8000d4e <__udivmoddi4+0x286>
 8000cb0:	b155      	cbz	r5, 8000cc8 <__udivmoddi4+0x200>
 8000cb2:	ebb8 030e 	subs.w	r3, r8, lr
 8000cb6:	eb64 040c 	sbc.w	r4, r4, ip
 8000cba:	fa04 f606 	lsl.w	r6, r4, r6
 8000cbe:	40cb      	lsrs	r3, r1
 8000cc0:	431e      	orrs	r6, r3
 8000cc2:	40cc      	lsrs	r4, r1
 8000cc4:	e9c5 6400 	strd	r6, r4, [r5]
 8000cc8:	2100      	movs	r1, #0
 8000cca:	e750      	b.n	8000b6e <__udivmoddi4+0xa6>
 8000ccc:	f1c2 0320 	rsb	r3, r2, #32
 8000cd0:	fa20 f103 	lsr.w	r1, r0, r3
 8000cd4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cd8:	fa24 f303 	lsr.w	r3, r4, r3
 8000cdc:	4094      	lsls	r4, r2
 8000cde:	430c      	orrs	r4, r1
 8000ce0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ce4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ce8:	fa1f f78c 	uxth.w	r7, ip
 8000cec:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cf0:	fb08 3110 	mls	r1, r8, r0, r3
 8000cf4:	0c23      	lsrs	r3, r4, #16
 8000cf6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cfa:	fb00 f107 	mul.w	r1, r0, r7
 8000cfe:	4299      	cmp	r1, r3
 8000d00:	d908      	bls.n	8000d14 <__udivmoddi4+0x24c>
 8000d02:	eb1c 0303 	adds.w	r3, ip, r3
 8000d06:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000d0a:	d22c      	bcs.n	8000d66 <__udivmoddi4+0x29e>
 8000d0c:	4299      	cmp	r1, r3
 8000d0e:	d92a      	bls.n	8000d66 <__udivmoddi4+0x29e>
 8000d10:	3802      	subs	r0, #2
 8000d12:	4463      	add	r3, ip
 8000d14:	1a5b      	subs	r3, r3, r1
 8000d16:	b2a4      	uxth	r4, r4
 8000d18:	fbb3 f1f8 	udiv	r1, r3, r8
 8000d1c:	fb08 3311 	mls	r3, r8, r1, r3
 8000d20:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d24:	fb01 f307 	mul.w	r3, r1, r7
 8000d28:	42a3      	cmp	r3, r4
 8000d2a:	d908      	bls.n	8000d3e <__udivmoddi4+0x276>
 8000d2c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d30:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000d34:	d213      	bcs.n	8000d5e <__udivmoddi4+0x296>
 8000d36:	42a3      	cmp	r3, r4
 8000d38:	d911      	bls.n	8000d5e <__udivmoddi4+0x296>
 8000d3a:	3902      	subs	r1, #2
 8000d3c:	4464      	add	r4, ip
 8000d3e:	1ae4      	subs	r4, r4, r3
 8000d40:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000d44:	e739      	b.n	8000bba <__udivmoddi4+0xf2>
 8000d46:	4604      	mov	r4, r0
 8000d48:	e6f0      	b.n	8000b2c <__udivmoddi4+0x64>
 8000d4a:	4608      	mov	r0, r1
 8000d4c:	e706      	b.n	8000b5c <__udivmoddi4+0x94>
 8000d4e:	45c8      	cmp	r8, r9
 8000d50:	d2ae      	bcs.n	8000cb0 <__udivmoddi4+0x1e8>
 8000d52:	ebb9 0e02 	subs.w	lr, r9, r2
 8000d56:	eb63 0c07 	sbc.w	ip, r3, r7
 8000d5a:	3801      	subs	r0, #1
 8000d5c:	e7a8      	b.n	8000cb0 <__udivmoddi4+0x1e8>
 8000d5e:	4631      	mov	r1, r6
 8000d60:	e7ed      	b.n	8000d3e <__udivmoddi4+0x276>
 8000d62:	4603      	mov	r3, r0
 8000d64:	e799      	b.n	8000c9a <__udivmoddi4+0x1d2>
 8000d66:	4630      	mov	r0, r6
 8000d68:	e7d4      	b.n	8000d14 <__udivmoddi4+0x24c>
 8000d6a:	46d6      	mov	lr, sl
 8000d6c:	e77f      	b.n	8000c6e <__udivmoddi4+0x1a6>
 8000d6e:	4463      	add	r3, ip
 8000d70:	3802      	subs	r0, #2
 8000d72:	e74d      	b.n	8000c10 <__udivmoddi4+0x148>
 8000d74:	4606      	mov	r6, r0
 8000d76:	4623      	mov	r3, r4
 8000d78:	4608      	mov	r0, r1
 8000d7a:	e70f      	b.n	8000b9c <__udivmoddi4+0xd4>
 8000d7c:	3e02      	subs	r6, #2
 8000d7e:	4463      	add	r3, ip
 8000d80:	e730      	b.n	8000be4 <__udivmoddi4+0x11c>
 8000d82:	bf00      	nop

08000d84 <__aeabi_idiv0>:
 8000d84:	4770      	bx	lr
 8000d86:	bf00      	nop

08000d88 <read_calibration_data>:
 *      Author: bala
 */
#include "bmp.h"

void read_calibration_data(I2C_HandleTypeDef *hi2c, bmp_calib_t *bmp_calib_data)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b08c      	sub	sp, #48	@ 0x30
 8000d8c:	af04      	add	r7, sp, #16
 8000d8e:	6078      	str	r0, [r7, #4]
 8000d90:	6039      	str	r1, [r7, #0]
	uint8_t calib_data[22];

	HAL_I2C_Mem_Read(hi2c,BMP_ADDR,(uint16_t) CALIB_START_ADDR,1,calib_data,22,1000);
 8000d92:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d96:	9302      	str	r3, [sp, #8]
 8000d98:	2316      	movs	r3, #22
 8000d9a:	9301      	str	r3, [sp, #4]
 8000d9c:	f107 0308 	add.w	r3, r7, #8
 8000da0:	9300      	str	r3, [sp, #0]
 8000da2:	2301      	movs	r3, #1
 8000da4:	22aa      	movs	r2, #170	@ 0xaa
 8000da6:	21ee      	movs	r1, #238	@ 0xee
 8000da8:	6878      	ldr	r0, [r7, #4]
 8000daa:	f003 fddb 	bl	8004964 <HAL_I2C_Mem_Read>

	bmp_calib_data->AC1 = (uint16_t) (calib_data[0] << 8) | (calib_data[1]);
 8000dae:	7a3b      	ldrb	r3, [r7, #8]
 8000db0:	021b      	lsls	r3, r3, #8
 8000db2:	b29b      	uxth	r3, r3
 8000db4:	7a7a      	ldrb	r2, [r7, #9]
 8000db6:	4313      	orrs	r3, r2
 8000db8:	b29a      	uxth	r2, r3
 8000dba:	683b      	ldr	r3, [r7, #0]
 8000dbc:	801a      	strh	r2, [r3, #0]
	bmp_calib_data->AC2 = (uint16_t) (calib_data[2] << 8) | (calib_data[3]);
 8000dbe:	7abb      	ldrb	r3, [r7, #10]
 8000dc0:	021b      	lsls	r3, r3, #8
 8000dc2:	b29b      	uxth	r3, r3
 8000dc4:	7afa      	ldrb	r2, [r7, #11]
 8000dc6:	4313      	orrs	r3, r2
 8000dc8:	b29a      	uxth	r2, r3
 8000dca:	683b      	ldr	r3, [r7, #0]
 8000dcc:	805a      	strh	r2, [r3, #2]
	bmp_calib_data->AC3 = (uint16_t) (calib_data[4] << 8) | (calib_data[5]);
 8000dce:	7b3b      	ldrb	r3, [r7, #12]
 8000dd0:	021b      	lsls	r3, r3, #8
 8000dd2:	b29b      	uxth	r3, r3
 8000dd4:	7b7a      	ldrb	r2, [r7, #13]
 8000dd6:	4313      	orrs	r3, r2
 8000dd8:	b29a      	uxth	r2, r3
 8000dda:	683b      	ldr	r3, [r7, #0]
 8000ddc:	809a      	strh	r2, [r3, #4]
	bmp_calib_data->AC4 = (uint16_t) (calib_data[6] << 8) | (calib_data[7]);
 8000dde:	7bbb      	ldrb	r3, [r7, #14]
 8000de0:	021b      	lsls	r3, r3, #8
 8000de2:	b29b      	uxth	r3, r3
 8000de4:	7bfa      	ldrb	r2, [r7, #15]
 8000de6:	4313      	orrs	r3, r2
 8000de8:	b29a      	uxth	r2, r3
 8000dea:	683b      	ldr	r3, [r7, #0]
 8000dec:	80da      	strh	r2, [r3, #6]
	bmp_calib_data->AC5 = (uint16_t) (calib_data[8] << 8) | (calib_data[9]);
 8000dee:	7c3b      	ldrb	r3, [r7, #16]
 8000df0:	021b      	lsls	r3, r3, #8
 8000df2:	b29b      	uxth	r3, r3
 8000df4:	7c7a      	ldrb	r2, [r7, #17]
 8000df6:	4313      	orrs	r3, r2
 8000df8:	b29a      	uxth	r2, r3
 8000dfa:	683b      	ldr	r3, [r7, #0]
 8000dfc:	811a      	strh	r2, [r3, #8]
	bmp_calib_data->AC6 = (uint16_t) (calib_data[10] << 8) | (calib_data[11]);
 8000dfe:	7cbb      	ldrb	r3, [r7, #18]
 8000e00:	021b      	lsls	r3, r3, #8
 8000e02:	b29b      	uxth	r3, r3
 8000e04:	7cfa      	ldrb	r2, [r7, #19]
 8000e06:	4313      	orrs	r3, r2
 8000e08:	b29a      	uxth	r2, r3
 8000e0a:	683b      	ldr	r3, [r7, #0]
 8000e0c:	815a      	strh	r2, [r3, #10]

	bmp_calib_data->B1 = (uint16_t) (calib_data[12] << 8) | (calib_data[13]);
 8000e0e:	7d3b      	ldrb	r3, [r7, #20]
 8000e10:	021b      	lsls	r3, r3, #8
 8000e12:	b29b      	uxth	r3, r3
 8000e14:	7d7a      	ldrb	r2, [r7, #21]
 8000e16:	4313      	orrs	r3, r2
 8000e18:	b29a      	uxth	r2, r3
 8000e1a:	683b      	ldr	r3, [r7, #0]
 8000e1c:	819a      	strh	r2, [r3, #12]
	bmp_calib_data->B2 = (uint16_t) (calib_data[14] << 8) | (calib_data[15]);
 8000e1e:	7dbb      	ldrb	r3, [r7, #22]
 8000e20:	021b      	lsls	r3, r3, #8
 8000e22:	b29b      	uxth	r3, r3
 8000e24:	7dfa      	ldrb	r2, [r7, #23]
 8000e26:	4313      	orrs	r3, r2
 8000e28:	b29a      	uxth	r2, r3
 8000e2a:	683b      	ldr	r3, [r7, #0]
 8000e2c:	81da      	strh	r2, [r3, #14]

	bmp_calib_data->MB = (uint16_t) (calib_data[16] << 8) | (calib_data[17]);
 8000e2e:	7e3b      	ldrb	r3, [r7, #24]
 8000e30:	021b      	lsls	r3, r3, #8
 8000e32:	b29b      	uxth	r3, r3
 8000e34:	7e7a      	ldrb	r2, [r7, #25]
 8000e36:	4313      	orrs	r3, r2
 8000e38:	b29a      	uxth	r2, r3
 8000e3a:	683b      	ldr	r3, [r7, #0]
 8000e3c:	821a      	strh	r2, [r3, #16]
	bmp_calib_data->MC = (uint16_t) (calib_data[18] << 8) | (calib_data[19]);
 8000e3e:	7ebb      	ldrb	r3, [r7, #26]
 8000e40:	021b      	lsls	r3, r3, #8
 8000e42:	b29b      	uxth	r3, r3
 8000e44:	7efa      	ldrb	r2, [r7, #27]
 8000e46:	4313      	orrs	r3, r2
 8000e48:	b29a      	uxth	r2, r3
 8000e4a:	683b      	ldr	r3, [r7, #0]
 8000e4c:	825a      	strh	r2, [r3, #18]
	bmp_calib_data->MD = (uint16_t) (calib_data[20] << 8) | (calib_data[21]);
 8000e4e:	7f3b      	ldrb	r3, [r7, #28]
 8000e50:	021b      	lsls	r3, r3, #8
 8000e52:	b29b      	uxth	r3, r3
 8000e54:	7f7a      	ldrb	r2, [r7, #29]
 8000e56:	4313      	orrs	r3, r2
 8000e58:	b29a      	uxth	r2, r3
 8000e5a:	683b      	ldr	r3, [r7, #0]
 8000e5c:	829a      	strh	r2, [r3, #20]
}
 8000e5e:	bf00      	nop
 8000e60:	3720      	adds	r7, #32
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bd80      	pop	{r7, pc}
	...

08000e68 <get_uncomp_temp>:

uint16_t get_uncomp_temp(I2C_HandleTypeDef *hi2c, bmp_calib_t *bmp_calib_data)
{
 8000e68:	b5b0      	push	{r4, r5, r7, lr}
 8000e6a:	b08e      	sub	sp, #56	@ 0x38
 8000e6c:	af04      	add	r7, sp, #16
 8000e6e:	6078      	str	r0, [r7, #4]
 8000e70:	6039      	str	r1, [r7, #0]
	uint8_t raw_temp_data[2];
	uint8_t temp_write_val = TEMP_WRITE_VAL;
 8000e72:	232e      	movs	r3, #46	@ 0x2e
 8000e74:	73fb      	strb	r3, [r7, #15]

	HAL_I2C_Mem_Write(hi2c,BMP_ADDR,(uint16_t) TEMP_REG_ADDR,1,&temp_write_val,1,1000);
 8000e76:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e7a:	9302      	str	r3, [sp, #8]
 8000e7c:	2301      	movs	r3, #1
 8000e7e:	9301      	str	r3, [sp, #4]
 8000e80:	f107 030f 	add.w	r3, r7, #15
 8000e84:	9300      	str	r3, [sp, #0]
 8000e86:	2301      	movs	r3, #1
 8000e88:	22f4      	movs	r2, #244	@ 0xf4
 8000e8a:	21ee      	movs	r1, #238	@ 0xee
 8000e8c:	6878      	ldr	r0, [r7, #4]
 8000e8e:	f003 fc55 	bl	800473c <HAL_I2C_Mem_Write>
	HAL_Delay(5);
 8000e92:	2005      	movs	r0, #5
 8000e94:	f001 fe16 	bl	8002ac4 <HAL_Delay>
	HAL_I2C_Mem_Read(hi2c,BMP_ADDR,(uint16_t) TEMP_REG_ADDR,1,raw_temp_data,2,1000);
 8000e98:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e9c:	9302      	str	r3, [sp, #8]
 8000e9e:	2302      	movs	r3, #2
 8000ea0:	9301      	str	r3, [sp, #4]
 8000ea2:	f107 0310 	add.w	r3, r7, #16
 8000ea6:	9300      	str	r3, [sp, #0]
 8000ea8:	2301      	movs	r3, #1
 8000eaa:	22f4      	movs	r2, #244	@ 0xf4
 8000eac:	21ee      	movs	r1, #238	@ 0xee
 8000eae:	6878      	ldr	r0, [r7, #4]
 8000eb0:	f003 fd58 	bl	8004964 <HAL_I2C_Mem_Read>

	uint16_t uncomp_temp = (uint16_t) (raw_temp_data[0] << 8) | raw_temp_data[1];
 8000eb4:	7c3b      	ldrb	r3, [r7, #16]
 8000eb6:	021b      	lsls	r3, r3, #8
 8000eb8:	b29b      	uxth	r3, r3
 8000eba:	7c7a      	ldrb	r2, [r7, #17]
 8000ebc:	4313      	orrs	r3, r2
 8000ebe:	84fb      	strh	r3, [r7, #38]	@ 0x26


	float X1 = ((uncomp_temp-bmp_calib_data->AC6) * (bmp_calib_data->AC5/(pow(2,15))));
 8000ec0:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8000ec2:	683a      	ldr	r2, [r7, #0]
 8000ec4:	8952      	ldrh	r2, [r2, #10]
 8000ec6:	1a9b      	subs	r3, r3, r2
 8000ec8:	4618      	mov	r0, r3
 8000eca:	f7ff fad1 	bl	8000470 <__aeabi_i2d>
 8000ece:	4604      	mov	r4, r0
 8000ed0:	460d      	mov	r5, r1
 8000ed2:	683b      	ldr	r3, [r7, #0]
 8000ed4:	891b      	ldrh	r3, [r3, #8]
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	f7ff faca 	bl	8000470 <__aeabi_i2d>
 8000edc:	f04f 0200 	mov.w	r2, #0
 8000ee0:	4b36      	ldr	r3, [pc, #216]	@ (8000fbc <get_uncomp_temp+0x154>)
 8000ee2:	f7ff fc59 	bl	8000798 <__aeabi_ddiv>
 8000ee6:	4602      	mov	r2, r0
 8000ee8:	460b      	mov	r3, r1
 8000eea:	4620      	mov	r0, r4
 8000eec:	4629      	mov	r1, r5
 8000eee:	f7ff fb29 	bl	8000544 <__aeabi_dmul>
 8000ef2:	4602      	mov	r2, r0
 8000ef4:	460b      	mov	r3, r1
 8000ef6:	4610      	mov	r0, r2
 8000ef8:	4619      	mov	r1, r3
 8000efa:	f7ff fd7d 	bl	80009f8 <__aeabi_d2f>
 8000efe:	4603      	mov	r3, r0
 8000f00:	623b      	str	r3, [r7, #32]
	float X2 = ((bmp_calib_data->MC*(pow(2,11))) / (X1+bmp_calib_data->MD));
 8000f02:	683b      	ldr	r3, [r7, #0]
 8000f04:	8a5b      	ldrh	r3, [r3, #18]
 8000f06:	4618      	mov	r0, r3
 8000f08:	f7ff fab2 	bl	8000470 <__aeabi_i2d>
 8000f0c:	f04f 0200 	mov.w	r2, #0
 8000f10:	4b2b      	ldr	r3, [pc, #172]	@ (8000fc0 <get_uncomp_temp+0x158>)
 8000f12:	f7ff fb17 	bl	8000544 <__aeabi_dmul>
 8000f16:	4602      	mov	r2, r0
 8000f18:	460b      	mov	r3, r1
 8000f1a:	4614      	mov	r4, r2
 8000f1c:	461d      	mov	r5, r3
 8000f1e:	683b      	ldr	r3, [r7, #0]
 8000f20:	8a9b      	ldrh	r3, [r3, #20]
 8000f22:	ee07 3a90 	vmov	s15, r3
 8000f26:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000f2a:	edd7 7a08 	vldr	s15, [r7, #32]
 8000f2e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f32:	ee17 0a90 	vmov	r0, s15
 8000f36:	f7ff faad 	bl	8000494 <__aeabi_f2d>
 8000f3a:	4602      	mov	r2, r0
 8000f3c:	460b      	mov	r3, r1
 8000f3e:	4620      	mov	r0, r4
 8000f40:	4629      	mov	r1, r5
 8000f42:	f7ff fc29 	bl	8000798 <__aeabi_ddiv>
 8000f46:	4602      	mov	r2, r0
 8000f48:	460b      	mov	r3, r1
 8000f4a:	4610      	mov	r0, r2
 8000f4c:	4619      	mov	r1, r3
 8000f4e:	f7ff fd53 	bl	80009f8 <__aeabi_d2f>
 8000f52:	4603      	mov	r3, r0
 8000f54:	61fb      	str	r3, [r7, #28]
	float B5 = X1+X2;
 8000f56:	ed97 7a08 	vldr	s14, [r7, #32]
 8000f5a:	edd7 7a07 	vldr	s15, [r7, #28]
 8000f5e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f62:	edc7 7a06 	vstr	s15, [r7, #24]
	float comp_temp = ((B5+8)/(pow(2,4)))/10.0;
 8000f66:	edd7 7a06 	vldr	s15, [r7, #24]
 8000f6a:	eeb2 7a00 	vmov.f32	s14, #32	@ 0x41000000  8.0
 8000f6e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000f72:	ee17 0a90 	vmov	r0, s15
 8000f76:	f7ff fa8d 	bl	8000494 <__aeabi_f2d>
 8000f7a:	f04f 0200 	mov.w	r2, #0
 8000f7e:	4b11      	ldr	r3, [pc, #68]	@ (8000fc4 <get_uncomp_temp+0x15c>)
 8000f80:	f7ff fc0a 	bl	8000798 <__aeabi_ddiv>
 8000f84:	4602      	mov	r2, r0
 8000f86:	460b      	mov	r3, r1
 8000f88:	4610      	mov	r0, r2
 8000f8a:	4619      	mov	r1, r3
 8000f8c:	f04f 0200 	mov.w	r2, #0
 8000f90:	4b0d      	ldr	r3, [pc, #52]	@ (8000fc8 <get_uncomp_temp+0x160>)
 8000f92:	f7ff fc01 	bl	8000798 <__aeabi_ddiv>
 8000f96:	4602      	mov	r2, r0
 8000f98:	460b      	mov	r3, r1
 8000f9a:	4610      	mov	r0, r2
 8000f9c:	4619      	mov	r1, r3
 8000f9e:	f7ff fd2b 	bl	80009f8 <__aeabi_d2f>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	617b      	str	r3, [r7, #20]
	return comp_temp;
 8000fa6:	edd7 7a05 	vldr	s15, [r7, #20]
 8000faa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000fae:	ee17 3a90 	vmov	r3, s15
 8000fb2:	b29b      	uxth	r3, r3
}
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	3728      	adds	r7, #40	@ 0x28
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bdb0      	pop	{r4, r5, r7, pc}
 8000fbc:	40e00000 	.word	0x40e00000
 8000fc0:	40a00000 	.word	0x40a00000
 8000fc4:	40300000 	.word	0x40300000
 8000fc8:	40240000 	.word	0x40240000

08000fcc <get_uncomp_press>:

uint32_t get_uncomp_press(I2C_HandleTypeDef *hi2c, bmp_calib_t *bmp_calib_data)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b08a      	sub	sp, #40	@ 0x28
 8000fd0:	af04      	add	r7, sp, #16
 8000fd2:	6078      	str	r0, [r7, #4]
 8000fd4:	6039      	str	r1, [r7, #0]
	uint8_t raw_comp_press_data[3];
	uint8_t comp_press_write_data = TEMP_WRITE_VAL + (OSS << 6);
 8000fd6:	232e      	movs	r3, #46	@ 0x2e
 8000fd8:	73fb      	strb	r3, [r7, #15]

	HAL_I2C_Mem_Write(hi2c,BMP_ADDR,(uint16_t) TEMP_REG_ADDR,1,&comp_press_write_data,1,1000);
 8000fda:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000fde:	9302      	str	r3, [sp, #8]
 8000fe0:	2301      	movs	r3, #1
 8000fe2:	9301      	str	r3, [sp, #4]
 8000fe4:	f107 030f 	add.w	r3, r7, #15
 8000fe8:	9300      	str	r3, [sp, #0]
 8000fea:	2301      	movs	r3, #1
 8000fec:	22f4      	movs	r2, #244	@ 0xf4
 8000fee:	21ee      	movs	r1, #238	@ 0xee
 8000ff0:	6878      	ldr	r0, [r7, #4]
 8000ff2:	f003 fba3 	bl	800473c <HAL_I2C_Mem_Write>

	switch (OSS)
	{
		case (0):
			HAL_Delay (5);
 8000ff6:	2005      	movs	r0, #5
 8000ff8:	f001 fd64 	bl	8002ac4 <HAL_Delay>
			break;
 8000ffc:	bf00      	nop
		case (3):
			HAL_Delay (26);
			break;
	}

	HAL_I2C_Mem_Read(hi2c,BMP_ADDR,(uint16_t) PRESS_REG_ADDR,1,raw_comp_press_data,3,1000);
 8000ffe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001002:	9302      	str	r3, [sp, #8]
 8001004:	2303      	movs	r3, #3
 8001006:	9301      	str	r3, [sp, #4]
 8001008:	f107 0310 	add.w	r3, r7, #16
 800100c:	9300      	str	r3, [sp, #0]
 800100e:	2301      	movs	r3, #1
 8001010:	22f6      	movs	r2, #246	@ 0xf6
 8001012:	21ee      	movs	r1, #238	@ 0xee
 8001014:	6878      	ldr	r0, [r7, #4]
 8001016:	f003 fca5 	bl	8004964 <HAL_I2C_Mem_Read>

	uint32_t uncomp_press = (((raw_comp_press_data[0]<<16)+(raw_comp_press_data[1]<<8)+raw_comp_press_data[2]) >> (8-OSS));
 800101a:	7c3b      	ldrb	r3, [r7, #16]
 800101c:	041a      	lsls	r2, r3, #16
 800101e:	7c7b      	ldrb	r3, [r7, #17]
 8001020:	021b      	lsls	r3, r3, #8
 8001022:	4413      	add	r3, r2
 8001024:	7cba      	ldrb	r2, [r7, #18]
 8001026:	4413      	add	r3, r2
 8001028:	121b      	asrs	r3, r3, #8
 800102a:	617b      	str	r3, [r7, #20]
	return uncomp_press;
 800102c:	697b      	ldr	r3, [r7, #20]

}
 800102e:	4618      	mov	r0, r3
 8001030:	3718      	adds	r7, #24
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}
	...

08001038 <get_comp_temp>:

float get_comp_temp(uint16_t uncomp_temp, bmp_calib_t *bmp_calib_data)
{
 8001038:	b5b0      	push	{r4, r5, r7, lr}
 800103a:	b086      	sub	sp, #24
 800103c:	af00      	add	r7, sp, #0
 800103e:	4603      	mov	r3, r0
 8001040:	6039      	str	r1, [r7, #0]
 8001042:	80fb      	strh	r3, [r7, #6]
	int32_t X1 = ((uncomp_temp-bmp_calib_data->AC6) * (bmp_calib_data->AC5/(pow(2,15))));
 8001044:	88fb      	ldrh	r3, [r7, #6]
 8001046:	683a      	ldr	r2, [r7, #0]
 8001048:	8952      	ldrh	r2, [r2, #10]
 800104a:	1a9b      	subs	r3, r3, r2
 800104c:	4618      	mov	r0, r3
 800104e:	f7ff fa0f 	bl	8000470 <__aeabi_i2d>
 8001052:	4604      	mov	r4, r0
 8001054:	460d      	mov	r5, r1
 8001056:	683b      	ldr	r3, [r7, #0]
 8001058:	891b      	ldrh	r3, [r3, #8]
 800105a:	4618      	mov	r0, r3
 800105c:	f7ff fa08 	bl	8000470 <__aeabi_i2d>
 8001060:	f04f 0200 	mov.w	r2, #0
 8001064:	4b2d      	ldr	r3, [pc, #180]	@ (800111c <get_comp_temp+0xe4>)
 8001066:	f7ff fb97 	bl	8000798 <__aeabi_ddiv>
 800106a:	4602      	mov	r2, r0
 800106c:	460b      	mov	r3, r1
 800106e:	4620      	mov	r0, r4
 8001070:	4629      	mov	r1, r5
 8001072:	f7ff fa67 	bl	8000544 <__aeabi_dmul>
 8001076:	4602      	mov	r2, r0
 8001078:	460b      	mov	r3, r1
 800107a:	4610      	mov	r0, r2
 800107c:	4619      	mov	r1, r3
 800107e:	f7ff fc73 	bl	8000968 <__aeabi_d2iz>
 8001082:	4603      	mov	r3, r0
 8001084:	617b      	str	r3, [r7, #20]
	int32_t X2 = ((bmp_calib_data->MC*(pow(2,11))) / (X1+bmp_calib_data->MD));
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	8a5b      	ldrh	r3, [r3, #18]
 800108a:	4618      	mov	r0, r3
 800108c:	f7ff f9f0 	bl	8000470 <__aeabi_i2d>
 8001090:	f04f 0200 	mov.w	r2, #0
 8001094:	4b22      	ldr	r3, [pc, #136]	@ (8001120 <get_comp_temp+0xe8>)
 8001096:	f7ff fa55 	bl	8000544 <__aeabi_dmul>
 800109a:	4602      	mov	r2, r0
 800109c:	460b      	mov	r3, r1
 800109e:	4614      	mov	r4, r2
 80010a0:	461d      	mov	r5, r3
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	8a9b      	ldrh	r3, [r3, #20]
 80010a6:	461a      	mov	r2, r3
 80010a8:	697b      	ldr	r3, [r7, #20]
 80010aa:	4413      	add	r3, r2
 80010ac:	4618      	mov	r0, r3
 80010ae:	f7ff f9df 	bl	8000470 <__aeabi_i2d>
 80010b2:	4602      	mov	r2, r0
 80010b4:	460b      	mov	r3, r1
 80010b6:	4620      	mov	r0, r4
 80010b8:	4629      	mov	r1, r5
 80010ba:	f7ff fb6d 	bl	8000798 <__aeabi_ddiv>
 80010be:	4602      	mov	r2, r0
 80010c0:	460b      	mov	r3, r1
 80010c2:	4610      	mov	r0, r2
 80010c4:	4619      	mov	r1, r3
 80010c6:	f7ff fc4f 	bl	8000968 <__aeabi_d2iz>
 80010ca:	4603      	mov	r3, r0
 80010cc:	613b      	str	r3, [r7, #16]
	int32_t B5 = X1+X2;
 80010ce:	697a      	ldr	r2, [r7, #20]
 80010d0:	693b      	ldr	r3, [r7, #16]
 80010d2:	4413      	add	r3, r2
 80010d4:	60fb      	str	r3, [r7, #12]
	float comp_temp = ((B5+8)/(pow(2,4)))/10.0;
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	3308      	adds	r3, #8
 80010da:	4618      	mov	r0, r3
 80010dc:	f7ff f9c8 	bl	8000470 <__aeabi_i2d>
 80010e0:	f04f 0200 	mov.w	r2, #0
 80010e4:	4b0f      	ldr	r3, [pc, #60]	@ (8001124 <get_comp_temp+0xec>)
 80010e6:	f7ff fb57 	bl	8000798 <__aeabi_ddiv>
 80010ea:	4602      	mov	r2, r0
 80010ec:	460b      	mov	r3, r1
 80010ee:	4610      	mov	r0, r2
 80010f0:	4619      	mov	r1, r3
 80010f2:	f04f 0200 	mov.w	r2, #0
 80010f6:	4b0c      	ldr	r3, [pc, #48]	@ (8001128 <get_comp_temp+0xf0>)
 80010f8:	f7ff fb4e 	bl	8000798 <__aeabi_ddiv>
 80010fc:	4602      	mov	r2, r0
 80010fe:	460b      	mov	r3, r1
 8001100:	4610      	mov	r0, r2
 8001102:	4619      	mov	r1, r3
 8001104:	f7ff fc78 	bl	80009f8 <__aeabi_d2f>
 8001108:	4603      	mov	r3, r0
 800110a:	60bb      	str	r3, [r7, #8]
	return comp_temp;
 800110c:	68bb      	ldr	r3, [r7, #8]
 800110e:	ee07 3a90 	vmov	s15, r3
}
 8001112:	eeb0 0a67 	vmov.f32	s0, s15
 8001116:	3718      	adds	r7, #24
 8001118:	46bd      	mov	sp, r7
 800111a:	bdb0      	pop	{r4, r5, r7, pc}
 800111c:	40e00000 	.word	0x40e00000
 8001120:	40a00000 	.word	0x40a00000
 8001124:	40300000 	.word	0x40300000
 8001128:	40240000 	.word	0x40240000

0800112c <get_comp_press>:

float get_comp_press(uint16_t uncomp_press, uint16_t uncomp_temp, bmp_calib_t *bmp_calib_data)
{
 800112c:	b5b0      	push	{r4, r5, r7, lr}
 800112e:	b08c      	sub	sp, #48	@ 0x30
 8001130:	af00      	add	r7, sp, #0
 8001132:	4603      	mov	r3, r0
 8001134:	603a      	str	r2, [r7, #0]
 8001136:	80fb      	strh	r3, [r7, #6]
 8001138:	460b      	mov	r3, r1
 800113a:	80bb      	strh	r3, [r7, #4]
	float comp_press = 0.0;
 800113c:	f04f 0300 	mov.w	r3, #0
 8001140:	62fb      	str	r3, [r7, #44]	@ 0x2c
	int32_t X1 = ((uncomp_temp-bmp_calib_data->AC6) * (bmp_calib_data->AC5/(pow(2,15))));
 8001142:	88bb      	ldrh	r3, [r7, #4]
 8001144:	683a      	ldr	r2, [r7, #0]
 8001146:	8952      	ldrh	r2, [r2, #10]
 8001148:	1a9b      	subs	r3, r3, r2
 800114a:	4618      	mov	r0, r3
 800114c:	f7ff f990 	bl	8000470 <__aeabi_i2d>
 8001150:	4604      	mov	r4, r0
 8001152:	460d      	mov	r5, r1
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	891b      	ldrh	r3, [r3, #8]
 8001158:	4618      	mov	r0, r3
 800115a:	f7ff f989 	bl	8000470 <__aeabi_i2d>
 800115e:	f04f 0200 	mov.w	r2, #0
 8001162:	4bc7      	ldr	r3, [pc, #796]	@ (8001480 <get_comp_press+0x354>)
 8001164:	f7ff fb18 	bl	8000798 <__aeabi_ddiv>
 8001168:	4602      	mov	r2, r0
 800116a:	460b      	mov	r3, r1
 800116c:	4620      	mov	r0, r4
 800116e:	4629      	mov	r1, r5
 8001170:	f7ff f9e8 	bl	8000544 <__aeabi_dmul>
 8001174:	4602      	mov	r2, r0
 8001176:	460b      	mov	r3, r1
 8001178:	4610      	mov	r0, r2
 800117a:	4619      	mov	r1, r3
 800117c:	f7ff fbf4 	bl	8000968 <__aeabi_d2iz>
 8001180:	4603      	mov	r3, r0
 8001182:	62bb      	str	r3, [r7, #40]	@ 0x28
	int32_t X2 = ((bmp_calib_data->MC*(pow(2,11))) / (X1+bmp_calib_data->MD));
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	8a5b      	ldrh	r3, [r3, #18]
 8001188:	4618      	mov	r0, r3
 800118a:	f7ff f971 	bl	8000470 <__aeabi_i2d>
 800118e:	f04f 0200 	mov.w	r2, #0
 8001192:	4bbc      	ldr	r3, [pc, #752]	@ (8001484 <get_comp_press+0x358>)
 8001194:	f7ff f9d6 	bl	8000544 <__aeabi_dmul>
 8001198:	4602      	mov	r2, r0
 800119a:	460b      	mov	r3, r1
 800119c:	4614      	mov	r4, r2
 800119e:	461d      	mov	r5, r3
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	8a9b      	ldrh	r3, [r3, #20]
 80011a4:	461a      	mov	r2, r3
 80011a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80011a8:	4413      	add	r3, r2
 80011aa:	4618      	mov	r0, r3
 80011ac:	f7ff f960 	bl	8000470 <__aeabi_i2d>
 80011b0:	4602      	mov	r2, r0
 80011b2:	460b      	mov	r3, r1
 80011b4:	4620      	mov	r0, r4
 80011b6:	4629      	mov	r1, r5
 80011b8:	f7ff faee 	bl	8000798 <__aeabi_ddiv>
 80011bc:	4602      	mov	r2, r0
 80011be:	460b      	mov	r3, r1
 80011c0:	4610      	mov	r0, r2
 80011c2:	4619      	mov	r1, r3
 80011c4:	f7ff fbd0 	bl	8000968 <__aeabi_d2iz>
 80011c8:	4603      	mov	r3, r0
 80011ca:	627b      	str	r3, [r7, #36]	@ 0x24
	int32_t B5 = X1+X2;
 80011cc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80011ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011d0:	4413      	add	r3, r2
 80011d2:	623b      	str	r3, [r7, #32]
	int32_t B6 = B5-4000;
 80011d4:	6a3b      	ldr	r3, [r7, #32]
 80011d6:	f5a3 637a 	sub.w	r3, r3, #4000	@ 0xfa0
 80011da:	61fb      	str	r3, [r7, #28]
	X1 = (bmp_calib_data->B2 * (B6*B6/(pow(2,12))))/(pow(2,11));
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	89db      	ldrh	r3, [r3, #14]
 80011e0:	4618      	mov	r0, r3
 80011e2:	f7ff f945 	bl	8000470 <__aeabi_i2d>
 80011e6:	4604      	mov	r4, r0
 80011e8:	460d      	mov	r5, r1
 80011ea:	69fb      	ldr	r3, [r7, #28]
 80011ec:	fb03 f303 	mul.w	r3, r3, r3
 80011f0:	4618      	mov	r0, r3
 80011f2:	f7ff f93d 	bl	8000470 <__aeabi_i2d>
 80011f6:	f04f 0200 	mov.w	r2, #0
 80011fa:	4ba3      	ldr	r3, [pc, #652]	@ (8001488 <get_comp_press+0x35c>)
 80011fc:	f7ff facc 	bl	8000798 <__aeabi_ddiv>
 8001200:	4602      	mov	r2, r0
 8001202:	460b      	mov	r3, r1
 8001204:	4620      	mov	r0, r4
 8001206:	4629      	mov	r1, r5
 8001208:	f7ff f99c 	bl	8000544 <__aeabi_dmul>
 800120c:	4602      	mov	r2, r0
 800120e:	460b      	mov	r3, r1
 8001210:	4610      	mov	r0, r2
 8001212:	4619      	mov	r1, r3
 8001214:	f04f 0200 	mov.w	r2, #0
 8001218:	4b9a      	ldr	r3, [pc, #616]	@ (8001484 <get_comp_press+0x358>)
 800121a:	f7ff fabd 	bl	8000798 <__aeabi_ddiv>
 800121e:	4602      	mov	r2, r0
 8001220:	460b      	mov	r3, r1
 8001222:	4610      	mov	r0, r2
 8001224:	4619      	mov	r1, r3
 8001226:	f7ff fb9f 	bl	8000968 <__aeabi_d2iz>
 800122a:	4603      	mov	r3, r0
 800122c:	62bb      	str	r3, [r7, #40]	@ 0x28
	X2 = bmp_calib_data->AC2*B6/(pow(2,11));
 800122e:	683b      	ldr	r3, [r7, #0]
 8001230:	885b      	ldrh	r3, [r3, #2]
 8001232:	461a      	mov	r2, r3
 8001234:	69fb      	ldr	r3, [r7, #28]
 8001236:	fb02 f303 	mul.w	r3, r2, r3
 800123a:	4618      	mov	r0, r3
 800123c:	f7ff f918 	bl	8000470 <__aeabi_i2d>
 8001240:	f04f 0200 	mov.w	r2, #0
 8001244:	4b8f      	ldr	r3, [pc, #572]	@ (8001484 <get_comp_press+0x358>)
 8001246:	f7ff faa7 	bl	8000798 <__aeabi_ddiv>
 800124a:	4602      	mov	r2, r0
 800124c:	460b      	mov	r3, r1
 800124e:	4610      	mov	r0, r2
 8001250:	4619      	mov	r1, r3
 8001252:	f7ff fb89 	bl	8000968 <__aeabi_d2iz>
 8001256:	4603      	mov	r3, r0
 8001258:	627b      	str	r3, [r7, #36]	@ 0x24
	int32_t X3 = X1+X2;
 800125a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800125c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800125e:	4413      	add	r3, r2
 8001260:	61bb      	str	r3, [r7, #24]
	int32_t B3 = (((bmp_calib_data->AC1*4+X3)<<OSS)+2)/4;
 8001262:	683b      	ldr	r3, [r7, #0]
 8001264:	881b      	ldrh	r3, [r3, #0]
 8001266:	009a      	lsls	r2, r3, #2
 8001268:	69bb      	ldr	r3, [r7, #24]
 800126a:	4413      	add	r3, r2
 800126c:	3302      	adds	r3, #2
 800126e:	2b00      	cmp	r3, #0
 8001270:	da00      	bge.n	8001274 <get_comp_press+0x148>
 8001272:	3303      	adds	r3, #3
 8001274:	109b      	asrs	r3, r3, #2
 8001276:	617b      	str	r3, [r7, #20]
	X1 = bmp_calib_data->AC3*B6/pow(2,13);
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	889b      	ldrh	r3, [r3, #4]
 800127c:	461a      	mov	r2, r3
 800127e:	69fb      	ldr	r3, [r7, #28]
 8001280:	fb02 f303 	mul.w	r3, r2, r3
 8001284:	4618      	mov	r0, r3
 8001286:	f7ff f8f3 	bl	8000470 <__aeabi_i2d>
 800128a:	f04f 0200 	mov.w	r2, #0
 800128e:	4b7f      	ldr	r3, [pc, #508]	@ (800148c <get_comp_press+0x360>)
 8001290:	f7ff fa82 	bl	8000798 <__aeabi_ddiv>
 8001294:	4602      	mov	r2, r0
 8001296:	460b      	mov	r3, r1
 8001298:	4610      	mov	r0, r2
 800129a:	4619      	mov	r1, r3
 800129c:	f7ff fb64 	bl	8000968 <__aeabi_d2iz>
 80012a0:	4603      	mov	r3, r0
 80012a2:	62bb      	str	r3, [r7, #40]	@ 0x28
	X2 = (bmp_calib_data->B1 * (B6*B6/(pow(2,12))))/(pow(2,16));
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	899b      	ldrh	r3, [r3, #12]
 80012a8:	4618      	mov	r0, r3
 80012aa:	f7ff f8e1 	bl	8000470 <__aeabi_i2d>
 80012ae:	4604      	mov	r4, r0
 80012b0:	460d      	mov	r5, r1
 80012b2:	69fb      	ldr	r3, [r7, #28]
 80012b4:	fb03 f303 	mul.w	r3, r3, r3
 80012b8:	4618      	mov	r0, r3
 80012ba:	f7ff f8d9 	bl	8000470 <__aeabi_i2d>
 80012be:	f04f 0200 	mov.w	r2, #0
 80012c2:	4b71      	ldr	r3, [pc, #452]	@ (8001488 <get_comp_press+0x35c>)
 80012c4:	f7ff fa68 	bl	8000798 <__aeabi_ddiv>
 80012c8:	4602      	mov	r2, r0
 80012ca:	460b      	mov	r3, r1
 80012cc:	4620      	mov	r0, r4
 80012ce:	4629      	mov	r1, r5
 80012d0:	f7ff f938 	bl	8000544 <__aeabi_dmul>
 80012d4:	4602      	mov	r2, r0
 80012d6:	460b      	mov	r3, r1
 80012d8:	4610      	mov	r0, r2
 80012da:	4619      	mov	r1, r3
 80012dc:	f04f 0200 	mov.w	r2, #0
 80012e0:	4b6b      	ldr	r3, [pc, #428]	@ (8001490 <get_comp_press+0x364>)
 80012e2:	f7ff fa59 	bl	8000798 <__aeabi_ddiv>
 80012e6:	4602      	mov	r2, r0
 80012e8:	460b      	mov	r3, r1
 80012ea:	4610      	mov	r0, r2
 80012ec:	4619      	mov	r1, r3
 80012ee:	f7ff fb3b 	bl	8000968 <__aeabi_d2iz>
 80012f2:	4603      	mov	r3, r0
 80012f4:	627b      	str	r3, [r7, #36]	@ 0x24
	X3 = ((X1+X2)+2)/pow(2,2);
 80012f6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80012f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012fa:	4413      	add	r3, r2
 80012fc:	3302      	adds	r3, #2
 80012fe:	4618      	mov	r0, r3
 8001300:	f7ff f8b6 	bl	8000470 <__aeabi_i2d>
 8001304:	f04f 0200 	mov.w	r2, #0
 8001308:	4b62      	ldr	r3, [pc, #392]	@ (8001494 <get_comp_press+0x368>)
 800130a:	f7ff fa45 	bl	8000798 <__aeabi_ddiv>
 800130e:	4602      	mov	r2, r0
 8001310:	460b      	mov	r3, r1
 8001312:	4610      	mov	r0, r2
 8001314:	4619      	mov	r1, r3
 8001316:	f7ff fb27 	bl	8000968 <__aeabi_d2iz>
 800131a:	4603      	mov	r3, r0
 800131c:	61bb      	str	r3, [r7, #24]
	uint32_t B4 = bmp_calib_data->AC4*(uint32_t)(X3+32768)/(pow(2,15));
 800131e:	683b      	ldr	r3, [r7, #0]
 8001320:	88db      	ldrh	r3, [r3, #6]
 8001322:	461a      	mov	r2, r3
 8001324:	69bb      	ldr	r3, [r7, #24]
 8001326:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 800132a:	fb02 f303 	mul.w	r3, r2, r3
 800132e:	4618      	mov	r0, r3
 8001330:	f7ff f88e 	bl	8000450 <__aeabi_ui2d>
 8001334:	f04f 0200 	mov.w	r2, #0
 8001338:	4b51      	ldr	r3, [pc, #324]	@ (8001480 <get_comp_press+0x354>)
 800133a:	f7ff fa2d 	bl	8000798 <__aeabi_ddiv>
 800133e:	4602      	mov	r2, r0
 8001340:	460b      	mov	r3, r1
 8001342:	4610      	mov	r0, r2
 8001344:	4619      	mov	r1, r3
 8001346:	f7ff fb37 	bl	80009b8 <__aeabi_d2uiz>
 800134a:	4603      	mov	r3, r0
 800134c:	613b      	str	r3, [r7, #16]
	int32_t B7 = ((uint32_t)uncomp_press-B3)*(50000>>OSS);
 800134e:	88fa      	ldrh	r2, [r7, #6]
 8001350:	697b      	ldr	r3, [r7, #20]
 8001352:	1ad3      	subs	r3, r2, r3
 8001354:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8001358:	fb02 f303 	mul.w	r3, r2, r3
 800135c:	60fb      	str	r3, [r7, #12]

	if (B7<0x80000000)
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	2b00      	cmp	r3, #0
 8001362:	db0c      	blt.n	800137e <get_comp_press+0x252>
		comp_press = (B7*2)/B4;
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	005b      	lsls	r3, r3, #1
 8001368:	461a      	mov	r2, r3
 800136a:	693b      	ldr	r3, [r7, #16]
 800136c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001370:	ee07 3a90 	vmov	s15, r3
 8001374:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001378:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
 800137c:	e00a      	b.n	8001394 <get_comp_press+0x268>
	else
		comp_press = (B7/B4)*2;
 800137e:	68fa      	ldr	r2, [r7, #12]
 8001380:	693b      	ldr	r3, [r7, #16]
 8001382:	fbb2 f3f3 	udiv	r3, r2, r3
 8001386:	005b      	lsls	r3, r3, #1
 8001388:	ee07 3a90 	vmov	s15, r3
 800138c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001390:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c

	X1 = (comp_press/(pow(2,8)))*(comp_press/(pow(2,8)));
 8001394:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8001396:	f7ff f87d 	bl	8000494 <__aeabi_f2d>
 800139a:	f04f 0200 	mov.w	r2, #0
 800139e:	4b3e      	ldr	r3, [pc, #248]	@ (8001498 <get_comp_press+0x36c>)
 80013a0:	f7ff f9fa 	bl	8000798 <__aeabi_ddiv>
 80013a4:	4602      	mov	r2, r0
 80013a6:	460b      	mov	r3, r1
 80013a8:	4614      	mov	r4, r2
 80013aa:	461d      	mov	r5, r3
 80013ac:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80013ae:	f7ff f871 	bl	8000494 <__aeabi_f2d>
 80013b2:	f04f 0200 	mov.w	r2, #0
 80013b6:	4b38      	ldr	r3, [pc, #224]	@ (8001498 <get_comp_press+0x36c>)
 80013b8:	f7ff f9ee 	bl	8000798 <__aeabi_ddiv>
 80013bc:	4602      	mov	r2, r0
 80013be:	460b      	mov	r3, r1
 80013c0:	4620      	mov	r0, r4
 80013c2:	4629      	mov	r1, r5
 80013c4:	f7ff f8be 	bl	8000544 <__aeabi_dmul>
 80013c8:	4602      	mov	r2, r0
 80013ca:	460b      	mov	r3, r1
 80013cc:	4610      	mov	r0, r2
 80013ce:	4619      	mov	r1, r3
 80013d0:	f7ff faca 	bl	8000968 <__aeabi_d2iz>
 80013d4:	4603      	mov	r3, r0
 80013d6:	62bb      	str	r3, [r7, #40]	@ 0x28
	X1 = (X1*3038)/(pow(2,16));
 80013d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80013da:	f640 32de 	movw	r2, #3038	@ 0xbde
 80013de:	fb02 f303 	mul.w	r3, r2, r3
 80013e2:	4618      	mov	r0, r3
 80013e4:	f7ff f844 	bl	8000470 <__aeabi_i2d>
 80013e8:	f04f 0200 	mov.w	r2, #0
 80013ec:	4b28      	ldr	r3, [pc, #160]	@ (8001490 <get_comp_press+0x364>)
 80013ee:	f7ff f9d3 	bl	8000798 <__aeabi_ddiv>
 80013f2:	4602      	mov	r2, r0
 80013f4:	460b      	mov	r3, r1
 80013f6:	4610      	mov	r0, r2
 80013f8:	4619      	mov	r1, r3
 80013fa:	f7ff fab5 	bl	8000968 <__aeabi_d2iz>
 80013fe:	4603      	mov	r3, r0
 8001400:	62bb      	str	r3, [r7, #40]	@ 0x28
	X2 = (-7357*comp_press)/(pow(2,16));
 8001402:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001406:	ed9f 7a25 	vldr	s14, [pc, #148]	@ 800149c <get_comp_press+0x370>
 800140a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800140e:	ee17 0a90 	vmov	r0, s15
 8001412:	f7ff f83f 	bl	8000494 <__aeabi_f2d>
 8001416:	f04f 0200 	mov.w	r2, #0
 800141a:	4b1d      	ldr	r3, [pc, #116]	@ (8001490 <get_comp_press+0x364>)
 800141c:	f7ff f9bc 	bl	8000798 <__aeabi_ddiv>
 8001420:	4602      	mov	r2, r0
 8001422:	460b      	mov	r3, r1
 8001424:	4610      	mov	r0, r2
 8001426:	4619      	mov	r1, r3
 8001428:	f7ff fa9e 	bl	8000968 <__aeabi_d2iz>
 800142c:	4603      	mov	r3, r0
 800142e:	627b      	str	r3, [r7, #36]	@ 0x24
	comp_press = comp_press + (X1+X2+3791)/(pow(2,4));
 8001430:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8001432:	f7ff f82f 	bl	8000494 <__aeabi_f2d>
 8001436:	4604      	mov	r4, r0
 8001438:	460d      	mov	r5, r1
 800143a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800143c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800143e:	4413      	add	r3, r2
 8001440:	f603 63cf 	addw	r3, r3, #3791	@ 0xecf
 8001444:	4618      	mov	r0, r3
 8001446:	f7ff f813 	bl	8000470 <__aeabi_i2d>
 800144a:	f04f 0200 	mov.w	r2, #0
 800144e:	4b14      	ldr	r3, [pc, #80]	@ (80014a0 <get_comp_press+0x374>)
 8001450:	f7ff f9a2 	bl	8000798 <__aeabi_ddiv>
 8001454:	4602      	mov	r2, r0
 8001456:	460b      	mov	r3, r1
 8001458:	4620      	mov	r0, r4
 800145a:	4629      	mov	r1, r5
 800145c:	f7fe febc 	bl	80001d8 <__adddf3>
 8001460:	4602      	mov	r2, r0
 8001462:	460b      	mov	r3, r1
 8001464:	4610      	mov	r0, r2
 8001466:	4619      	mov	r1, r3
 8001468:	f7ff fac6 	bl	80009f8 <__aeabi_d2f>
 800146c:	4603      	mov	r3, r0
 800146e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	return comp_press;
 8001470:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001472:	ee07 3a90 	vmov	s15, r3
}
 8001476:	eeb0 0a67 	vmov.f32	s0, s15
 800147a:	3730      	adds	r7, #48	@ 0x30
 800147c:	46bd      	mov	sp, r7
 800147e:	bdb0      	pop	{r4, r5, r7, pc}
 8001480:	40e00000 	.word	0x40e00000
 8001484:	40a00000 	.word	0x40a00000
 8001488:	40b00000 	.word	0x40b00000
 800148c:	40c00000 	.word	0x40c00000
 8001490:	40f00000 	.word	0x40f00000
 8001494:	40100000 	.word	0x40100000
 8001498:	40700000 	.word	0x40700000
 800149c:	c5e5e800 	.word	0xc5e5e800
 80014a0:	40300000 	.word	0x40300000

080014a4 <HAL_DelayUs>:
		"TIMEOUT",
		"ERROR",
		"CHECKSUM MISMATCH"
};

static void HAL_DelayUs(TIM_HandleTypeDef *tim, uint16_t us) {
 80014a4:	b480      	push	{r7}
 80014a6:	b083      	sub	sp, #12
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
 80014ac:	460b      	mov	r3, r1
 80014ae:	807b      	strh	r3, [r7, #2]
	__HAL_TIM_SET_COUNTER(tim, 0);
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	2200      	movs	r2, #0
 80014b6:	625a      	str	r2, [r3, #36]	@ 0x24
	while(__HAL_TIM_GET_COUNTER(tim) < us);
 80014b8:	bf00      	nop
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80014c0:	887b      	ldrh	r3, [r7, #2]
 80014c2:	429a      	cmp	r2, r3
 80014c4:	d3f9      	bcc.n	80014ba <HAL_DelayUs+0x16>
}
 80014c6:	bf00      	nop
 80014c8:	bf00      	nop
 80014ca:	370c      	adds	r7, #12
 80014cc:	46bd      	mov	sp, r7
 80014ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d2:	4770      	bx	lr

080014d4 <DHT11_ObserveState>:

static bool DHT11_ObserveState(DHT11_InitTypeDef *DHT11, uint8_t FinalState) {
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b082      	sub	sp, #8
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
 80014dc:	460b      	mov	r3, r1
 80014de:	70fb      	strb	r3, [r7, #3]
	__HAL_TIM_SET_COUNTER(DHT11->_Tim, 0);
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	691b      	ldr	r3, [r3, #16]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	2200      	movs	r2, #0
 80014e8:	625a      	str	r2, [r3, #36]	@ 0x24
	while(__HAL_TIM_GET_COUNTER(DHT11->_Tim) < DHT11_MAX_TIMEOUT) {
 80014ea:	e00e      	b.n	800150a <DHT11_ObserveState+0x36>
		if(HAL_GPIO_ReadPin(DHT11->_GPIOx, DHT11->_Pin) == FinalState) return true;
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	68da      	ldr	r2, [r3, #12]
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	895b      	ldrh	r3, [r3, #10]
 80014f4:	4619      	mov	r1, r3
 80014f6:	4610      	mov	r0, r2
 80014f8:	f003 f83a 	bl	8004570 <HAL_GPIO_ReadPin>
 80014fc:	4603      	mov	r3, r0
 80014fe:	461a      	mov	r2, r3
 8001500:	78fb      	ldrb	r3, [r7, #3]
 8001502:	4293      	cmp	r3, r2
 8001504:	d101      	bne.n	800150a <DHT11_ObserveState+0x36>
 8001506:	2301      	movs	r3, #1
 8001508:	e006      	b.n	8001518 <DHT11_ObserveState+0x44>
	while(__HAL_TIM_GET_COUNTER(DHT11->_Tim) < DHT11_MAX_TIMEOUT) {
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	691b      	ldr	r3, [r3, #16]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001512:	2b63      	cmp	r3, #99	@ 0x63
 8001514:	d9ea      	bls.n	80014ec <DHT11_ObserveState+0x18>
	}

	return false;
 8001516:	2300      	movs	r3, #0
}
 8001518:	4618      	mov	r0, r3
 800151a:	3708      	adds	r7, #8
 800151c:	46bd      	mov	sp, r7
 800151e:	bd80      	pop	{r7, pc}

08001520 <DHT11_SetPinMode>:

static void DHT11_SetPinMode(DHT11_InitTypeDef *DHT11, uint8_t MODE) {
 8001520:	b580      	push	{r7, lr}
 8001522:	b088      	sub	sp, #32
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
 8001528:	460b      	mov	r3, r1
 800152a:	70fb      	strb	r3, [r7, #3]
	GPIO_InitTypeDef GPIO_CFG = {
 800152c:	f107 030c 	add.w	r3, r7, #12
 8001530:	2200      	movs	r2, #0
 8001532:	601a      	str	r2, [r3, #0]
 8001534:	605a      	str	r2, [r3, #4]
 8001536:	609a      	str	r2, [r3, #8]
 8001538:	60da      	str	r2, [r3, #12]
 800153a:	611a      	str	r2, [r3, #16]
			.Mode = MODE?GPIO_MODE_INPUT:GPIO_MODE_OUTPUT_PP,
			.Pin = DHT11->_Pin,
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	895b      	ldrh	r3, [r3, #10]
	GPIO_InitTypeDef GPIO_CFG = {
 8001540:	60fb      	str	r3, [r7, #12]
			.Mode = MODE?GPIO_MODE_INPUT:GPIO_MODE_OUTPUT_PP,
 8001542:	78fb      	ldrb	r3, [r7, #3]
 8001544:	2b00      	cmp	r3, #0
 8001546:	bf0c      	ite	eq
 8001548:	2301      	moveq	r3, #1
 800154a:	2300      	movne	r3, #0
 800154c:	b2db      	uxtb	r3, r3
	GPIO_InitTypeDef GPIO_CFG = {
 800154e:	613b      	str	r3, [r7, #16]
			.Pull = GPIO_NOPULL,
			.Speed = GPIO_SPEED_FREQ_LOW
	};

	HAL_GPIO_Init(DHT11->_GPIOx, &GPIO_CFG);
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	68db      	ldr	r3, [r3, #12]
 8001554:	f107 020c 	add.w	r2, r7, #12
 8001558:	4611      	mov	r1, r2
 800155a:	4618      	mov	r0, r3
 800155c:	f002 fe9e 	bl	800429c <HAL_GPIO_Init>
}
 8001560:	bf00      	nop
 8001562:	3720      	adds	r7, #32
 8001564:	46bd      	mov	sp, r7
 8001566:	bd80      	pop	{r7, pc}

08001568 <HAL_DHT11_Init>:
void HAL_DHT11_Init(
		DHT11_InitTypeDef *DHT11,
		GPIO_TypeDef *GPIOx,
		uint16_t GPIO_Pin,
		TIM_HandleTypeDef *TIM
) {
 8001568:	b580      	push	{r7, lr}
 800156a:	b084      	sub	sp, #16
 800156c:	af00      	add	r7, sp, #0
 800156e:	60f8      	str	r0, [r7, #12]
 8001570:	60b9      	str	r1, [r7, #8]
 8001572:	603b      	str	r3, [r7, #0]
 8001574:	4613      	mov	r3, r2
 8001576:	80fb      	strh	r3, [r7, #6]
	DHT11->_GPIOx = GPIOx;
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	68ba      	ldr	r2, [r7, #8]
 800157c:	60da      	str	r2, [r3, #12]
	DHT11->_Pin = GPIO_Pin;
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	88fa      	ldrh	r2, [r7, #6]
 8001582:	815a      	strh	r2, [r3, #10]
	DHT11->_Tim = TIM;
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	683a      	ldr	r2, [r7, #0]
 8001588:	611a      	str	r2, [r3, #16]
	DHT11->Temperature = 0.0f;
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	f04f 0200 	mov.w	r2, #0
 8001590:	601a      	str	r2, [r3, #0]
	DHT11->Humidity = 0.0f;
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	f04f 0200 	mov.w	r2, #0
 8001598:	605a      	str	r2, [r3, #4]

	HAL_TIM_Base_Start(DHT11->_Tim);
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	691b      	ldr	r3, [r3, #16]
 800159e:	4618      	mov	r0, r3
 80015a0:	f006 f828 	bl	80075f4 <HAL_TIM_Base_Start>
}
 80015a4:	bf00      	nop
 80015a6:	3710      	adds	r7, #16
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bd80      	pop	{r7, pc}

080015ac <DHT11_ReadData>:

const char* const HAL_DHT11_GetErrorMsg(DHT11_StatusTypeDef Status) {
	return ErrorMsg[Status];
}

static DHT11_StatusTypeDef DHT11_ReadData(DHT11_InitTypeDef *DHT11) {
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b084      	sub	sp, #16
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
	uint8_t Bits = 0;
 80015b4:	2300      	movs	r3, #0
 80015b6:	73fb      	strb	r3, [r7, #15]
	uint8_t Packets[DHT11_MAX_BYTE_PACKETS] = {0};
 80015b8:	2300      	movs	r3, #0
 80015ba:	60bb      	str	r3, [r7, #8]
 80015bc:	2300      	movs	r3, #0
 80015be:	733b      	strb	r3, [r7, #12]
	uint8_t PacketIndex = 0;
 80015c0:	2300      	movs	r3, #0
 80015c2:	73bb      	strb	r3, [r7, #14]

	DHT11_SetPinMode(DHT11, DHT11_PIN_OUTPUT);
 80015c4:	2100      	movs	r1, #0
 80015c6:	6878      	ldr	r0, [r7, #4]
 80015c8:	f7ff ffaa 	bl	8001520 <DHT11_SetPinMode>
	// PULLING the Line to Low and waits for 20ms
	HAL_GPIO_WritePin(DHT11->_GPIOx, DHT11->_Pin, GPIO_PIN_RESET);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	68d8      	ldr	r0, [r3, #12]
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	895b      	ldrh	r3, [r3, #10]
 80015d4:	2200      	movs	r2, #0
 80015d6:	4619      	mov	r1, r3
 80015d8:	f002 ffe2 	bl	80045a0 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 80015dc:	2014      	movs	r0, #20
 80015de:	f001 fa71 	bl	8002ac4 <HAL_Delay>
	// PULLING the Line to HIGH and waits for 40us
	HAL_GPIO_WritePin(DHT11->_GPIOx, DHT11->_Pin, GPIO_PIN_SET);
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	68d8      	ldr	r0, [r3, #12]
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	895b      	ldrh	r3, [r3, #10]
 80015ea:	2201      	movs	r2, #1
 80015ec:	4619      	mov	r1, r3
 80015ee:	f002 ffd7 	bl	80045a0 <HAL_GPIO_WritePin>
	HAL_DelayUs(DHT11->_Tim, 40);
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	691b      	ldr	r3, [r3, #16]
 80015f6:	2128      	movs	r1, #40	@ 0x28
 80015f8:	4618      	mov	r0, r3
 80015fa:	f7ff ff53 	bl	80014a4 <HAL_DelayUs>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015fe:	b672      	cpsid	i
}
 8001600:	bf00      	nop

	__disable_irq();
	DHT11_SetPinMode(DHT11, DHT11_PIN_INPUT);
 8001602:	2101      	movs	r1, #1
 8001604:	6878      	ldr	r0, [r7, #4]
 8001606:	f7ff ff8b 	bl	8001520 <DHT11_SetPinMode>

	// If the Line is still HIGH, that means DHT11 is not responding
	if(HAL_GPIO_ReadPin(DHT11->_GPIOx, DHT11->_Pin) == GPIO_PIN_SET) {
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	68da      	ldr	r2, [r3, #12]
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	895b      	ldrh	r3, [r3, #10]
 8001612:	4619      	mov	r1, r3
 8001614:	4610      	mov	r0, r2
 8001616:	f002 ffab 	bl	8004570 <HAL_GPIO_ReadPin>
 800161a:	4603      	mov	r3, r0
 800161c:	2b01      	cmp	r3, #1
 800161e:	d103      	bne.n	8001628 <DHT11_ReadData+0x7c>
  __ASM volatile ("cpsie i" : : : "memory");
 8001620:	b662      	cpsie	i
}
 8001622:	bf00      	nop
		__enable_irq();
		return DHT11_ERROR;
 8001624:	2302      	movs	r3, #2
 8001626:	e0ad      	b.n	8001784 <DHT11_ReadData+0x1d8>
	}

	// Now DHT11 have pulled the Line to LOW, we will wait till it PULLS is HIGH
	if(!DHT11_ObserveState(DHT11, GPIO_PIN_SET)) {
 8001628:	2101      	movs	r1, #1
 800162a:	6878      	ldr	r0, [r7, #4]
 800162c:	f7ff ff52 	bl	80014d4 <DHT11_ObserveState>
 8001630:	4603      	mov	r3, r0
 8001632:	f083 0301 	eor.w	r3, r3, #1
 8001636:	b2db      	uxtb	r3, r3
 8001638:	2b00      	cmp	r3, #0
 800163a:	d003      	beq.n	8001644 <DHT11_ReadData+0x98>
  __ASM volatile ("cpsie i" : : : "memory");
 800163c:	b662      	cpsie	i
}
 800163e:	bf00      	nop
		__enable_irq();
		return DHT11_TIMEOUT;
 8001640:	2301      	movs	r3, #1
 8001642:	e09f      	b.n	8001784 <DHT11_ReadData+0x1d8>
	}

	// Now DHT11 have pulled the Line to HIGH, we will wait till it PULLS is to LOW
	// which means the handshake is done
	if(!DHT11_ObserveState(DHT11, GPIO_PIN_RESET)) {
 8001644:	2100      	movs	r1, #0
 8001646:	6878      	ldr	r0, [r7, #4]
 8001648:	f7ff ff44 	bl	80014d4 <DHT11_ObserveState>
 800164c:	4603      	mov	r3, r0
 800164e:	f083 0301 	eor.w	r3, r3, #1
 8001652:	b2db      	uxtb	r3, r3
 8001654:	2b00      	cmp	r3, #0
 8001656:	d05b      	beq.n	8001710 <DHT11_ReadData+0x164>
  __ASM volatile ("cpsie i" : : : "memory");
 8001658:	b662      	cpsie	i
}
 800165a:	bf00      	nop
			__enable_irq();
			return DHT11_TIMEOUT;
 800165c:	2301      	movs	r3, #1
 800165e:	e091      	b.n	8001784 <DHT11_ReadData+0x1d8>
	}

	while(Bits < 40) {
			// DHT11 is now starting to transmit One Bit
			// We will wait till it PULL the Line to HIGH
			if(!DHT11_ObserveState(DHT11, GPIO_PIN_SET)) {
 8001660:	2101      	movs	r1, #1
 8001662:	6878      	ldr	r0, [r7, #4]
 8001664:	f7ff ff36 	bl	80014d4 <DHT11_ObserveState>
 8001668:	4603      	mov	r3, r0
 800166a:	f083 0301 	eor.w	r3, r3, #1
 800166e:	b2db      	uxtb	r3, r3
 8001670:	2b00      	cmp	r3, #0
 8001672:	d003      	beq.n	800167c <DHT11_ReadData+0xd0>
  __ASM volatile ("cpsie i" : : : "memory");
 8001674:	b662      	cpsie	i
}
 8001676:	bf00      	nop
				__enable_irq();
				return DHT11_TIMEOUT;
 8001678:	2301      	movs	r3, #1
 800167a:	e083      	b.n	8001784 <DHT11_ReadData+0x1d8>
			}

			// Now we will just count the us it stays HIGH
			// 28us means 0
			// 70us means 1
			__HAL_TIM_SET_COUNTER(DHT11->_Tim, 0);
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	691b      	ldr	r3, [r3, #16]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	2200      	movs	r2, #0
 8001684:	625a      	str	r2, [r3, #36]	@ 0x24
			while(HAL_GPIO_ReadPin(DHT11->_GPIOx, DHT11->_Pin) == GPIO_PIN_SET) {
 8001686:	e007      	b.n	8001698 <DHT11_ReadData+0xec>
				if(__HAL_TIM_GET_COUNTER(DHT11->_Tim) > DHT11_MAX_TIMEOUT) {
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	691b      	ldr	r3, [r3, #16]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001690:	2b64      	cmp	r3, #100	@ 0x64
 8001692:	d901      	bls.n	8001698 <DHT11_ReadData+0xec>
					return DHT11_TIMEOUT;
 8001694:	2301      	movs	r3, #1
 8001696:	e075      	b.n	8001784 <DHT11_ReadData+0x1d8>
			while(HAL_GPIO_ReadPin(DHT11->_GPIOx, DHT11->_Pin) == GPIO_PIN_SET) {
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	68da      	ldr	r2, [r3, #12]
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	895b      	ldrh	r3, [r3, #10]
 80016a0:	4619      	mov	r1, r3
 80016a2:	4610      	mov	r0, r2
 80016a4:	f002 ff64 	bl	8004570 <HAL_GPIO_ReadPin>
 80016a8:	4603      	mov	r3, r0
 80016aa:	2b01      	cmp	r3, #1
 80016ac:	d0ec      	beq.n	8001688 <DHT11_ReadData+0xdc>
				}
			}

			Packets[PacketIndex] = Packets[PacketIndex] << 1;
 80016ae:	7bbb      	ldrb	r3, [r7, #14]
 80016b0:	3310      	adds	r3, #16
 80016b2:	443b      	add	r3, r7
 80016b4:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 80016b8:	7bbb      	ldrb	r3, [r7, #14]
 80016ba:	0052      	lsls	r2, r2, #1
 80016bc:	b2d2      	uxtb	r2, r2
 80016be:	3310      	adds	r3, #16
 80016c0:	443b      	add	r3, r7
 80016c2:	f803 2c08 	strb.w	r2, [r3, #-8]
			Packets[PacketIndex] |= (__HAL_TIM_GET_COUNTER(DHT11->_Tim) > 50); // 50us is good in between
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	691b      	ldr	r3, [r3, #16]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016ce:	2b32      	cmp	r3, #50	@ 0x32
 80016d0:	bf8c      	ite	hi
 80016d2:	2301      	movhi	r3, #1
 80016d4:	2300      	movls	r3, #0
 80016d6:	b2db      	uxtb	r3, r3
 80016d8:	4619      	mov	r1, r3
 80016da:	7bbb      	ldrb	r3, [r7, #14]
 80016dc:	3310      	adds	r3, #16
 80016de:	443b      	add	r3, r7
 80016e0:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 80016e4:	b25a      	sxtb	r2, r3
 80016e6:	b24b      	sxtb	r3, r1
 80016e8:	4313      	orrs	r3, r2
 80016ea:	b25a      	sxtb	r2, r3
 80016ec:	7bbb      	ldrb	r3, [r7, #14]
 80016ee:	b2d2      	uxtb	r2, r2
 80016f0:	3310      	adds	r3, #16
 80016f2:	443b      	add	r3, r7
 80016f4:	f803 2c08 	strb.w	r2, [r3, #-8]
			Bits++;
 80016f8:	7bfb      	ldrb	r3, [r7, #15]
 80016fa:	3301      	adds	r3, #1
 80016fc:	73fb      	strb	r3, [r7, #15]
			if(!(Bits % 8)) PacketIndex++;
 80016fe:	7bfb      	ldrb	r3, [r7, #15]
 8001700:	f003 0307 	and.w	r3, r3, #7
 8001704:	b2db      	uxtb	r3, r3
 8001706:	2b00      	cmp	r3, #0
 8001708:	d102      	bne.n	8001710 <DHT11_ReadData+0x164>
 800170a:	7bbb      	ldrb	r3, [r7, #14]
 800170c:	3301      	adds	r3, #1
 800170e:	73bb      	strb	r3, [r7, #14]
	while(Bits < 40) {
 8001710:	7bfb      	ldrb	r3, [r7, #15]
 8001712:	2b27      	cmp	r3, #39	@ 0x27
 8001714:	d9a4      	bls.n	8001660 <DHT11_ReadData+0xb4>
  __ASM volatile ("cpsie i" : : : "memory");
 8001716:	b662      	cpsie	i
}
 8001718:	bf00      	nop
	}

	__enable_irq();

	// Last 8 bits are Checksum, which is the sum of all the previously transmitted 4 bytes
	if(Packets[4] != (Packets[0] + Packets[1] + Packets[2] + Packets[3])) {
 800171a:	7b3b      	ldrb	r3, [r7, #12]
 800171c:	461a      	mov	r2, r3
 800171e:	7a3b      	ldrb	r3, [r7, #8]
 8001720:	4619      	mov	r1, r3
 8001722:	7a7b      	ldrb	r3, [r7, #9]
 8001724:	440b      	add	r3, r1
 8001726:	7ab9      	ldrb	r1, [r7, #10]
 8001728:	440b      	add	r3, r1
 800172a:	7af9      	ldrb	r1, [r7, #11]
 800172c:	440b      	add	r3, r1
 800172e:	429a      	cmp	r2, r3
 8001730:	d001      	beq.n	8001736 <DHT11_ReadData+0x18a>
		return DHT11_CHECKSUM_MISMATCH;
 8001732:	2303      	movs	r3, #3
 8001734:	e026      	b.n	8001784 <DHT11_ReadData+0x1d8>
	}

	DHT11->Humidity = Packets[0] + (Packets[1] * 0.1f);
 8001736:	7a3b      	ldrb	r3, [r7, #8]
 8001738:	ee07 3a90 	vmov	s15, r3
 800173c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001740:	7a7b      	ldrb	r3, [r7, #9]
 8001742:	ee07 3a90 	vmov	s15, r3
 8001746:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800174a:	eddf 6a10 	vldr	s13, [pc, #64]	@ 800178c <DHT11_ReadData+0x1e0>
 800174e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001752:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	edc3 7a01 	vstr	s15, [r3, #4]
	DHT11->Temperature = Packets[2] + (Packets[3] * 0.1f);
 800175c:	7abb      	ldrb	r3, [r7, #10]
 800175e:	ee07 3a90 	vmov	s15, r3
 8001762:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001766:	7afb      	ldrb	r3, [r7, #11]
 8001768:	ee07 3a90 	vmov	s15, r3
 800176c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001770:	eddf 6a06 	vldr	s13, [pc, #24]	@ 800178c <DHT11_ReadData+0x1e0>
 8001774:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001778:	ee77 7a27 	vadd.f32	s15, s14, s15
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	edc3 7a00 	vstr	s15, [r3]

	return DHT11_OK;
 8001782:	2300      	movs	r3, #0
}
 8001784:	4618      	mov	r0, r3
 8001786:	3710      	adds	r7, #16
 8001788:	46bd      	mov	sp, r7
 800178a:	bd80      	pop	{r7, pc}
 800178c:	3dcccccd 	.word	0x3dcccccd

08001790 <HAL_DHT11_ReadData>:

DHT11_StatusTypeDef HAL_DHT11_ReadData(DHT11_InitTypeDef *DHT11) {
 8001790:	b580      	push	{r7, lr}
 8001792:	b082      	sub	sp, #8
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
	return DHT11->Status = DHT11_ReadData(DHT11);
 8001798:	6878      	ldr	r0, [r7, #4]
 800179a:	f7ff ff07 	bl	80015ac <DHT11_ReadData>
 800179e:	4603      	mov	r3, r0
 80017a0:	461a      	mov	r2, r3
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	721a      	strb	r2, [r3, #8]
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	7a1b      	ldrb	r3, [r3, #8]
}
 80017aa:	4618      	mov	r0, r3
 80017ac:	3708      	adds	r7, #8
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}

080017b2 <nRF24_CE_L>:

//#ifdef USE_HAL_DRIVER
extern SPI_HandleTypeDef hspi3;


static inline void nRF24_CE_L() {
 80017b2:	b580      	push	{r7, lr}
 80017b4:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CE_GPIO_Port, CE_Pin, GPIO_PIN_RESET);
 80017b6:	2200      	movs	r2, #0
 80017b8:	2140      	movs	r1, #64	@ 0x40
 80017ba:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80017be:	f002 feef 	bl	80045a0 <HAL_GPIO_WritePin>
}
 80017c2:	bf00      	nop
 80017c4:	bd80      	pop	{r7, pc}
	...

080017c8 <HAL_ADC_ConvCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80017c8:	b480      	push	{r7}
 80017ca:	b083      	sub	sp, #12
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
	ldr_voltage = (uint16_t) analog_vals[0];
 80017d0:	4b07      	ldr	r3, [pc, #28]	@ (80017f0 <HAL_ADC_ConvCpltCallback+0x28>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	b29a      	uxth	r2, r3
 80017d6:	4b07      	ldr	r3, [pc, #28]	@ (80017f4 <HAL_ADC_ConvCpltCallback+0x2c>)
 80017d8:	801a      	strh	r2, [r3, #0]
	raindrops_voltage = (uint16_t) analog_vals[1];
 80017da:	4b05      	ldr	r3, [pc, #20]	@ (80017f0 <HAL_ADC_ConvCpltCallback+0x28>)
 80017dc:	685b      	ldr	r3, [r3, #4]
 80017de:	b29a      	uxth	r2, r3
 80017e0:	4b05      	ldr	r3, [pc, #20]	@ (80017f8 <HAL_ADC_ConvCpltCallback+0x30>)
 80017e2:	801a      	strh	r2, [r3, #0]
}
 80017e4:	bf00      	nop
 80017e6:	370c      	adds	r7, #12
 80017e8:	46bd      	mov	sp, r7
 80017ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ee:	4770      	bx	lr
 80017f0:	200002a0 	.word	0x200002a0
 80017f4:	200002a8 	.word	0x200002a8
 80017f8:	200002aa 	.word	0x200002aa

080017fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b082      	sub	sp, #8
 8001800:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001802:	f001 f8ea 	bl	80029da <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001806:	f000 f8dd 	bl	80019c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800180a:	f000 faf9 	bl	8001e00 <MX_GPIO_Init>
  MX_DMA_Init();
 800180e:	f000 fad9 	bl	8001dc4 <MX_DMA_Init>
  MX_ADC1_Init();
 8001812:	f000 f93b 	bl	8001a8c <MX_ADC1_Init>
  MX_I2C1_Init();
 8001816:	f000 f9ad 	bl	8001b74 <MX_I2C1_Init>
  MX_TIM2_Init();
 800181a:	f000 fa55 	bl	8001cc8 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 800181e:	f000 faa1 	bl	8001d64 <MX_USART1_UART_Init>
  MX_LPTIM2_Init();
 8001822:	f000 f9e7 	bl	8001bf4 <MX_LPTIM2_Init>
  MX_SPI3_Init();
 8001826:	f000 fa11 	bl	8001c4c <MX_SPI3_Init>
  /* USER CODE BEGIN 2 */
  HAL_LPTIM_TimeOut_Start_IT(&hlptim2,65535,19999);
 800182a:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 800182e:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8001832:	4851      	ldr	r0, [pc, #324]	@ (8001978 <main+0x17c>)
 8001834:	f003 fdac 	bl	8005390 <HAL_LPTIM_TimeOut_Start_IT>
  HAL_DHT11_Init(&dht, GPIOA, GPIO_PIN_2, &htim2);
 8001838:	4b50      	ldr	r3, [pc, #320]	@ (800197c <main+0x180>)
 800183a:	2204      	movs	r2, #4
 800183c:	f04f 4190 	mov.w	r1, #1207959552	@ 0x48000000
 8001840:	484f      	ldr	r0, [pc, #316]	@ (8001980 <main+0x184>)
 8001842:	f7ff fe91 	bl	8001568 <HAL_DHT11_Init>
  read_calibration_data(&hi2c1,&bmp_calib_data);
 8001846:	494f      	ldr	r1, [pc, #316]	@ (8001984 <main+0x188>)
 8001848:	484f      	ldr	r0, [pc, #316]	@ (8001988 <main+0x18c>)
 800184a:	f7ff fa9d 	bl	8000d88 <read_calibration_data>

  nRF24_CE_L();
 800184e:	f7ff ffb0 	bl	80017b2 <nRF24_CE_L>
  radioCheck = nRF24_Check();
 8001852:	f000 fcb3 	bl	80021bc <nRF24_Check>
 8001856:	4603      	mov	r3, r0
 8001858:	461a      	mov	r2, r3
 800185a:	4b4c      	ldr	r3, [pc, #304]	@ (800198c <main+0x190>)
 800185c:	701a      	strb	r2, [r3, #0]
  radioSetup();
 800185e:	f000 fb51 	bl	8001f04 <radioSetup>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	u_temp = get_uncomp_temp(&hi2c1,&bmp_calib_data);
 8001862:	4948      	ldr	r1, [pc, #288]	@ (8001984 <main+0x188>)
 8001864:	4848      	ldr	r0, [pc, #288]	@ (8001988 <main+0x18c>)
 8001866:	f7ff faff 	bl	8000e68 <get_uncomp_temp>
 800186a:	4603      	mov	r3, r0
 800186c:	461a      	mov	r2, r3
 800186e:	4b48      	ldr	r3, [pc, #288]	@ (8001990 <main+0x194>)
 8001870:	801a      	strh	r2, [r3, #0]
	u_press = get_uncomp_press(&hi2c1,&bmp_calib_data);
 8001872:	4944      	ldr	r1, [pc, #272]	@ (8001984 <main+0x188>)
 8001874:	4844      	ldr	r0, [pc, #272]	@ (8001988 <main+0x18c>)
 8001876:	f7ff fba9 	bl	8000fcc <get_uncomp_press>
 800187a:	4603      	mov	r3, r0
 800187c:	4a45      	ldr	r2, [pc, #276]	@ (8001994 <main+0x198>)
 800187e:	6013      	str	r3, [r2, #0]

	// Read LDR and Raindrop sensor analog voltages
	HAL_ADC_Start_DMA(&hadc1,analog_vals,2);
 8001880:	2202      	movs	r2, #2
 8001882:	4945      	ldr	r1, [pc, #276]	@ (8001998 <main+0x19c>)
 8001884:	4845      	ldr	r0, [pc, #276]	@ (800199c <main+0x1a0>)
 8001886:	f001 fc6b 	bl	8003160 <HAL_ADC_Start_DMA>

	// Read float values
	temp_buffer.f_val = get_comp_temp(u_temp,&bmp_calib_data);
 800188a:	4b41      	ldr	r3, [pc, #260]	@ (8001990 <main+0x194>)
 800188c:	881b      	ldrh	r3, [r3, #0]
 800188e:	493d      	ldr	r1, [pc, #244]	@ (8001984 <main+0x188>)
 8001890:	4618      	mov	r0, r3
 8001892:	f7ff fbd1 	bl	8001038 <get_comp_temp>
 8001896:	eef0 7a40 	vmov.f32	s15, s0
 800189a:	4b41      	ldr	r3, [pc, #260]	@ (80019a0 <main+0x1a4>)
 800189c:	edc3 7a00 	vstr	s15, [r3]
	press_buffer.f_val = get_comp_press(u_temp,u_press,&bmp_calib_data);
 80018a0:	4b3b      	ldr	r3, [pc, #236]	@ (8001990 <main+0x194>)
 80018a2:	881b      	ldrh	r3, [r3, #0]
 80018a4:	4a3b      	ldr	r2, [pc, #236]	@ (8001994 <main+0x198>)
 80018a6:	6812      	ldr	r2, [r2, #0]
 80018a8:	b291      	uxth	r1, r2
 80018aa:	4a36      	ldr	r2, [pc, #216]	@ (8001984 <main+0x188>)
 80018ac:	4618      	mov	r0, r3
 80018ae:	f7ff fc3d 	bl	800112c <get_comp_press>
 80018b2:	eef0 7a40 	vmov.f32	s15, s0
 80018b6:	4b3b      	ldr	r3, [pc, #236]	@ (80019a4 <main+0x1a8>)
 80018b8:	edc3 7a00 	vstr	s15, [r3]
	HAL_DHT11_ReadData(&dht);
 80018bc:	4830      	ldr	r0, [pc, #192]	@ (8001980 <main+0x184>)
 80018be:	f7ff ff67 	bl	8001790 <HAL_DHT11_ReadData>
	dht_temp_buffer.f_val = dht.Temperature;
 80018c2:	4b2f      	ldr	r3, [pc, #188]	@ (8001980 <main+0x184>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	4a38      	ldr	r2, [pc, #224]	@ (80019a8 <main+0x1ac>)
 80018c8:	6013      	str	r3, [r2, #0]
	dht_hum_buffer.f_val = dht.Humidity;
 80018ca:	4b2d      	ldr	r3, [pc, #180]	@ (8001980 <main+0x184>)
 80018cc:	685b      	ldr	r3, [r3, #4]
 80018ce:	4a37      	ldr	r2, [pc, #220]	@ (80019ac <main+0x1b0>)
 80018d0:	6013      	str	r3, [r2, #0]

	// First 16 bytes for float readings
	for(int i=0;i<4;i++)
 80018d2:	2300      	movs	r3, #0
 80018d4:	607b      	str	r3, [r7, #4]
 80018d6:	e023      	b.n	8001920 <main+0x124>
	{
		transmit_buffer[i] = temp_buffer.f_val_buffer[i];
 80018d8:	4a31      	ldr	r2, [pc, #196]	@ (80019a0 <main+0x1a4>)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	4413      	add	r3, r2
 80018de:	7819      	ldrb	r1, [r3, #0]
 80018e0:	4a33      	ldr	r2, [pc, #204]	@ (80019b0 <main+0x1b4>)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	4413      	add	r3, r2
 80018e6:	460a      	mov	r2, r1
 80018e8:	701a      	strb	r2, [r3, #0]
		transmit_buffer[i+4] = press_buffer.f_val_buffer[i];
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	3304      	adds	r3, #4
 80018ee:	492d      	ldr	r1, [pc, #180]	@ (80019a4 <main+0x1a8>)
 80018f0:	687a      	ldr	r2, [r7, #4]
 80018f2:	440a      	add	r2, r1
 80018f4:	7811      	ldrb	r1, [r2, #0]
 80018f6:	4a2e      	ldr	r2, [pc, #184]	@ (80019b0 <main+0x1b4>)
 80018f8:	54d1      	strb	r1, [r2, r3]
		transmit_buffer[i+8] = dht_temp_buffer.f_val_buffer[i];
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	3308      	adds	r3, #8
 80018fe:	492a      	ldr	r1, [pc, #168]	@ (80019a8 <main+0x1ac>)
 8001900:	687a      	ldr	r2, [r7, #4]
 8001902:	440a      	add	r2, r1
 8001904:	7811      	ldrb	r1, [r2, #0]
 8001906:	4a2a      	ldr	r2, [pc, #168]	@ (80019b0 <main+0x1b4>)
 8001908:	54d1      	strb	r1, [r2, r3]
		transmit_buffer[i+12] = dht_hum_buffer.f_val_buffer[i];
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	330c      	adds	r3, #12
 800190e:	4927      	ldr	r1, [pc, #156]	@ (80019ac <main+0x1b0>)
 8001910:	687a      	ldr	r2, [r7, #4]
 8001912:	440a      	add	r2, r1
 8001914:	7811      	ldrb	r1, [r2, #0]
 8001916:	4a26      	ldr	r2, [pc, #152]	@ (80019b0 <main+0x1b4>)
 8001918:	54d1      	strb	r1, [r2, r3]
	for(int i=0;i<4;i++)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	3301      	adds	r3, #1
 800191e:	607b      	str	r3, [r7, #4]
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	2b03      	cmp	r3, #3
 8001924:	ddd8      	ble.n	80018d8 <main+0xdc>
	}

	transmit_buffer[16] = (uint8_t) (ldr_voltage & 0x00FF);
 8001926:	4b23      	ldr	r3, [pc, #140]	@ (80019b4 <main+0x1b8>)
 8001928:	881b      	ldrh	r3, [r3, #0]
 800192a:	b2da      	uxtb	r2, r3
 800192c:	4b20      	ldr	r3, [pc, #128]	@ (80019b0 <main+0x1b4>)
 800192e:	741a      	strb	r2, [r3, #16]
	transmit_buffer[17] = (uint8_t) ((ldr_voltage & 0xFF00)>>8);
 8001930:	4b20      	ldr	r3, [pc, #128]	@ (80019b4 <main+0x1b8>)
 8001932:	881b      	ldrh	r3, [r3, #0]
 8001934:	0a1b      	lsrs	r3, r3, #8
 8001936:	b29b      	uxth	r3, r3
 8001938:	b2da      	uxtb	r2, r3
 800193a:	4b1d      	ldr	r3, [pc, #116]	@ (80019b0 <main+0x1b4>)
 800193c:	745a      	strb	r2, [r3, #17]

	transmit_buffer[18] = (uint8_t) (raindrops_voltage & 0x00FF);
 800193e:	4b1e      	ldr	r3, [pc, #120]	@ (80019b8 <main+0x1bc>)
 8001940:	881b      	ldrh	r3, [r3, #0]
 8001942:	b2da      	uxtb	r2, r3
 8001944:	4b1a      	ldr	r3, [pc, #104]	@ (80019b0 <main+0x1b4>)
 8001946:	749a      	strb	r2, [r3, #18]
	transmit_buffer[19] = (uint8_t) ((raindrops_voltage & 0xFF00)>>8);
 8001948:	4b1b      	ldr	r3, [pc, #108]	@ (80019b8 <main+0x1bc>)
 800194a:	881b      	ldrh	r3, [r3, #0]
 800194c:	0a1b      	lsrs	r3, r3, #8
 800194e:	b29b      	uxth	r3, r3
 8001950:	b2da      	uxtb	r2, r3
 8001952:	4b17      	ldr	r3, [pc, #92]	@ (80019b0 <main+0x1b4>)
 8001954:	74da      	strb	r2, [r3, #19]

	tx_res = nRF24_TransmitPacket(transmit_buffer, transmit_buffer_len);
 8001956:	4b19      	ldr	r3, [pc, #100]	@ (80019bc <main+0x1c0>)
 8001958:	781b      	ldrb	r3, [r3, #0]
 800195a:	4619      	mov	r1, r3
 800195c:	4814      	ldr	r0, [pc, #80]	@ (80019b0 <main+0x1b4>)
 800195e:	f000 fd75 	bl	800244c <nRF24_TransmitPacket>
 8001962:	4603      	mov	r3, r0
 8001964:	461a      	mov	r2, r3
 8001966:	4b16      	ldr	r3, [pc, #88]	@ (80019c0 <main+0x1c4>)
 8001968:	701a      	strb	r2, [r3, #0]
	//HAL_UART_Transmit(&huart1,transmit_buffer,20,1000);

	//HAL_Delay(100);
	// Not needed due to sleep
	//HAL_Delay(500);
	HAL_SuspendTick();
 800196a:	f001 f8cf 	bl	8002b0c <HAL_SuspendTick>
	HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 800196e:	2101      	movs	r1, #1
 8001970:	2000      	movs	r0, #0
 8001972:	f003 ffb1 	bl	80058d8 <HAL_PWR_EnterSLEEPMode>
	u_temp = get_uncomp_temp(&hi2c1,&bmp_calib_data);
 8001976:	e774      	b.n	8001862 <main+0x66>
 8001978:	2000012c 	.word	0x2000012c
 800197c:	200001c8 	.word	0x200001c8
 8001980:	200002c8 	.word	0x200002c8
 8001984:	200002dc 	.word	0x200002dc
 8001988:	200000d8 	.word	0x200000d8
 800198c:	2000029c 	.word	0x2000029c
 8001990:	200002c0 	.word	0x200002c0
 8001994:	200002c4 	.word	0x200002c4
 8001998:	200002a0 	.word	0x200002a0
 800199c:	2000002c 	.word	0x2000002c
 80019a0:	200002f4 	.word	0x200002f4
 80019a4:	200002f8 	.word	0x200002f8
 80019a8:	200002fc 	.word	0x200002fc
 80019ac:	20000300 	.word	0x20000300
 80019b0:	200002ac 	.word	0x200002ac
 80019b4:	200002a8 	.word	0x200002a8
 80019b8:	200002aa 	.word	0x200002aa
 80019bc:	20000000 	.word	0x20000000
 80019c0:	20000304 	.word	0x20000304

080019c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b096      	sub	sp, #88	@ 0x58
 80019c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80019ca:	f107 0314 	add.w	r3, r7, #20
 80019ce:	2244      	movs	r2, #68	@ 0x44
 80019d0:	2100      	movs	r1, #0
 80019d2:	4618      	mov	r0, r3
 80019d4:	f006 fd29 	bl	800842a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80019d8:	463b      	mov	r3, r7
 80019da:	2200      	movs	r2, #0
 80019dc:	601a      	str	r2, [r3, #0]
 80019de:	605a      	str	r2, [r3, #4]
 80019e0:	609a      	str	r2, [r3, #8]
 80019e2:	60da      	str	r2, [r3, #12]
 80019e4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80019e6:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80019ea:	f003 ffb7 	bl	800595c <HAL_PWREx_ControlVoltageScaling>
 80019ee:	4603      	mov	r3, r0
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d001      	beq.n	80019f8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80019f4:	f000 fab6 	bl	8001f64 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80019f8:	f003 ff5e 	bl	80058b8 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80019fc:	4b22      	ldr	r3, [pc, #136]	@ (8001a88 <SystemClock_Config+0xc4>)
 80019fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001a02:	4a21      	ldr	r2, [pc, #132]	@ (8001a88 <SystemClock_Config+0xc4>)
 8001a04:	f023 0318 	bic.w	r3, r3, #24
 8001a08:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_LSE
 8001a0c:	231c      	movs	r3, #28
 8001a0e:	617b      	str	r3, [r7, #20]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001a10:	2301      	movs	r3, #1
 8001a12:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001a14:	2301      	movs	r3, #1
 8001a16:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001a18:	2301      	movs	r3, #1
 8001a1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001a20:	2360      	movs	r3, #96	@ 0x60
 8001a22:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a24:	2302      	movs	r3, #2
 8001a26:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001a28:	2301      	movs	r3, #1
 8001a2a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001a2c:	2301      	movs	r3, #1
 8001a2e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 8001a30:	2310      	movs	r3, #16
 8001a32:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001a34:	2307      	movs	r3, #7
 8001a36:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001a38:	2302      	movs	r3, #2
 8001a3a:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001a3c:	2302      	movs	r3, #2
 8001a3e:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a40:	f107 0314 	add.w	r3, r7, #20
 8001a44:	4618      	mov	r0, r3
 8001a46:	f004 f827 	bl	8005a98 <HAL_RCC_OscConfig>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d001      	beq.n	8001a54 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8001a50:	f000 fa88 	bl	8001f64 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a54:	230f      	movs	r3, #15
 8001a56:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a58:	2303      	movs	r3, #3
 8001a5a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001a60:	2300      	movs	r3, #0
 8001a62:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a64:	2300      	movs	r3, #0
 8001a66:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001a68:	463b      	mov	r3, r7
 8001a6a:	2101      	movs	r1, #1
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	f004 fc27 	bl	80062c0 <HAL_RCC_ClockConfig>
 8001a72:	4603      	mov	r3, r0
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d001      	beq.n	8001a7c <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8001a78:	f000 fa74 	bl	8001f64 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8001a7c:	f005 f83a 	bl	8006af4 <HAL_RCCEx_EnableMSIPLLMode>
}
 8001a80:	bf00      	nop
 8001a82:	3758      	adds	r7, #88	@ 0x58
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bd80      	pop	{r7, pc}
 8001a88:	40021000 	.word	0x40021000

08001a8c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b086      	sub	sp, #24
 8001a90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001a92:	463b      	mov	r3, r7
 8001a94:	2200      	movs	r2, #0
 8001a96:	601a      	str	r2, [r3, #0]
 8001a98:	605a      	str	r2, [r3, #4]
 8001a9a:	609a      	str	r2, [r3, #8]
 8001a9c:	60da      	str	r2, [r3, #12]
 8001a9e:	611a      	str	r2, [r3, #16]
 8001aa0:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001aa2:	4b30      	ldr	r3, [pc, #192]	@ (8001b64 <MX_ADC1_Init+0xd8>)
 8001aa4:	4a30      	ldr	r2, [pc, #192]	@ (8001b68 <MX_ADC1_Init+0xdc>)
 8001aa6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001aa8:	4b2e      	ldr	r3, [pc, #184]	@ (8001b64 <MX_ADC1_Init+0xd8>)
 8001aaa:	2200      	movs	r2, #0
 8001aac:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001aae:	4b2d      	ldr	r3, [pc, #180]	@ (8001b64 <MX_ADC1_Init+0xd8>)
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001ab4:	4b2b      	ldr	r3, [pc, #172]	@ (8001b64 <MX_ADC1_Init+0xd8>)
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001aba:	4b2a      	ldr	r3, [pc, #168]	@ (8001b64 <MX_ADC1_Init+0xd8>)
 8001abc:	2201      	movs	r2, #1
 8001abe:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001ac0:	4b28      	ldr	r3, [pc, #160]	@ (8001b64 <MX_ADC1_Init+0xd8>)
 8001ac2:	2204      	movs	r2, #4
 8001ac4:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001ac6:	4b27      	ldr	r3, [pc, #156]	@ (8001b64 <MX_ADC1_Init+0xd8>)
 8001ac8:	2200      	movs	r2, #0
 8001aca:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001acc:	4b25      	ldr	r3, [pc, #148]	@ (8001b64 <MX_ADC1_Init+0xd8>)
 8001ace:	2200      	movs	r2, #0
 8001ad0:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 2;
 8001ad2:	4b24      	ldr	r3, [pc, #144]	@ (8001b64 <MX_ADC1_Init+0xd8>)
 8001ad4:	2202      	movs	r2, #2
 8001ad6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001ad8:	4b22      	ldr	r3, [pc, #136]	@ (8001b64 <MX_ADC1_Init+0xd8>)
 8001ada:	2200      	movs	r2, #0
 8001adc:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001ae0:	4b20      	ldr	r3, [pc, #128]	@ (8001b64 <MX_ADC1_Init+0xd8>)
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001ae6:	4b1f      	ldr	r3, [pc, #124]	@ (8001b64 <MX_ADC1_Init+0xd8>)
 8001ae8:	2200      	movs	r2, #0
 8001aea:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001aec:	4b1d      	ldr	r3, [pc, #116]	@ (8001b64 <MX_ADC1_Init+0xd8>)
 8001aee:	2200      	movs	r2, #0
 8001af0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001af4:	4b1b      	ldr	r3, [pc, #108]	@ (8001b64 <MX_ADC1_Init+0xd8>)
 8001af6:	2200      	movs	r2, #0
 8001af8:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001afa:	4b1a      	ldr	r3, [pc, #104]	@ (8001b64 <MX_ADC1_Init+0xd8>)
 8001afc:	2200      	movs	r2, #0
 8001afe:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001b02:	4818      	ldr	r0, [pc, #96]	@ (8001b64 <MX_ADC1_Init+0xd8>)
 8001b04:	f001 f9ea 	bl	8002edc <HAL_ADC_Init>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d001      	beq.n	8001b12 <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 8001b0e:	f000 fa29 	bl	8001f64 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001b12:	4b16      	ldr	r3, [pc, #88]	@ (8001b6c <MX_ADC1_Init+0xe0>)
 8001b14:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001b16:	2306      	movs	r3, #6
 8001b18:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001b1e:	237f      	movs	r3, #127	@ 0x7f
 8001b20:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001b22:	2304      	movs	r3, #4
 8001b24:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001b26:	2300      	movs	r3, #0
 8001b28:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001b2a:	463b      	mov	r3, r7
 8001b2c:	4619      	mov	r1, r3
 8001b2e:	480d      	ldr	r0, [pc, #52]	@ (8001b64 <MX_ADC1_Init+0xd8>)
 8001b30:	f001 fbae 	bl	8003290 <HAL_ADC_ConfigChannel>
 8001b34:	4603      	mov	r3, r0
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d001      	beq.n	8001b3e <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8001b3a:	f000 fa13 	bl	8001f64 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001b3e:	4b0c      	ldr	r3, [pc, #48]	@ (8001b70 <MX_ADC1_Init+0xe4>)
 8001b40:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001b42:	230c      	movs	r3, #12
 8001b44:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001b46:	463b      	mov	r3, r7
 8001b48:	4619      	mov	r1, r3
 8001b4a:	4806      	ldr	r0, [pc, #24]	@ (8001b64 <MX_ADC1_Init+0xd8>)
 8001b4c:	f001 fba0 	bl	8003290 <HAL_ADC_ConfigChannel>
 8001b50:	4603      	mov	r3, r0
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d001      	beq.n	8001b5a <MX_ADC1_Init+0xce>
  {
    Error_Handler();
 8001b56:	f000 fa05 	bl	8001f64 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001b5a:	bf00      	nop
 8001b5c:	3718      	adds	r7, #24
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd80      	pop	{r7, pc}
 8001b62:	bf00      	nop
 8001b64:	2000002c 	.word	0x2000002c
 8001b68:	50040000 	.word	0x50040000
 8001b6c:	14f00020 	.word	0x14f00020
 8001b70:	19200040 	.word	0x19200040

08001b74 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001b78:	4b1b      	ldr	r3, [pc, #108]	@ (8001be8 <MX_I2C1_Init+0x74>)
 8001b7a:	4a1c      	ldr	r2, [pc, #112]	@ (8001bec <MX_I2C1_Init+0x78>)
 8001b7c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 8001b7e:	4b1a      	ldr	r3, [pc, #104]	@ (8001be8 <MX_I2C1_Init+0x74>)
 8001b80:	4a1b      	ldr	r2, [pc, #108]	@ (8001bf0 <MX_I2C1_Init+0x7c>)
 8001b82:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001b84:	4b18      	ldr	r3, [pc, #96]	@ (8001be8 <MX_I2C1_Init+0x74>)
 8001b86:	2200      	movs	r2, #0
 8001b88:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001b8a:	4b17      	ldr	r3, [pc, #92]	@ (8001be8 <MX_I2C1_Init+0x74>)
 8001b8c:	2201      	movs	r2, #1
 8001b8e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001b90:	4b15      	ldr	r3, [pc, #84]	@ (8001be8 <MX_I2C1_Init+0x74>)
 8001b92:	2200      	movs	r2, #0
 8001b94:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001b96:	4b14      	ldr	r3, [pc, #80]	@ (8001be8 <MX_I2C1_Init+0x74>)
 8001b98:	2200      	movs	r2, #0
 8001b9a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001b9c:	4b12      	ldr	r3, [pc, #72]	@ (8001be8 <MX_I2C1_Init+0x74>)
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001ba2:	4b11      	ldr	r3, [pc, #68]	@ (8001be8 <MX_I2C1_Init+0x74>)
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001ba8:	4b0f      	ldr	r3, [pc, #60]	@ (8001be8 <MX_I2C1_Init+0x74>)
 8001baa:	2200      	movs	r2, #0
 8001bac:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001bae:	480e      	ldr	r0, [pc, #56]	@ (8001be8 <MX_I2C1_Init+0x74>)
 8001bb0:	f002 fd28 	bl	8004604 <HAL_I2C_Init>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d001      	beq.n	8001bbe <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001bba:	f000 f9d3 	bl	8001f64 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001bbe:	2100      	movs	r1, #0
 8001bc0:	4809      	ldr	r0, [pc, #36]	@ (8001be8 <MX_I2C1_Init+0x74>)
 8001bc2:	f003 faab 	bl	800511c <HAL_I2CEx_ConfigAnalogFilter>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d001      	beq.n	8001bd0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001bcc:	f000 f9ca 	bl	8001f64 <Error_Handler>
						default:
							UART_SendStr("ERROR ");
							break;
					}
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001bd0:	2100      	movs	r1, #0
 8001bd2:	4805      	ldr	r0, [pc, #20]	@ (8001be8 <MX_I2C1_Init+0x74>)
 8001bd4:	f003 faed 	bl	80051b2 <HAL_I2CEx_ConfigDigitalFilter>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d001      	beq.n	8001be2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001bde:	f000 f9c1 	bl	8001f64 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001be2:	bf00      	nop
 8001be4:	bd80      	pop	{r7, pc}
 8001be6:	bf00      	nop
 8001be8:	200000d8 	.word	0x200000d8
 8001bec:	40005400 	.word	0x40005400
 8001bf0:	00707cbb 	.word	0x00707cbb

08001bf4 <MX_LPTIM2_Init>:
  * @brief LPTIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPTIM2_Init(void)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	af00      	add	r7, sp, #0
  /* USER CODE END LPTIM2_Init 0 */

  /* USER CODE BEGIN LPTIM2_Init 1 */

  /* USER CODE END LPTIM2_Init 1 */
  hlptim2.Instance = LPTIM2;
 8001bf8:	4b12      	ldr	r3, [pc, #72]	@ (8001c44 <MX_LPTIM2_Init+0x50>)
 8001bfa:	4a13      	ldr	r2, [pc, #76]	@ (8001c48 <MX_LPTIM2_Init+0x54>)
 8001bfc:	601a      	str	r2, [r3, #0]
  hlptim2.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 8001bfe:	4b11      	ldr	r3, [pc, #68]	@ (8001c44 <MX_LPTIM2_Init+0x50>)
 8001c00:	2200      	movs	r2, #0
 8001c02:	605a      	str	r2, [r3, #4]
  hlptim2.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV1;
 8001c04:	4b0f      	ldr	r3, [pc, #60]	@ (8001c44 <MX_LPTIM2_Init+0x50>)
 8001c06:	2200      	movs	r2, #0
 8001c08:	609a      	str	r2, [r3, #8]
  hlptim2.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 8001c0a:	4b0e      	ldr	r3, [pc, #56]	@ (8001c44 <MX_LPTIM2_Init+0x50>)
 8001c0c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001c10:	615a      	str	r2, [r3, #20]
  hlptim2.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 8001c12:	4b0c      	ldr	r3, [pc, #48]	@ (8001c44 <MX_LPTIM2_Init+0x50>)
 8001c14:	2200      	movs	r2, #0
 8001c16:	621a      	str	r2, [r3, #32]
  hlptim2.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 8001c18:	4b0a      	ldr	r3, [pc, #40]	@ (8001c44 <MX_LPTIM2_Init+0x50>)
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	625a      	str	r2, [r3, #36]	@ 0x24
  hlptim2.Init.CounterSource = LPTIM_COUNTERSOURCE_INTERNAL;
 8001c1e:	4b09      	ldr	r3, [pc, #36]	@ (8001c44 <MX_LPTIM2_Init+0x50>)
 8001c20:	2200      	movs	r2, #0
 8001c22:	629a      	str	r2, [r3, #40]	@ 0x28
  hlptim2.Init.Input1Source = LPTIM_INPUT1SOURCE_GPIO;
 8001c24:	4b07      	ldr	r3, [pc, #28]	@ (8001c44 <MX_LPTIM2_Init+0x50>)
 8001c26:	2200      	movs	r2, #0
 8001c28:	62da      	str	r2, [r3, #44]	@ 0x2c
  hlptim2.Init.Input2Source = LPTIM_INPUT2SOURCE_GPIO;
 8001c2a:	4b06      	ldr	r3, [pc, #24]	@ (8001c44 <MX_LPTIM2_Init+0x50>)
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_LPTIM_Init(&hlptim2) != HAL_OK)
 8001c30:	4804      	ldr	r0, [pc, #16]	@ (8001c44 <MX_LPTIM2_Init+0x50>)
 8001c32:	f003 fb0b 	bl	800524c <HAL_LPTIM_Init>
 8001c36:	4603      	mov	r3, r0
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d001      	beq.n	8001c40 <MX_LPTIM2_Init+0x4c>
  {
    Error_Handler();
 8001c3c:	f000 f992 	bl	8001f64 <Error_Handler>
  }
  /* USER CODE BEGIN LPTIM2_Init 2 */

  /* USER CODE END LPTIM2_Init 2 */

}
 8001c40:	bf00      	nop
 8001c42:	bd80      	pop	{r7, pc}
 8001c44:	2000012c 	.word	0x2000012c
 8001c48:	40009400 	.word	0x40009400

08001c4c <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001c50:	4b1b      	ldr	r3, [pc, #108]	@ (8001cc0 <MX_SPI3_Init+0x74>)
 8001c52:	4a1c      	ldr	r2, [pc, #112]	@ (8001cc4 <MX_SPI3_Init+0x78>)
 8001c54:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001c56:	4b1a      	ldr	r3, [pc, #104]	@ (8001cc0 <MX_SPI3_Init+0x74>)
 8001c58:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001c5c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001c5e:	4b18      	ldr	r3, [pc, #96]	@ (8001cc0 <MX_SPI3_Init+0x74>)
 8001c60:	2200      	movs	r2, #0
 8001c62:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8001c64:	4b16      	ldr	r3, [pc, #88]	@ (8001cc0 <MX_SPI3_Init+0x74>)
 8001c66:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8001c6a:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001c6c:	4b14      	ldr	r3, [pc, #80]	@ (8001cc0 <MX_SPI3_Init+0x74>)
 8001c6e:	2200      	movs	r2, #0
 8001c70:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001c72:	4b13      	ldr	r3, [pc, #76]	@ (8001cc0 <MX_SPI3_Init+0x74>)
 8001c74:	2200      	movs	r2, #0
 8001c76:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001c78:	4b11      	ldr	r3, [pc, #68]	@ (8001cc0 <MX_SPI3_Init+0x74>)
 8001c7a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001c7e:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001c80:	4b0f      	ldr	r3, [pc, #60]	@ (8001cc0 <MX_SPI3_Init+0x74>)
 8001c82:	2200      	movs	r2, #0
 8001c84:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001c86:	4b0e      	ldr	r3, [pc, #56]	@ (8001cc0 <MX_SPI3_Init+0x74>)
 8001c88:	2200      	movs	r2, #0
 8001c8a:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001c8c:	4b0c      	ldr	r3, [pc, #48]	@ (8001cc0 <MX_SPI3_Init+0x74>)
 8001c8e:	2200      	movs	r2, #0
 8001c90:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001c92:	4b0b      	ldr	r3, [pc, #44]	@ (8001cc0 <MX_SPI3_Init+0x74>)
 8001c94:	2200      	movs	r2, #0
 8001c96:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 8001c98:	4b09      	ldr	r3, [pc, #36]	@ (8001cc0 <MX_SPI3_Init+0x74>)
 8001c9a:	2207      	movs	r2, #7
 8001c9c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001c9e:	4b08      	ldr	r3, [pc, #32]	@ (8001cc0 <MX_SPI3_Init+0x74>)
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001ca4:	4b06      	ldr	r3, [pc, #24]	@ (8001cc0 <MX_SPI3_Init+0x74>)
 8001ca6:	2208      	movs	r2, #8
 8001ca8:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001caa:	4805      	ldr	r0, [pc, #20]	@ (8001cc0 <MX_SPI3_Init+0x74>)
 8001cac:	f005 f824 	bl	8006cf8 <HAL_SPI_Init>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d001      	beq.n	8001cba <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8001cb6:	f000 f955 	bl	8001f64 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001cba:	bf00      	nop
 8001cbc:	bd80      	pop	{r7, pc}
 8001cbe:	bf00      	nop
 8001cc0:	20000164 	.word	0x20000164
 8001cc4:	40003c00 	.word	0x40003c00

08001cc8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b088      	sub	sp, #32
 8001ccc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001cce:	f107 0310 	add.w	r3, r7, #16
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	601a      	str	r2, [r3, #0]
 8001cd6:	605a      	str	r2, [r3, #4]
 8001cd8:	609a      	str	r2, [r3, #8]
 8001cda:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001cdc:	1d3b      	adds	r3, r7, #4
 8001cde:	2200      	movs	r2, #0
 8001ce0:	601a      	str	r2, [r3, #0]
 8001ce2:	605a      	str	r2, [r3, #4]
 8001ce4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001ce6:	4b1e      	ldr	r3, [pc, #120]	@ (8001d60 <MX_TIM2_Init+0x98>)
 8001ce8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001cec:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 32;
 8001cee:	4b1c      	ldr	r3, [pc, #112]	@ (8001d60 <MX_TIM2_Init+0x98>)
 8001cf0:	2220      	movs	r2, #32
 8001cf2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cf4:	4b1a      	ldr	r3, [pc, #104]	@ (8001d60 <MX_TIM2_Init+0x98>)
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001cfa:	4b19      	ldr	r3, [pc, #100]	@ (8001d60 <MX_TIM2_Init+0x98>)
 8001cfc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001d00:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d02:	4b17      	ldr	r3, [pc, #92]	@ (8001d60 <MX_TIM2_Init+0x98>)
 8001d04:	2200      	movs	r2, #0
 8001d06:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d08:	4b15      	ldr	r3, [pc, #84]	@ (8001d60 <MX_TIM2_Init+0x98>)
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001d0e:	4814      	ldr	r0, [pc, #80]	@ (8001d60 <MX_TIM2_Init+0x98>)
 8001d10:	f005 fc18 	bl	8007544 <HAL_TIM_Base_Init>
 8001d14:	4603      	mov	r3, r0
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d001      	beq.n	8001d1e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001d1a:	f000 f923 	bl	8001f64 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d1e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001d22:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001d24:	f107 0310 	add.w	r3, r7, #16
 8001d28:	4619      	mov	r1, r3
 8001d2a:	480d      	ldr	r0, [pc, #52]	@ (8001d60 <MX_TIM2_Init+0x98>)
 8001d2c:	f005 fcae 	bl	800768c <HAL_TIM_ConfigClockSource>
 8001d30:	4603      	mov	r3, r0
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d001      	beq.n	8001d3a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001d36:	f000 f915 	bl	8001f64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001d42:	1d3b      	adds	r3, r7, #4
 8001d44:	4619      	mov	r1, r3
 8001d46:	4806      	ldr	r0, [pc, #24]	@ (8001d60 <MX_TIM2_Init+0x98>)
 8001d48:	f005 fe74 	bl	8007a34 <HAL_TIMEx_MasterConfigSynchronization>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d001      	beq.n	8001d56 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001d52:	f000 f907 	bl	8001f64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001d56:	bf00      	nop
 8001d58:	3720      	adds	r7, #32
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bd80      	pop	{r7, pc}
 8001d5e:	bf00      	nop
 8001d60:	200001c8 	.word	0x200001c8

08001d64 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001d68:	4b14      	ldr	r3, [pc, #80]	@ (8001dbc <MX_USART1_UART_Init+0x58>)
 8001d6a:	4a15      	ldr	r2, [pc, #84]	@ (8001dc0 <MX_USART1_UART_Init+0x5c>)
 8001d6c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001d6e:	4b13      	ldr	r3, [pc, #76]	@ (8001dbc <MX_USART1_UART_Init+0x58>)
 8001d70:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001d74:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001d76:	4b11      	ldr	r3, [pc, #68]	@ (8001dbc <MX_USART1_UART_Init+0x58>)
 8001d78:	2200      	movs	r2, #0
 8001d7a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001d7c:	4b0f      	ldr	r3, [pc, #60]	@ (8001dbc <MX_USART1_UART_Init+0x58>)
 8001d7e:	2200      	movs	r2, #0
 8001d80:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001d82:	4b0e      	ldr	r3, [pc, #56]	@ (8001dbc <MX_USART1_UART_Init+0x58>)
 8001d84:	2200      	movs	r2, #0
 8001d86:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX;
 8001d88:	4b0c      	ldr	r3, [pc, #48]	@ (8001dbc <MX_USART1_UART_Init+0x58>)
 8001d8a:	2208      	movs	r2, #8
 8001d8c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d8e:	4b0b      	ldr	r3, [pc, #44]	@ (8001dbc <MX_USART1_UART_Init+0x58>)
 8001d90:	2200      	movs	r2, #0
 8001d92:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d94:	4b09      	ldr	r3, [pc, #36]	@ (8001dbc <MX_USART1_UART_Init+0x58>)
 8001d96:	2200      	movs	r2, #0
 8001d98:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001d9a:	4b08      	ldr	r3, [pc, #32]	@ (8001dbc <MX_USART1_UART_Init+0x58>)
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001da0:	4b06      	ldr	r3, [pc, #24]	@ (8001dbc <MX_USART1_UART_Init+0x58>)
 8001da2:	2200      	movs	r2, #0
 8001da4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001da6:	4805      	ldr	r0, [pc, #20]	@ (8001dbc <MX_USART1_UART_Init+0x58>)
 8001da8:	f005 feaa 	bl	8007b00 <HAL_UART_Init>
 8001dac:	4603      	mov	r3, r0
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d001      	beq.n	8001db6 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001db2:	f000 f8d7 	bl	8001f64 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001db6:	bf00      	nop
 8001db8:	bd80      	pop	{r7, pc}
 8001dba:	bf00      	nop
 8001dbc:	20000214 	.word	0x20000214
 8001dc0:	40013800 	.word	0x40013800

08001dc4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b082      	sub	sp, #8
 8001dc8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001dca:	4b0c      	ldr	r3, [pc, #48]	@ (8001dfc <MX_DMA_Init+0x38>)
 8001dcc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001dce:	4a0b      	ldr	r2, [pc, #44]	@ (8001dfc <MX_DMA_Init+0x38>)
 8001dd0:	f043 0301 	orr.w	r3, r3, #1
 8001dd4:	6493      	str	r3, [r2, #72]	@ 0x48
 8001dd6:	4b09      	ldr	r3, [pc, #36]	@ (8001dfc <MX_DMA_Init+0x38>)
 8001dd8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001dda:	f003 0301 	and.w	r3, r3, #1
 8001dde:	607b      	str	r3, [r7, #4]
 8001de0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001de2:	2200      	movs	r2, #0
 8001de4:	2100      	movs	r1, #0
 8001de6:	200b      	movs	r0, #11
 8001de8:	f002 f829 	bl	8003e3e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001dec:	200b      	movs	r0, #11
 8001dee:	f002 f842 	bl	8003e76 <HAL_NVIC_EnableIRQ>

}
 8001df2:	bf00      	nop
 8001df4:	3708      	adds	r7, #8
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bd80      	pop	{r7, pc}
 8001dfa:	bf00      	nop
 8001dfc:	40021000 	.word	0x40021000

08001e00 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b08a      	sub	sp, #40	@ 0x28
 8001e04:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e06:	f107 0314 	add.w	r3, r7, #20
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	601a      	str	r2, [r3, #0]
 8001e0e:	605a      	str	r2, [r3, #4]
 8001e10:	609a      	str	r2, [r3, #8]
 8001e12:	60da      	str	r2, [r3, #12]
 8001e14:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e16:	4b38      	ldr	r3, [pc, #224]	@ (8001ef8 <MX_GPIO_Init+0xf8>)
 8001e18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e1a:	4a37      	ldr	r2, [pc, #220]	@ (8001ef8 <MX_GPIO_Init+0xf8>)
 8001e1c:	f043 0304 	orr.w	r3, r3, #4
 8001e20:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001e22:	4b35      	ldr	r3, [pc, #212]	@ (8001ef8 <MX_GPIO_Init+0xf8>)
 8001e24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e26:	f003 0304 	and.w	r3, r3, #4
 8001e2a:	613b      	str	r3, [r7, #16]
 8001e2c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e2e:	4b32      	ldr	r3, [pc, #200]	@ (8001ef8 <MX_GPIO_Init+0xf8>)
 8001e30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e32:	4a31      	ldr	r2, [pc, #196]	@ (8001ef8 <MX_GPIO_Init+0xf8>)
 8001e34:	f043 0301 	orr.w	r3, r3, #1
 8001e38:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001e3a:	4b2f      	ldr	r3, [pc, #188]	@ (8001ef8 <MX_GPIO_Init+0xf8>)
 8001e3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e3e:	f003 0301 	and.w	r3, r3, #1
 8001e42:	60fb      	str	r3, [r7, #12]
 8001e44:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e46:	4b2c      	ldr	r3, [pc, #176]	@ (8001ef8 <MX_GPIO_Init+0xf8>)
 8001e48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e4a:	4a2b      	ldr	r2, [pc, #172]	@ (8001ef8 <MX_GPIO_Init+0xf8>)
 8001e4c:	f043 0302 	orr.w	r3, r3, #2
 8001e50:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001e52:	4b29      	ldr	r3, [pc, #164]	@ (8001ef8 <MX_GPIO_Init+0xf8>)
 8001e54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e56:	f003 0302 	and.w	r3, r3, #2
 8001e5a:	60bb      	str	r3, [r7, #8]
 8001e5c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001e5e:	4b26      	ldr	r3, [pc, #152]	@ (8001ef8 <MX_GPIO_Init+0xf8>)
 8001e60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e62:	4a25      	ldr	r2, [pc, #148]	@ (8001ef8 <MX_GPIO_Init+0xf8>)
 8001e64:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001e68:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001e6a:	4b23      	ldr	r3, [pc, #140]	@ (8001ef8 <MX_GPIO_Init+0xf8>)
 8001e6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e6e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e72:	607b      	str	r3, [r7, #4]
 8001e74:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CSN_Pin|CE_Pin|DHT_PIN_Pin, GPIO_PIN_RESET);
 8001e76:	2200      	movs	r2, #0
 8001e78:	f44f 71a8 	mov.w	r1, #336	@ 0x150
 8001e7c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001e80:	f002 fb8e 	bl	80045a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA2 PA3 PA5 PA7
                           PA11 PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_5|GPIO_PIN_7
 8001e84:	f649 03ac 	movw	r3, #39084	@ 0x98ac
 8001e88:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e8a:	2303      	movs	r3, #3
 8001e8c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e92:	f107 0314 	add.w	r3, r7, #20
 8001e96:	4619      	mov	r1, r3
 8001e98:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001e9c:	f002 f9fe 	bl	800429c <HAL_GPIO_Init>

  /*Configure GPIO pins : CSN_Pin CE_Pin DHT_PIN_Pin */
  GPIO_InitStruct.Pin = CSN_Pin|CE_Pin|DHT_PIN_Pin;
 8001ea0:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001ea4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001eb2:	f107 0314 	add.w	r3, r7, #20
 8001eb6:	4619      	mov	r1, r3
 8001eb8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001ebc:	f002 f9ee 	bl	800429c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001ec0:	2303      	movs	r3, #3
 8001ec2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ec4:	2303      	movs	r3, #3
 8001ec6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ecc:	f107 0314 	add.w	r3, r7, #20
 8001ed0:	4619      	mov	r1, r3
 8001ed2:	480a      	ldr	r0, [pc, #40]	@ (8001efc <MX_GPIO_Init+0xfc>)
 8001ed4:	f002 f9e2 	bl	800429c <HAL_GPIO_Init>

  /*Configure GPIO pin : PH3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001ed8:	2308      	movs	r3, #8
 8001eda:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001edc:	2303      	movs	r3, #3
 8001ede:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001ee4:	f107 0314 	add.w	r3, r7, #20
 8001ee8:	4619      	mov	r1, r3
 8001eea:	4805      	ldr	r0, [pc, #20]	@ (8001f00 <MX_GPIO_Init+0x100>)
 8001eec:	f002 f9d6 	bl	800429c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001ef0:	bf00      	nop
 8001ef2:	3728      	adds	r7, #40	@ 0x28
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	bd80      	pop	{r7, pc}
 8001ef8:	40021000 	.word	0x40021000
 8001efc:	48000400 	.word	0x48000400
 8001f00:	48001c00 	.word	0x48001c00

08001f04 <radioSetup>:

/* USER CODE BEGIN 4 */
void radioSetup(void){
 8001f04:	b580      	push	{r7, lr}
 8001f06:	af00      	add	r7, sp, #0

	// The transmitter sends a data packets to the three logic addresses without Auto-ACK (ShockBurst disabled)
	// The payload length depends on the logic address

	// Disable ShockBurst for all RX pipes
	nRF24_DisableAA(0xFF);
 8001f08:	20ff      	movs	r0, #255	@ 0xff
 8001f0a:	f000 fa3a 	bl	8002382 <nRF24_DisableAA>

	// Set RF channel
	nRF24_SetRFChannel(115);
 8001f0e:	2073      	movs	r0, #115	@ 0x73
 8001f10:	f000 f9e3 	bl	80022da <nRF24_SetRFChannel>

	// Set data rate
	nRF24_SetDataRate(nRF24_DR_250kbps);
 8001f14:	2020      	movs	r0, #32
 8001f16:	f000 fa19 	bl	800234c <nRF24_SetDataRate>

	// Set CRC scheme
	nRF24_SetCRCScheme(nRF24_CRC_2byte);
 8001f1a:	200c      	movs	r0, #12
 8001f1c:	f000 f9bc 	bl	8002298 <nRF24_SetCRCScheme>

	// Set address width, its common for all pipes (RX and TX)
	nRF24_SetAddrWidth(3);
 8001f20:	2003      	movs	r0, #3
 8001f22:	f000 f9e8 	bl	80022f6 <nRF24_SetAddrWidth>

	// Set TX power (maximum)
	nRF24_SetTXPower(nRF24_TXPWR_0dBm);
 8001f26:	2006      	movs	r0, #6
 8001f28:	f000 f9f5 	bl	8002316 <nRF24_SetTXPower>

	// Set operational mode (PTX == transmitter)
	nRF24_SetOperationalMode(nRF24_MODE_TX);
 8001f2c:	2000      	movs	r0, #0
 8001f2e:	f000 f992 	bl	8002256 <nRF24_SetOperationalMode>

	// Clear any pending IRQ flags
	nRF24_ClearIRQFlags();
 8001f32:	f000 fa65 	bl	8002400 <nRF24_ClearIRQFlags>

	// Wake the transceiver
	nRF24_SetPowerMode(nRF24_PWR_UP);
 8001f36:	2002      	movs	r0, #2
 8001f38:	f000 f96e 	bl	8002218 <nRF24_SetPowerMode>

	// Initialize the nRF24L01 to its default state
	nRF24_Init();
 8001f3c:	f000 f8f1 	bl	8002122 <nRF24_Init>

}
 8001f40:	bf00      	nop
 8001f42:	bd80      	pop	{r7, pc}

08001f44 <HAL_LPTIM_CompareMatchCallback>:
}



void HAL_LPTIM_CompareMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b082      	sub	sp, #8
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
  /* Timeout was reached, turn on LED3 */
  HAL_ResumeTick();
 8001f4c:	f000 fdee 	bl	8002b2c <HAL_ResumeTick>
  HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_3);
 8001f50:	2108      	movs	r1, #8
 8001f52:	4803      	ldr	r0, [pc, #12]	@ (8001f60 <HAL_LPTIM_CompareMatchCallback+0x1c>)
 8001f54:	f002 fb3c 	bl	80045d0 <HAL_GPIO_TogglePin>
}
 8001f58:	bf00      	nop
 8001f5a:	3708      	adds	r7, #8
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	bd80      	pop	{r7, pc}
 8001f60:	48000400 	.word	0x48000400

08001f64 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f64:	b480      	push	{r7}
 8001f66:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001f68:	b672      	cpsid	i
}
 8001f6a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001f6c:	bf00      	nop
 8001f6e:	e7fd      	b.n	8001f6c <Error_Handler+0x8>

08001f70 <nRF24_CE_L>:
static inline void nRF24_CE_L() {
 8001f70:	b580      	push	{r7, lr}
 8001f72:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CE_GPIO_Port, CE_Pin, GPIO_PIN_RESET);
 8001f74:	2200      	movs	r2, #0
 8001f76:	2140      	movs	r1, #64	@ 0x40
 8001f78:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001f7c:	f002 fb10 	bl	80045a0 <HAL_GPIO_WritePin>
}
 8001f80:	bf00      	nop
 8001f82:	bd80      	pop	{r7, pc}

08001f84 <nRF24_CE_H>:

static inline void nRF24_CE_H() {
 8001f84:	b580      	push	{r7, lr}
 8001f86:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CE_GPIO_Port, CE_Pin, GPIO_PIN_SET);
 8001f88:	2201      	movs	r2, #1
 8001f8a:	2140      	movs	r1, #64	@ 0x40
 8001f8c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001f90:	f002 fb06 	bl	80045a0 <HAL_GPIO_WritePin>
}
 8001f94:	bf00      	nop
 8001f96:	bd80      	pop	{r7, pc}

08001f98 <nRF24_CSN_L>:

static inline void nRF24_CSN_L() {
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CSN_GPIO_Port, CSN_Pin, GPIO_PIN_RESET);
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	2110      	movs	r1, #16
 8001fa0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001fa4:	f002 fafc 	bl	80045a0 <HAL_GPIO_WritePin>
}
 8001fa8:	bf00      	nop
 8001faa:	bd80      	pop	{r7, pc}

08001fac <nRF24_CSN_H>:

static inline void nRF24_CSN_H() {
 8001fac:	b580      	push	{r7, lr}
 8001fae:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CSN_GPIO_Port, CSN_Pin, GPIO_PIN_SET);
 8001fb0:	2201      	movs	r2, #1
 8001fb2:	2110      	movs	r1, #16
 8001fb4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001fb8:	f002 faf2 	bl	80045a0 <HAL_GPIO_WritePin>
}
 8001fbc:	bf00      	nop
 8001fbe:	bd80      	pop	{r7, pc}

08001fc0 <nRF24_LL_RW>:


static inline uint8_t nRF24_LL_RW(uint8_t data) {
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b086      	sub	sp, #24
 8001fc4:	af02      	add	r7, sp, #8
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	71fb      	strb	r3, [r7, #7]
    // Wait until TX buffer is empty
    uint8_t result;
    if(HAL_SPI_TransmitReceive(&hspi3, &data, &result, 1, 2000) != HAL_OK) {
 8001fca:	f107 020f 	add.w	r2, r7, #15
 8001fce:	1df9      	adds	r1, r7, #7
 8001fd0:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8001fd4:	9300      	str	r3, [sp, #0]
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	4806      	ldr	r0, [pc, #24]	@ (8001ff4 <nRF24_LL_RW+0x34>)
 8001fda:	f004 ff30 	bl	8006e3e <HAL_SPI_TransmitReceive>
 8001fde:	4603      	mov	r3, r0
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d001      	beq.n	8001fe8 <nRF24_LL_RW+0x28>
        Error_Handler();
 8001fe4:	f7ff ffbe 	bl	8001f64 <Error_Handler>
    };
    return result;
 8001fe8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fea:	4618      	mov	r0, r3
 8001fec:	3710      	adds	r7, #16
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bd80      	pop	{r7, pc}
 8001ff2:	bf00      	nop
 8001ff4:	20000164 	.word	0x20000164

08001ff8 <nRF24_ReadReg>:

// Read a register
// input:
//   reg - number of register to read
// return: value of register
static uint8_t nRF24_ReadReg(uint8_t reg) {
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b084      	sub	sp, #16
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	4603      	mov	r3, r0
 8002000:	71fb      	strb	r3, [r7, #7]
	uint8_t value;

	nRF24_CSN_L();
 8002002:	f7ff ffc9 	bl	8001f98 <nRF24_CSN_L>
	nRF24_LL_RW(reg & nRF24_MASK_REG_MAP);
 8002006:	79fb      	ldrb	r3, [r7, #7]
 8002008:	f003 031f 	and.w	r3, r3, #31
 800200c:	b2db      	uxtb	r3, r3
 800200e:	4618      	mov	r0, r3
 8002010:	f7ff ffd6 	bl	8001fc0 <nRF24_LL_RW>
	value = nRF24_LL_RW(nRF24_CMD_NOP);
 8002014:	20ff      	movs	r0, #255	@ 0xff
 8002016:	f7ff ffd3 	bl	8001fc0 <nRF24_LL_RW>
 800201a:	4603      	mov	r3, r0
 800201c:	73fb      	strb	r3, [r7, #15]
	nRF24_CSN_H();
 800201e:	f7ff ffc5 	bl	8001fac <nRF24_CSN_H>

	return value;
 8002022:	7bfb      	ldrb	r3, [r7, #15]
}
 8002024:	4618      	mov	r0, r3
 8002026:	3710      	adds	r7, #16
 8002028:	46bd      	mov	sp, r7
 800202a:	bd80      	pop	{r7, pc}

0800202c <nRF24_WriteReg>:

// Write a new value to register
// input:
//   reg - number of register to write
//   value - value to write
static void nRF24_WriteReg(uint8_t reg, uint8_t value) {
 800202c:	b580      	push	{r7, lr}
 800202e:	b082      	sub	sp, #8
 8002030:	af00      	add	r7, sp, #0
 8002032:	4603      	mov	r3, r0
 8002034:	460a      	mov	r2, r1
 8002036:	71fb      	strb	r3, [r7, #7]
 8002038:	4613      	mov	r3, r2
 800203a:	71bb      	strb	r3, [r7, #6]
	nRF24_CSN_L();
 800203c:	f7ff ffac 	bl	8001f98 <nRF24_CSN_L>
	if (reg < nRF24_CMD_W_REGISTER) {
 8002040:	79fb      	ldrb	r3, [r7, #7]
 8002042:	2b1f      	cmp	r3, #31
 8002044:	d810      	bhi.n	8002068 <nRF24_WriteReg+0x3c>
		// This is a register access
		nRF24_LL_RW(nRF24_CMD_W_REGISTER | (reg & nRF24_MASK_REG_MAP));
 8002046:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800204a:	f003 031f 	and.w	r3, r3, #31
 800204e:	b25b      	sxtb	r3, r3
 8002050:	f043 0320 	orr.w	r3, r3, #32
 8002054:	b25b      	sxtb	r3, r3
 8002056:	b2db      	uxtb	r3, r3
 8002058:	4618      	mov	r0, r3
 800205a:	f7ff ffb1 	bl	8001fc0 <nRF24_LL_RW>
		nRF24_LL_RW(value);
 800205e:	79bb      	ldrb	r3, [r7, #6]
 8002060:	4618      	mov	r0, r3
 8002062:	f7ff ffad 	bl	8001fc0 <nRF24_LL_RW>
 8002066:	e013      	b.n	8002090 <nRF24_WriteReg+0x64>
	} else {
		// This is a single byte command or future command/register
		nRF24_LL_RW(reg);
 8002068:	79fb      	ldrb	r3, [r7, #7]
 800206a:	4618      	mov	r0, r3
 800206c:	f7ff ffa8 	bl	8001fc0 <nRF24_LL_RW>
		if ((reg != nRF24_CMD_FLUSH_TX) && (reg != nRF24_CMD_FLUSH_RX) && \
 8002070:	79fb      	ldrb	r3, [r7, #7]
 8002072:	2be1      	cmp	r3, #225	@ 0xe1
 8002074:	d00c      	beq.n	8002090 <nRF24_WriteReg+0x64>
 8002076:	79fb      	ldrb	r3, [r7, #7]
 8002078:	2be2      	cmp	r3, #226	@ 0xe2
 800207a:	d009      	beq.n	8002090 <nRF24_WriteReg+0x64>
 800207c:	79fb      	ldrb	r3, [r7, #7]
 800207e:	2be3      	cmp	r3, #227	@ 0xe3
 8002080:	d006      	beq.n	8002090 <nRF24_WriteReg+0x64>
				(reg != nRF24_CMD_REUSE_TX_PL) && (reg != nRF24_CMD_NOP)) {
 8002082:	79fb      	ldrb	r3, [r7, #7]
 8002084:	2bff      	cmp	r3, #255	@ 0xff
 8002086:	d003      	beq.n	8002090 <nRF24_WriteReg+0x64>
			// Send register value
			nRF24_LL_RW(value);
 8002088:	79bb      	ldrb	r3, [r7, #6]
 800208a:	4618      	mov	r0, r3
 800208c:	f7ff ff98 	bl	8001fc0 <nRF24_LL_RW>
		}
	}
	nRF24_CSN_H();
 8002090:	f7ff ff8c 	bl	8001fac <nRF24_CSN_H>
}
 8002094:	bf00      	nop
 8002096:	3708      	adds	r7, #8
 8002098:	46bd      	mov	sp, r7
 800209a:	bd80      	pop	{r7, pc}

0800209c <nRF24_ReadMBReg>:
// Read a multi-byte register
// input:
//   reg - number of register to read
//   pBuf - pointer to the buffer for register data
//   count - number of bytes to read
static void nRF24_ReadMBReg(uint8_t reg, uint8_t *pBuf, uint8_t count) {
 800209c:	b590      	push	{r4, r7, lr}
 800209e:	b083      	sub	sp, #12
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	4603      	mov	r3, r0
 80020a4:	6039      	str	r1, [r7, #0]
 80020a6:	71fb      	strb	r3, [r7, #7]
 80020a8:	4613      	mov	r3, r2
 80020aa:	71bb      	strb	r3, [r7, #6]
	nRF24_CSN_L();
 80020ac:	f7ff ff74 	bl	8001f98 <nRF24_CSN_L>
	nRF24_LL_RW(reg);
 80020b0:	79fb      	ldrb	r3, [r7, #7]
 80020b2:	4618      	mov	r0, r3
 80020b4:	f7ff ff84 	bl	8001fc0 <nRF24_LL_RW>
	while (count--) {
 80020b8:	e007      	b.n	80020ca <nRF24_ReadMBReg+0x2e>
		*pBuf++ = nRF24_LL_RW(nRF24_CMD_NOP);
 80020ba:	683c      	ldr	r4, [r7, #0]
 80020bc:	1c63      	adds	r3, r4, #1
 80020be:	603b      	str	r3, [r7, #0]
 80020c0:	20ff      	movs	r0, #255	@ 0xff
 80020c2:	f7ff ff7d 	bl	8001fc0 <nRF24_LL_RW>
 80020c6:	4603      	mov	r3, r0
 80020c8:	7023      	strb	r3, [r4, #0]
	while (count--) {
 80020ca:	79bb      	ldrb	r3, [r7, #6]
 80020cc:	1e5a      	subs	r2, r3, #1
 80020ce:	71ba      	strb	r2, [r7, #6]
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d1f2      	bne.n	80020ba <nRF24_ReadMBReg+0x1e>
	}
	nRF24_CSN_H();
 80020d4:	f7ff ff6a 	bl	8001fac <nRF24_CSN_H>
}
 80020d8:	bf00      	nop
 80020da:	370c      	adds	r7, #12
 80020dc:	46bd      	mov	sp, r7
 80020de:	bd90      	pop	{r4, r7, pc}

080020e0 <nRF24_WriteMBReg>:
// Write a multi-byte register
// input:
//   reg - number of register to write
//   pBuf - pointer to the buffer with data to write
//   count - number of bytes to write
static void nRF24_WriteMBReg(uint8_t reg, uint8_t *pBuf, uint8_t count) {
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b082      	sub	sp, #8
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	4603      	mov	r3, r0
 80020e8:	6039      	str	r1, [r7, #0]
 80020ea:	71fb      	strb	r3, [r7, #7]
 80020ec:	4613      	mov	r3, r2
 80020ee:	71bb      	strb	r3, [r7, #6]
	nRF24_CSN_L();
 80020f0:	f7ff ff52 	bl	8001f98 <nRF24_CSN_L>
	nRF24_LL_RW(reg);
 80020f4:	79fb      	ldrb	r3, [r7, #7]
 80020f6:	4618      	mov	r0, r3
 80020f8:	f7ff ff62 	bl	8001fc0 <nRF24_LL_RW>
	while (count--) {
 80020fc:	e006      	b.n	800210c <nRF24_WriteMBReg+0x2c>
		nRF24_LL_RW(*pBuf++);
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	1c5a      	adds	r2, r3, #1
 8002102:	603a      	str	r2, [r7, #0]
 8002104:	781b      	ldrb	r3, [r3, #0]
 8002106:	4618      	mov	r0, r3
 8002108:	f7ff ff5a 	bl	8001fc0 <nRF24_LL_RW>
	while (count--) {
 800210c:	79bb      	ldrb	r3, [r7, #6]
 800210e:	1e5a      	subs	r2, r3, #1
 8002110:	71ba      	strb	r2, [r7, #6]
 8002112:	2b00      	cmp	r3, #0
 8002114:	d1f3      	bne.n	80020fe <nRF24_WriteMBReg+0x1e>
	}
	nRF24_CSN_H();
 8002116:	f7ff ff49 	bl	8001fac <nRF24_CSN_H>
}
 800211a:	bf00      	nop
 800211c:	3708      	adds	r7, #8
 800211e:	46bd      	mov	sp, r7
 8002120:	bd80      	pop	{r7, pc}

08002122 <nRF24_Init>:

// Set transceiver to it's initial state
// note: RX/TX pipe addresses remains untouched
void nRF24_Init(void) {
 8002122:	b580      	push	{r7, lr}
 8002124:	af00      	add	r7, sp, #0
	// Write to registers their initial values
	nRF24_WriteReg(nRF24_REG_CONFIG, 0x08);
 8002126:	2108      	movs	r1, #8
 8002128:	2000      	movs	r0, #0
 800212a:	f7ff ff7f 	bl	800202c <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_EN_AA, 0x3F);
 800212e:	213f      	movs	r1, #63	@ 0x3f
 8002130:	2001      	movs	r0, #1
 8002132:	f7ff ff7b 	bl	800202c <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_EN_RXADDR, 0x03);
 8002136:	2103      	movs	r1, #3
 8002138:	2002      	movs	r0, #2
 800213a:	f7ff ff77 	bl	800202c <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_SETUP_AW, 0x03);
 800213e:	2103      	movs	r1, #3
 8002140:	2003      	movs	r0, #3
 8002142:	f7ff ff73 	bl	800202c <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_SETUP_RETR, 0x03);
 8002146:	2103      	movs	r1, #3
 8002148:	2004      	movs	r0, #4
 800214a:	f7ff ff6f 	bl	800202c <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RF_CH, 0x02);
 800214e:	2102      	movs	r1, #2
 8002150:	2005      	movs	r0, #5
 8002152:	f7ff ff6b 	bl	800202c <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RF_SETUP, 0x0E);
 8002156:	210e      	movs	r1, #14
 8002158:	2006      	movs	r0, #6
 800215a:	f7ff ff67 	bl	800202c <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_STATUS, 0x00);
 800215e:	2100      	movs	r1, #0
 8002160:	2007      	movs	r0, #7
 8002162:	f7ff ff63 	bl	800202c <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P0, 0x00);
 8002166:	2100      	movs	r1, #0
 8002168:	2011      	movs	r0, #17
 800216a:	f7ff ff5f 	bl	800202c <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P1, 0x00);
 800216e:	2100      	movs	r1, #0
 8002170:	2012      	movs	r0, #18
 8002172:	f7ff ff5b 	bl	800202c <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P2, 0x00);
 8002176:	2100      	movs	r1, #0
 8002178:	2013      	movs	r0, #19
 800217a:	f7ff ff57 	bl	800202c <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P3, 0x00);
 800217e:	2100      	movs	r1, #0
 8002180:	2014      	movs	r0, #20
 8002182:	f7ff ff53 	bl	800202c <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P4, 0x00);
 8002186:	2100      	movs	r1, #0
 8002188:	2015      	movs	r0, #21
 800218a:	f7ff ff4f 	bl	800202c <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P5, 0x00);
 800218e:	2100      	movs	r1, #0
 8002190:	2016      	movs	r0, #22
 8002192:	f7ff ff4b 	bl	800202c <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_DYNPD, 0x00);
 8002196:	2100      	movs	r1, #0
 8002198:	201c      	movs	r0, #28
 800219a:	f7ff ff47 	bl	800202c <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_FEATURE, 0x00);
 800219e:	2100      	movs	r1, #0
 80021a0:	201d      	movs	r0, #29
 80021a2:	f7ff ff43 	bl	800202c <nRF24_WriteReg>

	// Clear the FIFO's
	nRF24_FlushRX();
 80021a6:	f000 f923 	bl	80023f0 <nRF24_FlushRX>
	nRF24_FlushTX();
 80021aa:	f000 f919 	bl	80023e0 <nRF24_FlushTX>

	// Clear any pending interrupt flags
	nRF24_ClearIRQFlags();
 80021ae:	f000 f927 	bl	8002400 <nRF24_ClearIRQFlags>

	// Deassert CSN pin (chip release)
	nRF24_CSN_H();
 80021b2:	f7ff fefb 	bl	8001fac <nRF24_CSN_H>
}
 80021b6:	bf00      	nop
 80021b8:	bd80      	pop	{r7, pc}
	...

080021bc <nRF24_Check>:

// Check if the nRF24L01 present
// return:
//   1 - nRF24L01 is online and responding
//   0 - received sequence differs from original
uint8_t nRF24_Check(void) {
 80021bc:	b580      	push	{r7, lr}
 80021be:	b084      	sub	sp, #16
 80021c0:	af00      	add	r7, sp, #0
	uint8_t rxbuf[5];
	uint8_t i;
	uint8_t *ptr = (uint8_t *)nRF24_TEST_ADDR;
 80021c2:	4b14      	ldr	r3, [pc, #80]	@ (8002214 <nRF24_Check+0x58>)
 80021c4:	60bb      	str	r3, [r7, #8]

	// Write test TX address and read TX_ADDR register
	nRF24_WriteMBReg(nRF24_CMD_W_REGISTER | nRF24_REG_TX_ADDR, ptr, 5);
 80021c6:	2205      	movs	r2, #5
 80021c8:	68b9      	ldr	r1, [r7, #8]
 80021ca:	2030      	movs	r0, #48	@ 0x30
 80021cc:	f7ff ff88 	bl	80020e0 <nRF24_WriteMBReg>
	nRF24_ReadMBReg(nRF24_CMD_R_REGISTER | nRF24_REG_TX_ADDR, rxbuf, 5);
 80021d0:	463b      	mov	r3, r7
 80021d2:	2205      	movs	r2, #5
 80021d4:	4619      	mov	r1, r3
 80021d6:	2010      	movs	r0, #16
 80021d8:	f7ff ff60 	bl	800209c <nRF24_ReadMBReg>

	// Compare buffers, return error on first mismatch
	for (i = 0; i < 5; i++) {
 80021dc:	2300      	movs	r3, #0
 80021de:	73fb      	strb	r3, [r7, #15]
 80021e0:	e00f      	b.n	8002202 <nRF24_Check+0x46>
		if (rxbuf[i] != *ptr++) return 0;
 80021e2:	7bfb      	ldrb	r3, [r7, #15]
 80021e4:	3310      	adds	r3, #16
 80021e6:	443b      	add	r3, r7
 80021e8:	f813 2c10 	ldrb.w	r2, [r3, #-16]
 80021ec:	68bb      	ldr	r3, [r7, #8]
 80021ee:	1c59      	adds	r1, r3, #1
 80021f0:	60b9      	str	r1, [r7, #8]
 80021f2:	781b      	ldrb	r3, [r3, #0]
 80021f4:	429a      	cmp	r2, r3
 80021f6:	d001      	beq.n	80021fc <nRF24_Check+0x40>
 80021f8:	2300      	movs	r3, #0
 80021fa:	e006      	b.n	800220a <nRF24_Check+0x4e>
	for (i = 0; i < 5; i++) {
 80021fc:	7bfb      	ldrb	r3, [r7, #15]
 80021fe:	3301      	adds	r3, #1
 8002200:	73fb      	strb	r3, [r7, #15]
 8002202:	7bfb      	ldrb	r3, [r7, #15]
 8002204:	2b04      	cmp	r3, #4
 8002206:	d9ec      	bls.n	80021e2 <nRF24_Check+0x26>
	}

	return 1;
 8002208:	2301      	movs	r3, #1
}
 800220a:	4618      	mov	r0, r3
 800220c:	3710      	adds	r7, #16
 800220e:	46bd      	mov	sp, r7
 8002210:	bd80      	pop	{r7, pc}
 8002212:	bf00      	nop
 8002214:	0800849c 	.word	0x0800849c

08002218 <nRF24_SetPowerMode>:

// Control transceiver power mode
// input:
//   mode - new state of power mode, one of nRF24_PWR_xx values
void nRF24_SetPowerMode(uint8_t mode) {
 8002218:	b580      	push	{r7, lr}
 800221a:	b084      	sub	sp, #16
 800221c:	af00      	add	r7, sp, #0
 800221e:	4603      	mov	r3, r0
 8002220:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	reg = nRF24_ReadReg(nRF24_REG_CONFIG);
 8002222:	2000      	movs	r0, #0
 8002224:	f7ff fee8 	bl	8001ff8 <nRF24_ReadReg>
 8002228:	4603      	mov	r3, r0
 800222a:	73fb      	strb	r3, [r7, #15]
	if (mode == nRF24_PWR_UP) {
 800222c:	79fb      	ldrb	r3, [r7, #7]
 800222e:	2b02      	cmp	r3, #2
 8002230:	d104      	bne.n	800223c <nRF24_SetPowerMode+0x24>
		// Set the PWR_UP bit of CONFIG register to wake the transceiver
		// It goes into Stanby-I mode with consumption about 26uA
		reg |= nRF24_CONFIG_PWR_UP;
 8002232:	7bfb      	ldrb	r3, [r7, #15]
 8002234:	f043 0302 	orr.w	r3, r3, #2
 8002238:	73fb      	strb	r3, [r7, #15]
 800223a:	e003      	b.n	8002244 <nRF24_SetPowerMode+0x2c>
	} else {
		// Clear the PWR_UP bit of CONFIG register to put the transceiver
		// into power down mode with consumption about 900nA
		reg &= ~nRF24_CONFIG_PWR_UP;
 800223c:	7bfb      	ldrb	r3, [r7, #15]
 800223e:	f023 0302 	bic.w	r3, r3, #2
 8002242:	73fb      	strb	r3, [r7, #15]
	}
	nRF24_WriteReg(nRF24_REG_CONFIG, reg);
 8002244:	7bfb      	ldrb	r3, [r7, #15]
 8002246:	4619      	mov	r1, r3
 8002248:	2000      	movs	r0, #0
 800224a:	f7ff feef 	bl	800202c <nRF24_WriteReg>
}
 800224e:	bf00      	nop
 8002250:	3710      	adds	r7, #16
 8002252:	46bd      	mov	sp, r7
 8002254:	bd80      	pop	{r7, pc}

08002256 <nRF24_SetOperationalMode>:

// Set transceiver operational mode
// input:
//   mode - operational mode, one of nRF24_MODE_xx values
void nRF24_SetOperationalMode(uint8_t mode) {
 8002256:	b580      	push	{r7, lr}
 8002258:	b084      	sub	sp, #16
 800225a:	af00      	add	r7, sp, #0
 800225c:	4603      	mov	r3, r0
 800225e:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	// Configure PRIM_RX bit of the CONFIG register
	reg  = nRF24_ReadReg(nRF24_REG_CONFIG);
 8002260:	2000      	movs	r0, #0
 8002262:	f7ff fec9 	bl	8001ff8 <nRF24_ReadReg>
 8002266:	4603      	mov	r3, r0
 8002268:	73fb      	strb	r3, [r7, #15]
	reg &= ~nRF24_CONFIG_PRIM_RX;
 800226a:	7bfb      	ldrb	r3, [r7, #15]
 800226c:	f023 0301 	bic.w	r3, r3, #1
 8002270:	73fb      	strb	r3, [r7, #15]
	reg |= (mode & nRF24_CONFIG_PRIM_RX);
 8002272:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002276:	f003 0301 	and.w	r3, r3, #1
 800227a:	b25a      	sxtb	r2, r3
 800227c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002280:	4313      	orrs	r3, r2
 8002282:	b25b      	sxtb	r3, r3
 8002284:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteReg(nRF24_REG_CONFIG, reg);
 8002286:	7bfb      	ldrb	r3, [r7, #15]
 8002288:	4619      	mov	r1, r3
 800228a:	2000      	movs	r0, #0
 800228c:	f7ff fece 	bl	800202c <nRF24_WriteReg>
}
 8002290:	bf00      	nop
 8002292:	3710      	adds	r7, #16
 8002294:	46bd      	mov	sp, r7
 8002296:	bd80      	pop	{r7, pc}

08002298 <nRF24_SetCRCScheme>:
// Configure transceiver CRC scheme
// input:
//   scheme - CRC scheme, one of nRF24_CRC_xx values
// note: transceiver will forcibly turn on the CRC in case if auto acknowledgment
//       enabled for at least one RX pipe
void nRF24_SetCRCScheme(uint8_t scheme) {
 8002298:	b580      	push	{r7, lr}
 800229a:	b084      	sub	sp, #16
 800229c:	af00      	add	r7, sp, #0
 800229e:	4603      	mov	r3, r0
 80022a0:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	// Configure EN_CRC[3] and CRCO[2] bits of the CONFIG register
	reg  = nRF24_ReadReg(nRF24_REG_CONFIG);
 80022a2:	2000      	movs	r0, #0
 80022a4:	f7ff fea8 	bl	8001ff8 <nRF24_ReadReg>
 80022a8:	4603      	mov	r3, r0
 80022aa:	73fb      	strb	r3, [r7, #15]
	reg &= ~nRF24_MASK_CRC;
 80022ac:	7bfb      	ldrb	r3, [r7, #15]
 80022ae:	f023 030c 	bic.w	r3, r3, #12
 80022b2:	73fb      	strb	r3, [r7, #15]
	reg |= (scheme & nRF24_MASK_CRC);
 80022b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022b8:	f003 030c 	and.w	r3, r3, #12
 80022bc:	b25a      	sxtb	r2, r3
 80022be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022c2:	4313      	orrs	r3, r2
 80022c4:	b25b      	sxtb	r3, r3
 80022c6:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteReg(nRF24_REG_CONFIG, reg);
 80022c8:	7bfb      	ldrb	r3, [r7, #15]
 80022ca:	4619      	mov	r1, r3
 80022cc:	2000      	movs	r0, #0
 80022ce:	f7ff fead 	bl	800202c <nRF24_WriteReg>
}
 80022d2:	bf00      	nop
 80022d4:	3710      	adds	r7, #16
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bd80      	pop	{r7, pc}

080022da <nRF24_SetRFChannel>:
// Set frequency channel
// input:
//   channel - radio frequency channel, value from 0 to 127
// note: frequency will be (2400 + channel)MHz
// note: PLOS_CNT[7:4] bits of the OBSERVER_TX register will be reset
void nRF24_SetRFChannel(uint8_t channel) {
 80022da:	b580      	push	{r7, lr}
 80022dc:	b082      	sub	sp, #8
 80022de:	af00      	add	r7, sp, #0
 80022e0:	4603      	mov	r3, r0
 80022e2:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteReg(nRF24_REG_RF_CH, channel);
 80022e4:	79fb      	ldrb	r3, [r7, #7]
 80022e6:	4619      	mov	r1, r3
 80022e8:	2005      	movs	r0, #5
 80022ea:	f7ff fe9f 	bl	800202c <nRF24_WriteReg>
}
 80022ee:	bf00      	nop
 80022f0:	3708      	adds	r7, #8
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bd80      	pop	{r7, pc}

080022f6 <nRF24_SetAddrWidth>:

// Set of address widths
// input:
//   addr_width - RX/TX address field width, value from 3 to 5
// note: this setting is common for all pipes
void nRF24_SetAddrWidth(uint8_t addr_width) {
 80022f6:	b580      	push	{r7, lr}
 80022f8:	b082      	sub	sp, #8
 80022fa:	af00      	add	r7, sp, #0
 80022fc:	4603      	mov	r3, r0
 80022fe:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteReg(nRF24_REG_SETUP_AW, addr_width - 2);
 8002300:	79fb      	ldrb	r3, [r7, #7]
 8002302:	3b02      	subs	r3, #2
 8002304:	b2db      	uxtb	r3, r3
 8002306:	4619      	mov	r1, r3
 8002308:	2003      	movs	r0, #3
 800230a:	f7ff fe8f 	bl	800202c <nRF24_WriteReg>
}
 800230e:	bf00      	nop
 8002310:	3708      	adds	r7, #8
 8002312:	46bd      	mov	sp, r7
 8002314:	bd80      	pop	{r7, pc}

08002316 <nRF24_SetTXPower>:
}

// Configure RF output power in TX mode
// input:
//   tx_pwr - RF output power, one of nRF24_TXPWR_xx values
void nRF24_SetTXPower(uint8_t tx_pwr) {
 8002316:	b580      	push	{r7, lr}
 8002318:	b084      	sub	sp, #16
 800231a:	af00      	add	r7, sp, #0
 800231c:	4603      	mov	r3, r0
 800231e:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	// Configure RF_PWR[2:1] bits of the RF_SETUP register
	reg  = nRF24_ReadReg(nRF24_REG_RF_SETUP);
 8002320:	2006      	movs	r0, #6
 8002322:	f7ff fe69 	bl	8001ff8 <nRF24_ReadReg>
 8002326:	4603      	mov	r3, r0
 8002328:	73fb      	strb	r3, [r7, #15]
	reg &= ~nRF24_MASK_RF_PWR;
 800232a:	7bfb      	ldrb	r3, [r7, #15]
 800232c:	f023 0306 	bic.w	r3, r3, #6
 8002330:	73fb      	strb	r3, [r7, #15]
	reg |= tx_pwr;
 8002332:	7bfa      	ldrb	r2, [r7, #15]
 8002334:	79fb      	ldrb	r3, [r7, #7]
 8002336:	4313      	orrs	r3, r2
 8002338:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteReg(nRF24_REG_RF_SETUP, reg);
 800233a:	7bfb      	ldrb	r3, [r7, #15]
 800233c:	4619      	mov	r1, r3
 800233e:	2006      	movs	r0, #6
 8002340:	f7ff fe74 	bl	800202c <nRF24_WriteReg>
}
 8002344:	bf00      	nop
 8002346:	3710      	adds	r7, #16
 8002348:	46bd      	mov	sp, r7
 800234a:	bd80      	pop	{r7, pc}

0800234c <nRF24_SetDataRate>:

// Configure transceiver data rate
// input:
//   data_rate - data rate, one of nRF24_DR_xx values
void nRF24_SetDataRate(uint8_t data_rate) {
 800234c:	b580      	push	{r7, lr}
 800234e:	b084      	sub	sp, #16
 8002350:	af00      	add	r7, sp, #0
 8002352:	4603      	mov	r3, r0
 8002354:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	// Configure RF_DR_LOW[5] and RF_DR_HIGH[3] bits of the RF_SETUP register
	reg  = nRF24_ReadReg(nRF24_REG_RF_SETUP);
 8002356:	2006      	movs	r0, #6
 8002358:	f7ff fe4e 	bl	8001ff8 <nRF24_ReadReg>
 800235c:	4603      	mov	r3, r0
 800235e:	73fb      	strb	r3, [r7, #15]
	reg &= ~nRF24_MASK_DATARATE;
 8002360:	7bfb      	ldrb	r3, [r7, #15]
 8002362:	f023 0328 	bic.w	r3, r3, #40	@ 0x28
 8002366:	73fb      	strb	r3, [r7, #15]
	reg |= data_rate;
 8002368:	7bfa      	ldrb	r2, [r7, #15]
 800236a:	79fb      	ldrb	r3, [r7, #7]
 800236c:	4313      	orrs	r3, r2
 800236e:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteReg(nRF24_REG_RF_SETUP, reg);
 8002370:	7bfb      	ldrb	r3, [r7, #15]
 8002372:	4619      	mov	r1, r3
 8002374:	2006      	movs	r0, #6
 8002376:	f7ff fe59 	bl	800202c <nRF24_WriteReg>
}
 800237a:	bf00      	nop
 800237c:	3710      	adds	r7, #16
 800237e:	46bd      	mov	sp, r7
 8002380:	bd80      	pop	{r7, pc}

08002382 <nRF24_DisableAA>:
}

// Disable the auto retransmit (a.k.a. enhanced ShockBurst) for one or all RX pipes
// input:
//   pipe - number of the RX pipe, value from 0 to 5, any other value will disable AA for all RX pipes
void nRF24_DisableAA(uint8_t pipe) {
 8002382:	b580      	push	{r7, lr}
 8002384:	b084      	sub	sp, #16
 8002386:	af00      	add	r7, sp, #0
 8002388:	4603      	mov	r3, r0
 800238a:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	if (pipe > 5) {
 800238c:	79fb      	ldrb	r3, [r7, #7]
 800238e:	2b05      	cmp	r3, #5
 8002390:	d904      	bls.n	800239c <nRF24_DisableAA+0x1a>
		// Disable Auto-ACK for ALL pipes
		nRF24_WriteReg(nRF24_REG_EN_AA, 0x00);
 8002392:	2100      	movs	r1, #0
 8002394:	2001      	movs	r0, #1
 8002396:	f7ff fe49 	bl	800202c <nRF24_WriteReg>
		// Clear bit in the EN_AA register
		reg  = nRF24_ReadReg(nRF24_REG_EN_AA);
		reg &= ~(1 << pipe);
		nRF24_WriteReg(nRF24_REG_EN_AA, reg);
	}
}
 800239a:	e015      	b.n	80023c8 <nRF24_DisableAA+0x46>
		reg  = nRF24_ReadReg(nRF24_REG_EN_AA);
 800239c:	2001      	movs	r0, #1
 800239e:	f7ff fe2b 	bl	8001ff8 <nRF24_ReadReg>
 80023a2:	4603      	mov	r3, r0
 80023a4:	73fb      	strb	r3, [r7, #15]
		reg &= ~(1 << pipe);
 80023a6:	79fb      	ldrb	r3, [r7, #7]
 80023a8:	2201      	movs	r2, #1
 80023aa:	fa02 f303 	lsl.w	r3, r2, r3
 80023ae:	b25b      	sxtb	r3, r3
 80023b0:	43db      	mvns	r3, r3
 80023b2:	b25a      	sxtb	r2, r3
 80023b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023b8:	4013      	ands	r3, r2
 80023ba:	b25b      	sxtb	r3, r3
 80023bc:	73fb      	strb	r3, [r7, #15]
		nRF24_WriteReg(nRF24_REG_EN_AA, reg);
 80023be:	7bfb      	ldrb	r3, [r7, #15]
 80023c0:	4619      	mov	r1, r3
 80023c2:	2001      	movs	r0, #1
 80023c4:	f7ff fe32 	bl	800202c <nRF24_WriteReg>
}
 80023c8:	bf00      	nop
 80023ca:	3710      	adds	r7, #16
 80023cc:	46bd      	mov	sp, r7
 80023ce:	bd80      	pop	{r7, pc}

080023d0 <nRF24_GetStatus>:

// Get value of the STATUS register
// return: value of STATUS register
uint8_t nRF24_GetStatus(void) {
 80023d0:	b580      	push	{r7, lr}
 80023d2:	af00      	add	r7, sp, #0
	return nRF24_ReadReg(nRF24_REG_STATUS);
 80023d4:	2007      	movs	r0, #7
 80023d6:	f7ff fe0f 	bl	8001ff8 <nRF24_ReadReg>
 80023da:	4603      	mov	r3, r0
}
 80023dc:	4618      	mov	r0, r3
 80023de:	bd80      	pop	{r7, pc}

080023e0 <nRF24_FlushTX>:
	reg = nRF24_ReadReg(nRF24_REG_RF_CH);
	nRF24_WriteReg(nRF24_REG_RF_CH, reg);
}

// Flush the TX FIFO
void nRF24_FlushTX(void) {
 80023e0:	b580      	push	{r7, lr}
 80023e2:	af00      	add	r7, sp, #0
	nRF24_WriteReg(nRF24_CMD_FLUSH_TX, nRF24_CMD_NOP);
 80023e4:	21ff      	movs	r1, #255	@ 0xff
 80023e6:	20e1      	movs	r0, #225	@ 0xe1
 80023e8:	f7ff fe20 	bl	800202c <nRF24_WriteReg>
}
 80023ec:	bf00      	nop
 80023ee:	bd80      	pop	{r7, pc}

080023f0 <nRF24_FlushRX>:

// Flush the RX FIFO
void nRF24_FlushRX(void) {
 80023f0:	b580      	push	{r7, lr}
 80023f2:	af00      	add	r7, sp, #0
	nRF24_WriteReg(nRF24_CMD_FLUSH_RX, nRF24_CMD_NOP);
 80023f4:	21ff      	movs	r1, #255	@ 0xff
 80023f6:	20e2      	movs	r0, #226	@ 0xe2
 80023f8:	f7ff fe18 	bl	800202c <nRF24_WriteReg>
}
 80023fc:	bf00      	nop
 80023fe:	bd80      	pop	{r7, pc}

08002400 <nRF24_ClearIRQFlags>:

// Clear any pending IRQ flags
void nRF24_ClearIRQFlags(void) {
 8002400:	b580      	push	{r7, lr}
 8002402:	b082      	sub	sp, #8
 8002404:	af00      	add	r7, sp, #0
	uint8_t reg;

	// Clear RX_DR, TX_DS and MAX_RT bits of the STATUS register
	reg  = nRF24_ReadReg(nRF24_REG_STATUS);
 8002406:	2007      	movs	r0, #7
 8002408:	f7ff fdf6 	bl	8001ff8 <nRF24_ReadReg>
 800240c:	4603      	mov	r3, r0
 800240e:	71fb      	strb	r3, [r7, #7]
	reg |= nRF24_MASK_STATUS_IRQ;
 8002410:	79fb      	ldrb	r3, [r7, #7]
 8002412:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
 8002416:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteReg(nRF24_REG_STATUS, reg);
 8002418:	79fb      	ldrb	r3, [r7, #7]
 800241a:	4619      	mov	r1, r3
 800241c:	2007      	movs	r0, #7
 800241e:	f7ff fe05 	bl	800202c <nRF24_WriteReg>
}
 8002422:	bf00      	nop
 8002424:	3708      	adds	r7, #8
 8002426:	46bd      	mov	sp, r7
 8002428:	bd80      	pop	{r7, pc}

0800242a <nRF24_WritePayload>:

// Write TX payload
// input:
//   pBuf - pointer to the buffer with payload data
//   length - payload length in bytes
void nRF24_WritePayload(uint8_t *pBuf, uint8_t length) {
 800242a:	b580      	push	{r7, lr}
 800242c:	b082      	sub	sp, #8
 800242e:	af00      	add	r7, sp, #0
 8002430:	6078      	str	r0, [r7, #4]
 8002432:	460b      	mov	r3, r1
 8002434:	70fb      	strb	r3, [r7, #3]
	nRF24_WriteMBReg(nRF24_CMD_W_TX_PAYLOAD, pBuf, length);
 8002436:	78fb      	ldrb	r3, [r7, #3]
 8002438:	461a      	mov	r2, r3
 800243a:	6879      	ldr	r1, [r7, #4]
 800243c:	20a0      	movs	r0, #160	@ 0xa0
 800243e:	f7ff fe4f 	bl	80020e0 <nRF24_WriteMBReg>
}
 8002442:	bf00      	nop
 8002444:	3708      	adds	r7, #8
 8002446:	46bd      	mov	sp, r7
 8002448:	bd80      	pop	{r7, pc}
	...

0800244c <nRF24_TransmitPacket>:
// Function to transmit data packet
// input:
//   pBuf - pointer to the buffer with data to transmit
//   length - length of the data buffer in bytes
// return: one of nRF24_TX_xx values
nRF24_TXResult nRF24_TransmitPacket(uint8_t *pBuf, uint8_t length) {
 800244c:	b580      	push	{r7, lr}
 800244e:	b084      	sub	sp, #16
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
 8002454:	460b      	mov	r3, r1
 8002456:	70fb      	strb	r3, [r7, #3]
	volatile uint32_t wait = nRF24_WAIT_TIMEOUT;
 8002458:	4b1c      	ldr	r3, [pc, #112]	@ (80024cc <nRF24_TransmitPacket+0x80>)
 800245a:	60bb      	str	r3, [r7, #8]
	uint8_t status;

	// Deassert the CE pin (in case if it still high)
	nRF24_CE_L();
 800245c:	f7ff fd88 	bl	8001f70 <nRF24_CE_L>

	// Transfer a data from the specified buffer to the TX FIFO
	nRF24_WritePayload(pBuf, length);
 8002460:	78fb      	ldrb	r3, [r7, #3]
 8002462:	4619      	mov	r1, r3
 8002464:	6878      	ldr	r0, [r7, #4]
 8002466:	f7ff ffe0 	bl	800242a <nRF24_WritePayload>

	// Start a transmission by asserting CE pin (must be held at least 10us)
	nRF24_CE_H();
 800246a:	f7ff fd8b 	bl	8001f84 <nRF24_CE_H>
	// Poll the transceiver status register until one of the following flags will be set:
	//   TX_DS  - means the packet has been transmitted
	//   MAX_RT - means the maximum number of TX retransmits happened
	// note: this solution is far from perfect, better to use IRQ instead of polling the status
	do {
		status = nRF24_GetStatus();
 800246e:	f7ff ffaf 	bl	80023d0 <nRF24_GetStatus>
 8002472:	4603      	mov	r3, r0
 8002474:	73fb      	strb	r3, [r7, #15]
		if (status & (nRF24_FLAG_TX_DS | nRF24_FLAG_MAX_RT)) {
 8002476:	7bfb      	ldrb	r3, [r7, #15]
 8002478:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800247c:	2b00      	cmp	r3, #0
 800247e:	d105      	bne.n	800248c <nRF24_TransmitPacket+0x40>
			break;
		}
	} while (wait--);
 8002480:	68bb      	ldr	r3, [r7, #8]
 8002482:	1e5a      	subs	r2, r3, #1
 8002484:	60ba      	str	r2, [r7, #8]
 8002486:	2b00      	cmp	r3, #0
 8002488:	d1f1      	bne.n	800246e <nRF24_TransmitPacket+0x22>
 800248a:	e000      	b.n	800248e <nRF24_TransmitPacket+0x42>
			break;
 800248c:	bf00      	nop

	// Deassert the CE pin (Standby-II --> Standby-I)
	nRF24_CE_L();
 800248e:	f7ff fd6f 	bl	8001f70 <nRF24_CE_L>

	if (!wait) {
 8002492:	68bb      	ldr	r3, [r7, #8]
 8002494:	2b00      	cmp	r3, #0
 8002496:	d101      	bne.n	800249c <nRF24_TransmitPacket+0x50>
		// Timeout
		return nRF24_TX_TIMEOUT;
 8002498:	2302      	movs	r3, #2
 800249a:	e012      	b.n	80024c2 <nRF24_TransmitPacket+0x76>
	}

	// Clear pending IRQ flags
    nRF24_ClearIRQFlags();
 800249c:	f7ff ffb0 	bl	8002400 <nRF24_ClearIRQFlags>

    if (status & nRF24_FLAG_MAX_RT) {
 80024a0:	7bfb      	ldrb	r3, [r7, #15]
 80024a2:	f003 0310 	and.w	r3, r3, #16
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d001      	beq.n	80024ae <nRF24_TransmitPacket+0x62>
    		// Auto retransmit counter exceeds the programmed maximum limit (FIFO is not removed)
    		return nRF24_TX_MAXRT;
 80024aa:	2303      	movs	r3, #3
 80024ac:	e009      	b.n	80024c2 <nRF24_TransmitPacket+0x76>
	}

	if (status & nRF24_FLAG_TX_DS) {
 80024ae:	7bfb      	ldrb	r3, [r7, #15]
 80024b0:	f003 0320 	and.w	r3, r3, #32
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d001      	beq.n	80024bc <nRF24_TransmitPacket+0x70>
		// Successful transmission
		return nRF24_TX_SUCCESS;
 80024b8:	2301      	movs	r3, #1
 80024ba:	e002      	b.n	80024c2 <nRF24_TransmitPacket+0x76>
	}

	// Some banana happens, a payload remains in the TX FIFO, flush it
	nRF24_FlushTX();
 80024bc:	f7ff ff90 	bl	80023e0 <nRF24_FlushTX>

	return nRF24_TX_ERROR;
 80024c0:	2300      	movs	r3, #0
}
 80024c2:	4618      	mov	r0, r3
 80024c4:	3710      	adds	r7, #16
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bd80      	pop	{r7, pc}
 80024ca:	bf00      	nop
 80024cc:	000fffff 	.word	0x000fffff

080024d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80024d0:	b480      	push	{r7}
 80024d2:	b083      	sub	sp, #12
 80024d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024d6:	4b0f      	ldr	r3, [pc, #60]	@ (8002514 <HAL_MspInit+0x44>)
 80024d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80024da:	4a0e      	ldr	r2, [pc, #56]	@ (8002514 <HAL_MspInit+0x44>)
 80024dc:	f043 0301 	orr.w	r3, r3, #1
 80024e0:	6613      	str	r3, [r2, #96]	@ 0x60
 80024e2:	4b0c      	ldr	r3, [pc, #48]	@ (8002514 <HAL_MspInit+0x44>)
 80024e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80024e6:	f003 0301 	and.w	r3, r3, #1
 80024ea:	607b      	str	r3, [r7, #4]
 80024ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80024ee:	4b09      	ldr	r3, [pc, #36]	@ (8002514 <HAL_MspInit+0x44>)
 80024f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024f2:	4a08      	ldr	r2, [pc, #32]	@ (8002514 <HAL_MspInit+0x44>)
 80024f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80024f8:	6593      	str	r3, [r2, #88]	@ 0x58
 80024fa:	4b06      	ldr	r3, [pc, #24]	@ (8002514 <HAL_MspInit+0x44>)
 80024fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002502:	603b      	str	r3, [r7, #0]
 8002504:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002506:	bf00      	nop
 8002508:	370c      	adds	r7, #12
 800250a:	46bd      	mov	sp, r7
 800250c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002510:	4770      	bx	lr
 8002512:	bf00      	nop
 8002514:	40021000 	.word	0x40021000

08002518 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b09e      	sub	sp, #120	@ 0x78
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002520:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002524:	2200      	movs	r2, #0
 8002526:	601a      	str	r2, [r3, #0]
 8002528:	605a      	str	r2, [r3, #4]
 800252a:	609a      	str	r2, [r3, #8]
 800252c:	60da      	str	r2, [r3, #12]
 800252e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002530:	f107 0310 	add.w	r3, r7, #16
 8002534:	2254      	movs	r2, #84	@ 0x54
 8002536:	2100      	movs	r1, #0
 8002538:	4618      	mov	r0, r3
 800253a:	f005 ff76 	bl	800842a <memset>
  if(hadc->Instance==ADC1)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	4a3b      	ldr	r2, [pc, #236]	@ (8002630 <HAL_ADC_MspInit+0x118>)
 8002544:	4293      	cmp	r3, r2
 8002546:	d16e      	bne.n	8002626 <HAL_ADC_MspInit+0x10e>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8002548:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800254c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800254e:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8002552:	65bb      	str	r3, [r7, #88]	@ 0x58
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8002554:	2301      	movs	r3, #1
 8002556:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8002558:	2301      	movs	r3, #1
 800255a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 800255c:	2310      	movs	r3, #16
 800255e:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8002560:	2307      	movs	r3, #7
 8002562:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8002564:	2302      	movs	r3, #2
 8002566:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8002568:	2302      	movs	r3, #2
 800256a:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 800256c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002570:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002572:	f107 0310 	add.w	r3, r7, #16
 8002576:	4618      	mov	r0, r3
 8002578:	f004 f8c6 	bl	8006708 <HAL_RCCEx_PeriphCLKConfig>
 800257c:	4603      	mov	r3, r0
 800257e:	2b00      	cmp	r3, #0
 8002580:	d001      	beq.n	8002586 <HAL_ADC_MspInit+0x6e>
    {
      Error_Handler();
 8002582:	f7ff fcef 	bl	8001f64 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8002586:	4b2b      	ldr	r3, [pc, #172]	@ (8002634 <HAL_ADC_MspInit+0x11c>)
 8002588:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800258a:	4a2a      	ldr	r2, [pc, #168]	@ (8002634 <HAL_ADC_MspInit+0x11c>)
 800258c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002590:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002592:	4b28      	ldr	r3, [pc, #160]	@ (8002634 <HAL_ADC_MspInit+0x11c>)
 8002594:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002596:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800259a:	60fb      	str	r3, [r7, #12]
 800259c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800259e:	4b25      	ldr	r3, [pc, #148]	@ (8002634 <HAL_ADC_MspInit+0x11c>)
 80025a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025a2:	4a24      	ldr	r2, [pc, #144]	@ (8002634 <HAL_ADC_MspInit+0x11c>)
 80025a4:	f043 0301 	orr.w	r3, r3, #1
 80025a8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80025aa:	4b22      	ldr	r3, [pc, #136]	@ (8002634 <HAL_ADC_MspInit+0x11c>)
 80025ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025ae:	f003 0301 	and.w	r3, r3, #1
 80025b2:	60bb      	str	r3, [r7, #8]
 80025b4:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    PA1     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = LDR_PIN_Pin|RAIN_PIN_Pin;
 80025b6:	2303      	movs	r3, #3
 80025b8:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80025ba:	230b      	movs	r3, #11
 80025bc:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025be:	2300      	movs	r3, #0
 80025c0:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025c2:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80025c6:	4619      	mov	r1, r3
 80025c8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80025cc:	f001 fe66 	bl	800429c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80025d0:	4b19      	ldr	r3, [pc, #100]	@ (8002638 <HAL_ADC_MspInit+0x120>)
 80025d2:	4a1a      	ldr	r2, [pc, #104]	@ (800263c <HAL_ADC_MspInit+0x124>)
 80025d4:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 80025d6:	4b18      	ldr	r3, [pc, #96]	@ (8002638 <HAL_ADC_MspInit+0x120>)
 80025d8:	2200      	movs	r2, #0
 80025da:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80025dc:	4b16      	ldr	r3, [pc, #88]	@ (8002638 <HAL_ADC_MspInit+0x120>)
 80025de:	2200      	movs	r2, #0
 80025e0:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80025e2:	4b15      	ldr	r3, [pc, #84]	@ (8002638 <HAL_ADC_MspInit+0x120>)
 80025e4:	2200      	movs	r2, #0
 80025e6:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80025e8:	4b13      	ldr	r3, [pc, #76]	@ (8002638 <HAL_ADC_MspInit+0x120>)
 80025ea:	2280      	movs	r2, #128	@ 0x80
 80025ec:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80025ee:	4b12      	ldr	r3, [pc, #72]	@ (8002638 <HAL_ADC_MspInit+0x120>)
 80025f0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80025f4:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80025f6:	4b10      	ldr	r3, [pc, #64]	@ (8002638 <HAL_ADC_MspInit+0x120>)
 80025f8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80025fc:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80025fe:	4b0e      	ldr	r3, [pc, #56]	@ (8002638 <HAL_ADC_MspInit+0x120>)
 8002600:	2220      	movs	r2, #32
 8002602:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002604:	4b0c      	ldr	r3, [pc, #48]	@ (8002638 <HAL_ADC_MspInit+0x120>)
 8002606:	2200      	movs	r2, #0
 8002608:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800260a:	480b      	ldr	r0, [pc, #44]	@ (8002638 <HAL_ADC_MspInit+0x120>)
 800260c:	f001 fc4e 	bl	8003eac <HAL_DMA_Init>
 8002610:	4603      	mov	r3, r0
 8002612:	2b00      	cmp	r3, #0
 8002614:	d001      	beq.n	800261a <HAL_ADC_MspInit+0x102>
    {
      Error_Handler();
 8002616:	f7ff fca5 	bl	8001f64 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	4a06      	ldr	r2, [pc, #24]	@ (8002638 <HAL_ADC_MspInit+0x120>)
 800261e:	64da      	str	r2, [r3, #76]	@ 0x4c
 8002620:	4a05      	ldr	r2, [pc, #20]	@ (8002638 <HAL_ADC_MspInit+0x120>)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6293      	str	r3, [r2, #40]	@ 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002626:	bf00      	nop
 8002628:	3778      	adds	r7, #120	@ 0x78
 800262a:	46bd      	mov	sp, r7
 800262c:	bd80      	pop	{r7, pc}
 800262e:	bf00      	nop
 8002630:	50040000 	.word	0x50040000
 8002634:	40021000 	.word	0x40021000
 8002638:	20000090 	.word	0x20000090
 800263c:	40020008 	.word	0x40020008

08002640 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b09e      	sub	sp, #120	@ 0x78
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002648:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800264c:	2200      	movs	r2, #0
 800264e:	601a      	str	r2, [r3, #0]
 8002650:	605a      	str	r2, [r3, #4]
 8002652:	609a      	str	r2, [r3, #8]
 8002654:	60da      	str	r2, [r3, #12]
 8002656:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002658:	f107 0310 	add.w	r3, r7, #16
 800265c:	2254      	movs	r2, #84	@ 0x54
 800265e:	2100      	movs	r1, #0
 8002660:	4618      	mov	r0, r3
 8002662:	f005 fee2 	bl	800842a <memset>
  if(hi2c->Instance==I2C1)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	4a1f      	ldr	r2, [pc, #124]	@ (80026e8 <HAL_I2C_MspInit+0xa8>)
 800266c:	4293      	cmp	r3, r2
 800266e:	d137      	bne.n	80026e0 <HAL_I2C_MspInit+0xa0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002670:	2340      	movs	r3, #64	@ 0x40
 8002672:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002674:	2300      	movs	r3, #0
 8002676:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002678:	f107 0310 	add.w	r3, r7, #16
 800267c:	4618      	mov	r0, r3
 800267e:	f004 f843 	bl	8006708 <HAL_RCCEx_PeriphCLKConfig>
 8002682:	4603      	mov	r3, r0
 8002684:	2b00      	cmp	r3, #0
 8002686:	d001      	beq.n	800268c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8002688:	f7ff fc6c 	bl	8001f64 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800268c:	4b17      	ldr	r3, [pc, #92]	@ (80026ec <HAL_I2C_MspInit+0xac>)
 800268e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002690:	4a16      	ldr	r2, [pc, #88]	@ (80026ec <HAL_I2C_MspInit+0xac>)
 8002692:	f043 0301 	orr.w	r3, r3, #1
 8002696:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002698:	4b14      	ldr	r3, [pc, #80]	@ (80026ec <HAL_I2C_MspInit+0xac>)
 800269a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800269c:	f003 0301 	and.w	r3, r3, #1
 80026a0:	60fb      	str	r3, [r7, #12]
 80026a2:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = BMP_SCL_Pin|BMP_SDA_Pin;
 80026a4:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80026a8:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80026aa:	2312      	movs	r3, #18
 80026ac:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026ae:	2300      	movs	r3, #0
 80026b0:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026b2:	2303      	movs	r3, #3
 80026b4:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80026b6:	2304      	movs	r3, #4
 80026b8:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026ba:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80026be:	4619      	mov	r1, r3
 80026c0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80026c4:	f001 fdea 	bl	800429c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80026c8:	4b08      	ldr	r3, [pc, #32]	@ (80026ec <HAL_I2C_MspInit+0xac>)
 80026ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026cc:	4a07      	ldr	r2, [pc, #28]	@ (80026ec <HAL_I2C_MspInit+0xac>)
 80026ce:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80026d2:	6593      	str	r3, [r2, #88]	@ 0x58
 80026d4:	4b05      	ldr	r3, [pc, #20]	@ (80026ec <HAL_I2C_MspInit+0xac>)
 80026d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026d8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80026dc:	60bb      	str	r3, [r7, #8]
 80026de:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80026e0:	bf00      	nop
 80026e2:	3778      	adds	r7, #120	@ 0x78
 80026e4:	46bd      	mov	sp, r7
 80026e6:	bd80      	pop	{r7, pc}
 80026e8:	40005400 	.word	0x40005400
 80026ec:	40021000 	.word	0x40021000

080026f0 <HAL_LPTIM_MspInit>:
* This function configures the hardware resources used in this example
* @param hlptim: LPTIM handle pointer
* @retval None
*/
void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* hlptim)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b098      	sub	sp, #96	@ 0x60
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80026f8:	f107 030c 	add.w	r3, r7, #12
 80026fc:	2254      	movs	r2, #84	@ 0x54
 80026fe:	2100      	movs	r1, #0
 8002700:	4618      	mov	r0, r3
 8002702:	f005 fe92 	bl	800842a <memset>
  if(hlptim->Instance==LPTIM2)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	4a15      	ldr	r2, [pc, #84]	@ (8002760 <HAL_LPTIM_MspInit+0x70>)
 800270c:	4293      	cmp	r3, r2
 800270e:	d123      	bne.n	8002758 <HAL_LPTIM_MspInit+0x68>

  /* USER CODE END LPTIM2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPTIM2;
 8002710:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002714:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.Lptim2ClockSelection = RCC_LPTIM2CLKSOURCE_LSI;
 8002716:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800271a:	647b      	str	r3, [r7, #68]	@ 0x44
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800271c:	f107 030c 	add.w	r3, r7, #12
 8002720:	4618      	mov	r0, r3
 8002722:	f003 fff1 	bl	8006708 <HAL_RCCEx_PeriphCLKConfig>
 8002726:	4603      	mov	r3, r0
 8002728:	2b00      	cmp	r3, #0
 800272a:	d001      	beq.n	8002730 <HAL_LPTIM_MspInit+0x40>
    {
      Error_Handler();
 800272c:	f7ff fc1a 	bl	8001f64 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPTIM2_CLK_ENABLE();
 8002730:	4b0c      	ldr	r3, [pc, #48]	@ (8002764 <HAL_LPTIM_MspInit+0x74>)
 8002732:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002734:	4a0b      	ldr	r2, [pc, #44]	@ (8002764 <HAL_LPTIM_MspInit+0x74>)
 8002736:	f043 0320 	orr.w	r3, r3, #32
 800273a:	65d3      	str	r3, [r2, #92]	@ 0x5c
 800273c:	4b09      	ldr	r3, [pc, #36]	@ (8002764 <HAL_LPTIM_MspInit+0x74>)
 800273e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002740:	f003 0320 	and.w	r3, r3, #32
 8002744:	60bb      	str	r3, [r7, #8]
 8002746:	68bb      	ldr	r3, [r7, #8]
    /* LPTIM2 interrupt Init */
    HAL_NVIC_SetPriority(LPTIM2_IRQn, 0, 0);
 8002748:	2200      	movs	r2, #0
 800274a:	2100      	movs	r1, #0
 800274c:	2042      	movs	r0, #66	@ 0x42
 800274e:	f001 fb76 	bl	8003e3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPTIM2_IRQn);
 8002752:	2042      	movs	r0, #66	@ 0x42
 8002754:	f001 fb8f 	bl	8003e76 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPTIM2_MspInit 1 */

  /* USER CODE END LPTIM2_MspInit 1 */
  }

}
 8002758:	bf00      	nop
 800275a:	3760      	adds	r7, #96	@ 0x60
 800275c:	46bd      	mov	sp, r7
 800275e:	bd80      	pop	{r7, pc}
 8002760:	40009400 	.word	0x40009400
 8002764:	40021000 	.word	0x40021000

08002768 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b08a      	sub	sp, #40	@ 0x28
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002770:	f107 0314 	add.w	r3, r7, #20
 8002774:	2200      	movs	r2, #0
 8002776:	601a      	str	r2, [r3, #0]
 8002778:	605a      	str	r2, [r3, #4]
 800277a:	609a      	str	r2, [r3, #8]
 800277c:	60da      	str	r2, [r3, #12]
 800277e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4a17      	ldr	r2, [pc, #92]	@ (80027e4 <HAL_SPI_MspInit+0x7c>)
 8002786:	4293      	cmp	r3, r2
 8002788:	d127      	bne.n	80027da <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800278a:	4b17      	ldr	r3, [pc, #92]	@ (80027e8 <HAL_SPI_MspInit+0x80>)
 800278c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800278e:	4a16      	ldr	r2, [pc, #88]	@ (80027e8 <HAL_SPI_MspInit+0x80>)
 8002790:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002794:	6593      	str	r3, [r2, #88]	@ 0x58
 8002796:	4b14      	ldr	r3, [pc, #80]	@ (80027e8 <HAL_SPI_MspInit+0x80>)
 8002798:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800279a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800279e:	613b      	str	r3, [r7, #16]
 80027a0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80027a2:	4b11      	ldr	r3, [pc, #68]	@ (80027e8 <HAL_SPI_MspInit+0x80>)
 80027a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80027a6:	4a10      	ldr	r2, [pc, #64]	@ (80027e8 <HAL_SPI_MspInit+0x80>)
 80027a8:	f043 0302 	orr.w	r3, r3, #2
 80027ac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80027ae:	4b0e      	ldr	r3, [pc, #56]	@ (80027e8 <HAL_SPI_MspInit+0x80>)
 80027b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80027b2:	f003 0302 	and.w	r3, r3, #2
 80027b6:	60fb      	str	r3, [r7, #12]
 80027b8:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PB3 (JTDO-TRACESWO)     ------> SPI3_SCK
    PB4 (NJTRST)     ------> SPI3_MISO
    PB5     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = NRF_SCK_Pin|NRF_MISO_Pin|NRF_MOSI_Pin;
 80027ba:	2338      	movs	r3, #56	@ 0x38
 80027bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027be:	2302      	movs	r3, #2
 80027c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027c2:	2300      	movs	r3, #0
 80027c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027c6:	2303      	movs	r3, #3
 80027c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80027ca:	2306      	movs	r3, #6
 80027cc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027ce:	f107 0314 	add.w	r3, r7, #20
 80027d2:	4619      	mov	r1, r3
 80027d4:	4805      	ldr	r0, [pc, #20]	@ (80027ec <HAL_SPI_MspInit+0x84>)
 80027d6:	f001 fd61 	bl	800429c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80027da:	bf00      	nop
 80027dc:	3728      	adds	r7, #40	@ 0x28
 80027de:	46bd      	mov	sp, r7
 80027e0:	bd80      	pop	{r7, pc}
 80027e2:	bf00      	nop
 80027e4:	40003c00 	.word	0x40003c00
 80027e8:	40021000 	.word	0x40021000
 80027ec:	48000400 	.word	0x48000400

080027f0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80027f0:	b480      	push	{r7}
 80027f2:	b085      	sub	sp, #20
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002800:	d10b      	bne.n	800281a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002802:	4b09      	ldr	r3, [pc, #36]	@ (8002828 <HAL_TIM_Base_MspInit+0x38>)
 8002804:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002806:	4a08      	ldr	r2, [pc, #32]	@ (8002828 <HAL_TIM_Base_MspInit+0x38>)
 8002808:	f043 0301 	orr.w	r3, r3, #1
 800280c:	6593      	str	r3, [r2, #88]	@ 0x58
 800280e:	4b06      	ldr	r3, [pc, #24]	@ (8002828 <HAL_TIM_Base_MspInit+0x38>)
 8002810:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002812:	f003 0301 	and.w	r3, r3, #1
 8002816:	60fb      	str	r3, [r7, #12]
 8002818:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800281a:	bf00      	nop
 800281c:	3714      	adds	r7, #20
 800281e:	46bd      	mov	sp, r7
 8002820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002824:	4770      	bx	lr
 8002826:	bf00      	nop
 8002828:	40021000 	.word	0x40021000

0800282c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b09e      	sub	sp, #120	@ 0x78
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002834:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002838:	2200      	movs	r2, #0
 800283a:	601a      	str	r2, [r3, #0]
 800283c:	605a      	str	r2, [r3, #4]
 800283e:	609a      	str	r2, [r3, #8]
 8002840:	60da      	str	r2, [r3, #12]
 8002842:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002844:	f107 0310 	add.w	r3, r7, #16
 8002848:	2254      	movs	r2, #84	@ 0x54
 800284a:	2100      	movs	r1, #0
 800284c:	4618      	mov	r0, r3
 800284e:	f005 fdec 	bl	800842a <memset>
  if(huart->Instance==USART1)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	4a1e      	ldr	r2, [pc, #120]	@ (80028d0 <HAL_UART_MspInit+0xa4>)
 8002858:	4293      	cmp	r3, r2
 800285a:	d135      	bne.n	80028c8 <HAL_UART_MspInit+0x9c>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800285c:	2301      	movs	r3, #1
 800285e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002860:	2300      	movs	r3, #0
 8002862:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002864:	f107 0310 	add.w	r3, r7, #16
 8002868:	4618      	mov	r0, r3
 800286a:	f003 ff4d 	bl	8006708 <HAL_RCCEx_PeriphCLKConfig>
 800286e:	4603      	mov	r3, r0
 8002870:	2b00      	cmp	r3, #0
 8002872:	d001      	beq.n	8002878 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002874:	f7ff fb76 	bl	8001f64 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002878:	4b16      	ldr	r3, [pc, #88]	@ (80028d4 <HAL_UART_MspInit+0xa8>)
 800287a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800287c:	4a15      	ldr	r2, [pc, #84]	@ (80028d4 <HAL_UART_MspInit+0xa8>)
 800287e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002882:	6613      	str	r3, [r2, #96]	@ 0x60
 8002884:	4b13      	ldr	r3, [pc, #76]	@ (80028d4 <HAL_UART_MspInit+0xa8>)
 8002886:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002888:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800288c:	60fb      	str	r3, [r7, #12]
 800288e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002890:	4b10      	ldr	r3, [pc, #64]	@ (80028d4 <HAL_UART_MspInit+0xa8>)
 8002892:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002894:	4a0f      	ldr	r2, [pc, #60]	@ (80028d4 <HAL_UART_MspInit+0xa8>)
 8002896:	f043 0302 	orr.w	r3, r3, #2
 800289a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800289c:	4b0d      	ldr	r3, [pc, #52]	@ (80028d4 <HAL_UART_MspInit+0xa8>)
 800289e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028a0:	f003 0302 	and.w	r3, r3, #2
 80028a4:	60bb      	str	r3, [r7, #8]
 80028a6:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80028a8:	23c0      	movs	r3, #192	@ 0xc0
 80028aa:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028ac:	2302      	movs	r3, #2
 80028ae:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028b0:	2300      	movs	r3, #0
 80028b2:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028b4:	2303      	movs	r3, #3
 80028b6:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80028b8:	2307      	movs	r3, #7
 80028ba:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028bc:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80028c0:	4619      	mov	r1, r3
 80028c2:	4805      	ldr	r0, [pc, #20]	@ (80028d8 <HAL_UART_MspInit+0xac>)
 80028c4:	f001 fcea 	bl	800429c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80028c8:	bf00      	nop
 80028ca:	3778      	adds	r7, #120	@ 0x78
 80028cc:	46bd      	mov	sp, r7
 80028ce:	bd80      	pop	{r7, pc}
 80028d0:	40013800 	.word	0x40013800
 80028d4:	40021000 	.word	0x40021000
 80028d8:	48000400 	.word	0x48000400

080028dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80028dc:	b480      	push	{r7}
 80028de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80028e0:	bf00      	nop
 80028e2:	e7fd      	b.n	80028e0 <NMI_Handler+0x4>

080028e4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80028e4:	b480      	push	{r7}
 80028e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80028e8:	bf00      	nop
 80028ea:	e7fd      	b.n	80028e8 <HardFault_Handler+0x4>

080028ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80028ec:	b480      	push	{r7}
 80028ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80028f0:	bf00      	nop
 80028f2:	e7fd      	b.n	80028f0 <MemManage_Handler+0x4>

080028f4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80028f4:	b480      	push	{r7}
 80028f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80028f8:	bf00      	nop
 80028fa:	e7fd      	b.n	80028f8 <BusFault_Handler+0x4>

080028fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80028fc:	b480      	push	{r7}
 80028fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002900:	bf00      	nop
 8002902:	e7fd      	b.n	8002900 <UsageFault_Handler+0x4>

08002904 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002904:	b480      	push	{r7}
 8002906:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002908:	bf00      	nop
 800290a:	46bd      	mov	sp, r7
 800290c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002910:	4770      	bx	lr

08002912 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002912:	b480      	push	{r7}
 8002914:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002916:	bf00      	nop
 8002918:	46bd      	mov	sp, r7
 800291a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291e:	4770      	bx	lr

08002920 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002920:	b480      	push	{r7}
 8002922:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002924:	bf00      	nop
 8002926:	46bd      	mov	sp, r7
 8002928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292c:	4770      	bx	lr

0800292e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800292e:	b580      	push	{r7, lr}
 8002930:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002932:	f000 f8a7 	bl	8002a84 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002936:	bf00      	nop
 8002938:	bd80      	pop	{r7, pc}
	...

0800293c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002940:	4802      	ldr	r0, [pc, #8]	@ (800294c <DMA1_Channel1_IRQHandler+0x10>)
 8002942:	f001 fbcb 	bl	80040dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002946:	bf00      	nop
 8002948:	bd80      	pop	{r7, pc}
 800294a:	bf00      	nop
 800294c:	20000090 	.word	0x20000090

08002950 <LPTIM2_IRQHandler>:

/**
  * @brief This function handles LPTIM2 global interrupt.
  */
void LPTIM2_IRQHandler(void)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPTIM2_IRQn 0 */

  /* USER CODE END LPTIM2_IRQn 0 */
  HAL_LPTIM_IRQHandler(&hlptim2);
 8002954:	4802      	ldr	r0, [pc, #8]	@ (8002960 <LPTIM2_IRQHandler+0x10>)
 8002956:	f002 fd99 	bl	800548c <HAL_LPTIM_IRQHandler>
  /* USER CODE BEGIN LPTIM2_IRQn 1 */

  /* USER CODE END LPTIM2_IRQn 1 */
}
 800295a:	bf00      	nop
 800295c:	bd80      	pop	{r7, pc}
 800295e:	bf00      	nop
 8002960:	2000012c 	.word	0x2000012c

08002964 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002964:	b480      	push	{r7}
 8002966:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002968:	4b06      	ldr	r3, [pc, #24]	@ (8002984 <SystemInit+0x20>)
 800296a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800296e:	4a05      	ldr	r2, [pc, #20]	@ (8002984 <SystemInit+0x20>)
 8002970:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002974:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8002978:	bf00      	nop
 800297a:	46bd      	mov	sp, r7
 800297c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002980:	4770      	bx	lr
 8002982:	bf00      	nop
 8002984:	e000ed00 	.word	0xe000ed00

08002988 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002988:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80029c0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800298c:	f7ff ffea 	bl	8002964 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002990:	480c      	ldr	r0, [pc, #48]	@ (80029c4 <LoopForever+0x6>)
  ldr r1, =_edata
 8002992:	490d      	ldr	r1, [pc, #52]	@ (80029c8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002994:	4a0d      	ldr	r2, [pc, #52]	@ (80029cc <LoopForever+0xe>)
  movs r3, #0
 8002996:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002998:	e002      	b.n	80029a0 <LoopCopyDataInit>

0800299a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800299a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800299c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800299e:	3304      	adds	r3, #4

080029a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80029a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80029a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80029a4:	d3f9      	bcc.n	800299a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80029a6:	4a0a      	ldr	r2, [pc, #40]	@ (80029d0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80029a8:	4c0a      	ldr	r4, [pc, #40]	@ (80029d4 <LoopForever+0x16>)
  movs r3, #0
 80029aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80029ac:	e001      	b.n	80029b2 <LoopFillZerobss>

080029ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80029ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80029b0:	3204      	adds	r2, #4

080029b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80029b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80029b4:	d3fb      	bcc.n	80029ae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80029b6:	f005 fd41 	bl	800843c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80029ba:	f7fe ff1f 	bl	80017fc <main>

080029be <LoopForever>:

LoopForever:
    b LoopForever
 80029be:	e7fe      	b.n	80029be <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80029c0:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80029c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80029c8:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80029cc:	080084fc 	.word	0x080084fc
  ldr r2, =_sbss
 80029d0:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80029d4:	2000030c 	.word	0x2000030c

080029d8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80029d8:	e7fe      	b.n	80029d8 <ADC1_IRQHandler>

080029da <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80029da:	b580      	push	{r7, lr}
 80029dc:	b082      	sub	sp, #8
 80029de:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80029e0:	2300      	movs	r3, #0
 80029e2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80029e4:	2003      	movs	r0, #3
 80029e6:	f001 fa1f 	bl	8003e28 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80029ea:	2000      	movs	r0, #0
 80029ec:	f000 f80e 	bl	8002a0c <HAL_InitTick>
 80029f0:	4603      	mov	r3, r0
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d002      	beq.n	80029fc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80029f6:	2301      	movs	r3, #1
 80029f8:	71fb      	strb	r3, [r7, #7]
 80029fa:	e001      	b.n	8002a00 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80029fc:	f7ff fd68 	bl	80024d0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002a00:	79fb      	ldrb	r3, [r7, #7]
}
 8002a02:	4618      	mov	r0, r3
 8002a04:	3708      	adds	r7, #8
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bd80      	pop	{r7, pc}
	...

08002a0c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b084      	sub	sp, #16
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002a14:	2300      	movs	r3, #0
 8002a16:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002a18:	4b17      	ldr	r3, [pc, #92]	@ (8002a78 <HAL_InitTick+0x6c>)
 8002a1a:	781b      	ldrb	r3, [r3, #0]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d023      	beq.n	8002a68 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002a20:	4b16      	ldr	r3, [pc, #88]	@ (8002a7c <HAL_InitTick+0x70>)
 8002a22:	681a      	ldr	r2, [r3, #0]
 8002a24:	4b14      	ldr	r3, [pc, #80]	@ (8002a78 <HAL_InitTick+0x6c>)
 8002a26:	781b      	ldrb	r3, [r3, #0]
 8002a28:	4619      	mov	r1, r3
 8002a2a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002a2e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002a32:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a36:	4618      	mov	r0, r3
 8002a38:	f001 fa2b 	bl	8003e92 <HAL_SYSTICK_Config>
 8002a3c:	4603      	mov	r3, r0
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d10f      	bne.n	8002a62 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	2b0f      	cmp	r3, #15
 8002a46:	d809      	bhi.n	8002a5c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002a48:	2200      	movs	r2, #0
 8002a4a:	6879      	ldr	r1, [r7, #4]
 8002a4c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002a50:	f001 f9f5 	bl	8003e3e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002a54:	4a0a      	ldr	r2, [pc, #40]	@ (8002a80 <HAL_InitTick+0x74>)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6013      	str	r3, [r2, #0]
 8002a5a:	e007      	b.n	8002a6c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002a5c:	2301      	movs	r3, #1
 8002a5e:	73fb      	strb	r3, [r7, #15]
 8002a60:	e004      	b.n	8002a6c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002a62:	2301      	movs	r3, #1
 8002a64:	73fb      	strb	r3, [r7, #15]
 8002a66:	e001      	b.n	8002a6c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002a68:	2301      	movs	r3, #1
 8002a6a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002a6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a6e:	4618      	mov	r0, r3
 8002a70:	3710      	adds	r7, #16
 8002a72:	46bd      	mov	sp, r7
 8002a74:	bd80      	pop	{r7, pc}
 8002a76:	bf00      	nop
 8002a78:	2000000c 	.word	0x2000000c
 8002a7c:	20000004 	.word	0x20000004
 8002a80:	20000008 	.word	0x20000008

08002a84 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002a84:	b480      	push	{r7}
 8002a86:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002a88:	4b06      	ldr	r3, [pc, #24]	@ (8002aa4 <HAL_IncTick+0x20>)
 8002a8a:	781b      	ldrb	r3, [r3, #0]
 8002a8c:	461a      	mov	r2, r3
 8002a8e:	4b06      	ldr	r3, [pc, #24]	@ (8002aa8 <HAL_IncTick+0x24>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	4413      	add	r3, r2
 8002a94:	4a04      	ldr	r2, [pc, #16]	@ (8002aa8 <HAL_IncTick+0x24>)
 8002a96:	6013      	str	r3, [r2, #0]
}
 8002a98:	bf00      	nop
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa0:	4770      	bx	lr
 8002aa2:	bf00      	nop
 8002aa4:	2000000c 	.word	0x2000000c
 8002aa8:	20000308 	.word	0x20000308

08002aac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002aac:	b480      	push	{r7}
 8002aae:	af00      	add	r7, sp, #0
  return uwTick;
 8002ab0:	4b03      	ldr	r3, [pc, #12]	@ (8002ac0 <HAL_GetTick+0x14>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
}
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002abc:	4770      	bx	lr
 8002abe:	bf00      	nop
 8002ac0:	20000308 	.word	0x20000308

08002ac4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b084      	sub	sp, #16
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002acc:	f7ff ffee 	bl	8002aac <HAL_GetTick>
 8002ad0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002adc:	d005      	beq.n	8002aea <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002ade:	4b0a      	ldr	r3, [pc, #40]	@ (8002b08 <HAL_Delay+0x44>)
 8002ae0:	781b      	ldrb	r3, [r3, #0]
 8002ae2:	461a      	mov	r2, r3
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	4413      	add	r3, r2
 8002ae8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002aea:	bf00      	nop
 8002aec:	f7ff ffde 	bl	8002aac <HAL_GetTick>
 8002af0:	4602      	mov	r2, r0
 8002af2:	68bb      	ldr	r3, [r7, #8]
 8002af4:	1ad3      	subs	r3, r2, r3
 8002af6:	68fa      	ldr	r2, [r7, #12]
 8002af8:	429a      	cmp	r2, r3
 8002afa:	d8f7      	bhi.n	8002aec <HAL_Delay+0x28>
  {
  }
}
 8002afc:	bf00      	nop
 8002afe:	bf00      	nop
 8002b00:	3710      	adds	r7, #16
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bd80      	pop	{r7, pc}
 8002b06:	bf00      	nop
 8002b08:	2000000c 	.word	0x2000000c

08002b0c <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8002b0c:	b480      	push	{r7}
 8002b0e:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 8002b10:	4b05      	ldr	r3, [pc, #20]	@ (8002b28 <HAL_SuspendTick+0x1c>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4a04      	ldr	r2, [pc, #16]	@ (8002b28 <HAL_SuspendTick+0x1c>)
 8002b16:	f023 0302 	bic.w	r3, r3, #2
 8002b1a:	6013      	str	r3, [r2, #0]
}
 8002b1c:	bf00      	nop
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b24:	4770      	bx	lr
 8002b26:	bf00      	nop
 8002b28:	e000e010 	.word	0xe000e010

08002b2c <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8002b2c:	b480      	push	{r7}
 8002b2e:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 8002b30:	4b05      	ldr	r3, [pc, #20]	@ (8002b48 <HAL_ResumeTick+0x1c>)
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	4a04      	ldr	r2, [pc, #16]	@ (8002b48 <HAL_ResumeTick+0x1c>)
 8002b36:	f043 0302 	orr.w	r3, r3, #2
 8002b3a:	6013      	str	r3, [r2, #0]
}
 8002b3c:	bf00      	nop
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b44:	4770      	bx	lr
 8002b46:	bf00      	nop
 8002b48:	e000e010 	.word	0xe000e010

08002b4c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	b083      	sub	sp, #12
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
 8002b54:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	689b      	ldr	r3, [r3, #8]
 8002b5a:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	431a      	orrs	r2, r3
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	609a      	str	r2, [r3, #8]
}
 8002b66:	bf00      	nop
 8002b68:	370c      	adds	r7, #12
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b70:	4770      	bx	lr

08002b72 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002b72:	b480      	push	{r7}
 8002b74:	b083      	sub	sp, #12
 8002b76:	af00      	add	r7, sp, #0
 8002b78:	6078      	str	r0, [r7, #4]
 8002b7a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	689b      	ldr	r3, [r3, #8]
 8002b80:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	431a      	orrs	r2, r3
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	609a      	str	r2, [r3, #8]
}
 8002b8c:	bf00      	nop
 8002b8e:	370c      	adds	r7, #12
 8002b90:	46bd      	mov	sp, r7
 8002b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b96:	4770      	bx	lr

08002b98 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002b98:	b480      	push	{r7}
 8002b9a:	b083      	sub	sp, #12
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	689b      	ldr	r3, [r3, #8]
 8002ba4:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8002ba8:	4618      	mov	r0, r3
 8002baa:	370c      	adds	r7, #12
 8002bac:	46bd      	mov	sp, r7
 8002bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb2:	4770      	bx	lr

08002bb4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002bb4:	b480      	push	{r7}
 8002bb6:	b087      	sub	sp, #28
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	60f8      	str	r0, [r7, #12]
 8002bbc:	60b9      	str	r1, [r7, #8]
 8002bbe:	607a      	str	r2, [r7, #4]
 8002bc0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	3360      	adds	r3, #96	@ 0x60
 8002bc6:	461a      	mov	r2, r3
 8002bc8:	68bb      	ldr	r3, [r7, #8]
 8002bca:	009b      	lsls	r3, r3, #2
 8002bcc:	4413      	add	r3, r2
 8002bce:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002bd0:	697b      	ldr	r3, [r7, #20]
 8002bd2:	681a      	ldr	r2, [r3, #0]
 8002bd4:	4b08      	ldr	r3, [pc, #32]	@ (8002bf8 <LL_ADC_SetOffset+0x44>)
 8002bd6:	4013      	ands	r3, r2
 8002bd8:	687a      	ldr	r2, [r7, #4]
 8002bda:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8002bde:	683a      	ldr	r2, [r7, #0]
 8002be0:	430a      	orrs	r2, r1
 8002be2:	4313      	orrs	r3, r2
 8002be4:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002be8:	697b      	ldr	r3, [r7, #20]
 8002bea:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002bec:	bf00      	nop
 8002bee:	371c      	adds	r7, #28
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf6:	4770      	bx	lr
 8002bf8:	03fff000 	.word	0x03fff000

08002bfc <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002bfc:	b480      	push	{r7}
 8002bfe:	b085      	sub	sp, #20
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
 8002c04:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	3360      	adds	r3, #96	@ 0x60
 8002c0a:	461a      	mov	r2, r3
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	009b      	lsls	r3, r3, #2
 8002c10:	4413      	add	r3, r2
 8002c12:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	3714      	adds	r7, #20
 8002c20:	46bd      	mov	sp, r7
 8002c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c26:	4770      	bx	lr

08002c28 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002c28:	b480      	push	{r7}
 8002c2a:	b087      	sub	sp, #28
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	60f8      	str	r0, [r7, #12]
 8002c30:	60b9      	str	r1, [r7, #8]
 8002c32:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	3360      	adds	r3, #96	@ 0x60
 8002c38:	461a      	mov	r2, r3
 8002c3a:	68bb      	ldr	r3, [r7, #8]
 8002c3c:	009b      	lsls	r3, r3, #2
 8002c3e:	4413      	add	r3, r2
 8002c40:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002c42:	697b      	ldr	r3, [r7, #20]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	431a      	orrs	r2, r3
 8002c4e:	697b      	ldr	r3, [r7, #20]
 8002c50:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002c52:	bf00      	nop
 8002c54:	371c      	adds	r7, #28
 8002c56:	46bd      	mov	sp, r7
 8002c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5c:	4770      	bx	lr

08002c5e <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002c5e:	b480      	push	{r7}
 8002c60:	b083      	sub	sp, #12
 8002c62:	af00      	add	r7, sp, #0
 8002c64:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	68db      	ldr	r3, [r3, #12]
 8002c6a:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d101      	bne.n	8002c76 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002c72:	2301      	movs	r3, #1
 8002c74:	e000      	b.n	8002c78 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002c76:	2300      	movs	r3, #0
}
 8002c78:	4618      	mov	r0, r3
 8002c7a:	370c      	adds	r7, #12
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c82:	4770      	bx	lr

08002c84 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002c84:	b480      	push	{r7}
 8002c86:	b087      	sub	sp, #28
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	60f8      	str	r0, [r7, #12]
 8002c8c:	60b9      	str	r1, [r7, #8]
 8002c8e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	3330      	adds	r3, #48	@ 0x30
 8002c94:	461a      	mov	r2, r3
 8002c96:	68bb      	ldr	r3, [r7, #8]
 8002c98:	0a1b      	lsrs	r3, r3, #8
 8002c9a:	009b      	lsls	r3, r3, #2
 8002c9c:	f003 030c 	and.w	r3, r3, #12
 8002ca0:	4413      	add	r3, r2
 8002ca2:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002ca4:	697b      	ldr	r3, [r7, #20]
 8002ca6:	681a      	ldr	r2, [r3, #0]
 8002ca8:	68bb      	ldr	r3, [r7, #8]
 8002caa:	f003 031f 	and.w	r3, r3, #31
 8002cae:	211f      	movs	r1, #31
 8002cb0:	fa01 f303 	lsl.w	r3, r1, r3
 8002cb4:	43db      	mvns	r3, r3
 8002cb6:	401a      	ands	r2, r3
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	0e9b      	lsrs	r3, r3, #26
 8002cbc:	f003 011f 	and.w	r1, r3, #31
 8002cc0:	68bb      	ldr	r3, [r7, #8]
 8002cc2:	f003 031f 	and.w	r3, r3, #31
 8002cc6:	fa01 f303 	lsl.w	r3, r1, r3
 8002cca:	431a      	orrs	r2, r3
 8002ccc:	697b      	ldr	r3, [r7, #20]
 8002cce:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002cd0:	bf00      	nop
 8002cd2:	371c      	adds	r7, #28
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cda:	4770      	bx	lr

08002cdc <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002cdc:	b480      	push	{r7}
 8002cde:	b087      	sub	sp, #28
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	60f8      	str	r0, [r7, #12]
 8002ce4:	60b9      	str	r1, [r7, #8]
 8002ce6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	3314      	adds	r3, #20
 8002cec:	461a      	mov	r2, r3
 8002cee:	68bb      	ldr	r3, [r7, #8]
 8002cf0:	0e5b      	lsrs	r3, r3, #25
 8002cf2:	009b      	lsls	r3, r3, #2
 8002cf4:	f003 0304 	and.w	r3, r3, #4
 8002cf8:	4413      	add	r3, r2
 8002cfa:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002cfc:	697b      	ldr	r3, [r7, #20]
 8002cfe:	681a      	ldr	r2, [r3, #0]
 8002d00:	68bb      	ldr	r3, [r7, #8]
 8002d02:	0d1b      	lsrs	r3, r3, #20
 8002d04:	f003 031f 	and.w	r3, r3, #31
 8002d08:	2107      	movs	r1, #7
 8002d0a:	fa01 f303 	lsl.w	r3, r1, r3
 8002d0e:	43db      	mvns	r3, r3
 8002d10:	401a      	ands	r2, r3
 8002d12:	68bb      	ldr	r3, [r7, #8]
 8002d14:	0d1b      	lsrs	r3, r3, #20
 8002d16:	f003 031f 	and.w	r3, r3, #31
 8002d1a:	6879      	ldr	r1, [r7, #4]
 8002d1c:	fa01 f303 	lsl.w	r3, r1, r3
 8002d20:	431a      	orrs	r2, r3
 8002d22:	697b      	ldr	r3, [r7, #20]
 8002d24:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002d26:	bf00      	nop
 8002d28:	371c      	adds	r7, #28
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d30:	4770      	bx	lr
	...

08002d34 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002d34:	b480      	push	{r7}
 8002d36:	b085      	sub	sp, #20
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	60f8      	str	r0, [r7, #12]
 8002d3c:	60b9      	str	r1, [r7, #8]
 8002d3e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8002d46:	68bb      	ldr	r3, [r7, #8]
 8002d48:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d4c:	43db      	mvns	r3, r3
 8002d4e:	401a      	ands	r2, r3
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	f003 0318 	and.w	r3, r3, #24
 8002d56:	4908      	ldr	r1, [pc, #32]	@ (8002d78 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002d58:	40d9      	lsrs	r1, r3
 8002d5a:	68bb      	ldr	r3, [r7, #8]
 8002d5c:	400b      	ands	r3, r1
 8002d5e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d62:	431a      	orrs	r2, r3
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002d6a:	bf00      	nop
 8002d6c:	3714      	adds	r7, #20
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d74:	4770      	bx	lr
 8002d76:	bf00      	nop
 8002d78:	0007ffff 	.word	0x0007ffff

08002d7c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	b083      	sub	sp, #12
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	689b      	ldr	r3, [r3, #8]
 8002d88:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8002d8c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002d90:	687a      	ldr	r2, [r7, #4]
 8002d92:	6093      	str	r3, [r2, #8]
}
 8002d94:	bf00      	nop
 8002d96:	370c      	adds	r7, #12
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9e:	4770      	bx	lr

08002da0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002da0:	b480      	push	{r7}
 8002da2:	b083      	sub	sp, #12
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	689b      	ldr	r3, [r3, #8]
 8002dac:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002db0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002db4:	d101      	bne.n	8002dba <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002db6:	2301      	movs	r3, #1
 8002db8:	e000      	b.n	8002dbc <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002dba:	2300      	movs	r3, #0
}
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	370c      	adds	r7, #12
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc6:	4770      	bx	lr

08002dc8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002dc8:	b480      	push	{r7}
 8002dca:	b083      	sub	sp, #12
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	689b      	ldr	r3, [r3, #8]
 8002dd4:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8002dd8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002ddc:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002de4:	bf00      	nop
 8002de6:	370c      	adds	r7, #12
 8002de8:	46bd      	mov	sp, r7
 8002dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dee:	4770      	bx	lr

08002df0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002df0:	b480      	push	{r7}
 8002df2:	b083      	sub	sp, #12
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	689b      	ldr	r3, [r3, #8]
 8002dfc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e00:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002e04:	d101      	bne.n	8002e0a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002e06:	2301      	movs	r3, #1
 8002e08:	e000      	b.n	8002e0c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002e0a:	2300      	movs	r3, #0
}
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	370c      	adds	r7, #12
 8002e10:	46bd      	mov	sp, r7
 8002e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e16:	4770      	bx	lr

08002e18 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002e18:	b480      	push	{r7}
 8002e1a:	b083      	sub	sp, #12
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	689b      	ldr	r3, [r3, #8]
 8002e24:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002e28:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002e2c:	f043 0201 	orr.w	r2, r3, #1
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002e34:	bf00      	nop
 8002e36:	370c      	adds	r7, #12
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3e:	4770      	bx	lr

08002e40 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002e40:	b480      	push	{r7}
 8002e42:	b083      	sub	sp, #12
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	689b      	ldr	r3, [r3, #8]
 8002e4c:	f003 0301 	and.w	r3, r3, #1
 8002e50:	2b01      	cmp	r3, #1
 8002e52:	d101      	bne.n	8002e58 <LL_ADC_IsEnabled+0x18>
 8002e54:	2301      	movs	r3, #1
 8002e56:	e000      	b.n	8002e5a <LL_ADC_IsEnabled+0x1a>
 8002e58:	2300      	movs	r3, #0
}
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	370c      	adds	r7, #12
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e64:	4770      	bx	lr

08002e66 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002e66:	b480      	push	{r7}
 8002e68:	b083      	sub	sp, #12
 8002e6a:	af00      	add	r7, sp, #0
 8002e6c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	689b      	ldr	r3, [r3, #8]
 8002e72:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002e76:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002e7a:	f043 0204 	orr.w	r2, r3, #4
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002e82:	bf00      	nop
 8002e84:	370c      	adds	r7, #12
 8002e86:	46bd      	mov	sp, r7
 8002e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8c:	4770      	bx	lr

08002e8e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002e8e:	b480      	push	{r7}
 8002e90:	b083      	sub	sp, #12
 8002e92:	af00      	add	r7, sp, #0
 8002e94:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	689b      	ldr	r3, [r3, #8]
 8002e9a:	f003 0304 	and.w	r3, r3, #4
 8002e9e:	2b04      	cmp	r3, #4
 8002ea0:	d101      	bne.n	8002ea6 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	e000      	b.n	8002ea8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002ea6:	2300      	movs	r3, #0
}
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	370c      	adds	r7, #12
 8002eac:	46bd      	mov	sp, r7
 8002eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb2:	4770      	bx	lr

08002eb4 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002eb4:	b480      	push	{r7}
 8002eb6:	b083      	sub	sp, #12
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	689b      	ldr	r3, [r3, #8]
 8002ec0:	f003 0308 	and.w	r3, r3, #8
 8002ec4:	2b08      	cmp	r3, #8
 8002ec6:	d101      	bne.n	8002ecc <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002ec8:	2301      	movs	r3, #1
 8002eca:	e000      	b.n	8002ece <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002ecc:	2300      	movs	r3, #0
}
 8002ece:	4618      	mov	r0, r3
 8002ed0:	370c      	adds	r7, #12
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed8:	4770      	bx	lr
	...

08002edc <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b088      	sub	sp, #32
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8002ee8:	2300      	movs	r3, #0
 8002eea:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d101      	bne.n	8002ef6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	e126      	b.n	8003144 <HAL_ADC_Init+0x268>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	691b      	ldr	r3, [r3, #16]
 8002efa:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d109      	bne.n	8002f18 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002f04:	6878      	ldr	r0, [r7, #4]
 8002f06:	f7ff fb07 	bl	8002518 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2200      	movs	r2, #0
 8002f14:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	f7ff ff3f 	bl	8002da0 <LL_ADC_IsDeepPowerDownEnabled>
 8002f22:	4603      	mov	r3, r0
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d004      	beq.n	8002f32 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	f7ff ff25 	bl	8002d7c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	4618      	mov	r0, r3
 8002f38:	f7ff ff5a 	bl	8002df0 <LL_ADC_IsInternalRegulatorEnabled>
 8002f3c:	4603      	mov	r3, r0
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d115      	bne.n	8002f6e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	4618      	mov	r0, r3
 8002f48:	f7ff ff3e 	bl	8002dc8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002f4c:	4b7f      	ldr	r3, [pc, #508]	@ (800314c <HAL_ADC_Init+0x270>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	099b      	lsrs	r3, r3, #6
 8002f52:	4a7f      	ldr	r2, [pc, #508]	@ (8003150 <HAL_ADC_Init+0x274>)
 8002f54:	fba2 2303 	umull	r2, r3, r2, r3
 8002f58:	099b      	lsrs	r3, r3, #6
 8002f5a:	3301      	adds	r3, #1
 8002f5c:	005b      	lsls	r3, r3, #1
 8002f5e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002f60:	e002      	b.n	8002f68 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	3b01      	subs	r3, #1
 8002f66:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d1f9      	bne.n	8002f62 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	4618      	mov	r0, r3
 8002f74:	f7ff ff3c 	bl	8002df0 <LL_ADC_IsInternalRegulatorEnabled>
 8002f78:	4603      	mov	r3, r0
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d10d      	bne.n	8002f9a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f82:	f043 0210 	orr.w	r2, r3, #16
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f8e:	f043 0201 	orr.w	r2, r3, #1
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8002f96:	2301      	movs	r3, #1
 8002f98:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	f7ff ff75 	bl	8002e8e <LL_ADC_REG_IsConversionOngoing>
 8002fa4:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002faa:	f003 0310 	and.w	r3, r3, #16
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	f040 80bf 	bne.w	8003132 <HAL_ADC_Init+0x256>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002fb4:	697b      	ldr	r3, [r7, #20]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	f040 80bb 	bne.w	8003132 <HAL_ADC_Init+0x256>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002fc0:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002fc4:	f043 0202 	orr.w	r2, r3, #2
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	f7ff ff35 	bl	8002e40 <LL_ADC_IsEnabled>
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d10b      	bne.n	8002ff4 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002fdc:	485d      	ldr	r0, [pc, #372]	@ (8003154 <HAL_ADC_Init+0x278>)
 8002fde:	f7ff ff2f 	bl	8002e40 <LL_ADC_IsEnabled>
 8002fe2:	4603      	mov	r3, r0
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d105      	bne.n	8002ff4 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	685b      	ldr	r3, [r3, #4]
 8002fec:	4619      	mov	r1, r3
 8002fee:	485a      	ldr	r0, [pc, #360]	@ (8003158 <HAL_ADC_Init+0x27c>)
 8002ff0:	f7ff fdac 	bl	8002b4c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	7e5b      	ldrb	r3, [r3, #25]
 8002ff8:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002ffe:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8003004:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800300a:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003012:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003014:	4313      	orrs	r3, r2
 8003016:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800301e:	2b01      	cmp	r3, #1
 8003020:	d106      	bne.n	8003030 <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003026:	3b01      	subs	r3, #1
 8003028:	045b      	lsls	r3, r3, #17
 800302a:	69ba      	ldr	r2, [r7, #24]
 800302c:	4313      	orrs	r3, r2
 800302e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003034:	2b00      	cmp	r3, #0
 8003036:	d009      	beq.n	800304c <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800303c:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003044:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003046:	69ba      	ldr	r2, [r7, #24]
 8003048:	4313      	orrs	r3, r2
 800304a:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	68da      	ldr	r2, [r3, #12]
 8003052:	4b42      	ldr	r3, [pc, #264]	@ (800315c <HAL_ADC_Init+0x280>)
 8003054:	4013      	ands	r3, r2
 8003056:	687a      	ldr	r2, [r7, #4]
 8003058:	6812      	ldr	r2, [r2, #0]
 800305a:	69b9      	ldr	r1, [r7, #24]
 800305c:	430b      	orrs	r3, r1
 800305e:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	4618      	mov	r0, r3
 8003066:	f7ff ff25 	bl	8002eb4 <LL_ADC_INJ_IsConversionOngoing>
 800306a:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800306c:	697b      	ldr	r3, [r7, #20]
 800306e:	2b00      	cmp	r3, #0
 8003070:	d13d      	bne.n	80030ee <HAL_ADC_Init+0x212>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003072:	693b      	ldr	r3, [r7, #16]
 8003074:	2b00      	cmp	r3, #0
 8003076:	d13a      	bne.n	80030ee <HAL_ADC_Init+0x212>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800307c:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003084:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003086:	4313      	orrs	r3, r2
 8003088:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	68db      	ldr	r3, [r3, #12]
 8003090:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003094:	f023 0302 	bic.w	r3, r3, #2
 8003098:	687a      	ldr	r2, [r7, #4]
 800309a:	6812      	ldr	r2, [r2, #0]
 800309c:	69b9      	ldr	r1, [r7, #24]
 800309e:	430b      	orrs	r3, r1
 80030a0:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80030a8:	2b01      	cmp	r3, #1
 80030aa:	d118      	bne.n	80030de <HAL_ADC_Init+0x202>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	691b      	ldr	r3, [r3, #16]
 80030b2:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80030b6:	f023 0304 	bic.w	r3, r3, #4
 80030ba:	687a      	ldr	r2, [r7, #4]
 80030bc:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 80030be:	687a      	ldr	r2, [r7, #4]
 80030c0:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80030c2:	4311      	orrs	r1, r2
 80030c4:	687a      	ldr	r2, [r7, #4]
 80030c6:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80030c8:	4311      	orrs	r1, r2
 80030ca:	687a      	ldr	r2, [r7, #4]
 80030cc:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80030ce:	430a      	orrs	r2, r1
 80030d0:	431a      	orrs	r2, r3
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f042 0201 	orr.w	r2, r2, #1
 80030da:	611a      	str	r2, [r3, #16]
 80030dc:	e007      	b.n	80030ee <HAL_ADC_Init+0x212>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	691a      	ldr	r2, [r3, #16]
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f022 0201 	bic.w	r2, r2, #1
 80030ec:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	691b      	ldr	r3, [r3, #16]
 80030f2:	2b01      	cmp	r3, #1
 80030f4:	d10c      	bne.n	8003110 <HAL_ADC_Init+0x234>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030fc:	f023 010f 	bic.w	r1, r3, #15
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	69db      	ldr	r3, [r3, #28]
 8003104:	1e5a      	subs	r2, r3, #1
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	430a      	orrs	r2, r1
 800310c:	631a      	str	r2, [r3, #48]	@ 0x30
 800310e:	e007      	b.n	8003120 <HAL_ADC_Init+0x244>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f022 020f 	bic.w	r2, r2, #15
 800311e:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003124:	f023 0303 	bic.w	r3, r3, #3
 8003128:	f043 0201 	orr.w	r2, r3, #1
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	655a      	str	r2, [r3, #84]	@ 0x54
 8003130:	e007      	b.n	8003142 <HAL_ADC_Init+0x266>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003136:	f043 0210 	orr.w	r2, r3, #16
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 800313e:	2301      	movs	r3, #1
 8003140:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003142:	7ffb      	ldrb	r3, [r7, #31]
}
 8003144:	4618      	mov	r0, r3
 8003146:	3720      	adds	r7, #32
 8003148:	46bd      	mov	sp, r7
 800314a:	bd80      	pop	{r7, pc}
 800314c:	20000004 	.word	0x20000004
 8003150:	053e2d63 	.word	0x053e2d63
 8003154:	50040000 	.word	0x50040000
 8003158:	50040300 	.word	0x50040300
 800315c:	fff0c007 	.word	0xfff0c007

08003160 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b086      	sub	sp, #24
 8003164:	af00      	add	r7, sp, #0
 8003166:	60f8      	str	r0, [r7, #12]
 8003168:	60b9      	str	r1, [r7, #8]
 800316a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	4618      	mov	r0, r3
 8003172:	f7ff fe8c 	bl	8002e8e <LL_ADC_REG_IsConversionOngoing>
 8003176:	4603      	mov	r3, r0
 8003178:	2b00      	cmp	r3, #0
 800317a:	d167      	bne.n	800324c <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003182:	2b01      	cmp	r3, #1
 8003184:	d101      	bne.n	800318a <HAL_ADC_Start_DMA+0x2a>
 8003186:	2302      	movs	r3, #2
 8003188:	e063      	b.n	8003252 <HAL_ADC_Start_DMA+0xf2>
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	2201      	movs	r2, #1
 800318e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8003192:	68f8      	ldr	r0, [r7, #12]
 8003194:	f000 fc5e 	bl	8003a54 <ADC_Enable>
 8003198:	4603      	mov	r3, r0
 800319a:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800319c:	7dfb      	ldrb	r3, [r7, #23]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d14f      	bne.n	8003242 <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031a6:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80031aa:	f023 0301 	bic.w	r3, r3, #1
 80031ae:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	655a      	str	r2, [r3, #84]	@ 0x54
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031ba:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d006      	beq.n	80031d0 <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031c6:	f023 0206 	bic.w	r2, r3, #6
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	659a      	str	r2, [r3, #88]	@ 0x58
 80031ce:	e002      	b.n	80031d6 <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	2200      	movs	r2, #0
 80031d4:	659a      	str	r2, [r3, #88]	@ 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80031da:	4a20      	ldr	r2, [pc, #128]	@ (800325c <HAL_ADC_Start_DMA+0xfc>)
 80031dc:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80031e2:	4a1f      	ldr	r2, [pc, #124]	@ (8003260 <HAL_ADC_Start_DMA+0x100>)
 80031e4:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80031ea:	4a1e      	ldr	r2, [pc, #120]	@ (8003264 <HAL_ADC_Start_DMA+0x104>)
 80031ec:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	221c      	movs	r2, #28
 80031f4:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	2200      	movs	r2, #0
 80031fa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	685a      	ldr	r2, [r3, #4]
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f042 0210 	orr.w	r2, r2, #16
 800320c:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	68da      	ldr	r2, [r3, #12]
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f042 0201 	orr.w	r2, r2, #1
 800321c:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	3340      	adds	r3, #64	@ 0x40
 8003228:	4619      	mov	r1, r3
 800322a:	68ba      	ldr	r2, [r7, #8]
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	f000 fef5 	bl	800401c <HAL_DMA_Start_IT>
 8003232:	4603      	mov	r3, r0
 8003234:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	4618      	mov	r0, r3
 800323c:	f7ff fe13 	bl	8002e66 <LL_ADC_REG_StartConversion>
 8003240:	e006      	b.n	8003250 <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	2200      	movs	r2, #0
 8003246:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 800324a:	e001      	b.n	8003250 <HAL_ADC_Start_DMA+0xf0>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800324c:	2302      	movs	r3, #2
 800324e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003250:	7dfb      	ldrb	r3, [r7, #23]
}
 8003252:	4618      	mov	r0, r3
 8003254:	3718      	adds	r7, #24
 8003256:	46bd      	mov	sp, r7
 8003258:	bd80      	pop	{r7, pc}
 800325a:	bf00      	nop
 800325c:	08003b61 	.word	0x08003b61
 8003260:	08003c39 	.word	0x08003c39
 8003264:	08003c55 	.word	0x08003c55

08003268 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003268:	b480      	push	{r7}
 800326a:	b083      	sub	sp, #12
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8003270:	bf00      	nop
 8003272:	370c      	adds	r7, #12
 8003274:	46bd      	mov	sp, r7
 8003276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327a:	4770      	bx	lr

0800327c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800327c:	b480      	push	{r7}
 800327e:	b083      	sub	sp, #12
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003284:	bf00      	nop
 8003286:	370c      	adds	r7, #12
 8003288:	46bd      	mov	sp, r7
 800328a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328e:	4770      	bx	lr

08003290 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	b0b6      	sub	sp, #216	@ 0xd8
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
 8003298:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800329a:	2300      	movs	r3, #0
 800329c:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80032a0:	2300      	movs	r3, #0
 80032a2:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80032aa:	2b01      	cmp	r3, #1
 80032ac:	d101      	bne.n	80032b2 <HAL_ADC_ConfigChannel+0x22>
 80032ae:	2302      	movs	r3, #2
 80032b0:	e3bb      	b.n	8003a2a <HAL_ADC_ConfigChannel+0x79a>
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	2201      	movs	r2, #1
 80032b6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	4618      	mov	r0, r3
 80032c0:	f7ff fde5 	bl	8002e8e <LL_ADC_REG_IsConversionOngoing>
 80032c4:	4603      	mov	r3, r0
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	f040 83a0 	bne.w	8003a0c <HAL_ADC_ConfigChannel+0x77c>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	685b      	ldr	r3, [r3, #4]
 80032d0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	685b      	ldr	r3, [r3, #4]
 80032d8:	2b05      	cmp	r3, #5
 80032da:	d824      	bhi.n	8003326 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	685b      	ldr	r3, [r3, #4]
 80032e0:	3b02      	subs	r3, #2
 80032e2:	2b03      	cmp	r3, #3
 80032e4:	d81b      	bhi.n	800331e <HAL_ADC_ConfigChannel+0x8e>
 80032e6:	a201      	add	r2, pc, #4	@ (adr r2, 80032ec <HAL_ADC_ConfigChannel+0x5c>)
 80032e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032ec:	080032fd 	.word	0x080032fd
 80032f0:	08003305 	.word	0x08003305
 80032f4:	0800330d 	.word	0x0800330d
 80032f8:	08003315 	.word	0x08003315
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 80032fc:	230c      	movs	r3, #12
 80032fe:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8003302:	e010      	b.n	8003326 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8003304:	2312      	movs	r3, #18
 8003306:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800330a:	e00c      	b.n	8003326 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 800330c:	2318      	movs	r3, #24
 800330e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8003312:	e008      	b.n	8003326 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8003314:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003318:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800331c:	e003      	b.n	8003326 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 800331e:	2306      	movs	r3, #6
 8003320:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8003324:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6818      	ldr	r0, [r3, #0]
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	461a      	mov	r2, r3
 8003330:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8003334:	f7ff fca6 	bl	8002c84 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	4618      	mov	r0, r3
 800333e:	f7ff fda6 	bl	8002e8e <LL_ADC_REG_IsConversionOngoing>
 8003342:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	4618      	mov	r0, r3
 800334c:	f7ff fdb2 	bl	8002eb4 <LL_ADC_INJ_IsConversionOngoing>
 8003350:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003354:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003358:	2b00      	cmp	r3, #0
 800335a:	f040 81a4 	bne.w	80036a6 <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800335e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003362:	2b00      	cmp	r3, #0
 8003364:	f040 819f 	bne.w	80036a6 <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6818      	ldr	r0, [r3, #0]
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	6819      	ldr	r1, [r3, #0]
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	689b      	ldr	r3, [r3, #8]
 8003374:	461a      	mov	r2, r3
 8003376:	f7ff fcb1 	bl	8002cdc <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	695a      	ldr	r2, [r3, #20]
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	68db      	ldr	r3, [r3, #12]
 8003384:	08db      	lsrs	r3, r3, #3
 8003386:	f003 0303 	and.w	r3, r3, #3
 800338a:	005b      	lsls	r3, r3, #1
 800338c:	fa02 f303 	lsl.w	r3, r2, r3
 8003390:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	691b      	ldr	r3, [r3, #16]
 8003398:	2b04      	cmp	r3, #4
 800339a:	d00a      	beq.n	80033b2 <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6818      	ldr	r0, [r3, #0]
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	6919      	ldr	r1, [r3, #16]
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	681a      	ldr	r2, [r3, #0]
 80033a8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80033ac:	f7ff fc02 	bl	8002bb4 <LL_ADC_SetOffset>
 80033b0:	e179      	b.n	80036a6 <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	2100      	movs	r1, #0
 80033b8:	4618      	mov	r0, r3
 80033ba:	f7ff fc1f 	bl	8002bfc <LL_ADC_GetOffsetChannel>
 80033be:	4603      	mov	r3, r0
 80033c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d10a      	bne.n	80033de <HAL_ADC_ConfigChannel+0x14e>
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	2100      	movs	r1, #0
 80033ce:	4618      	mov	r0, r3
 80033d0:	f7ff fc14 	bl	8002bfc <LL_ADC_GetOffsetChannel>
 80033d4:	4603      	mov	r3, r0
 80033d6:	0e9b      	lsrs	r3, r3, #26
 80033d8:	f003 021f 	and.w	r2, r3, #31
 80033dc:	e01e      	b.n	800341c <HAL_ADC_ConfigChannel+0x18c>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	2100      	movs	r1, #0
 80033e4:	4618      	mov	r0, r3
 80033e6:	f7ff fc09 	bl	8002bfc <LL_ADC_GetOffsetChannel>
 80033ea:	4603      	mov	r3, r0
 80033ec:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033f0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80033f4:	fa93 f3a3 	rbit	r3, r3
 80033f8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80033fc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003400:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003404:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003408:	2b00      	cmp	r3, #0
 800340a:	d101      	bne.n	8003410 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 800340c:	2320      	movs	r3, #32
 800340e:	e004      	b.n	800341a <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 8003410:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003414:	fab3 f383 	clz	r3, r3
 8003418:	b2db      	uxtb	r3, r3
 800341a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003424:	2b00      	cmp	r3, #0
 8003426:	d105      	bne.n	8003434 <HAL_ADC_ConfigChannel+0x1a4>
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	0e9b      	lsrs	r3, r3, #26
 800342e:	f003 031f 	and.w	r3, r3, #31
 8003432:	e018      	b.n	8003466 <HAL_ADC_ConfigChannel+0x1d6>
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800343c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003440:	fa93 f3a3 	rbit	r3, r3
 8003444:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8003448:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800344c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8003450:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8003454:	2b00      	cmp	r3, #0
 8003456:	d101      	bne.n	800345c <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 8003458:	2320      	movs	r3, #32
 800345a:	e004      	b.n	8003466 <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 800345c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8003460:	fab3 f383 	clz	r3, r3
 8003464:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003466:	429a      	cmp	r2, r3
 8003468:	d106      	bne.n	8003478 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	2200      	movs	r2, #0
 8003470:	2100      	movs	r1, #0
 8003472:	4618      	mov	r0, r3
 8003474:	f7ff fbd8 	bl	8002c28 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	2101      	movs	r1, #1
 800347e:	4618      	mov	r0, r3
 8003480:	f7ff fbbc 	bl	8002bfc <LL_ADC_GetOffsetChannel>
 8003484:	4603      	mov	r3, r0
 8003486:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800348a:	2b00      	cmp	r3, #0
 800348c:	d10a      	bne.n	80034a4 <HAL_ADC_ConfigChannel+0x214>
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	2101      	movs	r1, #1
 8003494:	4618      	mov	r0, r3
 8003496:	f7ff fbb1 	bl	8002bfc <LL_ADC_GetOffsetChannel>
 800349a:	4603      	mov	r3, r0
 800349c:	0e9b      	lsrs	r3, r3, #26
 800349e:	f003 021f 	and.w	r2, r3, #31
 80034a2:	e01e      	b.n	80034e2 <HAL_ADC_ConfigChannel+0x252>
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	2101      	movs	r1, #1
 80034aa:	4618      	mov	r0, r3
 80034ac:	f7ff fba6 	bl	8002bfc <LL_ADC_GetOffsetChannel>
 80034b0:	4603      	mov	r3, r0
 80034b2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034b6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80034ba:	fa93 f3a3 	rbit	r3, r3
 80034be:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 80034c2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80034c6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 80034ca:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d101      	bne.n	80034d6 <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 80034d2:	2320      	movs	r3, #32
 80034d4:	e004      	b.n	80034e0 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 80034d6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80034da:	fab3 f383 	clz	r3, r3
 80034de:	b2db      	uxtb	r3, r3
 80034e0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d105      	bne.n	80034fa <HAL_ADC_ConfigChannel+0x26a>
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	0e9b      	lsrs	r3, r3, #26
 80034f4:	f003 031f 	and.w	r3, r3, #31
 80034f8:	e018      	b.n	800352c <HAL_ADC_ConfigChannel+0x29c>
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003502:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003506:	fa93 f3a3 	rbit	r3, r3
 800350a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 800350e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003512:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8003516:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800351a:	2b00      	cmp	r3, #0
 800351c:	d101      	bne.n	8003522 <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 800351e:	2320      	movs	r3, #32
 8003520:	e004      	b.n	800352c <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 8003522:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003526:	fab3 f383 	clz	r3, r3
 800352a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800352c:	429a      	cmp	r2, r3
 800352e:	d106      	bne.n	800353e <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	2200      	movs	r2, #0
 8003536:	2101      	movs	r1, #1
 8003538:	4618      	mov	r0, r3
 800353a:	f7ff fb75 	bl	8002c28 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	2102      	movs	r1, #2
 8003544:	4618      	mov	r0, r3
 8003546:	f7ff fb59 	bl	8002bfc <LL_ADC_GetOffsetChannel>
 800354a:	4603      	mov	r3, r0
 800354c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003550:	2b00      	cmp	r3, #0
 8003552:	d10a      	bne.n	800356a <HAL_ADC_ConfigChannel+0x2da>
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	2102      	movs	r1, #2
 800355a:	4618      	mov	r0, r3
 800355c:	f7ff fb4e 	bl	8002bfc <LL_ADC_GetOffsetChannel>
 8003560:	4603      	mov	r3, r0
 8003562:	0e9b      	lsrs	r3, r3, #26
 8003564:	f003 021f 	and.w	r2, r3, #31
 8003568:	e01e      	b.n	80035a8 <HAL_ADC_ConfigChannel+0x318>
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	2102      	movs	r1, #2
 8003570:	4618      	mov	r0, r3
 8003572:	f7ff fb43 	bl	8002bfc <LL_ADC_GetOffsetChannel>
 8003576:	4603      	mov	r3, r0
 8003578:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800357c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003580:	fa93 f3a3 	rbit	r3, r3
 8003584:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8003588:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800358c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8003590:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003594:	2b00      	cmp	r3, #0
 8003596:	d101      	bne.n	800359c <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 8003598:	2320      	movs	r3, #32
 800359a:	e004      	b.n	80035a6 <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 800359c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80035a0:	fab3 f383 	clz	r3, r3
 80035a4:	b2db      	uxtb	r3, r3
 80035a6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d105      	bne.n	80035c0 <HAL_ADC_ConfigChannel+0x330>
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	0e9b      	lsrs	r3, r3, #26
 80035ba:	f003 031f 	and.w	r3, r3, #31
 80035be:	e014      	b.n	80035ea <HAL_ADC_ConfigChannel+0x35a>
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035c6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80035c8:	fa93 f3a3 	rbit	r3, r3
 80035cc:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 80035ce:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80035d0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 80035d4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d101      	bne.n	80035e0 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 80035dc:	2320      	movs	r3, #32
 80035de:	e004      	b.n	80035ea <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 80035e0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80035e4:	fab3 f383 	clz	r3, r3
 80035e8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80035ea:	429a      	cmp	r2, r3
 80035ec:	d106      	bne.n	80035fc <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	2200      	movs	r2, #0
 80035f4:	2102      	movs	r1, #2
 80035f6:	4618      	mov	r0, r3
 80035f8:	f7ff fb16 	bl	8002c28 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	2103      	movs	r1, #3
 8003602:	4618      	mov	r0, r3
 8003604:	f7ff fafa 	bl	8002bfc <LL_ADC_GetOffsetChannel>
 8003608:	4603      	mov	r3, r0
 800360a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800360e:	2b00      	cmp	r3, #0
 8003610:	d10a      	bne.n	8003628 <HAL_ADC_ConfigChannel+0x398>
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	2103      	movs	r1, #3
 8003618:	4618      	mov	r0, r3
 800361a:	f7ff faef 	bl	8002bfc <LL_ADC_GetOffsetChannel>
 800361e:	4603      	mov	r3, r0
 8003620:	0e9b      	lsrs	r3, r3, #26
 8003622:	f003 021f 	and.w	r2, r3, #31
 8003626:	e017      	b.n	8003658 <HAL_ADC_ConfigChannel+0x3c8>
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	2103      	movs	r1, #3
 800362e:	4618      	mov	r0, r3
 8003630:	f7ff fae4 	bl	8002bfc <LL_ADC_GetOffsetChannel>
 8003634:	4603      	mov	r3, r0
 8003636:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003638:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800363a:	fa93 f3a3 	rbit	r3, r3
 800363e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8003640:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003642:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8003644:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003646:	2b00      	cmp	r3, #0
 8003648:	d101      	bne.n	800364e <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 800364a:	2320      	movs	r3, #32
 800364c:	e003      	b.n	8003656 <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 800364e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003650:	fab3 f383 	clz	r3, r3
 8003654:	b2db      	uxtb	r3, r3
 8003656:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003660:	2b00      	cmp	r3, #0
 8003662:	d105      	bne.n	8003670 <HAL_ADC_ConfigChannel+0x3e0>
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	0e9b      	lsrs	r3, r3, #26
 800366a:	f003 031f 	and.w	r3, r3, #31
 800366e:	e011      	b.n	8003694 <HAL_ADC_ConfigChannel+0x404>
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003676:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003678:	fa93 f3a3 	rbit	r3, r3
 800367c:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 800367e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003680:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8003682:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003684:	2b00      	cmp	r3, #0
 8003686:	d101      	bne.n	800368c <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8003688:	2320      	movs	r3, #32
 800368a:	e003      	b.n	8003694 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 800368c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800368e:	fab3 f383 	clz	r3, r3
 8003692:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003694:	429a      	cmp	r2, r3
 8003696:	d106      	bne.n	80036a6 <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	2200      	movs	r2, #0
 800369e:	2103      	movs	r1, #3
 80036a0:	4618      	mov	r0, r3
 80036a2:	f7ff fac1 	bl	8002c28 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	4618      	mov	r0, r3
 80036ac:	f7ff fbc8 	bl	8002e40 <LL_ADC_IsEnabled>
 80036b0:	4603      	mov	r3, r0
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	f040 8140 	bne.w	8003938 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6818      	ldr	r0, [r3, #0]
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	6819      	ldr	r1, [r3, #0]
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	68db      	ldr	r3, [r3, #12]
 80036c4:	461a      	mov	r2, r3
 80036c6:	f7ff fb35 	bl	8002d34 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	68db      	ldr	r3, [r3, #12]
 80036ce:	4a8f      	ldr	r2, [pc, #572]	@ (800390c <HAL_ADC_ConfigChannel+0x67c>)
 80036d0:	4293      	cmp	r3, r2
 80036d2:	f040 8131 	bne.w	8003938 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80036da:	683b      	ldr	r3, [r7, #0]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d10b      	bne.n	80036fe <HAL_ADC_ConfigChannel+0x46e>
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	0e9b      	lsrs	r3, r3, #26
 80036ec:	3301      	adds	r3, #1
 80036ee:	f003 031f 	and.w	r3, r3, #31
 80036f2:	2b09      	cmp	r3, #9
 80036f4:	bf94      	ite	ls
 80036f6:	2301      	movls	r3, #1
 80036f8:	2300      	movhi	r3, #0
 80036fa:	b2db      	uxtb	r3, r3
 80036fc:	e019      	b.n	8003732 <HAL_ADC_ConfigChannel+0x4a2>
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003704:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003706:	fa93 f3a3 	rbit	r3, r3
 800370a:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 800370c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800370e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8003710:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003712:	2b00      	cmp	r3, #0
 8003714:	d101      	bne.n	800371a <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 8003716:	2320      	movs	r3, #32
 8003718:	e003      	b.n	8003722 <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 800371a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800371c:	fab3 f383 	clz	r3, r3
 8003720:	b2db      	uxtb	r3, r3
 8003722:	3301      	adds	r3, #1
 8003724:	f003 031f 	and.w	r3, r3, #31
 8003728:	2b09      	cmp	r3, #9
 800372a:	bf94      	ite	ls
 800372c:	2301      	movls	r3, #1
 800372e:	2300      	movhi	r3, #0
 8003730:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003732:	2b00      	cmp	r3, #0
 8003734:	d079      	beq.n	800382a <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800373e:	2b00      	cmp	r3, #0
 8003740:	d107      	bne.n	8003752 <HAL_ADC_ConfigChannel+0x4c2>
 8003742:	683b      	ldr	r3, [r7, #0]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	0e9b      	lsrs	r3, r3, #26
 8003748:	3301      	adds	r3, #1
 800374a:	069b      	lsls	r3, r3, #26
 800374c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003750:	e015      	b.n	800377e <HAL_ADC_ConfigChannel+0x4ee>
 8003752:	683b      	ldr	r3, [r7, #0]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003758:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800375a:	fa93 f3a3 	rbit	r3, r3
 800375e:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8003760:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003762:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8003764:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003766:	2b00      	cmp	r3, #0
 8003768:	d101      	bne.n	800376e <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 800376a:	2320      	movs	r3, #32
 800376c:	e003      	b.n	8003776 <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 800376e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003770:	fab3 f383 	clz	r3, r3
 8003774:	b2db      	uxtb	r3, r3
 8003776:	3301      	adds	r3, #1
 8003778:	069b      	lsls	r3, r3, #26
 800377a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003786:	2b00      	cmp	r3, #0
 8003788:	d109      	bne.n	800379e <HAL_ADC_ConfigChannel+0x50e>
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	0e9b      	lsrs	r3, r3, #26
 8003790:	3301      	adds	r3, #1
 8003792:	f003 031f 	and.w	r3, r3, #31
 8003796:	2101      	movs	r1, #1
 8003798:	fa01 f303 	lsl.w	r3, r1, r3
 800379c:	e017      	b.n	80037ce <HAL_ADC_ConfigChannel+0x53e>
 800379e:	683b      	ldr	r3, [r7, #0]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037a4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80037a6:	fa93 f3a3 	rbit	r3, r3
 80037aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 80037ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80037ae:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 80037b0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d101      	bne.n	80037ba <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 80037b6:	2320      	movs	r3, #32
 80037b8:	e003      	b.n	80037c2 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 80037ba:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80037bc:	fab3 f383 	clz	r3, r3
 80037c0:	b2db      	uxtb	r3, r3
 80037c2:	3301      	adds	r3, #1
 80037c4:	f003 031f 	and.w	r3, r3, #31
 80037c8:	2101      	movs	r1, #1
 80037ca:	fa01 f303 	lsl.w	r3, r1, r3
 80037ce:	ea42 0103 	orr.w	r1, r2, r3
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d10a      	bne.n	80037f4 <HAL_ADC_ConfigChannel+0x564>
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	0e9b      	lsrs	r3, r3, #26
 80037e4:	3301      	adds	r3, #1
 80037e6:	f003 021f 	and.w	r2, r3, #31
 80037ea:	4613      	mov	r3, r2
 80037ec:	005b      	lsls	r3, r3, #1
 80037ee:	4413      	add	r3, r2
 80037f0:	051b      	lsls	r3, r3, #20
 80037f2:	e018      	b.n	8003826 <HAL_ADC_ConfigChannel+0x596>
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80037fc:	fa93 f3a3 	rbit	r3, r3
 8003800:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8003802:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003804:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8003806:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003808:	2b00      	cmp	r3, #0
 800380a:	d101      	bne.n	8003810 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 800380c:	2320      	movs	r3, #32
 800380e:	e003      	b.n	8003818 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 8003810:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003812:	fab3 f383 	clz	r3, r3
 8003816:	b2db      	uxtb	r3, r3
 8003818:	3301      	adds	r3, #1
 800381a:	f003 021f 	and.w	r2, r3, #31
 800381e:	4613      	mov	r3, r2
 8003820:	005b      	lsls	r3, r3, #1
 8003822:	4413      	add	r3, r2
 8003824:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003826:	430b      	orrs	r3, r1
 8003828:	e081      	b.n	800392e <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800382a:	683b      	ldr	r3, [r7, #0]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003832:	2b00      	cmp	r3, #0
 8003834:	d107      	bne.n	8003846 <HAL_ADC_ConfigChannel+0x5b6>
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	0e9b      	lsrs	r3, r3, #26
 800383c:	3301      	adds	r3, #1
 800383e:	069b      	lsls	r3, r3, #26
 8003840:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003844:	e015      	b.n	8003872 <HAL_ADC_ConfigChannel+0x5e2>
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800384c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800384e:	fa93 f3a3 	rbit	r3, r3
 8003852:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8003854:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003856:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8003858:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800385a:	2b00      	cmp	r3, #0
 800385c:	d101      	bne.n	8003862 <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 800385e:	2320      	movs	r3, #32
 8003860:	e003      	b.n	800386a <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 8003862:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003864:	fab3 f383 	clz	r3, r3
 8003868:	b2db      	uxtb	r3, r3
 800386a:	3301      	adds	r3, #1
 800386c:	069b      	lsls	r3, r3, #26
 800386e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800387a:	2b00      	cmp	r3, #0
 800387c:	d109      	bne.n	8003892 <HAL_ADC_ConfigChannel+0x602>
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	0e9b      	lsrs	r3, r3, #26
 8003884:	3301      	adds	r3, #1
 8003886:	f003 031f 	and.w	r3, r3, #31
 800388a:	2101      	movs	r1, #1
 800388c:	fa01 f303 	lsl.w	r3, r1, r3
 8003890:	e017      	b.n	80038c2 <HAL_ADC_ConfigChannel+0x632>
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003898:	69fb      	ldr	r3, [r7, #28]
 800389a:	fa93 f3a3 	rbit	r3, r3
 800389e:	61bb      	str	r3, [r7, #24]
  return result;
 80038a0:	69bb      	ldr	r3, [r7, #24]
 80038a2:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80038a4:	6a3b      	ldr	r3, [r7, #32]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d101      	bne.n	80038ae <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 80038aa:	2320      	movs	r3, #32
 80038ac:	e003      	b.n	80038b6 <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 80038ae:	6a3b      	ldr	r3, [r7, #32]
 80038b0:	fab3 f383 	clz	r3, r3
 80038b4:	b2db      	uxtb	r3, r3
 80038b6:	3301      	adds	r3, #1
 80038b8:	f003 031f 	and.w	r3, r3, #31
 80038bc:	2101      	movs	r1, #1
 80038be:	fa01 f303 	lsl.w	r3, r1, r3
 80038c2:	ea42 0103 	orr.w	r1, r2, r3
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d10d      	bne.n	80038ee <HAL_ADC_ConfigChannel+0x65e>
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	0e9b      	lsrs	r3, r3, #26
 80038d8:	3301      	adds	r3, #1
 80038da:	f003 021f 	and.w	r2, r3, #31
 80038de:	4613      	mov	r3, r2
 80038e0:	005b      	lsls	r3, r3, #1
 80038e2:	4413      	add	r3, r2
 80038e4:	3b1e      	subs	r3, #30
 80038e6:	051b      	lsls	r3, r3, #20
 80038e8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80038ec:	e01e      	b.n	800392c <HAL_ADC_ConfigChannel+0x69c>
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038f4:	693b      	ldr	r3, [r7, #16]
 80038f6:	fa93 f3a3 	rbit	r3, r3
 80038fa:	60fb      	str	r3, [r7, #12]
  return result;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8003900:	697b      	ldr	r3, [r7, #20]
 8003902:	2b00      	cmp	r3, #0
 8003904:	d104      	bne.n	8003910 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 8003906:	2320      	movs	r3, #32
 8003908:	e006      	b.n	8003918 <HAL_ADC_ConfigChannel+0x688>
 800390a:	bf00      	nop
 800390c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8003910:	697b      	ldr	r3, [r7, #20]
 8003912:	fab3 f383 	clz	r3, r3
 8003916:	b2db      	uxtb	r3, r3
 8003918:	3301      	adds	r3, #1
 800391a:	f003 021f 	and.w	r2, r3, #31
 800391e:	4613      	mov	r3, r2
 8003920:	005b      	lsls	r3, r3, #1
 8003922:	4413      	add	r3, r2
 8003924:	3b1e      	subs	r3, #30
 8003926:	051b      	lsls	r3, r3, #20
 8003928:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800392c:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800392e:	683a      	ldr	r2, [r7, #0]
 8003930:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003932:	4619      	mov	r1, r3
 8003934:	f7ff f9d2 	bl	8002cdc <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	681a      	ldr	r2, [r3, #0]
 800393c:	4b3d      	ldr	r3, [pc, #244]	@ (8003a34 <HAL_ADC_ConfigChannel+0x7a4>)
 800393e:	4013      	ands	r3, r2
 8003940:	2b00      	cmp	r3, #0
 8003942:	d06c      	beq.n	8003a1e <HAL_ADC_ConfigChannel+0x78e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003944:	483c      	ldr	r0, [pc, #240]	@ (8003a38 <HAL_ADC_ConfigChannel+0x7a8>)
 8003946:	f7ff f927 	bl	8002b98 <LL_ADC_GetCommonPathInternalCh>
 800394a:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800394e:	683b      	ldr	r3, [r7, #0]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	4a3a      	ldr	r2, [pc, #232]	@ (8003a3c <HAL_ADC_ConfigChannel+0x7ac>)
 8003954:	4293      	cmp	r3, r2
 8003956:	d127      	bne.n	80039a8 <HAL_ADC_ConfigChannel+0x718>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003958:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800395c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003960:	2b00      	cmp	r3, #0
 8003962:	d121      	bne.n	80039a8 <HAL_ADC_ConfigChannel+0x718>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	4a35      	ldr	r2, [pc, #212]	@ (8003a40 <HAL_ADC_ConfigChannel+0x7b0>)
 800396a:	4293      	cmp	r3, r2
 800396c:	d157      	bne.n	8003a1e <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800396e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003972:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003976:	4619      	mov	r1, r3
 8003978:	482f      	ldr	r0, [pc, #188]	@ (8003a38 <HAL_ADC_ConfigChannel+0x7a8>)
 800397a:	f7ff f8fa 	bl	8002b72 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800397e:	4b31      	ldr	r3, [pc, #196]	@ (8003a44 <HAL_ADC_ConfigChannel+0x7b4>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	099b      	lsrs	r3, r3, #6
 8003984:	4a30      	ldr	r2, [pc, #192]	@ (8003a48 <HAL_ADC_ConfigChannel+0x7b8>)
 8003986:	fba2 2303 	umull	r2, r3, r2, r3
 800398a:	099b      	lsrs	r3, r3, #6
 800398c:	1c5a      	adds	r2, r3, #1
 800398e:	4613      	mov	r3, r2
 8003990:	005b      	lsls	r3, r3, #1
 8003992:	4413      	add	r3, r2
 8003994:	009b      	lsls	r3, r3, #2
 8003996:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8003998:	e002      	b.n	80039a0 <HAL_ADC_ConfigChannel+0x710>
          {
            wait_loop_index--;
 800399a:	68bb      	ldr	r3, [r7, #8]
 800399c:	3b01      	subs	r3, #1
 800399e:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80039a0:	68bb      	ldr	r3, [r7, #8]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d1f9      	bne.n	800399a <HAL_ADC_ConfigChannel+0x70a>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80039a6:	e03a      	b.n	8003a1e <HAL_ADC_ConfigChannel+0x78e>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	4a27      	ldr	r2, [pc, #156]	@ (8003a4c <HAL_ADC_ConfigChannel+0x7bc>)
 80039ae:	4293      	cmp	r3, r2
 80039b0:	d113      	bne.n	80039da <HAL_ADC_ConfigChannel+0x74a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80039b2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80039b6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d10d      	bne.n	80039da <HAL_ADC_ConfigChannel+0x74a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	4a1f      	ldr	r2, [pc, #124]	@ (8003a40 <HAL_ADC_ConfigChannel+0x7b0>)
 80039c4:	4293      	cmp	r3, r2
 80039c6:	d12a      	bne.n	8003a1e <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80039c8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80039cc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80039d0:	4619      	mov	r1, r3
 80039d2:	4819      	ldr	r0, [pc, #100]	@ (8003a38 <HAL_ADC_ConfigChannel+0x7a8>)
 80039d4:	f7ff f8cd 	bl	8002b72 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80039d8:	e021      	b.n	8003a1e <HAL_ADC_ConfigChannel+0x78e>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80039da:	683b      	ldr	r3, [r7, #0]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	4a1c      	ldr	r2, [pc, #112]	@ (8003a50 <HAL_ADC_ConfigChannel+0x7c0>)
 80039e0:	4293      	cmp	r3, r2
 80039e2:	d11c      	bne.n	8003a1e <HAL_ADC_ConfigChannel+0x78e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80039e4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80039e8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d116      	bne.n	8003a1e <HAL_ADC_ConfigChannel+0x78e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	4a12      	ldr	r2, [pc, #72]	@ (8003a40 <HAL_ADC_ConfigChannel+0x7b0>)
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d111      	bne.n	8003a1e <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80039fa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80039fe:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003a02:	4619      	mov	r1, r3
 8003a04:	480c      	ldr	r0, [pc, #48]	@ (8003a38 <HAL_ADC_ConfigChannel+0x7a8>)
 8003a06:	f7ff f8b4 	bl	8002b72 <LL_ADC_SetCommonPathInternalCh>
 8003a0a:	e008      	b.n	8003a1e <HAL_ADC_ConfigChannel+0x78e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a10:	f043 0220 	orr.w	r2, r3, #32
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8003a18:	2301      	movs	r3, #1
 8003a1a:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	2200      	movs	r2, #0
 8003a22:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8003a26:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	37d8      	adds	r7, #216	@ 0xd8
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	bd80      	pop	{r7, pc}
 8003a32:	bf00      	nop
 8003a34:	80080000 	.word	0x80080000
 8003a38:	50040300 	.word	0x50040300
 8003a3c:	c7520000 	.word	0xc7520000
 8003a40:	50040000 	.word	0x50040000
 8003a44:	20000004 	.word	0x20000004
 8003a48:	053e2d63 	.word	0x053e2d63
 8003a4c:	cb840000 	.word	0xcb840000
 8003a50:	80000001 	.word	0x80000001

08003a54 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b084      	sub	sp, #16
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	4618      	mov	r0, r3
 8003a66:	f7ff f9eb 	bl	8002e40 <LL_ADC_IsEnabled>
 8003a6a:	4603      	mov	r3, r0
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d169      	bne.n	8003b44 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	689a      	ldr	r2, [r3, #8]
 8003a76:	4b36      	ldr	r3, [pc, #216]	@ (8003b50 <ADC_Enable+0xfc>)
 8003a78:	4013      	ands	r3, r2
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d00d      	beq.n	8003a9a <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a82:	f043 0210 	orr.w	r2, r3, #16
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a8e:	f043 0201 	orr.w	r2, r3, #1
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8003a96:	2301      	movs	r3, #1
 8003a98:	e055      	b.n	8003b46 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	f7ff f9ba 	bl	8002e18 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003aa4:	482b      	ldr	r0, [pc, #172]	@ (8003b54 <ADC_Enable+0x100>)
 8003aa6:	f7ff f877 	bl	8002b98 <LL_ADC_GetCommonPathInternalCh>
 8003aaa:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8003aac:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d013      	beq.n	8003adc <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003ab4:	4b28      	ldr	r3, [pc, #160]	@ (8003b58 <ADC_Enable+0x104>)
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	099b      	lsrs	r3, r3, #6
 8003aba:	4a28      	ldr	r2, [pc, #160]	@ (8003b5c <ADC_Enable+0x108>)
 8003abc:	fba2 2303 	umull	r2, r3, r2, r3
 8003ac0:	099b      	lsrs	r3, r3, #6
 8003ac2:	1c5a      	adds	r2, r3, #1
 8003ac4:	4613      	mov	r3, r2
 8003ac6:	005b      	lsls	r3, r3, #1
 8003ac8:	4413      	add	r3, r2
 8003aca:	009b      	lsls	r3, r3, #2
 8003acc:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003ace:	e002      	b.n	8003ad6 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8003ad0:	68bb      	ldr	r3, [r7, #8]
 8003ad2:	3b01      	subs	r3, #1
 8003ad4:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003ad6:	68bb      	ldr	r3, [r7, #8]
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d1f9      	bne.n	8003ad0 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003adc:	f7fe ffe6 	bl	8002aac <HAL_GetTick>
 8003ae0:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003ae2:	e028      	b.n	8003b36 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	4618      	mov	r0, r3
 8003aea:	f7ff f9a9 	bl	8002e40 <LL_ADC_IsEnabled>
 8003aee:	4603      	mov	r3, r0
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d104      	bne.n	8003afe <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	4618      	mov	r0, r3
 8003afa:	f7ff f98d 	bl	8002e18 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003afe:	f7fe ffd5 	bl	8002aac <HAL_GetTick>
 8003b02:	4602      	mov	r2, r0
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	1ad3      	subs	r3, r2, r3
 8003b08:	2b02      	cmp	r3, #2
 8003b0a:	d914      	bls.n	8003b36 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f003 0301 	and.w	r3, r3, #1
 8003b16:	2b01      	cmp	r3, #1
 8003b18:	d00d      	beq.n	8003b36 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b1e:	f043 0210 	orr.w	r2, r3, #16
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b2a:	f043 0201 	orr.w	r2, r3, #1
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8003b32:	2301      	movs	r3, #1
 8003b34:	e007      	b.n	8003b46 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f003 0301 	and.w	r3, r3, #1
 8003b40:	2b01      	cmp	r3, #1
 8003b42:	d1cf      	bne.n	8003ae4 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003b44:	2300      	movs	r3, #0
}
 8003b46:	4618      	mov	r0, r3
 8003b48:	3710      	adds	r7, #16
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	bd80      	pop	{r7, pc}
 8003b4e:	bf00      	nop
 8003b50:	8000003f 	.word	0x8000003f
 8003b54:	50040300 	.word	0x50040300
 8003b58:	20000004 	.word	0x20000004
 8003b5c:	053e2d63 	.word	0x053e2d63

08003b60 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b084      	sub	sp, #16
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b6c:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b72:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d14b      	bne.n	8003c12 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b7e:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f003 0308 	and.w	r3, r3, #8
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d021      	beq.n	8003bd8 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	4618      	mov	r0, r3
 8003b9a:	f7ff f860 	bl	8002c5e <LL_ADC_REG_IsTriggerSourceSWStart>
 8003b9e:	4603      	mov	r3, r0
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d032      	beq.n	8003c0a <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	68db      	ldr	r3, [r3, #12]
 8003baa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d12b      	bne.n	8003c0a <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003bb6:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	655a      	str	r2, [r3, #84]	@ 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003bc2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d11f      	bne.n	8003c0a <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003bce:	f043 0201 	orr.w	r2, r3, #1
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	655a      	str	r2, [r3, #84]	@ 0x54
 8003bd6:	e018      	b.n	8003c0a <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	68db      	ldr	r3, [r3, #12]
 8003bde:	f003 0302 	and.w	r3, r3, #2
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d111      	bne.n	8003c0a <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003bea:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	655a      	str	r2, [r3, #84]	@ 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003bf6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d105      	bne.n	8003c0a <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c02:	f043 0201 	orr.w	r2, r3, #1
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003c0a:	68f8      	ldr	r0, [r7, #12]
 8003c0c:	f7fd fddc 	bl	80017c8 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003c10:	e00e      	b.n	8003c30 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c16:	f003 0310 	and.w	r3, r3, #16
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d003      	beq.n	8003c26 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8003c1e:	68f8      	ldr	r0, [r7, #12]
 8003c20:	f7ff fb2c 	bl	800327c <HAL_ADC_ErrorCallback>
}
 8003c24:	e004      	b.n	8003c30 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c2a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c2c:	6878      	ldr	r0, [r7, #4]
 8003c2e:	4798      	blx	r3
}
 8003c30:	bf00      	nop
 8003c32:	3710      	adds	r7, #16
 8003c34:	46bd      	mov	sp, r7
 8003c36:	bd80      	pop	{r7, pc}

08003c38 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b084      	sub	sp, #16
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c44:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003c46:	68f8      	ldr	r0, [r7, #12]
 8003c48:	f7ff fb0e 	bl	8003268 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003c4c:	bf00      	nop
 8003c4e:	3710      	adds	r7, #16
 8003c50:	46bd      	mov	sp, r7
 8003c52:	bd80      	pop	{r7, pc}

08003c54 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003c54:	b580      	push	{r7, lr}
 8003c56:	b084      	sub	sp, #16
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c60:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c66:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c72:	f043 0204 	orr.w	r2, r3, #4
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003c7a:	68f8      	ldr	r0, [r7, #12]
 8003c7c:	f7ff fafe 	bl	800327c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003c80:	bf00      	nop
 8003c82:	3710      	adds	r7, #16
 8003c84:	46bd      	mov	sp, r7
 8003c86:	bd80      	pop	{r7, pc}

08003c88 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c88:	b480      	push	{r7}
 8003c8a:	b085      	sub	sp, #20
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	f003 0307 	and.w	r3, r3, #7
 8003c96:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003c98:	4b0c      	ldr	r3, [pc, #48]	@ (8003ccc <__NVIC_SetPriorityGrouping+0x44>)
 8003c9a:	68db      	ldr	r3, [r3, #12]
 8003c9c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003c9e:	68ba      	ldr	r2, [r7, #8]
 8003ca0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003ca4:	4013      	ands	r3, r2
 8003ca6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003cac:	68bb      	ldr	r3, [r7, #8]
 8003cae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003cb0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003cb4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003cb8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003cba:	4a04      	ldr	r2, [pc, #16]	@ (8003ccc <__NVIC_SetPriorityGrouping+0x44>)
 8003cbc:	68bb      	ldr	r3, [r7, #8]
 8003cbe:	60d3      	str	r3, [r2, #12]
}
 8003cc0:	bf00      	nop
 8003cc2:	3714      	adds	r7, #20
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cca:	4770      	bx	lr
 8003ccc:	e000ed00 	.word	0xe000ed00

08003cd0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003cd0:	b480      	push	{r7}
 8003cd2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003cd4:	4b04      	ldr	r3, [pc, #16]	@ (8003ce8 <__NVIC_GetPriorityGrouping+0x18>)
 8003cd6:	68db      	ldr	r3, [r3, #12]
 8003cd8:	0a1b      	lsrs	r3, r3, #8
 8003cda:	f003 0307 	and.w	r3, r3, #7
}
 8003cde:	4618      	mov	r0, r3
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce6:	4770      	bx	lr
 8003ce8:	e000ed00 	.word	0xe000ed00

08003cec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003cec:	b480      	push	{r7}
 8003cee:	b083      	sub	sp, #12
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	4603      	mov	r3, r0
 8003cf4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003cf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	db0b      	blt.n	8003d16 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003cfe:	79fb      	ldrb	r3, [r7, #7]
 8003d00:	f003 021f 	and.w	r2, r3, #31
 8003d04:	4907      	ldr	r1, [pc, #28]	@ (8003d24 <__NVIC_EnableIRQ+0x38>)
 8003d06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d0a:	095b      	lsrs	r3, r3, #5
 8003d0c:	2001      	movs	r0, #1
 8003d0e:	fa00 f202 	lsl.w	r2, r0, r2
 8003d12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003d16:	bf00      	nop
 8003d18:	370c      	adds	r7, #12
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d20:	4770      	bx	lr
 8003d22:	bf00      	nop
 8003d24:	e000e100 	.word	0xe000e100

08003d28 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003d28:	b480      	push	{r7}
 8003d2a:	b083      	sub	sp, #12
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	4603      	mov	r3, r0
 8003d30:	6039      	str	r1, [r7, #0]
 8003d32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	db0a      	blt.n	8003d52 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	b2da      	uxtb	r2, r3
 8003d40:	490c      	ldr	r1, [pc, #48]	@ (8003d74 <__NVIC_SetPriority+0x4c>)
 8003d42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d46:	0112      	lsls	r2, r2, #4
 8003d48:	b2d2      	uxtb	r2, r2
 8003d4a:	440b      	add	r3, r1
 8003d4c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003d50:	e00a      	b.n	8003d68 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d52:	683b      	ldr	r3, [r7, #0]
 8003d54:	b2da      	uxtb	r2, r3
 8003d56:	4908      	ldr	r1, [pc, #32]	@ (8003d78 <__NVIC_SetPriority+0x50>)
 8003d58:	79fb      	ldrb	r3, [r7, #7]
 8003d5a:	f003 030f 	and.w	r3, r3, #15
 8003d5e:	3b04      	subs	r3, #4
 8003d60:	0112      	lsls	r2, r2, #4
 8003d62:	b2d2      	uxtb	r2, r2
 8003d64:	440b      	add	r3, r1
 8003d66:	761a      	strb	r2, [r3, #24]
}
 8003d68:	bf00      	nop
 8003d6a:	370c      	adds	r7, #12
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d72:	4770      	bx	lr
 8003d74:	e000e100 	.word	0xe000e100
 8003d78:	e000ed00 	.word	0xe000ed00

08003d7c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003d7c:	b480      	push	{r7}
 8003d7e:	b089      	sub	sp, #36	@ 0x24
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	60f8      	str	r0, [r7, #12]
 8003d84:	60b9      	str	r1, [r7, #8]
 8003d86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	f003 0307 	and.w	r3, r3, #7
 8003d8e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003d90:	69fb      	ldr	r3, [r7, #28]
 8003d92:	f1c3 0307 	rsb	r3, r3, #7
 8003d96:	2b04      	cmp	r3, #4
 8003d98:	bf28      	it	cs
 8003d9a:	2304      	movcs	r3, #4
 8003d9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003d9e:	69fb      	ldr	r3, [r7, #28]
 8003da0:	3304      	adds	r3, #4
 8003da2:	2b06      	cmp	r3, #6
 8003da4:	d902      	bls.n	8003dac <NVIC_EncodePriority+0x30>
 8003da6:	69fb      	ldr	r3, [r7, #28]
 8003da8:	3b03      	subs	r3, #3
 8003daa:	e000      	b.n	8003dae <NVIC_EncodePriority+0x32>
 8003dac:	2300      	movs	r3, #0
 8003dae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003db0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003db4:	69bb      	ldr	r3, [r7, #24]
 8003db6:	fa02 f303 	lsl.w	r3, r2, r3
 8003dba:	43da      	mvns	r2, r3
 8003dbc:	68bb      	ldr	r3, [r7, #8]
 8003dbe:	401a      	ands	r2, r3
 8003dc0:	697b      	ldr	r3, [r7, #20]
 8003dc2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003dc4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003dc8:	697b      	ldr	r3, [r7, #20]
 8003dca:	fa01 f303 	lsl.w	r3, r1, r3
 8003dce:	43d9      	mvns	r1, r3
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003dd4:	4313      	orrs	r3, r2
         );
}
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	3724      	adds	r7, #36	@ 0x24
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de0:	4770      	bx	lr
	...

08003de4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b082      	sub	sp, #8
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	3b01      	subs	r3, #1
 8003df0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003df4:	d301      	bcc.n	8003dfa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003df6:	2301      	movs	r3, #1
 8003df8:	e00f      	b.n	8003e1a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003dfa:	4a0a      	ldr	r2, [pc, #40]	@ (8003e24 <SysTick_Config+0x40>)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	3b01      	subs	r3, #1
 8003e00:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003e02:	210f      	movs	r1, #15
 8003e04:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003e08:	f7ff ff8e 	bl	8003d28 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003e0c:	4b05      	ldr	r3, [pc, #20]	@ (8003e24 <SysTick_Config+0x40>)
 8003e0e:	2200      	movs	r2, #0
 8003e10:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003e12:	4b04      	ldr	r3, [pc, #16]	@ (8003e24 <SysTick_Config+0x40>)
 8003e14:	2207      	movs	r2, #7
 8003e16:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003e18:	2300      	movs	r3, #0
}
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	3708      	adds	r7, #8
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	bd80      	pop	{r7, pc}
 8003e22:	bf00      	nop
 8003e24:	e000e010 	.word	0xe000e010

08003e28 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b082      	sub	sp, #8
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003e30:	6878      	ldr	r0, [r7, #4]
 8003e32:	f7ff ff29 	bl	8003c88 <__NVIC_SetPriorityGrouping>
}
 8003e36:	bf00      	nop
 8003e38:	3708      	adds	r7, #8
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	bd80      	pop	{r7, pc}

08003e3e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003e3e:	b580      	push	{r7, lr}
 8003e40:	b086      	sub	sp, #24
 8003e42:	af00      	add	r7, sp, #0
 8003e44:	4603      	mov	r3, r0
 8003e46:	60b9      	str	r1, [r7, #8]
 8003e48:	607a      	str	r2, [r7, #4]
 8003e4a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003e50:	f7ff ff3e 	bl	8003cd0 <__NVIC_GetPriorityGrouping>
 8003e54:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003e56:	687a      	ldr	r2, [r7, #4]
 8003e58:	68b9      	ldr	r1, [r7, #8]
 8003e5a:	6978      	ldr	r0, [r7, #20]
 8003e5c:	f7ff ff8e 	bl	8003d7c <NVIC_EncodePriority>
 8003e60:	4602      	mov	r2, r0
 8003e62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e66:	4611      	mov	r1, r2
 8003e68:	4618      	mov	r0, r3
 8003e6a:	f7ff ff5d 	bl	8003d28 <__NVIC_SetPriority>
}
 8003e6e:	bf00      	nop
 8003e70:	3718      	adds	r7, #24
 8003e72:	46bd      	mov	sp, r7
 8003e74:	bd80      	pop	{r7, pc}

08003e76 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003e76:	b580      	push	{r7, lr}
 8003e78:	b082      	sub	sp, #8
 8003e7a:	af00      	add	r7, sp, #0
 8003e7c:	4603      	mov	r3, r0
 8003e7e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003e80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e84:	4618      	mov	r0, r3
 8003e86:	f7ff ff31 	bl	8003cec <__NVIC_EnableIRQ>
}
 8003e8a:	bf00      	nop
 8003e8c:	3708      	adds	r7, #8
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	bd80      	pop	{r7, pc}

08003e92 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003e92:	b580      	push	{r7, lr}
 8003e94:	b082      	sub	sp, #8
 8003e96:	af00      	add	r7, sp, #0
 8003e98:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003e9a:	6878      	ldr	r0, [r7, #4]
 8003e9c:	f7ff ffa2 	bl	8003de4 <SysTick_Config>
 8003ea0:	4603      	mov	r3, r0
}
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	3708      	adds	r7, #8
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	bd80      	pop	{r7, pc}
	...

08003eac <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003eac:	b480      	push	{r7}
 8003eae:	b085      	sub	sp, #20
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d101      	bne.n	8003ebe <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003eba:	2301      	movs	r3, #1
 8003ebc:	e098      	b.n	8003ff0 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	461a      	mov	r2, r3
 8003ec4:	4b4d      	ldr	r3, [pc, #308]	@ (8003ffc <HAL_DMA_Init+0x150>)
 8003ec6:	429a      	cmp	r2, r3
 8003ec8:	d80f      	bhi.n	8003eea <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	461a      	mov	r2, r3
 8003ed0:	4b4b      	ldr	r3, [pc, #300]	@ (8004000 <HAL_DMA_Init+0x154>)
 8003ed2:	4413      	add	r3, r2
 8003ed4:	4a4b      	ldr	r2, [pc, #300]	@ (8004004 <HAL_DMA_Init+0x158>)
 8003ed6:	fba2 2303 	umull	r2, r3, r2, r3
 8003eda:	091b      	lsrs	r3, r3, #4
 8003edc:	009a      	lsls	r2, r3, #2
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	4a48      	ldr	r2, [pc, #288]	@ (8004008 <HAL_DMA_Init+0x15c>)
 8003ee6:	641a      	str	r2, [r3, #64]	@ 0x40
 8003ee8:	e00e      	b.n	8003f08 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	461a      	mov	r2, r3
 8003ef0:	4b46      	ldr	r3, [pc, #280]	@ (800400c <HAL_DMA_Init+0x160>)
 8003ef2:	4413      	add	r3, r2
 8003ef4:	4a43      	ldr	r2, [pc, #268]	@ (8004004 <HAL_DMA_Init+0x158>)
 8003ef6:	fba2 2303 	umull	r2, r3, r2, r3
 8003efa:	091b      	lsrs	r3, r3, #4
 8003efc:	009a      	lsls	r2, r3, #2
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	4a42      	ldr	r2, [pc, #264]	@ (8004010 <HAL_DMA_Init+0x164>)
 8003f06:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2202      	movs	r2, #2
 8003f0c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8003f1e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003f22:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003f2c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	691b      	ldr	r3, [r3, #16]
 8003f32:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f38:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	699b      	ldr	r3, [r3, #24]
 8003f3e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f44:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6a1b      	ldr	r3, [r3, #32]
 8003f4a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003f4c:	68fa      	ldr	r2, [r7, #12]
 8003f4e:	4313      	orrs	r3, r2
 8003f50:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	68fa      	ldr	r2, [r7, #12]
 8003f58:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	689b      	ldr	r3, [r3, #8]
 8003f5e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003f62:	d039      	beq.n	8003fd8 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f68:	4a27      	ldr	r2, [pc, #156]	@ (8004008 <HAL_DMA_Init+0x15c>)
 8003f6a:	4293      	cmp	r3, r2
 8003f6c:	d11a      	bne.n	8003fa4 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003f6e:	4b29      	ldr	r3, [pc, #164]	@ (8004014 <HAL_DMA_Init+0x168>)
 8003f70:	681a      	ldr	r2, [r3, #0]
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f76:	f003 031c 	and.w	r3, r3, #28
 8003f7a:	210f      	movs	r1, #15
 8003f7c:	fa01 f303 	lsl.w	r3, r1, r3
 8003f80:	43db      	mvns	r3, r3
 8003f82:	4924      	ldr	r1, [pc, #144]	@ (8004014 <HAL_DMA_Init+0x168>)
 8003f84:	4013      	ands	r3, r2
 8003f86:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003f88:	4b22      	ldr	r3, [pc, #136]	@ (8004014 <HAL_DMA_Init+0x168>)
 8003f8a:	681a      	ldr	r2, [r3, #0]
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6859      	ldr	r1, [r3, #4]
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f94:	f003 031c 	and.w	r3, r3, #28
 8003f98:	fa01 f303 	lsl.w	r3, r1, r3
 8003f9c:	491d      	ldr	r1, [pc, #116]	@ (8004014 <HAL_DMA_Init+0x168>)
 8003f9e:	4313      	orrs	r3, r2
 8003fa0:	600b      	str	r3, [r1, #0]
 8003fa2:	e019      	b.n	8003fd8 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003fa4:	4b1c      	ldr	r3, [pc, #112]	@ (8004018 <HAL_DMA_Init+0x16c>)
 8003fa6:	681a      	ldr	r2, [r3, #0]
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fac:	f003 031c 	and.w	r3, r3, #28
 8003fb0:	210f      	movs	r1, #15
 8003fb2:	fa01 f303 	lsl.w	r3, r1, r3
 8003fb6:	43db      	mvns	r3, r3
 8003fb8:	4917      	ldr	r1, [pc, #92]	@ (8004018 <HAL_DMA_Init+0x16c>)
 8003fba:	4013      	ands	r3, r2
 8003fbc:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003fbe:	4b16      	ldr	r3, [pc, #88]	@ (8004018 <HAL_DMA_Init+0x16c>)
 8003fc0:	681a      	ldr	r2, [r3, #0]
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6859      	ldr	r1, [r3, #4]
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fca:	f003 031c 	and.w	r3, r3, #28
 8003fce:	fa01 f303 	lsl.w	r3, r1, r3
 8003fd2:	4911      	ldr	r1, [pc, #68]	@ (8004018 <HAL_DMA_Init+0x16c>)
 8003fd4:	4313      	orrs	r3, r2
 8003fd6:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2200      	movs	r2, #0
 8003fdc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	2201      	movs	r2, #1
 8003fe2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	2200      	movs	r2, #0
 8003fea:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8003fee:	2300      	movs	r3, #0
}
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	3714      	adds	r7, #20
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffa:	4770      	bx	lr
 8003ffc:	40020407 	.word	0x40020407
 8004000:	bffdfff8 	.word	0xbffdfff8
 8004004:	cccccccd 	.word	0xcccccccd
 8004008:	40020000 	.word	0x40020000
 800400c:	bffdfbf8 	.word	0xbffdfbf8
 8004010:	40020400 	.word	0x40020400
 8004014:	400200a8 	.word	0x400200a8
 8004018:	400204a8 	.word	0x400204a8

0800401c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800401c:	b580      	push	{r7, lr}
 800401e:	b086      	sub	sp, #24
 8004020:	af00      	add	r7, sp, #0
 8004022:	60f8      	str	r0, [r7, #12]
 8004024:	60b9      	str	r1, [r7, #8]
 8004026:	607a      	str	r2, [r7, #4]
 8004028:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800402a:	2300      	movs	r3, #0
 800402c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004034:	2b01      	cmp	r3, #1
 8004036:	d101      	bne.n	800403c <HAL_DMA_Start_IT+0x20>
 8004038:	2302      	movs	r3, #2
 800403a:	e04b      	b.n	80040d4 <HAL_DMA_Start_IT+0xb8>
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	2201      	movs	r2, #1
 8004040:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800404a:	b2db      	uxtb	r3, r3
 800404c:	2b01      	cmp	r3, #1
 800404e:	d13a      	bne.n	80040c6 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	2202      	movs	r2, #2
 8004054:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	2200      	movs	r2, #0
 800405c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	681a      	ldr	r2, [r3, #0]
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f022 0201 	bic.w	r2, r2, #1
 800406c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	687a      	ldr	r2, [r7, #4]
 8004072:	68b9      	ldr	r1, [r7, #8]
 8004074:	68f8      	ldr	r0, [r7, #12]
 8004076:	f000 f8e0 	bl	800423a <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800407e:	2b00      	cmp	r3, #0
 8004080:	d008      	beq.n	8004094 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	681a      	ldr	r2, [r3, #0]
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f042 020e 	orr.w	r2, r2, #14
 8004090:	601a      	str	r2, [r3, #0]
 8004092:	e00f      	b.n	80040b4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	681a      	ldr	r2, [r3, #0]
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f022 0204 	bic.w	r2, r2, #4
 80040a2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	681a      	ldr	r2, [r3, #0]
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f042 020a 	orr.w	r2, r2, #10
 80040b2:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	681a      	ldr	r2, [r3, #0]
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f042 0201 	orr.w	r2, r2, #1
 80040c2:	601a      	str	r2, [r3, #0]
 80040c4:	e005      	b.n	80040d2 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	2200      	movs	r2, #0
 80040ca:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80040ce:	2302      	movs	r3, #2
 80040d0:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80040d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80040d4:	4618      	mov	r0, r3
 80040d6:	3718      	adds	r7, #24
 80040d8:	46bd      	mov	sp, r7
 80040da:	bd80      	pop	{r7, pc}

080040dc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80040dc:	b580      	push	{r7, lr}
 80040de:	b084      	sub	sp, #16
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040f8:	f003 031c 	and.w	r3, r3, #28
 80040fc:	2204      	movs	r2, #4
 80040fe:	409a      	lsls	r2, r3
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	4013      	ands	r3, r2
 8004104:	2b00      	cmp	r3, #0
 8004106:	d026      	beq.n	8004156 <HAL_DMA_IRQHandler+0x7a>
 8004108:	68bb      	ldr	r3, [r7, #8]
 800410a:	f003 0304 	and.w	r3, r3, #4
 800410e:	2b00      	cmp	r3, #0
 8004110:	d021      	beq.n	8004156 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f003 0320 	and.w	r3, r3, #32
 800411c:	2b00      	cmp	r3, #0
 800411e:	d107      	bne.n	8004130 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	681a      	ldr	r2, [r3, #0]
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f022 0204 	bic.w	r2, r2, #4
 800412e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004134:	f003 021c 	and.w	r2, r3, #28
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800413c:	2104      	movs	r1, #4
 800413e:	fa01 f202 	lsl.w	r2, r1, r2
 8004142:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004148:	2b00      	cmp	r3, #0
 800414a:	d071      	beq.n	8004230 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004150:	6878      	ldr	r0, [r7, #4]
 8004152:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8004154:	e06c      	b.n	8004230 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800415a:	f003 031c 	and.w	r3, r3, #28
 800415e:	2202      	movs	r2, #2
 8004160:	409a      	lsls	r2, r3
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	4013      	ands	r3, r2
 8004166:	2b00      	cmp	r3, #0
 8004168:	d02e      	beq.n	80041c8 <HAL_DMA_IRQHandler+0xec>
 800416a:	68bb      	ldr	r3, [r7, #8]
 800416c:	f003 0302 	and.w	r3, r3, #2
 8004170:	2b00      	cmp	r3, #0
 8004172:	d029      	beq.n	80041c8 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f003 0320 	and.w	r3, r3, #32
 800417e:	2b00      	cmp	r3, #0
 8004180:	d10b      	bne.n	800419a <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	681a      	ldr	r2, [r3, #0]
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f022 020a 	bic.w	r2, r2, #10
 8004190:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	2201      	movs	r2, #1
 8004196:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800419e:	f003 021c 	and.w	r2, r3, #28
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041a6:	2102      	movs	r1, #2
 80041a8:	fa01 f202 	lsl.w	r2, r1, r2
 80041ac:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	2200      	movs	r2, #0
 80041b2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d038      	beq.n	8004230 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041c2:	6878      	ldr	r0, [r7, #4]
 80041c4:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80041c6:	e033      	b.n	8004230 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041cc:	f003 031c 	and.w	r3, r3, #28
 80041d0:	2208      	movs	r2, #8
 80041d2:	409a      	lsls	r2, r3
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	4013      	ands	r3, r2
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d02a      	beq.n	8004232 <HAL_DMA_IRQHandler+0x156>
 80041dc:	68bb      	ldr	r3, [r7, #8]
 80041de:	f003 0308 	and.w	r3, r3, #8
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d025      	beq.n	8004232 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	681a      	ldr	r2, [r3, #0]
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f022 020e 	bic.w	r2, r2, #14
 80041f4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041fa:	f003 021c 	and.w	r2, r3, #28
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004202:	2101      	movs	r1, #1
 8004204:	fa01 f202 	lsl.w	r2, r1, r2
 8004208:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	2201      	movs	r2, #1
 800420e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2201      	movs	r2, #1
 8004214:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2200      	movs	r2, #0
 800421c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004224:	2b00      	cmp	r3, #0
 8004226:	d004      	beq.n	8004232 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800422c:	6878      	ldr	r0, [r7, #4]
 800422e:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004230:	bf00      	nop
 8004232:	bf00      	nop
}
 8004234:	3710      	adds	r7, #16
 8004236:	46bd      	mov	sp, r7
 8004238:	bd80      	pop	{r7, pc}

0800423a <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800423a:	b480      	push	{r7}
 800423c:	b085      	sub	sp, #20
 800423e:	af00      	add	r7, sp, #0
 8004240:	60f8      	str	r0, [r7, #12]
 8004242:	60b9      	str	r1, [r7, #8]
 8004244:	607a      	str	r2, [r7, #4]
 8004246:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800424c:	f003 021c 	and.w	r2, r3, #28
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004254:	2101      	movs	r1, #1
 8004256:	fa01 f202 	lsl.w	r2, r1, r2
 800425a:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	683a      	ldr	r2, [r7, #0]
 8004262:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	689b      	ldr	r3, [r3, #8]
 8004268:	2b10      	cmp	r3, #16
 800426a:	d108      	bne.n	800427e <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	687a      	ldr	r2, [r7, #4]
 8004272:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	68ba      	ldr	r2, [r7, #8]
 800427a:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800427c:	e007      	b.n	800428e <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	68ba      	ldr	r2, [r7, #8]
 8004284:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	687a      	ldr	r2, [r7, #4]
 800428c:	60da      	str	r2, [r3, #12]
}
 800428e:	bf00      	nop
 8004290:	3714      	adds	r7, #20
 8004292:	46bd      	mov	sp, r7
 8004294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004298:	4770      	bx	lr
	...

0800429c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800429c:	b480      	push	{r7}
 800429e:	b087      	sub	sp, #28
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
 80042a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80042a6:	2300      	movs	r3, #0
 80042a8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80042aa:	e148      	b.n	800453e <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80042ac:	683b      	ldr	r3, [r7, #0]
 80042ae:	681a      	ldr	r2, [r3, #0]
 80042b0:	2101      	movs	r1, #1
 80042b2:	697b      	ldr	r3, [r7, #20]
 80042b4:	fa01 f303 	lsl.w	r3, r1, r3
 80042b8:	4013      	ands	r3, r2
 80042ba:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	f000 813a 	beq.w	8004538 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	685b      	ldr	r3, [r3, #4]
 80042c8:	f003 0303 	and.w	r3, r3, #3
 80042cc:	2b01      	cmp	r3, #1
 80042ce:	d005      	beq.n	80042dc <HAL_GPIO_Init+0x40>
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	685b      	ldr	r3, [r3, #4]
 80042d4:	f003 0303 	and.w	r3, r3, #3
 80042d8:	2b02      	cmp	r3, #2
 80042da:	d130      	bne.n	800433e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	689b      	ldr	r3, [r3, #8]
 80042e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80042e2:	697b      	ldr	r3, [r7, #20]
 80042e4:	005b      	lsls	r3, r3, #1
 80042e6:	2203      	movs	r2, #3
 80042e8:	fa02 f303 	lsl.w	r3, r2, r3
 80042ec:	43db      	mvns	r3, r3
 80042ee:	693a      	ldr	r2, [r7, #16]
 80042f0:	4013      	ands	r3, r2
 80042f2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80042f4:	683b      	ldr	r3, [r7, #0]
 80042f6:	68da      	ldr	r2, [r3, #12]
 80042f8:	697b      	ldr	r3, [r7, #20]
 80042fa:	005b      	lsls	r3, r3, #1
 80042fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004300:	693a      	ldr	r2, [r7, #16]
 8004302:	4313      	orrs	r3, r2
 8004304:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	693a      	ldr	r2, [r7, #16]
 800430a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	685b      	ldr	r3, [r3, #4]
 8004310:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004312:	2201      	movs	r2, #1
 8004314:	697b      	ldr	r3, [r7, #20]
 8004316:	fa02 f303 	lsl.w	r3, r2, r3
 800431a:	43db      	mvns	r3, r3
 800431c:	693a      	ldr	r2, [r7, #16]
 800431e:	4013      	ands	r3, r2
 8004320:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004322:	683b      	ldr	r3, [r7, #0]
 8004324:	685b      	ldr	r3, [r3, #4]
 8004326:	091b      	lsrs	r3, r3, #4
 8004328:	f003 0201 	and.w	r2, r3, #1
 800432c:	697b      	ldr	r3, [r7, #20]
 800432e:	fa02 f303 	lsl.w	r3, r2, r3
 8004332:	693a      	ldr	r2, [r7, #16]
 8004334:	4313      	orrs	r3, r2
 8004336:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	693a      	ldr	r2, [r7, #16]
 800433c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	685b      	ldr	r3, [r3, #4]
 8004342:	f003 0303 	and.w	r3, r3, #3
 8004346:	2b03      	cmp	r3, #3
 8004348:	d017      	beq.n	800437a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	68db      	ldr	r3, [r3, #12]
 800434e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004350:	697b      	ldr	r3, [r7, #20]
 8004352:	005b      	lsls	r3, r3, #1
 8004354:	2203      	movs	r2, #3
 8004356:	fa02 f303 	lsl.w	r3, r2, r3
 800435a:	43db      	mvns	r3, r3
 800435c:	693a      	ldr	r2, [r7, #16]
 800435e:	4013      	ands	r3, r2
 8004360:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	689a      	ldr	r2, [r3, #8]
 8004366:	697b      	ldr	r3, [r7, #20]
 8004368:	005b      	lsls	r3, r3, #1
 800436a:	fa02 f303 	lsl.w	r3, r2, r3
 800436e:	693a      	ldr	r2, [r7, #16]
 8004370:	4313      	orrs	r3, r2
 8004372:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	693a      	ldr	r2, [r7, #16]
 8004378:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800437a:	683b      	ldr	r3, [r7, #0]
 800437c:	685b      	ldr	r3, [r3, #4]
 800437e:	f003 0303 	and.w	r3, r3, #3
 8004382:	2b02      	cmp	r3, #2
 8004384:	d123      	bne.n	80043ce <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004386:	697b      	ldr	r3, [r7, #20]
 8004388:	08da      	lsrs	r2, r3, #3
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	3208      	adds	r2, #8
 800438e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004392:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004394:	697b      	ldr	r3, [r7, #20]
 8004396:	f003 0307 	and.w	r3, r3, #7
 800439a:	009b      	lsls	r3, r3, #2
 800439c:	220f      	movs	r2, #15
 800439e:	fa02 f303 	lsl.w	r3, r2, r3
 80043a2:	43db      	mvns	r3, r3
 80043a4:	693a      	ldr	r2, [r7, #16]
 80043a6:	4013      	ands	r3, r2
 80043a8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80043aa:	683b      	ldr	r3, [r7, #0]
 80043ac:	691a      	ldr	r2, [r3, #16]
 80043ae:	697b      	ldr	r3, [r7, #20]
 80043b0:	f003 0307 	and.w	r3, r3, #7
 80043b4:	009b      	lsls	r3, r3, #2
 80043b6:	fa02 f303 	lsl.w	r3, r2, r3
 80043ba:	693a      	ldr	r2, [r7, #16]
 80043bc:	4313      	orrs	r3, r2
 80043be:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80043c0:	697b      	ldr	r3, [r7, #20]
 80043c2:	08da      	lsrs	r2, r3, #3
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	3208      	adds	r2, #8
 80043c8:	6939      	ldr	r1, [r7, #16]
 80043ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80043d4:	697b      	ldr	r3, [r7, #20]
 80043d6:	005b      	lsls	r3, r3, #1
 80043d8:	2203      	movs	r2, #3
 80043da:	fa02 f303 	lsl.w	r3, r2, r3
 80043de:	43db      	mvns	r3, r3
 80043e0:	693a      	ldr	r2, [r7, #16]
 80043e2:	4013      	ands	r3, r2
 80043e4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80043e6:	683b      	ldr	r3, [r7, #0]
 80043e8:	685b      	ldr	r3, [r3, #4]
 80043ea:	f003 0203 	and.w	r2, r3, #3
 80043ee:	697b      	ldr	r3, [r7, #20]
 80043f0:	005b      	lsls	r3, r3, #1
 80043f2:	fa02 f303 	lsl.w	r3, r2, r3
 80043f6:	693a      	ldr	r2, [r7, #16]
 80043f8:	4313      	orrs	r3, r2
 80043fa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	693a      	ldr	r2, [r7, #16]
 8004400:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004402:	683b      	ldr	r3, [r7, #0]
 8004404:	685b      	ldr	r3, [r3, #4]
 8004406:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800440a:	2b00      	cmp	r3, #0
 800440c:	f000 8094 	beq.w	8004538 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004410:	4b52      	ldr	r3, [pc, #328]	@ (800455c <HAL_GPIO_Init+0x2c0>)
 8004412:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004414:	4a51      	ldr	r2, [pc, #324]	@ (800455c <HAL_GPIO_Init+0x2c0>)
 8004416:	f043 0301 	orr.w	r3, r3, #1
 800441a:	6613      	str	r3, [r2, #96]	@ 0x60
 800441c:	4b4f      	ldr	r3, [pc, #316]	@ (800455c <HAL_GPIO_Init+0x2c0>)
 800441e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004420:	f003 0301 	and.w	r3, r3, #1
 8004424:	60bb      	str	r3, [r7, #8]
 8004426:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004428:	4a4d      	ldr	r2, [pc, #308]	@ (8004560 <HAL_GPIO_Init+0x2c4>)
 800442a:	697b      	ldr	r3, [r7, #20]
 800442c:	089b      	lsrs	r3, r3, #2
 800442e:	3302      	adds	r3, #2
 8004430:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004434:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004436:	697b      	ldr	r3, [r7, #20]
 8004438:	f003 0303 	and.w	r3, r3, #3
 800443c:	009b      	lsls	r3, r3, #2
 800443e:	220f      	movs	r2, #15
 8004440:	fa02 f303 	lsl.w	r3, r2, r3
 8004444:	43db      	mvns	r3, r3
 8004446:	693a      	ldr	r2, [r7, #16]
 8004448:	4013      	ands	r3, r2
 800444a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8004452:	d00d      	beq.n	8004470 <HAL_GPIO_Init+0x1d4>
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	4a43      	ldr	r2, [pc, #268]	@ (8004564 <HAL_GPIO_Init+0x2c8>)
 8004458:	4293      	cmp	r3, r2
 800445a:	d007      	beq.n	800446c <HAL_GPIO_Init+0x1d0>
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	4a42      	ldr	r2, [pc, #264]	@ (8004568 <HAL_GPIO_Init+0x2cc>)
 8004460:	4293      	cmp	r3, r2
 8004462:	d101      	bne.n	8004468 <HAL_GPIO_Init+0x1cc>
 8004464:	2302      	movs	r3, #2
 8004466:	e004      	b.n	8004472 <HAL_GPIO_Init+0x1d6>
 8004468:	2307      	movs	r3, #7
 800446a:	e002      	b.n	8004472 <HAL_GPIO_Init+0x1d6>
 800446c:	2301      	movs	r3, #1
 800446e:	e000      	b.n	8004472 <HAL_GPIO_Init+0x1d6>
 8004470:	2300      	movs	r3, #0
 8004472:	697a      	ldr	r2, [r7, #20]
 8004474:	f002 0203 	and.w	r2, r2, #3
 8004478:	0092      	lsls	r2, r2, #2
 800447a:	4093      	lsls	r3, r2
 800447c:	693a      	ldr	r2, [r7, #16]
 800447e:	4313      	orrs	r3, r2
 8004480:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004482:	4937      	ldr	r1, [pc, #220]	@ (8004560 <HAL_GPIO_Init+0x2c4>)
 8004484:	697b      	ldr	r3, [r7, #20]
 8004486:	089b      	lsrs	r3, r3, #2
 8004488:	3302      	adds	r3, #2
 800448a:	693a      	ldr	r2, [r7, #16]
 800448c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004490:	4b36      	ldr	r3, [pc, #216]	@ (800456c <HAL_GPIO_Init+0x2d0>)
 8004492:	689b      	ldr	r3, [r3, #8]
 8004494:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	43db      	mvns	r3, r3
 800449a:	693a      	ldr	r2, [r7, #16]
 800449c:	4013      	ands	r3, r2
 800449e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	685b      	ldr	r3, [r3, #4]
 80044a4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d003      	beq.n	80044b4 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 80044ac:	693a      	ldr	r2, [r7, #16]
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	4313      	orrs	r3, r2
 80044b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80044b4:	4a2d      	ldr	r2, [pc, #180]	@ (800456c <HAL_GPIO_Init+0x2d0>)
 80044b6:	693b      	ldr	r3, [r7, #16]
 80044b8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80044ba:	4b2c      	ldr	r3, [pc, #176]	@ (800456c <HAL_GPIO_Init+0x2d0>)
 80044bc:	68db      	ldr	r3, [r3, #12]
 80044be:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	43db      	mvns	r3, r3
 80044c4:	693a      	ldr	r2, [r7, #16]
 80044c6:	4013      	ands	r3, r2
 80044c8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	685b      	ldr	r3, [r3, #4]
 80044ce:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d003      	beq.n	80044de <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 80044d6:	693a      	ldr	r2, [r7, #16]
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	4313      	orrs	r3, r2
 80044dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80044de:	4a23      	ldr	r2, [pc, #140]	@ (800456c <HAL_GPIO_Init+0x2d0>)
 80044e0:	693b      	ldr	r3, [r7, #16]
 80044e2:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80044e4:	4b21      	ldr	r3, [pc, #132]	@ (800456c <HAL_GPIO_Init+0x2d0>)
 80044e6:	685b      	ldr	r3, [r3, #4]
 80044e8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	43db      	mvns	r3, r3
 80044ee:	693a      	ldr	r2, [r7, #16]
 80044f0:	4013      	ands	r3, r2
 80044f2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80044f4:	683b      	ldr	r3, [r7, #0]
 80044f6:	685b      	ldr	r3, [r3, #4]
 80044f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d003      	beq.n	8004508 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8004500:	693a      	ldr	r2, [r7, #16]
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	4313      	orrs	r3, r2
 8004506:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004508:	4a18      	ldr	r2, [pc, #96]	@ (800456c <HAL_GPIO_Init+0x2d0>)
 800450a:	693b      	ldr	r3, [r7, #16]
 800450c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800450e:	4b17      	ldr	r3, [pc, #92]	@ (800456c <HAL_GPIO_Init+0x2d0>)
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	43db      	mvns	r3, r3
 8004518:	693a      	ldr	r2, [r7, #16]
 800451a:	4013      	ands	r3, r2
 800451c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800451e:	683b      	ldr	r3, [r7, #0]
 8004520:	685b      	ldr	r3, [r3, #4]
 8004522:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004526:	2b00      	cmp	r3, #0
 8004528:	d003      	beq.n	8004532 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 800452a:	693a      	ldr	r2, [r7, #16]
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	4313      	orrs	r3, r2
 8004530:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004532:	4a0e      	ldr	r2, [pc, #56]	@ (800456c <HAL_GPIO_Init+0x2d0>)
 8004534:	693b      	ldr	r3, [r7, #16]
 8004536:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004538:	697b      	ldr	r3, [r7, #20]
 800453a:	3301      	adds	r3, #1
 800453c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800453e:	683b      	ldr	r3, [r7, #0]
 8004540:	681a      	ldr	r2, [r3, #0]
 8004542:	697b      	ldr	r3, [r7, #20]
 8004544:	fa22 f303 	lsr.w	r3, r2, r3
 8004548:	2b00      	cmp	r3, #0
 800454a:	f47f aeaf 	bne.w	80042ac <HAL_GPIO_Init+0x10>
  }
}
 800454e:	bf00      	nop
 8004550:	bf00      	nop
 8004552:	371c      	adds	r7, #28
 8004554:	46bd      	mov	sp, r7
 8004556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455a:	4770      	bx	lr
 800455c:	40021000 	.word	0x40021000
 8004560:	40010000 	.word	0x40010000
 8004564:	48000400 	.word	0x48000400
 8004568:	48000800 	.word	0x48000800
 800456c:	40010400 	.word	0x40010400

08004570 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004570:	b480      	push	{r7}
 8004572:	b085      	sub	sp, #20
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
 8004578:	460b      	mov	r3, r1
 800457a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	691a      	ldr	r2, [r3, #16]
 8004580:	887b      	ldrh	r3, [r7, #2]
 8004582:	4013      	ands	r3, r2
 8004584:	2b00      	cmp	r3, #0
 8004586:	d002      	beq.n	800458e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004588:	2301      	movs	r3, #1
 800458a:	73fb      	strb	r3, [r7, #15]
 800458c:	e001      	b.n	8004592 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800458e:	2300      	movs	r3, #0
 8004590:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004592:	7bfb      	ldrb	r3, [r7, #15]
}
 8004594:	4618      	mov	r0, r3
 8004596:	3714      	adds	r7, #20
 8004598:	46bd      	mov	sp, r7
 800459a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459e:	4770      	bx	lr

080045a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80045a0:	b480      	push	{r7}
 80045a2:	b083      	sub	sp, #12
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]
 80045a8:	460b      	mov	r3, r1
 80045aa:	807b      	strh	r3, [r7, #2]
 80045ac:	4613      	mov	r3, r2
 80045ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80045b0:	787b      	ldrb	r3, [r7, #1]
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d003      	beq.n	80045be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80045b6:	887a      	ldrh	r2, [r7, #2]
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80045bc:	e002      	b.n	80045c4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80045be:	887a      	ldrh	r2, [r7, #2]
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80045c4:	bf00      	nop
 80045c6:	370c      	adds	r7, #12
 80045c8:	46bd      	mov	sp, r7
 80045ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ce:	4770      	bx	lr

080045d0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80045d0:	b480      	push	{r7}
 80045d2:	b085      	sub	sp, #20
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
 80045d8:	460b      	mov	r3, r1
 80045da:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	695b      	ldr	r3, [r3, #20]
 80045e0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80045e2:	887a      	ldrh	r2, [r7, #2]
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	4013      	ands	r3, r2
 80045e8:	041a      	lsls	r2, r3, #16
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	43d9      	mvns	r1, r3
 80045ee:	887b      	ldrh	r3, [r7, #2]
 80045f0:	400b      	ands	r3, r1
 80045f2:	431a      	orrs	r2, r3
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	619a      	str	r2, [r3, #24]
}
 80045f8:	bf00      	nop
 80045fa:	3714      	adds	r7, #20
 80045fc:	46bd      	mov	sp, r7
 80045fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004602:	4770      	bx	lr

08004604 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004604:	b580      	push	{r7, lr}
 8004606:	b082      	sub	sp, #8
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2b00      	cmp	r3, #0
 8004610:	d101      	bne.n	8004616 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004612:	2301      	movs	r3, #1
 8004614:	e08d      	b.n	8004732 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800461c:	b2db      	uxtb	r3, r3
 800461e:	2b00      	cmp	r3, #0
 8004620:	d106      	bne.n	8004630 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	2200      	movs	r2, #0
 8004626:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800462a:	6878      	ldr	r0, [r7, #4]
 800462c:	f7fe f808 	bl	8002640 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2224      	movs	r2, #36	@ 0x24
 8004634:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	681a      	ldr	r2, [r3, #0]
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f022 0201 	bic.w	r2, r2, #1
 8004646:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	685a      	ldr	r2, [r3, #4]
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004654:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	689a      	ldr	r2, [r3, #8]
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004664:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	68db      	ldr	r3, [r3, #12]
 800466a:	2b01      	cmp	r3, #1
 800466c:	d107      	bne.n	800467e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	689a      	ldr	r2, [r3, #8]
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800467a:	609a      	str	r2, [r3, #8]
 800467c:	e006      	b.n	800468c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	689a      	ldr	r2, [r3, #8]
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800468a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	68db      	ldr	r3, [r3, #12]
 8004690:	2b02      	cmp	r3, #2
 8004692:	d108      	bne.n	80046a6 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	685a      	ldr	r2, [r3, #4]
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80046a2:	605a      	str	r2, [r3, #4]
 80046a4:	e007      	b.n	80046b6 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	685a      	ldr	r2, [r3, #4]
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80046b4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	685b      	ldr	r3, [r3, #4]
 80046bc:	687a      	ldr	r2, [r7, #4]
 80046be:	6812      	ldr	r2, [r2, #0]
 80046c0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80046c4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80046c8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	68da      	ldr	r2, [r3, #12]
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80046d8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	691a      	ldr	r2, [r3, #16]
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	695b      	ldr	r3, [r3, #20]
 80046e2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	699b      	ldr	r3, [r3, #24]
 80046ea:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	430a      	orrs	r2, r1
 80046f2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	69d9      	ldr	r1, [r3, #28]
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	6a1a      	ldr	r2, [r3, #32]
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	430a      	orrs	r2, r1
 8004702:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	681a      	ldr	r2, [r3, #0]
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f042 0201 	orr.w	r2, r2, #1
 8004712:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2200      	movs	r2, #0
 8004718:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	2220      	movs	r2, #32
 800471e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	2200      	movs	r2, #0
 8004726:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2200      	movs	r2, #0
 800472c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8004730:	2300      	movs	r3, #0
}
 8004732:	4618      	mov	r0, r3
 8004734:	3708      	adds	r7, #8
 8004736:	46bd      	mov	sp, r7
 8004738:	bd80      	pop	{r7, pc}
	...

0800473c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800473c:	b580      	push	{r7, lr}
 800473e:	b088      	sub	sp, #32
 8004740:	af02      	add	r7, sp, #8
 8004742:	60f8      	str	r0, [r7, #12]
 8004744:	4608      	mov	r0, r1
 8004746:	4611      	mov	r1, r2
 8004748:	461a      	mov	r2, r3
 800474a:	4603      	mov	r3, r0
 800474c:	817b      	strh	r3, [r7, #10]
 800474e:	460b      	mov	r3, r1
 8004750:	813b      	strh	r3, [r7, #8]
 8004752:	4613      	mov	r3, r2
 8004754:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800475c:	b2db      	uxtb	r3, r3
 800475e:	2b20      	cmp	r3, #32
 8004760:	f040 80f9 	bne.w	8004956 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004764:	6a3b      	ldr	r3, [r7, #32]
 8004766:	2b00      	cmp	r3, #0
 8004768:	d002      	beq.n	8004770 <HAL_I2C_Mem_Write+0x34>
 800476a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800476c:	2b00      	cmp	r3, #0
 800476e:	d105      	bne.n	800477c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004776:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8004778:	2301      	movs	r3, #1
 800477a:	e0ed      	b.n	8004958 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004782:	2b01      	cmp	r3, #1
 8004784:	d101      	bne.n	800478a <HAL_I2C_Mem_Write+0x4e>
 8004786:	2302      	movs	r3, #2
 8004788:	e0e6      	b.n	8004958 <HAL_I2C_Mem_Write+0x21c>
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	2201      	movs	r2, #1
 800478e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004792:	f7fe f98b 	bl	8002aac <HAL_GetTick>
 8004796:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004798:	697b      	ldr	r3, [r7, #20]
 800479a:	9300      	str	r3, [sp, #0]
 800479c:	2319      	movs	r3, #25
 800479e:	2201      	movs	r2, #1
 80047a0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80047a4:	68f8      	ldr	r0, [r7, #12]
 80047a6:	f000 fac3 	bl	8004d30 <I2C_WaitOnFlagUntilTimeout>
 80047aa:	4603      	mov	r3, r0
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d001      	beq.n	80047b4 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80047b0:	2301      	movs	r3, #1
 80047b2:	e0d1      	b.n	8004958 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	2221      	movs	r2, #33	@ 0x21
 80047b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	2240      	movs	r2, #64	@ 0x40
 80047c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	2200      	movs	r2, #0
 80047c8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	6a3a      	ldr	r2, [r7, #32]
 80047ce:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80047d4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	2200      	movs	r2, #0
 80047da:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80047dc:	88f8      	ldrh	r0, [r7, #6]
 80047de:	893a      	ldrh	r2, [r7, #8]
 80047e0:	8979      	ldrh	r1, [r7, #10]
 80047e2:	697b      	ldr	r3, [r7, #20]
 80047e4:	9301      	str	r3, [sp, #4]
 80047e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047e8:	9300      	str	r3, [sp, #0]
 80047ea:	4603      	mov	r3, r0
 80047ec:	68f8      	ldr	r0, [r7, #12]
 80047ee:	f000 f9d3 	bl	8004b98 <I2C_RequestMemoryWrite>
 80047f2:	4603      	mov	r3, r0
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d005      	beq.n	8004804 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	2200      	movs	r2, #0
 80047fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8004800:	2301      	movs	r3, #1
 8004802:	e0a9      	b.n	8004958 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004808:	b29b      	uxth	r3, r3
 800480a:	2bff      	cmp	r3, #255	@ 0xff
 800480c:	d90e      	bls.n	800482c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	22ff      	movs	r2, #255	@ 0xff
 8004812:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004818:	b2da      	uxtb	r2, r3
 800481a:	8979      	ldrh	r1, [r7, #10]
 800481c:	2300      	movs	r3, #0
 800481e:	9300      	str	r3, [sp, #0]
 8004820:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004824:	68f8      	ldr	r0, [r7, #12]
 8004826:	f000 fc47 	bl	80050b8 <I2C_TransferConfig>
 800482a:	e00f      	b.n	800484c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004830:	b29a      	uxth	r2, r3
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800483a:	b2da      	uxtb	r2, r3
 800483c:	8979      	ldrh	r1, [r7, #10]
 800483e:	2300      	movs	r3, #0
 8004840:	9300      	str	r3, [sp, #0]
 8004842:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004846:	68f8      	ldr	r0, [r7, #12]
 8004848:	f000 fc36 	bl	80050b8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800484c:	697a      	ldr	r2, [r7, #20]
 800484e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004850:	68f8      	ldr	r0, [r7, #12]
 8004852:	f000 fac6 	bl	8004de2 <I2C_WaitOnTXISFlagUntilTimeout>
 8004856:	4603      	mov	r3, r0
 8004858:	2b00      	cmp	r3, #0
 800485a:	d001      	beq.n	8004860 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800485c:	2301      	movs	r3, #1
 800485e:	e07b      	b.n	8004958 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004864:	781a      	ldrb	r2, [r3, #0]
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004870:	1c5a      	adds	r2, r3, #1
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800487a:	b29b      	uxth	r3, r3
 800487c:	3b01      	subs	r3, #1
 800487e:	b29a      	uxth	r2, r3
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004888:	3b01      	subs	r3, #1
 800488a:	b29a      	uxth	r2, r3
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004894:	b29b      	uxth	r3, r3
 8004896:	2b00      	cmp	r3, #0
 8004898:	d034      	beq.n	8004904 <HAL_I2C_Mem_Write+0x1c8>
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d130      	bne.n	8004904 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80048a2:	697b      	ldr	r3, [r7, #20]
 80048a4:	9300      	str	r3, [sp, #0]
 80048a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048a8:	2200      	movs	r2, #0
 80048aa:	2180      	movs	r1, #128	@ 0x80
 80048ac:	68f8      	ldr	r0, [r7, #12]
 80048ae:	f000 fa3f 	bl	8004d30 <I2C_WaitOnFlagUntilTimeout>
 80048b2:	4603      	mov	r3, r0
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d001      	beq.n	80048bc <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80048b8:	2301      	movs	r3, #1
 80048ba:	e04d      	b.n	8004958 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80048c0:	b29b      	uxth	r3, r3
 80048c2:	2bff      	cmp	r3, #255	@ 0xff
 80048c4:	d90e      	bls.n	80048e4 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	22ff      	movs	r2, #255	@ 0xff
 80048ca:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80048d0:	b2da      	uxtb	r2, r3
 80048d2:	8979      	ldrh	r1, [r7, #10]
 80048d4:	2300      	movs	r3, #0
 80048d6:	9300      	str	r3, [sp, #0]
 80048d8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80048dc:	68f8      	ldr	r0, [r7, #12]
 80048de:	f000 fbeb 	bl	80050b8 <I2C_TransferConfig>
 80048e2:	e00f      	b.n	8004904 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80048e8:	b29a      	uxth	r2, r3
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80048f2:	b2da      	uxtb	r2, r3
 80048f4:	8979      	ldrh	r1, [r7, #10]
 80048f6:	2300      	movs	r3, #0
 80048f8:	9300      	str	r3, [sp, #0]
 80048fa:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80048fe:	68f8      	ldr	r0, [r7, #12]
 8004900:	f000 fbda 	bl	80050b8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004908:	b29b      	uxth	r3, r3
 800490a:	2b00      	cmp	r3, #0
 800490c:	d19e      	bne.n	800484c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800490e:	697a      	ldr	r2, [r7, #20]
 8004910:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004912:	68f8      	ldr	r0, [r7, #12]
 8004914:	f000 faac 	bl	8004e70 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004918:	4603      	mov	r3, r0
 800491a:	2b00      	cmp	r3, #0
 800491c:	d001      	beq.n	8004922 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800491e:	2301      	movs	r3, #1
 8004920:	e01a      	b.n	8004958 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	2220      	movs	r2, #32
 8004928:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	6859      	ldr	r1, [r3, #4]
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	681a      	ldr	r2, [r3, #0]
 8004934:	4b0a      	ldr	r3, [pc, #40]	@ (8004960 <HAL_I2C_Mem_Write+0x224>)
 8004936:	400b      	ands	r3, r1
 8004938:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	2220      	movs	r2, #32
 800493e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	2200      	movs	r2, #0
 8004946:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	2200      	movs	r2, #0
 800494e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004952:	2300      	movs	r3, #0
 8004954:	e000      	b.n	8004958 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8004956:	2302      	movs	r3, #2
  }
}
 8004958:	4618      	mov	r0, r3
 800495a:	3718      	adds	r7, #24
 800495c:	46bd      	mov	sp, r7
 800495e:	bd80      	pop	{r7, pc}
 8004960:	fe00e800 	.word	0xfe00e800

08004964 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004964:	b580      	push	{r7, lr}
 8004966:	b088      	sub	sp, #32
 8004968:	af02      	add	r7, sp, #8
 800496a:	60f8      	str	r0, [r7, #12]
 800496c:	4608      	mov	r0, r1
 800496e:	4611      	mov	r1, r2
 8004970:	461a      	mov	r2, r3
 8004972:	4603      	mov	r3, r0
 8004974:	817b      	strh	r3, [r7, #10]
 8004976:	460b      	mov	r3, r1
 8004978:	813b      	strh	r3, [r7, #8]
 800497a:	4613      	mov	r3, r2
 800497c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004984:	b2db      	uxtb	r3, r3
 8004986:	2b20      	cmp	r3, #32
 8004988:	f040 80fd 	bne.w	8004b86 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800498c:	6a3b      	ldr	r3, [r7, #32]
 800498e:	2b00      	cmp	r3, #0
 8004990:	d002      	beq.n	8004998 <HAL_I2C_Mem_Read+0x34>
 8004992:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004994:	2b00      	cmp	r3, #0
 8004996:	d105      	bne.n	80049a4 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800499e:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80049a0:	2301      	movs	r3, #1
 80049a2:	e0f1      	b.n	8004b88 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80049aa:	2b01      	cmp	r3, #1
 80049ac:	d101      	bne.n	80049b2 <HAL_I2C_Mem_Read+0x4e>
 80049ae:	2302      	movs	r3, #2
 80049b0:	e0ea      	b.n	8004b88 <HAL_I2C_Mem_Read+0x224>
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	2201      	movs	r2, #1
 80049b6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80049ba:	f7fe f877 	bl	8002aac <HAL_GetTick>
 80049be:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80049c0:	697b      	ldr	r3, [r7, #20]
 80049c2:	9300      	str	r3, [sp, #0]
 80049c4:	2319      	movs	r3, #25
 80049c6:	2201      	movs	r2, #1
 80049c8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80049cc:	68f8      	ldr	r0, [r7, #12]
 80049ce:	f000 f9af 	bl	8004d30 <I2C_WaitOnFlagUntilTimeout>
 80049d2:	4603      	mov	r3, r0
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d001      	beq.n	80049dc <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80049d8:	2301      	movs	r3, #1
 80049da:	e0d5      	b.n	8004b88 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	2222      	movs	r2, #34	@ 0x22
 80049e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	2240      	movs	r2, #64	@ 0x40
 80049e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	2200      	movs	r2, #0
 80049f0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	6a3a      	ldr	r2, [r7, #32]
 80049f6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80049fc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	2200      	movs	r2, #0
 8004a02:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004a04:	88f8      	ldrh	r0, [r7, #6]
 8004a06:	893a      	ldrh	r2, [r7, #8]
 8004a08:	8979      	ldrh	r1, [r7, #10]
 8004a0a:	697b      	ldr	r3, [r7, #20]
 8004a0c:	9301      	str	r3, [sp, #4]
 8004a0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a10:	9300      	str	r3, [sp, #0]
 8004a12:	4603      	mov	r3, r0
 8004a14:	68f8      	ldr	r0, [r7, #12]
 8004a16:	f000 f913 	bl	8004c40 <I2C_RequestMemoryRead>
 8004a1a:	4603      	mov	r3, r0
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d005      	beq.n	8004a2c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	2200      	movs	r2, #0
 8004a24:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8004a28:	2301      	movs	r3, #1
 8004a2a:	e0ad      	b.n	8004b88 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a30:	b29b      	uxth	r3, r3
 8004a32:	2bff      	cmp	r3, #255	@ 0xff
 8004a34:	d90e      	bls.n	8004a54 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	2201      	movs	r2, #1
 8004a3a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a40:	b2da      	uxtb	r2, r3
 8004a42:	8979      	ldrh	r1, [r7, #10]
 8004a44:	4b52      	ldr	r3, [pc, #328]	@ (8004b90 <HAL_I2C_Mem_Read+0x22c>)
 8004a46:	9300      	str	r3, [sp, #0]
 8004a48:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004a4c:	68f8      	ldr	r0, [r7, #12]
 8004a4e:	f000 fb33 	bl	80050b8 <I2C_TransferConfig>
 8004a52:	e00f      	b.n	8004a74 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a58:	b29a      	uxth	r2, r3
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a62:	b2da      	uxtb	r2, r3
 8004a64:	8979      	ldrh	r1, [r7, #10]
 8004a66:	4b4a      	ldr	r3, [pc, #296]	@ (8004b90 <HAL_I2C_Mem_Read+0x22c>)
 8004a68:	9300      	str	r3, [sp, #0]
 8004a6a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004a6e:	68f8      	ldr	r0, [r7, #12]
 8004a70:	f000 fb22 	bl	80050b8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8004a74:	697b      	ldr	r3, [r7, #20]
 8004a76:	9300      	str	r3, [sp, #0]
 8004a78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a7a:	2200      	movs	r2, #0
 8004a7c:	2104      	movs	r1, #4
 8004a7e:	68f8      	ldr	r0, [r7, #12]
 8004a80:	f000 f956 	bl	8004d30 <I2C_WaitOnFlagUntilTimeout>
 8004a84:	4603      	mov	r3, r0
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d001      	beq.n	8004a8e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8004a8a:	2301      	movs	r3, #1
 8004a8c:	e07c      	b.n	8004b88 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a98:	b2d2      	uxtb	r2, r2
 8004a9a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004aa0:	1c5a      	adds	r2, r3, #1
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004aaa:	3b01      	subs	r3, #1
 8004aac:	b29a      	uxth	r2, r3
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ab6:	b29b      	uxth	r3, r3
 8004ab8:	3b01      	subs	r3, #1
 8004aba:	b29a      	uxth	r2, r3
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ac4:	b29b      	uxth	r3, r3
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d034      	beq.n	8004b34 <HAL_I2C_Mem_Read+0x1d0>
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d130      	bne.n	8004b34 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004ad2:	697b      	ldr	r3, [r7, #20]
 8004ad4:	9300      	str	r3, [sp, #0]
 8004ad6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ad8:	2200      	movs	r2, #0
 8004ada:	2180      	movs	r1, #128	@ 0x80
 8004adc:	68f8      	ldr	r0, [r7, #12]
 8004ade:	f000 f927 	bl	8004d30 <I2C_WaitOnFlagUntilTimeout>
 8004ae2:	4603      	mov	r3, r0
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d001      	beq.n	8004aec <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8004ae8:	2301      	movs	r3, #1
 8004aea:	e04d      	b.n	8004b88 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004af0:	b29b      	uxth	r3, r3
 8004af2:	2bff      	cmp	r3, #255	@ 0xff
 8004af4:	d90e      	bls.n	8004b14 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	2201      	movs	r2, #1
 8004afa:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b00:	b2da      	uxtb	r2, r3
 8004b02:	8979      	ldrh	r1, [r7, #10]
 8004b04:	2300      	movs	r3, #0
 8004b06:	9300      	str	r3, [sp, #0]
 8004b08:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004b0c:	68f8      	ldr	r0, [r7, #12]
 8004b0e:	f000 fad3 	bl	80050b8 <I2C_TransferConfig>
 8004b12:	e00f      	b.n	8004b34 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b18:	b29a      	uxth	r2, r3
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b22:	b2da      	uxtb	r2, r3
 8004b24:	8979      	ldrh	r1, [r7, #10]
 8004b26:	2300      	movs	r3, #0
 8004b28:	9300      	str	r3, [sp, #0]
 8004b2a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004b2e:	68f8      	ldr	r0, [r7, #12]
 8004b30:	f000 fac2 	bl	80050b8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b38:	b29b      	uxth	r3, r3
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d19a      	bne.n	8004a74 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004b3e:	697a      	ldr	r2, [r7, #20]
 8004b40:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004b42:	68f8      	ldr	r0, [r7, #12]
 8004b44:	f000 f994 	bl	8004e70 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004b48:	4603      	mov	r3, r0
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d001      	beq.n	8004b52 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8004b4e:	2301      	movs	r3, #1
 8004b50:	e01a      	b.n	8004b88 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	2220      	movs	r2, #32
 8004b58:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	6859      	ldr	r1, [r3, #4]
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	681a      	ldr	r2, [r3, #0]
 8004b64:	4b0b      	ldr	r3, [pc, #44]	@ (8004b94 <HAL_I2C_Mem_Read+0x230>)
 8004b66:	400b      	ands	r3, r1
 8004b68:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	2220      	movs	r2, #32
 8004b6e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	2200      	movs	r2, #0
 8004b76:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004b82:	2300      	movs	r3, #0
 8004b84:	e000      	b.n	8004b88 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8004b86:	2302      	movs	r3, #2
  }
}
 8004b88:	4618      	mov	r0, r3
 8004b8a:	3718      	adds	r7, #24
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	bd80      	pop	{r7, pc}
 8004b90:	80002400 	.word	0x80002400
 8004b94:	fe00e800 	.word	0xfe00e800

08004b98 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	b086      	sub	sp, #24
 8004b9c:	af02      	add	r7, sp, #8
 8004b9e:	60f8      	str	r0, [r7, #12]
 8004ba0:	4608      	mov	r0, r1
 8004ba2:	4611      	mov	r1, r2
 8004ba4:	461a      	mov	r2, r3
 8004ba6:	4603      	mov	r3, r0
 8004ba8:	817b      	strh	r3, [r7, #10]
 8004baa:	460b      	mov	r3, r1
 8004bac:	813b      	strh	r3, [r7, #8]
 8004bae:	4613      	mov	r3, r2
 8004bb0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8004bb2:	88fb      	ldrh	r3, [r7, #6]
 8004bb4:	b2da      	uxtb	r2, r3
 8004bb6:	8979      	ldrh	r1, [r7, #10]
 8004bb8:	4b20      	ldr	r3, [pc, #128]	@ (8004c3c <I2C_RequestMemoryWrite+0xa4>)
 8004bba:	9300      	str	r3, [sp, #0]
 8004bbc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004bc0:	68f8      	ldr	r0, [r7, #12]
 8004bc2:	f000 fa79 	bl	80050b8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004bc6:	69fa      	ldr	r2, [r7, #28]
 8004bc8:	69b9      	ldr	r1, [r7, #24]
 8004bca:	68f8      	ldr	r0, [r7, #12]
 8004bcc:	f000 f909 	bl	8004de2 <I2C_WaitOnTXISFlagUntilTimeout>
 8004bd0:	4603      	mov	r3, r0
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d001      	beq.n	8004bda <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8004bd6:	2301      	movs	r3, #1
 8004bd8:	e02c      	b.n	8004c34 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004bda:	88fb      	ldrh	r3, [r7, #6]
 8004bdc:	2b01      	cmp	r3, #1
 8004bde:	d105      	bne.n	8004bec <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004be0:	893b      	ldrh	r3, [r7, #8]
 8004be2:	b2da      	uxtb	r2, r3
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	629a      	str	r2, [r3, #40]	@ 0x28
 8004bea:	e015      	b.n	8004c18 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004bec:	893b      	ldrh	r3, [r7, #8]
 8004bee:	0a1b      	lsrs	r3, r3, #8
 8004bf0:	b29b      	uxth	r3, r3
 8004bf2:	b2da      	uxtb	r2, r3
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004bfa:	69fa      	ldr	r2, [r7, #28]
 8004bfc:	69b9      	ldr	r1, [r7, #24]
 8004bfe:	68f8      	ldr	r0, [r7, #12]
 8004c00:	f000 f8ef 	bl	8004de2 <I2C_WaitOnTXISFlagUntilTimeout>
 8004c04:	4603      	mov	r3, r0
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d001      	beq.n	8004c0e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8004c0a:	2301      	movs	r3, #1
 8004c0c:	e012      	b.n	8004c34 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004c0e:	893b      	ldrh	r3, [r7, #8]
 8004c10:	b2da      	uxtb	r2, r3
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8004c18:	69fb      	ldr	r3, [r7, #28]
 8004c1a:	9300      	str	r3, [sp, #0]
 8004c1c:	69bb      	ldr	r3, [r7, #24]
 8004c1e:	2200      	movs	r2, #0
 8004c20:	2180      	movs	r1, #128	@ 0x80
 8004c22:	68f8      	ldr	r0, [r7, #12]
 8004c24:	f000 f884 	bl	8004d30 <I2C_WaitOnFlagUntilTimeout>
 8004c28:	4603      	mov	r3, r0
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d001      	beq.n	8004c32 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8004c2e:	2301      	movs	r3, #1
 8004c30:	e000      	b.n	8004c34 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8004c32:	2300      	movs	r3, #0
}
 8004c34:	4618      	mov	r0, r3
 8004c36:	3710      	adds	r7, #16
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	bd80      	pop	{r7, pc}
 8004c3c:	80002000 	.word	0x80002000

08004c40 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8004c40:	b580      	push	{r7, lr}
 8004c42:	b086      	sub	sp, #24
 8004c44:	af02      	add	r7, sp, #8
 8004c46:	60f8      	str	r0, [r7, #12]
 8004c48:	4608      	mov	r0, r1
 8004c4a:	4611      	mov	r1, r2
 8004c4c:	461a      	mov	r2, r3
 8004c4e:	4603      	mov	r3, r0
 8004c50:	817b      	strh	r3, [r7, #10]
 8004c52:	460b      	mov	r3, r1
 8004c54:	813b      	strh	r3, [r7, #8]
 8004c56:	4613      	mov	r3, r2
 8004c58:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8004c5a:	88fb      	ldrh	r3, [r7, #6]
 8004c5c:	b2da      	uxtb	r2, r3
 8004c5e:	8979      	ldrh	r1, [r7, #10]
 8004c60:	4b20      	ldr	r3, [pc, #128]	@ (8004ce4 <I2C_RequestMemoryRead+0xa4>)
 8004c62:	9300      	str	r3, [sp, #0]
 8004c64:	2300      	movs	r3, #0
 8004c66:	68f8      	ldr	r0, [r7, #12]
 8004c68:	f000 fa26 	bl	80050b8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004c6c:	69fa      	ldr	r2, [r7, #28]
 8004c6e:	69b9      	ldr	r1, [r7, #24]
 8004c70:	68f8      	ldr	r0, [r7, #12]
 8004c72:	f000 f8b6 	bl	8004de2 <I2C_WaitOnTXISFlagUntilTimeout>
 8004c76:	4603      	mov	r3, r0
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d001      	beq.n	8004c80 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8004c7c:	2301      	movs	r3, #1
 8004c7e:	e02c      	b.n	8004cda <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004c80:	88fb      	ldrh	r3, [r7, #6]
 8004c82:	2b01      	cmp	r3, #1
 8004c84:	d105      	bne.n	8004c92 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004c86:	893b      	ldrh	r3, [r7, #8]
 8004c88:	b2da      	uxtb	r2, r3
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	629a      	str	r2, [r3, #40]	@ 0x28
 8004c90:	e015      	b.n	8004cbe <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004c92:	893b      	ldrh	r3, [r7, #8]
 8004c94:	0a1b      	lsrs	r3, r3, #8
 8004c96:	b29b      	uxth	r3, r3
 8004c98:	b2da      	uxtb	r2, r3
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004ca0:	69fa      	ldr	r2, [r7, #28]
 8004ca2:	69b9      	ldr	r1, [r7, #24]
 8004ca4:	68f8      	ldr	r0, [r7, #12]
 8004ca6:	f000 f89c 	bl	8004de2 <I2C_WaitOnTXISFlagUntilTimeout>
 8004caa:	4603      	mov	r3, r0
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d001      	beq.n	8004cb4 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8004cb0:	2301      	movs	r3, #1
 8004cb2:	e012      	b.n	8004cda <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004cb4:	893b      	ldrh	r3, [r7, #8]
 8004cb6:	b2da      	uxtb	r2, r3
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8004cbe:	69fb      	ldr	r3, [r7, #28]
 8004cc0:	9300      	str	r3, [sp, #0]
 8004cc2:	69bb      	ldr	r3, [r7, #24]
 8004cc4:	2200      	movs	r2, #0
 8004cc6:	2140      	movs	r1, #64	@ 0x40
 8004cc8:	68f8      	ldr	r0, [r7, #12]
 8004cca:	f000 f831 	bl	8004d30 <I2C_WaitOnFlagUntilTimeout>
 8004cce:	4603      	mov	r3, r0
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d001      	beq.n	8004cd8 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8004cd4:	2301      	movs	r3, #1
 8004cd6:	e000      	b.n	8004cda <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8004cd8:	2300      	movs	r3, #0
}
 8004cda:	4618      	mov	r0, r3
 8004cdc:	3710      	adds	r7, #16
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	bd80      	pop	{r7, pc}
 8004ce2:	bf00      	nop
 8004ce4:	80002000 	.word	0x80002000

08004ce8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004ce8:	b480      	push	{r7}
 8004cea:	b083      	sub	sp, #12
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	699b      	ldr	r3, [r3, #24]
 8004cf6:	f003 0302 	and.w	r3, r3, #2
 8004cfa:	2b02      	cmp	r3, #2
 8004cfc:	d103      	bne.n	8004d06 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	2200      	movs	r2, #0
 8004d04:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	699b      	ldr	r3, [r3, #24]
 8004d0c:	f003 0301 	and.w	r3, r3, #1
 8004d10:	2b01      	cmp	r3, #1
 8004d12:	d007      	beq.n	8004d24 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	699a      	ldr	r2, [r3, #24]
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f042 0201 	orr.w	r2, r2, #1
 8004d22:	619a      	str	r2, [r3, #24]
  }
}
 8004d24:	bf00      	nop
 8004d26:	370c      	adds	r7, #12
 8004d28:	46bd      	mov	sp, r7
 8004d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2e:	4770      	bx	lr

08004d30 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004d30:	b580      	push	{r7, lr}
 8004d32:	b084      	sub	sp, #16
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	60f8      	str	r0, [r7, #12]
 8004d38:	60b9      	str	r1, [r7, #8]
 8004d3a:	603b      	str	r3, [r7, #0]
 8004d3c:	4613      	mov	r3, r2
 8004d3e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004d40:	e03b      	b.n	8004dba <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004d42:	69ba      	ldr	r2, [r7, #24]
 8004d44:	6839      	ldr	r1, [r7, #0]
 8004d46:	68f8      	ldr	r0, [r7, #12]
 8004d48:	f000 f8d6 	bl	8004ef8 <I2C_IsErrorOccurred>
 8004d4c:	4603      	mov	r3, r0
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d001      	beq.n	8004d56 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8004d52:	2301      	movs	r3, #1
 8004d54:	e041      	b.n	8004dda <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d56:	683b      	ldr	r3, [r7, #0]
 8004d58:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004d5c:	d02d      	beq.n	8004dba <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d5e:	f7fd fea5 	bl	8002aac <HAL_GetTick>
 8004d62:	4602      	mov	r2, r0
 8004d64:	69bb      	ldr	r3, [r7, #24]
 8004d66:	1ad3      	subs	r3, r2, r3
 8004d68:	683a      	ldr	r2, [r7, #0]
 8004d6a:	429a      	cmp	r2, r3
 8004d6c:	d302      	bcc.n	8004d74 <I2C_WaitOnFlagUntilTimeout+0x44>
 8004d6e:	683b      	ldr	r3, [r7, #0]
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d122      	bne.n	8004dba <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	699a      	ldr	r2, [r3, #24]
 8004d7a:	68bb      	ldr	r3, [r7, #8]
 8004d7c:	4013      	ands	r3, r2
 8004d7e:	68ba      	ldr	r2, [r7, #8]
 8004d80:	429a      	cmp	r2, r3
 8004d82:	bf0c      	ite	eq
 8004d84:	2301      	moveq	r3, #1
 8004d86:	2300      	movne	r3, #0
 8004d88:	b2db      	uxtb	r3, r3
 8004d8a:	461a      	mov	r2, r3
 8004d8c:	79fb      	ldrb	r3, [r7, #7]
 8004d8e:	429a      	cmp	r2, r3
 8004d90:	d113      	bne.n	8004dba <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d96:	f043 0220 	orr.w	r2, r3, #32
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	2220      	movs	r2, #32
 8004da2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	2200      	movs	r2, #0
 8004daa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	2200      	movs	r2, #0
 8004db2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8004db6:	2301      	movs	r3, #1
 8004db8:	e00f      	b.n	8004dda <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	699a      	ldr	r2, [r3, #24]
 8004dc0:	68bb      	ldr	r3, [r7, #8]
 8004dc2:	4013      	ands	r3, r2
 8004dc4:	68ba      	ldr	r2, [r7, #8]
 8004dc6:	429a      	cmp	r2, r3
 8004dc8:	bf0c      	ite	eq
 8004dca:	2301      	moveq	r3, #1
 8004dcc:	2300      	movne	r3, #0
 8004dce:	b2db      	uxtb	r3, r3
 8004dd0:	461a      	mov	r2, r3
 8004dd2:	79fb      	ldrb	r3, [r7, #7]
 8004dd4:	429a      	cmp	r2, r3
 8004dd6:	d0b4      	beq.n	8004d42 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004dd8:	2300      	movs	r3, #0
}
 8004dda:	4618      	mov	r0, r3
 8004ddc:	3710      	adds	r7, #16
 8004dde:	46bd      	mov	sp, r7
 8004de0:	bd80      	pop	{r7, pc}

08004de2 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004de2:	b580      	push	{r7, lr}
 8004de4:	b084      	sub	sp, #16
 8004de6:	af00      	add	r7, sp, #0
 8004de8:	60f8      	str	r0, [r7, #12]
 8004dea:	60b9      	str	r1, [r7, #8]
 8004dec:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004dee:	e033      	b.n	8004e58 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004df0:	687a      	ldr	r2, [r7, #4]
 8004df2:	68b9      	ldr	r1, [r7, #8]
 8004df4:	68f8      	ldr	r0, [r7, #12]
 8004df6:	f000 f87f 	bl	8004ef8 <I2C_IsErrorOccurred>
 8004dfa:	4603      	mov	r3, r0
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d001      	beq.n	8004e04 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004e00:	2301      	movs	r3, #1
 8004e02:	e031      	b.n	8004e68 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e04:	68bb      	ldr	r3, [r7, #8]
 8004e06:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004e0a:	d025      	beq.n	8004e58 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e0c:	f7fd fe4e 	bl	8002aac <HAL_GetTick>
 8004e10:	4602      	mov	r2, r0
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	1ad3      	subs	r3, r2, r3
 8004e16:	68ba      	ldr	r2, [r7, #8]
 8004e18:	429a      	cmp	r2, r3
 8004e1a:	d302      	bcc.n	8004e22 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004e1c:	68bb      	ldr	r3, [r7, #8]
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d11a      	bne.n	8004e58 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	699b      	ldr	r3, [r3, #24]
 8004e28:	f003 0302 	and.w	r3, r3, #2
 8004e2c:	2b02      	cmp	r3, #2
 8004e2e:	d013      	beq.n	8004e58 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e34:	f043 0220 	orr.w	r2, r3, #32
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	2220      	movs	r2, #32
 8004e40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	2200      	movs	r2, #0
 8004e48:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	2200      	movs	r2, #0
 8004e50:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004e54:	2301      	movs	r3, #1
 8004e56:	e007      	b.n	8004e68 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	699b      	ldr	r3, [r3, #24]
 8004e5e:	f003 0302 	and.w	r3, r3, #2
 8004e62:	2b02      	cmp	r3, #2
 8004e64:	d1c4      	bne.n	8004df0 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004e66:	2300      	movs	r3, #0
}
 8004e68:	4618      	mov	r0, r3
 8004e6a:	3710      	adds	r7, #16
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	bd80      	pop	{r7, pc}

08004e70 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004e70:	b580      	push	{r7, lr}
 8004e72:	b084      	sub	sp, #16
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	60f8      	str	r0, [r7, #12]
 8004e78:	60b9      	str	r1, [r7, #8]
 8004e7a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004e7c:	e02f      	b.n	8004ede <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004e7e:	687a      	ldr	r2, [r7, #4]
 8004e80:	68b9      	ldr	r1, [r7, #8]
 8004e82:	68f8      	ldr	r0, [r7, #12]
 8004e84:	f000 f838 	bl	8004ef8 <I2C_IsErrorOccurred>
 8004e88:	4603      	mov	r3, r0
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d001      	beq.n	8004e92 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004e8e:	2301      	movs	r3, #1
 8004e90:	e02d      	b.n	8004eee <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e92:	f7fd fe0b 	bl	8002aac <HAL_GetTick>
 8004e96:	4602      	mov	r2, r0
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	1ad3      	subs	r3, r2, r3
 8004e9c:	68ba      	ldr	r2, [r7, #8]
 8004e9e:	429a      	cmp	r2, r3
 8004ea0:	d302      	bcc.n	8004ea8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004ea2:	68bb      	ldr	r3, [r7, #8]
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d11a      	bne.n	8004ede <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	699b      	ldr	r3, [r3, #24]
 8004eae:	f003 0320 	and.w	r3, r3, #32
 8004eb2:	2b20      	cmp	r3, #32
 8004eb4:	d013      	beq.n	8004ede <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004eba:	f043 0220 	orr.w	r2, r3, #32
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	2220      	movs	r2, #32
 8004ec6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	2200      	movs	r2, #0
 8004ece:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	2200      	movs	r2, #0
 8004ed6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8004eda:	2301      	movs	r3, #1
 8004edc:	e007      	b.n	8004eee <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	699b      	ldr	r3, [r3, #24]
 8004ee4:	f003 0320 	and.w	r3, r3, #32
 8004ee8:	2b20      	cmp	r3, #32
 8004eea:	d1c8      	bne.n	8004e7e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004eec:	2300      	movs	r3, #0
}
 8004eee:	4618      	mov	r0, r3
 8004ef0:	3710      	adds	r7, #16
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	bd80      	pop	{r7, pc}
	...

08004ef8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004ef8:	b580      	push	{r7, lr}
 8004efa:	b08a      	sub	sp, #40	@ 0x28
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	60f8      	str	r0, [r7, #12]
 8004f00:	60b9      	str	r1, [r7, #8]
 8004f02:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004f04:	2300      	movs	r3, #0
 8004f06:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	699b      	ldr	r3, [r3, #24]
 8004f10:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004f12:	2300      	movs	r3, #0
 8004f14:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004f1a:	69bb      	ldr	r3, [r7, #24]
 8004f1c:	f003 0310 	and.w	r3, r3, #16
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d068      	beq.n	8004ff6 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	2210      	movs	r2, #16
 8004f2a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004f2c:	e049      	b.n	8004fc2 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004f2e:	68bb      	ldr	r3, [r7, #8]
 8004f30:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004f34:	d045      	beq.n	8004fc2 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004f36:	f7fd fdb9 	bl	8002aac <HAL_GetTick>
 8004f3a:	4602      	mov	r2, r0
 8004f3c:	69fb      	ldr	r3, [r7, #28]
 8004f3e:	1ad3      	subs	r3, r2, r3
 8004f40:	68ba      	ldr	r2, [r7, #8]
 8004f42:	429a      	cmp	r2, r3
 8004f44:	d302      	bcc.n	8004f4c <I2C_IsErrorOccurred+0x54>
 8004f46:	68bb      	ldr	r3, [r7, #8]
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d13a      	bne.n	8004fc2 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	685b      	ldr	r3, [r3, #4]
 8004f52:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004f56:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004f5e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	699b      	ldr	r3, [r3, #24]
 8004f66:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004f6a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004f6e:	d121      	bne.n	8004fb4 <I2C_IsErrorOccurred+0xbc>
 8004f70:	697b      	ldr	r3, [r7, #20]
 8004f72:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004f76:	d01d      	beq.n	8004fb4 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8004f78:	7cfb      	ldrb	r3, [r7, #19]
 8004f7a:	2b20      	cmp	r3, #32
 8004f7c:	d01a      	beq.n	8004fb4 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	685a      	ldr	r2, [r3, #4]
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004f8c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004f8e:	f7fd fd8d 	bl	8002aac <HAL_GetTick>
 8004f92:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004f94:	e00e      	b.n	8004fb4 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004f96:	f7fd fd89 	bl	8002aac <HAL_GetTick>
 8004f9a:	4602      	mov	r2, r0
 8004f9c:	69fb      	ldr	r3, [r7, #28]
 8004f9e:	1ad3      	subs	r3, r2, r3
 8004fa0:	2b19      	cmp	r3, #25
 8004fa2:	d907      	bls.n	8004fb4 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8004fa4:	6a3b      	ldr	r3, [r7, #32]
 8004fa6:	f043 0320 	orr.w	r3, r3, #32
 8004faa:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8004fac:	2301      	movs	r3, #1
 8004fae:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8004fb2:	e006      	b.n	8004fc2 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	699b      	ldr	r3, [r3, #24]
 8004fba:	f003 0320 	and.w	r3, r3, #32
 8004fbe:	2b20      	cmp	r3, #32
 8004fc0:	d1e9      	bne.n	8004f96 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	699b      	ldr	r3, [r3, #24]
 8004fc8:	f003 0320 	and.w	r3, r3, #32
 8004fcc:	2b20      	cmp	r3, #32
 8004fce:	d003      	beq.n	8004fd8 <I2C_IsErrorOccurred+0xe0>
 8004fd0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d0aa      	beq.n	8004f2e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004fd8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d103      	bne.n	8004fe8 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	2220      	movs	r2, #32
 8004fe6:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004fe8:	6a3b      	ldr	r3, [r7, #32]
 8004fea:	f043 0304 	orr.w	r3, r3, #4
 8004fee:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004ff0:	2301      	movs	r3, #1
 8004ff2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	699b      	ldr	r3, [r3, #24]
 8004ffc:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004ffe:	69bb      	ldr	r3, [r7, #24]
 8005000:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005004:	2b00      	cmp	r3, #0
 8005006:	d00b      	beq.n	8005020 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8005008:	6a3b      	ldr	r3, [r7, #32]
 800500a:	f043 0301 	orr.w	r3, r3, #1
 800500e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005018:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800501a:	2301      	movs	r3, #1
 800501c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8005020:	69bb      	ldr	r3, [r7, #24]
 8005022:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005026:	2b00      	cmp	r3, #0
 8005028:	d00b      	beq.n	8005042 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800502a:	6a3b      	ldr	r3, [r7, #32]
 800502c:	f043 0308 	orr.w	r3, r3, #8
 8005030:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800503a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800503c:	2301      	movs	r3, #1
 800503e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8005042:	69bb      	ldr	r3, [r7, #24]
 8005044:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005048:	2b00      	cmp	r3, #0
 800504a:	d00b      	beq.n	8005064 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800504c:	6a3b      	ldr	r3, [r7, #32]
 800504e:	f043 0302 	orr.w	r3, r3, #2
 8005052:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800505c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800505e:	2301      	movs	r3, #1
 8005060:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8005064:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005068:	2b00      	cmp	r3, #0
 800506a:	d01c      	beq.n	80050a6 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800506c:	68f8      	ldr	r0, [r7, #12]
 800506e:	f7ff fe3b 	bl	8004ce8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	6859      	ldr	r1, [r3, #4]
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	681a      	ldr	r2, [r3, #0]
 800507c:	4b0d      	ldr	r3, [pc, #52]	@ (80050b4 <I2C_IsErrorOccurred+0x1bc>)
 800507e:	400b      	ands	r3, r1
 8005080:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005086:	6a3b      	ldr	r3, [r7, #32]
 8005088:	431a      	orrs	r2, r3
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	2220      	movs	r2, #32
 8005092:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	2200      	movs	r2, #0
 800509a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	2200      	movs	r2, #0
 80050a2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80050a6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80050aa:	4618      	mov	r0, r3
 80050ac:	3728      	adds	r7, #40	@ 0x28
 80050ae:	46bd      	mov	sp, r7
 80050b0:	bd80      	pop	{r7, pc}
 80050b2:	bf00      	nop
 80050b4:	fe00e800 	.word	0xfe00e800

080050b8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80050b8:	b480      	push	{r7}
 80050ba:	b087      	sub	sp, #28
 80050bc:	af00      	add	r7, sp, #0
 80050be:	60f8      	str	r0, [r7, #12]
 80050c0:	607b      	str	r3, [r7, #4]
 80050c2:	460b      	mov	r3, r1
 80050c4:	817b      	strh	r3, [r7, #10]
 80050c6:	4613      	mov	r3, r2
 80050c8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80050ca:	897b      	ldrh	r3, [r7, #10]
 80050cc:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80050d0:	7a7b      	ldrb	r3, [r7, #9]
 80050d2:	041b      	lsls	r3, r3, #16
 80050d4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80050d8:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80050de:	6a3b      	ldr	r3, [r7, #32]
 80050e0:	4313      	orrs	r3, r2
 80050e2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80050e6:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	685a      	ldr	r2, [r3, #4]
 80050ee:	6a3b      	ldr	r3, [r7, #32]
 80050f0:	0d5b      	lsrs	r3, r3, #21
 80050f2:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80050f6:	4b08      	ldr	r3, [pc, #32]	@ (8005118 <I2C_TransferConfig+0x60>)
 80050f8:	430b      	orrs	r3, r1
 80050fa:	43db      	mvns	r3, r3
 80050fc:	ea02 0103 	and.w	r1, r2, r3
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	697a      	ldr	r2, [r7, #20]
 8005106:	430a      	orrs	r2, r1
 8005108:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800510a:	bf00      	nop
 800510c:	371c      	adds	r7, #28
 800510e:	46bd      	mov	sp, r7
 8005110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005114:	4770      	bx	lr
 8005116:	bf00      	nop
 8005118:	03ff63ff 	.word	0x03ff63ff

0800511c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800511c:	b480      	push	{r7}
 800511e:	b083      	sub	sp, #12
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
 8005124:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800512c:	b2db      	uxtb	r3, r3
 800512e:	2b20      	cmp	r3, #32
 8005130:	d138      	bne.n	80051a4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005138:	2b01      	cmp	r3, #1
 800513a:	d101      	bne.n	8005140 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800513c:	2302      	movs	r3, #2
 800513e:	e032      	b.n	80051a6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	2201      	movs	r2, #1
 8005144:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2224      	movs	r2, #36	@ 0x24
 800514c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	681a      	ldr	r2, [r3, #0]
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f022 0201 	bic.w	r2, r2, #1
 800515e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	681a      	ldr	r2, [r3, #0]
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800516e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	6819      	ldr	r1, [r3, #0]
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	683a      	ldr	r2, [r7, #0]
 800517c:	430a      	orrs	r2, r1
 800517e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	681a      	ldr	r2, [r3, #0]
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f042 0201 	orr.w	r2, r2, #1
 800518e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2220      	movs	r2, #32
 8005194:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2200      	movs	r2, #0
 800519c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80051a0:	2300      	movs	r3, #0
 80051a2:	e000      	b.n	80051a6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80051a4:	2302      	movs	r3, #2
  }
}
 80051a6:	4618      	mov	r0, r3
 80051a8:	370c      	adds	r7, #12
 80051aa:	46bd      	mov	sp, r7
 80051ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b0:	4770      	bx	lr

080051b2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80051b2:	b480      	push	{r7}
 80051b4:	b085      	sub	sp, #20
 80051b6:	af00      	add	r7, sp, #0
 80051b8:	6078      	str	r0, [r7, #4]
 80051ba:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80051c2:	b2db      	uxtb	r3, r3
 80051c4:	2b20      	cmp	r3, #32
 80051c6:	d139      	bne.n	800523c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80051ce:	2b01      	cmp	r3, #1
 80051d0:	d101      	bne.n	80051d6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80051d2:	2302      	movs	r3, #2
 80051d4:	e033      	b.n	800523e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	2201      	movs	r2, #1
 80051da:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	2224      	movs	r2, #36	@ 0x24
 80051e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	681a      	ldr	r2, [r3, #0]
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f022 0201 	bic.w	r2, r2, #1
 80051f4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8005204:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005206:	683b      	ldr	r3, [r7, #0]
 8005208:	021b      	lsls	r3, r3, #8
 800520a:	68fa      	ldr	r2, [r7, #12]
 800520c:	4313      	orrs	r3, r2
 800520e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	68fa      	ldr	r2, [r7, #12]
 8005216:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	681a      	ldr	r2, [r3, #0]
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	f042 0201 	orr.w	r2, r2, #1
 8005226:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2220      	movs	r2, #32
 800522c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	2200      	movs	r2, #0
 8005234:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005238:	2300      	movs	r3, #0
 800523a:	e000      	b.n	800523e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800523c:	2302      	movs	r3, #2
  }
}
 800523e:	4618      	mov	r0, r3
 8005240:	3714      	adds	r7, #20
 8005242:	46bd      	mov	sp, r7
 8005244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005248:	4770      	bx	lr
	...

0800524c <HAL_LPTIM_Init>:
  *         LPTIM_InitTypeDef and initialize the associated handle.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
 800524c:	b580      	push	{r7, lr}
 800524e:	b084      	sub	sp, #16
 8005250:	af00      	add	r7, sp, #0
 8005252:	6078      	str	r0, [r7, #4]
  uint32_t tmpcfgr;

  /* Check the LPTIM handle allocation */
  if (hlptim == NULL)
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2b00      	cmp	r3, #0
 8005258:	d101      	bne.n	800525e <HAL_LPTIM_Init+0x12>
  {
    return HAL_ERROR;
 800525a:	2301      	movs	r3, #1
 800525c:	e08f      	b.n	800537e <HAL_LPTIM_Init+0x132>
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));

  assert_param(IS_LPTIM_CLOCK_SOURCE(hlptim->Init.Clock.Source));
  assert_param(IS_LPTIM_CLOCK_PRESCALER(hlptim->Init.Clock.Prescaler));
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	685b      	ldr	r3, [r3, #4]
 8005262:	2b01      	cmp	r3, #1
  assert_param(IS_LPTIM_COUNTER_SOURCE(hlptim->Init.CounterSource));
#if defined(LPTIM_RCR_REP)
  assert_param(IS_LPTIM_REPETITION(hlptim->Init.RepetitionCounter));
#endif

  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 800526a:	b2db      	uxtb	r3, r3
 800526c:	2b00      	cmp	r3, #0
 800526e:	d106      	bne.n	800527e <HAL_LPTIM_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hlptim->Lock = HAL_UNLOCKED;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	2200      	movs	r2, #0
 8005274:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hlptim->MspInitCallback(hlptim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_LPTIM_MspInit(hlptim);
 8005278:	6878      	ldr	r0, [r7, #4]
 800527a:	f7fd fa39 	bl	80026f0 <HAL_LPTIM_MspInit>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	2202      	movs	r2, #2
 8005282:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  }

#endif

  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	68db      	ldr	r3, [r3, #12]
 800528c:	60fb      	str	r3, [r7, #12]

  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	685b      	ldr	r3, [r3, #4]
 8005292:	2b01      	cmp	r3, #1
 8005294:	d004      	beq.n	80052a0 <HAL_LPTIM_Init+0x54>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800529a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800529e:	d103      	bne.n	80052a8 <HAL_LPTIM_Init+0x5c>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	f023 031e 	bic.w	r3, r3, #30
 80052a6:	60fb      	str	r3, [r7, #12]
  }
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	695b      	ldr	r3, [r3, #20]
 80052ac:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80052b0:	4293      	cmp	r3, r2
 80052b2:	d005      	beq.n	80052c0 <HAL_LPTIM_Init+0x74>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 80052ba:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80052be:	60fb      	str	r3, [r7, #12]
  }

  /* Clear CKSEL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 80052c0:	68fa      	ldr	r2, [r7, #12]
 80052c2:	4b31      	ldr	r3, [pc, #196]	@ (8005388 <HAL_LPTIM_Init+0x13c>)
 80052c4:	4013      	ands	r3, r2
 80052c6:	60fb      	str	r3, [r7, #12]
                          LPTIM_CFGR_WAVPOL | LPTIM_CFGR_PRESC | LPTIM_CFGR_COUNTMODE));

  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	685a      	ldr	r2, [r3, #4]
              hlptim->Init.Clock.Prescaler |
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	689b      	ldr	r3, [r3, #8]
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 80052d0:	431a      	orrs	r2, r3
              hlptim->Init.OutputPolarity  |
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	6a1b      	ldr	r3, [r3, #32]
              hlptim->Init.Clock.Prescaler |
 80052d6:	431a      	orrs	r2, r3
              hlptim->Init.UpdateMode      |
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
              hlptim->Init.OutputPolarity  |
 80052dc:	431a      	orrs	r2, r3
              hlptim->Init.CounterSource);
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
              hlptim->Init.UpdateMode      |
 80052e2:	4313      	orrs	r3, r2
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 80052e4:	68fa      	ldr	r2, [r7, #12]
 80052e6:	4313      	orrs	r3, r2
 80052e8:	60fb      	str	r3, [r7, #12]

  /* Glitch filters for internal triggers and  external inputs are configured
   * only if an internal clock source is provided to the LPTIM
   */
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC)
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	685b      	ldr	r3, [r3, #4]
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d107      	bne.n	8005302 <HAL_LPTIM_Init+0xb6>
  {
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	69da      	ldr	r2, [r3, #28]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 80052fa:	4313      	orrs	r3, r2
 80052fc:	68fa      	ldr	r2, [r7, #12]
 80052fe:	4313      	orrs	r3, r2
 8005300:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external clock polarity and digital filter */
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	685b      	ldr	r3, [r3, #4]
 8005306:	2b01      	cmp	r3, #1
 8005308:	d004      	beq.n	8005314 <HAL_LPTIM_Init+0xc8>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800530e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005312:	d107      	bne.n	8005324 <HAL_LPTIM_Init+0xd8>
  {
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	68da      	ldr	r2, [r3, #12]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 800531c:	4313      	orrs	r3, r2
 800531e:	68fa      	ldr	r2, [r7, #12]
 8005320:	4313      	orrs	r3, r2
 8005322:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external trigger */
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	695b      	ldr	r3, [r3, #20]
 8005328:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800532c:	4293      	cmp	r3, r2
 800532e:	d00a      	beq.n	8005346 <HAL_LPTIM_Init+0xfa>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	695a      	ldr	r2, [r3, #20]
                hlptim->Init.Trigger.ActiveEdge |
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	699b      	ldr	r3, [r3, #24]
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8005338:	431a      	orrs	r2, r3
                hlptim->Init.Trigger.SampleTime);
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	69db      	ldr	r3, [r3, #28]
                hlptim->Init.Trigger.ActiveEdge |
 800533e:	4313      	orrs	r3, r2
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8005340:	68fa      	ldr	r2, [r7, #12]
 8005342:	4313      	orrs	r3, r2
 8005344:	60fb      	str	r3, [r7, #12]
  }

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	68fa      	ldr	r2, [r7, #12]
 800534c:	60da      	str	r2, [r3, #12]

  /* Configure LPTIM input sources */
  if (hlptim->Instance == LPTIM1)
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	4a0e      	ldr	r2, [pc, #56]	@ (800538c <HAL_LPTIM_Init+0x140>)
 8005354:	4293      	cmp	r3, r2
 8005356:	d108      	bne.n	800536a <HAL_LPTIM_Init+0x11e>
    /* Check LPTIM Input1 and Input2 sources */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));
    assert_param(IS_LPTIM_INPUT2_SOURCE(hlptim->Instance, hlptim->Init.Input2Source));

    /* Configure LPTIM Input1 and Input2 sources */
    hlptim->Instance->OR = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	430a      	orrs	r2, r1
 8005366:	621a      	str	r2, [r3, #32]
 8005368:	e004      	b.n	8005374 <HAL_LPTIM_Init+0x128>
  {
    /* Check LPTIM Input1 source */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));

    /* Configure LPTIM Input1 source */
    hlptim->Instance->OR = hlptim->Init.Input1Source;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	687a      	ldr	r2, [r7, #4]
 8005370:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8005372:	621a      	str	r2, [r3, #32]
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	2201      	movs	r2, #1
 8005378:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36

  /* Return function status */
  return HAL_OK;
 800537c:	2300      	movs	r3, #0
}
 800537e:	4618      	mov	r0, r3
 8005380:	3710      	adds	r7, #16
 8005382:	46bd      	mov	sp, r7
 8005384:	bd80      	pop	{r7, pc}
 8005386:	bf00      	nop
 8005388:	ff19f1fe 	.word	0xff19f1fe
 800538c:	40007c00 	.word	0x40007c00

08005390 <HAL_LPTIM_TimeOut_Start_IT>:
  * @param  Timeout Specifies the TimeOut value to reset the counter.
  *         This parameter must be a value between 0x0000 and 0xFFFF.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_TimeOut_Start_IT(LPTIM_HandleTypeDef *hlptim, uint32_t Period, uint32_t Timeout)
{
 8005390:	b580      	push	{r7, lr}
 8005392:	b084      	sub	sp, #16
 8005394:	af00      	add	r7, sp, #0
 8005396:	60f8      	str	r0, [r7, #12]
 8005398:	60b9      	str	r1, [r7, #8]
 800539a:	607a      	str	r2, [r7, #4]
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));
  assert_param(IS_LPTIM_PERIOD(Period));
  assert_param(IS_LPTIM_PULSE(Timeout));

  /* Set the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	2202      	movs	r2, #2
 80053a0:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36

  /* Enable EXTI Line interrupt on the LPTIM Wake-up Timer */
  __HAL_LPTIM_WAKEUPTIMER_EXTI_ENABLE_IT(hlptim->Instance);
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	4a36      	ldr	r2, [pc, #216]	@ (8005484 <HAL_LPTIM_TimeOut_Start_IT+0xf4>)
 80053aa:	4293      	cmp	r3, r2
 80053ac:	d106      	bne.n	80053bc <HAL_LPTIM_TimeOut_Start_IT+0x2c>
 80053ae:	4b36      	ldr	r3, [pc, #216]	@ (8005488 <HAL_LPTIM_TimeOut_Start_IT+0xf8>)
 80053b0:	6a1b      	ldr	r3, [r3, #32]
 80053b2:	4a35      	ldr	r2, [pc, #212]	@ (8005488 <HAL_LPTIM_TimeOut_Start_IT+0xf8>)
 80053b4:	f043 0301 	orr.w	r3, r3, #1
 80053b8:	6213      	str	r3, [r2, #32]
 80053ba:	e005      	b.n	80053c8 <HAL_LPTIM_TimeOut_Start_IT+0x38>
 80053bc:	4b32      	ldr	r3, [pc, #200]	@ (8005488 <HAL_LPTIM_TimeOut_Start_IT+0xf8>)
 80053be:	6a1b      	ldr	r3, [r3, #32]
 80053c0:	4a31      	ldr	r2, [pc, #196]	@ (8005488 <HAL_LPTIM_TimeOut_Start_IT+0xf8>)
 80053c2:	f043 0302 	orr.w	r3, r3, #2
 80053c6:	6213      	str	r3, [r2, #32]

  /* Set TIMOUT bit to enable the timeout function */
  hlptim->Instance->CFGR |= LPTIM_CFGR_TIMOUT;
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	68da      	ldr	r2, [r3, #12]
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f442 2200 	orr.w	r2, r2, #524288	@ 0x80000
 80053d6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	691a      	ldr	r2, [r3, #16]
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	f042 0201 	orr.w	r2, r2, #1
 80053e6:	611a      	str	r2, [r3, #16]

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	2210      	movs	r2, #16
 80053ee:	605a      	str	r2, [r3, #4]

  /* Load the period value in the autoreload register */
  __HAL_LPTIM_AUTORELOAD_SET(hlptim, Period);
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	68ba      	ldr	r2, [r7, #8]
 80053f6:	619a      	str	r2, [r3, #24]

  /* Wait for the completion of the write operation to the LPTIM_ARR register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 80053f8:	2110      	movs	r1, #16
 80053fa:	68f8      	ldr	r0, [r7, #12]
 80053fc:	f000 f92c 	bl	8005658 <LPTIM_WaitForFlag>
 8005400:	4603      	mov	r3, r0
 8005402:	2b03      	cmp	r3, #3
 8005404:	d101      	bne.n	800540a <HAL_LPTIM_TimeOut_Start_IT+0x7a>
  {
    return HAL_TIMEOUT;
 8005406:	2303      	movs	r3, #3
 8005408:	e038      	b.n	800547c <HAL_LPTIM_TimeOut_Start_IT+0xec>
  }

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	2208      	movs	r2, #8
 8005410:	605a      	str	r2, [r3, #4]

  /* Load the Timeout value in the compare register */
  __HAL_LPTIM_COMPARE_SET(hlptim, Timeout);
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	687a      	ldr	r2, [r7, #4]
 8005418:	615a      	str	r2, [r3, #20]

  /* Wait for the completion of the write operation to the LPTIM_CMP register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_CMPOK) == HAL_TIMEOUT)
 800541a:	2108      	movs	r1, #8
 800541c:	68f8      	ldr	r0, [r7, #12]
 800541e:	f000 f91b 	bl	8005658 <LPTIM_WaitForFlag>
 8005422:	4603      	mov	r3, r0
 8005424:	2b03      	cmp	r3, #3
 8005426:	d101      	bne.n	800542c <HAL_LPTIM_TimeOut_Start_IT+0x9c>
  {
    return HAL_TIMEOUT;
 8005428:	2303      	movs	r3, #3
 800542a:	e027      	b.n	800547c <HAL_LPTIM_TimeOut_Start_IT+0xec>
  }

  /* Disable the Peripheral */
  __HAL_LPTIM_DISABLE(hlptim);
 800542c:	68f8      	ldr	r0, [r7, #12]
 800542e:	f000 f943 	bl	80056b8 <LPTIM_Disable>

  if (HAL_LPTIM_GetState(hlptim) == HAL_LPTIM_STATE_TIMEOUT)
 8005432:	68f8      	ldr	r0, [r7, #12]
 8005434:	f000 f901 	bl	800563a <HAL_LPTIM_GetState>
 8005438:	4603      	mov	r3, r0
 800543a:	2b03      	cmp	r3, #3
 800543c:	d101      	bne.n	8005442 <HAL_LPTIM_TimeOut_Start_IT+0xb2>
  {
    return HAL_TIMEOUT;
 800543e:	2303      	movs	r3, #3
 8005440:	e01c      	b.n	800547c <HAL_LPTIM_TimeOut_Start_IT+0xec>
  }

  /* Enable Compare match interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_CMPM);
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	689a      	ldr	r2, [r3, #8]
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f042 0201 	orr.w	r2, r2, #1
 8005450:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	691a      	ldr	r2, [r3, #16]
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f042 0201 	orr.w	r2, r2, #1
 8005460:	611a      	str	r2, [r3, #16]

  /* Start timer in continuous mode */
  __HAL_LPTIM_START_CONTINUOUS(hlptim);
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	691a      	ldr	r2, [r3, #16]
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f042 0204 	orr.w	r2, r2, #4
 8005470:	611a      	str	r2, [r3, #16]

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	2201      	movs	r2, #1
 8005476:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36

  /* Return function status */
  return HAL_OK;
 800547a:	2300      	movs	r3, #0
}
 800547c:	4618      	mov	r0, r3
 800547e:	3710      	adds	r7, #16
 8005480:	46bd      	mov	sp, r7
 8005482:	bd80      	pop	{r7, pc}
 8005484:	40007c00 	.word	0x40007c00
 8005488:	40010400 	.word	0x40010400

0800548c <HAL_LPTIM_IRQHandler>:
  * @brief  Handle LPTIM interrupt request.
  * @param  hlptim LPTIM handle
  * @retval None
  */
void HAL_LPTIM_IRQHandler(LPTIM_HandleTypeDef *hlptim)
{
 800548c:	b580      	push	{r7, lr}
 800548e:	b082      	sub	sp, #8
 8005490:	af00      	add	r7, sp, #0
 8005492:	6078      	str	r0, [r7, #4]
  /* Compare match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPM) != RESET)
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f003 0301 	and.w	r3, r3, #1
 800549e:	2b01      	cmp	r3, #1
 80054a0:	d10d      	bne.n	80054be <HAL_LPTIM_IRQHandler+0x32>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPM) != RESET)
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	689b      	ldr	r3, [r3, #8]
 80054a8:	f003 0301 	and.w	r3, r3, #1
 80054ac:	2b01      	cmp	r3, #1
 80054ae:	d106      	bne.n	80054be <HAL_LPTIM_IRQHandler+0x32>
    {
      /* Clear Compare match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPM);
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	2201      	movs	r2, #1
 80054b6:	605a      	str	r2, [r3, #4]

      /* Compare match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareMatchCallback(hlptim);
#else
      HAL_LPTIM_CompareMatchCallback(hlptim);
 80054b8:	6878      	ldr	r0, [r7, #4]
 80054ba:	f7fc fd43 	bl	8001f44 <HAL_LPTIM_CompareMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARRM) != RESET)
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f003 0302 	and.w	r3, r3, #2
 80054c8:	2b02      	cmp	r3, #2
 80054ca:	d10d      	bne.n	80054e8 <HAL_LPTIM_IRQHandler+0x5c>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARRM) != RESET)
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	689b      	ldr	r3, [r3, #8]
 80054d2:	f003 0302 	and.w	r3, r3, #2
 80054d6:	2b02      	cmp	r3, #2
 80054d8:	d106      	bne.n	80054e8 <HAL_LPTIM_IRQHandler+0x5c>
    {
      /* Clear Autoreload match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARRM);
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	2202      	movs	r2, #2
 80054e0:	605a      	str	r2, [r3, #4]

      /* Autoreload match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadMatchCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadMatchCallback(hlptim);
 80054e2:	6878      	ldr	r0, [r7, #4]
 80054e4:	f000 f86d 	bl	80055c2 <HAL_LPTIM_AutoReloadMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Trigger detected interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_EXTTRIG) != RESET)
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f003 0304 	and.w	r3, r3, #4
 80054f2:	2b04      	cmp	r3, #4
 80054f4:	d10d      	bne.n	8005512 <HAL_LPTIM_IRQHandler+0x86>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_EXTTRIG) != RESET)
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	689b      	ldr	r3, [r3, #8]
 80054fc:	f003 0304 	and.w	r3, r3, #4
 8005500:	2b04      	cmp	r3, #4
 8005502:	d106      	bne.n	8005512 <HAL_LPTIM_IRQHandler+0x86>
    {
      /* Clear Trigger detected flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_EXTTRIG);
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	2204      	movs	r2, #4
 800550a:	605a      	str	r2, [r3, #4]

      /* Trigger detected callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->TriggerCallback(hlptim);
#else
      HAL_LPTIM_TriggerCallback(hlptim);
 800550c:	6878      	ldr	r0, [r7, #4]
 800550e:	f000 f862 	bl	80055d6 <HAL_LPTIM_TriggerCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Compare write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPOK) != RESET)
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f003 0308 	and.w	r3, r3, #8
 800551c:	2b08      	cmp	r3, #8
 800551e:	d10d      	bne.n	800553c <HAL_LPTIM_IRQHandler+0xb0>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPOK) != RESET)
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	689b      	ldr	r3, [r3, #8]
 8005526:	f003 0308 	and.w	r3, r3, #8
 800552a:	2b08      	cmp	r3, #8
 800552c:	d106      	bne.n	800553c <HAL_LPTIM_IRQHandler+0xb0>
    {
      /* Clear Compare write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	2208      	movs	r2, #8
 8005534:	605a      	str	r2, [r3, #4]

      /* Compare write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareWriteCallback(hlptim);
#else
      HAL_LPTIM_CompareWriteCallback(hlptim);
 8005536:	6878      	ldr	r0, [r7, #4]
 8005538:	f000 f857 	bl	80055ea <HAL_LPTIM_CompareWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARROK) != RESET)
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f003 0310 	and.w	r3, r3, #16
 8005546:	2b10      	cmp	r3, #16
 8005548:	d10d      	bne.n	8005566 <HAL_LPTIM_IRQHandler+0xda>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARROK) != RESET)
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	689b      	ldr	r3, [r3, #8]
 8005550:	f003 0310 	and.w	r3, r3, #16
 8005554:	2b10      	cmp	r3, #16
 8005556:	d106      	bne.n	8005566 <HAL_LPTIM_IRQHandler+0xda>
    {
      /* Clear Autoreload write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	2210      	movs	r2, #16
 800555e:	605a      	str	r2, [r3, #4]

      /* Autoreload write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadWriteCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadWriteCallback(hlptim);
 8005560:	6878      	ldr	r0, [r7, #4]
 8005562:	f000 f84c 	bl	80055fe <HAL_LPTIM_AutoReloadWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Down to Up interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_UP) != RESET)
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f003 0320 	and.w	r3, r3, #32
 8005570:	2b20      	cmp	r3, #32
 8005572:	d10d      	bne.n	8005590 <HAL_LPTIM_IRQHandler+0x104>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_UP) != RESET)
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	689b      	ldr	r3, [r3, #8]
 800557a:	f003 0320 	and.w	r3, r3, #32
 800557e:	2b20      	cmp	r3, #32
 8005580:	d106      	bne.n	8005590 <HAL_LPTIM_IRQHandler+0x104>
    {
      /* Clear Direction counter changed from Down to Up flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_UP);
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	2220      	movs	r2, #32
 8005588:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Down to Up Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionUpCallback(hlptim);
#else
      HAL_LPTIM_DirectionUpCallback(hlptim);
 800558a:	6878      	ldr	r0, [r7, #4]
 800558c:	f000 f841 	bl	8005612 <HAL_LPTIM_DirectionUpCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Up to Down interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_DOWN) != RESET)
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800559a:	2b40      	cmp	r3, #64	@ 0x40
 800559c:	d10d      	bne.n	80055ba <HAL_LPTIM_IRQHandler+0x12e>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_DOWN) != RESET)
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	689b      	ldr	r3, [r3, #8]
 80055a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80055a8:	2b40      	cmp	r3, #64	@ 0x40
 80055aa:	d106      	bne.n	80055ba <HAL_LPTIM_IRQHandler+0x12e>
    {
      /* Clear Direction counter changed from Up to Down flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_DOWN);
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	2240      	movs	r2, #64	@ 0x40
 80055b2:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Up to Down Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionDownCallback(hlptim);
#else
      HAL_LPTIM_DirectionDownCallback(hlptim);
 80055b4:	6878      	ldr	r0, [r7, #4]
 80055b6:	f000 f836 	bl	8005626 <HAL_LPTIM_DirectionDownCallback>
      HAL_LPTIM_RepCounterWriteCallback(hlptim);
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }
#endif
}
 80055ba:	bf00      	nop
 80055bc:	3708      	adds	r7, #8
 80055be:	46bd      	mov	sp, r7
 80055c0:	bd80      	pop	{r7, pc}

080055c2 <HAL_LPTIM_AutoReloadMatchCallback>:
  * @brief  Autoreload match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 80055c2:	b480      	push	{r7}
 80055c4:	b083      	sub	sp, #12
 80055c6:	af00      	add	r7, sp, #0
 80055c8:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadMatchCallback could be implemented in the user file
   */
}
 80055ca:	bf00      	nop
 80055cc:	370c      	adds	r7, #12
 80055ce:	46bd      	mov	sp, r7
 80055d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d4:	4770      	bx	lr

080055d6 <HAL_LPTIM_TriggerCallback>:
  * @brief  Trigger detected callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_TriggerCallback(LPTIM_HandleTypeDef *hlptim)
{
 80055d6:	b480      	push	{r7}
 80055d8:	b083      	sub	sp, #12
 80055da:	af00      	add	r7, sp, #0
 80055dc:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_TriggerCallback could be implemented in the user file
   */
}
 80055de:	bf00      	nop
 80055e0:	370c      	adds	r7, #12
 80055e2:	46bd      	mov	sp, r7
 80055e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e8:	4770      	bx	lr

080055ea <HAL_LPTIM_CompareWriteCallback>:
  * @brief  Compare write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 80055ea:	b480      	push	{r7}
 80055ec:	b083      	sub	sp, #12
 80055ee:	af00      	add	r7, sp, #0
 80055f0:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareWriteCallback could be implemented in the user file
   */
}
 80055f2:	bf00      	nop
 80055f4:	370c      	adds	r7, #12
 80055f6:	46bd      	mov	sp, r7
 80055f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fc:	4770      	bx	lr

080055fe <HAL_LPTIM_AutoReloadWriteCallback>:
  * @brief  Autoreload write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 80055fe:	b480      	push	{r7}
 8005600:	b083      	sub	sp, #12
 8005602:	af00      	add	r7, sp, #0
 8005604:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadWriteCallback could be implemented in the user file
   */
}
 8005606:	bf00      	nop
 8005608:	370c      	adds	r7, #12
 800560a:	46bd      	mov	sp, r7
 800560c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005610:	4770      	bx	lr

08005612 <HAL_LPTIM_DirectionUpCallback>:
  * @brief  Direction counter changed from Down to Up callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionUpCallback(LPTIM_HandleTypeDef *hlptim)
{
 8005612:	b480      	push	{r7}
 8005614:	b083      	sub	sp, #12
 8005616:	af00      	add	r7, sp, #0
 8005618:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionUpCallback could be implemented in the user file
   */
}
 800561a:	bf00      	nop
 800561c:	370c      	adds	r7, #12
 800561e:	46bd      	mov	sp, r7
 8005620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005624:	4770      	bx	lr

08005626 <HAL_LPTIM_DirectionDownCallback>:
  * @brief  Direction counter changed from Up to Down callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionDownCallback(LPTIM_HandleTypeDef *hlptim)
{
 8005626:	b480      	push	{r7}
 8005628:	b083      	sub	sp, #12
 800562a:	af00      	add	r7, sp, #0
 800562c:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionDownCallback could be implemented in the user file
   */
}
 800562e:	bf00      	nop
 8005630:	370c      	adds	r7, #12
 8005632:	46bd      	mov	sp, r7
 8005634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005638:	4770      	bx	lr

0800563a <HAL_LPTIM_GetState>:
  * @brief  Return the LPTIM handle state.
  * @param  hlptim LPTIM handle
  * @retval HAL state
  */
HAL_LPTIM_StateTypeDef HAL_LPTIM_GetState(const LPTIM_HandleTypeDef *hlptim)
{
 800563a:	b480      	push	{r7}
 800563c:	b083      	sub	sp, #12
 800563e:	af00      	add	r7, sp, #0
 8005640:	6078      	str	r0, [r7, #4]
  /* Return LPTIM handle state */
  return hlptim->State;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8005648:	b2db      	uxtb	r3, r3
}
 800564a:	4618      	mov	r0, r3
 800564c:	370c      	adds	r7, #12
 800564e:	46bd      	mov	sp, r7
 8005650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005654:	4770      	bx	lr
	...

08005658 <LPTIM_WaitForFlag>:
  *                the configuration information for LPTIM module.
  * @param  flag   The lptim flag
  * @retval HAL status
  */
static HAL_StatusTypeDef LPTIM_WaitForFlag(const LPTIM_HandleTypeDef *hlptim, uint32_t flag)
{
 8005658:	b480      	push	{r7}
 800565a:	b085      	sub	sp, #20
 800565c:	af00      	add	r7, sp, #0
 800565e:	6078      	str	r0, [r7, #4]
 8005660:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef result = HAL_OK;
 8005662:	2300      	movs	r3, #0
 8005664:	73fb      	strb	r3, [r7, #15]
  uint32_t count = TIMEOUT * (SystemCoreClock / 20UL / 1000UL);
 8005666:	4b12      	ldr	r3, [pc, #72]	@ (80056b0 <LPTIM_WaitForFlag+0x58>)
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	4a12      	ldr	r2, [pc, #72]	@ (80056b4 <LPTIM_WaitForFlag+0x5c>)
 800566c:	fba2 2303 	umull	r2, r3, r2, r3
 8005670:	0b9b      	lsrs	r3, r3, #14
 8005672:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8005676:	fb02 f303 	mul.w	r3, r2, r3
 800567a:	60bb      	str	r3, [r7, #8]
  do
  {
    count--;
 800567c:	68bb      	ldr	r3, [r7, #8]
 800567e:	3b01      	subs	r3, #1
 8005680:	60bb      	str	r3, [r7, #8]
    if (count == 0UL)
 8005682:	68bb      	ldr	r3, [r7, #8]
 8005684:	2b00      	cmp	r3, #0
 8005686:	d101      	bne.n	800568c <LPTIM_WaitForFlag+0x34>
    {
      result = HAL_TIMEOUT;
 8005688:	2303      	movs	r3, #3
 800568a:	73fb      	strb	r3, [r7, #15]
    }
  } while ((!(__HAL_LPTIM_GET_FLAG((hlptim), (flag)))) && (count != 0UL));
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	681a      	ldr	r2, [r3, #0]
 8005692:	683b      	ldr	r3, [r7, #0]
 8005694:	4013      	ands	r3, r2
 8005696:	683a      	ldr	r2, [r7, #0]
 8005698:	429a      	cmp	r2, r3
 800569a:	d002      	beq.n	80056a2 <LPTIM_WaitForFlag+0x4a>
 800569c:	68bb      	ldr	r3, [r7, #8]
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d1ec      	bne.n	800567c <LPTIM_WaitForFlag+0x24>

  return result;
 80056a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80056a4:	4618      	mov	r0, r3
 80056a6:	3714      	adds	r7, #20
 80056a8:	46bd      	mov	sp, r7
 80056aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ae:	4770      	bx	lr
 80056b0:	20000004 	.word	0x20000004
 80056b4:	d1b71759 	.word	0xd1b71759

080056b8 <LPTIM_Disable>:
  *         Please check Errata Sheet ES0335 for more details under "MCU may remain
  *         stuck in LPTIM interrupt when entering Stop mode" section.
  * @retval None
  */
void LPTIM_Disable(LPTIM_HandleTypeDef *hlptim)
{
 80056b8:	b580      	push	{r7, lr}
 80056ba:	b08c      	sub	sp, #48	@ 0x30
 80056bc:	af00      	add	r7, sp, #0
 80056be:	6078      	str	r0, [r7, #4]
  uint32_t tmpclksource = 0;
 80056c0:	2300      	movs	r3, #0
 80056c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80056c4:	f3ef 8310 	mrs	r3, PRIMASK
 80056c8:	60fb      	str	r3, [r7, #12]
  return(result);
 80056ca:	68fb      	ldr	r3, [r7, #12]
#if defined(LPTIM_RCR_REP)
  uint32_t tmpRCR;
#endif

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 80056cc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80056ce:	2301      	movs	r3, #1
 80056d0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80056d2:	693b      	ldr	r3, [r7, #16]
 80056d4:	f383 8810 	msr	PRIMASK, r3
}
 80056d8:	bf00      	nop
  __set_PRIMASK(1) ;

  /*********** Save LPTIM Config ***********/
  /* Save LPTIM source clock */
  switch ((uint32_t)hlptim->Instance)
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	4a73      	ldr	r2, [pc, #460]	@ (80058ac <LPTIM_Disable+0x1f4>)
 80056e0:	4293      	cmp	r3, r2
 80056e2:	d003      	beq.n	80056ec <LPTIM_Disable+0x34>
 80056e4:	4a72      	ldr	r2, [pc, #456]	@ (80058b0 <LPTIM_Disable+0x1f8>)
 80056e6:	4293      	cmp	r3, r2
 80056e8:	d007      	beq.n	80056fa <LPTIM_Disable+0x42>
    case LPTIM2_BASE:
      tmpclksource = __HAL_RCC_GET_LPTIM2_SOURCE();
      break;
#endif /* LPTIM2 */
    default:
      break;
 80056ea:	e00d      	b.n	8005708 <LPTIM_Disable+0x50>
      tmpclksource = __HAL_RCC_GET_LPTIM1_SOURCE();
 80056ec:	4b71      	ldr	r3, [pc, #452]	@ (80058b4 <LPTIM_Disable+0x1fc>)
 80056ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056f2:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 80056f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      break;
 80056f8:	e006      	b.n	8005708 <LPTIM_Disable+0x50>
      tmpclksource = __HAL_RCC_GET_LPTIM2_SOURCE();
 80056fa:	4b6e      	ldr	r3, [pc, #440]	@ (80058b4 <LPTIM_Disable+0x1fc>)
 80056fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005700:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8005704:	62fb      	str	r3, [r7, #44]	@ 0x2c
      break;
 8005706:	bf00      	nop
  }

  /* Save LPTIM configuration registers */
  tmpIER = hlptim->Instance->IER;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	689b      	ldr	r3, [r3, #8]
 800570e:	627b      	str	r3, [r7, #36]	@ 0x24
  tmpCFGR = hlptim->Instance->CFGR;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	68db      	ldr	r3, [r3, #12]
 8005716:	623b      	str	r3, [r7, #32]
  tmpCMP = hlptim->Instance->CMP;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	695b      	ldr	r3, [r3, #20]
 800571e:	61fb      	str	r3, [r7, #28]
  tmpARR = hlptim->Instance->ARR;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	699b      	ldr	r3, [r3, #24]
 8005726:	61bb      	str	r3, [r7, #24]
  tmpOR = hlptim->Instance->OR;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	6a1b      	ldr	r3, [r3, #32]
 800572e:	617b      	str	r3, [r7, #20]
#if defined(LPTIM_RCR_REP)
  tmpRCR = hlptim->Instance->RCR;
#endif

  /*********** Reset LPTIM ***********/
  switch ((uint32_t)hlptim->Instance)
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	4a5d      	ldr	r2, [pc, #372]	@ (80058ac <LPTIM_Disable+0x1f4>)
 8005736:	4293      	cmp	r3, r2
 8005738:	d003      	beq.n	8005742 <LPTIM_Disable+0x8a>
 800573a:	4a5d      	ldr	r2, [pc, #372]	@ (80058b0 <LPTIM_Disable+0x1f8>)
 800573c:	4293      	cmp	r3, r2
 800573e:	d00d      	beq.n	800575c <LPTIM_Disable+0xa4>
      __HAL_RCC_LPTIM2_FORCE_RESET();
      __HAL_RCC_LPTIM2_RELEASE_RESET();
      break;
#endif /* LPTIM2 */
    default:
      break;
 8005740:	e019      	b.n	8005776 <LPTIM_Disable+0xbe>
      __HAL_RCC_LPTIM1_FORCE_RESET();
 8005742:	4b5c      	ldr	r3, [pc, #368]	@ (80058b4 <LPTIM_Disable+0x1fc>)
 8005744:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005746:	4a5b      	ldr	r2, [pc, #364]	@ (80058b4 <LPTIM_Disable+0x1fc>)
 8005748:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800574c:	6393      	str	r3, [r2, #56]	@ 0x38
      __HAL_RCC_LPTIM1_RELEASE_RESET();
 800574e:	4b59      	ldr	r3, [pc, #356]	@ (80058b4 <LPTIM_Disable+0x1fc>)
 8005750:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005752:	4a58      	ldr	r2, [pc, #352]	@ (80058b4 <LPTIM_Disable+0x1fc>)
 8005754:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005758:	6393      	str	r3, [r2, #56]	@ 0x38
      break;
 800575a:	e00c      	b.n	8005776 <LPTIM_Disable+0xbe>
      __HAL_RCC_LPTIM2_FORCE_RESET();
 800575c:	4b55      	ldr	r3, [pc, #340]	@ (80058b4 <LPTIM_Disable+0x1fc>)
 800575e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005760:	4a54      	ldr	r2, [pc, #336]	@ (80058b4 <LPTIM_Disable+0x1fc>)
 8005762:	f043 0320 	orr.w	r3, r3, #32
 8005766:	63d3      	str	r3, [r2, #60]	@ 0x3c
      __HAL_RCC_LPTIM2_RELEASE_RESET();
 8005768:	4b52      	ldr	r3, [pc, #328]	@ (80058b4 <LPTIM_Disable+0x1fc>)
 800576a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800576c:	4a51      	ldr	r2, [pc, #324]	@ (80058b4 <LPTIM_Disable+0x1fc>)
 800576e:	f023 0320 	bic.w	r3, r3, #32
 8005772:	63d3      	str	r3, [r2, #60]	@ 0x3c
      break;
 8005774:	bf00      	nop

  /*********** Restore LPTIM Config ***********/
#if defined(LPTIM_RCR_REP)
  if ((tmpCMP != 0UL) || (tmpARR != 0UL) || (tmpRCR != 0UL))
#else
  if ((tmpCMP != 0UL) || (tmpARR != 0UL))
 8005776:	69fb      	ldr	r3, [r7, #28]
 8005778:	2b00      	cmp	r3, #0
 800577a:	d102      	bne.n	8005782 <LPTIM_Disable+0xca>
 800577c:	69bb      	ldr	r3, [r7, #24]
 800577e:	2b00      	cmp	r3, #0
 8005780:	d075      	beq.n	800586e <LPTIM_Disable+0x1b6>
#endif
  {
    /* Force LPTIM source kernel clock from APB */
    switch ((uint32_t)hlptim->Instance)
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	4a49      	ldr	r2, [pc, #292]	@ (80058ac <LPTIM_Disable+0x1f4>)
 8005788:	4293      	cmp	r3, r2
 800578a:	d003      	beq.n	8005794 <LPTIM_Disable+0xdc>
 800578c:	4a48      	ldr	r2, [pc, #288]	@ (80058b0 <LPTIM_Disable+0x1f8>)
 800578e:	4293      	cmp	r3, r2
 8005790:	d009      	beq.n	80057a6 <LPTIM_Disable+0xee>
      case LPTIM2_BASE:
        __HAL_RCC_LPTIM2_CONFIG(RCC_LPTIM2CLKSOURCE_PCLK1);
        break;
#endif /* LPTIM2 */
      default:
        break;
 8005792:	e011      	b.n	80057b8 <LPTIM_Disable+0x100>
        __HAL_RCC_LPTIM1_CONFIG(RCC_LPTIM1CLKSOURCE_PCLK1);
 8005794:	4b47      	ldr	r3, [pc, #284]	@ (80058b4 <LPTIM_Disable+0x1fc>)
 8005796:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800579a:	4a46      	ldr	r2, [pc, #280]	@ (80058b4 <LPTIM_Disable+0x1fc>)
 800579c:	f423 2340 	bic.w	r3, r3, #786432	@ 0xc0000
 80057a0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
        break;
 80057a4:	e008      	b.n	80057b8 <LPTIM_Disable+0x100>
        __HAL_RCC_LPTIM2_CONFIG(RCC_LPTIM2CLKSOURCE_PCLK1);
 80057a6:	4b43      	ldr	r3, [pc, #268]	@ (80058b4 <LPTIM_Disable+0x1fc>)
 80057a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80057ac:	4a41      	ldr	r2, [pc, #260]	@ (80058b4 <LPTIM_Disable+0x1fc>)
 80057ae:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 80057b2:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
        break;
 80057b6:	bf00      	nop
    }

    if (tmpCMP != 0UL)
 80057b8:	69fb      	ldr	r3, [r7, #28]
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d01a      	beq.n	80057f4 <LPTIM_Disable+0x13c>
    {
      /* Restore CMP register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	691a      	ldr	r2, [r3, #16]
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	f042 0201 	orr.w	r2, r2, #1
 80057cc:	611a      	str	r2, [r3, #16]
      hlptim->Instance->CMP = tmpCMP;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	69fa      	ldr	r2, [r7, #28]
 80057d4:	615a      	str	r2, [r3, #20]

      /* Wait for the completion of the write operation to the LPTIM_CMP register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_CMPOK) == HAL_TIMEOUT)
 80057d6:	2108      	movs	r1, #8
 80057d8:	6878      	ldr	r0, [r7, #4]
 80057da:	f7ff ff3d 	bl	8005658 <LPTIM_WaitForFlag>
 80057de:	4603      	mov	r3, r0
 80057e0:	2b03      	cmp	r3, #3
 80057e2:	d103      	bne.n	80057ec <LPTIM_Disable+0x134>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	2203      	movs	r2, #3
 80057e8:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
      }
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	2208      	movs	r2, #8
 80057f2:	605a      	str	r2, [r3, #4]
    }

    if (tmpARR != 0UL)
 80057f4:	69bb      	ldr	r3, [r7, #24]
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d01a      	beq.n	8005830 <LPTIM_Disable+0x178>
    {
      /* Restore ARR register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	691a      	ldr	r2, [r3, #16]
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	f042 0201 	orr.w	r2, r2, #1
 8005808:	611a      	str	r2, [r3, #16]
      hlptim->Instance->ARR = tmpARR;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	69ba      	ldr	r2, [r7, #24]
 8005810:	619a      	str	r2, [r3, #24]

      /* Wait for the completion of the write operation to the LPTIM_ARR register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 8005812:	2110      	movs	r1, #16
 8005814:	6878      	ldr	r0, [r7, #4]
 8005816:	f7ff ff1f 	bl	8005658 <LPTIM_WaitForFlag>
 800581a:	4603      	mov	r3, r0
 800581c:	2b03      	cmp	r3, #3
 800581e:	d103      	bne.n	8005828 <LPTIM_Disable+0x170>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	2203      	movs	r2, #3
 8005824:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
      }

      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	2210      	movs	r2, #16
 800582e:	605a      	str	r2, [r3, #4]
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_REPOK);
    }
#endif

    /* Restore LPTIM source kernel clock */
    switch ((uint32_t)hlptim->Instance)
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	4a1d      	ldr	r2, [pc, #116]	@ (80058ac <LPTIM_Disable+0x1f4>)
 8005836:	4293      	cmp	r3, r2
 8005838:	d003      	beq.n	8005842 <LPTIM_Disable+0x18a>
 800583a:	4a1d      	ldr	r2, [pc, #116]	@ (80058b0 <LPTIM_Disable+0x1f8>)
 800583c:	4293      	cmp	r3, r2
 800583e:	d00b      	beq.n	8005858 <LPTIM_Disable+0x1a0>
      case LPTIM2_BASE:
        __HAL_RCC_LPTIM2_CONFIG(tmpclksource);
        break;
#endif /* LPTIM2 */
      default:
        break;
 8005840:	e015      	b.n	800586e <LPTIM_Disable+0x1b6>
        __HAL_RCC_LPTIM1_CONFIG(tmpclksource);
 8005842:	4b1c      	ldr	r3, [pc, #112]	@ (80058b4 <LPTIM_Disable+0x1fc>)
 8005844:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005848:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800584c:	4919      	ldr	r1, [pc, #100]	@ (80058b4 <LPTIM_Disable+0x1fc>)
 800584e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005850:	4313      	orrs	r3, r2
 8005852:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
        break;
 8005856:	e00a      	b.n	800586e <LPTIM_Disable+0x1b6>
        __HAL_RCC_LPTIM2_CONFIG(tmpclksource);
 8005858:	4b16      	ldr	r3, [pc, #88]	@ (80058b4 <LPTIM_Disable+0x1fc>)
 800585a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800585e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005862:	4914      	ldr	r1, [pc, #80]	@ (80058b4 <LPTIM_Disable+0x1fc>)
 8005864:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005866:	4313      	orrs	r3, r2
 8005868:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
        break;
 800586c:	bf00      	nop
    }
  }

  /* Restore configuration registers (LPTIM should be disabled first) */
  hlptim->Instance->CR &= ~(LPTIM_CR_ENABLE);
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	691a      	ldr	r2, [r3, #16]
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	f022 0201 	bic.w	r2, r2, #1
 800587c:	611a      	str	r2, [r3, #16]
  hlptim->Instance->IER = tmpIER;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005884:	609a      	str	r2, [r3, #8]
  hlptim->Instance->CFGR = tmpCFGR;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	6a3a      	ldr	r2, [r7, #32]
 800588c:	60da      	str	r2, [r3, #12]
  hlptim->Instance->OR = tmpOR;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	697a      	ldr	r2, [r7, #20]
 8005894:	621a      	str	r2, [r3, #32]
 8005896:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005898:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800589a:	68bb      	ldr	r3, [r7, #8]
 800589c:	f383 8810 	msr	PRIMASK, r3
}
 80058a0:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 80058a2:	bf00      	nop
 80058a4:	3730      	adds	r7, #48	@ 0x30
 80058a6:	46bd      	mov	sp, r7
 80058a8:	bd80      	pop	{r7, pc}
 80058aa:	bf00      	nop
 80058ac:	40007c00 	.word	0x40007c00
 80058b0:	40009400 	.word	0x40009400
 80058b4:	40021000 	.word	0x40021000

080058b8 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80058b8:	b480      	push	{r7}
 80058ba:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80058bc:	4b05      	ldr	r3, [pc, #20]	@ (80058d4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	4a04      	ldr	r2, [pc, #16]	@ (80058d4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80058c2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80058c6:	6013      	str	r3, [r2, #0]
}
 80058c8:	bf00      	nop
 80058ca:	46bd      	mov	sp, r7
 80058cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d0:	4770      	bx	lr
 80058d2:	bf00      	nop
 80058d4:	40007000 	.word	0x40007000

080058d8 <HAL_PWR_EnterSLEEPMode>:
  * @note  When WFI entry is used, tick interrupt have to be disabled if not desired as
  *        the interrupt wake up source.
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 80058d8:	b580      	push	{r7, lr}
 80058da:	b082      	sub	sp, #8
 80058dc:	af00      	add	r7, sp, #0
 80058de:	6078      	str	r0, [r7, #4]
 80058e0:	460b      	mov	r3, r1
 80058e2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Set Regulator parameter */
  if (Regulator == PWR_MAINREGULATOR_ON)
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d10c      	bne.n	8005904 <HAL_PWR_EnterSLEEPMode+0x2c>
  {
    /* If in low-power run mode at this point, exit it */
    if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF))
 80058ea:	4b13      	ldr	r3, [pc, #76]	@ (8005938 <HAL_PWR_EnterSLEEPMode+0x60>)
 80058ec:	695b      	ldr	r3, [r3, #20]
 80058ee:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80058f2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80058f6:	d10e      	bne.n	8005916 <HAL_PWR_EnterSLEEPMode+0x3e>
    {
      if (HAL_PWREx_DisableLowPowerRunMode() != HAL_OK)
 80058f8:	f000 f896 	bl	8005a28 <HAL_PWREx_DisableLowPowerRunMode>
 80058fc:	4603      	mov	r3, r0
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d009      	beq.n	8005916 <HAL_PWR_EnterSLEEPMode+0x3e>
      {
        return ;
 8005902:	e016      	b.n	8005932 <HAL_PWR_EnterSLEEPMode+0x5a>
  }
  else
  {
    /* If in run mode, first move to low-power run mode.
       The system clock frequency must be below 2 MHz at this point. */
    if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF) == RESET)
 8005904:	4b0c      	ldr	r3, [pc, #48]	@ (8005938 <HAL_PWR_EnterSLEEPMode+0x60>)
 8005906:	695b      	ldr	r3, [r3, #20]
 8005908:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800590c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005910:	d001      	beq.n	8005916 <HAL_PWR_EnterSLEEPMode+0x3e>
    {
      HAL_PWREx_EnableLowPowerRunMode();
 8005912:	f000 f879 	bl	8005a08 <HAL_PWREx_EnableLowPowerRunMode>
    }
  }

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8005916:	4b09      	ldr	r3, [pc, #36]	@ (800593c <HAL_PWR_EnterSLEEPMode+0x64>)
 8005918:	691b      	ldr	r3, [r3, #16]
 800591a:	4a08      	ldr	r2, [pc, #32]	@ (800593c <HAL_PWR_EnterSLEEPMode+0x64>)
 800591c:	f023 0304 	bic.w	r3, r3, #4
 8005920:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8005922:	78fb      	ldrb	r3, [r7, #3]
 8005924:	2b01      	cmp	r3, #1
 8005926:	d101      	bne.n	800592c <HAL_PWR_EnterSLEEPMode+0x54>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8005928:	bf30      	wfi
 800592a:	e002      	b.n	8005932 <HAL_PWR_EnterSLEEPMode+0x5a>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 800592c:	bf40      	sev
    __WFE();
 800592e:	bf20      	wfe
    __WFE();
 8005930:	bf20      	wfe
  }

}
 8005932:	3708      	adds	r7, #8
 8005934:	46bd      	mov	sp, r7
 8005936:	bd80      	pop	{r7, pc}
 8005938:	40007000 	.word	0x40007000
 800593c:	e000ed00 	.word	0xe000ed00

08005940 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8005940:	b480      	push	{r7}
 8005942:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8005944:	4b04      	ldr	r3, [pc, #16]	@ (8005958 <HAL_PWREx_GetVoltageRange+0x18>)
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 800594c:	4618      	mov	r0, r3
 800594e:	46bd      	mov	sp, r7
 8005950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005954:	4770      	bx	lr
 8005956:	bf00      	nop
 8005958:	40007000 	.word	0x40007000

0800595c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800595c:	b480      	push	{r7}
 800595e:	b085      	sub	sp, #20
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800596a:	d130      	bne.n	80059ce <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800596c:	4b23      	ldr	r3, [pc, #140]	@ (80059fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005974:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005978:	d038      	beq.n	80059ec <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800597a:	4b20      	ldr	r3, [pc, #128]	@ (80059fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005982:	4a1e      	ldr	r2, [pc, #120]	@ (80059fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005984:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005988:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800598a:	4b1d      	ldr	r3, [pc, #116]	@ (8005a00 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	2232      	movs	r2, #50	@ 0x32
 8005990:	fb02 f303 	mul.w	r3, r2, r3
 8005994:	4a1b      	ldr	r2, [pc, #108]	@ (8005a04 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8005996:	fba2 2303 	umull	r2, r3, r2, r3
 800599a:	0c9b      	lsrs	r3, r3, #18
 800599c:	3301      	adds	r3, #1
 800599e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80059a0:	e002      	b.n	80059a8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	3b01      	subs	r3, #1
 80059a6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80059a8:	4b14      	ldr	r3, [pc, #80]	@ (80059fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80059aa:	695b      	ldr	r3, [r3, #20]
 80059ac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80059b0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80059b4:	d102      	bne.n	80059bc <HAL_PWREx_ControlVoltageScaling+0x60>
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d1f2      	bne.n	80059a2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80059bc:	4b0f      	ldr	r3, [pc, #60]	@ (80059fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80059be:	695b      	ldr	r3, [r3, #20]
 80059c0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80059c4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80059c8:	d110      	bne.n	80059ec <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80059ca:	2303      	movs	r3, #3
 80059cc:	e00f      	b.n	80059ee <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80059ce:	4b0b      	ldr	r3, [pc, #44]	@ (80059fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80059d6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80059da:	d007      	beq.n	80059ec <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80059dc:	4b07      	ldr	r3, [pc, #28]	@ (80059fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80059e4:	4a05      	ldr	r2, [pc, #20]	@ (80059fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80059e6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80059ea:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80059ec:	2300      	movs	r3, #0
}
 80059ee:	4618      	mov	r0, r3
 80059f0:	3714      	adds	r7, #20
 80059f2:	46bd      	mov	sp, r7
 80059f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f8:	4770      	bx	lr
 80059fa:	bf00      	nop
 80059fc:	40007000 	.word	0x40007000
 8005a00:	20000004 	.word	0x20000004
 8005a04:	431bde83 	.word	0x431bde83

08005a08 <HAL_PWREx_EnableLowPowerRunMode>:
  *        Setting RUN_PD in FLASH_ACR then appropriately reducing the clock frequency must
  *        be done before calling HAL_PWREx_EnableLowPowerRunMode() API.
  * @retval None
  */
void HAL_PWREx_EnableLowPowerRunMode(void)
{
 8005a08:	b480      	push	{r7}
 8005a0a:	af00      	add	r7, sp, #0
  /* Set Regulator parameter */
  SET_BIT(PWR->CR1, PWR_CR1_LPR);
 8005a0c:	4b05      	ldr	r3, [pc, #20]	@ (8005a24 <HAL_PWREx_EnableLowPowerRunMode+0x1c>)
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	4a04      	ldr	r2, [pc, #16]	@ (8005a24 <HAL_PWREx_EnableLowPowerRunMode+0x1c>)
 8005a12:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005a16:	6013      	str	r3, [r2, #0]
}
 8005a18:	bf00      	nop
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a20:	4770      	bx	lr
 8005a22:	bf00      	nop
 8005a24:	40007000 	.word	0x40007000

08005a28 <HAL_PWREx_DisableLowPowerRunMode>:
  *        returns HAL_TIMEOUT status). The system clock frequency can then be
  *        increased above 2 MHz.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_DisableLowPowerRunMode(void)
{
 8005a28:	b480      	push	{r7}
 8005a2a:	b083      	sub	sp, #12
 8005a2c:	af00      	add	r7, sp, #0
  uint32_t wait_loop_index;

  /* Clear LPR bit */
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 8005a2e:	4b17      	ldr	r3, [pc, #92]	@ (8005a8c <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	4a16      	ldr	r2, [pc, #88]	@ (8005a8c <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 8005a34:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005a38:	6013      	str	r3, [r2, #0]

  /* Wait until REGLPF is reset */
  wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005a3a:	4b15      	ldr	r3, [pc, #84]	@ (8005a90 <HAL_PWREx_DisableLowPowerRunMode+0x68>)
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	2232      	movs	r2, #50	@ 0x32
 8005a40:	fb02 f303 	mul.w	r3, r2, r3
 8005a44:	4a13      	ldr	r2, [pc, #76]	@ (8005a94 <HAL_PWREx_DisableLowPowerRunMode+0x6c>)
 8005a46:	fba2 2303 	umull	r2, r3, r2, r3
 8005a4a:	0c9b      	lsrs	r3, r3, #18
 8005a4c:	3301      	adds	r3, #1
 8005a4e:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 8005a50:	e002      	b.n	8005a58 <HAL_PWREx_DisableLowPowerRunMode+0x30>
  {
    wait_loop_index--;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	3b01      	subs	r3, #1
 8005a56:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 8005a58:	4b0c      	ldr	r3, [pc, #48]	@ (8005a8c <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 8005a5a:	695b      	ldr	r3, [r3, #20]
 8005a5c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005a60:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005a64:	d102      	bne.n	8005a6c <HAL_PWREx_DisableLowPowerRunMode+0x44>
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d1f2      	bne.n	8005a52 <HAL_PWREx_DisableLowPowerRunMode+0x2a>
  }
  if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF))
 8005a6c:	4b07      	ldr	r3, [pc, #28]	@ (8005a8c <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 8005a6e:	695b      	ldr	r3, [r3, #20]
 8005a70:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005a74:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005a78:	d101      	bne.n	8005a7e <HAL_PWREx_DisableLowPowerRunMode+0x56>
  {
    return HAL_TIMEOUT;
 8005a7a:	2303      	movs	r3, #3
 8005a7c:	e000      	b.n	8005a80 <HAL_PWREx_DisableLowPowerRunMode+0x58>
  }

  return HAL_OK;
 8005a7e:	2300      	movs	r3, #0
}
 8005a80:	4618      	mov	r0, r3
 8005a82:	370c      	adds	r7, #12
 8005a84:	46bd      	mov	sp, r7
 8005a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8a:	4770      	bx	lr
 8005a8c:	40007000 	.word	0x40007000
 8005a90:	20000004 	.word	0x20000004
 8005a94:	431bde83 	.word	0x431bde83

08005a98 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005a98:	b580      	push	{r7, lr}
 8005a9a:	b088      	sub	sp, #32
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d102      	bne.n	8005aac <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8005aa6:	2301      	movs	r3, #1
 8005aa8:	f000 bc02 	b.w	80062b0 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005aac:	4b96      	ldr	r3, [pc, #600]	@ (8005d08 <HAL_RCC_OscConfig+0x270>)
 8005aae:	689b      	ldr	r3, [r3, #8]
 8005ab0:	f003 030c 	and.w	r3, r3, #12
 8005ab4:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005ab6:	4b94      	ldr	r3, [pc, #592]	@ (8005d08 <HAL_RCC_OscConfig+0x270>)
 8005ab8:	68db      	ldr	r3, [r3, #12]
 8005aba:	f003 0303 	and.w	r3, r3, #3
 8005abe:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	f003 0310 	and.w	r3, r3, #16
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	f000 80e4 	beq.w	8005c96 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005ace:	69bb      	ldr	r3, [r7, #24]
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d007      	beq.n	8005ae4 <HAL_RCC_OscConfig+0x4c>
 8005ad4:	69bb      	ldr	r3, [r7, #24]
 8005ad6:	2b0c      	cmp	r3, #12
 8005ad8:	f040 808b 	bne.w	8005bf2 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8005adc:	697b      	ldr	r3, [r7, #20]
 8005ade:	2b01      	cmp	r3, #1
 8005ae0:	f040 8087 	bne.w	8005bf2 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005ae4:	4b88      	ldr	r3, [pc, #544]	@ (8005d08 <HAL_RCC_OscConfig+0x270>)
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	f003 0302 	and.w	r3, r3, #2
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d005      	beq.n	8005afc <HAL_RCC_OscConfig+0x64>
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	699b      	ldr	r3, [r3, #24]
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d101      	bne.n	8005afc <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8005af8:	2301      	movs	r3, #1
 8005afa:	e3d9      	b.n	80062b0 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	6a1a      	ldr	r2, [r3, #32]
 8005b00:	4b81      	ldr	r3, [pc, #516]	@ (8005d08 <HAL_RCC_OscConfig+0x270>)
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	f003 0308 	and.w	r3, r3, #8
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d004      	beq.n	8005b16 <HAL_RCC_OscConfig+0x7e>
 8005b0c:	4b7e      	ldr	r3, [pc, #504]	@ (8005d08 <HAL_RCC_OscConfig+0x270>)
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005b14:	e005      	b.n	8005b22 <HAL_RCC_OscConfig+0x8a>
 8005b16:	4b7c      	ldr	r3, [pc, #496]	@ (8005d08 <HAL_RCC_OscConfig+0x270>)
 8005b18:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005b1c:	091b      	lsrs	r3, r3, #4
 8005b1e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005b22:	4293      	cmp	r3, r2
 8005b24:	d223      	bcs.n	8005b6e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	6a1b      	ldr	r3, [r3, #32]
 8005b2a:	4618      	mov	r0, r3
 8005b2c:	f000 fd8c 	bl	8006648 <RCC_SetFlashLatencyFromMSIRange>
 8005b30:	4603      	mov	r3, r0
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d001      	beq.n	8005b3a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8005b36:	2301      	movs	r3, #1
 8005b38:	e3ba      	b.n	80062b0 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005b3a:	4b73      	ldr	r3, [pc, #460]	@ (8005d08 <HAL_RCC_OscConfig+0x270>)
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	4a72      	ldr	r2, [pc, #456]	@ (8005d08 <HAL_RCC_OscConfig+0x270>)
 8005b40:	f043 0308 	orr.w	r3, r3, #8
 8005b44:	6013      	str	r3, [r2, #0]
 8005b46:	4b70      	ldr	r3, [pc, #448]	@ (8005d08 <HAL_RCC_OscConfig+0x270>)
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	6a1b      	ldr	r3, [r3, #32]
 8005b52:	496d      	ldr	r1, [pc, #436]	@ (8005d08 <HAL_RCC_OscConfig+0x270>)
 8005b54:	4313      	orrs	r3, r2
 8005b56:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005b58:	4b6b      	ldr	r3, [pc, #428]	@ (8005d08 <HAL_RCC_OscConfig+0x270>)
 8005b5a:	685b      	ldr	r3, [r3, #4]
 8005b5c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	69db      	ldr	r3, [r3, #28]
 8005b64:	021b      	lsls	r3, r3, #8
 8005b66:	4968      	ldr	r1, [pc, #416]	@ (8005d08 <HAL_RCC_OscConfig+0x270>)
 8005b68:	4313      	orrs	r3, r2
 8005b6a:	604b      	str	r3, [r1, #4]
 8005b6c:	e025      	b.n	8005bba <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005b6e:	4b66      	ldr	r3, [pc, #408]	@ (8005d08 <HAL_RCC_OscConfig+0x270>)
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	4a65      	ldr	r2, [pc, #404]	@ (8005d08 <HAL_RCC_OscConfig+0x270>)
 8005b74:	f043 0308 	orr.w	r3, r3, #8
 8005b78:	6013      	str	r3, [r2, #0]
 8005b7a:	4b63      	ldr	r3, [pc, #396]	@ (8005d08 <HAL_RCC_OscConfig+0x270>)
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	6a1b      	ldr	r3, [r3, #32]
 8005b86:	4960      	ldr	r1, [pc, #384]	@ (8005d08 <HAL_RCC_OscConfig+0x270>)
 8005b88:	4313      	orrs	r3, r2
 8005b8a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005b8c:	4b5e      	ldr	r3, [pc, #376]	@ (8005d08 <HAL_RCC_OscConfig+0x270>)
 8005b8e:	685b      	ldr	r3, [r3, #4]
 8005b90:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	69db      	ldr	r3, [r3, #28]
 8005b98:	021b      	lsls	r3, r3, #8
 8005b9a:	495b      	ldr	r1, [pc, #364]	@ (8005d08 <HAL_RCC_OscConfig+0x270>)
 8005b9c:	4313      	orrs	r3, r2
 8005b9e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005ba0:	69bb      	ldr	r3, [r7, #24]
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d109      	bne.n	8005bba <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	6a1b      	ldr	r3, [r3, #32]
 8005baa:	4618      	mov	r0, r3
 8005bac:	f000 fd4c 	bl	8006648 <RCC_SetFlashLatencyFromMSIRange>
 8005bb0:	4603      	mov	r3, r0
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d001      	beq.n	8005bba <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8005bb6:	2301      	movs	r3, #1
 8005bb8:	e37a      	b.n	80062b0 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005bba:	f000 fc81 	bl	80064c0 <HAL_RCC_GetSysClockFreq>
 8005bbe:	4602      	mov	r2, r0
 8005bc0:	4b51      	ldr	r3, [pc, #324]	@ (8005d08 <HAL_RCC_OscConfig+0x270>)
 8005bc2:	689b      	ldr	r3, [r3, #8]
 8005bc4:	091b      	lsrs	r3, r3, #4
 8005bc6:	f003 030f 	and.w	r3, r3, #15
 8005bca:	4950      	ldr	r1, [pc, #320]	@ (8005d0c <HAL_RCC_OscConfig+0x274>)
 8005bcc:	5ccb      	ldrb	r3, [r1, r3]
 8005bce:	f003 031f 	and.w	r3, r3, #31
 8005bd2:	fa22 f303 	lsr.w	r3, r2, r3
 8005bd6:	4a4e      	ldr	r2, [pc, #312]	@ (8005d10 <HAL_RCC_OscConfig+0x278>)
 8005bd8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8005bda:	4b4e      	ldr	r3, [pc, #312]	@ (8005d14 <HAL_RCC_OscConfig+0x27c>)
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	4618      	mov	r0, r3
 8005be0:	f7fc ff14 	bl	8002a0c <HAL_InitTick>
 8005be4:	4603      	mov	r3, r0
 8005be6:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8005be8:	7bfb      	ldrb	r3, [r7, #15]
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d052      	beq.n	8005c94 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8005bee:	7bfb      	ldrb	r3, [r7, #15]
 8005bf0:	e35e      	b.n	80062b0 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	699b      	ldr	r3, [r3, #24]
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d032      	beq.n	8005c60 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005bfa:	4b43      	ldr	r3, [pc, #268]	@ (8005d08 <HAL_RCC_OscConfig+0x270>)
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	4a42      	ldr	r2, [pc, #264]	@ (8005d08 <HAL_RCC_OscConfig+0x270>)
 8005c00:	f043 0301 	orr.w	r3, r3, #1
 8005c04:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005c06:	f7fc ff51 	bl	8002aac <HAL_GetTick>
 8005c0a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005c0c:	e008      	b.n	8005c20 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005c0e:	f7fc ff4d 	bl	8002aac <HAL_GetTick>
 8005c12:	4602      	mov	r2, r0
 8005c14:	693b      	ldr	r3, [r7, #16]
 8005c16:	1ad3      	subs	r3, r2, r3
 8005c18:	2b02      	cmp	r3, #2
 8005c1a:	d901      	bls.n	8005c20 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8005c1c:	2303      	movs	r3, #3
 8005c1e:	e347      	b.n	80062b0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005c20:	4b39      	ldr	r3, [pc, #228]	@ (8005d08 <HAL_RCC_OscConfig+0x270>)
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	f003 0302 	and.w	r3, r3, #2
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d0f0      	beq.n	8005c0e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005c2c:	4b36      	ldr	r3, [pc, #216]	@ (8005d08 <HAL_RCC_OscConfig+0x270>)
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	4a35      	ldr	r2, [pc, #212]	@ (8005d08 <HAL_RCC_OscConfig+0x270>)
 8005c32:	f043 0308 	orr.w	r3, r3, #8
 8005c36:	6013      	str	r3, [r2, #0]
 8005c38:	4b33      	ldr	r3, [pc, #204]	@ (8005d08 <HAL_RCC_OscConfig+0x270>)
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	6a1b      	ldr	r3, [r3, #32]
 8005c44:	4930      	ldr	r1, [pc, #192]	@ (8005d08 <HAL_RCC_OscConfig+0x270>)
 8005c46:	4313      	orrs	r3, r2
 8005c48:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005c4a:	4b2f      	ldr	r3, [pc, #188]	@ (8005d08 <HAL_RCC_OscConfig+0x270>)
 8005c4c:	685b      	ldr	r3, [r3, #4]
 8005c4e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	69db      	ldr	r3, [r3, #28]
 8005c56:	021b      	lsls	r3, r3, #8
 8005c58:	492b      	ldr	r1, [pc, #172]	@ (8005d08 <HAL_RCC_OscConfig+0x270>)
 8005c5a:	4313      	orrs	r3, r2
 8005c5c:	604b      	str	r3, [r1, #4]
 8005c5e:	e01a      	b.n	8005c96 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005c60:	4b29      	ldr	r3, [pc, #164]	@ (8005d08 <HAL_RCC_OscConfig+0x270>)
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	4a28      	ldr	r2, [pc, #160]	@ (8005d08 <HAL_RCC_OscConfig+0x270>)
 8005c66:	f023 0301 	bic.w	r3, r3, #1
 8005c6a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005c6c:	f7fc ff1e 	bl	8002aac <HAL_GetTick>
 8005c70:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005c72:	e008      	b.n	8005c86 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005c74:	f7fc ff1a 	bl	8002aac <HAL_GetTick>
 8005c78:	4602      	mov	r2, r0
 8005c7a:	693b      	ldr	r3, [r7, #16]
 8005c7c:	1ad3      	subs	r3, r2, r3
 8005c7e:	2b02      	cmp	r3, #2
 8005c80:	d901      	bls.n	8005c86 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8005c82:	2303      	movs	r3, #3
 8005c84:	e314      	b.n	80062b0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005c86:	4b20      	ldr	r3, [pc, #128]	@ (8005d08 <HAL_RCC_OscConfig+0x270>)
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	f003 0302 	and.w	r3, r3, #2
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d1f0      	bne.n	8005c74 <HAL_RCC_OscConfig+0x1dc>
 8005c92:	e000      	b.n	8005c96 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005c94:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	f003 0301 	and.w	r3, r3, #1
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d073      	beq.n	8005d8a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8005ca2:	69bb      	ldr	r3, [r7, #24]
 8005ca4:	2b08      	cmp	r3, #8
 8005ca6:	d005      	beq.n	8005cb4 <HAL_RCC_OscConfig+0x21c>
 8005ca8:	69bb      	ldr	r3, [r7, #24]
 8005caa:	2b0c      	cmp	r3, #12
 8005cac:	d10e      	bne.n	8005ccc <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005cae:	697b      	ldr	r3, [r7, #20]
 8005cb0:	2b03      	cmp	r3, #3
 8005cb2:	d10b      	bne.n	8005ccc <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005cb4:	4b14      	ldr	r3, [pc, #80]	@ (8005d08 <HAL_RCC_OscConfig+0x270>)
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d063      	beq.n	8005d88 <HAL_RCC_OscConfig+0x2f0>
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	685b      	ldr	r3, [r3, #4]
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d15f      	bne.n	8005d88 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8005cc8:	2301      	movs	r3, #1
 8005cca:	e2f1      	b.n	80062b0 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	685b      	ldr	r3, [r3, #4]
 8005cd0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005cd4:	d106      	bne.n	8005ce4 <HAL_RCC_OscConfig+0x24c>
 8005cd6:	4b0c      	ldr	r3, [pc, #48]	@ (8005d08 <HAL_RCC_OscConfig+0x270>)
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	4a0b      	ldr	r2, [pc, #44]	@ (8005d08 <HAL_RCC_OscConfig+0x270>)
 8005cdc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005ce0:	6013      	str	r3, [r2, #0]
 8005ce2:	e025      	b.n	8005d30 <HAL_RCC_OscConfig+0x298>
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	685b      	ldr	r3, [r3, #4]
 8005ce8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005cec:	d114      	bne.n	8005d18 <HAL_RCC_OscConfig+0x280>
 8005cee:	4b06      	ldr	r3, [pc, #24]	@ (8005d08 <HAL_RCC_OscConfig+0x270>)
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	4a05      	ldr	r2, [pc, #20]	@ (8005d08 <HAL_RCC_OscConfig+0x270>)
 8005cf4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005cf8:	6013      	str	r3, [r2, #0]
 8005cfa:	4b03      	ldr	r3, [pc, #12]	@ (8005d08 <HAL_RCC_OscConfig+0x270>)
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	4a02      	ldr	r2, [pc, #8]	@ (8005d08 <HAL_RCC_OscConfig+0x270>)
 8005d00:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005d04:	6013      	str	r3, [r2, #0]
 8005d06:	e013      	b.n	8005d30 <HAL_RCC_OscConfig+0x298>
 8005d08:	40021000 	.word	0x40021000
 8005d0c:	080084a4 	.word	0x080084a4
 8005d10:	20000004 	.word	0x20000004
 8005d14:	20000008 	.word	0x20000008
 8005d18:	4ba0      	ldr	r3, [pc, #640]	@ (8005f9c <HAL_RCC_OscConfig+0x504>)
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	4a9f      	ldr	r2, [pc, #636]	@ (8005f9c <HAL_RCC_OscConfig+0x504>)
 8005d1e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005d22:	6013      	str	r3, [r2, #0]
 8005d24:	4b9d      	ldr	r3, [pc, #628]	@ (8005f9c <HAL_RCC_OscConfig+0x504>)
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	4a9c      	ldr	r2, [pc, #624]	@ (8005f9c <HAL_RCC_OscConfig+0x504>)
 8005d2a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005d2e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	685b      	ldr	r3, [r3, #4]
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d013      	beq.n	8005d60 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d38:	f7fc feb8 	bl	8002aac <HAL_GetTick>
 8005d3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005d3e:	e008      	b.n	8005d52 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005d40:	f7fc feb4 	bl	8002aac <HAL_GetTick>
 8005d44:	4602      	mov	r2, r0
 8005d46:	693b      	ldr	r3, [r7, #16]
 8005d48:	1ad3      	subs	r3, r2, r3
 8005d4a:	2b64      	cmp	r3, #100	@ 0x64
 8005d4c:	d901      	bls.n	8005d52 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8005d4e:	2303      	movs	r3, #3
 8005d50:	e2ae      	b.n	80062b0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005d52:	4b92      	ldr	r3, [pc, #584]	@ (8005f9c <HAL_RCC_OscConfig+0x504>)
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d0f0      	beq.n	8005d40 <HAL_RCC_OscConfig+0x2a8>
 8005d5e:	e014      	b.n	8005d8a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d60:	f7fc fea4 	bl	8002aac <HAL_GetTick>
 8005d64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005d66:	e008      	b.n	8005d7a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005d68:	f7fc fea0 	bl	8002aac <HAL_GetTick>
 8005d6c:	4602      	mov	r2, r0
 8005d6e:	693b      	ldr	r3, [r7, #16]
 8005d70:	1ad3      	subs	r3, r2, r3
 8005d72:	2b64      	cmp	r3, #100	@ 0x64
 8005d74:	d901      	bls.n	8005d7a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8005d76:	2303      	movs	r3, #3
 8005d78:	e29a      	b.n	80062b0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005d7a:	4b88      	ldr	r3, [pc, #544]	@ (8005f9c <HAL_RCC_OscConfig+0x504>)
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d1f0      	bne.n	8005d68 <HAL_RCC_OscConfig+0x2d0>
 8005d86:	e000      	b.n	8005d8a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005d88:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	f003 0302 	and.w	r3, r3, #2
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d060      	beq.n	8005e58 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8005d96:	69bb      	ldr	r3, [r7, #24]
 8005d98:	2b04      	cmp	r3, #4
 8005d9a:	d005      	beq.n	8005da8 <HAL_RCC_OscConfig+0x310>
 8005d9c:	69bb      	ldr	r3, [r7, #24]
 8005d9e:	2b0c      	cmp	r3, #12
 8005da0:	d119      	bne.n	8005dd6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005da2:	697b      	ldr	r3, [r7, #20]
 8005da4:	2b02      	cmp	r3, #2
 8005da6:	d116      	bne.n	8005dd6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005da8:	4b7c      	ldr	r3, [pc, #496]	@ (8005f9c <HAL_RCC_OscConfig+0x504>)
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d005      	beq.n	8005dc0 <HAL_RCC_OscConfig+0x328>
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	68db      	ldr	r3, [r3, #12]
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d101      	bne.n	8005dc0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8005dbc:	2301      	movs	r3, #1
 8005dbe:	e277      	b.n	80062b0 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005dc0:	4b76      	ldr	r3, [pc, #472]	@ (8005f9c <HAL_RCC_OscConfig+0x504>)
 8005dc2:	685b      	ldr	r3, [r3, #4]
 8005dc4:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	691b      	ldr	r3, [r3, #16]
 8005dcc:	061b      	lsls	r3, r3, #24
 8005dce:	4973      	ldr	r1, [pc, #460]	@ (8005f9c <HAL_RCC_OscConfig+0x504>)
 8005dd0:	4313      	orrs	r3, r2
 8005dd2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005dd4:	e040      	b.n	8005e58 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	68db      	ldr	r3, [r3, #12]
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d023      	beq.n	8005e26 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005dde:	4b6f      	ldr	r3, [pc, #444]	@ (8005f9c <HAL_RCC_OscConfig+0x504>)
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	4a6e      	ldr	r2, [pc, #440]	@ (8005f9c <HAL_RCC_OscConfig+0x504>)
 8005de4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005de8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005dea:	f7fc fe5f 	bl	8002aac <HAL_GetTick>
 8005dee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005df0:	e008      	b.n	8005e04 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005df2:	f7fc fe5b 	bl	8002aac <HAL_GetTick>
 8005df6:	4602      	mov	r2, r0
 8005df8:	693b      	ldr	r3, [r7, #16]
 8005dfa:	1ad3      	subs	r3, r2, r3
 8005dfc:	2b02      	cmp	r3, #2
 8005dfe:	d901      	bls.n	8005e04 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8005e00:	2303      	movs	r3, #3
 8005e02:	e255      	b.n	80062b0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005e04:	4b65      	ldr	r3, [pc, #404]	@ (8005f9c <HAL_RCC_OscConfig+0x504>)
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d0f0      	beq.n	8005df2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e10:	4b62      	ldr	r3, [pc, #392]	@ (8005f9c <HAL_RCC_OscConfig+0x504>)
 8005e12:	685b      	ldr	r3, [r3, #4]
 8005e14:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	691b      	ldr	r3, [r3, #16]
 8005e1c:	061b      	lsls	r3, r3, #24
 8005e1e:	495f      	ldr	r1, [pc, #380]	@ (8005f9c <HAL_RCC_OscConfig+0x504>)
 8005e20:	4313      	orrs	r3, r2
 8005e22:	604b      	str	r3, [r1, #4]
 8005e24:	e018      	b.n	8005e58 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005e26:	4b5d      	ldr	r3, [pc, #372]	@ (8005f9c <HAL_RCC_OscConfig+0x504>)
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	4a5c      	ldr	r2, [pc, #368]	@ (8005f9c <HAL_RCC_OscConfig+0x504>)
 8005e2c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005e30:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e32:	f7fc fe3b 	bl	8002aac <HAL_GetTick>
 8005e36:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005e38:	e008      	b.n	8005e4c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005e3a:	f7fc fe37 	bl	8002aac <HAL_GetTick>
 8005e3e:	4602      	mov	r2, r0
 8005e40:	693b      	ldr	r3, [r7, #16]
 8005e42:	1ad3      	subs	r3, r2, r3
 8005e44:	2b02      	cmp	r3, #2
 8005e46:	d901      	bls.n	8005e4c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8005e48:	2303      	movs	r3, #3
 8005e4a:	e231      	b.n	80062b0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005e4c:	4b53      	ldr	r3, [pc, #332]	@ (8005f9c <HAL_RCC_OscConfig+0x504>)
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d1f0      	bne.n	8005e3a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	f003 0308 	and.w	r3, r3, #8
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d03c      	beq.n	8005ede <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	695b      	ldr	r3, [r3, #20]
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d01c      	beq.n	8005ea6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005e6c:	4b4b      	ldr	r3, [pc, #300]	@ (8005f9c <HAL_RCC_OscConfig+0x504>)
 8005e6e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005e72:	4a4a      	ldr	r2, [pc, #296]	@ (8005f9c <HAL_RCC_OscConfig+0x504>)
 8005e74:	f043 0301 	orr.w	r3, r3, #1
 8005e78:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e7c:	f7fc fe16 	bl	8002aac <HAL_GetTick>
 8005e80:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005e82:	e008      	b.n	8005e96 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005e84:	f7fc fe12 	bl	8002aac <HAL_GetTick>
 8005e88:	4602      	mov	r2, r0
 8005e8a:	693b      	ldr	r3, [r7, #16]
 8005e8c:	1ad3      	subs	r3, r2, r3
 8005e8e:	2b02      	cmp	r3, #2
 8005e90:	d901      	bls.n	8005e96 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8005e92:	2303      	movs	r3, #3
 8005e94:	e20c      	b.n	80062b0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005e96:	4b41      	ldr	r3, [pc, #260]	@ (8005f9c <HAL_RCC_OscConfig+0x504>)
 8005e98:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005e9c:	f003 0302 	and.w	r3, r3, #2
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d0ef      	beq.n	8005e84 <HAL_RCC_OscConfig+0x3ec>
 8005ea4:	e01b      	b.n	8005ede <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005ea6:	4b3d      	ldr	r3, [pc, #244]	@ (8005f9c <HAL_RCC_OscConfig+0x504>)
 8005ea8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005eac:	4a3b      	ldr	r2, [pc, #236]	@ (8005f9c <HAL_RCC_OscConfig+0x504>)
 8005eae:	f023 0301 	bic.w	r3, r3, #1
 8005eb2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005eb6:	f7fc fdf9 	bl	8002aac <HAL_GetTick>
 8005eba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005ebc:	e008      	b.n	8005ed0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005ebe:	f7fc fdf5 	bl	8002aac <HAL_GetTick>
 8005ec2:	4602      	mov	r2, r0
 8005ec4:	693b      	ldr	r3, [r7, #16]
 8005ec6:	1ad3      	subs	r3, r2, r3
 8005ec8:	2b02      	cmp	r3, #2
 8005eca:	d901      	bls.n	8005ed0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8005ecc:	2303      	movs	r3, #3
 8005ece:	e1ef      	b.n	80062b0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005ed0:	4b32      	ldr	r3, [pc, #200]	@ (8005f9c <HAL_RCC_OscConfig+0x504>)
 8005ed2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005ed6:	f003 0302 	and.w	r3, r3, #2
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d1ef      	bne.n	8005ebe <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	f003 0304 	and.w	r3, r3, #4
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	f000 80a6 	beq.w	8006038 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005eec:	2300      	movs	r3, #0
 8005eee:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8005ef0:	4b2a      	ldr	r3, [pc, #168]	@ (8005f9c <HAL_RCC_OscConfig+0x504>)
 8005ef2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ef4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d10d      	bne.n	8005f18 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005efc:	4b27      	ldr	r3, [pc, #156]	@ (8005f9c <HAL_RCC_OscConfig+0x504>)
 8005efe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f00:	4a26      	ldr	r2, [pc, #152]	@ (8005f9c <HAL_RCC_OscConfig+0x504>)
 8005f02:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005f06:	6593      	str	r3, [r2, #88]	@ 0x58
 8005f08:	4b24      	ldr	r3, [pc, #144]	@ (8005f9c <HAL_RCC_OscConfig+0x504>)
 8005f0a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f0c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005f10:	60bb      	str	r3, [r7, #8]
 8005f12:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005f14:	2301      	movs	r3, #1
 8005f16:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005f18:	4b21      	ldr	r3, [pc, #132]	@ (8005fa0 <HAL_RCC_OscConfig+0x508>)
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d118      	bne.n	8005f56 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005f24:	4b1e      	ldr	r3, [pc, #120]	@ (8005fa0 <HAL_RCC_OscConfig+0x508>)
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	4a1d      	ldr	r2, [pc, #116]	@ (8005fa0 <HAL_RCC_OscConfig+0x508>)
 8005f2a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005f2e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005f30:	f7fc fdbc 	bl	8002aac <HAL_GetTick>
 8005f34:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005f36:	e008      	b.n	8005f4a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005f38:	f7fc fdb8 	bl	8002aac <HAL_GetTick>
 8005f3c:	4602      	mov	r2, r0
 8005f3e:	693b      	ldr	r3, [r7, #16]
 8005f40:	1ad3      	subs	r3, r2, r3
 8005f42:	2b02      	cmp	r3, #2
 8005f44:	d901      	bls.n	8005f4a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8005f46:	2303      	movs	r3, #3
 8005f48:	e1b2      	b.n	80062b0 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005f4a:	4b15      	ldr	r3, [pc, #84]	@ (8005fa0 <HAL_RCC_OscConfig+0x508>)
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d0f0      	beq.n	8005f38 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	689b      	ldr	r3, [r3, #8]
 8005f5a:	2b01      	cmp	r3, #1
 8005f5c:	d108      	bne.n	8005f70 <HAL_RCC_OscConfig+0x4d8>
 8005f5e:	4b0f      	ldr	r3, [pc, #60]	@ (8005f9c <HAL_RCC_OscConfig+0x504>)
 8005f60:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005f64:	4a0d      	ldr	r2, [pc, #52]	@ (8005f9c <HAL_RCC_OscConfig+0x504>)
 8005f66:	f043 0301 	orr.w	r3, r3, #1
 8005f6a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005f6e:	e029      	b.n	8005fc4 <HAL_RCC_OscConfig+0x52c>
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	689b      	ldr	r3, [r3, #8]
 8005f74:	2b05      	cmp	r3, #5
 8005f76:	d115      	bne.n	8005fa4 <HAL_RCC_OscConfig+0x50c>
 8005f78:	4b08      	ldr	r3, [pc, #32]	@ (8005f9c <HAL_RCC_OscConfig+0x504>)
 8005f7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005f7e:	4a07      	ldr	r2, [pc, #28]	@ (8005f9c <HAL_RCC_OscConfig+0x504>)
 8005f80:	f043 0304 	orr.w	r3, r3, #4
 8005f84:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005f88:	4b04      	ldr	r3, [pc, #16]	@ (8005f9c <HAL_RCC_OscConfig+0x504>)
 8005f8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005f8e:	4a03      	ldr	r2, [pc, #12]	@ (8005f9c <HAL_RCC_OscConfig+0x504>)
 8005f90:	f043 0301 	orr.w	r3, r3, #1
 8005f94:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005f98:	e014      	b.n	8005fc4 <HAL_RCC_OscConfig+0x52c>
 8005f9a:	bf00      	nop
 8005f9c:	40021000 	.word	0x40021000
 8005fa0:	40007000 	.word	0x40007000
 8005fa4:	4b9a      	ldr	r3, [pc, #616]	@ (8006210 <HAL_RCC_OscConfig+0x778>)
 8005fa6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005faa:	4a99      	ldr	r2, [pc, #612]	@ (8006210 <HAL_RCC_OscConfig+0x778>)
 8005fac:	f023 0301 	bic.w	r3, r3, #1
 8005fb0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005fb4:	4b96      	ldr	r3, [pc, #600]	@ (8006210 <HAL_RCC_OscConfig+0x778>)
 8005fb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005fba:	4a95      	ldr	r2, [pc, #596]	@ (8006210 <HAL_RCC_OscConfig+0x778>)
 8005fbc:	f023 0304 	bic.w	r3, r3, #4
 8005fc0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	689b      	ldr	r3, [r3, #8]
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d016      	beq.n	8005ffa <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005fcc:	f7fc fd6e 	bl	8002aac <HAL_GetTick>
 8005fd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005fd2:	e00a      	b.n	8005fea <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005fd4:	f7fc fd6a 	bl	8002aac <HAL_GetTick>
 8005fd8:	4602      	mov	r2, r0
 8005fda:	693b      	ldr	r3, [r7, #16]
 8005fdc:	1ad3      	subs	r3, r2, r3
 8005fde:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005fe2:	4293      	cmp	r3, r2
 8005fe4:	d901      	bls.n	8005fea <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8005fe6:	2303      	movs	r3, #3
 8005fe8:	e162      	b.n	80062b0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005fea:	4b89      	ldr	r3, [pc, #548]	@ (8006210 <HAL_RCC_OscConfig+0x778>)
 8005fec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005ff0:	f003 0302 	and.w	r3, r3, #2
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d0ed      	beq.n	8005fd4 <HAL_RCC_OscConfig+0x53c>
 8005ff8:	e015      	b.n	8006026 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ffa:	f7fc fd57 	bl	8002aac <HAL_GetTick>
 8005ffe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006000:	e00a      	b.n	8006018 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006002:	f7fc fd53 	bl	8002aac <HAL_GetTick>
 8006006:	4602      	mov	r2, r0
 8006008:	693b      	ldr	r3, [r7, #16]
 800600a:	1ad3      	subs	r3, r2, r3
 800600c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006010:	4293      	cmp	r3, r2
 8006012:	d901      	bls.n	8006018 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8006014:	2303      	movs	r3, #3
 8006016:	e14b      	b.n	80062b0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006018:	4b7d      	ldr	r3, [pc, #500]	@ (8006210 <HAL_RCC_OscConfig+0x778>)
 800601a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800601e:	f003 0302 	and.w	r3, r3, #2
 8006022:	2b00      	cmp	r3, #0
 8006024:	d1ed      	bne.n	8006002 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006026:	7ffb      	ldrb	r3, [r7, #31]
 8006028:	2b01      	cmp	r3, #1
 800602a:	d105      	bne.n	8006038 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800602c:	4b78      	ldr	r3, [pc, #480]	@ (8006210 <HAL_RCC_OscConfig+0x778>)
 800602e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006030:	4a77      	ldr	r2, [pc, #476]	@ (8006210 <HAL_RCC_OscConfig+0x778>)
 8006032:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006036:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	f003 0320 	and.w	r3, r3, #32
 8006040:	2b00      	cmp	r3, #0
 8006042:	d03c      	beq.n	80060be <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006048:	2b00      	cmp	r3, #0
 800604a:	d01c      	beq.n	8006086 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800604c:	4b70      	ldr	r3, [pc, #448]	@ (8006210 <HAL_RCC_OscConfig+0x778>)
 800604e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006052:	4a6f      	ldr	r2, [pc, #444]	@ (8006210 <HAL_RCC_OscConfig+0x778>)
 8006054:	f043 0301 	orr.w	r3, r3, #1
 8006058:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800605c:	f7fc fd26 	bl	8002aac <HAL_GetTick>
 8006060:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006062:	e008      	b.n	8006076 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006064:	f7fc fd22 	bl	8002aac <HAL_GetTick>
 8006068:	4602      	mov	r2, r0
 800606a:	693b      	ldr	r3, [r7, #16]
 800606c:	1ad3      	subs	r3, r2, r3
 800606e:	2b02      	cmp	r3, #2
 8006070:	d901      	bls.n	8006076 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8006072:	2303      	movs	r3, #3
 8006074:	e11c      	b.n	80062b0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006076:	4b66      	ldr	r3, [pc, #408]	@ (8006210 <HAL_RCC_OscConfig+0x778>)
 8006078:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800607c:	f003 0302 	and.w	r3, r3, #2
 8006080:	2b00      	cmp	r3, #0
 8006082:	d0ef      	beq.n	8006064 <HAL_RCC_OscConfig+0x5cc>
 8006084:	e01b      	b.n	80060be <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006086:	4b62      	ldr	r3, [pc, #392]	@ (8006210 <HAL_RCC_OscConfig+0x778>)
 8006088:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800608c:	4a60      	ldr	r2, [pc, #384]	@ (8006210 <HAL_RCC_OscConfig+0x778>)
 800608e:	f023 0301 	bic.w	r3, r3, #1
 8006092:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006096:	f7fc fd09 	bl	8002aac <HAL_GetTick>
 800609a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800609c:	e008      	b.n	80060b0 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800609e:	f7fc fd05 	bl	8002aac <HAL_GetTick>
 80060a2:	4602      	mov	r2, r0
 80060a4:	693b      	ldr	r3, [r7, #16]
 80060a6:	1ad3      	subs	r3, r2, r3
 80060a8:	2b02      	cmp	r3, #2
 80060aa:	d901      	bls.n	80060b0 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80060ac:	2303      	movs	r3, #3
 80060ae:	e0ff      	b.n	80062b0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80060b0:	4b57      	ldr	r3, [pc, #348]	@ (8006210 <HAL_RCC_OscConfig+0x778>)
 80060b2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80060b6:	f003 0302 	and.w	r3, r3, #2
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d1ef      	bne.n	800609e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	f000 80f3 	beq.w	80062ae <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060cc:	2b02      	cmp	r3, #2
 80060ce:	f040 80c9 	bne.w	8006264 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80060d2:	4b4f      	ldr	r3, [pc, #316]	@ (8006210 <HAL_RCC_OscConfig+0x778>)
 80060d4:	68db      	ldr	r3, [r3, #12]
 80060d6:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80060d8:	697b      	ldr	r3, [r7, #20]
 80060da:	f003 0203 	and.w	r2, r3, #3
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060e2:	429a      	cmp	r2, r3
 80060e4:	d12c      	bne.n	8006140 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80060e6:	697b      	ldr	r3, [r7, #20]
 80060e8:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80060f0:	3b01      	subs	r3, #1
 80060f2:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80060f4:	429a      	cmp	r2, r3
 80060f6:	d123      	bne.n	8006140 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80060f8:	697b      	ldr	r3, [r7, #20]
 80060fa:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006102:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006104:	429a      	cmp	r2, r3
 8006106:	d11b      	bne.n	8006140 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006108:	697b      	ldr	r3, [r7, #20]
 800610a:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006112:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006114:	429a      	cmp	r2, r3
 8006116:	d113      	bne.n	8006140 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006118:	697b      	ldr	r3, [r7, #20]
 800611a:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006122:	085b      	lsrs	r3, r3, #1
 8006124:	3b01      	subs	r3, #1
 8006126:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006128:	429a      	cmp	r2, r3
 800612a:	d109      	bne.n	8006140 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800612c:	697b      	ldr	r3, [r7, #20]
 800612e:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006136:	085b      	lsrs	r3, r3, #1
 8006138:	3b01      	subs	r3, #1
 800613a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800613c:	429a      	cmp	r2, r3
 800613e:	d06b      	beq.n	8006218 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006140:	69bb      	ldr	r3, [r7, #24]
 8006142:	2b0c      	cmp	r3, #12
 8006144:	d062      	beq.n	800620c <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8006146:	4b32      	ldr	r3, [pc, #200]	@ (8006210 <HAL_RCC_OscConfig+0x778>)
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800614e:	2b00      	cmp	r3, #0
 8006150:	d001      	beq.n	8006156 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8006152:	2301      	movs	r3, #1
 8006154:	e0ac      	b.n	80062b0 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8006156:	4b2e      	ldr	r3, [pc, #184]	@ (8006210 <HAL_RCC_OscConfig+0x778>)
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	4a2d      	ldr	r2, [pc, #180]	@ (8006210 <HAL_RCC_OscConfig+0x778>)
 800615c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006160:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006162:	f7fc fca3 	bl	8002aac <HAL_GetTick>
 8006166:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006168:	e008      	b.n	800617c <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800616a:	f7fc fc9f 	bl	8002aac <HAL_GetTick>
 800616e:	4602      	mov	r2, r0
 8006170:	693b      	ldr	r3, [r7, #16]
 8006172:	1ad3      	subs	r3, r2, r3
 8006174:	2b02      	cmp	r3, #2
 8006176:	d901      	bls.n	800617c <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8006178:	2303      	movs	r3, #3
 800617a:	e099      	b.n	80062b0 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800617c:	4b24      	ldr	r3, [pc, #144]	@ (8006210 <HAL_RCC_OscConfig+0x778>)
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006184:	2b00      	cmp	r3, #0
 8006186:	d1f0      	bne.n	800616a <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006188:	4b21      	ldr	r3, [pc, #132]	@ (8006210 <HAL_RCC_OscConfig+0x778>)
 800618a:	68da      	ldr	r2, [r3, #12]
 800618c:	4b21      	ldr	r3, [pc, #132]	@ (8006214 <HAL_RCC_OscConfig+0x77c>)
 800618e:	4013      	ands	r3, r2
 8006190:	687a      	ldr	r2, [r7, #4]
 8006192:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8006194:	687a      	ldr	r2, [r7, #4]
 8006196:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8006198:	3a01      	subs	r2, #1
 800619a:	0112      	lsls	r2, r2, #4
 800619c:	4311      	orrs	r1, r2
 800619e:	687a      	ldr	r2, [r7, #4]
 80061a0:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80061a2:	0212      	lsls	r2, r2, #8
 80061a4:	4311      	orrs	r1, r2
 80061a6:	687a      	ldr	r2, [r7, #4]
 80061a8:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80061aa:	0852      	lsrs	r2, r2, #1
 80061ac:	3a01      	subs	r2, #1
 80061ae:	0552      	lsls	r2, r2, #21
 80061b0:	4311      	orrs	r1, r2
 80061b2:	687a      	ldr	r2, [r7, #4]
 80061b4:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80061b6:	0852      	lsrs	r2, r2, #1
 80061b8:	3a01      	subs	r2, #1
 80061ba:	0652      	lsls	r2, r2, #25
 80061bc:	4311      	orrs	r1, r2
 80061be:	687a      	ldr	r2, [r7, #4]
 80061c0:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80061c2:	06d2      	lsls	r2, r2, #27
 80061c4:	430a      	orrs	r2, r1
 80061c6:	4912      	ldr	r1, [pc, #72]	@ (8006210 <HAL_RCC_OscConfig+0x778>)
 80061c8:	4313      	orrs	r3, r2
 80061ca:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80061cc:	4b10      	ldr	r3, [pc, #64]	@ (8006210 <HAL_RCC_OscConfig+0x778>)
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	4a0f      	ldr	r2, [pc, #60]	@ (8006210 <HAL_RCC_OscConfig+0x778>)
 80061d2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80061d6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80061d8:	4b0d      	ldr	r3, [pc, #52]	@ (8006210 <HAL_RCC_OscConfig+0x778>)
 80061da:	68db      	ldr	r3, [r3, #12]
 80061dc:	4a0c      	ldr	r2, [pc, #48]	@ (8006210 <HAL_RCC_OscConfig+0x778>)
 80061de:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80061e2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80061e4:	f7fc fc62 	bl	8002aac <HAL_GetTick>
 80061e8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80061ea:	e008      	b.n	80061fe <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80061ec:	f7fc fc5e 	bl	8002aac <HAL_GetTick>
 80061f0:	4602      	mov	r2, r0
 80061f2:	693b      	ldr	r3, [r7, #16]
 80061f4:	1ad3      	subs	r3, r2, r3
 80061f6:	2b02      	cmp	r3, #2
 80061f8:	d901      	bls.n	80061fe <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 80061fa:	2303      	movs	r3, #3
 80061fc:	e058      	b.n	80062b0 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80061fe:	4b04      	ldr	r3, [pc, #16]	@ (8006210 <HAL_RCC_OscConfig+0x778>)
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006206:	2b00      	cmp	r3, #0
 8006208:	d0f0      	beq.n	80061ec <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800620a:	e050      	b.n	80062ae <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800620c:	2301      	movs	r3, #1
 800620e:	e04f      	b.n	80062b0 <HAL_RCC_OscConfig+0x818>
 8006210:	40021000 	.word	0x40021000
 8006214:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006218:	4b27      	ldr	r3, [pc, #156]	@ (80062b8 <HAL_RCC_OscConfig+0x820>)
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006220:	2b00      	cmp	r3, #0
 8006222:	d144      	bne.n	80062ae <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8006224:	4b24      	ldr	r3, [pc, #144]	@ (80062b8 <HAL_RCC_OscConfig+0x820>)
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	4a23      	ldr	r2, [pc, #140]	@ (80062b8 <HAL_RCC_OscConfig+0x820>)
 800622a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800622e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006230:	4b21      	ldr	r3, [pc, #132]	@ (80062b8 <HAL_RCC_OscConfig+0x820>)
 8006232:	68db      	ldr	r3, [r3, #12]
 8006234:	4a20      	ldr	r2, [pc, #128]	@ (80062b8 <HAL_RCC_OscConfig+0x820>)
 8006236:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800623a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800623c:	f7fc fc36 	bl	8002aac <HAL_GetTick>
 8006240:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006242:	e008      	b.n	8006256 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006244:	f7fc fc32 	bl	8002aac <HAL_GetTick>
 8006248:	4602      	mov	r2, r0
 800624a:	693b      	ldr	r3, [r7, #16]
 800624c:	1ad3      	subs	r3, r2, r3
 800624e:	2b02      	cmp	r3, #2
 8006250:	d901      	bls.n	8006256 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8006252:	2303      	movs	r3, #3
 8006254:	e02c      	b.n	80062b0 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006256:	4b18      	ldr	r3, [pc, #96]	@ (80062b8 <HAL_RCC_OscConfig+0x820>)
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800625e:	2b00      	cmp	r3, #0
 8006260:	d0f0      	beq.n	8006244 <HAL_RCC_OscConfig+0x7ac>
 8006262:	e024      	b.n	80062ae <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006264:	69bb      	ldr	r3, [r7, #24]
 8006266:	2b0c      	cmp	r3, #12
 8006268:	d01f      	beq.n	80062aa <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800626a:	4b13      	ldr	r3, [pc, #76]	@ (80062b8 <HAL_RCC_OscConfig+0x820>)
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	4a12      	ldr	r2, [pc, #72]	@ (80062b8 <HAL_RCC_OscConfig+0x820>)
 8006270:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006274:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006276:	f7fc fc19 	bl	8002aac <HAL_GetTick>
 800627a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800627c:	e008      	b.n	8006290 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800627e:	f7fc fc15 	bl	8002aac <HAL_GetTick>
 8006282:	4602      	mov	r2, r0
 8006284:	693b      	ldr	r3, [r7, #16]
 8006286:	1ad3      	subs	r3, r2, r3
 8006288:	2b02      	cmp	r3, #2
 800628a:	d901      	bls.n	8006290 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 800628c:	2303      	movs	r3, #3
 800628e:	e00f      	b.n	80062b0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006290:	4b09      	ldr	r3, [pc, #36]	@ (80062b8 <HAL_RCC_OscConfig+0x820>)
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006298:	2b00      	cmp	r3, #0
 800629a:	d1f0      	bne.n	800627e <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 800629c:	4b06      	ldr	r3, [pc, #24]	@ (80062b8 <HAL_RCC_OscConfig+0x820>)
 800629e:	68da      	ldr	r2, [r3, #12]
 80062a0:	4905      	ldr	r1, [pc, #20]	@ (80062b8 <HAL_RCC_OscConfig+0x820>)
 80062a2:	4b06      	ldr	r3, [pc, #24]	@ (80062bc <HAL_RCC_OscConfig+0x824>)
 80062a4:	4013      	ands	r3, r2
 80062a6:	60cb      	str	r3, [r1, #12]
 80062a8:	e001      	b.n	80062ae <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80062aa:	2301      	movs	r3, #1
 80062ac:	e000      	b.n	80062b0 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 80062ae:	2300      	movs	r3, #0
}
 80062b0:	4618      	mov	r0, r3
 80062b2:	3720      	adds	r7, #32
 80062b4:	46bd      	mov	sp, r7
 80062b6:	bd80      	pop	{r7, pc}
 80062b8:	40021000 	.word	0x40021000
 80062bc:	feeefffc 	.word	0xfeeefffc

080062c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80062c0:	b580      	push	{r7, lr}
 80062c2:	b084      	sub	sp, #16
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	6078      	str	r0, [r7, #4]
 80062c8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d101      	bne.n	80062d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80062d0:	2301      	movs	r3, #1
 80062d2:	e0e7      	b.n	80064a4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80062d4:	4b75      	ldr	r3, [pc, #468]	@ (80064ac <HAL_RCC_ClockConfig+0x1ec>)
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	f003 0307 	and.w	r3, r3, #7
 80062dc:	683a      	ldr	r2, [r7, #0]
 80062de:	429a      	cmp	r2, r3
 80062e0:	d910      	bls.n	8006304 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80062e2:	4b72      	ldr	r3, [pc, #456]	@ (80064ac <HAL_RCC_ClockConfig+0x1ec>)
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	f023 0207 	bic.w	r2, r3, #7
 80062ea:	4970      	ldr	r1, [pc, #448]	@ (80064ac <HAL_RCC_ClockConfig+0x1ec>)
 80062ec:	683b      	ldr	r3, [r7, #0]
 80062ee:	4313      	orrs	r3, r2
 80062f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80062f2:	4b6e      	ldr	r3, [pc, #440]	@ (80064ac <HAL_RCC_ClockConfig+0x1ec>)
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	f003 0307 	and.w	r3, r3, #7
 80062fa:	683a      	ldr	r2, [r7, #0]
 80062fc:	429a      	cmp	r2, r3
 80062fe:	d001      	beq.n	8006304 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006300:	2301      	movs	r3, #1
 8006302:	e0cf      	b.n	80064a4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	f003 0302 	and.w	r3, r3, #2
 800630c:	2b00      	cmp	r3, #0
 800630e:	d010      	beq.n	8006332 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	689a      	ldr	r2, [r3, #8]
 8006314:	4b66      	ldr	r3, [pc, #408]	@ (80064b0 <HAL_RCC_ClockConfig+0x1f0>)
 8006316:	689b      	ldr	r3, [r3, #8]
 8006318:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800631c:	429a      	cmp	r2, r3
 800631e:	d908      	bls.n	8006332 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006320:	4b63      	ldr	r3, [pc, #396]	@ (80064b0 <HAL_RCC_ClockConfig+0x1f0>)
 8006322:	689b      	ldr	r3, [r3, #8]
 8006324:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	689b      	ldr	r3, [r3, #8]
 800632c:	4960      	ldr	r1, [pc, #384]	@ (80064b0 <HAL_RCC_ClockConfig+0x1f0>)
 800632e:	4313      	orrs	r3, r2
 8006330:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	f003 0301 	and.w	r3, r3, #1
 800633a:	2b00      	cmp	r3, #0
 800633c:	d04c      	beq.n	80063d8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	685b      	ldr	r3, [r3, #4]
 8006342:	2b03      	cmp	r3, #3
 8006344:	d107      	bne.n	8006356 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006346:	4b5a      	ldr	r3, [pc, #360]	@ (80064b0 <HAL_RCC_ClockConfig+0x1f0>)
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800634e:	2b00      	cmp	r3, #0
 8006350:	d121      	bne.n	8006396 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8006352:	2301      	movs	r3, #1
 8006354:	e0a6      	b.n	80064a4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	685b      	ldr	r3, [r3, #4]
 800635a:	2b02      	cmp	r3, #2
 800635c:	d107      	bne.n	800636e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800635e:	4b54      	ldr	r3, [pc, #336]	@ (80064b0 <HAL_RCC_ClockConfig+0x1f0>)
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006366:	2b00      	cmp	r3, #0
 8006368:	d115      	bne.n	8006396 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800636a:	2301      	movs	r3, #1
 800636c:	e09a      	b.n	80064a4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	685b      	ldr	r3, [r3, #4]
 8006372:	2b00      	cmp	r3, #0
 8006374:	d107      	bne.n	8006386 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006376:	4b4e      	ldr	r3, [pc, #312]	@ (80064b0 <HAL_RCC_ClockConfig+0x1f0>)
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	f003 0302 	and.w	r3, r3, #2
 800637e:	2b00      	cmp	r3, #0
 8006380:	d109      	bne.n	8006396 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8006382:	2301      	movs	r3, #1
 8006384:	e08e      	b.n	80064a4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006386:	4b4a      	ldr	r3, [pc, #296]	@ (80064b0 <HAL_RCC_ClockConfig+0x1f0>)
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800638e:	2b00      	cmp	r3, #0
 8006390:	d101      	bne.n	8006396 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8006392:	2301      	movs	r3, #1
 8006394:	e086      	b.n	80064a4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006396:	4b46      	ldr	r3, [pc, #280]	@ (80064b0 <HAL_RCC_ClockConfig+0x1f0>)
 8006398:	689b      	ldr	r3, [r3, #8]
 800639a:	f023 0203 	bic.w	r2, r3, #3
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	685b      	ldr	r3, [r3, #4]
 80063a2:	4943      	ldr	r1, [pc, #268]	@ (80064b0 <HAL_RCC_ClockConfig+0x1f0>)
 80063a4:	4313      	orrs	r3, r2
 80063a6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80063a8:	f7fc fb80 	bl	8002aac <HAL_GetTick>
 80063ac:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80063ae:	e00a      	b.n	80063c6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80063b0:	f7fc fb7c 	bl	8002aac <HAL_GetTick>
 80063b4:	4602      	mov	r2, r0
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	1ad3      	subs	r3, r2, r3
 80063ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80063be:	4293      	cmp	r3, r2
 80063c0:	d901      	bls.n	80063c6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80063c2:	2303      	movs	r3, #3
 80063c4:	e06e      	b.n	80064a4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80063c6:	4b3a      	ldr	r3, [pc, #232]	@ (80064b0 <HAL_RCC_ClockConfig+0x1f0>)
 80063c8:	689b      	ldr	r3, [r3, #8]
 80063ca:	f003 020c 	and.w	r2, r3, #12
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	685b      	ldr	r3, [r3, #4]
 80063d2:	009b      	lsls	r3, r3, #2
 80063d4:	429a      	cmp	r2, r3
 80063d6:	d1eb      	bne.n	80063b0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	f003 0302 	and.w	r3, r3, #2
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d010      	beq.n	8006406 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	689a      	ldr	r2, [r3, #8]
 80063e8:	4b31      	ldr	r3, [pc, #196]	@ (80064b0 <HAL_RCC_ClockConfig+0x1f0>)
 80063ea:	689b      	ldr	r3, [r3, #8]
 80063ec:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80063f0:	429a      	cmp	r2, r3
 80063f2:	d208      	bcs.n	8006406 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80063f4:	4b2e      	ldr	r3, [pc, #184]	@ (80064b0 <HAL_RCC_ClockConfig+0x1f0>)
 80063f6:	689b      	ldr	r3, [r3, #8]
 80063f8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	689b      	ldr	r3, [r3, #8]
 8006400:	492b      	ldr	r1, [pc, #172]	@ (80064b0 <HAL_RCC_ClockConfig+0x1f0>)
 8006402:	4313      	orrs	r3, r2
 8006404:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006406:	4b29      	ldr	r3, [pc, #164]	@ (80064ac <HAL_RCC_ClockConfig+0x1ec>)
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	f003 0307 	and.w	r3, r3, #7
 800640e:	683a      	ldr	r2, [r7, #0]
 8006410:	429a      	cmp	r2, r3
 8006412:	d210      	bcs.n	8006436 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006414:	4b25      	ldr	r3, [pc, #148]	@ (80064ac <HAL_RCC_ClockConfig+0x1ec>)
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	f023 0207 	bic.w	r2, r3, #7
 800641c:	4923      	ldr	r1, [pc, #140]	@ (80064ac <HAL_RCC_ClockConfig+0x1ec>)
 800641e:	683b      	ldr	r3, [r7, #0]
 8006420:	4313      	orrs	r3, r2
 8006422:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006424:	4b21      	ldr	r3, [pc, #132]	@ (80064ac <HAL_RCC_ClockConfig+0x1ec>)
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	f003 0307 	and.w	r3, r3, #7
 800642c:	683a      	ldr	r2, [r7, #0]
 800642e:	429a      	cmp	r2, r3
 8006430:	d001      	beq.n	8006436 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8006432:	2301      	movs	r3, #1
 8006434:	e036      	b.n	80064a4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	f003 0304 	and.w	r3, r3, #4
 800643e:	2b00      	cmp	r3, #0
 8006440:	d008      	beq.n	8006454 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006442:	4b1b      	ldr	r3, [pc, #108]	@ (80064b0 <HAL_RCC_ClockConfig+0x1f0>)
 8006444:	689b      	ldr	r3, [r3, #8]
 8006446:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	68db      	ldr	r3, [r3, #12]
 800644e:	4918      	ldr	r1, [pc, #96]	@ (80064b0 <HAL_RCC_ClockConfig+0x1f0>)
 8006450:	4313      	orrs	r3, r2
 8006452:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	f003 0308 	and.w	r3, r3, #8
 800645c:	2b00      	cmp	r3, #0
 800645e:	d009      	beq.n	8006474 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006460:	4b13      	ldr	r3, [pc, #76]	@ (80064b0 <HAL_RCC_ClockConfig+0x1f0>)
 8006462:	689b      	ldr	r3, [r3, #8]
 8006464:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	691b      	ldr	r3, [r3, #16]
 800646c:	00db      	lsls	r3, r3, #3
 800646e:	4910      	ldr	r1, [pc, #64]	@ (80064b0 <HAL_RCC_ClockConfig+0x1f0>)
 8006470:	4313      	orrs	r3, r2
 8006472:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006474:	f000 f824 	bl	80064c0 <HAL_RCC_GetSysClockFreq>
 8006478:	4602      	mov	r2, r0
 800647a:	4b0d      	ldr	r3, [pc, #52]	@ (80064b0 <HAL_RCC_ClockConfig+0x1f0>)
 800647c:	689b      	ldr	r3, [r3, #8]
 800647e:	091b      	lsrs	r3, r3, #4
 8006480:	f003 030f 	and.w	r3, r3, #15
 8006484:	490b      	ldr	r1, [pc, #44]	@ (80064b4 <HAL_RCC_ClockConfig+0x1f4>)
 8006486:	5ccb      	ldrb	r3, [r1, r3]
 8006488:	f003 031f 	and.w	r3, r3, #31
 800648c:	fa22 f303 	lsr.w	r3, r2, r3
 8006490:	4a09      	ldr	r2, [pc, #36]	@ (80064b8 <HAL_RCC_ClockConfig+0x1f8>)
 8006492:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8006494:	4b09      	ldr	r3, [pc, #36]	@ (80064bc <HAL_RCC_ClockConfig+0x1fc>)
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	4618      	mov	r0, r3
 800649a:	f7fc fab7 	bl	8002a0c <HAL_InitTick>
 800649e:	4603      	mov	r3, r0
 80064a0:	72fb      	strb	r3, [r7, #11]

  return status;
 80064a2:	7afb      	ldrb	r3, [r7, #11]
}
 80064a4:	4618      	mov	r0, r3
 80064a6:	3710      	adds	r7, #16
 80064a8:	46bd      	mov	sp, r7
 80064aa:	bd80      	pop	{r7, pc}
 80064ac:	40022000 	.word	0x40022000
 80064b0:	40021000 	.word	0x40021000
 80064b4:	080084a4 	.word	0x080084a4
 80064b8:	20000004 	.word	0x20000004
 80064bc:	20000008 	.word	0x20000008

080064c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80064c0:	b480      	push	{r7}
 80064c2:	b089      	sub	sp, #36	@ 0x24
 80064c4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80064c6:	2300      	movs	r3, #0
 80064c8:	61fb      	str	r3, [r7, #28]
 80064ca:	2300      	movs	r3, #0
 80064cc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80064ce:	4b3e      	ldr	r3, [pc, #248]	@ (80065c8 <HAL_RCC_GetSysClockFreq+0x108>)
 80064d0:	689b      	ldr	r3, [r3, #8]
 80064d2:	f003 030c 	and.w	r3, r3, #12
 80064d6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80064d8:	4b3b      	ldr	r3, [pc, #236]	@ (80065c8 <HAL_RCC_GetSysClockFreq+0x108>)
 80064da:	68db      	ldr	r3, [r3, #12]
 80064dc:	f003 0303 	and.w	r3, r3, #3
 80064e0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80064e2:	693b      	ldr	r3, [r7, #16]
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d005      	beq.n	80064f4 <HAL_RCC_GetSysClockFreq+0x34>
 80064e8:	693b      	ldr	r3, [r7, #16]
 80064ea:	2b0c      	cmp	r3, #12
 80064ec:	d121      	bne.n	8006532 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	2b01      	cmp	r3, #1
 80064f2:	d11e      	bne.n	8006532 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80064f4:	4b34      	ldr	r3, [pc, #208]	@ (80065c8 <HAL_RCC_GetSysClockFreq+0x108>)
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	f003 0308 	and.w	r3, r3, #8
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d107      	bne.n	8006510 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8006500:	4b31      	ldr	r3, [pc, #196]	@ (80065c8 <HAL_RCC_GetSysClockFreq+0x108>)
 8006502:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006506:	0a1b      	lsrs	r3, r3, #8
 8006508:	f003 030f 	and.w	r3, r3, #15
 800650c:	61fb      	str	r3, [r7, #28]
 800650e:	e005      	b.n	800651c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8006510:	4b2d      	ldr	r3, [pc, #180]	@ (80065c8 <HAL_RCC_GetSysClockFreq+0x108>)
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	091b      	lsrs	r3, r3, #4
 8006516:	f003 030f 	and.w	r3, r3, #15
 800651a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800651c:	4a2b      	ldr	r2, [pc, #172]	@ (80065cc <HAL_RCC_GetSysClockFreq+0x10c>)
 800651e:	69fb      	ldr	r3, [r7, #28]
 8006520:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006524:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006526:	693b      	ldr	r3, [r7, #16]
 8006528:	2b00      	cmp	r3, #0
 800652a:	d10d      	bne.n	8006548 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800652c:	69fb      	ldr	r3, [r7, #28]
 800652e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006530:	e00a      	b.n	8006548 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8006532:	693b      	ldr	r3, [r7, #16]
 8006534:	2b04      	cmp	r3, #4
 8006536:	d102      	bne.n	800653e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006538:	4b25      	ldr	r3, [pc, #148]	@ (80065d0 <HAL_RCC_GetSysClockFreq+0x110>)
 800653a:	61bb      	str	r3, [r7, #24]
 800653c:	e004      	b.n	8006548 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800653e:	693b      	ldr	r3, [r7, #16]
 8006540:	2b08      	cmp	r3, #8
 8006542:	d101      	bne.n	8006548 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006544:	4b23      	ldr	r3, [pc, #140]	@ (80065d4 <HAL_RCC_GetSysClockFreq+0x114>)
 8006546:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8006548:	693b      	ldr	r3, [r7, #16]
 800654a:	2b0c      	cmp	r3, #12
 800654c:	d134      	bne.n	80065b8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800654e:	4b1e      	ldr	r3, [pc, #120]	@ (80065c8 <HAL_RCC_GetSysClockFreq+0x108>)
 8006550:	68db      	ldr	r3, [r3, #12]
 8006552:	f003 0303 	and.w	r3, r3, #3
 8006556:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006558:	68bb      	ldr	r3, [r7, #8]
 800655a:	2b02      	cmp	r3, #2
 800655c:	d003      	beq.n	8006566 <HAL_RCC_GetSysClockFreq+0xa6>
 800655e:	68bb      	ldr	r3, [r7, #8]
 8006560:	2b03      	cmp	r3, #3
 8006562:	d003      	beq.n	800656c <HAL_RCC_GetSysClockFreq+0xac>
 8006564:	e005      	b.n	8006572 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8006566:	4b1a      	ldr	r3, [pc, #104]	@ (80065d0 <HAL_RCC_GetSysClockFreq+0x110>)
 8006568:	617b      	str	r3, [r7, #20]
      break;
 800656a:	e005      	b.n	8006578 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800656c:	4b19      	ldr	r3, [pc, #100]	@ (80065d4 <HAL_RCC_GetSysClockFreq+0x114>)
 800656e:	617b      	str	r3, [r7, #20]
      break;
 8006570:	e002      	b.n	8006578 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8006572:	69fb      	ldr	r3, [r7, #28]
 8006574:	617b      	str	r3, [r7, #20]
      break;
 8006576:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006578:	4b13      	ldr	r3, [pc, #76]	@ (80065c8 <HAL_RCC_GetSysClockFreq+0x108>)
 800657a:	68db      	ldr	r3, [r3, #12]
 800657c:	091b      	lsrs	r3, r3, #4
 800657e:	f003 0307 	and.w	r3, r3, #7
 8006582:	3301      	adds	r3, #1
 8006584:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8006586:	4b10      	ldr	r3, [pc, #64]	@ (80065c8 <HAL_RCC_GetSysClockFreq+0x108>)
 8006588:	68db      	ldr	r3, [r3, #12]
 800658a:	0a1b      	lsrs	r3, r3, #8
 800658c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006590:	697a      	ldr	r2, [r7, #20]
 8006592:	fb03 f202 	mul.w	r2, r3, r2
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	fbb2 f3f3 	udiv	r3, r2, r3
 800659c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800659e:	4b0a      	ldr	r3, [pc, #40]	@ (80065c8 <HAL_RCC_GetSysClockFreq+0x108>)
 80065a0:	68db      	ldr	r3, [r3, #12]
 80065a2:	0e5b      	lsrs	r3, r3, #25
 80065a4:	f003 0303 	and.w	r3, r3, #3
 80065a8:	3301      	adds	r3, #1
 80065aa:	005b      	lsls	r3, r3, #1
 80065ac:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80065ae:	697a      	ldr	r2, [r7, #20]
 80065b0:	683b      	ldr	r3, [r7, #0]
 80065b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80065b6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80065b8:	69bb      	ldr	r3, [r7, #24]
}
 80065ba:	4618      	mov	r0, r3
 80065bc:	3724      	adds	r7, #36	@ 0x24
 80065be:	46bd      	mov	sp, r7
 80065c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c4:	4770      	bx	lr
 80065c6:	bf00      	nop
 80065c8:	40021000 	.word	0x40021000
 80065cc:	080084bc 	.word	0x080084bc
 80065d0:	00f42400 	.word	0x00f42400
 80065d4:	007a1200 	.word	0x007a1200

080065d8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80065d8:	b480      	push	{r7}
 80065da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80065dc:	4b03      	ldr	r3, [pc, #12]	@ (80065ec <HAL_RCC_GetHCLKFreq+0x14>)
 80065de:	681b      	ldr	r3, [r3, #0]
}
 80065e0:	4618      	mov	r0, r3
 80065e2:	46bd      	mov	sp, r7
 80065e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e8:	4770      	bx	lr
 80065ea:	bf00      	nop
 80065ec:	20000004 	.word	0x20000004

080065f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80065f0:	b580      	push	{r7, lr}
 80065f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80065f4:	f7ff fff0 	bl	80065d8 <HAL_RCC_GetHCLKFreq>
 80065f8:	4602      	mov	r2, r0
 80065fa:	4b06      	ldr	r3, [pc, #24]	@ (8006614 <HAL_RCC_GetPCLK1Freq+0x24>)
 80065fc:	689b      	ldr	r3, [r3, #8]
 80065fe:	0a1b      	lsrs	r3, r3, #8
 8006600:	f003 0307 	and.w	r3, r3, #7
 8006604:	4904      	ldr	r1, [pc, #16]	@ (8006618 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006606:	5ccb      	ldrb	r3, [r1, r3]
 8006608:	f003 031f 	and.w	r3, r3, #31
 800660c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006610:	4618      	mov	r0, r3
 8006612:	bd80      	pop	{r7, pc}
 8006614:	40021000 	.word	0x40021000
 8006618:	080084b4 	.word	0x080084b4

0800661c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800661c:	b580      	push	{r7, lr}
 800661e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006620:	f7ff ffda 	bl	80065d8 <HAL_RCC_GetHCLKFreq>
 8006624:	4602      	mov	r2, r0
 8006626:	4b06      	ldr	r3, [pc, #24]	@ (8006640 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006628:	689b      	ldr	r3, [r3, #8]
 800662a:	0adb      	lsrs	r3, r3, #11
 800662c:	f003 0307 	and.w	r3, r3, #7
 8006630:	4904      	ldr	r1, [pc, #16]	@ (8006644 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006632:	5ccb      	ldrb	r3, [r1, r3]
 8006634:	f003 031f 	and.w	r3, r3, #31
 8006638:	fa22 f303 	lsr.w	r3, r2, r3
}
 800663c:	4618      	mov	r0, r3
 800663e:	bd80      	pop	{r7, pc}
 8006640:	40021000 	.word	0x40021000
 8006644:	080084b4 	.word	0x080084b4

08006648 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8006648:	b580      	push	{r7, lr}
 800664a:	b086      	sub	sp, #24
 800664c:	af00      	add	r7, sp, #0
 800664e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8006650:	2300      	movs	r3, #0
 8006652:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8006654:	4b2a      	ldr	r3, [pc, #168]	@ (8006700 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006656:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006658:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800665c:	2b00      	cmp	r3, #0
 800665e:	d003      	beq.n	8006668 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8006660:	f7ff f96e 	bl	8005940 <HAL_PWREx_GetVoltageRange>
 8006664:	6178      	str	r0, [r7, #20]
 8006666:	e014      	b.n	8006692 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8006668:	4b25      	ldr	r3, [pc, #148]	@ (8006700 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800666a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800666c:	4a24      	ldr	r2, [pc, #144]	@ (8006700 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800666e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006672:	6593      	str	r3, [r2, #88]	@ 0x58
 8006674:	4b22      	ldr	r3, [pc, #136]	@ (8006700 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006676:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006678:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800667c:	60fb      	str	r3, [r7, #12]
 800667e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8006680:	f7ff f95e 	bl	8005940 <HAL_PWREx_GetVoltageRange>
 8006684:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8006686:	4b1e      	ldr	r3, [pc, #120]	@ (8006700 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006688:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800668a:	4a1d      	ldr	r2, [pc, #116]	@ (8006700 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800668c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006690:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006692:	697b      	ldr	r3, [r7, #20]
 8006694:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006698:	d10b      	bne.n	80066b2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	2b80      	cmp	r3, #128	@ 0x80
 800669e:	d919      	bls.n	80066d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	2ba0      	cmp	r3, #160	@ 0xa0
 80066a4:	d902      	bls.n	80066ac <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80066a6:	2302      	movs	r3, #2
 80066a8:	613b      	str	r3, [r7, #16]
 80066aa:	e013      	b.n	80066d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80066ac:	2301      	movs	r3, #1
 80066ae:	613b      	str	r3, [r7, #16]
 80066b0:	e010      	b.n	80066d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	2b80      	cmp	r3, #128	@ 0x80
 80066b6:	d902      	bls.n	80066be <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80066b8:	2303      	movs	r3, #3
 80066ba:	613b      	str	r3, [r7, #16]
 80066bc:	e00a      	b.n	80066d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	2b80      	cmp	r3, #128	@ 0x80
 80066c2:	d102      	bne.n	80066ca <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80066c4:	2302      	movs	r3, #2
 80066c6:	613b      	str	r3, [r7, #16]
 80066c8:	e004      	b.n	80066d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	2b70      	cmp	r3, #112	@ 0x70
 80066ce:	d101      	bne.n	80066d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80066d0:	2301      	movs	r3, #1
 80066d2:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80066d4:	4b0b      	ldr	r3, [pc, #44]	@ (8006704 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	f023 0207 	bic.w	r2, r3, #7
 80066dc:	4909      	ldr	r1, [pc, #36]	@ (8006704 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80066de:	693b      	ldr	r3, [r7, #16]
 80066e0:	4313      	orrs	r3, r2
 80066e2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80066e4:	4b07      	ldr	r3, [pc, #28]	@ (8006704 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	f003 0307 	and.w	r3, r3, #7
 80066ec:	693a      	ldr	r2, [r7, #16]
 80066ee:	429a      	cmp	r2, r3
 80066f0:	d001      	beq.n	80066f6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80066f2:	2301      	movs	r3, #1
 80066f4:	e000      	b.n	80066f8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80066f6:	2300      	movs	r3, #0
}
 80066f8:	4618      	mov	r0, r3
 80066fa:	3718      	adds	r7, #24
 80066fc:	46bd      	mov	sp, r7
 80066fe:	bd80      	pop	{r7, pc}
 8006700:	40021000 	.word	0x40021000
 8006704:	40022000 	.word	0x40022000

08006708 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006708:	b580      	push	{r7, lr}
 800670a:	b086      	sub	sp, #24
 800670c:	af00      	add	r7, sp, #0
 800670e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006710:	2300      	movs	r3, #0
 8006712:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006714:	2300      	movs	r3, #0
 8006716:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006720:	2b00      	cmp	r3, #0
 8006722:	d031      	beq.n	8006788 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006728:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800672c:	d01a      	beq.n	8006764 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 800672e:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8006732:	d814      	bhi.n	800675e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8006734:	2b00      	cmp	r3, #0
 8006736:	d009      	beq.n	800674c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8006738:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800673c:	d10f      	bne.n	800675e <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800673e:	4b5d      	ldr	r3, [pc, #372]	@ (80068b4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006740:	68db      	ldr	r3, [r3, #12]
 8006742:	4a5c      	ldr	r2, [pc, #368]	@ (80068b4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006744:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006748:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800674a:	e00c      	b.n	8006766 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	3304      	adds	r3, #4
 8006750:	2100      	movs	r1, #0
 8006752:	4618      	mov	r0, r3
 8006754:	f000 f9de 	bl	8006b14 <RCCEx_PLLSAI1_Config>
 8006758:	4603      	mov	r3, r0
 800675a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800675c:	e003      	b.n	8006766 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800675e:	2301      	movs	r3, #1
 8006760:	74fb      	strb	r3, [r7, #19]
      break;
 8006762:	e000      	b.n	8006766 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8006764:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006766:	7cfb      	ldrb	r3, [r7, #19]
 8006768:	2b00      	cmp	r3, #0
 800676a:	d10b      	bne.n	8006784 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800676c:	4b51      	ldr	r3, [pc, #324]	@ (80068b4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800676e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006772:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800677a:	494e      	ldr	r1, [pc, #312]	@ (80068b4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800677c:	4313      	orrs	r3, r2
 800677e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8006782:	e001      	b.n	8006788 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006784:	7cfb      	ldrb	r3, [r7, #19]
 8006786:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006790:	2b00      	cmp	r3, #0
 8006792:	f000 809e 	beq.w	80068d2 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006796:	2300      	movs	r3, #0
 8006798:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800679a:	4b46      	ldr	r3, [pc, #280]	@ (80068b4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800679c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800679e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d101      	bne.n	80067aa <HAL_RCCEx_PeriphCLKConfig+0xa2>
 80067a6:	2301      	movs	r3, #1
 80067a8:	e000      	b.n	80067ac <HAL_RCCEx_PeriphCLKConfig+0xa4>
 80067aa:	2300      	movs	r3, #0
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d00d      	beq.n	80067cc <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80067b0:	4b40      	ldr	r3, [pc, #256]	@ (80068b4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80067b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80067b4:	4a3f      	ldr	r2, [pc, #252]	@ (80068b4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80067b6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80067ba:	6593      	str	r3, [r2, #88]	@ 0x58
 80067bc:	4b3d      	ldr	r3, [pc, #244]	@ (80068b4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80067be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80067c0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80067c4:	60bb      	str	r3, [r7, #8]
 80067c6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80067c8:	2301      	movs	r3, #1
 80067ca:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80067cc:	4b3a      	ldr	r3, [pc, #232]	@ (80068b8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	4a39      	ldr	r2, [pc, #228]	@ (80068b8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80067d2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80067d6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80067d8:	f7fc f968 	bl	8002aac <HAL_GetTick>
 80067dc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80067de:	e009      	b.n	80067f4 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80067e0:	f7fc f964 	bl	8002aac <HAL_GetTick>
 80067e4:	4602      	mov	r2, r0
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	1ad3      	subs	r3, r2, r3
 80067ea:	2b02      	cmp	r3, #2
 80067ec:	d902      	bls.n	80067f4 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 80067ee:	2303      	movs	r3, #3
 80067f0:	74fb      	strb	r3, [r7, #19]
        break;
 80067f2:	e005      	b.n	8006800 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80067f4:	4b30      	ldr	r3, [pc, #192]	@ (80068b8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d0ef      	beq.n	80067e0 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8006800:	7cfb      	ldrb	r3, [r7, #19]
 8006802:	2b00      	cmp	r3, #0
 8006804:	d15a      	bne.n	80068bc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006806:	4b2b      	ldr	r3, [pc, #172]	@ (80068b4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006808:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800680c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006810:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006812:	697b      	ldr	r3, [r7, #20]
 8006814:	2b00      	cmp	r3, #0
 8006816:	d01e      	beq.n	8006856 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800681c:	697a      	ldr	r2, [r7, #20]
 800681e:	429a      	cmp	r2, r3
 8006820:	d019      	beq.n	8006856 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006822:	4b24      	ldr	r3, [pc, #144]	@ (80068b4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006824:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006828:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800682c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800682e:	4b21      	ldr	r3, [pc, #132]	@ (80068b4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006830:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006834:	4a1f      	ldr	r2, [pc, #124]	@ (80068b4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006836:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800683a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800683e:	4b1d      	ldr	r3, [pc, #116]	@ (80068b4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006840:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006844:	4a1b      	ldr	r2, [pc, #108]	@ (80068b4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006846:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800684a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800684e:	4a19      	ldr	r2, [pc, #100]	@ (80068b4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006850:	697b      	ldr	r3, [r7, #20]
 8006852:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006856:	697b      	ldr	r3, [r7, #20]
 8006858:	f003 0301 	and.w	r3, r3, #1
 800685c:	2b00      	cmp	r3, #0
 800685e:	d016      	beq.n	800688e <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006860:	f7fc f924 	bl	8002aac <HAL_GetTick>
 8006864:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006866:	e00b      	b.n	8006880 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006868:	f7fc f920 	bl	8002aac <HAL_GetTick>
 800686c:	4602      	mov	r2, r0
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	1ad3      	subs	r3, r2, r3
 8006872:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006876:	4293      	cmp	r3, r2
 8006878:	d902      	bls.n	8006880 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 800687a:	2303      	movs	r3, #3
 800687c:	74fb      	strb	r3, [r7, #19]
            break;
 800687e:	e006      	b.n	800688e <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006880:	4b0c      	ldr	r3, [pc, #48]	@ (80068b4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006882:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006886:	f003 0302 	and.w	r3, r3, #2
 800688a:	2b00      	cmp	r3, #0
 800688c:	d0ec      	beq.n	8006868 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 800688e:	7cfb      	ldrb	r3, [r7, #19]
 8006890:	2b00      	cmp	r3, #0
 8006892:	d10b      	bne.n	80068ac <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006894:	4b07      	ldr	r3, [pc, #28]	@ (80068b4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006896:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800689a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80068a2:	4904      	ldr	r1, [pc, #16]	@ (80068b4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80068a4:	4313      	orrs	r3, r2
 80068a6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80068aa:	e009      	b.n	80068c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80068ac:	7cfb      	ldrb	r3, [r7, #19]
 80068ae:	74bb      	strb	r3, [r7, #18]
 80068b0:	e006      	b.n	80068c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 80068b2:	bf00      	nop
 80068b4:	40021000 	.word	0x40021000
 80068b8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068bc:	7cfb      	ldrb	r3, [r7, #19]
 80068be:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80068c0:	7c7b      	ldrb	r3, [r7, #17]
 80068c2:	2b01      	cmp	r3, #1
 80068c4:	d105      	bne.n	80068d2 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80068c6:	4b8a      	ldr	r3, [pc, #552]	@ (8006af0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80068c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80068ca:	4a89      	ldr	r2, [pc, #548]	@ (8006af0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80068cc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80068d0:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	f003 0301 	and.w	r3, r3, #1
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d00a      	beq.n	80068f4 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80068de:	4b84      	ldr	r3, [pc, #528]	@ (8006af0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80068e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80068e4:	f023 0203 	bic.w	r2, r3, #3
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	6a1b      	ldr	r3, [r3, #32]
 80068ec:	4980      	ldr	r1, [pc, #512]	@ (8006af0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80068ee:	4313      	orrs	r3, r2
 80068f0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	f003 0302 	and.w	r3, r3, #2
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d00a      	beq.n	8006916 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006900:	4b7b      	ldr	r3, [pc, #492]	@ (8006af0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006902:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006906:	f023 020c 	bic.w	r2, r3, #12
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800690e:	4978      	ldr	r1, [pc, #480]	@ (8006af0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006910:	4313      	orrs	r3, r2
 8006912:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	f003 0320 	and.w	r3, r3, #32
 800691e:	2b00      	cmp	r3, #0
 8006920:	d00a      	beq.n	8006938 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006922:	4b73      	ldr	r3, [pc, #460]	@ (8006af0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006924:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006928:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006930:	496f      	ldr	r1, [pc, #444]	@ (8006af0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006932:	4313      	orrs	r3, r2
 8006934:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006940:	2b00      	cmp	r3, #0
 8006942:	d00a      	beq.n	800695a <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006944:	4b6a      	ldr	r3, [pc, #424]	@ (8006af0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006946:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800694a:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006952:	4967      	ldr	r1, [pc, #412]	@ (8006af0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006954:	4313      	orrs	r3, r2
 8006956:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006962:	2b00      	cmp	r3, #0
 8006964:	d00a      	beq.n	800697c <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006966:	4b62      	ldr	r3, [pc, #392]	@ (8006af0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006968:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800696c:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006974:	495e      	ldr	r1, [pc, #376]	@ (8006af0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006976:	4313      	orrs	r3, r2
 8006978:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006984:	2b00      	cmp	r3, #0
 8006986:	d00a      	beq.n	800699e <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006988:	4b59      	ldr	r3, [pc, #356]	@ (8006af0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800698a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800698e:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006996:	4956      	ldr	r1, [pc, #344]	@ (8006af0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006998:	4313      	orrs	r3, r2
 800699a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d00a      	beq.n	80069c0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80069aa:	4b51      	ldr	r3, [pc, #324]	@ (8006af0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80069ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80069b0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80069b8:	494d      	ldr	r1, [pc, #308]	@ (8006af0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80069ba:	4313      	orrs	r3, r2
 80069bc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d028      	beq.n	8006a1e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80069cc:	4b48      	ldr	r3, [pc, #288]	@ (8006af0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80069ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80069d2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069da:	4945      	ldr	r1, [pc, #276]	@ (8006af0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80069dc:	4313      	orrs	r3, r2
 80069de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069e6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80069ea:	d106      	bne.n	80069fa <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80069ec:	4b40      	ldr	r3, [pc, #256]	@ (8006af0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80069ee:	68db      	ldr	r3, [r3, #12]
 80069f0:	4a3f      	ldr	r2, [pc, #252]	@ (8006af0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80069f2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80069f6:	60d3      	str	r3, [r2, #12]
 80069f8:	e011      	b.n	8006a1e <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069fe:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006a02:	d10c      	bne.n	8006a1e <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	3304      	adds	r3, #4
 8006a08:	2101      	movs	r1, #1
 8006a0a:	4618      	mov	r0, r3
 8006a0c:	f000 f882 	bl	8006b14 <RCCEx_PLLSAI1_Config>
 8006a10:	4603      	mov	r3, r0
 8006a12:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8006a14:	7cfb      	ldrb	r3, [r7, #19]
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d001      	beq.n	8006a1e <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8006a1a:	7cfb      	ldrb	r3, [r7, #19]
 8006a1c:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d028      	beq.n	8006a7c <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006a2a:	4b31      	ldr	r3, [pc, #196]	@ (8006af0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006a2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a30:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a38:	492d      	ldr	r1, [pc, #180]	@ (8006af0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006a3a:	4313      	orrs	r3, r2
 8006a3c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a44:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006a48:	d106      	bne.n	8006a58 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006a4a:	4b29      	ldr	r3, [pc, #164]	@ (8006af0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006a4c:	68db      	ldr	r3, [r3, #12]
 8006a4e:	4a28      	ldr	r2, [pc, #160]	@ (8006af0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006a50:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006a54:	60d3      	str	r3, [r2, #12]
 8006a56:	e011      	b.n	8006a7c <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a5c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006a60:	d10c      	bne.n	8006a7c <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	3304      	adds	r3, #4
 8006a66:	2101      	movs	r1, #1
 8006a68:	4618      	mov	r0, r3
 8006a6a:	f000 f853 	bl	8006b14 <RCCEx_PLLSAI1_Config>
 8006a6e:	4603      	mov	r3, r0
 8006a70:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006a72:	7cfb      	ldrb	r3, [r7, #19]
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d001      	beq.n	8006a7c <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8006a78:	7cfb      	ldrb	r3, [r7, #19]
 8006a7a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d01c      	beq.n	8006ac2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006a88:	4b19      	ldr	r3, [pc, #100]	@ (8006af0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006a8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a8e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006a96:	4916      	ldr	r1, [pc, #88]	@ (8006af0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006a98:	4313      	orrs	r3, r2
 8006a9a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006aa2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006aa6:	d10c      	bne.n	8006ac2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	3304      	adds	r3, #4
 8006aac:	2102      	movs	r1, #2
 8006aae:	4618      	mov	r0, r3
 8006ab0:	f000 f830 	bl	8006b14 <RCCEx_PLLSAI1_Config>
 8006ab4:	4603      	mov	r3, r0
 8006ab6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006ab8:	7cfb      	ldrb	r3, [r7, #19]
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d001      	beq.n	8006ac2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8006abe:	7cfb      	ldrb	r3, [r7, #19]
 8006ac0:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d00a      	beq.n	8006ae4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006ace:	4b08      	ldr	r3, [pc, #32]	@ (8006af0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006ad0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006ad4:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006adc:	4904      	ldr	r1, [pc, #16]	@ (8006af0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006ade:	4313      	orrs	r3, r2
 8006ae0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8006ae4:	7cbb      	ldrb	r3, [r7, #18]
}
 8006ae6:	4618      	mov	r0, r3
 8006ae8:	3718      	adds	r7, #24
 8006aea:	46bd      	mov	sp, r7
 8006aec:	bd80      	pop	{r7, pc}
 8006aee:	bf00      	nop
 8006af0:	40021000 	.word	0x40021000

08006af4 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8006af4:	b480      	push	{r7}
 8006af6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8006af8:	4b05      	ldr	r3, [pc, #20]	@ (8006b10 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	4a04      	ldr	r2, [pc, #16]	@ (8006b10 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8006afe:	f043 0304 	orr.w	r3, r3, #4
 8006b02:	6013      	str	r3, [r2, #0]
}
 8006b04:	bf00      	nop
 8006b06:	46bd      	mov	sp, r7
 8006b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b0c:	4770      	bx	lr
 8006b0e:	bf00      	nop
 8006b10:	40021000 	.word	0x40021000

08006b14 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8006b14:	b580      	push	{r7, lr}
 8006b16:	b084      	sub	sp, #16
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	6078      	str	r0, [r7, #4]
 8006b1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006b1e:	2300      	movs	r3, #0
 8006b20:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006b22:	4b74      	ldr	r3, [pc, #464]	@ (8006cf4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006b24:	68db      	ldr	r3, [r3, #12]
 8006b26:	f003 0303 	and.w	r3, r3, #3
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d018      	beq.n	8006b60 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8006b2e:	4b71      	ldr	r3, [pc, #452]	@ (8006cf4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006b30:	68db      	ldr	r3, [r3, #12]
 8006b32:	f003 0203 	and.w	r2, r3, #3
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	429a      	cmp	r2, r3
 8006b3c:	d10d      	bne.n	8006b5a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
       ||
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d009      	beq.n	8006b5a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8006b46:	4b6b      	ldr	r3, [pc, #428]	@ (8006cf4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006b48:	68db      	ldr	r3, [r3, #12]
 8006b4a:	091b      	lsrs	r3, r3, #4
 8006b4c:	f003 0307 	and.w	r3, r3, #7
 8006b50:	1c5a      	adds	r2, r3, #1
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	685b      	ldr	r3, [r3, #4]
       ||
 8006b56:	429a      	cmp	r2, r3
 8006b58:	d047      	beq.n	8006bea <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8006b5a:	2301      	movs	r3, #1
 8006b5c:	73fb      	strb	r3, [r7, #15]
 8006b5e:	e044      	b.n	8006bea <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	2b03      	cmp	r3, #3
 8006b66:	d018      	beq.n	8006b9a <RCCEx_PLLSAI1_Config+0x86>
 8006b68:	2b03      	cmp	r3, #3
 8006b6a:	d825      	bhi.n	8006bb8 <RCCEx_PLLSAI1_Config+0xa4>
 8006b6c:	2b01      	cmp	r3, #1
 8006b6e:	d002      	beq.n	8006b76 <RCCEx_PLLSAI1_Config+0x62>
 8006b70:	2b02      	cmp	r3, #2
 8006b72:	d009      	beq.n	8006b88 <RCCEx_PLLSAI1_Config+0x74>
 8006b74:	e020      	b.n	8006bb8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006b76:	4b5f      	ldr	r3, [pc, #380]	@ (8006cf4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	f003 0302 	and.w	r3, r3, #2
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d11d      	bne.n	8006bbe <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8006b82:	2301      	movs	r3, #1
 8006b84:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006b86:	e01a      	b.n	8006bbe <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006b88:	4b5a      	ldr	r3, [pc, #360]	@ (8006cf4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d116      	bne.n	8006bc2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8006b94:	2301      	movs	r3, #1
 8006b96:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006b98:	e013      	b.n	8006bc2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006b9a:	4b56      	ldr	r3, [pc, #344]	@ (8006cf4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d10f      	bne.n	8006bc6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006ba6:	4b53      	ldr	r3, [pc, #332]	@ (8006cf4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d109      	bne.n	8006bc6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8006bb2:	2301      	movs	r3, #1
 8006bb4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006bb6:	e006      	b.n	8006bc6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8006bb8:	2301      	movs	r3, #1
 8006bba:	73fb      	strb	r3, [r7, #15]
      break;
 8006bbc:	e004      	b.n	8006bc8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006bbe:	bf00      	nop
 8006bc0:	e002      	b.n	8006bc8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006bc2:	bf00      	nop
 8006bc4:	e000      	b.n	8006bc8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006bc6:	bf00      	nop
    }

    if(status == HAL_OK)
 8006bc8:	7bfb      	ldrb	r3, [r7, #15]
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d10d      	bne.n	8006bea <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8006bce:	4b49      	ldr	r3, [pc, #292]	@ (8006cf4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006bd0:	68db      	ldr	r3, [r3, #12]
 8006bd2:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	6819      	ldr	r1, [r3, #0]
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	685b      	ldr	r3, [r3, #4]
 8006bde:	3b01      	subs	r3, #1
 8006be0:	011b      	lsls	r3, r3, #4
 8006be2:	430b      	orrs	r3, r1
 8006be4:	4943      	ldr	r1, [pc, #268]	@ (8006cf4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006be6:	4313      	orrs	r3, r2
 8006be8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8006bea:	7bfb      	ldrb	r3, [r7, #15]
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d17c      	bne.n	8006cea <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8006bf0:	4b40      	ldr	r3, [pc, #256]	@ (8006cf4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	4a3f      	ldr	r2, [pc, #252]	@ (8006cf4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006bf6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006bfa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006bfc:	f7fb ff56 	bl	8002aac <HAL_GetTick>
 8006c00:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006c02:	e009      	b.n	8006c18 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006c04:	f7fb ff52 	bl	8002aac <HAL_GetTick>
 8006c08:	4602      	mov	r2, r0
 8006c0a:	68bb      	ldr	r3, [r7, #8]
 8006c0c:	1ad3      	subs	r3, r2, r3
 8006c0e:	2b02      	cmp	r3, #2
 8006c10:	d902      	bls.n	8006c18 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8006c12:	2303      	movs	r3, #3
 8006c14:	73fb      	strb	r3, [r7, #15]
        break;
 8006c16:	e005      	b.n	8006c24 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006c18:	4b36      	ldr	r3, [pc, #216]	@ (8006cf4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d1ef      	bne.n	8006c04 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8006c24:	7bfb      	ldrb	r3, [r7, #15]
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d15f      	bne.n	8006cea <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006c2a:	683b      	ldr	r3, [r7, #0]
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d110      	bne.n	8006c52 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006c30:	4b30      	ldr	r3, [pc, #192]	@ (8006cf4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006c32:	691b      	ldr	r3, [r3, #16]
 8006c34:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8006c38:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8006c3c:	687a      	ldr	r2, [r7, #4]
 8006c3e:	6892      	ldr	r2, [r2, #8]
 8006c40:	0211      	lsls	r1, r2, #8
 8006c42:	687a      	ldr	r2, [r7, #4]
 8006c44:	68d2      	ldr	r2, [r2, #12]
 8006c46:	06d2      	lsls	r2, r2, #27
 8006c48:	430a      	orrs	r2, r1
 8006c4a:	492a      	ldr	r1, [pc, #168]	@ (8006cf4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006c4c:	4313      	orrs	r3, r2
 8006c4e:	610b      	str	r3, [r1, #16]
 8006c50:	e027      	b.n	8006ca2 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8006c52:	683b      	ldr	r3, [r7, #0]
 8006c54:	2b01      	cmp	r3, #1
 8006c56:	d112      	bne.n	8006c7e <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006c58:	4b26      	ldr	r3, [pc, #152]	@ (8006cf4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006c5a:	691b      	ldr	r3, [r3, #16]
 8006c5c:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8006c60:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8006c64:	687a      	ldr	r2, [r7, #4]
 8006c66:	6892      	ldr	r2, [r2, #8]
 8006c68:	0211      	lsls	r1, r2, #8
 8006c6a:	687a      	ldr	r2, [r7, #4]
 8006c6c:	6912      	ldr	r2, [r2, #16]
 8006c6e:	0852      	lsrs	r2, r2, #1
 8006c70:	3a01      	subs	r2, #1
 8006c72:	0552      	lsls	r2, r2, #21
 8006c74:	430a      	orrs	r2, r1
 8006c76:	491f      	ldr	r1, [pc, #124]	@ (8006cf4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006c78:	4313      	orrs	r3, r2
 8006c7a:	610b      	str	r3, [r1, #16]
 8006c7c:	e011      	b.n	8006ca2 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006c7e:	4b1d      	ldr	r3, [pc, #116]	@ (8006cf4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006c80:	691b      	ldr	r3, [r3, #16]
 8006c82:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8006c86:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8006c8a:	687a      	ldr	r2, [r7, #4]
 8006c8c:	6892      	ldr	r2, [r2, #8]
 8006c8e:	0211      	lsls	r1, r2, #8
 8006c90:	687a      	ldr	r2, [r7, #4]
 8006c92:	6952      	ldr	r2, [r2, #20]
 8006c94:	0852      	lsrs	r2, r2, #1
 8006c96:	3a01      	subs	r2, #1
 8006c98:	0652      	lsls	r2, r2, #25
 8006c9a:	430a      	orrs	r2, r1
 8006c9c:	4915      	ldr	r1, [pc, #84]	@ (8006cf4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006c9e:	4313      	orrs	r3, r2
 8006ca0:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8006ca2:	4b14      	ldr	r3, [pc, #80]	@ (8006cf4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	4a13      	ldr	r2, [pc, #76]	@ (8006cf4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006ca8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006cac:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006cae:	f7fb fefd 	bl	8002aac <HAL_GetTick>
 8006cb2:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006cb4:	e009      	b.n	8006cca <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006cb6:	f7fb fef9 	bl	8002aac <HAL_GetTick>
 8006cba:	4602      	mov	r2, r0
 8006cbc:	68bb      	ldr	r3, [r7, #8]
 8006cbe:	1ad3      	subs	r3, r2, r3
 8006cc0:	2b02      	cmp	r3, #2
 8006cc2:	d902      	bls.n	8006cca <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8006cc4:	2303      	movs	r3, #3
 8006cc6:	73fb      	strb	r3, [r7, #15]
          break;
 8006cc8:	e005      	b.n	8006cd6 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006cca:	4b0a      	ldr	r3, [pc, #40]	@ (8006cf4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d0ef      	beq.n	8006cb6 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8006cd6:	7bfb      	ldrb	r3, [r7, #15]
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d106      	bne.n	8006cea <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8006cdc:	4b05      	ldr	r3, [pc, #20]	@ (8006cf4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006cde:	691a      	ldr	r2, [r3, #16]
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	699b      	ldr	r3, [r3, #24]
 8006ce4:	4903      	ldr	r1, [pc, #12]	@ (8006cf4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006ce6:	4313      	orrs	r3, r2
 8006ce8:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8006cea:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cec:	4618      	mov	r0, r3
 8006cee:	3710      	adds	r7, #16
 8006cf0:	46bd      	mov	sp, r7
 8006cf2:	bd80      	pop	{r7, pc}
 8006cf4:	40021000 	.word	0x40021000

08006cf8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006cf8:	b580      	push	{r7, lr}
 8006cfa:	b084      	sub	sp, #16
 8006cfc:	af00      	add	r7, sp, #0
 8006cfe:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d101      	bne.n	8006d0a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006d06:	2301      	movs	r3, #1
 8006d08:	e095      	b.n	8006e36 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d108      	bne.n	8006d24 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	685b      	ldr	r3, [r3, #4]
 8006d16:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006d1a:	d009      	beq.n	8006d30 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	2200      	movs	r2, #0
 8006d20:	61da      	str	r2, [r3, #28]
 8006d22:	e005      	b.n	8006d30 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	2200      	movs	r2, #0
 8006d28:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	2200      	movs	r2, #0
 8006d2e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	2200      	movs	r2, #0
 8006d34:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006d3c:	b2db      	uxtb	r3, r3
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d106      	bne.n	8006d50 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	2200      	movs	r2, #0
 8006d46:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006d4a:	6878      	ldr	r0, [r7, #4]
 8006d4c:	f7fb fd0c 	bl	8002768 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	2202      	movs	r2, #2
 8006d54:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	681a      	ldr	r2, [r3, #0]
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006d66:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	68db      	ldr	r3, [r3, #12]
 8006d6c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006d70:	d902      	bls.n	8006d78 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006d72:	2300      	movs	r3, #0
 8006d74:	60fb      	str	r3, [r7, #12]
 8006d76:	e002      	b.n	8006d7e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006d78:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006d7c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	68db      	ldr	r3, [r3, #12]
 8006d82:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8006d86:	d007      	beq.n	8006d98 <HAL_SPI_Init+0xa0>
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	68db      	ldr	r3, [r3, #12]
 8006d8c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006d90:	d002      	beq.n	8006d98 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	2200      	movs	r2, #0
 8006d96:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	685b      	ldr	r3, [r3, #4]
 8006d9c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	689b      	ldr	r3, [r3, #8]
 8006da4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006da8:	431a      	orrs	r2, r3
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	691b      	ldr	r3, [r3, #16]
 8006dae:	f003 0302 	and.w	r3, r3, #2
 8006db2:	431a      	orrs	r2, r3
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	695b      	ldr	r3, [r3, #20]
 8006db8:	f003 0301 	and.w	r3, r3, #1
 8006dbc:	431a      	orrs	r2, r3
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	699b      	ldr	r3, [r3, #24]
 8006dc2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006dc6:	431a      	orrs	r2, r3
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	69db      	ldr	r3, [r3, #28]
 8006dcc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006dd0:	431a      	orrs	r2, r3
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	6a1b      	ldr	r3, [r3, #32]
 8006dd6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006dda:	ea42 0103 	orr.w	r1, r2, r3
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006de2:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	430a      	orrs	r2, r1
 8006dec:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	699b      	ldr	r3, [r3, #24]
 8006df2:	0c1b      	lsrs	r3, r3, #16
 8006df4:	f003 0204 	and.w	r2, r3, #4
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006dfc:	f003 0310 	and.w	r3, r3, #16
 8006e00:	431a      	orrs	r2, r3
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006e06:	f003 0308 	and.w	r3, r3, #8
 8006e0a:	431a      	orrs	r2, r3
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	68db      	ldr	r3, [r3, #12]
 8006e10:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8006e14:	ea42 0103 	orr.w	r1, r2, r3
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	430a      	orrs	r2, r1
 8006e24:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	2200      	movs	r2, #0
 8006e2a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	2201      	movs	r2, #1
 8006e30:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8006e34:	2300      	movs	r3, #0
}
 8006e36:	4618      	mov	r0, r3
 8006e38:	3710      	adds	r7, #16
 8006e3a:	46bd      	mov	sp, r7
 8006e3c:	bd80      	pop	{r7, pc}

08006e3e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8006e3e:	b580      	push	{r7, lr}
 8006e40:	b08a      	sub	sp, #40	@ 0x28
 8006e42:	af00      	add	r7, sp, #0
 8006e44:	60f8      	str	r0, [r7, #12]
 8006e46:	60b9      	str	r1, [r7, #8]
 8006e48:	607a      	str	r2, [r7, #4]
 8006e4a:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006e4c:	2301      	movs	r3, #1
 8006e4e:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006e50:	f7fb fe2c 	bl	8002aac <HAL_GetTick>
 8006e54:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006e5c:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	685b      	ldr	r3, [r3, #4]
 8006e62:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8006e64:	887b      	ldrh	r3, [r7, #2]
 8006e66:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 8006e68:	887b      	ldrh	r3, [r7, #2]
 8006e6a:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006e6c:	7ffb      	ldrb	r3, [r7, #31]
 8006e6e:	2b01      	cmp	r3, #1
 8006e70:	d00c      	beq.n	8006e8c <HAL_SPI_TransmitReceive+0x4e>
 8006e72:	69bb      	ldr	r3, [r7, #24]
 8006e74:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006e78:	d106      	bne.n	8006e88 <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	689b      	ldr	r3, [r3, #8]
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d102      	bne.n	8006e88 <HAL_SPI_TransmitReceive+0x4a>
 8006e82:	7ffb      	ldrb	r3, [r7, #31]
 8006e84:	2b04      	cmp	r3, #4
 8006e86:	d001      	beq.n	8006e8c <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8006e88:	2302      	movs	r3, #2
 8006e8a:	e1f3      	b.n	8007274 <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006e8c:	68bb      	ldr	r3, [r7, #8]
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d005      	beq.n	8006e9e <HAL_SPI_TransmitReceive+0x60>
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d002      	beq.n	8006e9e <HAL_SPI_TransmitReceive+0x60>
 8006e98:	887b      	ldrh	r3, [r7, #2]
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d101      	bne.n	8006ea2 <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 8006e9e:	2301      	movs	r3, #1
 8006ea0:	e1e8      	b.n	8007274 <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8006ea8:	2b01      	cmp	r3, #1
 8006eaa:	d101      	bne.n	8006eb0 <HAL_SPI_TransmitReceive+0x72>
 8006eac:	2302      	movs	r3, #2
 8006eae:	e1e1      	b.n	8007274 <HAL_SPI_TransmitReceive+0x436>
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	2201      	movs	r2, #1
 8006eb4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006ebe:	b2db      	uxtb	r3, r3
 8006ec0:	2b04      	cmp	r3, #4
 8006ec2:	d003      	beq.n	8006ecc <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	2205      	movs	r2, #5
 8006ec8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	2200      	movs	r2, #0
 8006ed0:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	687a      	ldr	r2, [r7, #4]
 8006ed6:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	887a      	ldrh	r2, [r7, #2]
 8006edc:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	887a      	ldrh	r2, [r7, #2]
 8006ee4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	68ba      	ldr	r2, [r7, #8]
 8006eec:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	887a      	ldrh	r2, [r7, #2]
 8006ef2:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	887a      	ldrh	r2, [r7, #2]
 8006ef8:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	2200      	movs	r2, #0
 8006efe:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	2200      	movs	r2, #0
 8006f04:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	68db      	ldr	r3, [r3, #12]
 8006f0a:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006f0e:	d802      	bhi.n	8006f16 <HAL_SPI_TransmitReceive+0xd8>
 8006f10:	8abb      	ldrh	r3, [r7, #20]
 8006f12:	2b01      	cmp	r3, #1
 8006f14:	d908      	bls.n	8006f28 <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	685a      	ldr	r2, [r3, #4]
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006f24:	605a      	str	r2, [r3, #4]
 8006f26:	e007      	b.n	8006f38 <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	685a      	ldr	r2, [r3, #4]
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006f36:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006f42:	2b40      	cmp	r3, #64	@ 0x40
 8006f44:	d007      	beq.n	8006f56 <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	681a      	ldr	r2, [r3, #0]
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006f54:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	68db      	ldr	r3, [r3, #12]
 8006f5a:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006f5e:	f240 8083 	bls.w	8007068 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	685b      	ldr	r3, [r3, #4]
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d002      	beq.n	8006f70 <HAL_SPI_TransmitReceive+0x132>
 8006f6a:	8afb      	ldrh	r3, [r7, #22]
 8006f6c:	2b01      	cmp	r3, #1
 8006f6e:	d16f      	bne.n	8007050 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f74:	881a      	ldrh	r2, [r3, #0]
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f80:	1c9a      	adds	r2, r3, #2
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006f8a:	b29b      	uxth	r3, r3
 8006f8c:	3b01      	subs	r3, #1
 8006f8e:	b29a      	uxth	r2, r3
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006f94:	e05c      	b.n	8007050 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	689b      	ldr	r3, [r3, #8]
 8006f9c:	f003 0302 	and.w	r3, r3, #2
 8006fa0:	2b02      	cmp	r3, #2
 8006fa2:	d11b      	bne.n	8006fdc <HAL_SPI_TransmitReceive+0x19e>
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006fa8:	b29b      	uxth	r3, r3
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d016      	beq.n	8006fdc <HAL_SPI_TransmitReceive+0x19e>
 8006fae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fb0:	2b01      	cmp	r3, #1
 8006fb2:	d113      	bne.n	8006fdc <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006fb8:	881a      	ldrh	r2, [r3, #0]
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006fc4:	1c9a      	adds	r2, r3, #2
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006fce:	b29b      	uxth	r3, r3
 8006fd0:	3b01      	subs	r3, #1
 8006fd2:	b29a      	uxth	r2, r3
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006fd8:	2300      	movs	r3, #0
 8006fda:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	689b      	ldr	r3, [r3, #8]
 8006fe2:	f003 0301 	and.w	r3, r3, #1
 8006fe6:	2b01      	cmp	r3, #1
 8006fe8:	d11c      	bne.n	8007024 <HAL_SPI_TransmitReceive+0x1e6>
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006ff0:	b29b      	uxth	r3, r3
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d016      	beq.n	8007024 <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	68da      	ldr	r2, [r3, #12]
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007000:	b292      	uxth	r2, r2
 8007002:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007008:	1c9a      	adds	r2, r3, #2
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007014:	b29b      	uxth	r3, r3
 8007016:	3b01      	subs	r3, #1
 8007018:	b29a      	uxth	r2, r3
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007020:	2301      	movs	r3, #1
 8007022:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007024:	f7fb fd42 	bl	8002aac <HAL_GetTick>
 8007028:	4602      	mov	r2, r0
 800702a:	6a3b      	ldr	r3, [r7, #32]
 800702c:	1ad3      	subs	r3, r2, r3
 800702e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007030:	429a      	cmp	r2, r3
 8007032:	d80d      	bhi.n	8007050 <HAL_SPI_TransmitReceive+0x212>
 8007034:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007036:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800703a:	d009      	beq.n	8007050 <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	2201      	movs	r2, #1
 8007040:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	2200      	movs	r2, #0
 8007048:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 800704c:	2303      	movs	r3, #3
 800704e:	e111      	b.n	8007274 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007054:	b29b      	uxth	r3, r3
 8007056:	2b00      	cmp	r3, #0
 8007058:	d19d      	bne.n	8006f96 <HAL_SPI_TransmitReceive+0x158>
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007060:	b29b      	uxth	r3, r3
 8007062:	2b00      	cmp	r3, #0
 8007064:	d197      	bne.n	8006f96 <HAL_SPI_TransmitReceive+0x158>
 8007066:	e0e5      	b.n	8007234 <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	685b      	ldr	r3, [r3, #4]
 800706c:	2b00      	cmp	r3, #0
 800706e:	d003      	beq.n	8007078 <HAL_SPI_TransmitReceive+0x23a>
 8007070:	8afb      	ldrh	r3, [r7, #22]
 8007072:	2b01      	cmp	r3, #1
 8007074:	f040 80d1 	bne.w	800721a <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800707c:	b29b      	uxth	r3, r3
 800707e:	2b01      	cmp	r3, #1
 8007080:	d912      	bls.n	80070a8 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007086:	881a      	ldrh	r2, [r3, #0]
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007092:	1c9a      	adds	r2, r3, #2
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800709c:	b29b      	uxth	r3, r3
 800709e:	3b02      	subs	r3, #2
 80070a0:	b29a      	uxth	r2, r3
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80070a6:	e0b8      	b.n	800721a <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	330c      	adds	r3, #12
 80070b2:	7812      	ldrb	r2, [r2, #0]
 80070b4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070ba:	1c5a      	adds	r2, r3, #1
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80070c4:	b29b      	uxth	r3, r3
 80070c6:	3b01      	subs	r3, #1
 80070c8:	b29a      	uxth	r2, r3
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80070ce:	e0a4      	b.n	800721a <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	689b      	ldr	r3, [r3, #8]
 80070d6:	f003 0302 	and.w	r3, r3, #2
 80070da:	2b02      	cmp	r3, #2
 80070dc:	d134      	bne.n	8007148 <HAL_SPI_TransmitReceive+0x30a>
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80070e2:	b29b      	uxth	r3, r3
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d02f      	beq.n	8007148 <HAL_SPI_TransmitReceive+0x30a>
 80070e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070ea:	2b01      	cmp	r3, #1
 80070ec:	d12c      	bne.n	8007148 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80070f2:	b29b      	uxth	r3, r3
 80070f4:	2b01      	cmp	r3, #1
 80070f6:	d912      	bls.n	800711e <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070fc:	881a      	ldrh	r2, [r3, #0]
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007108:	1c9a      	adds	r2, r3, #2
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007112:	b29b      	uxth	r3, r3
 8007114:	3b02      	subs	r3, #2
 8007116:	b29a      	uxth	r2, r3
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800711c:	e012      	b.n	8007144 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	330c      	adds	r3, #12
 8007128:	7812      	ldrb	r2, [r2, #0]
 800712a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007130:	1c5a      	adds	r2, r3, #1
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800713a:	b29b      	uxth	r3, r3
 800713c:	3b01      	subs	r3, #1
 800713e:	b29a      	uxth	r2, r3
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007144:	2300      	movs	r3, #0
 8007146:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	689b      	ldr	r3, [r3, #8]
 800714e:	f003 0301 	and.w	r3, r3, #1
 8007152:	2b01      	cmp	r3, #1
 8007154:	d148      	bne.n	80071e8 <HAL_SPI_TransmitReceive+0x3aa>
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800715c:	b29b      	uxth	r3, r3
 800715e:	2b00      	cmp	r3, #0
 8007160:	d042      	beq.n	80071e8 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007168:	b29b      	uxth	r3, r3
 800716a:	2b01      	cmp	r3, #1
 800716c:	d923      	bls.n	80071b6 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	68da      	ldr	r2, [r3, #12]
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007178:	b292      	uxth	r2, r2
 800717a:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007180:	1c9a      	adds	r2, r3, #2
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800718c:	b29b      	uxth	r3, r3
 800718e:	3b02      	subs	r3, #2
 8007190:	b29a      	uxth	r2, r3
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800719e:	b29b      	uxth	r3, r3
 80071a0:	2b01      	cmp	r3, #1
 80071a2:	d81f      	bhi.n	80071e4 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	685a      	ldr	r2, [r3, #4]
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80071b2:	605a      	str	r2, [r3, #4]
 80071b4:	e016      	b.n	80071e4 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	f103 020c 	add.w	r2, r3, #12
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071c2:	7812      	ldrb	r2, [r2, #0]
 80071c4:	b2d2      	uxtb	r2, r2
 80071c6:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071cc:	1c5a      	adds	r2, r3, #1
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80071d8:	b29b      	uxth	r3, r3
 80071da:	3b01      	subs	r3, #1
 80071dc:	b29a      	uxth	r2, r3
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80071e4:	2301      	movs	r3, #1
 80071e6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80071e8:	f7fb fc60 	bl	8002aac <HAL_GetTick>
 80071ec:	4602      	mov	r2, r0
 80071ee:	6a3b      	ldr	r3, [r7, #32]
 80071f0:	1ad3      	subs	r3, r2, r3
 80071f2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80071f4:	429a      	cmp	r2, r3
 80071f6:	d803      	bhi.n	8007200 <HAL_SPI_TransmitReceive+0x3c2>
 80071f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071fa:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80071fe:	d102      	bne.n	8007206 <HAL_SPI_TransmitReceive+0x3c8>
 8007200:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007202:	2b00      	cmp	r3, #0
 8007204:	d109      	bne.n	800721a <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	2201      	movs	r2, #1
 800720a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	2200      	movs	r2, #0
 8007212:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8007216:	2303      	movs	r3, #3
 8007218:	e02c      	b.n	8007274 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800721e:	b29b      	uxth	r3, r3
 8007220:	2b00      	cmp	r3, #0
 8007222:	f47f af55 	bne.w	80070d0 <HAL_SPI_TransmitReceive+0x292>
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800722c:	b29b      	uxth	r3, r3
 800722e:	2b00      	cmp	r3, #0
 8007230:	f47f af4e 	bne.w	80070d0 <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007234:	6a3a      	ldr	r2, [r7, #32]
 8007236:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007238:	68f8      	ldr	r0, [r7, #12]
 800723a:	f000 f93d 	bl	80074b8 <SPI_EndRxTxTransaction>
 800723e:	4603      	mov	r3, r0
 8007240:	2b00      	cmp	r3, #0
 8007242:	d008      	beq.n	8007256 <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	2220      	movs	r2, #32
 8007248:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	2200      	movs	r2, #0
 800724e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8007252:	2301      	movs	r3, #1
 8007254:	e00e      	b.n	8007274 <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	2201      	movs	r2, #1
 800725a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	2200      	movs	r2, #0
 8007262:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800726a:	2b00      	cmp	r3, #0
 800726c:	d001      	beq.n	8007272 <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 800726e:	2301      	movs	r3, #1
 8007270:	e000      	b.n	8007274 <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 8007272:	2300      	movs	r3, #0
  }
}
 8007274:	4618      	mov	r0, r3
 8007276:	3728      	adds	r7, #40	@ 0x28
 8007278:	46bd      	mov	sp, r7
 800727a:	bd80      	pop	{r7, pc}

0800727c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800727c:	b580      	push	{r7, lr}
 800727e:	b088      	sub	sp, #32
 8007280:	af00      	add	r7, sp, #0
 8007282:	60f8      	str	r0, [r7, #12]
 8007284:	60b9      	str	r1, [r7, #8]
 8007286:	603b      	str	r3, [r7, #0]
 8007288:	4613      	mov	r3, r2
 800728a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800728c:	f7fb fc0e 	bl	8002aac <HAL_GetTick>
 8007290:	4602      	mov	r2, r0
 8007292:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007294:	1a9b      	subs	r3, r3, r2
 8007296:	683a      	ldr	r2, [r7, #0]
 8007298:	4413      	add	r3, r2
 800729a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800729c:	f7fb fc06 	bl	8002aac <HAL_GetTick>
 80072a0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80072a2:	4b39      	ldr	r3, [pc, #228]	@ (8007388 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	015b      	lsls	r3, r3, #5
 80072a8:	0d1b      	lsrs	r3, r3, #20
 80072aa:	69fa      	ldr	r2, [r7, #28]
 80072ac:	fb02 f303 	mul.w	r3, r2, r3
 80072b0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80072b2:	e054      	b.n	800735e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80072b4:	683b      	ldr	r3, [r7, #0]
 80072b6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80072ba:	d050      	beq.n	800735e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80072bc:	f7fb fbf6 	bl	8002aac <HAL_GetTick>
 80072c0:	4602      	mov	r2, r0
 80072c2:	69bb      	ldr	r3, [r7, #24]
 80072c4:	1ad3      	subs	r3, r2, r3
 80072c6:	69fa      	ldr	r2, [r7, #28]
 80072c8:	429a      	cmp	r2, r3
 80072ca:	d902      	bls.n	80072d2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80072cc:	69fb      	ldr	r3, [r7, #28]
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d13d      	bne.n	800734e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	685a      	ldr	r2, [r3, #4]
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80072e0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	685b      	ldr	r3, [r3, #4]
 80072e6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80072ea:	d111      	bne.n	8007310 <SPI_WaitFlagStateUntilTimeout+0x94>
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	689b      	ldr	r3, [r3, #8]
 80072f0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80072f4:	d004      	beq.n	8007300 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	689b      	ldr	r3, [r3, #8]
 80072fa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80072fe:	d107      	bne.n	8007310 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	681a      	ldr	r2, [r3, #0]
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800730e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007314:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007318:	d10f      	bne.n	800733a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	681a      	ldr	r2, [r3, #0]
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007328:	601a      	str	r2, [r3, #0]
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	681a      	ldr	r2, [r3, #0]
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007338:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	2201      	movs	r2, #1
 800733e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	2200      	movs	r2, #0
 8007346:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800734a:	2303      	movs	r3, #3
 800734c:	e017      	b.n	800737e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800734e:	697b      	ldr	r3, [r7, #20]
 8007350:	2b00      	cmp	r3, #0
 8007352:	d101      	bne.n	8007358 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007354:	2300      	movs	r3, #0
 8007356:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007358:	697b      	ldr	r3, [r7, #20]
 800735a:	3b01      	subs	r3, #1
 800735c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	689a      	ldr	r2, [r3, #8]
 8007364:	68bb      	ldr	r3, [r7, #8]
 8007366:	4013      	ands	r3, r2
 8007368:	68ba      	ldr	r2, [r7, #8]
 800736a:	429a      	cmp	r2, r3
 800736c:	bf0c      	ite	eq
 800736e:	2301      	moveq	r3, #1
 8007370:	2300      	movne	r3, #0
 8007372:	b2db      	uxtb	r3, r3
 8007374:	461a      	mov	r2, r3
 8007376:	79fb      	ldrb	r3, [r7, #7]
 8007378:	429a      	cmp	r2, r3
 800737a:	d19b      	bne.n	80072b4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800737c:	2300      	movs	r3, #0
}
 800737e:	4618      	mov	r0, r3
 8007380:	3720      	adds	r7, #32
 8007382:	46bd      	mov	sp, r7
 8007384:	bd80      	pop	{r7, pc}
 8007386:	bf00      	nop
 8007388:	20000004 	.word	0x20000004

0800738c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800738c:	b580      	push	{r7, lr}
 800738e:	b08a      	sub	sp, #40	@ 0x28
 8007390:	af00      	add	r7, sp, #0
 8007392:	60f8      	str	r0, [r7, #12]
 8007394:	60b9      	str	r1, [r7, #8]
 8007396:	607a      	str	r2, [r7, #4]
 8007398:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800739a:	2300      	movs	r3, #0
 800739c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800739e:	f7fb fb85 	bl	8002aac <HAL_GetTick>
 80073a2:	4602      	mov	r2, r0
 80073a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073a6:	1a9b      	subs	r3, r3, r2
 80073a8:	683a      	ldr	r2, [r7, #0]
 80073aa:	4413      	add	r3, r2
 80073ac:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 80073ae:	f7fb fb7d 	bl	8002aac <HAL_GetTick>
 80073b2:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	330c      	adds	r3, #12
 80073ba:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80073bc:	4b3d      	ldr	r3, [pc, #244]	@ (80074b4 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80073be:	681a      	ldr	r2, [r3, #0]
 80073c0:	4613      	mov	r3, r2
 80073c2:	009b      	lsls	r3, r3, #2
 80073c4:	4413      	add	r3, r2
 80073c6:	00da      	lsls	r2, r3, #3
 80073c8:	1ad3      	subs	r3, r2, r3
 80073ca:	0d1b      	lsrs	r3, r3, #20
 80073cc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80073ce:	fb02 f303 	mul.w	r3, r2, r3
 80073d2:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80073d4:	e060      	b.n	8007498 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80073d6:	68bb      	ldr	r3, [r7, #8]
 80073d8:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80073dc:	d107      	bne.n	80073ee <SPI_WaitFifoStateUntilTimeout+0x62>
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d104      	bne.n	80073ee <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80073e4:	69fb      	ldr	r3, [r7, #28]
 80073e6:	781b      	ldrb	r3, [r3, #0]
 80073e8:	b2db      	uxtb	r3, r3
 80073ea:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80073ec:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80073ee:	683b      	ldr	r3, [r7, #0]
 80073f0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80073f4:	d050      	beq.n	8007498 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80073f6:	f7fb fb59 	bl	8002aac <HAL_GetTick>
 80073fa:	4602      	mov	r2, r0
 80073fc:	6a3b      	ldr	r3, [r7, #32]
 80073fe:	1ad3      	subs	r3, r2, r3
 8007400:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007402:	429a      	cmp	r2, r3
 8007404:	d902      	bls.n	800740c <SPI_WaitFifoStateUntilTimeout+0x80>
 8007406:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007408:	2b00      	cmp	r3, #0
 800740a:	d13d      	bne.n	8007488 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	685a      	ldr	r2, [r3, #4]
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800741a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	685b      	ldr	r3, [r3, #4]
 8007420:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007424:	d111      	bne.n	800744a <SPI_WaitFifoStateUntilTimeout+0xbe>
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	689b      	ldr	r3, [r3, #8]
 800742a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800742e:	d004      	beq.n	800743a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	689b      	ldr	r3, [r3, #8]
 8007434:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007438:	d107      	bne.n	800744a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	681a      	ldr	r2, [r3, #0]
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007448:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800744e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007452:	d10f      	bne.n	8007474 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	681a      	ldr	r2, [r3, #0]
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007462:	601a      	str	r2, [r3, #0]
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	681a      	ldr	r2, [r3, #0]
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007472:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	2201      	movs	r2, #1
 8007478:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	2200      	movs	r2, #0
 8007480:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8007484:	2303      	movs	r3, #3
 8007486:	e010      	b.n	80074aa <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007488:	69bb      	ldr	r3, [r7, #24]
 800748a:	2b00      	cmp	r3, #0
 800748c:	d101      	bne.n	8007492 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800748e:	2300      	movs	r3, #0
 8007490:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8007492:	69bb      	ldr	r3, [r7, #24]
 8007494:	3b01      	subs	r3, #1
 8007496:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	689a      	ldr	r2, [r3, #8]
 800749e:	68bb      	ldr	r3, [r7, #8]
 80074a0:	4013      	ands	r3, r2
 80074a2:	687a      	ldr	r2, [r7, #4]
 80074a4:	429a      	cmp	r2, r3
 80074a6:	d196      	bne.n	80073d6 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80074a8:	2300      	movs	r3, #0
}
 80074aa:	4618      	mov	r0, r3
 80074ac:	3728      	adds	r7, #40	@ 0x28
 80074ae:	46bd      	mov	sp, r7
 80074b0:	bd80      	pop	{r7, pc}
 80074b2:	bf00      	nop
 80074b4:	20000004 	.word	0x20000004

080074b8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80074b8:	b580      	push	{r7, lr}
 80074ba:	b086      	sub	sp, #24
 80074bc:	af02      	add	r7, sp, #8
 80074be:	60f8      	str	r0, [r7, #12]
 80074c0:	60b9      	str	r1, [r7, #8]
 80074c2:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	9300      	str	r3, [sp, #0]
 80074c8:	68bb      	ldr	r3, [r7, #8]
 80074ca:	2200      	movs	r2, #0
 80074cc:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 80074d0:	68f8      	ldr	r0, [r7, #12]
 80074d2:	f7ff ff5b 	bl	800738c <SPI_WaitFifoStateUntilTimeout>
 80074d6:	4603      	mov	r3, r0
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d007      	beq.n	80074ec <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80074e0:	f043 0220 	orr.w	r2, r3, #32
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80074e8:	2303      	movs	r3, #3
 80074ea:	e027      	b.n	800753c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	9300      	str	r3, [sp, #0]
 80074f0:	68bb      	ldr	r3, [r7, #8]
 80074f2:	2200      	movs	r2, #0
 80074f4:	2180      	movs	r1, #128	@ 0x80
 80074f6:	68f8      	ldr	r0, [r7, #12]
 80074f8:	f7ff fec0 	bl	800727c <SPI_WaitFlagStateUntilTimeout>
 80074fc:	4603      	mov	r3, r0
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d007      	beq.n	8007512 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007506:	f043 0220 	orr.w	r2, r3, #32
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800750e:	2303      	movs	r3, #3
 8007510:	e014      	b.n	800753c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	9300      	str	r3, [sp, #0]
 8007516:	68bb      	ldr	r3, [r7, #8]
 8007518:	2200      	movs	r2, #0
 800751a:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800751e:	68f8      	ldr	r0, [r7, #12]
 8007520:	f7ff ff34 	bl	800738c <SPI_WaitFifoStateUntilTimeout>
 8007524:	4603      	mov	r3, r0
 8007526:	2b00      	cmp	r3, #0
 8007528:	d007      	beq.n	800753a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800752e:	f043 0220 	orr.w	r2, r3, #32
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8007536:	2303      	movs	r3, #3
 8007538:	e000      	b.n	800753c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800753a:	2300      	movs	r3, #0
}
 800753c:	4618      	mov	r0, r3
 800753e:	3710      	adds	r7, #16
 8007540:	46bd      	mov	sp, r7
 8007542:	bd80      	pop	{r7, pc}

08007544 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007544:	b580      	push	{r7, lr}
 8007546:	b082      	sub	sp, #8
 8007548:	af00      	add	r7, sp, #0
 800754a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	2b00      	cmp	r3, #0
 8007550:	d101      	bne.n	8007556 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007552:	2301      	movs	r3, #1
 8007554:	e049      	b.n	80075ea <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800755c:	b2db      	uxtb	r3, r3
 800755e:	2b00      	cmp	r3, #0
 8007560:	d106      	bne.n	8007570 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	2200      	movs	r2, #0
 8007566:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800756a:	6878      	ldr	r0, [r7, #4]
 800756c:	f7fb f940 	bl	80027f0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	2202      	movs	r2, #2
 8007574:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681a      	ldr	r2, [r3, #0]
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	3304      	adds	r3, #4
 8007580:	4619      	mov	r1, r3
 8007582:	4610      	mov	r0, r2
 8007584:	f000 f94c 	bl	8007820 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	2201      	movs	r2, #1
 800758c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	2201      	movs	r2, #1
 8007594:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	2201      	movs	r2, #1
 800759c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	2201      	movs	r2, #1
 80075a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	2201      	movs	r2, #1
 80075ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	2201      	movs	r2, #1
 80075b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	2201      	movs	r2, #1
 80075bc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	2201      	movs	r2, #1
 80075c4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	2201      	movs	r2, #1
 80075cc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	2201      	movs	r2, #1
 80075d4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	2201      	movs	r2, #1
 80075dc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	2201      	movs	r2, #1
 80075e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80075e8:	2300      	movs	r3, #0
}
 80075ea:	4618      	mov	r0, r3
 80075ec:	3708      	adds	r7, #8
 80075ee:	46bd      	mov	sp, r7
 80075f0:	bd80      	pop	{r7, pc}
	...

080075f4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80075f4:	b480      	push	{r7}
 80075f6:	b085      	sub	sp, #20
 80075f8:	af00      	add	r7, sp, #0
 80075fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007602:	b2db      	uxtb	r3, r3
 8007604:	2b01      	cmp	r3, #1
 8007606:	d001      	beq.n	800760c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8007608:	2301      	movs	r3, #1
 800760a:	e033      	b.n	8007674 <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	2202      	movs	r2, #2
 8007610:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	4a19      	ldr	r2, [pc, #100]	@ (8007680 <HAL_TIM_Base_Start+0x8c>)
 800761a:	4293      	cmp	r3, r2
 800761c:	d009      	beq.n	8007632 <HAL_TIM_Base_Start+0x3e>
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007626:	d004      	beq.n	8007632 <HAL_TIM_Base_Start+0x3e>
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	4a15      	ldr	r2, [pc, #84]	@ (8007684 <HAL_TIM_Base_Start+0x90>)
 800762e:	4293      	cmp	r3, r2
 8007630:	d115      	bne.n	800765e <HAL_TIM_Base_Start+0x6a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	689a      	ldr	r2, [r3, #8]
 8007638:	4b13      	ldr	r3, [pc, #76]	@ (8007688 <HAL_TIM_Base_Start+0x94>)
 800763a:	4013      	ands	r3, r2
 800763c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	2b06      	cmp	r3, #6
 8007642:	d015      	beq.n	8007670 <HAL_TIM_Base_Start+0x7c>
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800764a:	d011      	beq.n	8007670 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	681a      	ldr	r2, [r3, #0]
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	f042 0201 	orr.w	r2, r2, #1
 800765a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800765c:	e008      	b.n	8007670 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	681a      	ldr	r2, [r3, #0]
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	f042 0201 	orr.w	r2, r2, #1
 800766c:	601a      	str	r2, [r3, #0]
 800766e:	e000      	b.n	8007672 <HAL_TIM_Base_Start+0x7e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007670:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007672:	2300      	movs	r3, #0
}
 8007674:	4618      	mov	r0, r3
 8007676:	3714      	adds	r7, #20
 8007678:	46bd      	mov	sp, r7
 800767a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800767e:	4770      	bx	lr
 8007680:	40012c00 	.word	0x40012c00
 8007684:	40014000 	.word	0x40014000
 8007688:	00010007 	.word	0x00010007

0800768c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800768c:	b580      	push	{r7, lr}
 800768e:	b084      	sub	sp, #16
 8007690:	af00      	add	r7, sp, #0
 8007692:	6078      	str	r0, [r7, #4]
 8007694:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007696:	2300      	movs	r3, #0
 8007698:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80076a0:	2b01      	cmp	r3, #1
 80076a2:	d101      	bne.n	80076a8 <HAL_TIM_ConfigClockSource+0x1c>
 80076a4:	2302      	movs	r3, #2
 80076a6:	e0b6      	b.n	8007816 <HAL_TIM_ConfigClockSource+0x18a>
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	2201      	movs	r2, #1
 80076ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	2202      	movs	r2, #2
 80076b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	689b      	ldr	r3, [r3, #8]
 80076be:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80076c0:	68bb      	ldr	r3, [r7, #8]
 80076c2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80076c6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80076ca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80076cc:	68bb      	ldr	r3, [r7, #8]
 80076ce:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80076d2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	68ba      	ldr	r2, [r7, #8]
 80076da:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80076dc:	683b      	ldr	r3, [r7, #0]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80076e4:	d03e      	beq.n	8007764 <HAL_TIM_ConfigClockSource+0xd8>
 80076e6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80076ea:	f200 8087 	bhi.w	80077fc <HAL_TIM_ConfigClockSource+0x170>
 80076ee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80076f2:	f000 8086 	beq.w	8007802 <HAL_TIM_ConfigClockSource+0x176>
 80076f6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80076fa:	d87f      	bhi.n	80077fc <HAL_TIM_ConfigClockSource+0x170>
 80076fc:	2b70      	cmp	r3, #112	@ 0x70
 80076fe:	d01a      	beq.n	8007736 <HAL_TIM_ConfigClockSource+0xaa>
 8007700:	2b70      	cmp	r3, #112	@ 0x70
 8007702:	d87b      	bhi.n	80077fc <HAL_TIM_ConfigClockSource+0x170>
 8007704:	2b60      	cmp	r3, #96	@ 0x60
 8007706:	d050      	beq.n	80077aa <HAL_TIM_ConfigClockSource+0x11e>
 8007708:	2b60      	cmp	r3, #96	@ 0x60
 800770a:	d877      	bhi.n	80077fc <HAL_TIM_ConfigClockSource+0x170>
 800770c:	2b50      	cmp	r3, #80	@ 0x50
 800770e:	d03c      	beq.n	800778a <HAL_TIM_ConfigClockSource+0xfe>
 8007710:	2b50      	cmp	r3, #80	@ 0x50
 8007712:	d873      	bhi.n	80077fc <HAL_TIM_ConfigClockSource+0x170>
 8007714:	2b40      	cmp	r3, #64	@ 0x40
 8007716:	d058      	beq.n	80077ca <HAL_TIM_ConfigClockSource+0x13e>
 8007718:	2b40      	cmp	r3, #64	@ 0x40
 800771a:	d86f      	bhi.n	80077fc <HAL_TIM_ConfigClockSource+0x170>
 800771c:	2b30      	cmp	r3, #48	@ 0x30
 800771e:	d064      	beq.n	80077ea <HAL_TIM_ConfigClockSource+0x15e>
 8007720:	2b30      	cmp	r3, #48	@ 0x30
 8007722:	d86b      	bhi.n	80077fc <HAL_TIM_ConfigClockSource+0x170>
 8007724:	2b20      	cmp	r3, #32
 8007726:	d060      	beq.n	80077ea <HAL_TIM_ConfigClockSource+0x15e>
 8007728:	2b20      	cmp	r3, #32
 800772a:	d867      	bhi.n	80077fc <HAL_TIM_ConfigClockSource+0x170>
 800772c:	2b00      	cmp	r3, #0
 800772e:	d05c      	beq.n	80077ea <HAL_TIM_ConfigClockSource+0x15e>
 8007730:	2b10      	cmp	r3, #16
 8007732:	d05a      	beq.n	80077ea <HAL_TIM_ConfigClockSource+0x15e>
 8007734:	e062      	b.n	80077fc <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800773a:	683b      	ldr	r3, [r7, #0]
 800773c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800773e:	683b      	ldr	r3, [r7, #0]
 8007740:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007742:	683b      	ldr	r3, [r7, #0]
 8007744:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007746:	f000 f955 	bl	80079f4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	689b      	ldr	r3, [r3, #8]
 8007750:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007752:	68bb      	ldr	r3, [r7, #8]
 8007754:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8007758:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	68ba      	ldr	r2, [r7, #8]
 8007760:	609a      	str	r2, [r3, #8]
      break;
 8007762:	e04f      	b.n	8007804 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007768:	683b      	ldr	r3, [r7, #0]
 800776a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800776c:	683b      	ldr	r3, [r7, #0]
 800776e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007770:	683b      	ldr	r3, [r7, #0]
 8007772:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007774:	f000 f93e 	bl	80079f4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	689a      	ldr	r2, [r3, #8]
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007786:	609a      	str	r2, [r3, #8]
      break;
 8007788:	e03c      	b.n	8007804 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800778e:	683b      	ldr	r3, [r7, #0]
 8007790:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007792:	683b      	ldr	r3, [r7, #0]
 8007794:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007796:	461a      	mov	r2, r3
 8007798:	f000 f8b2 	bl	8007900 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	2150      	movs	r1, #80	@ 0x50
 80077a2:	4618      	mov	r0, r3
 80077a4:	f000 f90b 	bl	80079be <TIM_ITRx_SetConfig>
      break;
 80077a8:	e02c      	b.n	8007804 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80077ae:	683b      	ldr	r3, [r7, #0]
 80077b0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80077b2:	683b      	ldr	r3, [r7, #0]
 80077b4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80077b6:	461a      	mov	r2, r3
 80077b8:	f000 f8d1 	bl	800795e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	2160      	movs	r1, #96	@ 0x60
 80077c2:	4618      	mov	r0, r3
 80077c4:	f000 f8fb 	bl	80079be <TIM_ITRx_SetConfig>
      break;
 80077c8:	e01c      	b.n	8007804 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80077ce:	683b      	ldr	r3, [r7, #0]
 80077d0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80077d2:	683b      	ldr	r3, [r7, #0]
 80077d4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80077d6:	461a      	mov	r2, r3
 80077d8:	f000 f892 	bl	8007900 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	2140      	movs	r1, #64	@ 0x40
 80077e2:	4618      	mov	r0, r3
 80077e4:	f000 f8eb 	bl	80079be <TIM_ITRx_SetConfig>
      break;
 80077e8:	e00c      	b.n	8007804 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	681a      	ldr	r2, [r3, #0]
 80077ee:	683b      	ldr	r3, [r7, #0]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	4619      	mov	r1, r3
 80077f4:	4610      	mov	r0, r2
 80077f6:	f000 f8e2 	bl	80079be <TIM_ITRx_SetConfig>
      break;
 80077fa:	e003      	b.n	8007804 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80077fc:	2301      	movs	r3, #1
 80077fe:	73fb      	strb	r3, [r7, #15]
      break;
 8007800:	e000      	b.n	8007804 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8007802:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	2201      	movs	r2, #1
 8007808:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	2200      	movs	r2, #0
 8007810:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007814:	7bfb      	ldrb	r3, [r7, #15]
}
 8007816:	4618      	mov	r0, r3
 8007818:	3710      	adds	r7, #16
 800781a:	46bd      	mov	sp, r7
 800781c:	bd80      	pop	{r7, pc}
	...

08007820 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007820:	b480      	push	{r7}
 8007822:	b085      	sub	sp, #20
 8007824:	af00      	add	r7, sp, #0
 8007826:	6078      	str	r0, [r7, #4]
 8007828:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	4a30      	ldr	r2, [pc, #192]	@ (80078f4 <TIM_Base_SetConfig+0xd4>)
 8007834:	4293      	cmp	r3, r2
 8007836:	d003      	beq.n	8007840 <TIM_Base_SetConfig+0x20>
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800783e:	d108      	bne.n	8007852 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007846:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007848:	683b      	ldr	r3, [r7, #0]
 800784a:	685b      	ldr	r3, [r3, #4]
 800784c:	68fa      	ldr	r2, [r7, #12]
 800784e:	4313      	orrs	r3, r2
 8007850:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	4a27      	ldr	r2, [pc, #156]	@ (80078f4 <TIM_Base_SetConfig+0xd4>)
 8007856:	4293      	cmp	r3, r2
 8007858:	d00b      	beq.n	8007872 <TIM_Base_SetConfig+0x52>
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007860:	d007      	beq.n	8007872 <TIM_Base_SetConfig+0x52>
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	4a24      	ldr	r2, [pc, #144]	@ (80078f8 <TIM_Base_SetConfig+0xd8>)
 8007866:	4293      	cmp	r3, r2
 8007868:	d003      	beq.n	8007872 <TIM_Base_SetConfig+0x52>
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	4a23      	ldr	r2, [pc, #140]	@ (80078fc <TIM_Base_SetConfig+0xdc>)
 800786e:	4293      	cmp	r3, r2
 8007870:	d108      	bne.n	8007884 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007878:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800787a:	683b      	ldr	r3, [r7, #0]
 800787c:	68db      	ldr	r3, [r3, #12]
 800787e:	68fa      	ldr	r2, [r7, #12]
 8007880:	4313      	orrs	r3, r2
 8007882:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800788a:	683b      	ldr	r3, [r7, #0]
 800788c:	695b      	ldr	r3, [r3, #20]
 800788e:	4313      	orrs	r3, r2
 8007890:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	68fa      	ldr	r2, [r7, #12]
 8007896:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007898:	683b      	ldr	r3, [r7, #0]
 800789a:	689a      	ldr	r2, [r3, #8]
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80078a0:	683b      	ldr	r3, [r7, #0]
 80078a2:	681a      	ldr	r2, [r3, #0]
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	4a12      	ldr	r2, [pc, #72]	@ (80078f4 <TIM_Base_SetConfig+0xd4>)
 80078ac:	4293      	cmp	r3, r2
 80078ae:	d007      	beq.n	80078c0 <TIM_Base_SetConfig+0xa0>
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	4a11      	ldr	r2, [pc, #68]	@ (80078f8 <TIM_Base_SetConfig+0xd8>)
 80078b4:	4293      	cmp	r3, r2
 80078b6:	d003      	beq.n	80078c0 <TIM_Base_SetConfig+0xa0>
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	4a10      	ldr	r2, [pc, #64]	@ (80078fc <TIM_Base_SetConfig+0xdc>)
 80078bc:	4293      	cmp	r3, r2
 80078be:	d103      	bne.n	80078c8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80078c0:	683b      	ldr	r3, [r7, #0]
 80078c2:	691a      	ldr	r2, [r3, #16]
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	2201      	movs	r2, #1
 80078cc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	691b      	ldr	r3, [r3, #16]
 80078d2:	f003 0301 	and.w	r3, r3, #1
 80078d6:	2b01      	cmp	r3, #1
 80078d8:	d105      	bne.n	80078e6 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	691b      	ldr	r3, [r3, #16]
 80078de:	f023 0201 	bic.w	r2, r3, #1
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	611a      	str	r2, [r3, #16]
  }
}
 80078e6:	bf00      	nop
 80078e8:	3714      	adds	r7, #20
 80078ea:	46bd      	mov	sp, r7
 80078ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f0:	4770      	bx	lr
 80078f2:	bf00      	nop
 80078f4:	40012c00 	.word	0x40012c00
 80078f8:	40014000 	.word	0x40014000
 80078fc:	40014400 	.word	0x40014400

08007900 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007900:	b480      	push	{r7}
 8007902:	b087      	sub	sp, #28
 8007904:	af00      	add	r7, sp, #0
 8007906:	60f8      	str	r0, [r7, #12]
 8007908:	60b9      	str	r1, [r7, #8]
 800790a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	6a1b      	ldr	r3, [r3, #32]
 8007910:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	6a1b      	ldr	r3, [r3, #32]
 8007916:	f023 0201 	bic.w	r2, r3, #1
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	699b      	ldr	r3, [r3, #24]
 8007922:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007924:	693b      	ldr	r3, [r7, #16]
 8007926:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800792a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	011b      	lsls	r3, r3, #4
 8007930:	693a      	ldr	r2, [r7, #16]
 8007932:	4313      	orrs	r3, r2
 8007934:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007936:	697b      	ldr	r3, [r7, #20]
 8007938:	f023 030a 	bic.w	r3, r3, #10
 800793c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800793e:	697a      	ldr	r2, [r7, #20]
 8007940:	68bb      	ldr	r3, [r7, #8]
 8007942:	4313      	orrs	r3, r2
 8007944:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	693a      	ldr	r2, [r7, #16]
 800794a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	697a      	ldr	r2, [r7, #20]
 8007950:	621a      	str	r2, [r3, #32]
}
 8007952:	bf00      	nop
 8007954:	371c      	adds	r7, #28
 8007956:	46bd      	mov	sp, r7
 8007958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800795c:	4770      	bx	lr

0800795e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800795e:	b480      	push	{r7}
 8007960:	b087      	sub	sp, #28
 8007962:	af00      	add	r7, sp, #0
 8007964:	60f8      	str	r0, [r7, #12]
 8007966:	60b9      	str	r1, [r7, #8]
 8007968:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	6a1b      	ldr	r3, [r3, #32]
 800796e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	6a1b      	ldr	r3, [r3, #32]
 8007974:	f023 0210 	bic.w	r2, r3, #16
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	699b      	ldr	r3, [r3, #24]
 8007980:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007982:	693b      	ldr	r3, [r7, #16]
 8007984:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007988:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	031b      	lsls	r3, r3, #12
 800798e:	693a      	ldr	r2, [r7, #16]
 8007990:	4313      	orrs	r3, r2
 8007992:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007994:	697b      	ldr	r3, [r7, #20]
 8007996:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800799a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800799c:	68bb      	ldr	r3, [r7, #8]
 800799e:	011b      	lsls	r3, r3, #4
 80079a0:	697a      	ldr	r2, [r7, #20]
 80079a2:	4313      	orrs	r3, r2
 80079a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	693a      	ldr	r2, [r7, #16]
 80079aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	697a      	ldr	r2, [r7, #20]
 80079b0:	621a      	str	r2, [r3, #32]
}
 80079b2:	bf00      	nop
 80079b4:	371c      	adds	r7, #28
 80079b6:	46bd      	mov	sp, r7
 80079b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079bc:	4770      	bx	lr

080079be <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80079be:	b480      	push	{r7}
 80079c0:	b085      	sub	sp, #20
 80079c2:	af00      	add	r7, sp, #0
 80079c4:	6078      	str	r0, [r7, #4]
 80079c6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	689b      	ldr	r3, [r3, #8]
 80079cc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80079d4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80079d6:	683a      	ldr	r2, [r7, #0]
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	4313      	orrs	r3, r2
 80079dc:	f043 0307 	orr.w	r3, r3, #7
 80079e0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	68fa      	ldr	r2, [r7, #12]
 80079e6:	609a      	str	r2, [r3, #8]
}
 80079e8:	bf00      	nop
 80079ea:	3714      	adds	r7, #20
 80079ec:	46bd      	mov	sp, r7
 80079ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f2:	4770      	bx	lr

080079f4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80079f4:	b480      	push	{r7}
 80079f6:	b087      	sub	sp, #28
 80079f8:	af00      	add	r7, sp, #0
 80079fa:	60f8      	str	r0, [r7, #12]
 80079fc:	60b9      	str	r1, [r7, #8]
 80079fe:	607a      	str	r2, [r7, #4]
 8007a00:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	689b      	ldr	r3, [r3, #8]
 8007a06:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007a08:	697b      	ldr	r3, [r7, #20]
 8007a0a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007a0e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007a10:	683b      	ldr	r3, [r7, #0]
 8007a12:	021a      	lsls	r2, r3, #8
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	431a      	orrs	r2, r3
 8007a18:	68bb      	ldr	r3, [r7, #8]
 8007a1a:	4313      	orrs	r3, r2
 8007a1c:	697a      	ldr	r2, [r7, #20]
 8007a1e:	4313      	orrs	r3, r2
 8007a20:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	697a      	ldr	r2, [r7, #20]
 8007a26:	609a      	str	r2, [r3, #8]
}
 8007a28:	bf00      	nop
 8007a2a:	371c      	adds	r7, #28
 8007a2c:	46bd      	mov	sp, r7
 8007a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a32:	4770      	bx	lr

08007a34 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007a34:	b480      	push	{r7}
 8007a36:	b085      	sub	sp, #20
 8007a38:	af00      	add	r7, sp, #0
 8007a3a:	6078      	str	r0, [r7, #4]
 8007a3c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007a44:	2b01      	cmp	r3, #1
 8007a46:	d101      	bne.n	8007a4c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007a48:	2302      	movs	r3, #2
 8007a4a:	e04f      	b.n	8007aec <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	2201      	movs	r2, #1
 8007a50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	2202      	movs	r2, #2
 8007a58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	685b      	ldr	r3, [r3, #4]
 8007a62:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	689b      	ldr	r3, [r3, #8]
 8007a6a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	4a21      	ldr	r2, [pc, #132]	@ (8007af8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8007a72:	4293      	cmp	r3, r2
 8007a74:	d108      	bne.n	8007a88 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8007a7c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007a7e:	683b      	ldr	r3, [r7, #0]
 8007a80:	685b      	ldr	r3, [r3, #4]
 8007a82:	68fa      	ldr	r2, [r7, #12]
 8007a84:	4313      	orrs	r3, r2
 8007a86:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007a8e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007a90:	683b      	ldr	r3, [r7, #0]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	68fa      	ldr	r2, [r7, #12]
 8007a96:	4313      	orrs	r3, r2
 8007a98:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	68fa      	ldr	r2, [r7, #12]
 8007aa0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	4a14      	ldr	r2, [pc, #80]	@ (8007af8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8007aa8:	4293      	cmp	r3, r2
 8007aaa:	d009      	beq.n	8007ac0 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007ab4:	d004      	beq.n	8007ac0 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	4a10      	ldr	r2, [pc, #64]	@ (8007afc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8007abc:	4293      	cmp	r3, r2
 8007abe:	d10c      	bne.n	8007ada <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007ac0:	68bb      	ldr	r3, [r7, #8]
 8007ac2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007ac6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007ac8:	683b      	ldr	r3, [r7, #0]
 8007aca:	689b      	ldr	r3, [r3, #8]
 8007acc:	68ba      	ldr	r2, [r7, #8]
 8007ace:	4313      	orrs	r3, r2
 8007ad0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	68ba      	ldr	r2, [r7, #8]
 8007ad8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	2201      	movs	r2, #1
 8007ade:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	2200      	movs	r2, #0
 8007ae6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007aea:	2300      	movs	r3, #0
}
 8007aec:	4618      	mov	r0, r3
 8007aee:	3714      	adds	r7, #20
 8007af0:	46bd      	mov	sp, r7
 8007af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007af6:	4770      	bx	lr
 8007af8:	40012c00 	.word	0x40012c00
 8007afc:	40014000 	.word	0x40014000

08007b00 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007b00:	b580      	push	{r7, lr}
 8007b02:	b082      	sub	sp, #8
 8007b04:	af00      	add	r7, sp, #0
 8007b06:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d101      	bne.n	8007b12 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007b0e:	2301      	movs	r3, #1
 8007b10:	e040      	b.n	8007b94 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d106      	bne.n	8007b28 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	2200      	movs	r2, #0
 8007b1e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007b22:	6878      	ldr	r0, [r7, #4]
 8007b24:	f7fa fe82 	bl	800282c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	2224      	movs	r2, #36	@ 0x24
 8007b2c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	681a      	ldr	r2, [r3, #0]
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	f022 0201 	bic.w	r2, r2, #1
 8007b3c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d002      	beq.n	8007b4c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8007b46:	6878      	ldr	r0, [r7, #4]
 8007b48:	f000 fa54 	bl	8007ff4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007b4c:	6878      	ldr	r0, [r7, #4]
 8007b4e:	f000 f825 	bl	8007b9c <UART_SetConfig>
 8007b52:	4603      	mov	r3, r0
 8007b54:	2b01      	cmp	r3, #1
 8007b56:	d101      	bne.n	8007b5c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8007b58:	2301      	movs	r3, #1
 8007b5a:	e01b      	b.n	8007b94 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	685a      	ldr	r2, [r3, #4]
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007b6a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	689a      	ldr	r2, [r3, #8]
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007b7a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	681a      	ldr	r2, [r3, #0]
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	f042 0201 	orr.w	r2, r2, #1
 8007b8a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007b8c:	6878      	ldr	r0, [r7, #4]
 8007b8e:	f000 fad3 	bl	8008138 <UART_CheckIdleState>
 8007b92:	4603      	mov	r3, r0
}
 8007b94:	4618      	mov	r0, r3
 8007b96:	3708      	adds	r7, #8
 8007b98:	46bd      	mov	sp, r7
 8007b9a:	bd80      	pop	{r7, pc}

08007b9c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007b9c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007ba0:	b08a      	sub	sp, #40	@ 0x28
 8007ba2:	af00      	add	r7, sp, #0
 8007ba4:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007ba6:	2300      	movs	r3, #0
 8007ba8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	689a      	ldr	r2, [r3, #8]
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	691b      	ldr	r3, [r3, #16]
 8007bb4:	431a      	orrs	r2, r3
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	695b      	ldr	r3, [r3, #20]
 8007bba:	431a      	orrs	r2, r3
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	69db      	ldr	r3, [r3, #28]
 8007bc0:	4313      	orrs	r3, r2
 8007bc2:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	681a      	ldr	r2, [r3, #0]
 8007bca:	4bb4      	ldr	r3, [pc, #720]	@ (8007e9c <UART_SetConfig+0x300>)
 8007bcc:	4013      	ands	r3, r2
 8007bce:	68fa      	ldr	r2, [r7, #12]
 8007bd0:	6812      	ldr	r2, [r2, #0]
 8007bd2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007bd4:	430b      	orrs	r3, r1
 8007bd6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	685b      	ldr	r3, [r3, #4]
 8007bde:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	68da      	ldr	r2, [r3, #12]
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	430a      	orrs	r2, r1
 8007bec:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	699b      	ldr	r3, [r3, #24]
 8007bf2:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	4aa9      	ldr	r2, [pc, #676]	@ (8007ea0 <UART_SetConfig+0x304>)
 8007bfa:	4293      	cmp	r3, r2
 8007bfc:	d004      	beq.n	8007c08 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	6a1b      	ldr	r3, [r3, #32]
 8007c02:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007c04:	4313      	orrs	r3, r2
 8007c06:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	689b      	ldr	r3, [r3, #8]
 8007c0e:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007c18:	430a      	orrs	r2, r1
 8007c1a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	4aa0      	ldr	r2, [pc, #640]	@ (8007ea4 <UART_SetConfig+0x308>)
 8007c22:	4293      	cmp	r3, r2
 8007c24:	d126      	bne.n	8007c74 <UART_SetConfig+0xd8>
 8007c26:	4ba0      	ldr	r3, [pc, #640]	@ (8007ea8 <UART_SetConfig+0x30c>)
 8007c28:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007c2c:	f003 0303 	and.w	r3, r3, #3
 8007c30:	2b03      	cmp	r3, #3
 8007c32:	d81b      	bhi.n	8007c6c <UART_SetConfig+0xd0>
 8007c34:	a201      	add	r2, pc, #4	@ (adr r2, 8007c3c <UART_SetConfig+0xa0>)
 8007c36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c3a:	bf00      	nop
 8007c3c:	08007c4d 	.word	0x08007c4d
 8007c40:	08007c5d 	.word	0x08007c5d
 8007c44:	08007c55 	.word	0x08007c55
 8007c48:	08007c65 	.word	0x08007c65
 8007c4c:	2301      	movs	r3, #1
 8007c4e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007c52:	e080      	b.n	8007d56 <UART_SetConfig+0x1ba>
 8007c54:	2302      	movs	r3, #2
 8007c56:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007c5a:	e07c      	b.n	8007d56 <UART_SetConfig+0x1ba>
 8007c5c:	2304      	movs	r3, #4
 8007c5e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007c62:	e078      	b.n	8007d56 <UART_SetConfig+0x1ba>
 8007c64:	2308      	movs	r3, #8
 8007c66:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007c6a:	e074      	b.n	8007d56 <UART_SetConfig+0x1ba>
 8007c6c:	2310      	movs	r3, #16
 8007c6e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007c72:	e070      	b.n	8007d56 <UART_SetConfig+0x1ba>
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	4a8c      	ldr	r2, [pc, #560]	@ (8007eac <UART_SetConfig+0x310>)
 8007c7a:	4293      	cmp	r3, r2
 8007c7c:	d138      	bne.n	8007cf0 <UART_SetConfig+0x154>
 8007c7e:	4b8a      	ldr	r3, [pc, #552]	@ (8007ea8 <UART_SetConfig+0x30c>)
 8007c80:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007c84:	f003 030c 	and.w	r3, r3, #12
 8007c88:	2b0c      	cmp	r3, #12
 8007c8a:	d82d      	bhi.n	8007ce8 <UART_SetConfig+0x14c>
 8007c8c:	a201      	add	r2, pc, #4	@ (adr r2, 8007c94 <UART_SetConfig+0xf8>)
 8007c8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c92:	bf00      	nop
 8007c94:	08007cc9 	.word	0x08007cc9
 8007c98:	08007ce9 	.word	0x08007ce9
 8007c9c:	08007ce9 	.word	0x08007ce9
 8007ca0:	08007ce9 	.word	0x08007ce9
 8007ca4:	08007cd9 	.word	0x08007cd9
 8007ca8:	08007ce9 	.word	0x08007ce9
 8007cac:	08007ce9 	.word	0x08007ce9
 8007cb0:	08007ce9 	.word	0x08007ce9
 8007cb4:	08007cd1 	.word	0x08007cd1
 8007cb8:	08007ce9 	.word	0x08007ce9
 8007cbc:	08007ce9 	.word	0x08007ce9
 8007cc0:	08007ce9 	.word	0x08007ce9
 8007cc4:	08007ce1 	.word	0x08007ce1
 8007cc8:	2300      	movs	r3, #0
 8007cca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007cce:	e042      	b.n	8007d56 <UART_SetConfig+0x1ba>
 8007cd0:	2302      	movs	r3, #2
 8007cd2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007cd6:	e03e      	b.n	8007d56 <UART_SetConfig+0x1ba>
 8007cd8:	2304      	movs	r3, #4
 8007cda:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007cde:	e03a      	b.n	8007d56 <UART_SetConfig+0x1ba>
 8007ce0:	2308      	movs	r3, #8
 8007ce2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007ce6:	e036      	b.n	8007d56 <UART_SetConfig+0x1ba>
 8007ce8:	2310      	movs	r3, #16
 8007cea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007cee:	e032      	b.n	8007d56 <UART_SetConfig+0x1ba>
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	4a6a      	ldr	r2, [pc, #424]	@ (8007ea0 <UART_SetConfig+0x304>)
 8007cf6:	4293      	cmp	r3, r2
 8007cf8:	d12a      	bne.n	8007d50 <UART_SetConfig+0x1b4>
 8007cfa:	4b6b      	ldr	r3, [pc, #428]	@ (8007ea8 <UART_SetConfig+0x30c>)
 8007cfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007d00:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8007d04:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007d08:	d01a      	beq.n	8007d40 <UART_SetConfig+0x1a4>
 8007d0a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007d0e:	d81b      	bhi.n	8007d48 <UART_SetConfig+0x1ac>
 8007d10:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007d14:	d00c      	beq.n	8007d30 <UART_SetConfig+0x194>
 8007d16:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007d1a:	d815      	bhi.n	8007d48 <UART_SetConfig+0x1ac>
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d003      	beq.n	8007d28 <UART_SetConfig+0x18c>
 8007d20:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007d24:	d008      	beq.n	8007d38 <UART_SetConfig+0x19c>
 8007d26:	e00f      	b.n	8007d48 <UART_SetConfig+0x1ac>
 8007d28:	2300      	movs	r3, #0
 8007d2a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007d2e:	e012      	b.n	8007d56 <UART_SetConfig+0x1ba>
 8007d30:	2302      	movs	r3, #2
 8007d32:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007d36:	e00e      	b.n	8007d56 <UART_SetConfig+0x1ba>
 8007d38:	2304      	movs	r3, #4
 8007d3a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007d3e:	e00a      	b.n	8007d56 <UART_SetConfig+0x1ba>
 8007d40:	2308      	movs	r3, #8
 8007d42:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007d46:	e006      	b.n	8007d56 <UART_SetConfig+0x1ba>
 8007d48:	2310      	movs	r3, #16
 8007d4a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007d4e:	e002      	b.n	8007d56 <UART_SetConfig+0x1ba>
 8007d50:	2310      	movs	r3, #16
 8007d52:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	4a51      	ldr	r2, [pc, #324]	@ (8007ea0 <UART_SetConfig+0x304>)
 8007d5c:	4293      	cmp	r3, r2
 8007d5e:	d17a      	bne.n	8007e56 <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007d60:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007d64:	2b08      	cmp	r3, #8
 8007d66:	d824      	bhi.n	8007db2 <UART_SetConfig+0x216>
 8007d68:	a201      	add	r2, pc, #4	@ (adr r2, 8007d70 <UART_SetConfig+0x1d4>)
 8007d6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d6e:	bf00      	nop
 8007d70:	08007d95 	.word	0x08007d95
 8007d74:	08007db3 	.word	0x08007db3
 8007d78:	08007d9d 	.word	0x08007d9d
 8007d7c:	08007db3 	.word	0x08007db3
 8007d80:	08007da3 	.word	0x08007da3
 8007d84:	08007db3 	.word	0x08007db3
 8007d88:	08007db3 	.word	0x08007db3
 8007d8c:	08007db3 	.word	0x08007db3
 8007d90:	08007dab 	.word	0x08007dab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007d94:	f7fe fc2c 	bl	80065f0 <HAL_RCC_GetPCLK1Freq>
 8007d98:	61f8      	str	r0, [r7, #28]
        break;
 8007d9a:	e010      	b.n	8007dbe <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007d9c:	4b44      	ldr	r3, [pc, #272]	@ (8007eb0 <UART_SetConfig+0x314>)
 8007d9e:	61fb      	str	r3, [r7, #28]
        break;
 8007da0:	e00d      	b.n	8007dbe <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007da2:	f7fe fb8d 	bl	80064c0 <HAL_RCC_GetSysClockFreq>
 8007da6:	61f8      	str	r0, [r7, #28]
        break;
 8007da8:	e009      	b.n	8007dbe <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007daa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007dae:	61fb      	str	r3, [r7, #28]
        break;
 8007db0:	e005      	b.n	8007dbe <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 8007db2:	2300      	movs	r3, #0
 8007db4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007db6:	2301      	movs	r3, #1
 8007db8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8007dbc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007dbe:	69fb      	ldr	r3, [r7, #28]
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	f000 8107 	beq.w	8007fd4 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	685a      	ldr	r2, [r3, #4]
 8007dca:	4613      	mov	r3, r2
 8007dcc:	005b      	lsls	r3, r3, #1
 8007dce:	4413      	add	r3, r2
 8007dd0:	69fa      	ldr	r2, [r7, #28]
 8007dd2:	429a      	cmp	r2, r3
 8007dd4:	d305      	bcc.n	8007de2 <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	685b      	ldr	r3, [r3, #4]
 8007dda:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007ddc:	69fa      	ldr	r2, [r7, #28]
 8007dde:	429a      	cmp	r2, r3
 8007de0:	d903      	bls.n	8007dea <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 8007de2:	2301      	movs	r3, #1
 8007de4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8007de8:	e0f4      	b.n	8007fd4 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8007dea:	69fb      	ldr	r3, [r7, #28]
 8007dec:	2200      	movs	r2, #0
 8007dee:	461c      	mov	r4, r3
 8007df0:	4615      	mov	r5, r2
 8007df2:	f04f 0200 	mov.w	r2, #0
 8007df6:	f04f 0300 	mov.w	r3, #0
 8007dfa:	022b      	lsls	r3, r5, #8
 8007dfc:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8007e00:	0222      	lsls	r2, r4, #8
 8007e02:	68f9      	ldr	r1, [r7, #12]
 8007e04:	6849      	ldr	r1, [r1, #4]
 8007e06:	0849      	lsrs	r1, r1, #1
 8007e08:	2000      	movs	r0, #0
 8007e0a:	4688      	mov	r8, r1
 8007e0c:	4681      	mov	r9, r0
 8007e0e:	eb12 0a08 	adds.w	sl, r2, r8
 8007e12:	eb43 0b09 	adc.w	fp, r3, r9
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	685b      	ldr	r3, [r3, #4]
 8007e1a:	2200      	movs	r2, #0
 8007e1c:	603b      	str	r3, [r7, #0]
 8007e1e:	607a      	str	r2, [r7, #4]
 8007e20:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007e24:	4650      	mov	r0, sl
 8007e26:	4659      	mov	r1, fp
 8007e28:	f7f8 fe36 	bl	8000a98 <__aeabi_uldivmod>
 8007e2c:	4602      	mov	r2, r0
 8007e2e:	460b      	mov	r3, r1
 8007e30:	4613      	mov	r3, r2
 8007e32:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007e34:	69bb      	ldr	r3, [r7, #24]
 8007e36:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007e3a:	d308      	bcc.n	8007e4e <UART_SetConfig+0x2b2>
 8007e3c:	69bb      	ldr	r3, [r7, #24]
 8007e3e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007e42:	d204      	bcs.n	8007e4e <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	69ba      	ldr	r2, [r7, #24]
 8007e4a:	60da      	str	r2, [r3, #12]
 8007e4c:	e0c2      	b.n	8007fd4 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 8007e4e:	2301      	movs	r3, #1
 8007e50:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8007e54:	e0be      	b.n	8007fd4 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	69db      	ldr	r3, [r3, #28]
 8007e5a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007e5e:	d16a      	bne.n	8007f36 <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8007e60:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007e64:	2b08      	cmp	r3, #8
 8007e66:	d834      	bhi.n	8007ed2 <UART_SetConfig+0x336>
 8007e68:	a201      	add	r2, pc, #4	@ (adr r2, 8007e70 <UART_SetConfig+0x2d4>)
 8007e6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e6e:	bf00      	nop
 8007e70:	08007e95 	.word	0x08007e95
 8007e74:	08007eb5 	.word	0x08007eb5
 8007e78:	08007ebd 	.word	0x08007ebd
 8007e7c:	08007ed3 	.word	0x08007ed3
 8007e80:	08007ec3 	.word	0x08007ec3
 8007e84:	08007ed3 	.word	0x08007ed3
 8007e88:	08007ed3 	.word	0x08007ed3
 8007e8c:	08007ed3 	.word	0x08007ed3
 8007e90:	08007ecb 	.word	0x08007ecb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007e94:	f7fe fbac 	bl	80065f0 <HAL_RCC_GetPCLK1Freq>
 8007e98:	61f8      	str	r0, [r7, #28]
        break;
 8007e9a:	e020      	b.n	8007ede <UART_SetConfig+0x342>
 8007e9c:	efff69f3 	.word	0xefff69f3
 8007ea0:	40008000 	.word	0x40008000
 8007ea4:	40013800 	.word	0x40013800
 8007ea8:	40021000 	.word	0x40021000
 8007eac:	40004400 	.word	0x40004400
 8007eb0:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007eb4:	f7fe fbb2 	bl	800661c <HAL_RCC_GetPCLK2Freq>
 8007eb8:	61f8      	str	r0, [r7, #28]
        break;
 8007eba:	e010      	b.n	8007ede <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007ebc:	4b4c      	ldr	r3, [pc, #304]	@ (8007ff0 <UART_SetConfig+0x454>)
 8007ebe:	61fb      	str	r3, [r7, #28]
        break;
 8007ec0:	e00d      	b.n	8007ede <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007ec2:	f7fe fafd 	bl	80064c0 <HAL_RCC_GetSysClockFreq>
 8007ec6:	61f8      	str	r0, [r7, #28]
        break;
 8007ec8:	e009      	b.n	8007ede <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007eca:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007ece:	61fb      	str	r3, [r7, #28]
        break;
 8007ed0:	e005      	b.n	8007ede <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 8007ed2:	2300      	movs	r3, #0
 8007ed4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007ed6:	2301      	movs	r3, #1
 8007ed8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8007edc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007ede:	69fb      	ldr	r3, [r7, #28]
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d077      	beq.n	8007fd4 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007ee4:	69fb      	ldr	r3, [r7, #28]
 8007ee6:	005a      	lsls	r2, r3, #1
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	685b      	ldr	r3, [r3, #4]
 8007eec:	085b      	lsrs	r3, r3, #1
 8007eee:	441a      	add	r2, r3
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	685b      	ldr	r3, [r3, #4]
 8007ef4:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ef8:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007efa:	69bb      	ldr	r3, [r7, #24]
 8007efc:	2b0f      	cmp	r3, #15
 8007efe:	d916      	bls.n	8007f2e <UART_SetConfig+0x392>
 8007f00:	69bb      	ldr	r3, [r7, #24]
 8007f02:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007f06:	d212      	bcs.n	8007f2e <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007f08:	69bb      	ldr	r3, [r7, #24]
 8007f0a:	b29b      	uxth	r3, r3
 8007f0c:	f023 030f 	bic.w	r3, r3, #15
 8007f10:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007f12:	69bb      	ldr	r3, [r7, #24]
 8007f14:	085b      	lsrs	r3, r3, #1
 8007f16:	b29b      	uxth	r3, r3
 8007f18:	f003 0307 	and.w	r3, r3, #7
 8007f1c:	b29a      	uxth	r2, r3
 8007f1e:	8afb      	ldrh	r3, [r7, #22]
 8007f20:	4313      	orrs	r3, r2
 8007f22:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	8afa      	ldrh	r2, [r7, #22]
 8007f2a:	60da      	str	r2, [r3, #12]
 8007f2c:	e052      	b.n	8007fd4 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8007f2e:	2301      	movs	r3, #1
 8007f30:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8007f34:	e04e      	b.n	8007fd4 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007f36:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007f3a:	2b08      	cmp	r3, #8
 8007f3c:	d827      	bhi.n	8007f8e <UART_SetConfig+0x3f2>
 8007f3e:	a201      	add	r2, pc, #4	@ (adr r2, 8007f44 <UART_SetConfig+0x3a8>)
 8007f40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f44:	08007f69 	.word	0x08007f69
 8007f48:	08007f71 	.word	0x08007f71
 8007f4c:	08007f79 	.word	0x08007f79
 8007f50:	08007f8f 	.word	0x08007f8f
 8007f54:	08007f7f 	.word	0x08007f7f
 8007f58:	08007f8f 	.word	0x08007f8f
 8007f5c:	08007f8f 	.word	0x08007f8f
 8007f60:	08007f8f 	.word	0x08007f8f
 8007f64:	08007f87 	.word	0x08007f87
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007f68:	f7fe fb42 	bl	80065f0 <HAL_RCC_GetPCLK1Freq>
 8007f6c:	61f8      	str	r0, [r7, #28]
        break;
 8007f6e:	e014      	b.n	8007f9a <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007f70:	f7fe fb54 	bl	800661c <HAL_RCC_GetPCLK2Freq>
 8007f74:	61f8      	str	r0, [r7, #28]
        break;
 8007f76:	e010      	b.n	8007f9a <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007f78:	4b1d      	ldr	r3, [pc, #116]	@ (8007ff0 <UART_SetConfig+0x454>)
 8007f7a:	61fb      	str	r3, [r7, #28]
        break;
 8007f7c:	e00d      	b.n	8007f9a <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007f7e:	f7fe fa9f 	bl	80064c0 <HAL_RCC_GetSysClockFreq>
 8007f82:	61f8      	str	r0, [r7, #28]
        break;
 8007f84:	e009      	b.n	8007f9a <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007f86:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007f8a:	61fb      	str	r3, [r7, #28]
        break;
 8007f8c:	e005      	b.n	8007f9a <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 8007f8e:	2300      	movs	r3, #0
 8007f90:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007f92:	2301      	movs	r3, #1
 8007f94:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8007f98:	bf00      	nop
    }

    if (pclk != 0U)
 8007f9a:	69fb      	ldr	r3, [r7, #28]
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d019      	beq.n	8007fd4 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	685b      	ldr	r3, [r3, #4]
 8007fa4:	085a      	lsrs	r2, r3, #1
 8007fa6:	69fb      	ldr	r3, [r7, #28]
 8007fa8:	441a      	add	r2, r3
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	685b      	ldr	r3, [r3, #4]
 8007fae:	fbb2 f3f3 	udiv	r3, r2, r3
 8007fb2:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007fb4:	69bb      	ldr	r3, [r7, #24]
 8007fb6:	2b0f      	cmp	r3, #15
 8007fb8:	d909      	bls.n	8007fce <UART_SetConfig+0x432>
 8007fba:	69bb      	ldr	r3, [r7, #24]
 8007fbc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007fc0:	d205      	bcs.n	8007fce <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007fc2:	69bb      	ldr	r3, [r7, #24]
 8007fc4:	b29a      	uxth	r2, r3
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	60da      	str	r2, [r3, #12]
 8007fcc:	e002      	b.n	8007fd4 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8007fce:	2301      	movs	r3, #1
 8007fd0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	2200      	movs	r2, #0
 8007fd8:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	2200      	movs	r2, #0
 8007fde:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8007fe0:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8007fe4:	4618      	mov	r0, r3
 8007fe6:	3728      	adds	r7, #40	@ 0x28
 8007fe8:	46bd      	mov	sp, r7
 8007fea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007fee:	bf00      	nop
 8007ff0:	00f42400 	.word	0x00f42400

08007ff4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007ff4:	b480      	push	{r7}
 8007ff6:	b083      	sub	sp, #12
 8007ff8:	af00      	add	r7, sp, #0
 8007ffa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008000:	f003 0308 	and.w	r3, r3, #8
 8008004:	2b00      	cmp	r3, #0
 8008006:	d00a      	beq.n	800801e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	685b      	ldr	r3, [r3, #4]
 800800e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	430a      	orrs	r2, r1
 800801c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008022:	f003 0301 	and.w	r3, r3, #1
 8008026:	2b00      	cmp	r3, #0
 8008028:	d00a      	beq.n	8008040 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	685b      	ldr	r3, [r3, #4]
 8008030:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	430a      	orrs	r2, r1
 800803e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008044:	f003 0302 	and.w	r3, r3, #2
 8008048:	2b00      	cmp	r3, #0
 800804a:	d00a      	beq.n	8008062 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	685b      	ldr	r3, [r3, #4]
 8008052:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	430a      	orrs	r2, r1
 8008060:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008066:	f003 0304 	and.w	r3, r3, #4
 800806a:	2b00      	cmp	r3, #0
 800806c:	d00a      	beq.n	8008084 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	685b      	ldr	r3, [r3, #4]
 8008074:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	430a      	orrs	r2, r1
 8008082:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008088:	f003 0310 	and.w	r3, r3, #16
 800808c:	2b00      	cmp	r3, #0
 800808e:	d00a      	beq.n	80080a6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	689b      	ldr	r3, [r3, #8]
 8008096:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	430a      	orrs	r2, r1
 80080a4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80080aa:	f003 0320 	and.w	r3, r3, #32
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d00a      	beq.n	80080c8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	689b      	ldr	r3, [r3, #8]
 80080b8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	430a      	orrs	r2, r1
 80080c6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80080cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d01a      	beq.n	800810a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	685b      	ldr	r3, [r3, #4]
 80080da:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	430a      	orrs	r2, r1
 80080e8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80080ee:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80080f2:	d10a      	bne.n	800810a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	685b      	ldr	r3, [r3, #4]
 80080fa:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	430a      	orrs	r2, r1
 8008108:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800810e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008112:	2b00      	cmp	r3, #0
 8008114:	d00a      	beq.n	800812c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	685b      	ldr	r3, [r3, #4]
 800811c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	430a      	orrs	r2, r1
 800812a:	605a      	str	r2, [r3, #4]
  }
}
 800812c:	bf00      	nop
 800812e:	370c      	adds	r7, #12
 8008130:	46bd      	mov	sp, r7
 8008132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008136:	4770      	bx	lr

08008138 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008138:	b580      	push	{r7, lr}
 800813a:	b098      	sub	sp, #96	@ 0x60
 800813c:	af02      	add	r7, sp, #8
 800813e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	2200      	movs	r2, #0
 8008144:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008148:	f7fa fcb0 	bl	8002aac <HAL_GetTick>
 800814c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	f003 0308 	and.w	r3, r3, #8
 8008158:	2b08      	cmp	r3, #8
 800815a:	d12e      	bne.n	80081ba <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800815c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008160:	9300      	str	r3, [sp, #0]
 8008162:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008164:	2200      	movs	r2, #0
 8008166:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800816a:	6878      	ldr	r0, [r7, #4]
 800816c:	f000 f88c 	bl	8008288 <UART_WaitOnFlagUntilTimeout>
 8008170:	4603      	mov	r3, r0
 8008172:	2b00      	cmp	r3, #0
 8008174:	d021      	beq.n	80081ba <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800817c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800817e:	e853 3f00 	ldrex	r3, [r3]
 8008182:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008184:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008186:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800818a:	653b      	str	r3, [r7, #80]	@ 0x50
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	461a      	mov	r2, r3
 8008192:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008194:	647b      	str	r3, [r7, #68]	@ 0x44
 8008196:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008198:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800819a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800819c:	e841 2300 	strex	r3, r2, [r1]
 80081a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80081a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d1e6      	bne.n	8008176 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	2220      	movs	r2, #32
 80081ac:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	2200      	movs	r2, #0
 80081b2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80081b6:	2303      	movs	r3, #3
 80081b8:	e062      	b.n	8008280 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	f003 0304 	and.w	r3, r3, #4
 80081c4:	2b04      	cmp	r3, #4
 80081c6:	d149      	bne.n	800825c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80081c8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80081cc:	9300      	str	r3, [sp, #0]
 80081ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80081d0:	2200      	movs	r2, #0
 80081d2:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80081d6:	6878      	ldr	r0, [r7, #4]
 80081d8:	f000 f856 	bl	8008288 <UART_WaitOnFlagUntilTimeout>
 80081dc:	4603      	mov	r3, r0
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d03c      	beq.n	800825c <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081ea:	e853 3f00 	ldrex	r3, [r3]
 80081ee:	623b      	str	r3, [r7, #32]
   return(result);
 80081f0:	6a3b      	ldr	r3, [r7, #32]
 80081f2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80081f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	461a      	mov	r2, r3
 80081fe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008200:	633b      	str	r3, [r7, #48]	@ 0x30
 8008202:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008204:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008206:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008208:	e841 2300 	strex	r3, r2, [r1]
 800820c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800820e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008210:	2b00      	cmp	r3, #0
 8008212:	d1e6      	bne.n	80081e2 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	3308      	adds	r3, #8
 800821a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800821c:	693b      	ldr	r3, [r7, #16]
 800821e:	e853 3f00 	ldrex	r3, [r3]
 8008222:	60fb      	str	r3, [r7, #12]
   return(result);
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	f023 0301 	bic.w	r3, r3, #1
 800822a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	3308      	adds	r3, #8
 8008232:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008234:	61fa      	str	r2, [r7, #28]
 8008236:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008238:	69b9      	ldr	r1, [r7, #24]
 800823a:	69fa      	ldr	r2, [r7, #28]
 800823c:	e841 2300 	strex	r3, r2, [r1]
 8008240:	617b      	str	r3, [r7, #20]
   return(result);
 8008242:	697b      	ldr	r3, [r7, #20]
 8008244:	2b00      	cmp	r3, #0
 8008246:	d1e5      	bne.n	8008214 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	2220      	movs	r2, #32
 800824c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	2200      	movs	r2, #0
 8008254:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008258:	2303      	movs	r3, #3
 800825a:	e011      	b.n	8008280 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	2220      	movs	r2, #32
 8008260:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	2220      	movs	r2, #32
 8008266:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	2200      	movs	r2, #0
 800826e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	2200      	movs	r2, #0
 8008274:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	2200      	movs	r2, #0
 800827a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800827e:	2300      	movs	r3, #0
}
 8008280:	4618      	mov	r0, r3
 8008282:	3758      	adds	r7, #88	@ 0x58
 8008284:	46bd      	mov	sp, r7
 8008286:	bd80      	pop	{r7, pc}

08008288 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008288:	b580      	push	{r7, lr}
 800828a:	b084      	sub	sp, #16
 800828c:	af00      	add	r7, sp, #0
 800828e:	60f8      	str	r0, [r7, #12]
 8008290:	60b9      	str	r1, [r7, #8]
 8008292:	603b      	str	r3, [r7, #0]
 8008294:	4613      	mov	r3, r2
 8008296:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008298:	e04f      	b.n	800833a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800829a:	69bb      	ldr	r3, [r7, #24]
 800829c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80082a0:	d04b      	beq.n	800833a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80082a2:	f7fa fc03 	bl	8002aac <HAL_GetTick>
 80082a6:	4602      	mov	r2, r0
 80082a8:	683b      	ldr	r3, [r7, #0]
 80082aa:	1ad3      	subs	r3, r2, r3
 80082ac:	69ba      	ldr	r2, [r7, #24]
 80082ae:	429a      	cmp	r2, r3
 80082b0:	d302      	bcc.n	80082b8 <UART_WaitOnFlagUntilTimeout+0x30>
 80082b2:	69bb      	ldr	r3, [r7, #24]
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d101      	bne.n	80082bc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80082b8:	2303      	movs	r3, #3
 80082ba:	e04e      	b.n	800835a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	f003 0304 	and.w	r3, r3, #4
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d037      	beq.n	800833a <UART_WaitOnFlagUntilTimeout+0xb2>
 80082ca:	68bb      	ldr	r3, [r7, #8]
 80082cc:	2b80      	cmp	r3, #128	@ 0x80
 80082ce:	d034      	beq.n	800833a <UART_WaitOnFlagUntilTimeout+0xb2>
 80082d0:	68bb      	ldr	r3, [r7, #8]
 80082d2:	2b40      	cmp	r3, #64	@ 0x40
 80082d4:	d031      	beq.n	800833a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	69db      	ldr	r3, [r3, #28]
 80082dc:	f003 0308 	and.w	r3, r3, #8
 80082e0:	2b08      	cmp	r3, #8
 80082e2:	d110      	bne.n	8008306 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	2208      	movs	r2, #8
 80082ea:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80082ec:	68f8      	ldr	r0, [r7, #12]
 80082ee:	f000 f838 	bl	8008362 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	2208      	movs	r2, #8
 80082f6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	2200      	movs	r2, #0
 80082fe:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8008302:	2301      	movs	r3, #1
 8008304:	e029      	b.n	800835a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	69db      	ldr	r3, [r3, #28]
 800830c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008310:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008314:	d111      	bne.n	800833a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800831e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008320:	68f8      	ldr	r0, [r7, #12]
 8008322:	f000 f81e 	bl	8008362 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	2220      	movs	r2, #32
 800832a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	2200      	movs	r2, #0
 8008332:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8008336:	2303      	movs	r3, #3
 8008338:	e00f      	b.n	800835a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	69da      	ldr	r2, [r3, #28]
 8008340:	68bb      	ldr	r3, [r7, #8]
 8008342:	4013      	ands	r3, r2
 8008344:	68ba      	ldr	r2, [r7, #8]
 8008346:	429a      	cmp	r2, r3
 8008348:	bf0c      	ite	eq
 800834a:	2301      	moveq	r3, #1
 800834c:	2300      	movne	r3, #0
 800834e:	b2db      	uxtb	r3, r3
 8008350:	461a      	mov	r2, r3
 8008352:	79fb      	ldrb	r3, [r7, #7]
 8008354:	429a      	cmp	r2, r3
 8008356:	d0a0      	beq.n	800829a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008358:	2300      	movs	r3, #0
}
 800835a:	4618      	mov	r0, r3
 800835c:	3710      	adds	r7, #16
 800835e:	46bd      	mov	sp, r7
 8008360:	bd80      	pop	{r7, pc}

08008362 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008362:	b480      	push	{r7}
 8008364:	b095      	sub	sp, #84	@ 0x54
 8008366:	af00      	add	r7, sp, #0
 8008368:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008370:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008372:	e853 3f00 	ldrex	r3, [r3]
 8008376:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008378:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800837a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800837e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	461a      	mov	r2, r3
 8008386:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008388:	643b      	str	r3, [r7, #64]	@ 0x40
 800838a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800838c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800838e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008390:	e841 2300 	strex	r3, r2, [r1]
 8008394:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008396:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008398:	2b00      	cmp	r3, #0
 800839a:	d1e6      	bne.n	800836a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	3308      	adds	r3, #8
 80083a2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083a4:	6a3b      	ldr	r3, [r7, #32]
 80083a6:	e853 3f00 	ldrex	r3, [r3]
 80083aa:	61fb      	str	r3, [r7, #28]
   return(result);
 80083ac:	69fb      	ldr	r3, [r7, #28]
 80083ae:	f023 0301 	bic.w	r3, r3, #1
 80083b2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	3308      	adds	r3, #8
 80083ba:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80083bc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80083be:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083c0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80083c2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80083c4:	e841 2300 	strex	r3, r2, [r1]
 80083c8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80083ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d1e5      	bne.n	800839c <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80083d4:	2b01      	cmp	r3, #1
 80083d6:	d118      	bne.n	800840a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	e853 3f00 	ldrex	r3, [r3]
 80083e4:	60bb      	str	r3, [r7, #8]
   return(result);
 80083e6:	68bb      	ldr	r3, [r7, #8]
 80083e8:	f023 0310 	bic.w	r3, r3, #16
 80083ec:	647b      	str	r3, [r7, #68]	@ 0x44
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	461a      	mov	r2, r3
 80083f4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80083f6:	61bb      	str	r3, [r7, #24]
 80083f8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083fa:	6979      	ldr	r1, [r7, #20]
 80083fc:	69ba      	ldr	r2, [r7, #24]
 80083fe:	e841 2300 	strex	r3, r2, [r1]
 8008402:	613b      	str	r3, [r7, #16]
   return(result);
 8008404:	693b      	ldr	r3, [r7, #16]
 8008406:	2b00      	cmp	r3, #0
 8008408:	d1e6      	bne.n	80083d8 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	2220      	movs	r2, #32
 800840e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	2200      	movs	r2, #0
 8008416:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	2200      	movs	r2, #0
 800841c:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800841e:	bf00      	nop
 8008420:	3754      	adds	r7, #84	@ 0x54
 8008422:	46bd      	mov	sp, r7
 8008424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008428:	4770      	bx	lr

0800842a <memset>:
 800842a:	4402      	add	r2, r0
 800842c:	4603      	mov	r3, r0
 800842e:	4293      	cmp	r3, r2
 8008430:	d100      	bne.n	8008434 <memset+0xa>
 8008432:	4770      	bx	lr
 8008434:	f803 1b01 	strb.w	r1, [r3], #1
 8008438:	e7f9      	b.n	800842e <memset+0x4>
	...

0800843c <__libc_init_array>:
 800843c:	b570      	push	{r4, r5, r6, lr}
 800843e:	4d0d      	ldr	r5, [pc, #52]	@ (8008474 <__libc_init_array+0x38>)
 8008440:	4c0d      	ldr	r4, [pc, #52]	@ (8008478 <__libc_init_array+0x3c>)
 8008442:	1b64      	subs	r4, r4, r5
 8008444:	10a4      	asrs	r4, r4, #2
 8008446:	2600      	movs	r6, #0
 8008448:	42a6      	cmp	r6, r4
 800844a:	d109      	bne.n	8008460 <__libc_init_array+0x24>
 800844c:	4d0b      	ldr	r5, [pc, #44]	@ (800847c <__libc_init_array+0x40>)
 800844e:	4c0c      	ldr	r4, [pc, #48]	@ (8008480 <__libc_init_array+0x44>)
 8008450:	f000 f818 	bl	8008484 <_init>
 8008454:	1b64      	subs	r4, r4, r5
 8008456:	10a4      	asrs	r4, r4, #2
 8008458:	2600      	movs	r6, #0
 800845a:	42a6      	cmp	r6, r4
 800845c:	d105      	bne.n	800846a <__libc_init_array+0x2e>
 800845e:	bd70      	pop	{r4, r5, r6, pc}
 8008460:	f855 3b04 	ldr.w	r3, [r5], #4
 8008464:	4798      	blx	r3
 8008466:	3601      	adds	r6, #1
 8008468:	e7ee      	b.n	8008448 <__libc_init_array+0xc>
 800846a:	f855 3b04 	ldr.w	r3, [r5], #4
 800846e:	4798      	blx	r3
 8008470:	3601      	adds	r6, #1
 8008472:	e7f2      	b.n	800845a <__libc_init_array+0x1e>
 8008474:	080084f4 	.word	0x080084f4
 8008478:	080084f4 	.word	0x080084f4
 800847c:	080084f4 	.word	0x080084f4
 8008480:	080084f8 	.word	0x080084f8

08008484 <_init>:
 8008484:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008486:	bf00      	nop
 8008488:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800848a:	bc08      	pop	{r3}
 800848c:	469e      	mov	lr, r3
 800848e:	4770      	bx	lr

08008490 <_fini>:
 8008490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008492:	bf00      	nop
 8008494:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008496:	bc08      	pop	{r3}
 8008498:	469e      	mov	lr, r3
 800849a:	4770      	bx	lr
