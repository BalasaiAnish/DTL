
AudioAmplifier.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003bc4  0800018c  0800018c  0000118c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000064  08003d50  08003d50  00004d50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003db4  08003db4  00005030  2**0
                  CONTENTS
  4 .ARM          00000008  08003db4  08003db4  00004db4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003dbc  08003dbc  00005030  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003dbc  08003dbc  00004dbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003dc0  08003dc0  00004dc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000030  20000000  08003dc4  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000114  20000030  08003df4  00005030  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000144  08003df4  00005144  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00005030  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e12f  00000000  00000000  00005060  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002391  00000000  00000000  0001318f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ce0  00000000  00000000  00015520  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009d0  00000000  00000000  00016200  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002078f  00000000  00000000  00016bd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e7b7  00000000  00000000  0003735f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c1dc9  00000000  00000000  00045b16  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001078df  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003320  00000000  00000000  00107924  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  0010ac44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	@ (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	20000030 	.word	0x20000030
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08003d38 	.word	0x08003d38

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	@ (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	@ (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	@ (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000034 	.word	0x20000034
 80001c8:	08003d38 	.word	0x08003d38

080001cc <strlen>:
 80001cc:	4603      	mov	r3, r0
 80001ce:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d2:	2a00      	cmp	r2, #0
 80001d4:	d1fb      	bne.n	80001ce <strlen+0x2>
 80001d6:	1a18      	subs	r0, r3, r0
 80001d8:	3801      	subs	r0, #1
 80001da:	4770      	bx	lr

080001dc <__aeabi_uldivmod>:
 80001dc:	b953      	cbnz	r3, 80001f4 <__aeabi_uldivmod+0x18>
 80001de:	b94a      	cbnz	r2, 80001f4 <__aeabi_uldivmod+0x18>
 80001e0:	2900      	cmp	r1, #0
 80001e2:	bf08      	it	eq
 80001e4:	2800      	cmpeq	r0, #0
 80001e6:	bf1c      	itt	ne
 80001e8:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80001ec:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80001f0:	f000 b96a 	b.w	80004c8 <__aeabi_idiv0>
 80001f4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001fc:	f000 f806 	bl	800020c <__udivmoddi4>
 8000200:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000204:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000208:	b004      	add	sp, #16
 800020a:	4770      	bx	lr

0800020c <__udivmoddi4>:
 800020c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000210:	9d08      	ldr	r5, [sp, #32]
 8000212:	460c      	mov	r4, r1
 8000214:	2b00      	cmp	r3, #0
 8000216:	d14e      	bne.n	80002b6 <__udivmoddi4+0xaa>
 8000218:	4694      	mov	ip, r2
 800021a:	458c      	cmp	ip, r1
 800021c:	4686      	mov	lr, r0
 800021e:	fab2 f282 	clz	r2, r2
 8000222:	d962      	bls.n	80002ea <__udivmoddi4+0xde>
 8000224:	b14a      	cbz	r2, 800023a <__udivmoddi4+0x2e>
 8000226:	f1c2 0320 	rsb	r3, r2, #32
 800022a:	4091      	lsls	r1, r2
 800022c:	fa20 f303 	lsr.w	r3, r0, r3
 8000230:	fa0c fc02 	lsl.w	ip, ip, r2
 8000234:	4319      	orrs	r1, r3
 8000236:	fa00 fe02 	lsl.w	lr, r0, r2
 800023a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800023e:	fa1f f68c 	uxth.w	r6, ip
 8000242:	fbb1 f4f7 	udiv	r4, r1, r7
 8000246:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800024a:	fb07 1114 	mls	r1, r7, r4, r1
 800024e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000252:	fb04 f106 	mul.w	r1, r4, r6
 8000256:	4299      	cmp	r1, r3
 8000258:	d90a      	bls.n	8000270 <__udivmoddi4+0x64>
 800025a:	eb1c 0303 	adds.w	r3, ip, r3
 800025e:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000262:	f080 8112 	bcs.w	800048a <__udivmoddi4+0x27e>
 8000266:	4299      	cmp	r1, r3
 8000268:	f240 810f 	bls.w	800048a <__udivmoddi4+0x27e>
 800026c:	3c02      	subs	r4, #2
 800026e:	4463      	add	r3, ip
 8000270:	1a59      	subs	r1, r3, r1
 8000272:	fa1f f38e 	uxth.w	r3, lr
 8000276:	fbb1 f0f7 	udiv	r0, r1, r7
 800027a:	fb07 1110 	mls	r1, r7, r0, r1
 800027e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000282:	fb00 f606 	mul.w	r6, r0, r6
 8000286:	429e      	cmp	r6, r3
 8000288:	d90a      	bls.n	80002a0 <__udivmoddi4+0x94>
 800028a:	eb1c 0303 	adds.w	r3, ip, r3
 800028e:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000292:	f080 80fc 	bcs.w	800048e <__udivmoddi4+0x282>
 8000296:	429e      	cmp	r6, r3
 8000298:	f240 80f9 	bls.w	800048e <__udivmoddi4+0x282>
 800029c:	4463      	add	r3, ip
 800029e:	3802      	subs	r0, #2
 80002a0:	1b9b      	subs	r3, r3, r6
 80002a2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002a6:	2100      	movs	r1, #0
 80002a8:	b11d      	cbz	r5, 80002b2 <__udivmoddi4+0xa6>
 80002aa:	40d3      	lsrs	r3, r2
 80002ac:	2200      	movs	r2, #0
 80002ae:	e9c5 3200 	strd	r3, r2, [r5]
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	428b      	cmp	r3, r1
 80002b8:	d905      	bls.n	80002c6 <__udivmoddi4+0xba>
 80002ba:	b10d      	cbz	r5, 80002c0 <__udivmoddi4+0xb4>
 80002bc:	e9c5 0100 	strd	r0, r1, [r5]
 80002c0:	2100      	movs	r1, #0
 80002c2:	4608      	mov	r0, r1
 80002c4:	e7f5      	b.n	80002b2 <__udivmoddi4+0xa6>
 80002c6:	fab3 f183 	clz	r1, r3
 80002ca:	2900      	cmp	r1, #0
 80002cc:	d146      	bne.n	800035c <__udivmoddi4+0x150>
 80002ce:	42a3      	cmp	r3, r4
 80002d0:	d302      	bcc.n	80002d8 <__udivmoddi4+0xcc>
 80002d2:	4290      	cmp	r0, r2
 80002d4:	f0c0 80f0 	bcc.w	80004b8 <__udivmoddi4+0x2ac>
 80002d8:	1a86      	subs	r6, r0, r2
 80002da:	eb64 0303 	sbc.w	r3, r4, r3
 80002de:	2001      	movs	r0, #1
 80002e0:	2d00      	cmp	r5, #0
 80002e2:	d0e6      	beq.n	80002b2 <__udivmoddi4+0xa6>
 80002e4:	e9c5 6300 	strd	r6, r3, [r5]
 80002e8:	e7e3      	b.n	80002b2 <__udivmoddi4+0xa6>
 80002ea:	2a00      	cmp	r2, #0
 80002ec:	f040 8090 	bne.w	8000410 <__udivmoddi4+0x204>
 80002f0:	eba1 040c 	sub.w	r4, r1, ip
 80002f4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f8:	fa1f f78c 	uxth.w	r7, ip
 80002fc:	2101      	movs	r1, #1
 80002fe:	fbb4 f6f8 	udiv	r6, r4, r8
 8000302:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000306:	fb08 4416 	mls	r4, r8, r6, r4
 800030a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800030e:	fb07 f006 	mul.w	r0, r7, r6
 8000312:	4298      	cmp	r0, r3
 8000314:	d908      	bls.n	8000328 <__udivmoddi4+0x11c>
 8000316:	eb1c 0303 	adds.w	r3, ip, r3
 800031a:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 800031e:	d202      	bcs.n	8000326 <__udivmoddi4+0x11a>
 8000320:	4298      	cmp	r0, r3
 8000322:	f200 80cd 	bhi.w	80004c0 <__udivmoddi4+0x2b4>
 8000326:	4626      	mov	r6, r4
 8000328:	1a1c      	subs	r4, r3, r0
 800032a:	fa1f f38e 	uxth.w	r3, lr
 800032e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000332:	fb08 4410 	mls	r4, r8, r0, r4
 8000336:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800033a:	fb00 f707 	mul.w	r7, r0, r7
 800033e:	429f      	cmp	r7, r3
 8000340:	d908      	bls.n	8000354 <__udivmoddi4+0x148>
 8000342:	eb1c 0303 	adds.w	r3, ip, r3
 8000346:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x146>
 800034c:	429f      	cmp	r7, r3
 800034e:	f200 80b0 	bhi.w	80004b2 <__udivmoddi4+0x2a6>
 8000352:	4620      	mov	r0, r4
 8000354:	1bdb      	subs	r3, r3, r7
 8000356:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800035a:	e7a5      	b.n	80002a8 <__udivmoddi4+0x9c>
 800035c:	f1c1 0620 	rsb	r6, r1, #32
 8000360:	408b      	lsls	r3, r1
 8000362:	fa22 f706 	lsr.w	r7, r2, r6
 8000366:	431f      	orrs	r7, r3
 8000368:	fa20 fc06 	lsr.w	ip, r0, r6
 800036c:	fa04 f301 	lsl.w	r3, r4, r1
 8000370:	ea43 030c 	orr.w	r3, r3, ip
 8000374:	40f4      	lsrs	r4, r6
 8000376:	fa00 f801 	lsl.w	r8, r0, r1
 800037a:	0c38      	lsrs	r0, r7, #16
 800037c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000380:	fbb4 fef0 	udiv	lr, r4, r0
 8000384:	fa1f fc87 	uxth.w	ip, r7
 8000388:	fb00 441e 	mls	r4, r0, lr, r4
 800038c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000390:	fb0e f90c 	mul.w	r9, lr, ip
 8000394:	45a1      	cmp	r9, r4
 8000396:	fa02 f201 	lsl.w	r2, r2, r1
 800039a:	d90a      	bls.n	80003b2 <__udivmoddi4+0x1a6>
 800039c:	193c      	adds	r4, r7, r4
 800039e:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 80003a2:	f080 8084 	bcs.w	80004ae <__udivmoddi4+0x2a2>
 80003a6:	45a1      	cmp	r9, r4
 80003a8:	f240 8081 	bls.w	80004ae <__udivmoddi4+0x2a2>
 80003ac:	f1ae 0e02 	sub.w	lr, lr, #2
 80003b0:	443c      	add	r4, r7
 80003b2:	eba4 0409 	sub.w	r4, r4, r9
 80003b6:	fa1f f983 	uxth.w	r9, r3
 80003ba:	fbb4 f3f0 	udiv	r3, r4, r0
 80003be:	fb00 4413 	mls	r4, r0, r3, r4
 80003c2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003c6:	fb03 fc0c 	mul.w	ip, r3, ip
 80003ca:	45a4      	cmp	ip, r4
 80003cc:	d907      	bls.n	80003de <__udivmoddi4+0x1d2>
 80003ce:	193c      	adds	r4, r7, r4
 80003d0:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80003d4:	d267      	bcs.n	80004a6 <__udivmoddi4+0x29a>
 80003d6:	45a4      	cmp	ip, r4
 80003d8:	d965      	bls.n	80004a6 <__udivmoddi4+0x29a>
 80003da:	3b02      	subs	r3, #2
 80003dc:	443c      	add	r4, r7
 80003de:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003e2:	fba0 9302 	umull	r9, r3, r0, r2
 80003e6:	eba4 040c 	sub.w	r4, r4, ip
 80003ea:	429c      	cmp	r4, r3
 80003ec:	46ce      	mov	lr, r9
 80003ee:	469c      	mov	ip, r3
 80003f0:	d351      	bcc.n	8000496 <__udivmoddi4+0x28a>
 80003f2:	d04e      	beq.n	8000492 <__udivmoddi4+0x286>
 80003f4:	b155      	cbz	r5, 800040c <__udivmoddi4+0x200>
 80003f6:	ebb8 030e 	subs.w	r3, r8, lr
 80003fa:	eb64 040c 	sbc.w	r4, r4, ip
 80003fe:	fa04 f606 	lsl.w	r6, r4, r6
 8000402:	40cb      	lsrs	r3, r1
 8000404:	431e      	orrs	r6, r3
 8000406:	40cc      	lsrs	r4, r1
 8000408:	e9c5 6400 	strd	r6, r4, [r5]
 800040c:	2100      	movs	r1, #0
 800040e:	e750      	b.n	80002b2 <__udivmoddi4+0xa6>
 8000410:	f1c2 0320 	rsb	r3, r2, #32
 8000414:	fa20 f103 	lsr.w	r1, r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa24 f303 	lsr.w	r3, r4, r3
 8000420:	4094      	lsls	r4, r2
 8000422:	430c      	orrs	r4, r1
 8000424:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000428:	fa00 fe02 	lsl.w	lr, r0, r2
 800042c:	fa1f f78c 	uxth.w	r7, ip
 8000430:	fbb3 f0f8 	udiv	r0, r3, r8
 8000434:	fb08 3110 	mls	r1, r8, r0, r3
 8000438:	0c23      	lsrs	r3, r4, #16
 800043a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043e:	fb00 f107 	mul.w	r1, r0, r7
 8000442:	4299      	cmp	r1, r3
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x24c>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 800044e:	d22c      	bcs.n	80004aa <__udivmoddi4+0x29e>
 8000450:	4299      	cmp	r1, r3
 8000452:	d92a      	bls.n	80004aa <__udivmoddi4+0x29e>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1a5b      	subs	r3, r3, r1
 800045a:	b2a4      	uxth	r4, r4
 800045c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000460:	fb08 3311 	mls	r3, r8, r1, r3
 8000464:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000468:	fb01 f307 	mul.w	r3, r1, r7
 800046c:	42a3      	cmp	r3, r4
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x276>
 8000470:	eb1c 0404 	adds.w	r4, ip, r4
 8000474:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000478:	d213      	bcs.n	80004a2 <__udivmoddi4+0x296>
 800047a:	42a3      	cmp	r3, r4
 800047c:	d911      	bls.n	80004a2 <__udivmoddi4+0x296>
 800047e:	3902      	subs	r1, #2
 8000480:	4464      	add	r4, ip
 8000482:	1ae4      	subs	r4, r4, r3
 8000484:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000488:	e739      	b.n	80002fe <__udivmoddi4+0xf2>
 800048a:	4604      	mov	r4, r0
 800048c:	e6f0      	b.n	8000270 <__udivmoddi4+0x64>
 800048e:	4608      	mov	r0, r1
 8000490:	e706      	b.n	80002a0 <__udivmoddi4+0x94>
 8000492:	45c8      	cmp	r8, r9
 8000494:	d2ae      	bcs.n	80003f4 <__udivmoddi4+0x1e8>
 8000496:	ebb9 0e02 	subs.w	lr, r9, r2
 800049a:	eb63 0c07 	sbc.w	ip, r3, r7
 800049e:	3801      	subs	r0, #1
 80004a0:	e7a8      	b.n	80003f4 <__udivmoddi4+0x1e8>
 80004a2:	4631      	mov	r1, r6
 80004a4:	e7ed      	b.n	8000482 <__udivmoddi4+0x276>
 80004a6:	4603      	mov	r3, r0
 80004a8:	e799      	b.n	80003de <__udivmoddi4+0x1d2>
 80004aa:	4630      	mov	r0, r6
 80004ac:	e7d4      	b.n	8000458 <__udivmoddi4+0x24c>
 80004ae:	46d6      	mov	lr, sl
 80004b0:	e77f      	b.n	80003b2 <__udivmoddi4+0x1a6>
 80004b2:	4463      	add	r3, ip
 80004b4:	3802      	subs	r0, #2
 80004b6:	e74d      	b.n	8000354 <__udivmoddi4+0x148>
 80004b8:	4606      	mov	r6, r0
 80004ba:	4623      	mov	r3, r4
 80004bc:	4608      	mov	r0, r1
 80004be:	e70f      	b.n	80002e0 <__udivmoddi4+0xd4>
 80004c0:	3e02      	subs	r6, #2
 80004c2:	4463      	add	r3, ip
 80004c4:	e730      	b.n	8000328 <__udivmoddi4+0x11c>
 80004c6:	bf00      	nop

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b088      	sub	sp, #32
 80004d0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004d2:	f107 030c 	add.w	r3, r7, #12
 80004d6:	2200      	movs	r2, #0
 80004d8:	601a      	str	r2, [r3, #0]
 80004da:	605a      	str	r2, [r3, #4]
 80004dc:	609a      	str	r2, [r3, #8]
 80004de:	60da      	str	r2, [r3, #12]
 80004e0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004e2:	4b1f      	ldr	r3, [pc, #124]	@ (8000560 <MX_GPIO_Init+0x94>)
 80004e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80004e6:	4a1e      	ldr	r2, [pc, #120]	@ (8000560 <MX_GPIO_Init+0x94>)
 80004e8:	f043 0304 	orr.w	r3, r3, #4
 80004ec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80004ee:	4b1c      	ldr	r3, [pc, #112]	@ (8000560 <MX_GPIO_Init+0x94>)
 80004f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80004f2:	f003 0304 	and.w	r3, r3, #4
 80004f6:	60bb      	str	r3, [r7, #8]
 80004f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004fa:	4b19      	ldr	r3, [pc, #100]	@ (8000560 <MX_GPIO_Init+0x94>)
 80004fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80004fe:	4a18      	ldr	r2, [pc, #96]	@ (8000560 <MX_GPIO_Init+0x94>)
 8000500:	f043 0301 	orr.w	r3, r3, #1
 8000504:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000506:	4b16      	ldr	r3, [pc, #88]	@ (8000560 <MX_GPIO_Init+0x94>)
 8000508:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800050a:	f003 0301 	and.w	r3, r3, #1
 800050e:	607b      	str	r3, [r7, #4]
 8000510:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000512:	4b13      	ldr	r3, [pc, #76]	@ (8000560 <MX_GPIO_Init+0x94>)
 8000514:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000516:	4a12      	ldr	r2, [pc, #72]	@ (8000560 <MX_GPIO_Init+0x94>)
 8000518:	f043 0302 	orr.w	r3, r3, #2
 800051c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800051e:	4b10      	ldr	r3, [pc, #64]	@ (8000560 <MX_GPIO_Init+0x94>)
 8000520:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000522:	f003 0302 	and.w	r3, r3, #2
 8000526:	603b      	str	r3, [r7, #0]
 8000528:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CSN_Pin|CE_Pin, GPIO_PIN_RESET);
 800052a:	2200      	movs	r2, #0
 800052c:	f44f 6110 	mov.w	r1, #2304	@ 0x900
 8000530:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000534:	f001 f8d4 	bl	80016e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = CSN_Pin|CE_Pin;
 8000538:	f44f 6310 	mov.w	r3, #2304	@ 0x900
 800053c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800053e:	2301      	movs	r3, #1
 8000540:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000542:	2300      	movs	r3, #0
 8000544:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000546:	2300      	movs	r3, #0
 8000548:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800054a:	f107 030c 	add.w	r3, r7, #12
 800054e:	4619      	mov	r1, r3
 8000550:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000554:	f000 ff5a 	bl	800140c <HAL_GPIO_Init>

}
 8000558:	bf00      	nop
 800055a:	3720      	adds	r7, #32
 800055c:	46bd      	mov	sp, r7
 800055e:	bd80      	pop	{r7, pc}
 8000560:	40021000 	.word	0x40021000

08000564 <nRF24_CE_L>:

#ifdef USE_HAL_DRIVER
extern SPI_HandleTypeDef hspi3;


static inline void nRF24_CE_L() {
 8000564:	b580      	push	{r7, lr}
 8000566:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CE_GPIO_Port, CE_Pin, GPIO_PIN_RESET);
 8000568:	2200      	movs	r2, #0
 800056a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800056e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000572:	f001 f8b5 	bl	80016e0 <HAL_GPIO_WritePin>
}
 8000576:	bf00      	nop
 8000578:	bd80      	pop	{r7, pc}

0800057a <nRF24_CE_H>:

static inline void nRF24_CE_H() {
 800057a:	b580      	push	{r7, lr}
 800057c:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CE_GPIO_Port, CE_Pin, GPIO_PIN_SET);
 800057e:	2201      	movs	r2, #1
 8000580:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000584:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000588:	f001 f8aa 	bl	80016e0 <HAL_GPIO_WritePin>
}
 800058c:	bf00      	nop
 800058e:	bd80      	pop	{r7, pc}

08000590 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

	HAL_Init();
 8000594:	f000 fdbb 	bl	800110e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000598:	f000 f81a 	bl	80005d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800059c:	f7ff ff96 	bl	80004cc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005a0:	f000 fcf2 	bl	8000f88 <MX_USART2_UART_Init>
  MX_SPI3_Init();
 80005a4:	f000 fc08 	bl	8000db8 <MX_SPI3_Init>
  /* USER CODE BEGIN 2 */
  nRF24_CE_L();
 80005a8:	f7ff ffdc 	bl	8000564 <nRF24_CE_L>
  radioInitSuccess = nRF24_Check();
 80005ac:	f000 f9a2 	bl	80008f4 <nRF24_Check>
 80005b0:	4603      	mov	r3, r0
 80005b2:	461a      	mov	r2, r3
 80005b4:	4b05      	ldr	r3, [pc, #20]	@ (80005cc <main+0x3c>)
 80005b6:	701a      	strb	r2, [r3, #0]

  radioSetup();
 80005b8:	f000 f86c 	bl	8000694 <radioSetup>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  receiveData(); // also sends data via UART
 80005bc:	f000 f898 	bl	80006f0 <receiveData>
	  UARTbuf[255] =  '\r';

   	  HAL_UART_Transmit(&huart2, (uint8_t *)UARTbuf, 255, 100);
   	  */

   	  HAL_Delay(1);
 80005c0:	2001      	movs	r0, #1
 80005c2:	f000 fe19 	bl	80011f8 <HAL_Delay>
	  receiveData(); // also sends data via UART
 80005c6:	bf00      	nop
 80005c8:	e7f8      	b.n	80005bc <main+0x2c>
 80005ca:	bf00      	nop
 80005cc:	2000004c 	.word	0x2000004c

080005d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b096      	sub	sp, #88	@ 0x58
 80005d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005d6:	f107 0314 	add.w	r3, r7, #20
 80005da:	2244      	movs	r2, #68	@ 0x44
 80005dc:	2100      	movs	r1, #0
 80005de:	4618      	mov	r0, r3
 80005e0:	f003 fb7d 	bl	8003cde <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005e4:	463b      	mov	r3, r7
 80005e6:	2200      	movs	r2, #0
 80005e8:	601a      	str	r2, [r3, #0]
 80005ea:	605a      	str	r2, [r3, #4]
 80005ec:	609a      	str	r2, [r3, #8]
 80005ee:	60da      	str	r2, [r3, #12]
 80005f0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80005f2:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80005f6:	f001 f8a9 	bl	800174c <HAL_PWREx_ControlVoltageScaling>
 80005fa:	4603      	mov	r3, r0
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d001      	beq.n	8000604 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000600:	f000 f8aa 	bl	8000758 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000604:	f001 f884 	bl	8001710 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000608:	4b21      	ldr	r3, [pc, #132]	@ (8000690 <SystemClock_Config+0xc0>)
 800060a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800060e:	4a20      	ldr	r2, [pc, #128]	@ (8000690 <SystemClock_Config+0xc0>)
 8000610:	f023 0318 	bic.w	r3, r3, #24
 8000614:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000618:	2314      	movs	r3, #20
 800061a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800061c:	2301      	movs	r3, #1
 800061e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000620:	2301      	movs	r3, #1
 8000622:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000624:	2300      	movs	r3, #0
 8000626:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000628:	2360      	movs	r3, #96	@ 0x60
 800062a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800062c:	2302      	movs	r3, #2
 800062e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000630:	2301      	movs	r3, #1
 8000632:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000634:	2301      	movs	r3, #1
 8000636:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000638:	2328      	movs	r3, #40	@ 0x28
 800063a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800063c:	2307      	movs	r3, #7
 800063e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000640:	2302      	movs	r3, #2
 8000642:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000644:	2302      	movs	r3, #2
 8000646:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000648:	f107 0314 	add.w	r3, r7, #20
 800064c:	4618      	mov	r0, r3
 800064e:	f001 f8d3 	bl	80017f8 <HAL_RCC_OscConfig>
 8000652:	4603      	mov	r3, r0
 8000654:	2b00      	cmp	r3, #0
 8000656:	d001      	beq.n	800065c <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000658:	f000 f87e 	bl	8000758 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800065c:	230f      	movs	r3, #15
 800065e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000660:	2303      	movs	r3, #3
 8000662:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000664:	2300      	movs	r3, #0
 8000666:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000668:	2300      	movs	r3, #0
 800066a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800066c:	2300      	movs	r3, #0
 800066e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000670:	463b      	mov	r3, r7
 8000672:	2104      	movs	r1, #4
 8000674:	4618      	mov	r0, r3
 8000676:	f001 fcd3 	bl	8002020 <HAL_RCC_ClockConfig>
 800067a:	4603      	mov	r3, r0
 800067c:	2b00      	cmp	r3, #0
 800067e:	d001      	beq.n	8000684 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000680:	f000 f86a 	bl	8000758 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000684:	f002 f8e6 	bl	8002854 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000688:	bf00      	nop
 800068a:	3758      	adds	r7, #88	@ 0x58
 800068c:	46bd      	mov	sp, r7
 800068e:	bd80      	pop	{r7, pc}
 8000690:	40021000 	.word	0x40021000

08000694 <radioSetup>:

	// Put the transceiver to the RX mode
	nRF24_CE_H();
}
*/
void radioSetup(void){
 8000694:	b580      	push	{r7, lr}
 8000696:	af00      	add	r7, sp, #0
	// Set RF channel
	nRF24_SetRFChannel(40);
 8000698:	2028      	movs	r0, #40	@ 0x28
 800069a:	f000 fa06 	bl	8000aaa <nRF24_SetRFChannel>

	// Set data rate
	nRF24_SetDataRate(nRF24_DR_2Mbps);
 800069e:	2008      	movs	r0, #8
 80006a0:	f000 fa87 	bl	8000bb2 <nRF24_SetDataRate>

	// Set CRC scheme
	nRF24_SetCRCScheme(nRF24_CRC_2byte);
 80006a4:	200c      	movs	r0, #12
 80006a6:	f000 f9df 	bl	8000a68 <nRF24_SetCRCScheme>

	// Set address width, its common for all pipes (RX and TX)
	nRF24_SetAddrWidth(3);
 80006aa:	2003      	movs	r0, #3
 80006ac:	f000 fa0b 	bl	8000ac6 <nRF24_SetAddrWidth>

	// Configure RX PIPE
	static const uint8_t nRF24_ADDR[] = {'E', 'S', 'B'};
	nRF24_SetAddr(nRF24_PIPE1, nRF24_ADDR); // program address for pipe
 80006b0:	490e      	ldr	r1, [pc, #56]	@ (80006ec <radioSetup+0x58>)
 80006b2:	2001      	movs	r0, #1
 80006b4:	f000 fa18 	bl	8000ae8 <nRF24_SetAddr>
	nRF24_SetRXPipe(nRF24_PIPE1, nRF24_AA_ON, 10); // Auto-ACK: enabled, payload length: 10 bytes
 80006b8:	220a      	movs	r2, #10
 80006ba:	2101      	movs	r1, #1
 80006bc:	2001      	movs	r0, #1
 80006be:	f000 fa93 	bl	8000be8 <nRF24_SetRXPipe>

	// Set TX power for Auto-ACK (maximum, to ensure that transmitter will hear ACK reply)
	nRF24_SetTXPower(nRF24_TXPWR_0dBm);
 80006c2:	2006      	movs	r0, #6
 80006c4:	f000 fa5a 	bl	8000b7c <nRF24_SetTXPower>

	// Set operational mode (PRX == receiver)
	nRF24_SetOperationalMode(nRF24_MODE_RX);
 80006c8:	2001      	movs	r0, #1
 80006ca:	f000 f960 	bl	800098e <nRF24_SetOperationalMode>

	// Clear any pending IRQ flags
	nRF24_ClearIRQFlags();
 80006ce:	f000 faf2 	bl	8000cb6 <nRF24_ClearIRQFlags>

	// Wake the transceiver
	nRF24_SetPowerMode(nRF24_PWR_UP);
 80006d2:	2002      	movs	r0, #2
 80006d4:	f000 f93c 	bl	8000950 <nRF24_SetPowerMode>

	// Enable DPL
	nRF24_SetDynamicPayloadLength(nRF24_DPL_ON);
 80006d8:	2001      	movs	r0, #1
 80006da:	f000 f979 	bl	80009d0 <nRF24_SetDynamicPayloadLength>

	nRF24_SetPayloadWithAck(1);
 80006de:	2001      	movs	r0, #1
 80006e0:	f000 f9a0 	bl	8000a24 <nRF24_SetPayloadWithAck>

		// Put the transceiver to the RX mode
	nRF24_CE_H();
 80006e4:	f7ff ff49 	bl	800057a <nRF24_CE_H>
}
 80006e8:	bf00      	nop
 80006ea:	bd80      	pop	{r7, pc}
 80006ec:	08003d58 	.word	0x08003d58

080006f0 <receiveData>:

void receiveData(void){
 80006f0:	b580      	push	{r7, lr}
 80006f2:	af00      	add	r7, sp, #0
	if (!radioInitSuccess) return;
 80006f4:	4b12      	ldr	r3, [pc, #72]	@ (8000740 <receiveData+0x50>)
 80006f6:	781b      	ldrb	r3, [r3, #0]
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d01e      	beq.n	800073a <receiveData+0x4a>

	if (nRF24_GetStatus_RXFIFO() != nRF24_STATUS_RXFIFO_EMPTY) {
 80006fc:	f000 fac8 	bl	8000c90 <nRF24_GetStatus_RXFIFO>
 8000700:	4603      	mov	r3, r0
 8000702:	2b01      	cmp	r3, #1
 8000704:	d01a      	beq.n	800073c <receiveData+0x4c>

		c++;
 8000706:	4b0f      	ldr	r3, [pc, #60]	@ (8000744 <receiveData+0x54>)
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	3301      	adds	r3, #1
 800070c:	4a0d      	ldr	r2, [pc, #52]	@ (8000744 <receiveData+0x54>)
 800070e:	6013      	str	r3, [r2, #0]
		pipeRX = nRF24_ReadPayload(bufRX, &bufLenRX); // read a payload to buffer
 8000710:	490d      	ldr	r1, [pc, #52]	@ (8000748 <receiveData+0x58>)
 8000712:	480e      	ldr	r0, [pc, #56]	@ (800074c <receiveData+0x5c>)
 8000714:	f000 fb40 	bl	8000d98 <nRF24_ReadPayload>
 8000718:	4603      	mov	r3, r0
 800071a:	461a      	mov	r2, r3
 800071c:	4b0c      	ldr	r3, [pc, #48]	@ (8000750 <receiveData+0x60>)
 800071e:	701a      	strb	r2, [r3, #0]

		nRF24_ClearIRQFlags(); // clear any pending IRQ bits
 8000720:	f000 fac9 	bl	8000cb6 <nRF24_ClearIRQFlags>
			for (int j = 0; j < 28; j++) txBuf[j + 4] = charImg[i][j];
			nRF24_TransmitPacket(&txBuf[0], 32);
		}
		*/

		HAL_UART_Transmit(&huart2, (uint8_t *)bufRX, strlen(bufRX), 100);
 8000724:	4809      	ldr	r0, [pc, #36]	@ (800074c <receiveData+0x5c>)
 8000726:	f7ff fd51 	bl	80001cc <strlen>
 800072a:	4603      	mov	r3, r0
 800072c:	b29a      	uxth	r2, r3
 800072e:	2364      	movs	r3, #100	@ 0x64
 8000730:	4906      	ldr	r1, [pc, #24]	@ (800074c <receiveData+0x5c>)
 8000732:	4808      	ldr	r0, [pc, #32]	@ (8000754 <receiveData+0x64>)
 8000734:	f002 fe08 	bl	8003348 <HAL_UART_Transmit>
 8000738:	e000      	b.n	800073c <receiveData+0x4c>
	if (!radioInitSuccess) return;
 800073a:	bf00      	nop
	}
}
 800073c:	bd80      	pop	{r7, pc}
 800073e:	bf00      	nop
 8000740:	2000004c 	.word	0x2000004c
 8000744:	20000050 	.word	0x20000050
 8000748:	20000020 	.word	0x20000020
 800074c:	20000000 	.word	0x20000000
 8000750:	2000004d 	.word	0x2000004d
 8000754:	200000b8 	.word	0x200000b8

08000758 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000758:	b480      	push	{r7}
 800075a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800075c:	b672      	cpsid	i
}
 800075e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000760:	bf00      	nop
 8000762:	e7fd      	b.n	8000760 <Error_Handler+0x8>

08000764 <nRF24_CSN_L>:

static inline void nRF24_CSN_L() {
 8000764:	b580      	push	{r7, lr}
 8000766:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CSN_GPIO_Port, CSN_Pin, GPIO_PIN_RESET);
 8000768:	2200      	movs	r2, #0
 800076a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800076e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000772:	f000 ffb5 	bl	80016e0 <HAL_GPIO_WritePin>
}
 8000776:	bf00      	nop
 8000778:	bd80      	pop	{r7, pc}

0800077a <nRF24_CSN_H>:

static inline void nRF24_CSN_H() {
 800077a:	b580      	push	{r7, lr}
 800077c:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CSN_GPIO_Port, CSN_Pin, GPIO_PIN_SET);
 800077e:	2201      	movs	r2, #1
 8000780:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000784:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000788:	f000 ffaa 	bl	80016e0 <HAL_GPIO_WritePin>
}
 800078c:	bf00      	nop
 800078e:	bd80      	pop	{r7, pc}

08000790 <nRF24_LL_RW>:


static inline uint8_t nRF24_LL_RW(uint8_t data) {
 8000790:	b580      	push	{r7, lr}
 8000792:	b086      	sub	sp, #24
 8000794:	af02      	add	r7, sp, #8
 8000796:	4603      	mov	r3, r0
 8000798:	71fb      	strb	r3, [r7, #7]
    // Wait until TX buffer is empty
    uint8_t result;
    if(HAL_SPI_TransmitReceive(&hspi3,&data,&result,1,2000)!=HAL_OK) {
 800079a:	f107 020f 	add.w	r2, r7, #15
 800079e:	1df9      	adds	r1, r7, #7
 80007a0:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80007a4:	9300      	str	r3, [sp, #0]
 80007a6:	2301      	movs	r3, #1
 80007a8:	4806      	ldr	r0, [pc, #24]	@ (80007c4 <nRF24_LL_RW+0x34>)
 80007aa:	f002 f9f8 	bl	8002b9e <HAL_SPI_TransmitReceive>
 80007ae:	4603      	mov	r3, r0
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d001      	beq.n	80007b8 <nRF24_LL_RW+0x28>
        Error_Handler();
 80007b4:	f7ff ffd0 	bl	8000758 <Error_Handler>
    };
    return result;
 80007b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80007ba:	4618      	mov	r0, r3
 80007bc:	3710      	adds	r7, #16
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	20000054 	.word	0x20000054

080007c8 <nRF24_ReadReg>:

// Read a register
// input:
//   reg - number of register to read
// return: value of register
static uint8_t nRF24_ReadReg(uint8_t reg) {
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b084      	sub	sp, #16
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	4603      	mov	r3, r0
 80007d0:	71fb      	strb	r3, [r7, #7]
	uint8_t value;

	nRF24_CSN_L();
 80007d2:	f7ff ffc7 	bl	8000764 <nRF24_CSN_L>
	nRF24_LL_RW(reg & nRF24_MASK_REG_MAP);
 80007d6:	79fb      	ldrb	r3, [r7, #7]
 80007d8:	f003 031f 	and.w	r3, r3, #31
 80007dc:	b2db      	uxtb	r3, r3
 80007de:	4618      	mov	r0, r3
 80007e0:	f7ff ffd6 	bl	8000790 <nRF24_LL_RW>
	value = nRF24_LL_RW(nRF24_CMD_NOP);
 80007e4:	20ff      	movs	r0, #255	@ 0xff
 80007e6:	f7ff ffd3 	bl	8000790 <nRF24_LL_RW>
 80007ea:	4603      	mov	r3, r0
 80007ec:	73fb      	strb	r3, [r7, #15]
	nRF24_CSN_H();
 80007ee:	f7ff ffc4 	bl	800077a <nRF24_CSN_H>

	return value;
 80007f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80007f4:	4618      	mov	r0, r3
 80007f6:	3710      	adds	r7, #16
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bd80      	pop	{r7, pc}

080007fc <nRF24_WriteReg>:

// Write a new value to register
// input:
//   reg - number of register to write
//   value - value to write
static void nRF24_WriteReg(uint8_t reg, uint8_t value) {
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b082      	sub	sp, #8
 8000800:	af00      	add	r7, sp, #0
 8000802:	4603      	mov	r3, r0
 8000804:	460a      	mov	r2, r1
 8000806:	71fb      	strb	r3, [r7, #7]
 8000808:	4613      	mov	r3, r2
 800080a:	71bb      	strb	r3, [r7, #6]
	nRF24_CSN_L();
 800080c:	f7ff ffaa 	bl	8000764 <nRF24_CSN_L>
	if (reg < nRF24_CMD_W_REGISTER) {
 8000810:	79fb      	ldrb	r3, [r7, #7]
 8000812:	2b1f      	cmp	r3, #31
 8000814:	d810      	bhi.n	8000838 <nRF24_WriteReg+0x3c>
		// This is a register access
		nRF24_LL_RW(nRF24_CMD_W_REGISTER | (reg & nRF24_MASK_REG_MAP));
 8000816:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800081a:	f003 031f 	and.w	r3, r3, #31
 800081e:	b25b      	sxtb	r3, r3
 8000820:	f043 0320 	orr.w	r3, r3, #32
 8000824:	b25b      	sxtb	r3, r3
 8000826:	b2db      	uxtb	r3, r3
 8000828:	4618      	mov	r0, r3
 800082a:	f7ff ffb1 	bl	8000790 <nRF24_LL_RW>
		nRF24_LL_RW(value);
 800082e:	79bb      	ldrb	r3, [r7, #6]
 8000830:	4618      	mov	r0, r3
 8000832:	f7ff ffad 	bl	8000790 <nRF24_LL_RW>
 8000836:	e013      	b.n	8000860 <nRF24_WriteReg+0x64>
	} else {
		// This is a single byte command or future command/register
		nRF24_LL_RW(reg);
 8000838:	79fb      	ldrb	r3, [r7, #7]
 800083a:	4618      	mov	r0, r3
 800083c:	f7ff ffa8 	bl	8000790 <nRF24_LL_RW>
		if ((reg != nRF24_CMD_FLUSH_TX) && (reg != nRF24_CMD_FLUSH_RX) && \
 8000840:	79fb      	ldrb	r3, [r7, #7]
 8000842:	2be1      	cmp	r3, #225	@ 0xe1
 8000844:	d00c      	beq.n	8000860 <nRF24_WriteReg+0x64>
 8000846:	79fb      	ldrb	r3, [r7, #7]
 8000848:	2be2      	cmp	r3, #226	@ 0xe2
 800084a:	d009      	beq.n	8000860 <nRF24_WriteReg+0x64>
 800084c:	79fb      	ldrb	r3, [r7, #7]
 800084e:	2be3      	cmp	r3, #227	@ 0xe3
 8000850:	d006      	beq.n	8000860 <nRF24_WriteReg+0x64>
				(reg != nRF24_CMD_REUSE_TX_PL) && (reg != nRF24_CMD_NOP)) {
 8000852:	79fb      	ldrb	r3, [r7, #7]
 8000854:	2bff      	cmp	r3, #255	@ 0xff
 8000856:	d003      	beq.n	8000860 <nRF24_WriteReg+0x64>
			// Send register value
			nRF24_LL_RW(value);
 8000858:	79bb      	ldrb	r3, [r7, #6]
 800085a:	4618      	mov	r0, r3
 800085c:	f7ff ff98 	bl	8000790 <nRF24_LL_RW>
		}
	}
	nRF24_CSN_H();
 8000860:	f7ff ff8b 	bl	800077a <nRF24_CSN_H>
}
 8000864:	bf00      	nop
 8000866:	3708      	adds	r7, #8
 8000868:	46bd      	mov	sp, r7
 800086a:	bd80      	pop	{r7, pc}

0800086c <nRF24_ReadMBReg>:
// Read a multi-byte register
// input:
//   reg - number of register to read
//   pBuf - pointer to the buffer for register data
//   count - number of bytes to read
static void nRF24_ReadMBReg(uint8_t reg, uint8_t *pBuf, uint8_t count) {
 800086c:	b590      	push	{r4, r7, lr}
 800086e:	b083      	sub	sp, #12
 8000870:	af00      	add	r7, sp, #0
 8000872:	4603      	mov	r3, r0
 8000874:	6039      	str	r1, [r7, #0]
 8000876:	71fb      	strb	r3, [r7, #7]
 8000878:	4613      	mov	r3, r2
 800087a:	71bb      	strb	r3, [r7, #6]
	nRF24_CSN_L();
 800087c:	f7ff ff72 	bl	8000764 <nRF24_CSN_L>
	nRF24_LL_RW(reg);
 8000880:	79fb      	ldrb	r3, [r7, #7]
 8000882:	4618      	mov	r0, r3
 8000884:	f7ff ff84 	bl	8000790 <nRF24_LL_RW>
	while (count--) {
 8000888:	e007      	b.n	800089a <nRF24_ReadMBReg+0x2e>
		*pBuf++ = nRF24_LL_RW(nRF24_CMD_NOP);
 800088a:	683c      	ldr	r4, [r7, #0]
 800088c:	1c63      	adds	r3, r4, #1
 800088e:	603b      	str	r3, [r7, #0]
 8000890:	20ff      	movs	r0, #255	@ 0xff
 8000892:	f7ff ff7d 	bl	8000790 <nRF24_LL_RW>
 8000896:	4603      	mov	r3, r0
 8000898:	7023      	strb	r3, [r4, #0]
	while (count--) {
 800089a:	79bb      	ldrb	r3, [r7, #6]
 800089c:	1e5a      	subs	r2, r3, #1
 800089e:	71ba      	strb	r2, [r7, #6]
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d1f2      	bne.n	800088a <nRF24_ReadMBReg+0x1e>
	}
	nRF24_CSN_H();
 80008a4:	f7ff ff69 	bl	800077a <nRF24_CSN_H>
}
 80008a8:	bf00      	nop
 80008aa:	370c      	adds	r7, #12
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bd90      	pop	{r4, r7, pc}

080008b0 <nRF24_WriteMBReg>:
// Write a multi-byte register
// input:
//   reg - number of register to write
//   pBuf - pointer to the buffer with data to write
//   count - number of bytes to write
static void nRF24_WriteMBReg(uint8_t reg, uint8_t *pBuf, uint8_t count) {
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b082      	sub	sp, #8
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	4603      	mov	r3, r0
 80008b8:	6039      	str	r1, [r7, #0]
 80008ba:	71fb      	strb	r3, [r7, #7]
 80008bc:	4613      	mov	r3, r2
 80008be:	71bb      	strb	r3, [r7, #6]
	nRF24_CSN_L();
 80008c0:	f7ff ff50 	bl	8000764 <nRF24_CSN_L>
	nRF24_LL_RW(reg);
 80008c4:	79fb      	ldrb	r3, [r7, #7]
 80008c6:	4618      	mov	r0, r3
 80008c8:	f7ff ff62 	bl	8000790 <nRF24_LL_RW>
	while (count--) {
 80008cc:	e006      	b.n	80008dc <nRF24_WriteMBReg+0x2c>
		nRF24_LL_RW(*pBuf++);
 80008ce:	683b      	ldr	r3, [r7, #0]
 80008d0:	1c5a      	adds	r2, r3, #1
 80008d2:	603a      	str	r2, [r7, #0]
 80008d4:	781b      	ldrb	r3, [r3, #0]
 80008d6:	4618      	mov	r0, r3
 80008d8:	f7ff ff5a 	bl	8000790 <nRF24_LL_RW>
	while (count--) {
 80008dc:	79bb      	ldrb	r3, [r7, #6]
 80008de:	1e5a      	subs	r2, r3, #1
 80008e0:	71ba      	strb	r2, [r7, #6]
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d1f3      	bne.n	80008ce <nRF24_WriteMBReg+0x1e>
	}
	nRF24_CSN_H();
 80008e6:	f7ff ff48 	bl	800077a <nRF24_CSN_H>
}
 80008ea:	bf00      	nop
 80008ec:	3708      	adds	r7, #8
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bd80      	pop	{r7, pc}
	...

080008f4 <nRF24_Check>:

// Check if the nRF24L01 present
// return:
//   1 - nRF24L01 is online and responding
//   0 - received sequence differs from original
uint8_t nRF24_Check(void) {
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b084      	sub	sp, #16
 80008f8:	af00      	add	r7, sp, #0
	uint8_t rxbuf[5];
	uint8_t i;
	uint8_t *ptr = (uint8_t *)nRF24_TEST_ADDR;
 80008fa:	4b14      	ldr	r3, [pc, #80]	@ (800094c <nRF24_Check+0x58>)
 80008fc:	60bb      	str	r3, [r7, #8]

	// Write test TX address and read TX_ADDR register
	nRF24_WriteMBReg(nRF24_CMD_W_REGISTER | nRF24_REG_TX_ADDR, ptr, 5);
 80008fe:	2205      	movs	r2, #5
 8000900:	68b9      	ldr	r1, [r7, #8]
 8000902:	2030      	movs	r0, #48	@ 0x30
 8000904:	f7ff ffd4 	bl	80008b0 <nRF24_WriteMBReg>
	nRF24_ReadMBReg(nRF24_CMD_R_REGISTER | nRF24_REG_TX_ADDR, rxbuf, 5);
 8000908:	463b      	mov	r3, r7
 800090a:	2205      	movs	r2, #5
 800090c:	4619      	mov	r1, r3
 800090e:	2010      	movs	r0, #16
 8000910:	f7ff ffac 	bl	800086c <nRF24_ReadMBReg>

	// Compare buffers, return error on first mismatch
	for (i = 0; i < 5; i++) {
 8000914:	2300      	movs	r3, #0
 8000916:	73fb      	strb	r3, [r7, #15]
 8000918:	e00f      	b.n	800093a <nRF24_Check+0x46>
		if (rxbuf[i] != *ptr++) return 0;
 800091a:	7bfb      	ldrb	r3, [r7, #15]
 800091c:	3310      	adds	r3, #16
 800091e:	443b      	add	r3, r7
 8000920:	f813 2c10 	ldrb.w	r2, [r3, #-16]
 8000924:	68bb      	ldr	r3, [r7, #8]
 8000926:	1c59      	adds	r1, r3, #1
 8000928:	60b9      	str	r1, [r7, #8]
 800092a:	781b      	ldrb	r3, [r3, #0]
 800092c:	429a      	cmp	r2, r3
 800092e:	d001      	beq.n	8000934 <nRF24_Check+0x40>
 8000930:	2300      	movs	r3, #0
 8000932:	e006      	b.n	8000942 <nRF24_Check+0x4e>
	for (i = 0; i < 5; i++) {
 8000934:	7bfb      	ldrb	r3, [r7, #15]
 8000936:	3301      	adds	r3, #1
 8000938:	73fb      	strb	r3, [r7, #15]
 800093a:	7bfb      	ldrb	r3, [r7, #15]
 800093c:	2b04      	cmp	r3, #4
 800093e:	d9ec      	bls.n	800091a <nRF24_Check+0x26>
	}

	return 1;
 8000940:	2301      	movs	r3, #1
}
 8000942:	4618      	mov	r0, r3
 8000944:	3710      	adds	r7, #16
 8000946:	46bd      	mov	sp, r7
 8000948:	bd80      	pop	{r7, pc}
 800094a:	bf00      	nop
 800094c:	08003d50 	.word	0x08003d50

08000950 <nRF24_SetPowerMode>:

// Control transceiver power mode
// input:
//   mode - new state of power mode, one of nRF24_PWR_xx values
void nRF24_SetPowerMode(uint8_t mode) {
 8000950:	b580      	push	{r7, lr}
 8000952:	b084      	sub	sp, #16
 8000954:	af00      	add	r7, sp, #0
 8000956:	4603      	mov	r3, r0
 8000958:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	reg = nRF24_ReadReg(nRF24_REG_CONFIG);
 800095a:	2000      	movs	r0, #0
 800095c:	f7ff ff34 	bl	80007c8 <nRF24_ReadReg>
 8000960:	4603      	mov	r3, r0
 8000962:	73fb      	strb	r3, [r7, #15]
	if (mode == nRF24_PWR_UP) {
 8000964:	79fb      	ldrb	r3, [r7, #7]
 8000966:	2b02      	cmp	r3, #2
 8000968:	d104      	bne.n	8000974 <nRF24_SetPowerMode+0x24>
		// Set the PWR_UP bit of CONFIG register to wake the transceiver
		// It goes into Stanby-I mode with consumption about 26uA
		reg |= nRF24_CONFIG_PWR_UP;
 800096a:	7bfb      	ldrb	r3, [r7, #15]
 800096c:	f043 0302 	orr.w	r3, r3, #2
 8000970:	73fb      	strb	r3, [r7, #15]
 8000972:	e003      	b.n	800097c <nRF24_SetPowerMode+0x2c>
	} else {
		// Clear the PWR_UP bit of CONFIG register to put the transceiver
		// into power down mode with consumption about 900nA
		reg &= ~nRF24_CONFIG_PWR_UP;
 8000974:	7bfb      	ldrb	r3, [r7, #15]
 8000976:	f023 0302 	bic.w	r3, r3, #2
 800097a:	73fb      	strb	r3, [r7, #15]
	}
	nRF24_WriteReg(nRF24_REG_CONFIG, reg);
 800097c:	7bfb      	ldrb	r3, [r7, #15]
 800097e:	4619      	mov	r1, r3
 8000980:	2000      	movs	r0, #0
 8000982:	f7ff ff3b 	bl	80007fc <nRF24_WriteReg>
}
 8000986:	bf00      	nop
 8000988:	3710      	adds	r7, #16
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}

0800098e <nRF24_SetOperationalMode>:

// Set transceiver operational mode
// input:
//   mode - operational mode, one of nRF24_MODE_xx values
void nRF24_SetOperationalMode(uint8_t mode) {
 800098e:	b580      	push	{r7, lr}
 8000990:	b084      	sub	sp, #16
 8000992:	af00      	add	r7, sp, #0
 8000994:	4603      	mov	r3, r0
 8000996:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	// Configure PRIM_RX bit of the CONFIG register
	reg  = nRF24_ReadReg(nRF24_REG_CONFIG);
 8000998:	2000      	movs	r0, #0
 800099a:	f7ff ff15 	bl	80007c8 <nRF24_ReadReg>
 800099e:	4603      	mov	r3, r0
 80009a0:	73fb      	strb	r3, [r7, #15]
	reg &= ~nRF24_CONFIG_PRIM_RX;
 80009a2:	7bfb      	ldrb	r3, [r7, #15]
 80009a4:	f023 0301 	bic.w	r3, r3, #1
 80009a8:	73fb      	strb	r3, [r7, #15]
	reg |= (mode & nRF24_CONFIG_PRIM_RX);
 80009aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009ae:	f003 0301 	and.w	r3, r3, #1
 80009b2:	b25a      	sxtb	r2, r3
 80009b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80009b8:	4313      	orrs	r3, r2
 80009ba:	b25b      	sxtb	r3, r3
 80009bc:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteReg(nRF24_REG_CONFIG, reg);
 80009be:	7bfb      	ldrb	r3, [r7, #15]
 80009c0:	4619      	mov	r1, r3
 80009c2:	2000      	movs	r0, #0
 80009c4:	f7ff ff1a 	bl	80007fc <nRF24_WriteReg>
}
 80009c8:	bf00      	nop
 80009ca:	3710      	adds	r7, #16
 80009cc:	46bd      	mov	sp, r7
 80009ce:	bd80      	pop	{r7, pc}

080009d0 <nRF24_SetDynamicPayloadLength>:

// Set transceiver DynamicPayloadLength feature for all the pipes
// input:
//   mode - status, one of nRF24_DPL_xx values
void nRF24_SetDynamicPayloadLength(uint8_t mode) {
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b084      	sub	sp, #16
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	4603      	mov	r3, r0
 80009d8:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;
	reg  = nRF24_ReadReg(nRF24_REG_FEATURE);
 80009da:	201d      	movs	r0, #29
 80009dc:	f7ff fef4 	bl	80007c8 <nRF24_ReadReg>
 80009e0:	4603      	mov	r3, r0
 80009e2:	73fb      	strb	r3, [r7, #15]
	if(mode) {
 80009e4:	79fb      	ldrb	r3, [r7, #7]
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d00c      	beq.n	8000a04 <nRF24_SetDynamicPayloadLength+0x34>
		nRF24_WriteReg(nRF24_REG_FEATURE, reg | nRF24_FEATURE_EN_DPL);
 80009ea:	7bfb      	ldrb	r3, [r7, #15]
 80009ec:	f043 0304 	orr.w	r3, r3, #4
 80009f0:	b2db      	uxtb	r3, r3
 80009f2:	4619      	mov	r1, r3
 80009f4:	201d      	movs	r0, #29
 80009f6:	f7ff ff01 	bl	80007fc <nRF24_WriteReg>
		nRF24_WriteReg(nRF24_REG_DYNPD, 0x1F);
 80009fa:	211f      	movs	r1, #31
 80009fc:	201c      	movs	r0, #28
 80009fe:	f7ff fefd 	bl	80007fc <nRF24_WriteReg>
	} else {
		nRF24_WriteReg(nRF24_REG_FEATURE, reg &~ nRF24_FEATURE_EN_DPL);
		nRF24_WriteReg(nRF24_REG_DYNPD, 0x0);
	}
}
 8000a02:	e00b      	b.n	8000a1c <nRF24_SetDynamicPayloadLength+0x4c>
		nRF24_WriteReg(nRF24_REG_FEATURE, reg &~ nRF24_FEATURE_EN_DPL);
 8000a04:	7bfb      	ldrb	r3, [r7, #15]
 8000a06:	f023 0304 	bic.w	r3, r3, #4
 8000a0a:	b2db      	uxtb	r3, r3
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	201d      	movs	r0, #29
 8000a10:	f7ff fef4 	bl	80007fc <nRF24_WriteReg>
		nRF24_WriteReg(nRF24_REG_DYNPD, 0x0);
 8000a14:	2100      	movs	r1, #0
 8000a16:	201c      	movs	r0, #28
 8000a18:	f7ff fef0 	bl	80007fc <nRF24_WriteReg>
}
 8000a1c:	bf00      	nop
 8000a1e:	3710      	adds	r7, #16
 8000a20:	46bd      	mov	sp, r7
 8000a22:	bd80      	pop	{r7, pc}

08000a24 <nRF24_SetPayloadWithAck>:

// Enables Payload With Ack. NB Refer to the datasheet for proper retransmit timing.
// input:
//   mode - status, 1 or 0
void nRF24_SetPayloadWithAck(uint8_t mode) {
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b084      	sub	sp, #16
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;
	reg  = nRF24_ReadReg(nRF24_REG_FEATURE);
 8000a2e:	201d      	movs	r0, #29
 8000a30:	f7ff feca 	bl	80007c8 <nRF24_ReadReg>
 8000a34:	4603      	mov	r3, r0
 8000a36:	73fb      	strb	r3, [r7, #15]
	if(mode) {
 8000a38:	79fb      	ldrb	r3, [r7, #7]
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d008      	beq.n	8000a50 <nRF24_SetPayloadWithAck+0x2c>
		nRF24_WriteReg(nRF24_REG_FEATURE, reg | nRF24_FEATURE_EN_ACK_PAY);
 8000a3e:	7bfb      	ldrb	r3, [r7, #15]
 8000a40:	f043 0302 	orr.w	r3, r3, #2
 8000a44:	b2db      	uxtb	r3, r3
 8000a46:	4619      	mov	r1, r3
 8000a48:	201d      	movs	r0, #29
 8000a4a:	f7ff fed7 	bl	80007fc <nRF24_WriteReg>
	} else {
		nRF24_WriteReg(nRF24_REG_FEATURE, reg &~ nRF24_FEATURE_EN_ACK_PAY);
	}
}
 8000a4e:	e007      	b.n	8000a60 <nRF24_SetPayloadWithAck+0x3c>
		nRF24_WriteReg(nRF24_REG_FEATURE, reg &~ nRF24_FEATURE_EN_ACK_PAY);
 8000a50:	7bfb      	ldrb	r3, [r7, #15]
 8000a52:	f023 0302 	bic.w	r3, r3, #2
 8000a56:	b2db      	uxtb	r3, r3
 8000a58:	4619      	mov	r1, r3
 8000a5a:	201d      	movs	r0, #29
 8000a5c:	f7ff fece 	bl	80007fc <nRF24_WriteReg>
}
 8000a60:	bf00      	nop
 8000a62:	3710      	adds	r7, #16
 8000a64:	46bd      	mov	sp, r7
 8000a66:	bd80      	pop	{r7, pc}

08000a68 <nRF24_SetCRCScheme>:
// Configure transceiver CRC scheme
// input:
//   scheme - CRC scheme, one of nRF24_CRC_xx values
// note: transceiver will forcibly turn on the CRC in case if auto acknowledgment
//       enabled for at least one RX pipe
void nRF24_SetCRCScheme(uint8_t scheme) {
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b084      	sub	sp, #16
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	4603      	mov	r3, r0
 8000a70:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	// Configure EN_CRC[3] and CRCO[2] bits of the CONFIG register
	reg  = nRF24_ReadReg(nRF24_REG_CONFIG);
 8000a72:	2000      	movs	r0, #0
 8000a74:	f7ff fea8 	bl	80007c8 <nRF24_ReadReg>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	73fb      	strb	r3, [r7, #15]
	reg &= ~nRF24_MASK_CRC;
 8000a7c:	7bfb      	ldrb	r3, [r7, #15]
 8000a7e:	f023 030c 	bic.w	r3, r3, #12
 8000a82:	73fb      	strb	r3, [r7, #15]
	reg |= (scheme & nRF24_MASK_CRC);
 8000a84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a88:	f003 030c 	and.w	r3, r3, #12
 8000a8c:	b25a      	sxtb	r2, r3
 8000a8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a92:	4313      	orrs	r3, r2
 8000a94:	b25b      	sxtb	r3, r3
 8000a96:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteReg(nRF24_REG_CONFIG, reg);
 8000a98:	7bfb      	ldrb	r3, [r7, #15]
 8000a9a:	4619      	mov	r1, r3
 8000a9c:	2000      	movs	r0, #0
 8000a9e:	f7ff fead 	bl	80007fc <nRF24_WriteReg>
}
 8000aa2:	bf00      	nop
 8000aa4:	3710      	adds	r7, #16
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bd80      	pop	{r7, pc}

08000aaa <nRF24_SetRFChannel>:
// Set frequency channel
// input:
//   channel - radio frequency channel, value from 0 to 127
// note: frequency will be (2400 + channel)MHz
// note: PLOS_CNT[7:4] bits of the OBSERVER_TX register will be reset
void nRF24_SetRFChannel(uint8_t channel) {
 8000aaa:	b580      	push	{r7, lr}
 8000aac:	b082      	sub	sp, #8
 8000aae:	af00      	add	r7, sp, #0
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteReg(nRF24_REG_RF_CH, channel);
 8000ab4:	79fb      	ldrb	r3, [r7, #7]
 8000ab6:	4619      	mov	r1, r3
 8000ab8:	2005      	movs	r0, #5
 8000aba:	f7ff fe9f 	bl	80007fc <nRF24_WriteReg>
}
 8000abe:	bf00      	nop
 8000ac0:	3708      	adds	r7, #8
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}

08000ac6 <nRF24_SetAddrWidth>:

// Set of address widths
// input:
//   addr_width - RX/TX address field width, value from 3 to 5
// note: this setting is common for all pipes
void nRF24_SetAddrWidth(uint8_t addr_width) {
 8000ac6:	b580      	push	{r7, lr}
 8000ac8:	b082      	sub	sp, #8
 8000aca:	af00      	add	r7, sp, #0
 8000acc:	4603      	mov	r3, r0
 8000ace:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteReg(nRF24_REG_SETUP_AW, addr_width - 2);
 8000ad0:	79fb      	ldrb	r3, [r7, #7]
 8000ad2:	3b02      	subs	r3, #2
 8000ad4:	b2db      	uxtb	r3, r3
 8000ad6:	4619      	mov	r1, r3
 8000ad8:	2003      	movs	r0, #3
 8000ada:	f7ff fe8f 	bl	80007fc <nRF24_WriteReg>
}
 8000ade:	bf00      	nop
 8000ae0:	3708      	adds	r7, #8
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bd80      	pop	{r7, pc}
	...

08000ae8 <nRF24_SetAddr>:
// note: buffer length must be equal to current address width of transceiver
// note: for pipes[2..5] only first byte of address will be written because
//       other bytes of address equals to pipe1
// note: for pipes[2..5] only first byte of address will be written because
//       pipes 1-5 share the four most significant address bytes
void nRF24_SetAddr(uint8_t pipe, const uint8_t *addr) {
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b084      	sub	sp, #16
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	4603      	mov	r3, r0
 8000af0:	6039      	str	r1, [r7, #0]
 8000af2:	71fb      	strb	r3, [r7, #7]
	uint8_t addr_width;

	// RX_ADDR_Px register
	switch (pipe) {
 8000af4:	79fb      	ldrb	r3, [r7, #7]
 8000af6:	2b06      	cmp	r3, #6
 8000af8:	d00a      	beq.n	8000b10 <nRF24_SetAddr+0x28>
 8000afa:	2b06      	cmp	r3, #6
 8000afc:	dc36      	bgt.n	8000b6c <nRF24_SetAddr+0x84>
 8000afe:	2b01      	cmp	r3, #1
 8000b00:	dc02      	bgt.n	8000b08 <nRF24_SetAddr+0x20>
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	da04      	bge.n	8000b10 <nRF24_SetAddr+0x28>
			// Write address LSBbyte (only first byte from the addr buffer)
			nRF24_WriteReg(nRF24_ADDR_REGS[pipe], *addr);
			break;
		default:
			// Incorrect pipe number -> do nothing
			break;
 8000b06:	e031      	b.n	8000b6c <nRF24_SetAddr+0x84>
 8000b08:	3b02      	subs	r3, #2
	switch (pipe) {
 8000b0a:	2b03      	cmp	r3, #3
 8000b0c:	d82e      	bhi.n	8000b6c <nRF24_SetAddr+0x84>
 8000b0e:	e023      	b.n	8000b58 <nRF24_SetAddr+0x70>
			addr_width = nRF24_ReadReg(nRF24_REG_SETUP_AW) + 1;
 8000b10:	2003      	movs	r0, #3
 8000b12:	f7ff fe59 	bl	80007c8 <nRF24_ReadReg>
 8000b16:	4603      	mov	r3, r0
 8000b18:	3301      	adds	r3, #1
 8000b1a:	73fb      	strb	r3, [r7, #15]
			addr += addr_width;
 8000b1c:	7bfb      	ldrb	r3, [r7, #15]
 8000b1e:	683a      	ldr	r2, [r7, #0]
 8000b20:	4413      	add	r3, r2
 8000b22:	603b      	str	r3, [r7, #0]
			nRF24_CSN_L();
 8000b24:	f7ff fe1e 	bl	8000764 <nRF24_CSN_L>
			nRF24_LL_RW(nRF24_CMD_W_REGISTER | nRF24_ADDR_REGS[pipe]);
 8000b28:	79fb      	ldrb	r3, [r7, #7]
 8000b2a:	4a13      	ldr	r2, [pc, #76]	@ (8000b78 <nRF24_SetAddr+0x90>)
 8000b2c:	5cd3      	ldrb	r3, [r2, r3]
 8000b2e:	f043 0320 	orr.w	r3, r3, #32
 8000b32:	b2db      	uxtb	r3, r3
 8000b34:	4618      	mov	r0, r3
 8000b36:	f7ff fe2b 	bl	8000790 <nRF24_LL_RW>
				nRF24_LL_RW(*addr--);
 8000b3a:	683b      	ldr	r3, [r7, #0]
 8000b3c:	1e5a      	subs	r2, r3, #1
 8000b3e:	603a      	str	r2, [r7, #0]
 8000b40:	781b      	ldrb	r3, [r3, #0]
 8000b42:	4618      	mov	r0, r3
 8000b44:	f7ff fe24 	bl	8000790 <nRF24_LL_RW>
			} while (addr_width--);
 8000b48:	7bfb      	ldrb	r3, [r7, #15]
 8000b4a:	1e5a      	subs	r2, r3, #1
 8000b4c:	73fa      	strb	r2, [r7, #15]
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d1f3      	bne.n	8000b3a <nRF24_SetAddr+0x52>
			nRF24_CSN_H();
 8000b52:	f7ff fe12 	bl	800077a <nRF24_CSN_H>
			break;
 8000b56:	e00a      	b.n	8000b6e <nRF24_SetAddr+0x86>
			nRF24_WriteReg(nRF24_ADDR_REGS[pipe], *addr);
 8000b58:	79fb      	ldrb	r3, [r7, #7]
 8000b5a:	4a07      	ldr	r2, [pc, #28]	@ (8000b78 <nRF24_SetAddr+0x90>)
 8000b5c:	5cd2      	ldrb	r2, [r2, r3]
 8000b5e:	683b      	ldr	r3, [r7, #0]
 8000b60:	781b      	ldrb	r3, [r3, #0]
 8000b62:	4619      	mov	r1, r3
 8000b64:	4610      	mov	r0, r2
 8000b66:	f7ff fe49 	bl	80007fc <nRF24_WriteReg>
			break;
 8000b6a:	e000      	b.n	8000b6e <nRF24_SetAddr+0x86>
			break;
 8000b6c:	bf00      	nop
	}
}
 8000b6e:	bf00      	nop
 8000b70:	3710      	adds	r7, #16
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	bf00      	nop
 8000b78:	08003d64 	.word	0x08003d64

08000b7c <nRF24_SetTXPower>:

// Configure RF output power in TX mode
// input:
//   tx_pwr - RF output power, one of nRF24_TXPWR_xx values
void nRF24_SetTXPower(uint8_t tx_pwr) {
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b084      	sub	sp, #16
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	4603      	mov	r3, r0
 8000b84:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	// Configure RF_PWR[2:1] bits of the RF_SETUP register
	reg  = nRF24_ReadReg(nRF24_REG_RF_SETUP);
 8000b86:	2006      	movs	r0, #6
 8000b88:	f7ff fe1e 	bl	80007c8 <nRF24_ReadReg>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	73fb      	strb	r3, [r7, #15]
	reg &= ~nRF24_MASK_RF_PWR;
 8000b90:	7bfb      	ldrb	r3, [r7, #15]
 8000b92:	f023 0306 	bic.w	r3, r3, #6
 8000b96:	73fb      	strb	r3, [r7, #15]
	reg |= tx_pwr;
 8000b98:	7bfa      	ldrb	r2, [r7, #15]
 8000b9a:	79fb      	ldrb	r3, [r7, #7]
 8000b9c:	4313      	orrs	r3, r2
 8000b9e:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteReg(nRF24_REG_RF_SETUP, reg);
 8000ba0:	7bfb      	ldrb	r3, [r7, #15]
 8000ba2:	4619      	mov	r1, r3
 8000ba4:	2006      	movs	r0, #6
 8000ba6:	f7ff fe29 	bl	80007fc <nRF24_WriteReg>
}
 8000baa:	bf00      	nop
 8000bac:	3710      	adds	r7, #16
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bd80      	pop	{r7, pc}

08000bb2 <nRF24_SetDataRate>:

// Configure transceiver data rate
// input:
//   data_rate - data rate, one of nRF24_DR_xx values
void nRF24_SetDataRate(uint8_t data_rate) {
 8000bb2:	b580      	push	{r7, lr}
 8000bb4:	b084      	sub	sp, #16
 8000bb6:	af00      	add	r7, sp, #0
 8000bb8:	4603      	mov	r3, r0
 8000bba:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	// Configure RF_DR_LOW[5] and RF_DR_HIGH[3] bits of the RF_SETUP register
	reg  = nRF24_ReadReg(nRF24_REG_RF_SETUP);
 8000bbc:	2006      	movs	r0, #6
 8000bbe:	f7ff fe03 	bl	80007c8 <nRF24_ReadReg>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	73fb      	strb	r3, [r7, #15]
	reg &= ~nRF24_MASK_DATARATE;
 8000bc6:	7bfb      	ldrb	r3, [r7, #15]
 8000bc8:	f023 0328 	bic.w	r3, r3, #40	@ 0x28
 8000bcc:	73fb      	strb	r3, [r7, #15]
	reg |= data_rate;
 8000bce:	7bfa      	ldrb	r2, [r7, #15]
 8000bd0:	79fb      	ldrb	r3, [r7, #7]
 8000bd2:	4313      	orrs	r3, r2
 8000bd4:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteReg(nRF24_REG_RF_SETUP, reg);
 8000bd6:	7bfb      	ldrb	r3, [r7, #15]
 8000bd8:	4619      	mov	r1, r3
 8000bda:	2006      	movs	r0, #6
 8000bdc:	f7ff fe0e 	bl	80007fc <nRF24_WriteReg>
}
 8000be0:	bf00      	nop
 8000be2:	3710      	adds	r7, #16
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bd80      	pop	{r7, pc}

08000be8 <nRF24_SetRXPipe>:
// Configure a specified RX pipe
// input:
//   pipe - number of the RX pipe, value from 0 to 5
//   aa_state - state of auto acknowledgment, one of nRF24_AA_xx values
//   payload_len - payload length in bytes
void nRF24_SetRXPipe(uint8_t pipe, uint8_t aa_state, uint8_t payload_len) {
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b084      	sub	sp, #16
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	4603      	mov	r3, r0
 8000bf0:	71fb      	strb	r3, [r7, #7]
 8000bf2:	460b      	mov	r3, r1
 8000bf4:	71bb      	strb	r3, [r7, #6]
 8000bf6:	4613      	mov	r3, r2
 8000bf8:	717b      	strb	r3, [r7, #5]
	uint8_t reg;

	// Enable the specified pipe (EN_RXADDR register)
	reg = (nRF24_ReadReg(nRF24_REG_EN_RXADDR) | (1 << pipe)) & nRF24_MASK_EN_RX;
 8000bfa:	2002      	movs	r0, #2
 8000bfc:	f7ff fde4 	bl	80007c8 <nRF24_ReadReg>
 8000c00:	4603      	mov	r3, r0
 8000c02:	b25a      	sxtb	r2, r3
 8000c04:	79fb      	ldrb	r3, [r7, #7]
 8000c06:	2101      	movs	r1, #1
 8000c08:	fa01 f303 	lsl.w	r3, r1, r3
 8000c0c:	b25b      	sxtb	r3, r3
 8000c0e:	4313      	orrs	r3, r2
 8000c10:	b25b      	sxtb	r3, r3
 8000c12:	b2db      	uxtb	r3, r3
 8000c14:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000c18:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteReg(nRF24_REG_EN_RXADDR, reg);
 8000c1a:	7bfb      	ldrb	r3, [r7, #15]
 8000c1c:	4619      	mov	r1, r3
 8000c1e:	2002      	movs	r0, #2
 8000c20:	f7ff fdec 	bl	80007fc <nRF24_WriteReg>

	// Set RX payload length (RX_PW_Px register)
	nRF24_WriteReg(nRF24_RX_PW_PIPE[pipe], payload_len & nRF24_MASK_RX_PW);
 8000c24:	79fb      	ldrb	r3, [r7, #7]
 8000c26:	4a19      	ldr	r2, [pc, #100]	@ (8000c8c <nRF24_SetRXPipe+0xa4>)
 8000c28:	5cd2      	ldrb	r2, [r2, r3]
 8000c2a:	797b      	ldrb	r3, [r7, #5]
 8000c2c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000c30:	b2db      	uxtb	r3, r3
 8000c32:	4619      	mov	r1, r3
 8000c34:	4610      	mov	r0, r2
 8000c36:	f7ff fde1 	bl	80007fc <nRF24_WriteReg>

	// Set auto acknowledgment for a specified pipe (EN_AA register)
	reg = nRF24_ReadReg(nRF24_REG_EN_AA);
 8000c3a:	2001      	movs	r0, #1
 8000c3c:	f7ff fdc4 	bl	80007c8 <nRF24_ReadReg>
 8000c40:	4603      	mov	r3, r0
 8000c42:	73fb      	strb	r3, [r7, #15]
	if (aa_state == nRF24_AA_ON) {
 8000c44:	79bb      	ldrb	r3, [r7, #6]
 8000c46:	2b01      	cmp	r3, #1
 8000c48:	d10a      	bne.n	8000c60 <nRF24_SetRXPipe+0x78>
		reg |=  (1 << pipe);
 8000c4a:	79fb      	ldrb	r3, [r7, #7]
 8000c4c:	2201      	movs	r2, #1
 8000c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c52:	b25a      	sxtb	r2, r3
 8000c54:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c58:	4313      	orrs	r3, r2
 8000c5a:	b25b      	sxtb	r3, r3
 8000c5c:	73fb      	strb	r3, [r7, #15]
 8000c5e:	e00b      	b.n	8000c78 <nRF24_SetRXPipe+0x90>
	} else {
		reg &= ~(1 << pipe);
 8000c60:	79fb      	ldrb	r3, [r7, #7]
 8000c62:	2201      	movs	r2, #1
 8000c64:	fa02 f303 	lsl.w	r3, r2, r3
 8000c68:	b25b      	sxtb	r3, r3
 8000c6a:	43db      	mvns	r3, r3
 8000c6c:	b25a      	sxtb	r2, r3
 8000c6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c72:	4013      	ands	r3, r2
 8000c74:	b25b      	sxtb	r3, r3
 8000c76:	73fb      	strb	r3, [r7, #15]
	}
	nRF24_WriteReg(nRF24_REG_EN_AA, reg);
 8000c78:	7bfb      	ldrb	r3, [r7, #15]
 8000c7a:	4619      	mov	r1, r3
 8000c7c:	2001      	movs	r0, #1
 8000c7e:	f7ff fdbd 	bl	80007fc <nRF24_WriteReg>
}
 8000c82:	bf00      	nop
 8000c84:	3710      	adds	r7, #16
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	bf00      	nop
 8000c8c:	08003d5c 	.word	0x08003d5c

08000c90 <nRF24_GetStatus_RXFIFO>:
	return (nRF24_ReadReg(nRF24_REG_STATUS) & nRF24_MASK_STATUS_IRQ);
}

// Get status of the RX FIFO
// return: one of the nRF24_STATUS_RXFIFO_xx values
uint8_t nRF24_GetStatus_RXFIFO(void) {
 8000c90:	b580      	push	{r7, lr}
 8000c92:	af00      	add	r7, sp, #0
	return (nRF24_ReadReg(nRF24_REG_FIFO_STATUS) & nRF24_MASK_RXFIFO);
 8000c94:	2017      	movs	r0, #23
 8000c96:	f7ff fd97 	bl	80007c8 <nRF24_ReadReg>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	f003 0303 	and.w	r3, r3, #3
 8000ca0:	b2db      	uxtb	r3, r3
}
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	bd80      	pop	{r7, pc}

08000ca6 <nRF24_FlushRX>:
void nRF24_FlushTX(void) {
	nRF24_WriteReg(nRF24_CMD_FLUSH_TX, nRF24_CMD_NOP);
}

// Flush the RX FIFO
void nRF24_FlushRX(void) {
 8000ca6:	b580      	push	{r7, lr}
 8000ca8:	af00      	add	r7, sp, #0
	nRF24_WriteReg(nRF24_CMD_FLUSH_RX, nRF24_CMD_NOP);
 8000caa:	21ff      	movs	r1, #255	@ 0xff
 8000cac:	20e2      	movs	r0, #226	@ 0xe2
 8000cae:	f7ff fda5 	bl	80007fc <nRF24_WriteReg>
}
 8000cb2:	bf00      	nop
 8000cb4:	bd80      	pop	{r7, pc}

08000cb6 <nRF24_ClearIRQFlags>:

// Clear any pending IRQ flags
void nRF24_ClearIRQFlags(void) {
 8000cb6:	b580      	push	{r7, lr}
 8000cb8:	b082      	sub	sp, #8
 8000cba:	af00      	add	r7, sp, #0
	uint8_t reg;

	// Clear RX_DR, TX_DS and MAX_RT bits of the STATUS register
	reg  = nRF24_ReadReg(nRF24_REG_STATUS);
 8000cbc:	2007      	movs	r0, #7
 8000cbe:	f7ff fd83 	bl	80007c8 <nRF24_ReadReg>
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	71fb      	strb	r3, [r7, #7]
	reg |= nRF24_MASK_STATUS_IRQ;
 8000cc6:	79fb      	ldrb	r3, [r7, #7]
 8000cc8:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
 8000ccc:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteReg(nRF24_REG_STATUS, reg);
 8000cce:	79fb      	ldrb	r3, [r7, #7]
 8000cd0:	4619      	mov	r1, r3
 8000cd2:	2007      	movs	r0, #7
 8000cd4:	f7ff fd92 	bl	80007fc <nRF24_WriteReg>
}
 8000cd8:	bf00      	nop
 8000cda:	3708      	adds	r7, #8
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	bd80      	pop	{r7, pc}

08000ce0 <nRF24_GetRxDplPayloadWidth>:
//   length - payload length in bytes
void nRF24_WritePayload(uint8_t *pBuf, uint8_t length) {
	nRF24_WriteMBReg(nRF24_CMD_W_TX_PAYLOAD, pBuf, length);
}

static uint8_t nRF24_GetRxDplPayloadWidth() {
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b082      	sub	sp, #8
 8000ce4:	af00      	add	r7, sp, #0
	uint8_t value;

	nRF24_CSN_L();
 8000ce6:	f7ff fd3d 	bl	8000764 <nRF24_CSN_L>
	nRF24_LL_RW(nRF24_CMD_R_RX_PL_WID);
 8000cea:	2060      	movs	r0, #96	@ 0x60
 8000cec:	f7ff fd50 	bl	8000790 <nRF24_LL_RW>
	value = nRF24_LL_RW(nRF24_CMD_NOP);
 8000cf0:	20ff      	movs	r0, #255	@ 0xff
 8000cf2:	f7ff fd4d 	bl	8000790 <nRF24_LL_RW>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	71fb      	strb	r3, [r7, #7]
	nRF24_CSN_H();
 8000cfa:	f7ff fd3e 	bl	800077a <nRF24_CSN_H>

	return value;
 8000cfe:	79fb      	ldrb	r3, [r7, #7]

}
 8000d00:	4618      	mov	r0, r3
 8000d02:	3708      	adds	r7, #8
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bd80      	pop	{r7, pc}

08000d08 <nRF24_ReadPayloadGeneric>:

static nRF24_RXResult nRF24_ReadPayloadGeneric(uint8_t *pBuf, uint8_t *length, uint8_t dpl) {
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b086      	sub	sp, #24
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	60f8      	str	r0, [r7, #12]
 8000d10:	60b9      	str	r1, [r7, #8]
 8000d12:	4613      	mov	r3, r2
 8000d14:	71fb      	strb	r3, [r7, #7]
	uint8_t pipe;

	// Extract a payload pipe number from the STATUS register
	pipe = (nRF24_ReadReg(nRF24_REG_STATUS) & nRF24_MASK_RX_P_NO) >> 1;
 8000d16:	2007      	movs	r0, #7
 8000d18:	f7ff fd56 	bl	80007c8 <nRF24_ReadReg>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	105b      	asrs	r3, r3, #1
 8000d20:	b2db      	uxtb	r3, r3
 8000d22:	f003 0307 	and.w	r3, r3, #7
 8000d26:	75fb      	strb	r3, [r7, #23]

	// RX FIFO empty?
	if (pipe < 6) {
 8000d28:	7dfb      	ldrb	r3, [r7, #23]
 8000d2a:	2b05      	cmp	r3, #5
 8000d2c:	d829      	bhi.n	8000d82 <nRF24_ReadPayloadGeneric+0x7a>
		// Get payload length
		if(dpl) {
 8000d2e:	79fb      	ldrb	r3, [r7, #7]
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d00f      	beq.n	8000d54 <nRF24_ReadPayloadGeneric+0x4c>
			*length = nRF24_GetRxDplPayloadWidth();
 8000d34:	f7ff ffd4 	bl	8000ce0 <nRF24_GetRxDplPayloadWidth>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	461a      	mov	r2, r3
 8000d3c:	68bb      	ldr	r3, [r7, #8]
 8000d3e:	701a      	strb	r2, [r3, #0]
			if(*length>32) { //broken packet
 8000d40:	68bb      	ldr	r3, [r7, #8]
 8000d42:	781b      	ldrb	r3, [r3, #0]
 8000d44:	2b20      	cmp	r3, #32
 8000d46:	d90f      	bls.n	8000d68 <nRF24_ReadPayloadGeneric+0x60>
				*length = 0;
 8000d48:	68bb      	ldr	r3, [r7, #8]
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	701a      	strb	r2, [r3, #0]
				nRF24_FlushRX();
 8000d4e:	f7ff ffaa 	bl	8000ca6 <nRF24_FlushRX>
 8000d52:	e009      	b.n	8000d68 <nRF24_ReadPayloadGeneric+0x60>
			}
		} else {
			*length = nRF24_ReadReg(nRF24_RX_PW_PIPE[pipe]);
 8000d54:	7dfb      	ldrb	r3, [r7, #23]
 8000d56:	4a0f      	ldr	r2, [pc, #60]	@ (8000d94 <nRF24_ReadPayloadGeneric+0x8c>)
 8000d58:	5cd3      	ldrb	r3, [r2, r3]
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	f7ff fd34 	bl	80007c8 <nRF24_ReadReg>
 8000d60:	4603      	mov	r3, r0
 8000d62:	461a      	mov	r2, r3
 8000d64:	68bb      	ldr	r3, [r7, #8]
 8000d66:	701a      	strb	r2, [r3, #0]
		}

		// Read a payload from the RX FIFO
		if (*length) {
 8000d68:	68bb      	ldr	r3, [r7, #8]
 8000d6a:	781b      	ldrb	r3, [r3, #0]
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d006      	beq.n	8000d7e <nRF24_ReadPayloadGeneric+0x76>
			nRF24_ReadMBReg(nRF24_CMD_R_RX_PAYLOAD, pBuf, *length);
 8000d70:	68bb      	ldr	r3, [r7, #8]
 8000d72:	781b      	ldrb	r3, [r3, #0]
 8000d74:	461a      	mov	r2, r3
 8000d76:	68f9      	ldr	r1, [r7, #12]
 8000d78:	2061      	movs	r0, #97	@ 0x61
 8000d7a:	f7ff fd77 	bl	800086c <nRF24_ReadMBReg>
		}

		return ((nRF24_RXResult)pipe);
 8000d7e:	7dfb      	ldrb	r3, [r7, #23]
 8000d80:	e003      	b.n	8000d8a <nRF24_ReadPayloadGeneric+0x82>
	}

	// The RX FIFO is empty
	*length = 0;
 8000d82:	68bb      	ldr	r3, [r7, #8]
 8000d84:	2200      	movs	r2, #0
 8000d86:	701a      	strb	r2, [r3, #0]

	return nRF24_RX_EMPTY;
 8000d88:	23ff      	movs	r3, #255	@ 0xff
}
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	3718      	adds	r7, #24
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bd80      	pop	{r7, pc}
 8000d92:	bf00      	nop
 8000d94:	08003d5c 	.word	0x08003d5c

08000d98 <nRF24_ReadPayload>:
//   pBuf - pointer to the buffer to store a payload data
//   length - pointer to variable to store a payload length
// return: one of nRF24_RX_xx values
//   nRF24_RX_PIPEX - packet has been received from the pipe number X
//   nRF24_RX_EMPTY - the RX FIFO is empty
nRF24_RXResult nRF24_ReadPayload(uint8_t *pBuf, uint8_t *length) {
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b082      	sub	sp, #8
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
 8000da0:	6039      	str	r1, [r7, #0]
	return nRF24_ReadPayloadGeneric(pBuf, length,0);
 8000da2:	2200      	movs	r2, #0
 8000da4:	6839      	ldr	r1, [r7, #0]
 8000da6:	6878      	ldr	r0, [r7, #4]
 8000da8:	f7ff ffae 	bl	8000d08 <nRF24_ReadPayloadGeneric>
 8000dac:	4603      	mov	r3, r0
}
 8000dae:	4618      	mov	r0, r3
 8000db0:	3708      	adds	r7, #8
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}
	...

08000db8 <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8000dbc:	4b1b      	ldr	r3, [pc, #108]	@ (8000e2c <MX_SPI3_Init+0x74>)
 8000dbe:	4a1c      	ldr	r2, [pc, #112]	@ (8000e30 <MX_SPI3_Init+0x78>)
 8000dc0:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000dc2:	4b1a      	ldr	r3, [pc, #104]	@ (8000e2c <MX_SPI3_Init+0x74>)
 8000dc4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000dc8:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000dca:	4b18      	ldr	r3, [pc, #96]	@ (8000e2c <MX_SPI3_Init+0x74>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000dd0:	4b16      	ldr	r3, [pc, #88]	@ (8000e2c <MX_SPI3_Init+0x74>)
 8000dd2:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8000dd6:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000dd8:	4b14      	ldr	r3, [pc, #80]	@ (8000e2c <MX_SPI3_Init+0x74>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000dde:	4b13      	ldr	r3, [pc, #76]	@ (8000e2c <MX_SPI3_Init+0x74>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000de4:	4b11      	ldr	r3, [pc, #68]	@ (8000e2c <MX_SPI3_Init+0x74>)
 8000de6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000dea:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000dec:	4b0f      	ldr	r3, [pc, #60]	@ (8000e2c <MX_SPI3_Init+0x74>)
 8000dee:	2218      	movs	r2, #24
 8000df0:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000df2:	4b0e      	ldr	r3, [pc, #56]	@ (8000e2c <MX_SPI3_Init+0x74>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000df8:	4b0c      	ldr	r3, [pc, #48]	@ (8000e2c <MX_SPI3_Init+0x74>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000dfe:	4b0b      	ldr	r3, [pc, #44]	@ (8000e2c <MX_SPI3_Init+0x74>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000e04:	4b09      	ldr	r3, [pc, #36]	@ (8000e2c <MX_SPI3_Init+0x74>)
 8000e06:	2207      	movs	r2, #7
 8000e08:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000e0a:	4b08      	ldr	r3, [pc, #32]	@ (8000e2c <MX_SPI3_Init+0x74>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000e10:	4b06      	ldr	r3, [pc, #24]	@ (8000e2c <MX_SPI3_Init+0x74>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000e16:	4805      	ldr	r0, [pc, #20]	@ (8000e2c <MX_SPI3_Init+0x74>)
 8000e18:	f001 fe1e 	bl	8002a58 <HAL_SPI_Init>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d001      	beq.n	8000e26 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8000e22:	f7ff fc99 	bl	8000758 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000e26:	bf00      	nop
 8000e28:	bd80      	pop	{r7, pc}
 8000e2a:	bf00      	nop
 8000e2c:	20000054 	.word	0x20000054
 8000e30:	40003c00 	.word	0x40003c00

08000e34 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b08a      	sub	sp, #40	@ 0x28
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e3c:	f107 0314 	add.w	r3, r7, #20
 8000e40:	2200      	movs	r2, #0
 8000e42:	601a      	str	r2, [r3, #0]
 8000e44:	605a      	str	r2, [r3, #4]
 8000e46:	609a      	str	r2, [r3, #8]
 8000e48:	60da      	str	r2, [r3, #12]
 8000e4a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	4a17      	ldr	r2, [pc, #92]	@ (8000eb0 <HAL_SPI_MspInit+0x7c>)
 8000e52:	4293      	cmp	r3, r2
 8000e54:	d127      	bne.n	8000ea6 <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000e56:	4b17      	ldr	r3, [pc, #92]	@ (8000eb4 <HAL_SPI_MspInit+0x80>)
 8000e58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e5a:	4a16      	ldr	r2, [pc, #88]	@ (8000eb4 <HAL_SPI_MspInit+0x80>)
 8000e5c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000e60:	6593      	str	r3, [r2, #88]	@ 0x58
 8000e62:	4b14      	ldr	r3, [pc, #80]	@ (8000eb4 <HAL_SPI_MspInit+0x80>)
 8000e64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e66:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000e6a:	613b      	str	r3, [r7, #16]
 8000e6c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e6e:	4b11      	ldr	r3, [pc, #68]	@ (8000eb4 <HAL_SPI_MspInit+0x80>)
 8000e70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e72:	4a10      	ldr	r2, [pc, #64]	@ (8000eb4 <HAL_SPI_MspInit+0x80>)
 8000e74:	f043 0302 	orr.w	r3, r3, #2
 8000e78:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e7a:	4b0e      	ldr	r3, [pc, #56]	@ (8000eb4 <HAL_SPI_MspInit+0x80>)
 8000e7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e7e:	f003 0302 	and.w	r3, r3, #2
 8000e82:	60fb      	str	r3, [r7, #12]
 8000e84:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PB3 (JTDO-TRACESWO)     ------> SPI3_SCK
    PB4 (NJTRST)     ------> SPI3_MISO
    PB5     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = RF_SCK_Pin|RF_MISO_Pin|RF_MOSI_Pin;
 8000e86:	2338      	movs	r3, #56	@ 0x38
 8000e88:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e8a:	2302      	movs	r3, #2
 8000e8c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e92:	2303      	movs	r3, #3
 8000e94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000e96:	2306      	movs	r3, #6
 8000e98:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e9a:	f107 0314 	add.w	r3, r7, #20
 8000e9e:	4619      	mov	r1, r3
 8000ea0:	4805      	ldr	r0, [pc, #20]	@ (8000eb8 <HAL_SPI_MspInit+0x84>)
 8000ea2:	f000 fab3 	bl	800140c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8000ea6:	bf00      	nop
 8000ea8:	3728      	adds	r7, #40	@ 0x28
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	bf00      	nop
 8000eb0:	40003c00 	.word	0x40003c00
 8000eb4:	40021000 	.word	0x40021000
 8000eb8:	48000400 	.word	0x48000400

08000ebc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	b083      	sub	sp, #12
 8000ec0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ec2:	4b0f      	ldr	r3, [pc, #60]	@ (8000f00 <HAL_MspInit+0x44>)
 8000ec4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000ec6:	4a0e      	ldr	r2, [pc, #56]	@ (8000f00 <HAL_MspInit+0x44>)
 8000ec8:	f043 0301 	orr.w	r3, r3, #1
 8000ecc:	6613      	str	r3, [r2, #96]	@ 0x60
 8000ece:	4b0c      	ldr	r3, [pc, #48]	@ (8000f00 <HAL_MspInit+0x44>)
 8000ed0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000ed2:	f003 0301 	and.w	r3, r3, #1
 8000ed6:	607b      	str	r3, [r7, #4]
 8000ed8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000eda:	4b09      	ldr	r3, [pc, #36]	@ (8000f00 <HAL_MspInit+0x44>)
 8000edc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ede:	4a08      	ldr	r2, [pc, #32]	@ (8000f00 <HAL_MspInit+0x44>)
 8000ee0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ee4:	6593      	str	r3, [r2, #88]	@ 0x58
 8000ee6:	4b06      	ldr	r3, [pc, #24]	@ (8000f00 <HAL_MspInit+0x44>)
 8000ee8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000eea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000eee:	603b      	str	r3, [r7, #0]
 8000ef0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ef2:	bf00      	nop
 8000ef4:	370c      	adds	r7, #12
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efc:	4770      	bx	lr
 8000efe:	bf00      	nop
 8000f00:	40021000 	.word	0x40021000

08000f04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f04:	b480      	push	{r7}
 8000f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f08:	bf00      	nop
 8000f0a:	e7fd      	b.n	8000f08 <NMI_Handler+0x4>

08000f0c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f10:	bf00      	nop
 8000f12:	e7fd      	b.n	8000f10 <HardFault_Handler+0x4>

08000f14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f14:	b480      	push	{r7}
 8000f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f18:	bf00      	nop
 8000f1a:	e7fd      	b.n	8000f18 <MemManage_Handler+0x4>

08000f1c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f20:	bf00      	nop
 8000f22:	e7fd      	b.n	8000f20 <BusFault_Handler+0x4>

08000f24 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f24:	b480      	push	{r7}
 8000f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f28:	bf00      	nop
 8000f2a:	e7fd      	b.n	8000f28 <UsageFault_Handler+0x4>

08000f2c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f30:	bf00      	nop
 8000f32:	46bd      	mov	sp, r7
 8000f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f38:	4770      	bx	lr

08000f3a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f3a:	b480      	push	{r7}
 8000f3c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f3e:	bf00      	nop
 8000f40:	46bd      	mov	sp, r7
 8000f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f46:	4770      	bx	lr

08000f48 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f4c:	bf00      	nop
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f54:	4770      	bx	lr

08000f56 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f56:	b580      	push	{r7, lr}
 8000f58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f5a:	f000 f92d 	bl	80011b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f5e:	bf00      	nop
 8000f60:	bd80      	pop	{r7, pc}
	...

08000f64 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000f64:	b480      	push	{r7}
 8000f66:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000f68:	4b06      	ldr	r3, [pc, #24]	@ (8000f84 <SystemInit+0x20>)
 8000f6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000f6e:	4a05      	ldr	r2, [pc, #20]	@ (8000f84 <SystemInit+0x20>)
 8000f70:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000f74:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000f78:	bf00      	nop
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f80:	4770      	bx	lr
 8000f82:	bf00      	nop
 8000f84:	e000ed00 	.word	0xe000ed00

08000f88 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000f8c:	4b14      	ldr	r3, [pc, #80]	@ (8000fe0 <MX_USART2_UART_Init+0x58>)
 8000f8e:	4a15      	ldr	r2, [pc, #84]	@ (8000fe4 <MX_USART2_UART_Init+0x5c>)
 8000f90:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000f92:	4b13      	ldr	r3, [pc, #76]	@ (8000fe0 <MX_USART2_UART_Init+0x58>)
 8000f94:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000f98:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000f9a:	4b11      	ldr	r3, [pc, #68]	@ (8000fe0 <MX_USART2_UART_Init+0x58>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000fa0:	4b0f      	ldr	r3, [pc, #60]	@ (8000fe0 <MX_USART2_UART_Init+0x58>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000fa6:	4b0e      	ldr	r3, [pc, #56]	@ (8000fe0 <MX_USART2_UART_Init+0x58>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000fac:	4b0c      	ldr	r3, [pc, #48]	@ (8000fe0 <MX_USART2_UART_Init+0x58>)
 8000fae:	220c      	movs	r2, #12
 8000fb0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fb2:	4b0b      	ldr	r3, [pc, #44]	@ (8000fe0 <MX_USART2_UART_Init+0x58>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fb8:	4b09      	ldr	r3, [pc, #36]	@ (8000fe0 <MX_USART2_UART_Init+0x58>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000fbe:	4b08      	ldr	r3, [pc, #32]	@ (8000fe0 <MX_USART2_UART_Init+0x58>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000fc4:	4b06      	ldr	r3, [pc, #24]	@ (8000fe0 <MX_USART2_UART_Init+0x58>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000fca:	4805      	ldr	r0, [pc, #20]	@ (8000fe0 <MX_USART2_UART_Init+0x58>)
 8000fcc:	f002 f96e 	bl	80032ac <HAL_UART_Init>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d001      	beq.n	8000fda <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000fd6:	f7ff fbbf 	bl	8000758 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000fda:	bf00      	nop
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	200000b8 	.word	0x200000b8
 8000fe4:	40004400 	.word	0x40004400

08000fe8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b09e      	sub	sp, #120	@ 0x78
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ff0:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	601a      	str	r2, [r3, #0]
 8000ff8:	605a      	str	r2, [r3, #4]
 8000ffa:	609a      	str	r2, [r3, #8]
 8000ffc:	60da      	str	r2, [r3, #12]
 8000ffe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001000:	f107 0310 	add.w	r3, r7, #16
 8001004:	2254      	movs	r2, #84	@ 0x54
 8001006:	2100      	movs	r1, #0
 8001008:	4618      	mov	r0, r3
 800100a:	f002 fe68 	bl	8003cde <memset>
  if(uartHandle->Instance==USART2)
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	4a28      	ldr	r2, [pc, #160]	@ (80010b4 <HAL_UART_MspInit+0xcc>)
 8001014:	4293      	cmp	r3, r2
 8001016:	d148      	bne.n	80010aa <HAL_UART_MspInit+0xc2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001018:	2302      	movs	r3, #2
 800101a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800101c:	2300      	movs	r3, #0
 800101e:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001020:	f107 0310 	add.w	r3, r7, #16
 8001024:	4618      	mov	r0, r3
 8001026:	f001 fa1f 	bl	8002468 <HAL_RCCEx_PeriphCLKConfig>
 800102a:	4603      	mov	r3, r0
 800102c:	2b00      	cmp	r3, #0
 800102e:	d001      	beq.n	8001034 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001030:	f7ff fb92 	bl	8000758 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001034:	4b20      	ldr	r3, [pc, #128]	@ (80010b8 <HAL_UART_MspInit+0xd0>)
 8001036:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001038:	4a1f      	ldr	r2, [pc, #124]	@ (80010b8 <HAL_UART_MspInit+0xd0>)
 800103a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800103e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001040:	4b1d      	ldr	r3, [pc, #116]	@ (80010b8 <HAL_UART_MspInit+0xd0>)
 8001042:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001044:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001048:	60fb      	str	r3, [r7, #12]
 800104a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800104c:	4b1a      	ldr	r3, [pc, #104]	@ (80010b8 <HAL_UART_MspInit+0xd0>)
 800104e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001050:	4a19      	ldr	r2, [pc, #100]	@ (80010b8 <HAL_UART_MspInit+0xd0>)
 8001052:	f043 0301 	orr.w	r3, r3, #1
 8001056:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001058:	4b17      	ldr	r3, [pc, #92]	@ (80010b8 <HAL_UART_MspInit+0xd0>)
 800105a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800105c:	f003 0301 	and.w	r3, r3, #1
 8001060:	60bb      	str	r3, [r7, #8]
 8001062:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8001064:	2304      	movs	r3, #4
 8001066:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001068:	2302      	movs	r3, #2
 800106a:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800106c:	2300      	movs	r3, #0
 800106e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001070:	2303      	movs	r3, #3
 8001072:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001074:	2307      	movs	r3, #7
 8001076:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8001078:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800107c:	4619      	mov	r1, r3
 800107e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001082:	f000 f9c3 	bl	800140c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8001086:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800108a:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800108c:	2302      	movs	r3, #2
 800108e:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001090:	2300      	movs	r3, #0
 8001092:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001094:	2303      	movs	r3, #3
 8001096:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8001098:	2303      	movs	r3, #3
 800109a:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 800109c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80010a0:	4619      	mov	r1, r3
 80010a2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80010a6:	f000 f9b1 	bl	800140c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80010aa:	bf00      	nop
 80010ac:	3778      	adds	r7, #120	@ 0x78
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	40004400 	.word	0x40004400
 80010b8:	40021000 	.word	0x40021000

080010bc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80010bc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80010f4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80010c0:	f7ff ff50 	bl	8000f64 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80010c4:	480c      	ldr	r0, [pc, #48]	@ (80010f8 <LoopForever+0x6>)
  ldr r1, =_edata
 80010c6:	490d      	ldr	r1, [pc, #52]	@ (80010fc <LoopForever+0xa>)
  ldr r2, =_sidata
 80010c8:	4a0d      	ldr	r2, [pc, #52]	@ (8001100 <LoopForever+0xe>)
  movs r3, #0
 80010ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010cc:	e002      	b.n	80010d4 <LoopCopyDataInit>

080010ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010d2:	3304      	adds	r3, #4

080010d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010d8:	d3f9      	bcc.n	80010ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010da:	4a0a      	ldr	r2, [pc, #40]	@ (8001104 <LoopForever+0x12>)
  ldr r4, =_ebss
 80010dc:	4c0a      	ldr	r4, [pc, #40]	@ (8001108 <LoopForever+0x16>)
  movs r3, #0
 80010de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010e0:	e001      	b.n	80010e6 <LoopFillZerobss>

080010e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010e4:	3204      	adds	r2, #4

080010e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010e8:	d3fb      	bcc.n	80010e2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80010ea:	f002 fe01 	bl	8003cf0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80010ee:	f7ff fa4f 	bl	8000590 <main>

080010f2 <LoopForever>:

LoopForever:
    b LoopForever
 80010f2:	e7fe      	b.n	80010f2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80010f4:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80010f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010fc:	20000030 	.word	0x20000030
  ldr r2, =_sidata
 8001100:	08003dc4 	.word	0x08003dc4
  ldr r2, =_sbss
 8001104:	20000030 	.word	0x20000030
  ldr r4, =_ebss
 8001108:	20000144 	.word	0x20000144

0800110c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800110c:	e7fe      	b.n	800110c <ADC1_IRQHandler>

0800110e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800110e:	b580      	push	{r7, lr}
 8001110:	b082      	sub	sp, #8
 8001112:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001114:	2300      	movs	r3, #0
 8001116:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001118:	2003      	movs	r0, #3
 800111a:	f000 f943 	bl	80013a4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800111e:	2000      	movs	r0, #0
 8001120:	f000 f80e 	bl	8001140 <HAL_InitTick>
 8001124:	4603      	mov	r3, r0
 8001126:	2b00      	cmp	r3, #0
 8001128:	d002      	beq.n	8001130 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800112a:	2301      	movs	r3, #1
 800112c:	71fb      	strb	r3, [r7, #7]
 800112e:	e001      	b.n	8001134 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001130:	f7ff fec4 	bl	8000ebc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001134:	79fb      	ldrb	r3, [r7, #7]
}
 8001136:	4618      	mov	r0, r3
 8001138:	3708      	adds	r7, #8
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}
	...

08001140 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b084      	sub	sp, #16
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001148:	2300      	movs	r3, #0
 800114a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800114c:	4b17      	ldr	r3, [pc, #92]	@ (80011ac <HAL_InitTick+0x6c>)
 800114e:	781b      	ldrb	r3, [r3, #0]
 8001150:	2b00      	cmp	r3, #0
 8001152:	d023      	beq.n	800119c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001154:	4b16      	ldr	r3, [pc, #88]	@ (80011b0 <HAL_InitTick+0x70>)
 8001156:	681a      	ldr	r2, [r3, #0]
 8001158:	4b14      	ldr	r3, [pc, #80]	@ (80011ac <HAL_InitTick+0x6c>)
 800115a:	781b      	ldrb	r3, [r3, #0]
 800115c:	4619      	mov	r1, r3
 800115e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001162:	fbb3 f3f1 	udiv	r3, r3, r1
 8001166:	fbb2 f3f3 	udiv	r3, r2, r3
 800116a:	4618      	mov	r0, r3
 800116c:	f000 f941 	bl	80013f2 <HAL_SYSTICK_Config>
 8001170:	4603      	mov	r3, r0
 8001172:	2b00      	cmp	r3, #0
 8001174:	d10f      	bne.n	8001196 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	2b0f      	cmp	r3, #15
 800117a:	d809      	bhi.n	8001190 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800117c:	2200      	movs	r2, #0
 800117e:	6879      	ldr	r1, [r7, #4]
 8001180:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001184:	f000 f919 	bl	80013ba <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001188:	4a0a      	ldr	r2, [pc, #40]	@ (80011b4 <HAL_InitTick+0x74>)
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	6013      	str	r3, [r2, #0]
 800118e:	e007      	b.n	80011a0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001190:	2301      	movs	r3, #1
 8001192:	73fb      	strb	r3, [r7, #15]
 8001194:	e004      	b.n	80011a0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001196:	2301      	movs	r3, #1
 8001198:	73fb      	strb	r3, [r7, #15]
 800119a:	e001      	b.n	80011a0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800119c:	2301      	movs	r3, #1
 800119e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80011a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80011a2:	4618      	mov	r0, r3
 80011a4:	3710      	adds	r7, #16
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	bf00      	nop
 80011ac:	2000002c 	.word	0x2000002c
 80011b0:	20000024 	.word	0x20000024
 80011b4:	20000028 	.word	0x20000028

080011b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011b8:	b480      	push	{r7}
 80011ba:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80011bc:	4b06      	ldr	r3, [pc, #24]	@ (80011d8 <HAL_IncTick+0x20>)
 80011be:	781b      	ldrb	r3, [r3, #0]
 80011c0:	461a      	mov	r2, r3
 80011c2:	4b06      	ldr	r3, [pc, #24]	@ (80011dc <HAL_IncTick+0x24>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	4413      	add	r3, r2
 80011c8:	4a04      	ldr	r2, [pc, #16]	@ (80011dc <HAL_IncTick+0x24>)
 80011ca:	6013      	str	r3, [r2, #0]
}
 80011cc:	bf00      	nop
 80011ce:	46bd      	mov	sp, r7
 80011d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d4:	4770      	bx	lr
 80011d6:	bf00      	nop
 80011d8:	2000002c 	.word	0x2000002c
 80011dc:	20000140 	.word	0x20000140

080011e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011e0:	b480      	push	{r7}
 80011e2:	af00      	add	r7, sp, #0
  return uwTick;
 80011e4:	4b03      	ldr	r3, [pc, #12]	@ (80011f4 <HAL_GetTick+0x14>)
 80011e6:	681b      	ldr	r3, [r3, #0]
}
 80011e8:	4618      	mov	r0, r3
 80011ea:	46bd      	mov	sp, r7
 80011ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f0:	4770      	bx	lr
 80011f2:	bf00      	nop
 80011f4:	20000140 	.word	0x20000140

080011f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b084      	sub	sp, #16
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001200:	f7ff ffee 	bl	80011e0 <HAL_GetTick>
 8001204:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001210:	d005      	beq.n	800121e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001212:	4b0a      	ldr	r3, [pc, #40]	@ (800123c <HAL_Delay+0x44>)
 8001214:	781b      	ldrb	r3, [r3, #0]
 8001216:	461a      	mov	r2, r3
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	4413      	add	r3, r2
 800121c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800121e:	bf00      	nop
 8001220:	f7ff ffde 	bl	80011e0 <HAL_GetTick>
 8001224:	4602      	mov	r2, r0
 8001226:	68bb      	ldr	r3, [r7, #8]
 8001228:	1ad3      	subs	r3, r2, r3
 800122a:	68fa      	ldr	r2, [r7, #12]
 800122c:	429a      	cmp	r2, r3
 800122e:	d8f7      	bhi.n	8001220 <HAL_Delay+0x28>
  {
  }
}
 8001230:	bf00      	nop
 8001232:	bf00      	nop
 8001234:	3710      	adds	r7, #16
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}
 800123a:	bf00      	nop
 800123c:	2000002c 	.word	0x2000002c

08001240 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001240:	b480      	push	{r7}
 8001242:	b085      	sub	sp, #20
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	f003 0307 	and.w	r3, r3, #7
 800124e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001250:	4b0c      	ldr	r3, [pc, #48]	@ (8001284 <__NVIC_SetPriorityGrouping+0x44>)
 8001252:	68db      	ldr	r3, [r3, #12]
 8001254:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001256:	68ba      	ldr	r2, [r7, #8]
 8001258:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800125c:	4013      	ands	r3, r2
 800125e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001264:	68bb      	ldr	r3, [r7, #8]
 8001266:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001268:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800126c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001270:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001272:	4a04      	ldr	r2, [pc, #16]	@ (8001284 <__NVIC_SetPriorityGrouping+0x44>)
 8001274:	68bb      	ldr	r3, [r7, #8]
 8001276:	60d3      	str	r3, [r2, #12]
}
 8001278:	bf00      	nop
 800127a:	3714      	adds	r7, #20
 800127c:	46bd      	mov	sp, r7
 800127e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001282:	4770      	bx	lr
 8001284:	e000ed00 	.word	0xe000ed00

08001288 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001288:	b480      	push	{r7}
 800128a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800128c:	4b04      	ldr	r3, [pc, #16]	@ (80012a0 <__NVIC_GetPriorityGrouping+0x18>)
 800128e:	68db      	ldr	r3, [r3, #12]
 8001290:	0a1b      	lsrs	r3, r3, #8
 8001292:	f003 0307 	and.w	r3, r3, #7
}
 8001296:	4618      	mov	r0, r3
 8001298:	46bd      	mov	sp, r7
 800129a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129e:	4770      	bx	lr
 80012a0:	e000ed00 	.word	0xe000ed00

080012a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012a4:	b480      	push	{r7}
 80012a6:	b083      	sub	sp, #12
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	4603      	mov	r3, r0
 80012ac:	6039      	str	r1, [r7, #0]
 80012ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	db0a      	blt.n	80012ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	b2da      	uxtb	r2, r3
 80012bc:	490c      	ldr	r1, [pc, #48]	@ (80012f0 <__NVIC_SetPriority+0x4c>)
 80012be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012c2:	0112      	lsls	r2, r2, #4
 80012c4:	b2d2      	uxtb	r2, r2
 80012c6:	440b      	add	r3, r1
 80012c8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012cc:	e00a      	b.n	80012e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012ce:	683b      	ldr	r3, [r7, #0]
 80012d0:	b2da      	uxtb	r2, r3
 80012d2:	4908      	ldr	r1, [pc, #32]	@ (80012f4 <__NVIC_SetPriority+0x50>)
 80012d4:	79fb      	ldrb	r3, [r7, #7]
 80012d6:	f003 030f 	and.w	r3, r3, #15
 80012da:	3b04      	subs	r3, #4
 80012dc:	0112      	lsls	r2, r2, #4
 80012de:	b2d2      	uxtb	r2, r2
 80012e0:	440b      	add	r3, r1
 80012e2:	761a      	strb	r2, [r3, #24]
}
 80012e4:	bf00      	nop
 80012e6:	370c      	adds	r7, #12
 80012e8:	46bd      	mov	sp, r7
 80012ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ee:	4770      	bx	lr
 80012f0:	e000e100 	.word	0xe000e100
 80012f4:	e000ed00 	.word	0xe000ed00

080012f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012f8:	b480      	push	{r7}
 80012fa:	b089      	sub	sp, #36	@ 0x24
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	60f8      	str	r0, [r7, #12]
 8001300:	60b9      	str	r1, [r7, #8]
 8001302:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	f003 0307 	and.w	r3, r3, #7
 800130a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800130c:	69fb      	ldr	r3, [r7, #28]
 800130e:	f1c3 0307 	rsb	r3, r3, #7
 8001312:	2b04      	cmp	r3, #4
 8001314:	bf28      	it	cs
 8001316:	2304      	movcs	r3, #4
 8001318:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800131a:	69fb      	ldr	r3, [r7, #28]
 800131c:	3304      	adds	r3, #4
 800131e:	2b06      	cmp	r3, #6
 8001320:	d902      	bls.n	8001328 <NVIC_EncodePriority+0x30>
 8001322:	69fb      	ldr	r3, [r7, #28]
 8001324:	3b03      	subs	r3, #3
 8001326:	e000      	b.n	800132a <NVIC_EncodePriority+0x32>
 8001328:	2300      	movs	r3, #0
 800132a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800132c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001330:	69bb      	ldr	r3, [r7, #24]
 8001332:	fa02 f303 	lsl.w	r3, r2, r3
 8001336:	43da      	mvns	r2, r3
 8001338:	68bb      	ldr	r3, [r7, #8]
 800133a:	401a      	ands	r2, r3
 800133c:	697b      	ldr	r3, [r7, #20]
 800133e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001340:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001344:	697b      	ldr	r3, [r7, #20]
 8001346:	fa01 f303 	lsl.w	r3, r1, r3
 800134a:	43d9      	mvns	r1, r3
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001350:	4313      	orrs	r3, r2
         );
}
 8001352:	4618      	mov	r0, r3
 8001354:	3724      	adds	r7, #36	@ 0x24
 8001356:	46bd      	mov	sp, r7
 8001358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135c:	4770      	bx	lr
	...

08001360 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b082      	sub	sp, #8
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	3b01      	subs	r3, #1
 800136c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001370:	d301      	bcc.n	8001376 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001372:	2301      	movs	r3, #1
 8001374:	e00f      	b.n	8001396 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001376:	4a0a      	ldr	r2, [pc, #40]	@ (80013a0 <SysTick_Config+0x40>)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	3b01      	subs	r3, #1
 800137c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800137e:	210f      	movs	r1, #15
 8001380:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001384:	f7ff ff8e 	bl	80012a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001388:	4b05      	ldr	r3, [pc, #20]	@ (80013a0 <SysTick_Config+0x40>)
 800138a:	2200      	movs	r2, #0
 800138c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800138e:	4b04      	ldr	r3, [pc, #16]	@ (80013a0 <SysTick_Config+0x40>)
 8001390:	2207      	movs	r2, #7
 8001392:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001394:	2300      	movs	r3, #0
}
 8001396:	4618      	mov	r0, r3
 8001398:	3708      	adds	r7, #8
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}
 800139e:	bf00      	nop
 80013a0:	e000e010 	.word	0xe000e010

080013a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b082      	sub	sp, #8
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013ac:	6878      	ldr	r0, [r7, #4]
 80013ae:	f7ff ff47 	bl	8001240 <__NVIC_SetPriorityGrouping>
}
 80013b2:	bf00      	nop
 80013b4:	3708      	adds	r7, #8
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}

080013ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013ba:	b580      	push	{r7, lr}
 80013bc:	b086      	sub	sp, #24
 80013be:	af00      	add	r7, sp, #0
 80013c0:	4603      	mov	r3, r0
 80013c2:	60b9      	str	r1, [r7, #8]
 80013c4:	607a      	str	r2, [r7, #4]
 80013c6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80013c8:	2300      	movs	r3, #0
 80013ca:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80013cc:	f7ff ff5c 	bl	8001288 <__NVIC_GetPriorityGrouping>
 80013d0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013d2:	687a      	ldr	r2, [r7, #4]
 80013d4:	68b9      	ldr	r1, [r7, #8]
 80013d6:	6978      	ldr	r0, [r7, #20]
 80013d8:	f7ff ff8e 	bl	80012f8 <NVIC_EncodePriority>
 80013dc:	4602      	mov	r2, r0
 80013de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013e2:	4611      	mov	r1, r2
 80013e4:	4618      	mov	r0, r3
 80013e6:	f7ff ff5d 	bl	80012a4 <__NVIC_SetPriority>
}
 80013ea:	bf00      	nop
 80013ec:	3718      	adds	r7, #24
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}

080013f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013f2:	b580      	push	{r7, lr}
 80013f4:	b082      	sub	sp, #8
 80013f6:	af00      	add	r7, sp, #0
 80013f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013fa:	6878      	ldr	r0, [r7, #4]
 80013fc:	f7ff ffb0 	bl	8001360 <SysTick_Config>
 8001400:	4603      	mov	r3, r0
}
 8001402:	4618      	mov	r0, r3
 8001404:	3708      	adds	r7, #8
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}
	...

0800140c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800140c:	b480      	push	{r7}
 800140e:	b087      	sub	sp, #28
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
 8001414:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001416:	2300      	movs	r3, #0
 8001418:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800141a:	e148      	b.n	80016ae <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	681a      	ldr	r2, [r3, #0]
 8001420:	2101      	movs	r1, #1
 8001422:	697b      	ldr	r3, [r7, #20]
 8001424:	fa01 f303 	lsl.w	r3, r1, r3
 8001428:	4013      	ands	r3, r2
 800142a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	2b00      	cmp	r3, #0
 8001430:	f000 813a 	beq.w	80016a8 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	685b      	ldr	r3, [r3, #4]
 8001438:	f003 0303 	and.w	r3, r3, #3
 800143c:	2b01      	cmp	r3, #1
 800143e:	d005      	beq.n	800144c <HAL_GPIO_Init+0x40>
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	685b      	ldr	r3, [r3, #4]
 8001444:	f003 0303 	and.w	r3, r3, #3
 8001448:	2b02      	cmp	r3, #2
 800144a:	d130      	bne.n	80014ae <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	689b      	ldr	r3, [r3, #8]
 8001450:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001452:	697b      	ldr	r3, [r7, #20]
 8001454:	005b      	lsls	r3, r3, #1
 8001456:	2203      	movs	r2, #3
 8001458:	fa02 f303 	lsl.w	r3, r2, r3
 800145c:	43db      	mvns	r3, r3
 800145e:	693a      	ldr	r2, [r7, #16]
 8001460:	4013      	ands	r3, r2
 8001462:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	68da      	ldr	r2, [r3, #12]
 8001468:	697b      	ldr	r3, [r7, #20]
 800146a:	005b      	lsls	r3, r3, #1
 800146c:	fa02 f303 	lsl.w	r3, r2, r3
 8001470:	693a      	ldr	r2, [r7, #16]
 8001472:	4313      	orrs	r3, r2
 8001474:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	693a      	ldr	r2, [r7, #16]
 800147a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	685b      	ldr	r3, [r3, #4]
 8001480:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001482:	2201      	movs	r2, #1
 8001484:	697b      	ldr	r3, [r7, #20]
 8001486:	fa02 f303 	lsl.w	r3, r2, r3
 800148a:	43db      	mvns	r3, r3
 800148c:	693a      	ldr	r2, [r7, #16]
 800148e:	4013      	ands	r3, r2
 8001490:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001492:	683b      	ldr	r3, [r7, #0]
 8001494:	685b      	ldr	r3, [r3, #4]
 8001496:	091b      	lsrs	r3, r3, #4
 8001498:	f003 0201 	and.w	r2, r3, #1
 800149c:	697b      	ldr	r3, [r7, #20]
 800149e:	fa02 f303 	lsl.w	r3, r2, r3
 80014a2:	693a      	ldr	r2, [r7, #16]
 80014a4:	4313      	orrs	r3, r2
 80014a6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	693a      	ldr	r2, [r7, #16]
 80014ac:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80014ae:	683b      	ldr	r3, [r7, #0]
 80014b0:	685b      	ldr	r3, [r3, #4]
 80014b2:	f003 0303 	and.w	r3, r3, #3
 80014b6:	2b03      	cmp	r3, #3
 80014b8:	d017      	beq.n	80014ea <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	68db      	ldr	r3, [r3, #12]
 80014be:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80014c0:	697b      	ldr	r3, [r7, #20]
 80014c2:	005b      	lsls	r3, r3, #1
 80014c4:	2203      	movs	r2, #3
 80014c6:	fa02 f303 	lsl.w	r3, r2, r3
 80014ca:	43db      	mvns	r3, r3
 80014cc:	693a      	ldr	r2, [r7, #16]
 80014ce:	4013      	ands	r3, r2
 80014d0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	689a      	ldr	r2, [r3, #8]
 80014d6:	697b      	ldr	r3, [r7, #20]
 80014d8:	005b      	lsls	r3, r3, #1
 80014da:	fa02 f303 	lsl.w	r3, r2, r3
 80014de:	693a      	ldr	r2, [r7, #16]
 80014e0:	4313      	orrs	r3, r2
 80014e2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	693a      	ldr	r2, [r7, #16]
 80014e8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	685b      	ldr	r3, [r3, #4]
 80014ee:	f003 0303 	and.w	r3, r3, #3
 80014f2:	2b02      	cmp	r3, #2
 80014f4:	d123      	bne.n	800153e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80014f6:	697b      	ldr	r3, [r7, #20]
 80014f8:	08da      	lsrs	r2, r3, #3
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	3208      	adds	r2, #8
 80014fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001502:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001504:	697b      	ldr	r3, [r7, #20]
 8001506:	f003 0307 	and.w	r3, r3, #7
 800150a:	009b      	lsls	r3, r3, #2
 800150c:	220f      	movs	r2, #15
 800150e:	fa02 f303 	lsl.w	r3, r2, r3
 8001512:	43db      	mvns	r3, r3
 8001514:	693a      	ldr	r2, [r7, #16]
 8001516:	4013      	ands	r3, r2
 8001518:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	691a      	ldr	r2, [r3, #16]
 800151e:	697b      	ldr	r3, [r7, #20]
 8001520:	f003 0307 	and.w	r3, r3, #7
 8001524:	009b      	lsls	r3, r3, #2
 8001526:	fa02 f303 	lsl.w	r3, r2, r3
 800152a:	693a      	ldr	r2, [r7, #16]
 800152c:	4313      	orrs	r3, r2
 800152e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001530:	697b      	ldr	r3, [r7, #20]
 8001532:	08da      	lsrs	r2, r3, #3
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	3208      	adds	r2, #8
 8001538:	6939      	ldr	r1, [r7, #16]
 800153a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001544:	697b      	ldr	r3, [r7, #20]
 8001546:	005b      	lsls	r3, r3, #1
 8001548:	2203      	movs	r2, #3
 800154a:	fa02 f303 	lsl.w	r3, r2, r3
 800154e:	43db      	mvns	r3, r3
 8001550:	693a      	ldr	r2, [r7, #16]
 8001552:	4013      	ands	r3, r2
 8001554:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001556:	683b      	ldr	r3, [r7, #0]
 8001558:	685b      	ldr	r3, [r3, #4]
 800155a:	f003 0203 	and.w	r2, r3, #3
 800155e:	697b      	ldr	r3, [r7, #20]
 8001560:	005b      	lsls	r3, r3, #1
 8001562:	fa02 f303 	lsl.w	r3, r2, r3
 8001566:	693a      	ldr	r2, [r7, #16]
 8001568:	4313      	orrs	r3, r2
 800156a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	693a      	ldr	r2, [r7, #16]
 8001570:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001572:	683b      	ldr	r3, [r7, #0]
 8001574:	685b      	ldr	r3, [r3, #4]
 8001576:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800157a:	2b00      	cmp	r3, #0
 800157c:	f000 8094 	beq.w	80016a8 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001580:	4b52      	ldr	r3, [pc, #328]	@ (80016cc <HAL_GPIO_Init+0x2c0>)
 8001582:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001584:	4a51      	ldr	r2, [pc, #324]	@ (80016cc <HAL_GPIO_Init+0x2c0>)
 8001586:	f043 0301 	orr.w	r3, r3, #1
 800158a:	6613      	str	r3, [r2, #96]	@ 0x60
 800158c:	4b4f      	ldr	r3, [pc, #316]	@ (80016cc <HAL_GPIO_Init+0x2c0>)
 800158e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001590:	f003 0301 	and.w	r3, r3, #1
 8001594:	60bb      	str	r3, [r7, #8]
 8001596:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001598:	4a4d      	ldr	r2, [pc, #308]	@ (80016d0 <HAL_GPIO_Init+0x2c4>)
 800159a:	697b      	ldr	r3, [r7, #20]
 800159c:	089b      	lsrs	r3, r3, #2
 800159e:	3302      	adds	r3, #2
 80015a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015a4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80015a6:	697b      	ldr	r3, [r7, #20]
 80015a8:	f003 0303 	and.w	r3, r3, #3
 80015ac:	009b      	lsls	r3, r3, #2
 80015ae:	220f      	movs	r2, #15
 80015b0:	fa02 f303 	lsl.w	r3, r2, r3
 80015b4:	43db      	mvns	r3, r3
 80015b6:	693a      	ldr	r2, [r7, #16]
 80015b8:	4013      	ands	r3, r2
 80015ba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80015c2:	d00d      	beq.n	80015e0 <HAL_GPIO_Init+0x1d4>
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	4a43      	ldr	r2, [pc, #268]	@ (80016d4 <HAL_GPIO_Init+0x2c8>)
 80015c8:	4293      	cmp	r3, r2
 80015ca:	d007      	beq.n	80015dc <HAL_GPIO_Init+0x1d0>
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	4a42      	ldr	r2, [pc, #264]	@ (80016d8 <HAL_GPIO_Init+0x2cc>)
 80015d0:	4293      	cmp	r3, r2
 80015d2:	d101      	bne.n	80015d8 <HAL_GPIO_Init+0x1cc>
 80015d4:	2302      	movs	r3, #2
 80015d6:	e004      	b.n	80015e2 <HAL_GPIO_Init+0x1d6>
 80015d8:	2307      	movs	r3, #7
 80015da:	e002      	b.n	80015e2 <HAL_GPIO_Init+0x1d6>
 80015dc:	2301      	movs	r3, #1
 80015de:	e000      	b.n	80015e2 <HAL_GPIO_Init+0x1d6>
 80015e0:	2300      	movs	r3, #0
 80015e2:	697a      	ldr	r2, [r7, #20]
 80015e4:	f002 0203 	and.w	r2, r2, #3
 80015e8:	0092      	lsls	r2, r2, #2
 80015ea:	4093      	lsls	r3, r2
 80015ec:	693a      	ldr	r2, [r7, #16]
 80015ee:	4313      	orrs	r3, r2
 80015f0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80015f2:	4937      	ldr	r1, [pc, #220]	@ (80016d0 <HAL_GPIO_Init+0x2c4>)
 80015f4:	697b      	ldr	r3, [r7, #20]
 80015f6:	089b      	lsrs	r3, r3, #2
 80015f8:	3302      	adds	r3, #2
 80015fa:	693a      	ldr	r2, [r7, #16]
 80015fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001600:	4b36      	ldr	r3, [pc, #216]	@ (80016dc <HAL_GPIO_Init+0x2d0>)
 8001602:	689b      	ldr	r3, [r3, #8]
 8001604:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	43db      	mvns	r3, r3
 800160a:	693a      	ldr	r2, [r7, #16]
 800160c:	4013      	ands	r3, r2
 800160e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	685b      	ldr	r3, [r3, #4]
 8001614:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001618:	2b00      	cmp	r3, #0
 800161a:	d003      	beq.n	8001624 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 800161c:	693a      	ldr	r2, [r7, #16]
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	4313      	orrs	r3, r2
 8001622:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001624:	4a2d      	ldr	r2, [pc, #180]	@ (80016dc <HAL_GPIO_Init+0x2d0>)
 8001626:	693b      	ldr	r3, [r7, #16]
 8001628:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800162a:	4b2c      	ldr	r3, [pc, #176]	@ (80016dc <HAL_GPIO_Init+0x2d0>)
 800162c:	68db      	ldr	r3, [r3, #12]
 800162e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	43db      	mvns	r3, r3
 8001634:	693a      	ldr	r2, [r7, #16]
 8001636:	4013      	ands	r3, r2
 8001638:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	685b      	ldr	r3, [r3, #4]
 800163e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001642:	2b00      	cmp	r3, #0
 8001644:	d003      	beq.n	800164e <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8001646:	693a      	ldr	r2, [r7, #16]
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	4313      	orrs	r3, r2
 800164c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800164e:	4a23      	ldr	r2, [pc, #140]	@ (80016dc <HAL_GPIO_Init+0x2d0>)
 8001650:	693b      	ldr	r3, [r7, #16]
 8001652:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001654:	4b21      	ldr	r3, [pc, #132]	@ (80016dc <HAL_GPIO_Init+0x2d0>)
 8001656:	685b      	ldr	r3, [r3, #4]
 8001658:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	43db      	mvns	r3, r3
 800165e:	693a      	ldr	r2, [r7, #16]
 8001660:	4013      	ands	r3, r2
 8001662:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	685b      	ldr	r3, [r3, #4]
 8001668:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800166c:	2b00      	cmp	r3, #0
 800166e:	d003      	beq.n	8001678 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8001670:	693a      	ldr	r2, [r7, #16]
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	4313      	orrs	r3, r2
 8001676:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001678:	4a18      	ldr	r2, [pc, #96]	@ (80016dc <HAL_GPIO_Init+0x2d0>)
 800167a:	693b      	ldr	r3, [r7, #16]
 800167c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800167e:	4b17      	ldr	r3, [pc, #92]	@ (80016dc <HAL_GPIO_Init+0x2d0>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	43db      	mvns	r3, r3
 8001688:	693a      	ldr	r2, [r7, #16]
 800168a:	4013      	ands	r3, r2
 800168c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	685b      	ldr	r3, [r3, #4]
 8001692:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001696:	2b00      	cmp	r3, #0
 8001698:	d003      	beq.n	80016a2 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 800169a:	693a      	ldr	r2, [r7, #16]
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	4313      	orrs	r3, r2
 80016a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80016a2:	4a0e      	ldr	r2, [pc, #56]	@ (80016dc <HAL_GPIO_Init+0x2d0>)
 80016a4:	693b      	ldr	r3, [r7, #16]
 80016a6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80016a8:	697b      	ldr	r3, [r7, #20]
 80016aa:	3301      	adds	r3, #1
 80016ac:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	681a      	ldr	r2, [r3, #0]
 80016b2:	697b      	ldr	r3, [r7, #20]
 80016b4:	fa22 f303 	lsr.w	r3, r2, r3
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	f47f aeaf 	bne.w	800141c <HAL_GPIO_Init+0x10>
  }
}
 80016be:	bf00      	nop
 80016c0:	bf00      	nop
 80016c2:	371c      	adds	r7, #28
 80016c4:	46bd      	mov	sp, r7
 80016c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ca:	4770      	bx	lr
 80016cc:	40021000 	.word	0x40021000
 80016d0:	40010000 	.word	0x40010000
 80016d4:	48000400 	.word	0x48000400
 80016d8:	48000800 	.word	0x48000800
 80016dc:	40010400 	.word	0x40010400

080016e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016e0:	b480      	push	{r7}
 80016e2:	b083      	sub	sp, #12
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
 80016e8:	460b      	mov	r3, r1
 80016ea:	807b      	strh	r3, [r7, #2]
 80016ec:	4613      	mov	r3, r2
 80016ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80016f0:	787b      	ldrb	r3, [r7, #1]
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d003      	beq.n	80016fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80016f6:	887a      	ldrh	r2, [r7, #2]
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80016fc:	e002      	b.n	8001704 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80016fe:	887a      	ldrh	r2, [r7, #2]
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001704:	bf00      	nop
 8001706:	370c      	adds	r7, #12
 8001708:	46bd      	mov	sp, r7
 800170a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170e:	4770      	bx	lr

08001710 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001710:	b480      	push	{r7}
 8001712:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001714:	4b05      	ldr	r3, [pc, #20]	@ (800172c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	4a04      	ldr	r2, [pc, #16]	@ (800172c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800171a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800171e:	6013      	str	r3, [r2, #0]
}
 8001720:	bf00      	nop
 8001722:	46bd      	mov	sp, r7
 8001724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001728:	4770      	bx	lr
 800172a:	bf00      	nop
 800172c:	40007000 	.word	0x40007000

08001730 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001730:	b480      	push	{r7}
 8001732:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001734:	4b04      	ldr	r3, [pc, #16]	@ (8001748 <HAL_PWREx_GetVoltageRange+0x18>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 800173c:	4618      	mov	r0, r3
 800173e:	46bd      	mov	sp, r7
 8001740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001744:	4770      	bx	lr
 8001746:	bf00      	nop
 8001748:	40007000 	.word	0x40007000

0800174c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800174c:	b480      	push	{r7}
 800174e:	b085      	sub	sp, #20
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800175a:	d130      	bne.n	80017be <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800175c:	4b23      	ldr	r3, [pc, #140]	@ (80017ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001764:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001768:	d038      	beq.n	80017dc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800176a:	4b20      	ldr	r3, [pc, #128]	@ (80017ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001772:	4a1e      	ldr	r2, [pc, #120]	@ (80017ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001774:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001778:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800177a:	4b1d      	ldr	r3, [pc, #116]	@ (80017f0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	2232      	movs	r2, #50	@ 0x32
 8001780:	fb02 f303 	mul.w	r3, r2, r3
 8001784:	4a1b      	ldr	r2, [pc, #108]	@ (80017f4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001786:	fba2 2303 	umull	r2, r3, r2, r3
 800178a:	0c9b      	lsrs	r3, r3, #18
 800178c:	3301      	adds	r3, #1
 800178e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001790:	e002      	b.n	8001798 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	3b01      	subs	r3, #1
 8001796:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001798:	4b14      	ldr	r3, [pc, #80]	@ (80017ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800179a:	695b      	ldr	r3, [r3, #20]
 800179c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80017a0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80017a4:	d102      	bne.n	80017ac <HAL_PWREx_ControlVoltageScaling+0x60>
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d1f2      	bne.n	8001792 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80017ac:	4b0f      	ldr	r3, [pc, #60]	@ (80017ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80017ae:	695b      	ldr	r3, [r3, #20]
 80017b0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80017b4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80017b8:	d110      	bne.n	80017dc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80017ba:	2303      	movs	r3, #3
 80017bc:	e00f      	b.n	80017de <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80017be:	4b0b      	ldr	r3, [pc, #44]	@ (80017ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80017c6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80017ca:	d007      	beq.n	80017dc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80017cc:	4b07      	ldr	r3, [pc, #28]	@ (80017ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80017d4:	4a05      	ldr	r2, [pc, #20]	@ (80017ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80017d6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80017da:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80017dc:	2300      	movs	r3, #0
}
 80017de:	4618      	mov	r0, r3
 80017e0:	3714      	adds	r7, #20
 80017e2:	46bd      	mov	sp, r7
 80017e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e8:	4770      	bx	lr
 80017ea:	bf00      	nop
 80017ec:	40007000 	.word	0x40007000
 80017f0:	20000024 	.word	0x20000024
 80017f4:	431bde83 	.word	0x431bde83

080017f8 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b088      	sub	sp, #32
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	2b00      	cmp	r3, #0
 8001804:	d102      	bne.n	800180c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001806:	2301      	movs	r3, #1
 8001808:	f000 bc02 	b.w	8002010 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800180c:	4b96      	ldr	r3, [pc, #600]	@ (8001a68 <HAL_RCC_OscConfig+0x270>)
 800180e:	689b      	ldr	r3, [r3, #8]
 8001810:	f003 030c 	and.w	r3, r3, #12
 8001814:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001816:	4b94      	ldr	r3, [pc, #592]	@ (8001a68 <HAL_RCC_OscConfig+0x270>)
 8001818:	68db      	ldr	r3, [r3, #12]
 800181a:	f003 0303 	and.w	r3, r3, #3
 800181e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f003 0310 	and.w	r3, r3, #16
 8001828:	2b00      	cmp	r3, #0
 800182a:	f000 80e4 	beq.w	80019f6 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800182e:	69bb      	ldr	r3, [r7, #24]
 8001830:	2b00      	cmp	r3, #0
 8001832:	d007      	beq.n	8001844 <HAL_RCC_OscConfig+0x4c>
 8001834:	69bb      	ldr	r3, [r7, #24]
 8001836:	2b0c      	cmp	r3, #12
 8001838:	f040 808b 	bne.w	8001952 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800183c:	697b      	ldr	r3, [r7, #20]
 800183e:	2b01      	cmp	r3, #1
 8001840:	f040 8087 	bne.w	8001952 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001844:	4b88      	ldr	r3, [pc, #544]	@ (8001a68 <HAL_RCC_OscConfig+0x270>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f003 0302 	and.w	r3, r3, #2
 800184c:	2b00      	cmp	r3, #0
 800184e:	d005      	beq.n	800185c <HAL_RCC_OscConfig+0x64>
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	699b      	ldr	r3, [r3, #24]
 8001854:	2b00      	cmp	r3, #0
 8001856:	d101      	bne.n	800185c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001858:	2301      	movs	r3, #1
 800185a:	e3d9      	b.n	8002010 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	6a1a      	ldr	r2, [r3, #32]
 8001860:	4b81      	ldr	r3, [pc, #516]	@ (8001a68 <HAL_RCC_OscConfig+0x270>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f003 0308 	and.w	r3, r3, #8
 8001868:	2b00      	cmp	r3, #0
 800186a:	d004      	beq.n	8001876 <HAL_RCC_OscConfig+0x7e>
 800186c:	4b7e      	ldr	r3, [pc, #504]	@ (8001a68 <HAL_RCC_OscConfig+0x270>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001874:	e005      	b.n	8001882 <HAL_RCC_OscConfig+0x8a>
 8001876:	4b7c      	ldr	r3, [pc, #496]	@ (8001a68 <HAL_RCC_OscConfig+0x270>)
 8001878:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800187c:	091b      	lsrs	r3, r3, #4
 800187e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001882:	4293      	cmp	r3, r2
 8001884:	d223      	bcs.n	80018ce <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	6a1b      	ldr	r3, [r3, #32]
 800188a:	4618      	mov	r0, r3
 800188c:	f000 fd8c 	bl	80023a8 <RCC_SetFlashLatencyFromMSIRange>
 8001890:	4603      	mov	r3, r0
 8001892:	2b00      	cmp	r3, #0
 8001894:	d001      	beq.n	800189a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001896:	2301      	movs	r3, #1
 8001898:	e3ba      	b.n	8002010 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800189a:	4b73      	ldr	r3, [pc, #460]	@ (8001a68 <HAL_RCC_OscConfig+0x270>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	4a72      	ldr	r2, [pc, #456]	@ (8001a68 <HAL_RCC_OscConfig+0x270>)
 80018a0:	f043 0308 	orr.w	r3, r3, #8
 80018a4:	6013      	str	r3, [r2, #0]
 80018a6:	4b70      	ldr	r3, [pc, #448]	@ (8001a68 <HAL_RCC_OscConfig+0x270>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	6a1b      	ldr	r3, [r3, #32]
 80018b2:	496d      	ldr	r1, [pc, #436]	@ (8001a68 <HAL_RCC_OscConfig+0x270>)
 80018b4:	4313      	orrs	r3, r2
 80018b6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80018b8:	4b6b      	ldr	r3, [pc, #428]	@ (8001a68 <HAL_RCC_OscConfig+0x270>)
 80018ba:	685b      	ldr	r3, [r3, #4]
 80018bc:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	69db      	ldr	r3, [r3, #28]
 80018c4:	021b      	lsls	r3, r3, #8
 80018c6:	4968      	ldr	r1, [pc, #416]	@ (8001a68 <HAL_RCC_OscConfig+0x270>)
 80018c8:	4313      	orrs	r3, r2
 80018ca:	604b      	str	r3, [r1, #4]
 80018cc:	e025      	b.n	800191a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80018ce:	4b66      	ldr	r3, [pc, #408]	@ (8001a68 <HAL_RCC_OscConfig+0x270>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	4a65      	ldr	r2, [pc, #404]	@ (8001a68 <HAL_RCC_OscConfig+0x270>)
 80018d4:	f043 0308 	orr.w	r3, r3, #8
 80018d8:	6013      	str	r3, [r2, #0]
 80018da:	4b63      	ldr	r3, [pc, #396]	@ (8001a68 <HAL_RCC_OscConfig+0x270>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	6a1b      	ldr	r3, [r3, #32]
 80018e6:	4960      	ldr	r1, [pc, #384]	@ (8001a68 <HAL_RCC_OscConfig+0x270>)
 80018e8:	4313      	orrs	r3, r2
 80018ea:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80018ec:	4b5e      	ldr	r3, [pc, #376]	@ (8001a68 <HAL_RCC_OscConfig+0x270>)
 80018ee:	685b      	ldr	r3, [r3, #4]
 80018f0:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	69db      	ldr	r3, [r3, #28]
 80018f8:	021b      	lsls	r3, r3, #8
 80018fa:	495b      	ldr	r1, [pc, #364]	@ (8001a68 <HAL_RCC_OscConfig+0x270>)
 80018fc:	4313      	orrs	r3, r2
 80018fe:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001900:	69bb      	ldr	r3, [r7, #24]
 8001902:	2b00      	cmp	r3, #0
 8001904:	d109      	bne.n	800191a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	6a1b      	ldr	r3, [r3, #32]
 800190a:	4618      	mov	r0, r3
 800190c:	f000 fd4c 	bl	80023a8 <RCC_SetFlashLatencyFromMSIRange>
 8001910:	4603      	mov	r3, r0
 8001912:	2b00      	cmp	r3, #0
 8001914:	d001      	beq.n	800191a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001916:	2301      	movs	r3, #1
 8001918:	e37a      	b.n	8002010 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800191a:	f000 fc81 	bl	8002220 <HAL_RCC_GetSysClockFreq>
 800191e:	4602      	mov	r2, r0
 8001920:	4b51      	ldr	r3, [pc, #324]	@ (8001a68 <HAL_RCC_OscConfig+0x270>)
 8001922:	689b      	ldr	r3, [r3, #8]
 8001924:	091b      	lsrs	r3, r3, #4
 8001926:	f003 030f 	and.w	r3, r3, #15
 800192a:	4950      	ldr	r1, [pc, #320]	@ (8001a6c <HAL_RCC_OscConfig+0x274>)
 800192c:	5ccb      	ldrb	r3, [r1, r3]
 800192e:	f003 031f 	and.w	r3, r3, #31
 8001932:	fa22 f303 	lsr.w	r3, r2, r3
 8001936:	4a4e      	ldr	r2, [pc, #312]	@ (8001a70 <HAL_RCC_OscConfig+0x278>)
 8001938:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800193a:	4b4e      	ldr	r3, [pc, #312]	@ (8001a74 <HAL_RCC_OscConfig+0x27c>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	4618      	mov	r0, r3
 8001940:	f7ff fbfe 	bl	8001140 <HAL_InitTick>
 8001944:	4603      	mov	r3, r0
 8001946:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001948:	7bfb      	ldrb	r3, [r7, #15]
 800194a:	2b00      	cmp	r3, #0
 800194c:	d052      	beq.n	80019f4 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800194e:	7bfb      	ldrb	r3, [r7, #15]
 8001950:	e35e      	b.n	8002010 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	699b      	ldr	r3, [r3, #24]
 8001956:	2b00      	cmp	r3, #0
 8001958:	d032      	beq.n	80019c0 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800195a:	4b43      	ldr	r3, [pc, #268]	@ (8001a68 <HAL_RCC_OscConfig+0x270>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	4a42      	ldr	r2, [pc, #264]	@ (8001a68 <HAL_RCC_OscConfig+0x270>)
 8001960:	f043 0301 	orr.w	r3, r3, #1
 8001964:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001966:	f7ff fc3b 	bl	80011e0 <HAL_GetTick>
 800196a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800196c:	e008      	b.n	8001980 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800196e:	f7ff fc37 	bl	80011e0 <HAL_GetTick>
 8001972:	4602      	mov	r2, r0
 8001974:	693b      	ldr	r3, [r7, #16]
 8001976:	1ad3      	subs	r3, r2, r3
 8001978:	2b02      	cmp	r3, #2
 800197a:	d901      	bls.n	8001980 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800197c:	2303      	movs	r3, #3
 800197e:	e347      	b.n	8002010 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001980:	4b39      	ldr	r3, [pc, #228]	@ (8001a68 <HAL_RCC_OscConfig+0x270>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f003 0302 	and.w	r3, r3, #2
 8001988:	2b00      	cmp	r3, #0
 800198a:	d0f0      	beq.n	800196e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800198c:	4b36      	ldr	r3, [pc, #216]	@ (8001a68 <HAL_RCC_OscConfig+0x270>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	4a35      	ldr	r2, [pc, #212]	@ (8001a68 <HAL_RCC_OscConfig+0x270>)
 8001992:	f043 0308 	orr.w	r3, r3, #8
 8001996:	6013      	str	r3, [r2, #0]
 8001998:	4b33      	ldr	r3, [pc, #204]	@ (8001a68 <HAL_RCC_OscConfig+0x270>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	6a1b      	ldr	r3, [r3, #32]
 80019a4:	4930      	ldr	r1, [pc, #192]	@ (8001a68 <HAL_RCC_OscConfig+0x270>)
 80019a6:	4313      	orrs	r3, r2
 80019a8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80019aa:	4b2f      	ldr	r3, [pc, #188]	@ (8001a68 <HAL_RCC_OscConfig+0x270>)
 80019ac:	685b      	ldr	r3, [r3, #4]
 80019ae:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	69db      	ldr	r3, [r3, #28]
 80019b6:	021b      	lsls	r3, r3, #8
 80019b8:	492b      	ldr	r1, [pc, #172]	@ (8001a68 <HAL_RCC_OscConfig+0x270>)
 80019ba:	4313      	orrs	r3, r2
 80019bc:	604b      	str	r3, [r1, #4]
 80019be:	e01a      	b.n	80019f6 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80019c0:	4b29      	ldr	r3, [pc, #164]	@ (8001a68 <HAL_RCC_OscConfig+0x270>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	4a28      	ldr	r2, [pc, #160]	@ (8001a68 <HAL_RCC_OscConfig+0x270>)
 80019c6:	f023 0301 	bic.w	r3, r3, #1
 80019ca:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80019cc:	f7ff fc08 	bl	80011e0 <HAL_GetTick>
 80019d0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80019d2:	e008      	b.n	80019e6 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80019d4:	f7ff fc04 	bl	80011e0 <HAL_GetTick>
 80019d8:	4602      	mov	r2, r0
 80019da:	693b      	ldr	r3, [r7, #16]
 80019dc:	1ad3      	subs	r3, r2, r3
 80019de:	2b02      	cmp	r3, #2
 80019e0:	d901      	bls.n	80019e6 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80019e2:	2303      	movs	r3, #3
 80019e4:	e314      	b.n	8002010 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80019e6:	4b20      	ldr	r3, [pc, #128]	@ (8001a68 <HAL_RCC_OscConfig+0x270>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f003 0302 	and.w	r3, r3, #2
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d1f0      	bne.n	80019d4 <HAL_RCC_OscConfig+0x1dc>
 80019f2:	e000      	b.n	80019f6 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80019f4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f003 0301 	and.w	r3, r3, #1
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d073      	beq.n	8001aea <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001a02:	69bb      	ldr	r3, [r7, #24]
 8001a04:	2b08      	cmp	r3, #8
 8001a06:	d005      	beq.n	8001a14 <HAL_RCC_OscConfig+0x21c>
 8001a08:	69bb      	ldr	r3, [r7, #24]
 8001a0a:	2b0c      	cmp	r3, #12
 8001a0c:	d10e      	bne.n	8001a2c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001a0e:	697b      	ldr	r3, [r7, #20]
 8001a10:	2b03      	cmp	r3, #3
 8001a12:	d10b      	bne.n	8001a2c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a14:	4b14      	ldr	r3, [pc, #80]	@ (8001a68 <HAL_RCC_OscConfig+0x270>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d063      	beq.n	8001ae8 <HAL_RCC_OscConfig+0x2f0>
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	685b      	ldr	r3, [r3, #4]
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d15f      	bne.n	8001ae8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001a28:	2301      	movs	r3, #1
 8001a2a:	e2f1      	b.n	8002010 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	685b      	ldr	r3, [r3, #4]
 8001a30:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001a34:	d106      	bne.n	8001a44 <HAL_RCC_OscConfig+0x24c>
 8001a36:	4b0c      	ldr	r3, [pc, #48]	@ (8001a68 <HAL_RCC_OscConfig+0x270>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	4a0b      	ldr	r2, [pc, #44]	@ (8001a68 <HAL_RCC_OscConfig+0x270>)
 8001a3c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001a40:	6013      	str	r3, [r2, #0]
 8001a42:	e025      	b.n	8001a90 <HAL_RCC_OscConfig+0x298>
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	685b      	ldr	r3, [r3, #4]
 8001a48:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001a4c:	d114      	bne.n	8001a78 <HAL_RCC_OscConfig+0x280>
 8001a4e:	4b06      	ldr	r3, [pc, #24]	@ (8001a68 <HAL_RCC_OscConfig+0x270>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	4a05      	ldr	r2, [pc, #20]	@ (8001a68 <HAL_RCC_OscConfig+0x270>)
 8001a54:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001a58:	6013      	str	r3, [r2, #0]
 8001a5a:	4b03      	ldr	r3, [pc, #12]	@ (8001a68 <HAL_RCC_OscConfig+0x270>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	4a02      	ldr	r2, [pc, #8]	@ (8001a68 <HAL_RCC_OscConfig+0x270>)
 8001a60:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001a64:	6013      	str	r3, [r2, #0]
 8001a66:	e013      	b.n	8001a90 <HAL_RCC_OscConfig+0x298>
 8001a68:	40021000 	.word	0x40021000
 8001a6c:	08003d6c 	.word	0x08003d6c
 8001a70:	20000024 	.word	0x20000024
 8001a74:	20000028 	.word	0x20000028
 8001a78:	4ba0      	ldr	r3, [pc, #640]	@ (8001cfc <HAL_RCC_OscConfig+0x504>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	4a9f      	ldr	r2, [pc, #636]	@ (8001cfc <HAL_RCC_OscConfig+0x504>)
 8001a7e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001a82:	6013      	str	r3, [r2, #0]
 8001a84:	4b9d      	ldr	r3, [pc, #628]	@ (8001cfc <HAL_RCC_OscConfig+0x504>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	4a9c      	ldr	r2, [pc, #624]	@ (8001cfc <HAL_RCC_OscConfig+0x504>)
 8001a8a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001a8e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	685b      	ldr	r3, [r3, #4]
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d013      	beq.n	8001ac0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a98:	f7ff fba2 	bl	80011e0 <HAL_GetTick>
 8001a9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a9e:	e008      	b.n	8001ab2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001aa0:	f7ff fb9e 	bl	80011e0 <HAL_GetTick>
 8001aa4:	4602      	mov	r2, r0
 8001aa6:	693b      	ldr	r3, [r7, #16]
 8001aa8:	1ad3      	subs	r3, r2, r3
 8001aaa:	2b64      	cmp	r3, #100	@ 0x64
 8001aac:	d901      	bls.n	8001ab2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001aae:	2303      	movs	r3, #3
 8001ab0:	e2ae      	b.n	8002010 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001ab2:	4b92      	ldr	r3, [pc, #584]	@ (8001cfc <HAL_RCC_OscConfig+0x504>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d0f0      	beq.n	8001aa0 <HAL_RCC_OscConfig+0x2a8>
 8001abe:	e014      	b.n	8001aea <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ac0:	f7ff fb8e 	bl	80011e0 <HAL_GetTick>
 8001ac4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001ac6:	e008      	b.n	8001ada <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ac8:	f7ff fb8a 	bl	80011e0 <HAL_GetTick>
 8001acc:	4602      	mov	r2, r0
 8001ace:	693b      	ldr	r3, [r7, #16]
 8001ad0:	1ad3      	subs	r3, r2, r3
 8001ad2:	2b64      	cmp	r3, #100	@ 0x64
 8001ad4:	d901      	bls.n	8001ada <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001ad6:	2303      	movs	r3, #3
 8001ad8:	e29a      	b.n	8002010 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001ada:	4b88      	ldr	r3, [pc, #544]	@ (8001cfc <HAL_RCC_OscConfig+0x504>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d1f0      	bne.n	8001ac8 <HAL_RCC_OscConfig+0x2d0>
 8001ae6:	e000      	b.n	8001aea <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ae8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f003 0302 	and.w	r3, r3, #2
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d060      	beq.n	8001bb8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001af6:	69bb      	ldr	r3, [r7, #24]
 8001af8:	2b04      	cmp	r3, #4
 8001afa:	d005      	beq.n	8001b08 <HAL_RCC_OscConfig+0x310>
 8001afc:	69bb      	ldr	r3, [r7, #24]
 8001afe:	2b0c      	cmp	r3, #12
 8001b00:	d119      	bne.n	8001b36 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001b02:	697b      	ldr	r3, [r7, #20]
 8001b04:	2b02      	cmp	r3, #2
 8001b06:	d116      	bne.n	8001b36 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001b08:	4b7c      	ldr	r3, [pc, #496]	@ (8001cfc <HAL_RCC_OscConfig+0x504>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d005      	beq.n	8001b20 <HAL_RCC_OscConfig+0x328>
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	68db      	ldr	r3, [r3, #12]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d101      	bne.n	8001b20 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001b1c:	2301      	movs	r3, #1
 8001b1e:	e277      	b.n	8002010 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b20:	4b76      	ldr	r3, [pc, #472]	@ (8001cfc <HAL_RCC_OscConfig+0x504>)
 8001b22:	685b      	ldr	r3, [r3, #4]
 8001b24:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	691b      	ldr	r3, [r3, #16]
 8001b2c:	061b      	lsls	r3, r3, #24
 8001b2e:	4973      	ldr	r1, [pc, #460]	@ (8001cfc <HAL_RCC_OscConfig+0x504>)
 8001b30:	4313      	orrs	r3, r2
 8001b32:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001b34:	e040      	b.n	8001bb8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	68db      	ldr	r3, [r3, #12]
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d023      	beq.n	8001b86 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b3e:	4b6f      	ldr	r3, [pc, #444]	@ (8001cfc <HAL_RCC_OscConfig+0x504>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	4a6e      	ldr	r2, [pc, #440]	@ (8001cfc <HAL_RCC_OscConfig+0x504>)
 8001b44:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b48:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b4a:	f7ff fb49 	bl	80011e0 <HAL_GetTick>
 8001b4e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b50:	e008      	b.n	8001b64 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b52:	f7ff fb45 	bl	80011e0 <HAL_GetTick>
 8001b56:	4602      	mov	r2, r0
 8001b58:	693b      	ldr	r3, [r7, #16]
 8001b5a:	1ad3      	subs	r3, r2, r3
 8001b5c:	2b02      	cmp	r3, #2
 8001b5e:	d901      	bls.n	8001b64 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001b60:	2303      	movs	r3, #3
 8001b62:	e255      	b.n	8002010 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b64:	4b65      	ldr	r3, [pc, #404]	@ (8001cfc <HAL_RCC_OscConfig+0x504>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d0f0      	beq.n	8001b52 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b70:	4b62      	ldr	r3, [pc, #392]	@ (8001cfc <HAL_RCC_OscConfig+0x504>)
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	691b      	ldr	r3, [r3, #16]
 8001b7c:	061b      	lsls	r3, r3, #24
 8001b7e:	495f      	ldr	r1, [pc, #380]	@ (8001cfc <HAL_RCC_OscConfig+0x504>)
 8001b80:	4313      	orrs	r3, r2
 8001b82:	604b      	str	r3, [r1, #4]
 8001b84:	e018      	b.n	8001bb8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b86:	4b5d      	ldr	r3, [pc, #372]	@ (8001cfc <HAL_RCC_OscConfig+0x504>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	4a5c      	ldr	r2, [pc, #368]	@ (8001cfc <HAL_RCC_OscConfig+0x504>)
 8001b8c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001b90:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b92:	f7ff fb25 	bl	80011e0 <HAL_GetTick>
 8001b96:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001b98:	e008      	b.n	8001bac <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b9a:	f7ff fb21 	bl	80011e0 <HAL_GetTick>
 8001b9e:	4602      	mov	r2, r0
 8001ba0:	693b      	ldr	r3, [r7, #16]
 8001ba2:	1ad3      	subs	r3, r2, r3
 8001ba4:	2b02      	cmp	r3, #2
 8001ba6:	d901      	bls.n	8001bac <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001ba8:	2303      	movs	r3, #3
 8001baa:	e231      	b.n	8002010 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001bac:	4b53      	ldr	r3, [pc, #332]	@ (8001cfc <HAL_RCC_OscConfig+0x504>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d1f0      	bne.n	8001b9a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f003 0308 	and.w	r3, r3, #8
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d03c      	beq.n	8001c3e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	695b      	ldr	r3, [r3, #20]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d01c      	beq.n	8001c06 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001bcc:	4b4b      	ldr	r3, [pc, #300]	@ (8001cfc <HAL_RCC_OscConfig+0x504>)
 8001bce:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001bd2:	4a4a      	ldr	r2, [pc, #296]	@ (8001cfc <HAL_RCC_OscConfig+0x504>)
 8001bd4:	f043 0301 	orr.w	r3, r3, #1
 8001bd8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bdc:	f7ff fb00 	bl	80011e0 <HAL_GetTick>
 8001be0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001be2:	e008      	b.n	8001bf6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001be4:	f7ff fafc 	bl	80011e0 <HAL_GetTick>
 8001be8:	4602      	mov	r2, r0
 8001bea:	693b      	ldr	r3, [r7, #16]
 8001bec:	1ad3      	subs	r3, r2, r3
 8001bee:	2b02      	cmp	r3, #2
 8001bf0:	d901      	bls.n	8001bf6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001bf2:	2303      	movs	r3, #3
 8001bf4:	e20c      	b.n	8002010 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001bf6:	4b41      	ldr	r3, [pc, #260]	@ (8001cfc <HAL_RCC_OscConfig+0x504>)
 8001bf8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001bfc:	f003 0302 	and.w	r3, r3, #2
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d0ef      	beq.n	8001be4 <HAL_RCC_OscConfig+0x3ec>
 8001c04:	e01b      	b.n	8001c3e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c06:	4b3d      	ldr	r3, [pc, #244]	@ (8001cfc <HAL_RCC_OscConfig+0x504>)
 8001c08:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001c0c:	4a3b      	ldr	r2, [pc, #236]	@ (8001cfc <HAL_RCC_OscConfig+0x504>)
 8001c0e:	f023 0301 	bic.w	r3, r3, #1
 8001c12:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c16:	f7ff fae3 	bl	80011e0 <HAL_GetTick>
 8001c1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001c1c:	e008      	b.n	8001c30 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c1e:	f7ff fadf 	bl	80011e0 <HAL_GetTick>
 8001c22:	4602      	mov	r2, r0
 8001c24:	693b      	ldr	r3, [r7, #16]
 8001c26:	1ad3      	subs	r3, r2, r3
 8001c28:	2b02      	cmp	r3, #2
 8001c2a:	d901      	bls.n	8001c30 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001c2c:	2303      	movs	r3, #3
 8001c2e:	e1ef      	b.n	8002010 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001c30:	4b32      	ldr	r3, [pc, #200]	@ (8001cfc <HAL_RCC_OscConfig+0x504>)
 8001c32:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001c36:	f003 0302 	and.w	r3, r3, #2
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d1ef      	bne.n	8001c1e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f003 0304 	and.w	r3, r3, #4
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	f000 80a6 	beq.w	8001d98 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001c50:	4b2a      	ldr	r3, [pc, #168]	@ (8001cfc <HAL_RCC_OscConfig+0x504>)
 8001c52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c54:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d10d      	bne.n	8001c78 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c5c:	4b27      	ldr	r3, [pc, #156]	@ (8001cfc <HAL_RCC_OscConfig+0x504>)
 8001c5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c60:	4a26      	ldr	r2, [pc, #152]	@ (8001cfc <HAL_RCC_OscConfig+0x504>)
 8001c62:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c66:	6593      	str	r3, [r2, #88]	@ 0x58
 8001c68:	4b24      	ldr	r3, [pc, #144]	@ (8001cfc <HAL_RCC_OscConfig+0x504>)
 8001c6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c6c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c70:	60bb      	str	r3, [r7, #8]
 8001c72:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c74:	2301      	movs	r3, #1
 8001c76:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c78:	4b21      	ldr	r3, [pc, #132]	@ (8001d00 <HAL_RCC_OscConfig+0x508>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d118      	bne.n	8001cb6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001c84:	4b1e      	ldr	r3, [pc, #120]	@ (8001d00 <HAL_RCC_OscConfig+0x508>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4a1d      	ldr	r2, [pc, #116]	@ (8001d00 <HAL_RCC_OscConfig+0x508>)
 8001c8a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c8e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c90:	f7ff faa6 	bl	80011e0 <HAL_GetTick>
 8001c94:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c96:	e008      	b.n	8001caa <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c98:	f7ff faa2 	bl	80011e0 <HAL_GetTick>
 8001c9c:	4602      	mov	r2, r0
 8001c9e:	693b      	ldr	r3, [r7, #16]
 8001ca0:	1ad3      	subs	r3, r2, r3
 8001ca2:	2b02      	cmp	r3, #2
 8001ca4:	d901      	bls.n	8001caa <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001ca6:	2303      	movs	r3, #3
 8001ca8:	e1b2      	b.n	8002010 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001caa:	4b15      	ldr	r3, [pc, #84]	@ (8001d00 <HAL_RCC_OscConfig+0x508>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d0f0      	beq.n	8001c98 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	689b      	ldr	r3, [r3, #8]
 8001cba:	2b01      	cmp	r3, #1
 8001cbc:	d108      	bne.n	8001cd0 <HAL_RCC_OscConfig+0x4d8>
 8001cbe:	4b0f      	ldr	r3, [pc, #60]	@ (8001cfc <HAL_RCC_OscConfig+0x504>)
 8001cc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001cc4:	4a0d      	ldr	r2, [pc, #52]	@ (8001cfc <HAL_RCC_OscConfig+0x504>)
 8001cc6:	f043 0301 	orr.w	r3, r3, #1
 8001cca:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001cce:	e029      	b.n	8001d24 <HAL_RCC_OscConfig+0x52c>
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	689b      	ldr	r3, [r3, #8]
 8001cd4:	2b05      	cmp	r3, #5
 8001cd6:	d115      	bne.n	8001d04 <HAL_RCC_OscConfig+0x50c>
 8001cd8:	4b08      	ldr	r3, [pc, #32]	@ (8001cfc <HAL_RCC_OscConfig+0x504>)
 8001cda:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001cde:	4a07      	ldr	r2, [pc, #28]	@ (8001cfc <HAL_RCC_OscConfig+0x504>)
 8001ce0:	f043 0304 	orr.w	r3, r3, #4
 8001ce4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001ce8:	4b04      	ldr	r3, [pc, #16]	@ (8001cfc <HAL_RCC_OscConfig+0x504>)
 8001cea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001cee:	4a03      	ldr	r2, [pc, #12]	@ (8001cfc <HAL_RCC_OscConfig+0x504>)
 8001cf0:	f043 0301 	orr.w	r3, r3, #1
 8001cf4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001cf8:	e014      	b.n	8001d24 <HAL_RCC_OscConfig+0x52c>
 8001cfa:	bf00      	nop
 8001cfc:	40021000 	.word	0x40021000
 8001d00:	40007000 	.word	0x40007000
 8001d04:	4b9a      	ldr	r3, [pc, #616]	@ (8001f70 <HAL_RCC_OscConfig+0x778>)
 8001d06:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001d0a:	4a99      	ldr	r2, [pc, #612]	@ (8001f70 <HAL_RCC_OscConfig+0x778>)
 8001d0c:	f023 0301 	bic.w	r3, r3, #1
 8001d10:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001d14:	4b96      	ldr	r3, [pc, #600]	@ (8001f70 <HAL_RCC_OscConfig+0x778>)
 8001d16:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001d1a:	4a95      	ldr	r2, [pc, #596]	@ (8001f70 <HAL_RCC_OscConfig+0x778>)
 8001d1c:	f023 0304 	bic.w	r3, r3, #4
 8001d20:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	689b      	ldr	r3, [r3, #8]
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d016      	beq.n	8001d5a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d2c:	f7ff fa58 	bl	80011e0 <HAL_GetTick>
 8001d30:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001d32:	e00a      	b.n	8001d4a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d34:	f7ff fa54 	bl	80011e0 <HAL_GetTick>
 8001d38:	4602      	mov	r2, r0
 8001d3a:	693b      	ldr	r3, [r7, #16]
 8001d3c:	1ad3      	subs	r3, r2, r3
 8001d3e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d42:	4293      	cmp	r3, r2
 8001d44:	d901      	bls.n	8001d4a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001d46:	2303      	movs	r3, #3
 8001d48:	e162      	b.n	8002010 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001d4a:	4b89      	ldr	r3, [pc, #548]	@ (8001f70 <HAL_RCC_OscConfig+0x778>)
 8001d4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001d50:	f003 0302 	and.w	r3, r3, #2
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d0ed      	beq.n	8001d34 <HAL_RCC_OscConfig+0x53c>
 8001d58:	e015      	b.n	8001d86 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d5a:	f7ff fa41 	bl	80011e0 <HAL_GetTick>
 8001d5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001d60:	e00a      	b.n	8001d78 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d62:	f7ff fa3d 	bl	80011e0 <HAL_GetTick>
 8001d66:	4602      	mov	r2, r0
 8001d68:	693b      	ldr	r3, [r7, #16]
 8001d6a:	1ad3      	subs	r3, r2, r3
 8001d6c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d70:	4293      	cmp	r3, r2
 8001d72:	d901      	bls.n	8001d78 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001d74:	2303      	movs	r3, #3
 8001d76:	e14b      	b.n	8002010 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001d78:	4b7d      	ldr	r3, [pc, #500]	@ (8001f70 <HAL_RCC_OscConfig+0x778>)
 8001d7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001d7e:	f003 0302 	and.w	r3, r3, #2
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d1ed      	bne.n	8001d62 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001d86:	7ffb      	ldrb	r3, [r7, #31]
 8001d88:	2b01      	cmp	r3, #1
 8001d8a:	d105      	bne.n	8001d98 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d8c:	4b78      	ldr	r3, [pc, #480]	@ (8001f70 <HAL_RCC_OscConfig+0x778>)
 8001d8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d90:	4a77      	ldr	r2, [pc, #476]	@ (8001f70 <HAL_RCC_OscConfig+0x778>)
 8001d92:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001d96:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f003 0320 	and.w	r3, r3, #32
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d03c      	beq.n	8001e1e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d01c      	beq.n	8001de6 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001dac:	4b70      	ldr	r3, [pc, #448]	@ (8001f70 <HAL_RCC_OscConfig+0x778>)
 8001dae:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001db2:	4a6f      	ldr	r2, [pc, #444]	@ (8001f70 <HAL_RCC_OscConfig+0x778>)
 8001db4:	f043 0301 	orr.w	r3, r3, #1
 8001db8:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dbc:	f7ff fa10 	bl	80011e0 <HAL_GetTick>
 8001dc0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001dc2:	e008      	b.n	8001dd6 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001dc4:	f7ff fa0c 	bl	80011e0 <HAL_GetTick>
 8001dc8:	4602      	mov	r2, r0
 8001dca:	693b      	ldr	r3, [r7, #16]
 8001dcc:	1ad3      	subs	r3, r2, r3
 8001dce:	2b02      	cmp	r3, #2
 8001dd0:	d901      	bls.n	8001dd6 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001dd2:	2303      	movs	r3, #3
 8001dd4:	e11c      	b.n	8002010 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001dd6:	4b66      	ldr	r3, [pc, #408]	@ (8001f70 <HAL_RCC_OscConfig+0x778>)
 8001dd8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001ddc:	f003 0302 	and.w	r3, r3, #2
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d0ef      	beq.n	8001dc4 <HAL_RCC_OscConfig+0x5cc>
 8001de4:	e01b      	b.n	8001e1e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001de6:	4b62      	ldr	r3, [pc, #392]	@ (8001f70 <HAL_RCC_OscConfig+0x778>)
 8001de8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001dec:	4a60      	ldr	r2, [pc, #384]	@ (8001f70 <HAL_RCC_OscConfig+0x778>)
 8001dee:	f023 0301 	bic.w	r3, r3, #1
 8001df2:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001df6:	f7ff f9f3 	bl	80011e0 <HAL_GetTick>
 8001dfa:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001dfc:	e008      	b.n	8001e10 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001dfe:	f7ff f9ef 	bl	80011e0 <HAL_GetTick>
 8001e02:	4602      	mov	r2, r0
 8001e04:	693b      	ldr	r3, [r7, #16]
 8001e06:	1ad3      	subs	r3, r2, r3
 8001e08:	2b02      	cmp	r3, #2
 8001e0a:	d901      	bls.n	8001e10 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001e0c:	2303      	movs	r3, #3
 8001e0e:	e0ff      	b.n	8002010 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001e10:	4b57      	ldr	r3, [pc, #348]	@ (8001f70 <HAL_RCC_OscConfig+0x778>)
 8001e12:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001e16:	f003 0302 	and.w	r3, r3, #2
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d1ef      	bne.n	8001dfe <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	f000 80f3 	beq.w	800200e <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e2c:	2b02      	cmp	r3, #2
 8001e2e:	f040 80c9 	bne.w	8001fc4 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001e32:	4b4f      	ldr	r3, [pc, #316]	@ (8001f70 <HAL_RCC_OscConfig+0x778>)
 8001e34:	68db      	ldr	r3, [r3, #12]
 8001e36:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e38:	697b      	ldr	r3, [r7, #20]
 8001e3a:	f003 0203 	and.w	r2, r3, #3
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e42:	429a      	cmp	r2, r3
 8001e44:	d12c      	bne.n	8001ea0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001e46:	697b      	ldr	r3, [r7, #20]
 8001e48:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e50:	3b01      	subs	r3, #1
 8001e52:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e54:	429a      	cmp	r2, r3
 8001e56:	d123      	bne.n	8001ea0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001e58:	697b      	ldr	r3, [r7, #20]
 8001e5a:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001e62:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001e64:	429a      	cmp	r2, r3
 8001e66:	d11b      	bne.n	8001ea0 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001e68:	697b      	ldr	r3, [r7, #20]
 8001e6a:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001e72:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001e74:	429a      	cmp	r2, r3
 8001e76:	d113      	bne.n	8001ea0 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001e78:	697b      	ldr	r3, [r7, #20]
 8001e7a:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001e82:	085b      	lsrs	r3, r3, #1
 8001e84:	3b01      	subs	r3, #1
 8001e86:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001e88:	429a      	cmp	r2, r3
 8001e8a:	d109      	bne.n	8001ea0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001e8c:	697b      	ldr	r3, [r7, #20]
 8001e8e:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e96:	085b      	lsrs	r3, r3, #1
 8001e98:	3b01      	subs	r3, #1
 8001e9a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001e9c:	429a      	cmp	r2, r3
 8001e9e:	d06b      	beq.n	8001f78 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001ea0:	69bb      	ldr	r3, [r7, #24]
 8001ea2:	2b0c      	cmp	r3, #12
 8001ea4:	d062      	beq.n	8001f6c <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001ea6:	4b32      	ldr	r3, [pc, #200]	@ (8001f70 <HAL_RCC_OscConfig+0x778>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d001      	beq.n	8001eb6 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8001eb2:	2301      	movs	r3, #1
 8001eb4:	e0ac      	b.n	8002010 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001eb6:	4b2e      	ldr	r3, [pc, #184]	@ (8001f70 <HAL_RCC_OscConfig+0x778>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	4a2d      	ldr	r2, [pc, #180]	@ (8001f70 <HAL_RCC_OscConfig+0x778>)
 8001ebc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001ec0:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001ec2:	f7ff f98d 	bl	80011e0 <HAL_GetTick>
 8001ec6:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ec8:	e008      	b.n	8001edc <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001eca:	f7ff f989 	bl	80011e0 <HAL_GetTick>
 8001ece:	4602      	mov	r2, r0
 8001ed0:	693b      	ldr	r3, [r7, #16]
 8001ed2:	1ad3      	subs	r3, r2, r3
 8001ed4:	2b02      	cmp	r3, #2
 8001ed6:	d901      	bls.n	8001edc <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8001ed8:	2303      	movs	r3, #3
 8001eda:	e099      	b.n	8002010 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001edc:	4b24      	ldr	r3, [pc, #144]	@ (8001f70 <HAL_RCC_OscConfig+0x778>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d1f0      	bne.n	8001eca <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ee8:	4b21      	ldr	r3, [pc, #132]	@ (8001f70 <HAL_RCC_OscConfig+0x778>)
 8001eea:	68da      	ldr	r2, [r3, #12]
 8001eec:	4b21      	ldr	r3, [pc, #132]	@ (8001f74 <HAL_RCC_OscConfig+0x77c>)
 8001eee:	4013      	ands	r3, r2
 8001ef0:	687a      	ldr	r2, [r7, #4]
 8001ef2:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8001ef4:	687a      	ldr	r2, [r7, #4]
 8001ef6:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001ef8:	3a01      	subs	r2, #1
 8001efa:	0112      	lsls	r2, r2, #4
 8001efc:	4311      	orrs	r1, r2
 8001efe:	687a      	ldr	r2, [r7, #4]
 8001f00:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001f02:	0212      	lsls	r2, r2, #8
 8001f04:	4311      	orrs	r1, r2
 8001f06:	687a      	ldr	r2, [r7, #4]
 8001f08:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001f0a:	0852      	lsrs	r2, r2, #1
 8001f0c:	3a01      	subs	r2, #1
 8001f0e:	0552      	lsls	r2, r2, #21
 8001f10:	4311      	orrs	r1, r2
 8001f12:	687a      	ldr	r2, [r7, #4]
 8001f14:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001f16:	0852      	lsrs	r2, r2, #1
 8001f18:	3a01      	subs	r2, #1
 8001f1a:	0652      	lsls	r2, r2, #25
 8001f1c:	4311      	orrs	r1, r2
 8001f1e:	687a      	ldr	r2, [r7, #4]
 8001f20:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001f22:	06d2      	lsls	r2, r2, #27
 8001f24:	430a      	orrs	r2, r1
 8001f26:	4912      	ldr	r1, [pc, #72]	@ (8001f70 <HAL_RCC_OscConfig+0x778>)
 8001f28:	4313      	orrs	r3, r2
 8001f2a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001f2c:	4b10      	ldr	r3, [pc, #64]	@ (8001f70 <HAL_RCC_OscConfig+0x778>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	4a0f      	ldr	r2, [pc, #60]	@ (8001f70 <HAL_RCC_OscConfig+0x778>)
 8001f32:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001f36:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001f38:	4b0d      	ldr	r3, [pc, #52]	@ (8001f70 <HAL_RCC_OscConfig+0x778>)
 8001f3a:	68db      	ldr	r3, [r3, #12]
 8001f3c:	4a0c      	ldr	r2, [pc, #48]	@ (8001f70 <HAL_RCC_OscConfig+0x778>)
 8001f3e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001f42:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001f44:	f7ff f94c 	bl	80011e0 <HAL_GetTick>
 8001f48:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f4a:	e008      	b.n	8001f5e <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f4c:	f7ff f948 	bl	80011e0 <HAL_GetTick>
 8001f50:	4602      	mov	r2, r0
 8001f52:	693b      	ldr	r3, [r7, #16]
 8001f54:	1ad3      	subs	r3, r2, r3
 8001f56:	2b02      	cmp	r3, #2
 8001f58:	d901      	bls.n	8001f5e <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8001f5a:	2303      	movs	r3, #3
 8001f5c:	e058      	b.n	8002010 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f5e:	4b04      	ldr	r3, [pc, #16]	@ (8001f70 <HAL_RCC_OscConfig+0x778>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d0f0      	beq.n	8001f4c <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001f6a:	e050      	b.n	800200e <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001f6c:	2301      	movs	r3, #1
 8001f6e:	e04f      	b.n	8002010 <HAL_RCC_OscConfig+0x818>
 8001f70:	40021000 	.word	0x40021000
 8001f74:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f78:	4b27      	ldr	r3, [pc, #156]	@ (8002018 <HAL_RCC_OscConfig+0x820>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d144      	bne.n	800200e <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001f84:	4b24      	ldr	r3, [pc, #144]	@ (8002018 <HAL_RCC_OscConfig+0x820>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	4a23      	ldr	r2, [pc, #140]	@ (8002018 <HAL_RCC_OscConfig+0x820>)
 8001f8a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001f8e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001f90:	4b21      	ldr	r3, [pc, #132]	@ (8002018 <HAL_RCC_OscConfig+0x820>)
 8001f92:	68db      	ldr	r3, [r3, #12]
 8001f94:	4a20      	ldr	r2, [pc, #128]	@ (8002018 <HAL_RCC_OscConfig+0x820>)
 8001f96:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001f9a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001f9c:	f7ff f920 	bl	80011e0 <HAL_GetTick>
 8001fa0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001fa2:	e008      	b.n	8001fb6 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fa4:	f7ff f91c 	bl	80011e0 <HAL_GetTick>
 8001fa8:	4602      	mov	r2, r0
 8001faa:	693b      	ldr	r3, [r7, #16]
 8001fac:	1ad3      	subs	r3, r2, r3
 8001fae:	2b02      	cmp	r3, #2
 8001fb0:	d901      	bls.n	8001fb6 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8001fb2:	2303      	movs	r3, #3
 8001fb4:	e02c      	b.n	8002010 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001fb6:	4b18      	ldr	r3, [pc, #96]	@ (8002018 <HAL_RCC_OscConfig+0x820>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d0f0      	beq.n	8001fa4 <HAL_RCC_OscConfig+0x7ac>
 8001fc2:	e024      	b.n	800200e <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001fc4:	69bb      	ldr	r3, [r7, #24]
 8001fc6:	2b0c      	cmp	r3, #12
 8001fc8:	d01f      	beq.n	800200a <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fca:	4b13      	ldr	r3, [pc, #76]	@ (8002018 <HAL_RCC_OscConfig+0x820>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	4a12      	ldr	r2, [pc, #72]	@ (8002018 <HAL_RCC_OscConfig+0x820>)
 8001fd0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001fd4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fd6:	f7ff f903 	bl	80011e0 <HAL_GetTick>
 8001fda:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001fdc:	e008      	b.n	8001ff0 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fde:	f7ff f8ff 	bl	80011e0 <HAL_GetTick>
 8001fe2:	4602      	mov	r2, r0
 8001fe4:	693b      	ldr	r3, [r7, #16]
 8001fe6:	1ad3      	subs	r3, r2, r3
 8001fe8:	2b02      	cmp	r3, #2
 8001fea:	d901      	bls.n	8001ff0 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8001fec:	2303      	movs	r3, #3
 8001fee:	e00f      	b.n	8002010 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ff0:	4b09      	ldr	r3, [pc, #36]	@ (8002018 <HAL_RCC_OscConfig+0x820>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d1f0      	bne.n	8001fde <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8001ffc:	4b06      	ldr	r3, [pc, #24]	@ (8002018 <HAL_RCC_OscConfig+0x820>)
 8001ffe:	68da      	ldr	r2, [r3, #12]
 8002000:	4905      	ldr	r1, [pc, #20]	@ (8002018 <HAL_RCC_OscConfig+0x820>)
 8002002:	4b06      	ldr	r3, [pc, #24]	@ (800201c <HAL_RCC_OscConfig+0x824>)
 8002004:	4013      	ands	r3, r2
 8002006:	60cb      	str	r3, [r1, #12]
 8002008:	e001      	b.n	800200e <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800200a:	2301      	movs	r3, #1
 800200c:	e000      	b.n	8002010 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 800200e:	2300      	movs	r3, #0
}
 8002010:	4618      	mov	r0, r3
 8002012:	3720      	adds	r7, #32
 8002014:	46bd      	mov	sp, r7
 8002016:	bd80      	pop	{r7, pc}
 8002018:	40021000 	.word	0x40021000
 800201c:	feeefffc 	.word	0xfeeefffc

08002020 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b084      	sub	sp, #16
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
 8002028:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	2b00      	cmp	r3, #0
 800202e:	d101      	bne.n	8002034 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002030:	2301      	movs	r3, #1
 8002032:	e0e7      	b.n	8002204 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002034:	4b75      	ldr	r3, [pc, #468]	@ (800220c <HAL_RCC_ClockConfig+0x1ec>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f003 0307 	and.w	r3, r3, #7
 800203c:	683a      	ldr	r2, [r7, #0]
 800203e:	429a      	cmp	r2, r3
 8002040:	d910      	bls.n	8002064 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002042:	4b72      	ldr	r3, [pc, #456]	@ (800220c <HAL_RCC_ClockConfig+0x1ec>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f023 0207 	bic.w	r2, r3, #7
 800204a:	4970      	ldr	r1, [pc, #448]	@ (800220c <HAL_RCC_ClockConfig+0x1ec>)
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	4313      	orrs	r3, r2
 8002050:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002052:	4b6e      	ldr	r3, [pc, #440]	@ (800220c <HAL_RCC_ClockConfig+0x1ec>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f003 0307 	and.w	r3, r3, #7
 800205a:	683a      	ldr	r2, [r7, #0]
 800205c:	429a      	cmp	r2, r3
 800205e:	d001      	beq.n	8002064 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002060:	2301      	movs	r3, #1
 8002062:	e0cf      	b.n	8002204 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f003 0302 	and.w	r3, r3, #2
 800206c:	2b00      	cmp	r3, #0
 800206e:	d010      	beq.n	8002092 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	689a      	ldr	r2, [r3, #8]
 8002074:	4b66      	ldr	r3, [pc, #408]	@ (8002210 <HAL_RCC_ClockConfig+0x1f0>)
 8002076:	689b      	ldr	r3, [r3, #8]
 8002078:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800207c:	429a      	cmp	r2, r3
 800207e:	d908      	bls.n	8002092 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002080:	4b63      	ldr	r3, [pc, #396]	@ (8002210 <HAL_RCC_ClockConfig+0x1f0>)
 8002082:	689b      	ldr	r3, [r3, #8]
 8002084:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	689b      	ldr	r3, [r3, #8]
 800208c:	4960      	ldr	r1, [pc, #384]	@ (8002210 <HAL_RCC_ClockConfig+0x1f0>)
 800208e:	4313      	orrs	r3, r2
 8002090:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f003 0301 	and.w	r3, r3, #1
 800209a:	2b00      	cmp	r3, #0
 800209c:	d04c      	beq.n	8002138 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	685b      	ldr	r3, [r3, #4]
 80020a2:	2b03      	cmp	r3, #3
 80020a4:	d107      	bne.n	80020b6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020a6:	4b5a      	ldr	r3, [pc, #360]	@ (8002210 <HAL_RCC_ClockConfig+0x1f0>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d121      	bne.n	80020f6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80020b2:	2301      	movs	r3, #1
 80020b4:	e0a6      	b.n	8002204 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	685b      	ldr	r3, [r3, #4]
 80020ba:	2b02      	cmp	r3, #2
 80020bc:	d107      	bne.n	80020ce <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80020be:	4b54      	ldr	r3, [pc, #336]	@ (8002210 <HAL_RCC_ClockConfig+0x1f0>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d115      	bne.n	80020f6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80020ca:	2301      	movs	r3, #1
 80020cc:	e09a      	b.n	8002204 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	685b      	ldr	r3, [r3, #4]
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d107      	bne.n	80020e6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80020d6:	4b4e      	ldr	r3, [pc, #312]	@ (8002210 <HAL_RCC_ClockConfig+0x1f0>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f003 0302 	and.w	r3, r3, #2
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d109      	bne.n	80020f6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80020e2:	2301      	movs	r3, #1
 80020e4:	e08e      	b.n	8002204 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80020e6:	4b4a      	ldr	r3, [pc, #296]	@ (8002210 <HAL_RCC_ClockConfig+0x1f0>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d101      	bne.n	80020f6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80020f2:	2301      	movs	r3, #1
 80020f4:	e086      	b.n	8002204 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80020f6:	4b46      	ldr	r3, [pc, #280]	@ (8002210 <HAL_RCC_ClockConfig+0x1f0>)
 80020f8:	689b      	ldr	r3, [r3, #8]
 80020fa:	f023 0203 	bic.w	r2, r3, #3
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	685b      	ldr	r3, [r3, #4]
 8002102:	4943      	ldr	r1, [pc, #268]	@ (8002210 <HAL_RCC_ClockConfig+0x1f0>)
 8002104:	4313      	orrs	r3, r2
 8002106:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002108:	f7ff f86a 	bl	80011e0 <HAL_GetTick>
 800210c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800210e:	e00a      	b.n	8002126 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002110:	f7ff f866 	bl	80011e0 <HAL_GetTick>
 8002114:	4602      	mov	r2, r0
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	1ad3      	subs	r3, r2, r3
 800211a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800211e:	4293      	cmp	r3, r2
 8002120:	d901      	bls.n	8002126 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002122:	2303      	movs	r3, #3
 8002124:	e06e      	b.n	8002204 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002126:	4b3a      	ldr	r3, [pc, #232]	@ (8002210 <HAL_RCC_ClockConfig+0x1f0>)
 8002128:	689b      	ldr	r3, [r3, #8]
 800212a:	f003 020c 	and.w	r2, r3, #12
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	685b      	ldr	r3, [r3, #4]
 8002132:	009b      	lsls	r3, r3, #2
 8002134:	429a      	cmp	r2, r3
 8002136:	d1eb      	bne.n	8002110 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f003 0302 	and.w	r3, r3, #2
 8002140:	2b00      	cmp	r3, #0
 8002142:	d010      	beq.n	8002166 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	689a      	ldr	r2, [r3, #8]
 8002148:	4b31      	ldr	r3, [pc, #196]	@ (8002210 <HAL_RCC_ClockConfig+0x1f0>)
 800214a:	689b      	ldr	r3, [r3, #8]
 800214c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002150:	429a      	cmp	r2, r3
 8002152:	d208      	bcs.n	8002166 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002154:	4b2e      	ldr	r3, [pc, #184]	@ (8002210 <HAL_RCC_ClockConfig+0x1f0>)
 8002156:	689b      	ldr	r3, [r3, #8]
 8002158:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	689b      	ldr	r3, [r3, #8]
 8002160:	492b      	ldr	r1, [pc, #172]	@ (8002210 <HAL_RCC_ClockConfig+0x1f0>)
 8002162:	4313      	orrs	r3, r2
 8002164:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002166:	4b29      	ldr	r3, [pc, #164]	@ (800220c <HAL_RCC_ClockConfig+0x1ec>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f003 0307 	and.w	r3, r3, #7
 800216e:	683a      	ldr	r2, [r7, #0]
 8002170:	429a      	cmp	r2, r3
 8002172:	d210      	bcs.n	8002196 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002174:	4b25      	ldr	r3, [pc, #148]	@ (800220c <HAL_RCC_ClockConfig+0x1ec>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f023 0207 	bic.w	r2, r3, #7
 800217c:	4923      	ldr	r1, [pc, #140]	@ (800220c <HAL_RCC_ClockConfig+0x1ec>)
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	4313      	orrs	r3, r2
 8002182:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002184:	4b21      	ldr	r3, [pc, #132]	@ (800220c <HAL_RCC_ClockConfig+0x1ec>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f003 0307 	and.w	r3, r3, #7
 800218c:	683a      	ldr	r2, [r7, #0]
 800218e:	429a      	cmp	r2, r3
 8002190:	d001      	beq.n	8002196 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002192:	2301      	movs	r3, #1
 8002194:	e036      	b.n	8002204 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f003 0304 	and.w	r3, r3, #4
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d008      	beq.n	80021b4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80021a2:	4b1b      	ldr	r3, [pc, #108]	@ (8002210 <HAL_RCC_ClockConfig+0x1f0>)
 80021a4:	689b      	ldr	r3, [r3, #8]
 80021a6:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	68db      	ldr	r3, [r3, #12]
 80021ae:	4918      	ldr	r1, [pc, #96]	@ (8002210 <HAL_RCC_ClockConfig+0x1f0>)
 80021b0:	4313      	orrs	r3, r2
 80021b2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f003 0308 	and.w	r3, r3, #8
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d009      	beq.n	80021d4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80021c0:	4b13      	ldr	r3, [pc, #76]	@ (8002210 <HAL_RCC_ClockConfig+0x1f0>)
 80021c2:	689b      	ldr	r3, [r3, #8]
 80021c4:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	691b      	ldr	r3, [r3, #16]
 80021cc:	00db      	lsls	r3, r3, #3
 80021ce:	4910      	ldr	r1, [pc, #64]	@ (8002210 <HAL_RCC_ClockConfig+0x1f0>)
 80021d0:	4313      	orrs	r3, r2
 80021d2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80021d4:	f000 f824 	bl	8002220 <HAL_RCC_GetSysClockFreq>
 80021d8:	4602      	mov	r2, r0
 80021da:	4b0d      	ldr	r3, [pc, #52]	@ (8002210 <HAL_RCC_ClockConfig+0x1f0>)
 80021dc:	689b      	ldr	r3, [r3, #8]
 80021de:	091b      	lsrs	r3, r3, #4
 80021e0:	f003 030f 	and.w	r3, r3, #15
 80021e4:	490b      	ldr	r1, [pc, #44]	@ (8002214 <HAL_RCC_ClockConfig+0x1f4>)
 80021e6:	5ccb      	ldrb	r3, [r1, r3]
 80021e8:	f003 031f 	and.w	r3, r3, #31
 80021ec:	fa22 f303 	lsr.w	r3, r2, r3
 80021f0:	4a09      	ldr	r2, [pc, #36]	@ (8002218 <HAL_RCC_ClockConfig+0x1f8>)
 80021f2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80021f4:	4b09      	ldr	r3, [pc, #36]	@ (800221c <HAL_RCC_ClockConfig+0x1fc>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4618      	mov	r0, r3
 80021fa:	f7fe ffa1 	bl	8001140 <HAL_InitTick>
 80021fe:	4603      	mov	r3, r0
 8002200:	72fb      	strb	r3, [r7, #11]

  return status;
 8002202:	7afb      	ldrb	r3, [r7, #11]
}
 8002204:	4618      	mov	r0, r3
 8002206:	3710      	adds	r7, #16
 8002208:	46bd      	mov	sp, r7
 800220a:	bd80      	pop	{r7, pc}
 800220c:	40022000 	.word	0x40022000
 8002210:	40021000 	.word	0x40021000
 8002214:	08003d6c 	.word	0x08003d6c
 8002218:	20000024 	.word	0x20000024
 800221c:	20000028 	.word	0x20000028

08002220 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002220:	b480      	push	{r7}
 8002222:	b089      	sub	sp, #36	@ 0x24
 8002224:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002226:	2300      	movs	r3, #0
 8002228:	61fb      	str	r3, [r7, #28]
 800222a:	2300      	movs	r3, #0
 800222c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800222e:	4b3e      	ldr	r3, [pc, #248]	@ (8002328 <HAL_RCC_GetSysClockFreq+0x108>)
 8002230:	689b      	ldr	r3, [r3, #8]
 8002232:	f003 030c 	and.w	r3, r3, #12
 8002236:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002238:	4b3b      	ldr	r3, [pc, #236]	@ (8002328 <HAL_RCC_GetSysClockFreq+0x108>)
 800223a:	68db      	ldr	r3, [r3, #12]
 800223c:	f003 0303 	and.w	r3, r3, #3
 8002240:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002242:	693b      	ldr	r3, [r7, #16]
 8002244:	2b00      	cmp	r3, #0
 8002246:	d005      	beq.n	8002254 <HAL_RCC_GetSysClockFreq+0x34>
 8002248:	693b      	ldr	r3, [r7, #16]
 800224a:	2b0c      	cmp	r3, #12
 800224c:	d121      	bne.n	8002292 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	2b01      	cmp	r3, #1
 8002252:	d11e      	bne.n	8002292 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002254:	4b34      	ldr	r3, [pc, #208]	@ (8002328 <HAL_RCC_GetSysClockFreq+0x108>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f003 0308 	and.w	r3, r3, #8
 800225c:	2b00      	cmp	r3, #0
 800225e:	d107      	bne.n	8002270 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002260:	4b31      	ldr	r3, [pc, #196]	@ (8002328 <HAL_RCC_GetSysClockFreq+0x108>)
 8002262:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002266:	0a1b      	lsrs	r3, r3, #8
 8002268:	f003 030f 	and.w	r3, r3, #15
 800226c:	61fb      	str	r3, [r7, #28]
 800226e:	e005      	b.n	800227c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002270:	4b2d      	ldr	r3, [pc, #180]	@ (8002328 <HAL_RCC_GetSysClockFreq+0x108>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	091b      	lsrs	r3, r3, #4
 8002276:	f003 030f 	and.w	r3, r3, #15
 800227a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800227c:	4a2b      	ldr	r2, [pc, #172]	@ (800232c <HAL_RCC_GetSysClockFreq+0x10c>)
 800227e:	69fb      	ldr	r3, [r7, #28]
 8002280:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002284:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002286:	693b      	ldr	r3, [r7, #16]
 8002288:	2b00      	cmp	r3, #0
 800228a:	d10d      	bne.n	80022a8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800228c:	69fb      	ldr	r3, [r7, #28]
 800228e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002290:	e00a      	b.n	80022a8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002292:	693b      	ldr	r3, [r7, #16]
 8002294:	2b04      	cmp	r3, #4
 8002296:	d102      	bne.n	800229e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002298:	4b25      	ldr	r3, [pc, #148]	@ (8002330 <HAL_RCC_GetSysClockFreq+0x110>)
 800229a:	61bb      	str	r3, [r7, #24]
 800229c:	e004      	b.n	80022a8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800229e:	693b      	ldr	r3, [r7, #16]
 80022a0:	2b08      	cmp	r3, #8
 80022a2:	d101      	bne.n	80022a8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80022a4:	4b23      	ldr	r3, [pc, #140]	@ (8002334 <HAL_RCC_GetSysClockFreq+0x114>)
 80022a6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80022a8:	693b      	ldr	r3, [r7, #16]
 80022aa:	2b0c      	cmp	r3, #12
 80022ac:	d134      	bne.n	8002318 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80022ae:	4b1e      	ldr	r3, [pc, #120]	@ (8002328 <HAL_RCC_GetSysClockFreq+0x108>)
 80022b0:	68db      	ldr	r3, [r3, #12]
 80022b2:	f003 0303 	and.w	r3, r3, #3
 80022b6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80022b8:	68bb      	ldr	r3, [r7, #8]
 80022ba:	2b02      	cmp	r3, #2
 80022bc:	d003      	beq.n	80022c6 <HAL_RCC_GetSysClockFreq+0xa6>
 80022be:	68bb      	ldr	r3, [r7, #8]
 80022c0:	2b03      	cmp	r3, #3
 80022c2:	d003      	beq.n	80022cc <HAL_RCC_GetSysClockFreq+0xac>
 80022c4:	e005      	b.n	80022d2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80022c6:	4b1a      	ldr	r3, [pc, #104]	@ (8002330 <HAL_RCC_GetSysClockFreq+0x110>)
 80022c8:	617b      	str	r3, [r7, #20]
      break;
 80022ca:	e005      	b.n	80022d8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80022cc:	4b19      	ldr	r3, [pc, #100]	@ (8002334 <HAL_RCC_GetSysClockFreq+0x114>)
 80022ce:	617b      	str	r3, [r7, #20]
      break;
 80022d0:	e002      	b.n	80022d8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80022d2:	69fb      	ldr	r3, [r7, #28]
 80022d4:	617b      	str	r3, [r7, #20]
      break;
 80022d6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80022d8:	4b13      	ldr	r3, [pc, #76]	@ (8002328 <HAL_RCC_GetSysClockFreq+0x108>)
 80022da:	68db      	ldr	r3, [r3, #12]
 80022dc:	091b      	lsrs	r3, r3, #4
 80022de:	f003 0307 	and.w	r3, r3, #7
 80022e2:	3301      	adds	r3, #1
 80022e4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80022e6:	4b10      	ldr	r3, [pc, #64]	@ (8002328 <HAL_RCC_GetSysClockFreq+0x108>)
 80022e8:	68db      	ldr	r3, [r3, #12]
 80022ea:	0a1b      	lsrs	r3, r3, #8
 80022ec:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80022f0:	697a      	ldr	r2, [r7, #20]
 80022f2:	fb03 f202 	mul.w	r2, r3, r2
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80022fc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80022fe:	4b0a      	ldr	r3, [pc, #40]	@ (8002328 <HAL_RCC_GetSysClockFreq+0x108>)
 8002300:	68db      	ldr	r3, [r3, #12]
 8002302:	0e5b      	lsrs	r3, r3, #25
 8002304:	f003 0303 	and.w	r3, r3, #3
 8002308:	3301      	adds	r3, #1
 800230a:	005b      	lsls	r3, r3, #1
 800230c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800230e:	697a      	ldr	r2, [r7, #20]
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	fbb2 f3f3 	udiv	r3, r2, r3
 8002316:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002318:	69bb      	ldr	r3, [r7, #24]
}
 800231a:	4618      	mov	r0, r3
 800231c:	3724      	adds	r7, #36	@ 0x24
 800231e:	46bd      	mov	sp, r7
 8002320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002324:	4770      	bx	lr
 8002326:	bf00      	nop
 8002328:	40021000 	.word	0x40021000
 800232c:	08003d84 	.word	0x08003d84
 8002330:	00f42400 	.word	0x00f42400
 8002334:	007a1200 	.word	0x007a1200

08002338 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002338:	b480      	push	{r7}
 800233a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800233c:	4b03      	ldr	r3, [pc, #12]	@ (800234c <HAL_RCC_GetHCLKFreq+0x14>)
 800233e:	681b      	ldr	r3, [r3, #0]
}
 8002340:	4618      	mov	r0, r3
 8002342:	46bd      	mov	sp, r7
 8002344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002348:	4770      	bx	lr
 800234a:	bf00      	nop
 800234c:	20000024 	.word	0x20000024

08002350 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002354:	f7ff fff0 	bl	8002338 <HAL_RCC_GetHCLKFreq>
 8002358:	4602      	mov	r2, r0
 800235a:	4b06      	ldr	r3, [pc, #24]	@ (8002374 <HAL_RCC_GetPCLK1Freq+0x24>)
 800235c:	689b      	ldr	r3, [r3, #8]
 800235e:	0a1b      	lsrs	r3, r3, #8
 8002360:	f003 0307 	and.w	r3, r3, #7
 8002364:	4904      	ldr	r1, [pc, #16]	@ (8002378 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002366:	5ccb      	ldrb	r3, [r1, r3]
 8002368:	f003 031f 	and.w	r3, r3, #31
 800236c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002370:	4618      	mov	r0, r3
 8002372:	bd80      	pop	{r7, pc}
 8002374:	40021000 	.word	0x40021000
 8002378:	08003d7c 	.word	0x08003d7c

0800237c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002380:	f7ff ffda 	bl	8002338 <HAL_RCC_GetHCLKFreq>
 8002384:	4602      	mov	r2, r0
 8002386:	4b06      	ldr	r3, [pc, #24]	@ (80023a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002388:	689b      	ldr	r3, [r3, #8]
 800238a:	0adb      	lsrs	r3, r3, #11
 800238c:	f003 0307 	and.w	r3, r3, #7
 8002390:	4904      	ldr	r1, [pc, #16]	@ (80023a4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002392:	5ccb      	ldrb	r3, [r1, r3]
 8002394:	f003 031f 	and.w	r3, r3, #31
 8002398:	fa22 f303 	lsr.w	r3, r2, r3
}
 800239c:	4618      	mov	r0, r3
 800239e:	bd80      	pop	{r7, pc}
 80023a0:	40021000 	.word	0x40021000
 80023a4:	08003d7c 	.word	0x08003d7c

080023a8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b086      	sub	sp, #24
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80023b0:	2300      	movs	r3, #0
 80023b2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80023b4:	4b2a      	ldr	r3, [pc, #168]	@ (8002460 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80023b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023b8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d003      	beq.n	80023c8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80023c0:	f7ff f9b6 	bl	8001730 <HAL_PWREx_GetVoltageRange>
 80023c4:	6178      	str	r0, [r7, #20]
 80023c6:	e014      	b.n	80023f2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80023c8:	4b25      	ldr	r3, [pc, #148]	@ (8002460 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80023ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023cc:	4a24      	ldr	r2, [pc, #144]	@ (8002460 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80023ce:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80023d2:	6593      	str	r3, [r2, #88]	@ 0x58
 80023d4:	4b22      	ldr	r3, [pc, #136]	@ (8002460 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80023d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023d8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023dc:	60fb      	str	r3, [r7, #12]
 80023de:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80023e0:	f7ff f9a6 	bl	8001730 <HAL_PWREx_GetVoltageRange>
 80023e4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80023e6:	4b1e      	ldr	r3, [pc, #120]	@ (8002460 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80023e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023ea:	4a1d      	ldr	r2, [pc, #116]	@ (8002460 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80023ec:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80023f0:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80023f2:	697b      	ldr	r3, [r7, #20]
 80023f4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80023f8:	d10b      	bne.n	8002412 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	2b80      	cmp	r3, #128	@ 0x80
 80023fe:	d919      	bls.n	8002434 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2ba0      	cmp	r3, #160	@ 0xa0
 8002404:	d902      	bls.n	800240c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002406:	2302      	movs	r3, #2
 8002408:	613b      	str	r3, [r7, #16]
 800240a:	e013      	b.n	8002434 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800240c:	2301      	movs	r3, #1
 800240e:	613b      	str	r3, [r7, #16]
 8002410:	e010      	b.n	8002434 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	2b80      	cmp	r3, #128	@ 0x80
 8002416:	d902      	bls.n	800241e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002418:	2303      	movs	r3, #3
 800241a:	613b      	str	r3, [r7, #16]
 800241c:	e00a      	b.n	8002434 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	2b80      	cmp	r3, #128	@ 0x80
 8002422:	d102      	bne.n	800242a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002424:	2302      	movs	r3, #2
 8002426:	613b      	str	r3, [r7, #16]
 8002428:	e004      	b.n	8002434 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	2b70      	cmp	r3, #112	@ 0x70
 800242e:	d101      	bne.n	8002434 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002430:	2301      	movs	r3, #1
 8002432:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002434:	4b0b      	ldr	r3, [pc, #44]	@ (8002464 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f023 0207 	bic.w	r2, r3, #7
 800243c:	4909      	ldr	r1, [pc, #36]	@ (8002464 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800243e:	693b      	ldr	r3, [r7, #16]
 8002440:	4313      	orrs	r3, r2
 8002442:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002444:	4b07      	ldr	r3, [pc, #28]	@ (8002464 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f003 0307 	and.w	r3, r3, #7
 800244c:	693a      	ldr	r2, [r7, #16]
 800244e:	429a      	cmp	r2, r3
 8002450:	d001      	beq.n	8002456 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002452:	2301      	movs	r3, #1
 8002454:	e000      	b.n	8002458 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002456:	2300      	movs	r3, #0
}
 8002458:	4618      	mov	r0, r3
 800245a:	3718      	adds	r7, #24
 800245c:	46bd      	mov	sp, r7
 800245e:	bd80      	pop	{r7, pc}
 8002460:	40021000 	.word	0x40021000
 8002464:	40022000 	.word	0x40022000

08002468 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b086      	sub	sp, #24
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002470:	2300      	movs	r3, #0
 8002472:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002474:	2300      	movs	r3, #0
 8002476:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002480:	2b00      	cmp	r3, #0
 8002482:	d031      	beq.n	80024e8 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002488:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800248c:	d01a      	beq.n	80024c4 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 800248e:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002492:	d814      	bhi.n	80024be <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002494:	2b00      	cmp	r3, #0
 8002496:	d009      	beq.n	80024ac <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002498:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800249c:	d10f      	bne.n	80024be <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800249e:	4b5d      	ldr	r3, [pc, #372]	@ (8002614 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80024a0:	68db      	ldr	r3, [r3, #12]
 80024a2:	4a5c      	ldr	r2, [pc, #368]	@ (8002614 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80024a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80024a8:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80024aa:	e00c      	b.n	80024c6 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	3304      	adds	r3, #4
 80024b0:	2100      	movs	r1, #0
 80024b2:	4618      	mov	r0, r3
 80024b4:	f000 f9de 	bl	8002874 <RCCEx_PLLSAI1_Config>
 80024b8:	4603      	mov	r3, r0
 80024ba:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80024bc:	e003      	b.n	80024c6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80024be:	2301      	movs	r3, #1
 80024c0:	74fb      	strb	r3, [r7, #19]
      break;
 80024c2:	e000      	b.n	80024c6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 80024c4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80024c6:	7cfb      	ldrb	r3, [r7, #19]
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d10b      	bne.n	80024e4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80024cc:	4b51      	ldr	r3, [pc, #324]	@ (8002614 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80024ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024d2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80024da:	494e      	ldr	r1, [pc, #312]	@ (8002614 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80024dc:	4313      	orrs	r3, r2
 80024de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80024e2:	e001      	b.n	80024e8 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80024e4:	7cfb      	ldrb	r3, [r7, #19]
 80024e6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	f000 809e 	beq.w	8002632 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80024f6:	2300      	movs	r3, #0
 80024f8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80024fa:	4b46      	ldr	r3, [pc, #280]	@ (8002614 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80024fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002502:	2b00      	cmp	r3, #0
 8002504:	d101      	bne.n	800250a <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8002506:	2301      	movs	r3, #1
 8002508:	e000      	b.n	800250c <HAL_RCCEx_PeriphCLKConfig+0xa4>
 800250a:	2300      	movs	r3, #0
 800250c:	2b00      	cmp	r3, #0
 800250e:	d00d      	beq.n	800252c <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002510:	4b40      	ldr	r3, [pc, #256]	@ (8002614 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002512:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002514:	4a3f      	ldr	r2, [pc, #252]	@ (8002614 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002516:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800251a:	6593      	str	r3, [r2, #88]	@ 0x58
 800251c:	4b3d      	ldr	r3, [pc, #244]	@ (8002614 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800251e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002520:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002524:	60bb      	str	r3, [r7, #8]
 8002526:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002528:	2301      	movs	r3, #1
 800252a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800252c:	4b3a      	ldr	r3, [pc, #232]	@ (8002618 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4a39      	ldr	r2, [pc, #228]	@ (8002618 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002532:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002536:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002538:	f7fe fe52 	bl	80011e0 <HAL_GetTick>
 800253c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800253e:	e009      	b.n	8002554 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002540:	f7fe fe4e 	bl	80011e0 <HAL_GetTick>
 8002544:	4602      	mov	r2, r0
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	1ad3      	subs	r3, r2, r3
 800254a:	2b02      	cmp	r3, #2
 800254c:	d902      	bls.n	8002554 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 800254e:	2303      	movs	r3, #3
 8002550:	74fb      	strb	r3, [r7, #19]
        break;
 8002552:	e005      	b.n	8002560 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002554:	4b30      	ldr	r3, [pc, #192]	@ (8002618 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800255c:	2b00      	cmp	r3, #0
 800255e:	d0ef      	beq.n	8002540 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8002560:	7cfb      	ldrb	r3, [r7, #19]
 8002562:	2b00      	cmp	r3, #0
 8002564:	d15a      	bne.n	800261c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002566:	4b2b      	ldr	r3, [pc, #172]	@ (8002614 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002568:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800256c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002570:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002572:	697b      	ldr	r3, [r7, #20]
 8002574:	2b00      	cmp	r3, #0
 8002576:	d01e      	beq.n	80025b6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800257c:	697a      	ldr	r2, [r7, #20]
 800257e:	429a      	cmp	r2, r3
 8002580:	d019      	beq.n	80025b6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002582:	4b24      	ldr	r3, [pc, #144]	@ (8002614 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002584:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002588:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800258c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800258e:	4b21      	ldr	r3, [pc, #132]	@ (8002614 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002590:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002594:	4a1f      	ldr	r2, [pc, #124]	@ (8002614 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002596:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800259a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800259e:	4b1d      	ldr	r3, [pc, #116]	@ (8002614 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80025a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025a4:	4a1b      	ldr	r2, [pc, #108]	@ (8002614 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80025a6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80025aa:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80025ae:	4a19      	ldr	r2, [pc, #100]	@ (8002614 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80025b0:	697b      	ldr	r3, [r7, #20]
 80025b2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80025b6:	697b      	ldr	r3, [r7, #20]
 80025b8:	f003 0301 	and.w	r3, r3, #1
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d016      	beq.n	80025ee <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025c0:	f7fe fe0e 	bl	80011e0 <HAL_GetTick>
 80025c4:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80025c6:	e00b      	b.n	80025e0 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025c8:	f7fe fe0a 	bl	80011e0 <HAL_GetTick>
 80025cc:	4602      	mov	r2, r0
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	1ad3      	subs	r3, r2, r3
 80025d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80025d6:	4293      	cmp	r3, r2
 80025d8:	d902      	bls.n	80025e0 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 80025da:	2303      	movs	r3, #3
 80025dc:	74fb      	strb	r3, [r7, #19]
            break;
 80025de:	e006      	b.n	80025ee <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80025e0:	4b0c      	ldr	r3, [pc, #48]	@ (8002614 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80025e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025e6:	f003 0302 	and.w	r3, r3, #2
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d0ec      	beq.n	80025c8 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 80025ee:	7cfb      	ldrb	r3, [r7, #19]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d10b      	bne.n	800260c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80025f4:	4b07      	ldr	r3, [pc, #28]	@ (8002614 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80025f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025fa:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002602:	4904      	ldr	r1, [pc, #16]	@ (8002614 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002604:	4313      	orrs	r3, r2
 8002606:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800260a:	e009      	b.n	8002620 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800260c:	7cfb      	ldrb	r3, [r7, #19]
 800260e:	74bb      	strb	r3, [r7, #18]
 8002610:	e006      	b.n	8002620 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8002612:	bf00      	nop
 8002614:	40021000 	.word	0x40021000
 8002618:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800261c:	7cfb      	ldrb	r3, [r7, #19]
 800261e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002620:	7c7b      	ldrb	r3, [r7, #17]
 8002622:	2b01      	cmp	r3, #1
 8002624:	d105      	bne.n	8002632 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002626:	4b8a      	ldr	r3, [pc, #552]	@ (8002850 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002628:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800262a:	4a89      	ldr	r2, [pc, #548]	@ (8002850 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800262c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002630:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f003 0301 	and.w	r3, r3, #1
 800263a:	2b00      	cmp	r3, #0
 800263c:	d00a      	beq.n	8002654 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800263e:	4b84      	ldr	r3, [pc, #528]	@ (8002850 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002640:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002644:	f023 0203 	bic.w	r2, r3, #3
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6a1b      	ldr	r3, [r3, #32]
 800264c:	4980      	ldr	r1, [pc, #512]	@ (8002850 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800264e:	4313      	orrs	r3, r2
 8002650:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f003 0302 	and.w	r3, r3, #2
 800265c:	2b00      	cmp	r3, #0
 800265e:	d00a      	beq.n	8002676 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002660:	4b7b      	ldr	r3, [pc, #492]	@ (8002850 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002662:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002666:	f023 020c 	bic.w	r2, r3, #12
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800266e:	4978      	ldr	r1, [pc, #480]	@ (8002850 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002670:	4313      	orrs	r3, r2
 8002672:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f003 0320 	and.w	r3, r3, #32
 800267e:	2b00      	cmp	r3, #0
 8002680:	d00a      	beq.n	8002698 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002682:	4b73      	ldr	r3, [pc, #460]	@ (8002850 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002684:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002688:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002690:	496f      	ldr	r1, [pc, #444]	@ (8002850 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002692:	4313      	orrs	r3, r2
 8002694:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d00a      	beq.n	80026ba <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80026a4:	4b6a      	ldr	r3, [pc, #424]	@ (8002850 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80026a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026aa:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80026b2:	4967      	ldr	r1, [pc, #412]	@ (8002850 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80026b4:	4313      	orrs	r3, r2
 80026b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d00a      	beq.n	80026dc <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80026c6:	4b62      	ldr	r3, [pc, #392]	@ (8002850 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80026c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026cc:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026d4:	495e      	ldr	r1, [pc, #376]	@ (8002850 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80026d6:	4313      	orrs	r3, r2
 80026d8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d00a      	beq.n	80026fe <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80026e8:	4b59      	ldr	r3, [pc, #356]	@ (8002850 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80026ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026ee:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026f6:	4956      	ldr	r1, [pc, #344]	@ (8002850 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80026f8:	4313      	orrs	r3, r2
 80026fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002706:	2b00      	cmp	r3, #0
 8002708:	d00a      	beq.n	8002720 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800270a:	4b51      	ldr	r3, [pc, #324]	@ (8002850 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800270c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002710:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002718:	494d      	ldr	r1, [pc, #308]	@ (8002850 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800271a:	4313      	orrs	r3, r2
 800271c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002728:	2b00      	cmp	r3, #0
 800272a:	d028      	beq.n	800277e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800272c:	4b48      	ldr	r3, [pc, #288]	@ (8002850 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800272e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002732:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800273a:	4945      	ldr	r1, [pc, #276]	@ (8002850 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800273c:	4313      	orrs	r3, r2
 800273e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002746:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800274a:	d106      	bne.n	800275a <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800274c:	4b40      	ldr	r3, [pc, #256]	@ (8002850 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800274e:	68db      	ldr	r3, [r3, #12]
 8002750:	4a3f      	ldr	r2, [pc, #252]	@ (8002850 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002752:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002756:	60d3      	str	r3, [r2, #12]
 8002758:	e011      	b.n	800277e <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800275e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002762:	d10c      	bne.n	800277e <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	3304      	adds	r3, #4
 8002768:	2101      	movs	r1, #1
 800276a:	4618      	mov	r0, r3
 800276c:	f000 f882 	bl	8002874 <RCCEx_PLLSAI1_Config>
 8002770:	4603      	mov	r3, r0
 8002772:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002774:	7cfb      	ldrb	r3, [r7, #19]
 8002776:	2b00      	cmp	r3, #0
 8002778:	d001      	beq.n	800277e <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 800277a:	7cfb      	ldrb	r3, [r7, #19]
 800277c:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002786:	2b00      	cmp	r3, #0
 8002788:	d028      	beq.n	80027dc <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800278a:	4b31      	ldr	r3, [pc, #196]	@ (8002850 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800278c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002790:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002798:	492d      	ldr	r1, [pc, #180]	@ (8002850 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800279a:	4313      	orrs	r3, r2
 800279c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027a4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80027a8:	d106      	bne.n	80027b8 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80027aa:	4b29      	ldr	r3, [pc, #164]	@ (8002850 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80027ac:	68db      	ldr	r3, [r3, #12]
 80027ae:	4a28      	ldr	r2, [pc, #160]	@ (8002850 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80027b0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80027b4:	60d3      	str	r3, [r2, #12]
 80027b6:	e011      	b.n	80027dc <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027bc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80027c0:	d10c      	bne.n	80027dc <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	3304      	adds	r3, #4
 80027c6:	2101      	movs	r1, #1
 80027c8:	4618      	mov	r0, r3
 80027ca:	f000 f853 	bl	8002874 <RCCEx_PLLSAI1_Config>
 80027ce:	4603      	mov	r3, r0
 80027d0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80027d2:	7cfb      	ldrb	r3, [r7, #19]
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d001      	beq.n	80027dc <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 80027d8:	7cfb      	ldrb	r3, [r7, #19]
 80027da:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d01c      	beq.n	8002822 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80027e8:	4b19      	ldr	r3, [pc, #100]	@ (8002850 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80027ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027ee:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80027f6:	4916      	ldr	r1, [pc, #88]	@ (8002850 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80027f8:	4313      	orrs	r3, r2
 80027fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002802:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002806:	d10c      	bne.n	8002822 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	3304      	adds	r3, #4
 800280c:	2102      	movs	r1, #2
 800280e:	4618      	mov	r0, r3
 8002810:	f000 f830 	bl	8002874 <RCCEx_PLLSAI1_Config>
 8002814:	4603      	mov	r3, r0
 8002816:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002818:	7cfb      	ldrb	r3, [r7, #19]
 800281a:	2b00      	cmp	r3, #0
 800281c:	d001      	beq.n	8002822 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 800281e:	7cfb      	ldrb	r3, [r7, #19]
 8002820:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800282a:	2b00      	cmp	r3, #0
 800282c:	d00a      	beq.n	8002844 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800282e:	4b08      	ldr	r3, [pc, #32]	@ (8002850 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002830:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002834:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800283c:	4904      	ldr	r1, [pc, #16]	@ (8002850 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800283e:	4313      	orrs	r3, r2
 8002840:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002844:	7cbb      	ldrb	r3, [r7, #18]
}
 8002846:	4618      	mov	r0, r3
 8002848:	3718      	adds	r7, #24
 800284a:	46bd      	mov	sp, r7
 800284c:	bd80      	pop	{r7, pc}
 800284e:	bf00      	nop
 8002850:	40021000 	.word	0x40021000

08002854 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8002854:	b480      	push	{r7}
 8002856:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8002858:	4b05      	ldr	r3, [pc, #20]	@ (8002870 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4a04      	ldr	r2, [pc, #16]	@ (8002870 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800285e:	f043 0304 	orr.w	r3, r3, #4
 8002862:	6013      	str	r3, [r2, #0]
}
 8002864:	bf00      	nop
 8002866:	46bd      	mov	sp, r7
 8002868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286c:	4770      	bx	lr
 800286e:	bf00      	nop
 8002870:	40021000 	.word	0x40021000

08002874 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b084      	sub	sp, #16
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
 800287c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800287e:	2300      	movs	r3, #0
 8002880:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002882:	4b74      	ldr	r3, [pc, #464]	@ (8002a54 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002884:	68db      	ldr	r3, [r3, #12]
 8002886:	f003 0303 	and.w	r3, r3, #3
 800288a:	2b00      	cmp	r3, #0
 800288c:	d018      	beq.n	80028c0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800288e:	4b71      	ldr	r3, [pc, #452]	@ (8002a54 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002890:	68db      	ldr	r3, [r3, #12]
 8002892:	f003 0203 	and.w	r2, r3, #3
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	429a      	cmp	r2, r3
 800289c:	d10d      	bne.n	80028ba <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
       ||
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d009      	beq.n	80028ba <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80028a6:	4b6b      	ldr	r3, [pc, #428]	@ (8002a54 <RCCEx_PLLSAI1_Config+0x1e0>)
 80028a8:	68db      	ldr	r3, [r3, #12]
 80028aa:	091b      	lsrs	r3, r3, #4
 80028ac:	f003 0307 	and.w	r3, r3, #7
 80028b0:	1c5a      	adds	r2, r3, #1
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	685b      	ldr	r3, [r3, #4]
       ||
 80028b6:	429a      	cmp	r2, r3
 80028b8:	d047      	beq.n	800294a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80028ba:	2301      	movs	r3, #1
 80028bc:	73fb      	strb	r3, [r7, #15]
 80028be:	e044      	b.n	800294a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	2b03      	cmp	r3, #3
 80028c6:	d018      	beq.n	80028fa <RCCEx_PLLSAI1_Config+0x86>
 80028c8:	2b03      	cmp	r3, #3
 80028ca:	d825      	bhi.n	8002918 <RCCEx_PLLSAI1_Config+0xa4>
 80028cc:	2b01      	cmp	r3, #1
 80028ce:	d002      	beq.n	80028d6 <RCCEx_PLLSAI1_Config+0x62>
 80028d0:	2b02      	cmp	r3, #2
 80028d2:	d009      	beq.n	80028e8 <RCCEx_PLLSAI1_Config+0x74>
 80028d4:	e020      	b.n	8002918 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80028d6:	4b5f      	ldr	r3, [pc, #380]	@ (8002a54 <RCCEx_PLLSAI1_Config+0x1e0>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f003 0302 	and.w	r3, r3, #2
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d11d      	bne.n	800291e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80028e2:	2301      	movs	r3, #1
 80028e4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80028e6:	e01a      	b.n	800291e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80028e8:	4b5a      	ldr	r3, [pc, #360]	@ (8002a54 <RCCEx_PLLSAI1_Config+0x1e0>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d116      	bne.n	8002922 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80028f4:	2301      	movs	r3, #1
 80028f6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80028f8:	e013      	b.n	8002922 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80028fa:	4b56      	ldr	r3, [pc, #344]	@ (8002a54 <RCCEx_PLLSAI1_Config+0x1e0>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002902:	2b00      	cmp	r3, #0
 8002904:	d10f      	bne.n	8002926 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002906:	4b53      	ldr	r3, [pc, #332]	@ (8002a54 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800290e:	2b00      	cmp	r3, #0
 8002910:	d109      	bne.n	8002926 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002912:	2301      	movs	r3, #1
 8002914:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002916:	e006      	b.n	8002926 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002918:	2301      	movs	r3, #1
 800291a:	73fb      	strb	r3, [r7, #15]
      break;
 800291c:	e004      	b.n	8002928 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800291e:	bf00      	nop
 8002920:	e002      	b.n	8002928 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002922:	bf00      	nop
 8002924:	e000      	b.n	8002928 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002926:	bf00      	nop
    }

    if(status == HAL_OK)
 8002928:	7bfb      	ldrb	r3, [r7, #15]
 800292a:	2b00      	cmp	r3, #0
 800292c:	d10d      	bne.n	800294a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800292e:	4b49      	ldr	r3, [pc, #292]	@ (8002a54 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002930:	68db      	ldr	r3, [r3, #12]
 8002932:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6819      	ldr	r1, [r3, #0]
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	3b01      	subs	r3, #1
 8002940:	011b      	lsls	r3, r3, #4
 8002942:	430b      	orrs	r3, r1
 8002944:	4943      	ldr	r1, [pc, #268]	@ (8002a54 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002946:	4313      	orrs	r3, r2
 8002948:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800294a:	7bfb      	ldrb	r3, [r7, #15]
 800294c:	2b00      	cmp	r3, #0
 800294e:	d17c      	bne.n	8002a4a <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002950:	4b40      	ldr	r3, [pc, #256]	@ (8002a54 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	4a3f      	ldr	r2, [pc, #252]	@ (8002a54 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002956:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800295a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800295c:	f7fe fc40 	bl	80011e0 <HAL_GetTick>
 8002960:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002962:	e009      	b.n	8002978 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002964:	f7fe fc3c 	bl	80011e0 <HAL_GetTick>
 8002968:	4602      	mov	r2, r0
 800296a:	68bb      	ldr	r3, [r7, #8]
 800296c:	1ad3      	subs	r3, r2, r3
 800296e:	2b02      	cmp	r3, #2
 8002970:	d902      	bls.n	8002978 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002972:	2303      	movs	r3, #3
 8002974:	73fb      	strb	r3, [r7, #15]
        break;
 8002976:	e005      	b.n	8002984 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002978:	4b36      	ldr	r3, [pc, #216]	@ (8002a54 <RCCEx_PLLSAI1_Config+0x1e0>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002980:	2b00      	cmp	r3, #0
 8002982:	d1ef      	bne.n	8002964 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002984:	7bfb      	ldrb	r3, [r7, #15]
 8002986:	2b00      	cmp	r3, #0
 8002988:	d15f      	bne.n	8002a4a <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	2b00      	cmp	r3, #0
 800298e:	d110      	bne.n	80029b2 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002990:	4b30      	ldr	r3, [pc, #192]	@ (8002a54 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002992:	691b      	ldr	r3, [r3, #16]
 8002994:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8002998:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800299c:	687a      	ldr	r2, [r7, #4]
 800299e:	6892      	ldr	r2, [r2, #8]
 80029a0:	0211      	lsls	r1, r2, #8
 80029a2:	687a      	ldr	r2, [r7, #4]
 80029a4:	68d2      	ldr	r2, [r2, #12]
 80029a6:	06d2      	lsls	r2, r2, #27
 80029a8:	430a      	orrs	r2, r1
 80029aa:	492a      	ldr	r1, [pc, #168]	@ (8002a54 <RCCEx_PLLSAI1_Config+0x1e0>)
 80029ac:	4313      	orrs	r3, r2
 80029ae:	610b      	str	r3, [r1, #16]
 80029b0:	e027      	b.n	8002a02 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	2b01      	cmp	r3, #1
 80029b6:	d112      	bne.n	80029de <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80029b8:	4b26      	ldr	r3, [pc, #152]	@ (8002a54 <RCCEx_PLLSAI1_Config+0x1e0>)
 80029ba:	691b      	ldr	r3, [r3, #16]
 80029bc:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 80029c0:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80029c4:	687a      	ldr	r2, [r7, #4]
 80029c6:	6892      	ldr	r2, [r2, #8]
 80029c8:	0211      	lsls	r1, r2, #8
 80029ca:	687a      	ldr	r2, [r7, #4]
 80029cc:	6912      	ldr	r2, [r2, #16]
 80029ce:	0852      	lsrs	r2, r2, #1
 80029d0:	3a01      	subs	r2, #1
 80029d2:	0552      	lsls	r2, r2, #21
 80029d4:	430a      	orrs	r2, r1
 80029d6:	491f      	ldr	r1, [pc, #124]	@ (8002a54 <RCCEx_PLLSAI1_Config+0x1e0>)
 80029d8:	4313      	orrs	r3, r2
 80029da:	610b      	str	r3, [r1, #16]
 80029dc:	e011      	b.n	8002a02 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80029de:	4b1d      	ldr	r3, [pc, #116]	@ (8002a54 <RCCEx_PLLSAI1_Config+0x1e0>)
 80029e0:	691b      	ldr	r3, [r3, #16]
 80029e2:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80029e6:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80029ea:	687a      	ldr	r2, [r7, #4]
 80029ec:	6892      	ldr	r2, [r2, #8]
 80029ee:	0211      	lsls	r1, r2, #8
 80029f0:	687a      	ldr	r2, [r7, #4]
 80029f2:	6952      	ldr	r2, [r2, #20]
 80029f4:	0852      	lsrs	r2, r2, #1
 80029f6:	3a01      	subs	r2, #1
 80029f8:	0652      	lsls	r2, r2, #25
 80029fa:	430a      	orrs	r2, r1
 80029fc:	4915      	ldr	r1, [pc, #84]	@ (8002a54 <RCCEx_PLLSAI1_Config+0x1e0>)
 80029fe:	4313      	orrs	r3, r2
 8002a00:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002a02:	4b14      	ldr	r3, [pc, #80]	@ (8002a54 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	4a13      	ldr	r2, [pc, #76]	@ (8002a54 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002a08:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002a0c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a0e:	f7fe fbe7 	bl	80011e0 <HAL_GetTick>
 8002a12:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002a14:	e009      	b.n	8002a2a <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002a16:	f7fe fbe3 	bl	80011e0 <HAL_GetTick>
 8002a1a:	4602      	mov	r2, r0
 8002a1c:	68bb      	ldr	r3, [r7, #8]
 8002a1e:	1ad3      	subs	r3, r2, r3
 8002a20:	2b02      	cmp	r3, #2
 8002a22:	d902      	bls.n	8002a2a <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8002a24:	2303      	movs	r3, #3
 8002a26:	73fb      	strb	r3, [r7, #15]
          break;
 8002a28:	e005      	b.n	8002a36 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002a2a:	4b0a      	ldr	r3, [pc, #40]	@ (8002a54 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d0ef      	beq.n	8002a16 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8002a36:	7bfb      	ldrb	r3, [r7, #15]
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d106      	bne.n	8002a4a <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002a3c:	4b05      	ldr	r3, [pc, #20]	@ (8002a54 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002a3e:	691a      	ldr	r2, [r3, #16]
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	699b      	ldr	r3, [r3, #24]
 8002a44:	4903      	ldr	r1, [pc, #12]	@ (8002a54 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002a46:	4313      	orrs	r3, r2
 8002a48:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002a4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	3710      	adds	r7, #16
 8002a50:	46bd      	mov	sp, r7
 8002a52:	bd80      	pop	{r7, pc}
 8002a54:	40021000 	.word	0x40021000

08002a58 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b084      	sub	sp, #16
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d101      	bne.n	8002a6a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002a66:	2301      	movs	r3, #1
 8002a68:	e095      	b.n	8002b96 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d108      	bne.n	8002a84 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	685b      	ldr	r3, [r3, #4]
 8002a76:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002a7a:	d009      	beq.n	8002a90 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2200      	movs	r2, #0
 8002a80:	61da      	str	r2, [r3, #28]
 8002a82:	e005      	b.n	8002a90 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2200      	movs	r2, #0
 8002a88:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2200      	movs	r2, #0
 8002a94:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002a9c:	b2db      	uxtb	r3, r3
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d106      	bne.n	8002ab0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002aaa:	6878      	ldr	r0, [r7, #4]
 8002aac:	f7fe f9c2 	bl	8000e34 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2202      	movs	r2, #2
 8002ab4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	681a      	ldr	r2, [r3, #0]
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002ac6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	68db      	ldr	r3, [r3, #12]
 8002acc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002ad0:	d902      	bls.n	8002ad8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	60fb      	str	r3, [r7, #12]
 8002ad6:	e002      	b.n	8002ade <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002ad8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002adc:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	68db      	ldr	r3, [r3, #12]
 8002ae2:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8002ae6:	d007      	beq.n	8002af8 <HAL_SPI_Init+0xa0>
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	68db      	ldr	r3, [r3, #12]
 8002aec:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002af0:	d002      	beq.n	8002af8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	2200      	movs	r2, #0
 8002af6:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	685b      	ldr	r3, [r3, #4]
 8002afc:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	689b      	ldr	r3, [r3, #8]
 8002b04:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002b08:	431a      	orrs	r2, r3
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	691b      	ldr	r3, [r3, #16]
 8002b0e:	f003 0302 	and.w	r3, r3, #2
 8002b12:	431a      	orrs	r2, r3
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	695b      	ldr	r3, [r3, #20]
 8002b18:	f003 0301 	and.w	r3, r3, #1
 8002b1c:	431a      	orrs	r2, r3
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	699b      	ldr	r3, [r3, #24]
 8002b22:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002b26:	431a      	orrs	r2, r3
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	69db      	ldr	r3, [r3, #28]
 8002b2c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002b30:	431a      	orrs	r2, r3
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6a1b      	ldr	r3, [r3, #32]
 8002b36:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b3a:	ea42 0103 	orr.w	r1, r2, r3
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b42:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	430a      	orrs	r2, r1
 8002b4c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	699b      	ldr	r3, [r3, #24]
 8002b52:	0c1b      	lsrs	r3, r3, #16
 8002b54:	f003 0204 	and.w	r2, r3, #4
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b5c:	f003 0310 	and.w	r3, r3, #16
 8002b60:	431a      	orrs	r2, r3
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b66:	f003 0308 	and.w	r3, r3, #8
 8002b6a:	431a      	orrs	r2, r3
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	68db      	ldr	r3, [r3, #12]
 8002b70:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8002b74:	ea42 0103 	orr.w	r1, r2, r3
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	430a      	orrs	r2, r1
 8002b84:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	2200      	movs	r2, #0
 8002b8a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2201      	movs	r2, #1
 8002b90:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8002b94:	2300      	movs	r3, #0
}
 8002b96:	4618      	mov	r0, r3
 8002b98:	3710      	adds	r7, #16
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	bd80      	pop	{r7, pc}

08002b9e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002b9e:	b580      	push	{r7, lr}
 8002ba0:	b08a      	sub	sp, #40	@ 0x28
 8002ba2:	af00      	add	r7, sp, #0
 8002ba4:	60f8      	str	r0, [r7, #12]
 8002ba6:	60b9      	str	r1, [r7, #8]
 8002ba8:	607a      	str	r2, [r7, #4]
 8002baa:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002bac:	2301      	movs	r3, #1
 8002bae:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002bbc:	2b01      	cmp	r3, #1
 8002bbe:	d101      	bne.n	8002bc4 <HAL_SPI_TransmitReceive+0x26>
 8002bc0:	2302      	movs	r3, #2
 8002bc2:	e20a      	b.n	8002fda <HAL_SPI_TransmitReceive+0x43c>
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	2201      	movs	r2, #1
 8002bc8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002bcc:	f7fe fb08 	bl	80011e0 <HAL_GetTick>
 8002bd0:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002bd8:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	685b      	ldr	r3, [r3, #4]
 8002bde:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8002be0:	887b      	ldrh	r3, [r7, #2]
 8002be2:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8002be4:	887b      	ldrh	r3, [r7, #2]
 8002be6:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002be8:	7efb      	ldrb	r3, [r7, #27]
 8002bea:	2b01      	cmp	r3, #1
 8002bec:	d00e      	beq.n	8002c0c <HAL_SPI_TransmitReceive+0x6e>
 8002bee:	697b      	ldr	r3, [r7, #20]
 8002bf0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002bf4:	d106      	bne.n	8002c04 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	689b      	ldr	r3, [r3, #8]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d102      	bne.n	8002c04 <HAL_SPI_TransmitReceive+0x66>
 8002bfe:	7efb      	ldrb	r3, [r7, #27]
 8002c00:	2b04      	cmp	r3, #4
 8002c02:	d003      	beq.n	8002c0c <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8002c04:	2302      	movs	r3, #2
 8002c06:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8002c0a:	e1e0      	b.n	8002fce <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002c0c:	68bb      	ldr	r3, [r7, #8]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d005      	beq.n	8002c1e <HAL_SPI_TransmitReceive+0x80>
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d002      	beq.n	8002c1e <HAL_SPI_TransmitReceive+0x80>
 8002c18:	887b      	ldrh	r3, [r7, #2]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d103      	bne.n	8002c26 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8002c1e:	2301      	movs	r3, #1
 8002c20:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8002c24:	e1d3      	b.n	8002fce <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002c2c:	b2db      	uxtb	r3, r3
 8002c2e:	2b04      	cmp	r3, #4
 8002c30:	d003      	beq.n	8002c3a <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	2205      	movs	r2, #5
 8002c36:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	687a      	ldr	r2, [r7, #4]
 8002c44:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	887a      	ldrh	r2, [r7, #2]
 8002c4a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	887a      	ldrh	r2, [r7, #2]
 8002c52:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	68ba      	ldr	r2, [r7, #8]
 8002c5a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	887a      	ldrh	r2, [r7, #2]
 8002c60:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	887a      	ldrh	r2, [r7, #2]
 8002c66:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	2200      	movs	r2, #0
 8002c72:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	68db      	ldr	r3, [r3, #12]
 8002c78:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002c7c:	d802      	bhi.n	8002c84 <HAL_SPI_TransmitReceive+0xe6>
 8002c7e:	8a3b      	ldrh	r3, [r7, #16]
 8002c80:	2b01      	cmp	r3, #1
 8002c82:	d908      	bls.n	8002c96 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	685a      	ldr	r2, [r3, #4]
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002c92:	605a      	str	r2, [r3, #4]
 8002c94:	e007      	b.n	8002ca6 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	685a      	ldr	r2, [r3, #4]
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002ca4:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002cb0:	2b40      	cmp	r3, #64	@ 0x40
 8002cb2:	d007      	beq.n	8002cc4 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	681a      	ldr	r2, [r3, #0]
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002cc2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	68db      	ldr	r3, [r3, #12]
 8002cc8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002ccc:	f240 8081 	bls.w	8002dd2 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	685b      	ldr	r3, [r3, #4]
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d002      	beq.n	8002cde <HAL_SPI_TransmitReceive+0x140>
 8002cd8:	8a7b      	ldrh	r3, [r7, #18]
 8002cda:	2b01      	cmp	r3, #1
 8002cdc:	d16d      	bne.n	8002dba <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ce2:	881a      	ldrh	r2, [r3, #0]
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002cee:	1c9a      	adds	r2, r3, #2
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002cf8:	b29b      	uxth	r3, r3
 8002cfa:	3b01      	subs	r3, #1
 8002cfc:	b29a      	uxth	r2, r3
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002d02:	e05a      	b.n	8002dba <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	689b      	ldr	r3, [r3, #8]
 8002d0a:	f003 0302 	and.w	r3, r3, #2
 8002d0e:	2b02      	cmp	r3, #2
 8002d10:	d11b      	bne.n	8002d4a <HAL_SPI_TransmitReceive+0x1ac>
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002d16:	b29b      	uxth	r3, r3
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d016      	beq.n	8002d4a <HAL_SPI_TransmitReceive+0x1ac>
 8002d1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d1e:	2b01      	cmp	r3, #1
 8002d20:	d113      	bne.n	8002d4a <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d26:	881a      	ldrh	r2, [r3, #0]
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d32:	1c9a      	adds	r2, r3, #2
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002d3c:	b29b      	uxth	r3, r3
 8002d3e:	3b01      	subs	r3, #1
 8002d40:	b29a      	uxth	r2, r3
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002d46:	2300      	movs	r3, #0
 8002d48:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	689b      	ldr	r3, [r3, #8]
 8002d50:	f003 0301 	and.w	r3, r3, #1
 8002d54:	2b01      	cmp	r3, #1
 8002d56:	d11c      	bne.n	8002d92 <HAL_SPI_TransmitReceive+0x1f4>
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002d5e:	b29b      	uxth	r3, r3
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d016      	beq.n	8002d92 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	68da      	ldr	r2, [r3, #12]
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d6e:	b292      	uxth	r2, r2
 8002d70:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d76:	1c9a      	adds	r2, r3, #2
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002d82:	b29b      	uxth	r3, r3
 8002d84:	3b01      	subs	r3, #1
 8002d86:	b29a      	uxth	r2, r3
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002d8e:	2301      	movs	r3, #1
 8002d90:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002d92:	f7fe fa25 	bl	80011e0 <HAL_GetTick>
 8002d96:	4602      	mov	r2, r0
 8002d98:	69fb      	ldr	r3, [r7, #28]
 8002d9a:	1ad3      	subs	r3, r2, r3
 8002d9c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002d9e:	429a      	cmp	r2, r3
 8002da0:	d80b      	bhi.n	8002dba <HAL_SPI_TransmitReceive+0x21c>
 8002da2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002da4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002da8:	d007      	beq.n	8002dba <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 8002daa:	2303      	movs	r3, #3
 8002dac:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	2201      	movs	r2, #1
 8002db4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8002db8:	e109      	b.n	8002fce <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002dbe:	b29b      	uxth	r3, r3
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d19f      	bne.n	8002d04 <HAL_SPI_TransmitReceive+0x166>
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002dca:	b29b      	uxth	r3, r3
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d199      	bne.n	8002d04 <HAL_SPI_TransmitReceive+0x166>
 8002dd0:	e0e3      	b.n	8002f9a <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	685b      	ldr	r3, [r3, #4]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d003      	beq.n	8002de2 <HAL_SPI_TransmitReceive+0x244>
 8002dda:	8a7b      	ldrh	r3, [r7, #18]
 8002ddc:	2b01      	cmp	r3, #1
 8002dde:	f040 80cf 	bne.w	8002f80 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002de6:	b29b      	uxth	r3, r3
 8002de8:	2b01      	cmp	r3, #1
 8002dea:	d912      	bls.n	8002e12 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002df0:	881a      	ldrh	r2, [r3, #0]
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002dfc:	1c9a      	adds	r2, r3, #2
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002e06:	b29b      	uxth	r3, r3
 8002e08:	3b02      	subs	r3, #2
 8002e0a:	b29a      	uxth	r2, r3
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002e10:	e0b6      	b.n	8002f80 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	330c      	adds	r3, #12
 8002e1c:	7812      	ldrb	r2, [r2, #0]
 8002e1e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e24:	1c5a      	adds	r2, r3, #1
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002e2e:	b29b      	uxth	r3, r3
 8002e30:	3b01      	subs	r3, #1
 8002e32:	b29a      	uxth	r2, r3
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002e38:	e0a2      	b.n	8002f80 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	689b      	ldr	r3, [r3, #8]
 8002e40:	f003 0302 	and.w	r3, r3, #2
 8002e44:	2b02      	cmp	r3, #2
 8002e46:	d134      	bne.n	8002eb2 <HAL_SPI_TransmitReceive+0x314>
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002e4c:	b29b      	uxth	r3, r3
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d02f      	beq.n	8002eb2 <HAL_SPI_TransmitReceive+0x314>
 8002e52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e54:	2b01      	cmp	r3, #1
 8002e56:	d12c      	bne.n	8002eb2 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002e5c:	b29b      	uxth	r3, r3
 8002e5e:	2b01      	cmp	r3, #1
 8002e60:	d912      	bls.n	8002e88 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e66:	881a      	ldrh	r2, [r3, #0]
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e72:	1c9a      	adds	r2, r3, #2
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002e7c:	b29b      	uxth	r3, r3
 8002e7e:	3b02      	subs	r3, #2
 8002e80:	b29a      	uxth	r2, r3
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002e86:	e012      	b.n	8002eae <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	330c      	adds	r3, #12
 8002e92:	7812      	ldrb	r2, [r2, #0]
 8002e94:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e9a:	1c5a      	adds	r2, r3, #1
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002ea4:	b29b      	uxth	r3, r3
 8002ea6:	3b01      	subs	r3, #1
 8002ea8:	b29a      	uxth	r2, r3
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002eae:	2300      	movs	r3, #0
 8002eb0:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	689b      	ldr	r3, [r3, #8]
 8002eb8:	f003 0301 	and.w	r3, r3, #1
 8002ebc:	2b01      	cmp	r3, #1
 8002ebe:	d148      	bne.n	8002f52 <HAL_SPI_TransmitReceive+0x3b4>
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002ec6:	b29b      	uxth	r3, r3
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d042      	beq.n	8002f52 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002ed2:	b29b      	uxth	r3, r3
 8002ed4:	2b01      	cmp	r3, #1
 8002ed6:	d923      	bls.n	8002f20 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	68da      	ldr	r2, [r3, #12]
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ee2:	b292      	uxth	r2, r2
 8002ee4:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002eea:	1c9a      	adds	r2, r3, #2
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002ef6:	b29b      	uxth	r3, r3
 8002ef8:	3b02      	subs	r3, #2
 8002efa:	b29a      	uxth	r2, r3
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002f08:	b29b      	uxth	r3, r3
 8002f0a:	2b01      	cmp	r3, #1
 8002f0c:	d81f      	bhi.n	8002f4e <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	685a      	ldr	r2, [r3, #4]
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002f1c:	605a      	str	r2, [r3, #4]
 8002f1e:	e016      	b.n	8002f4e <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f103 020c 	add.w	r2, r3, #12
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f2c:	7812      	ldrb	r2, [r2, #0]
 8002f2e:	b2d2      	uxtb	r2, r2
 8002f30:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f36:	1c5a      	adds	r2, r3, #1
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002f42:	b29b      	uxth	r3, r3
 8002f44:	3b01      	subs	r3, #1
 8002f46:	b29a      	uxth	r2, r3
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002f4e:	2301      	movs	r3, #1
 8002f50:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002f52:	f7fe f945 	bl	80011e0 <HAL_GetTick>
 8002f56:	4602      	mov	r2, r0
 8002f58:	69fb      	ldr	r3, [r7, #28]
 8002f5a:	1ad3      	subs	r3, r2, r3
 8002f5c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002f5e:	429a      	cmp	r2, r3
 8002f60:	d803      	bhi.n	8002f6a <HAL_SPI_TransmitReceive+0x3cc>
 8002f62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f64:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002f68:	d102      	bne.n	8002f70 <HAL_SPI_TransmitReceive+0x3d2>
 8002f6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d107      	bne.n	8002f80 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 8002f70:	2303      	movs	r3, #3
 8002f72:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	2201      	movs	r2, #1
 8002f7a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8002f7e:	e026      	b.n	8002fce <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002f84:	b29b      	uxth	r3, r3
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	f47f af57 	bne.w	8002e3a <HAL_SPI_TransmitReceive+0x29c>
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002f92:	b29b      	uxth	r3, r3
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	f47f af50 	bne.w	8002e3a <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002f9a:	69fa      	ldr	r2, [r7, #28]
 8002f9c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002f9e:	68f8      	ldr	r0, [r7, #12]
 8002fa0:	f000 f93e 	bl	8003220 <SPI_EndRxTxTransaction>
 8002fa4:	4603      	mov	r3, r0
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d005      	beq.n	8002fb6 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 8002faa:	2301      	movs	r3, #1
 8002fac:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	2220      	movs	r2, #32
 8002fb4:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d003      	beq.n	8002fc6 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002fc4:	e003      	b.n	8002fce <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	2201      	movs	r2, #1
 8002fca:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8002fd6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 8002fda:	4618      	mov	r0, r3
 8002fdc:	3728      	adds	r7, #40	@ 0x28
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	bd80      	pop	{r7, pc}
	...

08002fe4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b088      	sub	sp, #32
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	60f8      	str	r0, [r7, #12]
 8002fec:	60b9      	str	r1, [r7, #8]
 8002fee:	603b      	str	r3, [r7, #0]
 8002ff0:	4613      	mov	r3, r2
 8002ff2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002ff4:	f7fe f8f4 	bl	80011e0 <HAL_GetTick>
 8002ff8:	4602      	mov	r2, r0
 8002ffa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ffc:	1a9b      	subs	r3, r3, r2
 8002ffe:	683a      	ldr	r2, [r7, #0]
 8003000:	4413      	add	r3, r2
 8003002:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003004:	f7fe f8ec 	bl	80011e0 <HAL_GetTick>
 8003008:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800300a:	4b39      	ldr	r3, [pc, #228]	@ (80030f0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	015b      	lsls	r3, r3, #5
 8003010:	0d1b      	lsrs	r3, r3, #20
 8003012:	69fa      	ldr	r2, [r7, #28]
 8003014:	fb02 f303 	mul.w	r3, r2, r3
 8003018:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800301a:	e054      	b.n	80030c6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003022:	d050      	beq.n	80030c6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003024:	f7fe f8dc 	bl	80011e0 <HAL_GetTick>
 8003028:	4602      	mov	r2, r0
 800302a:	69bb      	ldr	r3, [r7, #24]
 800302c:	1ad3      	subs	r3, r2, r3
 800302e:	69fa      	ldr	r2, [r7, #28]
 8003030:	429a      	cmp	r2, r3
 8003032:	d902      	bls.n	800303a <SPI_WaitFlagStateUntilTimeout+0x56>
 8003034:	69fb      	ldr	r3, [r7, #28]
 8003036:	2b00      	cmp	r3, #0
 8003038:	d13d      	bne.n	80030b6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	685a      	ldr	r2, [r3, #4]
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003048:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	685b      	ldr	r3, [r3, #4]
 800304e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003052:	d111      	bne.n	8003078 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	689b      	ldr	r3, [r3, #8]
 8003058:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800305c:	d004      	beq.n	8003068 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	689b      	ldr	r3, [r3, #8]
 8003062:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003066:	d107      	bne.n	8003078 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	681a      	ldr	r2, [r3, #0]
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003076:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800307c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003080:	d10f      	bne.n	80030a2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	681a      	ldr	r2, [r3, #0]
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003090:	601a      	str	r2, [r3, #0]
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	681a      	ldr	r2, [r3, #0]
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80030a0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	2201      	movs	r2, #1
 80030a6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	2200      	movs	r2, #0
 80030ae:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80030b2:	2303      	movs	r3, #3
 80030b4:	e017      	b.n	80030e6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80030b6:	697b      	ldr	r3, [r7, #20]
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d101      	bne.n	80030c0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80030bc:	2300      	movs	r3, #0
 80030be:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80030c0:	697b      	ldr	r3, [r7, #20]
 80030c2:	3b01      	subs	r3, #1
 80030c4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	689a      	ldr	r2, [r3, #8]
 80030cc:	68bb      	ldr	r3, [r7, #8]
 80030ce:	4013      	ands	r3, r2
 80030d0:	68ba      	ldr	r2, [r7, #8]
 80030d2:	429a      	cmp	r2, r3
 80030d4:	bf0c      	ite	eq
 80030d6:	2301      	moveq	r3, #1
 80030d8:	2300      	movne	r3, #0
 80030da:	b2db      	uxtb	r3, r3
 80030dc:	461a      	mov	r2, r3
 80030de:	79fb      	ldrb	r3, [r7, #7]
 80030e0:	429a      	cmp	r2, r3
 80030e2:	d19b      	bne.n	800301c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80030e4:	2300      	movs	r3, #0
}
 80030e6:	4618      	mov	r0, r3
 80030e8:	3720      	adds	r7, #32
 80030ea:	46bd      	mov	sp, r7
 80030ec:	bd80      	pop	{r7, pc}
 80030ee:	bf00      	nop
 80030f0:	20000024 	.word	0x20000024

080030f4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b08a      	sub	sp, #40	@ 0x28
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	60f8      	str	r0, [r7, #12]
 80030fc:	60b9      	str	r1, [r7, #8]
 80030fe:	607a      	str	r2, [r7, #4]
 8003100:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8003102:	2300      	movs	r3, #0
 8003104:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003106:	f7fe f86b 	bl	80011e0 <HAL_GetTick>
 800310a:	4602      	mov	r2, r0
 800310c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800310e:	1a9b      	subs	r3, r3, r2
 8003110:	683a      	ldr	r2, [r7, #0]
 8003112:	4413      	add	r3, r2
 8003114:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8003116:	f7fe f863 	bl	80011e0 <HAL_GetTick>
 800311a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	330c      	adds	r3, #12
 8003122:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003124:	4b3d      	ldr	r3, [pc, #244]	@ (800321c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8003126:	681a      	ldr	r2, [r3, #0]
 8003128:	4613      	mov	r3, r2
 800312a:	009b      	lsls	r3, r3, #2
 800312c:	4413      	add	r3, r2
 800312e:	00da      	lsls	r2, r3, #3
 8003130:	1ad3      	subs	r3, r2, r3
 8003132:	0d1b      	lsrs	r3, r3, #20
 8003134:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003136:	fb02 f303 	mul.w	r3, r2, r3
 800313a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800313c:	e060      	b.n	8003200 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800313e:	68bb      	ldr	r3, [r7, #8]
 8003140:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8003144:	d107      	bne.n	8003156 <SPI_WaitFifoStateUntilTimeout+0x62>
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2b00      	cmp	r3, #0
 800314a:	d104      	bne.n	8003156 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800314c:	69fb      	ldr	r3, [r7, #28]
 800314e:	781b      	ldrb	r3, [r3, #0]
 8003150:	b2db      	uxtb	r3, r3
 8003152:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003154:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800315c:	d050      	beq.n	8003200 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800315e:	f7fe f83f 	bl	80011e0 <HAL_GetTick>
 8003162:	4602      	mov	r2, r0
 8003164:	6a3b      	ldr	r3, [r7, #32]
 8003166:	1ad3      	subs	r3, r2, r3
 8003168:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800316a:	429a      	cmp	r2, r3
 800316c:	d902      	bls.n	8003174 <SPI_WaitFifoStateUntilTimeout+0x80>
 800316e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003170:	2b00      	cmp	r3, #0
 8003172:	d13d      	bne.n	80031f0 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	685a      	ldr	r2, [r3, #4]
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003182:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	685b      	ldr	r3, [r3, #4]
 8003188:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800318c:	d111      	bne.n	80031b2 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	689b      	ldr	r3, [r3, #8]
 8003192:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003196:	d004      	beq.n	80031a2 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	689b      	ldr	r3, [r3, #8]
 800319c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80031a0:	d107      	bne.n	80031b2 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	681a      	ldr	r2, [r3, #0]
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80031b0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031b6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80031ba:	d10f      	bne.n	80031dc <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	681a      	ldr	r2, [r3, #0]
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80031ca:	601a      	str	r2, [r3, #0]
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	681a      	ldr	r2, [r3, #0]
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80031da:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	2201      	movs	r2, #1
 80031e0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	2200      	movs	r2, #0
 80031e8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80031ec:	2303      	movs	r3, #3
 80031ee:	e010      	b.n	8003212 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80031f0:	69bb      	ldr	r3, [r7, #24]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d101      	bne.n	80031fa <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80031f6:	2300      	movs	r3, #0
 80031f8:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 80031fa:	69bb      	ldr	r3, [r7, #24]
 80031fc:	3b01      	subs	r3, #1
 80031fe:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	689a      	ldr	r2, [r3, #8]
 8003206:	68bb      	ldr	r3, [r7, #8]
 8003208:	4013      	ands	r3, r2
 800320a:	687a      	ldr	r2, [r7, #4]
 800320c:	429a      	cmp	r2, r3
 800320e:	d196      	bne.n	800313e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8003210:	2300      	movs	r3, #0
}
 8003212:	4618      	mov	r0, r3
 8003214:	3728      	adds	r7, #40	@ 0x28
 8003216:	46bd      	mov	sp, r7
 8003218:	bd80      	pop	{r7, pc}
 800321a:	bf00      	nop
 800321c:	20000024 	.word	0x20000024

08003220 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	b086      	sub	sp, #24
 8003224:	af02      	add	r7, sp, #8
 8003226:	60f8      	str	r0, [r7, #12]
 8003228:	60b9      	str	r1, [r7, #8]
 800322a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	9300      	str	r3, [sp, #0]
 8003230:	68bb      	ldr	r3, [r7, #8]
 8003232:	2200      	movs	r2, #0
 8003234:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8003238:	68f8      	ldr	r0, [r7, #12]
 800323a:	f7ff ff5b 	bl	80030f4 <SPI_WaitFifoStateUntilTimeout>
 800323e:	4603      	mov	r3, r0
 8003240:	2b00      	cmp	r3, #0
 8003242:	d007      	beq.n	8003254 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003248:	f043 0220 	orr.w	r2, r3, #32
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003250:	2303      	movs	r3, #3
 8003252:	e027      	b.n	80032a4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	9300      	str	r3, [sp, #0]
 8003258:	68bb      	ldr	r3, [r7, #8]
 800325a:	2200      	movs	r2, #0
 800325c:	2180      	movs	r1, #128	@ 0x80
 800325e:	68f8      	ldr	r0, [r7, #12]
 8003260:	f7ff fec0 	bl	8002fe4 <SPI_WaitFlagStateUntilTimeout>
 8003264:	4603      	mov	r3, r0
 8003266:	2b00      	cmp	r3, #0
 8003268:	d007      	beq.n	800327a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800326e:	f043 0220 	orr.w	r2, r3, #32
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003276:	2303      	movs	r3, #3
 8003278:	e014      	b.n	80032a4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	9300      	str	r3, [sp, #0]
 800327e:	68bb      	ldr	r3, [r7, #8]
 8003280:	2200      	movs	r2, #0
 8003282:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8003286:	68f8      	ldr	r0, [r7, #12]
 8003288:	f7ff ff34 	bl	80030f4 <SPI_WaitFifoStateUntilTimeout>
 800328c:	4603      	mov	r3, r0
 800328e:	2b00      	cmp	r3, #0
 8003290:	d007      	beq.n	80032a2 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003296:	f043 0220 	orr.w	r2, r3, #32
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800329e:	2303      	movs	r3, #3
 80032a0:	e000      	b.n	80032a4 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80032a2:	2300      	movs	r3, #0
}
 80032a4:	4618      	mov	r0, r3
 80032a6:	3710      	adds	r7, #16
 80032a8:	46bd      	mov	sp, r7
 80032aa:	bd80      	pop	{r7, pc}

080032ac <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b082      	sub	sp, #8
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d101      	bne.n	80032be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80032ba:	2301      	movs	r3, #1
 80032bc:	e040      	b.n	8003340 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d106      	bne.n	80032d4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	2200      	movs	r2, #0
 80032ca:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80032ce:	6878      	ldr	r0, [r7, #4]
 80032d0:	f7fd fe8a 	bl	8000fe8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2224      	movs	r2, #36	@ 0x24
 80032d8:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	681a      	ldr	r2, [r3, #0]
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f022 0201 	bic.w	r2, r2, #1
 80032e8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d002      	beq.n	80032f8 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80032f2:	6878      	ldr	r0, [r7, #4]
 80032f4:	f000 fade 	bl	80038b4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80032f8:	6878      	ldr	r0, [r7, #4]
 80032fa:	f000 f8af 	bl	800345c <UART_SetConfig>
 80032fe:	4603      	mov	r3, r0
 8003300:	2b01      	cmp	r3, #1
 8003302:	d101      	bne.n	8003308 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003304:	2301      	movs	r3, #1
 8003306:	e01b      	b.n	8003340 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	685a      	ldr	r2, [r3, #4]
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003316:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	689a      	ldr	r2, [r3, #8]
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003326:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	681a      	ldr	r2, [r3, #0]
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f042 0201 	orr.w	r2, r2, #1
 8003336:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003338:	6878      	ldr	r0, [r7, #4]
 800333a:	f000 fb5d 	bl	80039f8 <UART_CheckIdleState>
 800333e:	4603      	mov	r3, r0
}
 8003340:	4618      	mov	r0, r3
 8003342:	3708      	adds	r7, #8
 8003344:	46bd      	mov	sp, r7
 8003346:	bd80      	pop	{r7, pc}

08003348 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	b08a      	sub	sp, #40	@ 0x28
 800334c:	af02      	add	r7, sp, #8
 800334e:	60f8      	str	r0, [r7, #12]
 8003350:	60b9      	str	r1, [r7, #8]
 8003352:	603b      	str	r3, [r7, #0]
 8003354:	4613      	mov	r3, r2
 8003356:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800335c:	2b20      	cmp	r3, #32
 800335e:	d177      	bne.n	8003450 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8003360:	68bb      	ldr	r3, [r7, #8]
 8003362:	2b00      	cmp	r3, #0
 8003364:	d002      	beq.n	800336c <HAL_UART_Transmit+0x24>
 8003366:	88fb      	ldrh	r3, [r7, #6]
 8003368:	2b00      	cmp	r3, #0
 800336a:	d101      	bne.n	8003370 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800336c:	2301      	movs	r3, #1
 800336e:	e070      	b.n	8003452 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	2200      	movs	r2, #0
 8003374:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	2221      	movs	r2, #33	@ 0x21
 800337c:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800337e:	f7fd ff2f 	bl	80011e0 <HAL_GetTick>
 8003382:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	88fa      	ldrh	r2, [r7, #6]
 8003388:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	88fa      	ldrh	r2, [r7, #6]
 8003390:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	689b      	ldr	r3, [r3, #8]
 8003398:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800339c:	d108      	bne.n	80033b0 <HAL_UART_Transmit+0x68>
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	691b      	ldr	r3, [r3, #16]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d104      	bne.n	80033b0 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80033a6:	2300      	movs	r3, #0
 80033a8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80033aa:	68bb      	ldr	r3, [r7, #8]
 80033ac:	61bb      	str	r3, [r7, #24]
 80033ae:	e003      	b.n	80033b8 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80033b0:	68bb      	ldr	r3, [r7, #8]
 80033b2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80033b4:	2300      	movs	r3, #0
 80033b6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80033b8:	e02f      	b.n	800341a <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	9300      	str	r3, [sp, #0]
 80033be:	697b      	ldr	r3, [r7, #20]
 80033c0:	2200      	movs	r2, #0
 80033c2:	2180      	movs	r1, #128	@ 0x80
 80033c4:	68f8      	ldr	r0, [r7, #12]
 80033c6:	f000 fbbf 	bl	8003b48 <UART_WaitOnFlagUntilTimeout>
 80033ca:	4603      	mov	r3, r0
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d004      	beq.n	80033da <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	2220      	movs	r2, #32
 80033d4:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80033d6:	2303      	movs	r3, #3
 80033d8:	e03b      	b.n	8003452 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80033da:	69fb      	ldr	r3, [r7, #28]
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d10b      	bne.n	80033f8 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80033e0:	69bb      	ldr	r3, [r7, #24]
 80033e2:	881a      	ldrh	r2, [r3, #0]
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80033ec:	b292      	uxth	r2, r2
 80033ee:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80033f0:	69bb      	ldr	r3, [r7, #24]
 80033f2:	3302      	adds	r3, #2
 80033f4:	61bb      	str	r3, [r7, #24]
 80033f6:	e007      	b.n	8003408 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80033f8:	69fb      	ldr	r3, [r7, #28]
 80033fa:	781a      	ldrb	r2, [r3, #0]
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8003402:	69fb      	ldr	r3, [r7, #28]
 8003404:	3301      	adds	r3, #1
 8003406:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800340e:	b29b      	uxth	r3, r3
 8003410:	3b01      	subs	r3, #1
 8003412:	b29a      	uxth	r2, r3
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003420:	b29b      	uxth	r3, r3
 8003422:	2b00      	cmp	r3, #0
 8003424:	d1c9      	bne.n	80033ba <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	9300      	str	r3, [sp, #0]
 800342a:	697b      	ldr	r3, [r7, #20]
 800342c:	2200      	movs	r2, #0
 800342e:	2140      	movs	r1, #64	@ 0x40
 8003430:	68f8      	ldr	r0, [r7, #12]
 8003432:	f000 fb89 	bl	8003b48 <UART_WaitOnFlagUntilTimeout>
 8003436:	4603      	mov	r3, r0
 8003438:	2b00      	cmp	r3, #0
 800343a:	d004      	beq.n	8003446 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	2220      	movs	r2, #32
 8003440:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8003442:	2303      	movs	r3, #3
 8003444:	e005      	b.n	8003452 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	2220      	movs	r2, #32
 800344a:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800344c:	2300      	movs	r3, #0
 800344e:	e000      	b.n	8003452 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8003450:	2302      	movs	r3, #2
  }
}
 8003452:	4618      	mov	r0, r3
 8003454:	3720      	adds	r7, #32
 8003456:	46bd      	mov	sp, r7
 8003458:	bd80      	pop	{r7, pc}
	...

0800345c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800345c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003460:	b08a      	sub	sp, #40	@ 0x28
 8003462:	af00      	add	r7, sp, #0
 8003464:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003466:	2300      	movs	r3, #0
 8003468:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	689a      	ldr	r2, [r3, #8]
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	691b      	ldr	r3, [r3, #16]
 8003474:	431a      	orrs	r2, r3
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	695b      	ldr	r3, [r3, #20]
 800347a:	431a      	orrs	r2, r3
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	69db      	ldr	r3, [r3, #28]
 8003480:	4313      	orrs	r3, r2
 8003482:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	681a      	ldr	r2, [r3, #0]
 800348a:	4bb4      	ldr	r3, [pc, #720]	@ (800375c <UART_SetConfig+0x300>)
 800348c:	4013      	ands	r3, r2
 800348e:	68fa      	ldr	r2, [r7, #12]
 8003490:	6812      	ldr	r2, [r2, #0]
 8003492:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003494:	430b      	orrs	r3, r1
 8003496:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	685b      	ldr	r3, [r3, #4]
 800349e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	68da      	ldr	r2, [r3, #12]
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	430a      	orrs	r2, r1
 80034ac:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	699b      	ldr	r3, [r3, #24]
 80034b2:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	4aa9      	ldr	r2, [pc, #676]	@ (8003760 <UART_SetConfig+0x304>)
 80034ba:	4293      	cmp	r3, r2
 80034bc:	d004      	beq.n	80034c8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	6a1b      	ldr	r3, [r3, #32]
 80034c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80034c4:	4313      	orrs	r3, r2
 80034c6:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	689b      	ldr	r3, [r3, #8]
 80034ce:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80034d8:	430a      	orrs	r2, r1
 80034da:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	4aa0      	ldr	r2, [pc, #640]	@ (8003764 <UART_SetConfig+0x308>)
 80034e2:	4293      	cmp	r3, r2
 80034e4:	d126      	bne.n	8003534 <UART_SetConfig+0xd8>
 80034e6:	4ba0      	ldr	r3, [pc, #640]	@ (8003768 <UART_SetConfig+0x30c>)
 80034e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034ec:	f003 0303 	and.w	r3, r3, #3
 80034f0:	2b03      	cmp	r3, #3
 80034f2:	d81b      	bhi.n	800352c <UART_SetConfig+0xd0>
 80034f4:	a201      	add	r2, pc, #4	@ (adr r2, 80034fc <UART_SetConfig+0xa0>)
 80034f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034fa:	bf00      	nop
 80034fc:	0800350d 	.word	0x0800350d
 8003500:	0800351d 	.word	0x0800351d
 8003504:	08003515 	.word	0x08003515
 8003508:	08003525 	.word	0x08003525
 800350c:	2301      	movs	r3, #1
 800350e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003512:	e080      	b.n	8003616 <UART_SetConfig+0x1ba>
 8003514:	2302      	movs	r3, #2
 8003516:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800351a:	e07c      	b.n	8003616 <UART_SetConfig+0x1ba>
 800351c:	2304      	movs	r3, #4
 800351e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003522:	e078      	b.n	8003616 <UART_SetConfig+0x1ba>
 8003524:	2308      	movs	r3, #8
 8003526:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800352a:	e074      	b.n	8003616 <UART_SetConfig+0x1ba>
 800352c:	2310      	movs	r3, #16
 800352e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003532:	e070      	b.n	8003616 <UART_SetConfig+0x1ba>
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	4a8c      	ldr	r2, [pc, #560]	@ (800376c <UART_SetConfig+0x310>)
 800353a:	4293      	cmp	r3, r2
 800353c:	d138      	bne.n	80035b0 <UART_SetConfig+0x154>
 800353e:	4b8a      	ldr	r3, [pc, #552]	@ (8003768 <UART_SetConfig+0x30c>)
 8003540:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003544:	f003 030c 	and.w	r3, r3, #12
 8003548:	2b0c      	cmp	r3, #12
 800354a:	d82d      	bhi.n	80035a8 <UART_SetConfig+0x14c>
 800354c:	a201      	add	r2, pc, #4	@ (adr r2, 8003554 <UART_SetConfig+0xf8>)
 800354e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003552:	bf00      	nop
 8003554:	08003589 	.word	0x08003589
 8003558:	080035a9 	.word	0x080035a9
 800355c:	080035a9 	.word	0x080035a9
 8003560:	080035a9 	.word	0x080035a9
 8003564:	08003599 	.word	0x08003599
 8003568:	080035a9 	.word	0x080035a9
 800356c:	080035a9 	.word	0x080035a9
 8003570:	080035a9 	.word	0x080035a9
 8003574:	08003591 	.word	0x08003591
 8003578:	080035a9 	.word	0x080035a9
 800357c:	080035a9 	.word	0x080035a9
 8003580:	080035a9 	.word	0x080035a9
 8003584:	080035a1 	.word	0x080035a1
 8003588:	2300      	movs	r3, #0
 800358a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800358e:	e042      	b.n	8003616 <UART_SetConfig+0x1ba>
 8003590:	2302      	movs	r3, #2
 8003592:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003596:	e03e      	b.n	8003616 <UART_SetConfig+0x1ba>
 8003598:	2304      	movs	r3, #4
 800359a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800359e:	e03a      	b.n	8003616 <UART_SetConfig+0x1ba>
 80035a0:	2308      	movs	r3, #8
 80035a2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80035a6:	e036      	b.n	8003616 <UART_SetConfig+0x1ba>
 80035a8:	2310      	movs	r3, #16
 80035aa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80035ae:	e032      	b.n	8003616 <UART_SetConfig+0x1ba>
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	4a6a      	ldr	r2, [pc, #424]	@ (8003760 <UART_SetConfig+0x304>)
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d12a      	bne.n	8003610 <UART_SetConfig+0x1b4>
 80035ba:	4b6b      	ldr	r3, [pc, #428]	@ (8003768 <UART_SetConfig+0x30c>)
 80035bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035c0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80035c4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80035c8:	d01a      	beq.n	8003600 <UART_SetConfig+0x1a4>
 80035ca:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80035ce:	d81b      	bhi.n	8003608 <UART_SetConfig+0x1ac>
 80035d0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80035d4:	d00c      	beq.n	80035f0 <UART_SetConfig+0x194>
 80035d6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80035da:	d815      	bhi.n	8003608 <UART_SetConfig+0x1ac>
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d003      	beq.n	80035e8 <UART_SetConfig+0x18c>
 80035e0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80035e4:	d008      	beq.n	80035f8 <UART_SetConfig+0x19c>
 80035e6:	e00f      	b.n	8003608 <UART_SetConfig+0x1ac>
 80035e8:	2300      	movs	r3, #0
 80035ea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80035ee:	e012      	b.n	8003616 <UART_SetConfig+0x1ba>
 80035f0:	2302      	movs	r3, #2
 80035f2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80035f6:	e00e      	b.n	8003616 <UART_SetConfig+0x1ba>
 80035f8:	2304      	movs	r3, #4
 80035fa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80035fe:	e00a      	b.n	8003616 <UART_SetConfig+0x1ba>
 8003600:	2308      	movs	r3, #8
 8003602:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003606:	e006      	b.n	8003616 <UART_SetConfig+0x1ba>
 8003608:	2310      	movs	r3, #16
 800360a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800360e:	e002      	b.n	8003616 <UART_SetConfig+0x1ba>
 8003610:	2310      	movs	r3, #16
 8003612:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	4a51      	ldr	r2, [pc, #324]	@ (8003760 <UART_SetConfig+0x304>)
 800361c:	4293      	cmp	r3, r2
 800361e:	d17a      	bne.n	8003716 <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003620:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003624:	2b08      	cmp	r3, #8
 8003626:	d824      	bhi.n	8003672 <UART_SetConfig+0x216>
 8003628:	a201      	add	r2, pc, #4	@ (adr r2, 8003630 <UART_SetConfig+0x1d4>)
 800362a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800362e:	bf00      	nop
 8003630:	08003655 	.word	0x08003655
 8003634:	08003673 	.word	0x08003673
 8003638:	0800365d 	.word	0x0800365d
 800363c:	08003673 	.word	0x08003673
 8003640:	08003663 	.word	0x08003663
 8003644:	08003673 	.word	0x08003673
 8003648:	08003673 	.word	0x08003673
 800364c:	08003673 	.word	0x08003673
 8003650:	0800366b 	.word	0x0800366b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003654:	f7fe fe7c 	bl	8002350 <HAL_RCC_GetPCLK1Freq>
 8003658:	61f8      	str	r0, [r7, #28]
        break;
 800365a:	e010      	b.n	800367e <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800365c:	4b44      	ldr	r3, [pc, #272]	@ (8003770 <UART_SetConfig+0x314>)
 800365e:	61fb      	str	r3, [r7, #28]
        break;
 8003660:	e00d      	b.n	800367e <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003662:	f7fe fddd 	bl	8002220 <HAL_RCC_GetSysClockFreq>
 8003666:	61f8      	str	r0, [r7, #28]
        break;
 8003668:	e009      	b.n	800367e <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800366a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800366e:	61fb      	str	r3, [r7, #28]
        break;
 8003670:	e005      	b.n	800367e <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 8003672:	2300      	movs	r3, #0
 8003674:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003676:	2301      	movs	r3, #1
 8003678:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800367c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800367e:	69fb      	ldr	r3, [r7, #28]
 8003680:	2b00      	cmp	r3, #0
 8003682:	f000 8107 	beq.w	8003894 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	685a      	ldr	r2, [r3, #4]
 800368a:	4613      	mov	r3, r2
 800368c:	005b      	lsls	r3, r3, #1
 800368e:	4413      	add	r3, r2
 8003690:	69fa      	ldr	r2, [r7, #28]
 8003692:	429a      	cmp	r2, r3
 8003694:	d305      	bcc.n	80036a2 <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	685b      	ldr	r3, [r3, #4]
 800369a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800369c:	69fa      	ldr	r2, [r7, #28]
 800369e:	429a      	cmp	r2, r3
 80036a0:	d903      	bls.n	80036aa <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 80036a2:	2301      	movs	r3, #1
 80036a4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80036a8:	e0f4      	b.n	8003894 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80036aa:	69fb      	ldr	r3, [r7, #28]
 80036ac:	2200      	movs	r2, #0
 80036ae:	461c      	mov	r4, r3
 80036b0:	4615      	mov	r5, r2
 80036b2:	f04f 0200 	mov.w	r2, #0
 80036b6:	f04f 0300 	mov.w	r3, #0
 80036ba:	022b      	lsls	r3, r5, #8
 80036bc:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80036c0:	0222      	lsls	r2, r4, #8
 80036c2:	68f9      	ldr	r1, [r7, #12]
 80036c4:	6849      	ldr	r1, [r1, #4]
 80036c6:	0849      	lsrs	r1, r1, #1
 80036c8:	2000      	movs	r0, #0
 80036ca:	4688      	mov	r8, r1
 80036cc:	4681      	mov	r9, r0
 80036ce:	eb12 0a08 	adds.w	sl, r2, r8
 80036d2:	eb43 0b09 	adc.w	fp, r3, r9
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	685b      	ldr	r3, [r3, #4]
 80036da:	2200      	movs	r2, #0
 80036dc:	603b      	str	r3, [r7, #0]
 80036de:	607a      	str	r2, [r7, #4]
 80036e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80036e4:	4650      	mov	r0, sl
 80036e6:	4659      	mov	r1, fp
 80036e8:	f7fc fd78 	bl	80001dc <__aeabi_uldivmod>
 80036ec:	4602      	mov	r2, r0
 80036ee:	460b      	mov	r3, r1
 80036f0:	4613      	mov	r3, r2
 80036f2:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80036f4:	69bb      	ldr	r3, [r7, #24]
 80036f6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80036fa:	d308      	bcc.n	800370e <UART_SetConfig+0x2b2>
 80036fc:	69bb      	ldr	r3, [r7, #24]
 80036fe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003702:	d204      	bcs.n	800370e <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	69ba      	ldr	r2, [r7, #24]
 800370a:	60da      	str	r2, [r3, #12]
 800370c:	e0c2      	b.n	8003894 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 800370e:	2301      	movs	r3, #1
 8003710:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003714:	e0be      	b.n	8003894 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	69db      	ldr	r3, [r3, #28]
 800371a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800371e:	d16a      	bne.n	80037f6 <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8003720:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003724:	2b08      	cmp	r3, #8
 8003726:	d834      	bhi.n	8003792 <UART_SetConfig+0x336>
 8003728:	a201      	add	r2, pc, #4	@ (adr r2, 8003730 <UART_SetConfig+0x2d4>)
 800372a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800372e:	bf00      	nop
 8003730:	08003755 	.word	0x08003755
 8003734:	08003775 	.word	0x08003775
 8003738:	0800377d 	.word	0x0800377d
 800373c:	08003793 	.word	0x08003793
 8003740:	08003783 	.word	0x08003783
 8003744:	08003793 	.word	0x08003793
 8003748:	08003793 	.word	0x08003793
 800374c:	08003793 	.word	0x08003793
 8003750:	0800378b 	.word	0x0800378b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003754:	f7fe fdfc 	bl	8002350 <HAL_RCC_GetPCLK1Freq>
 8003758:	61f8      	str	r0, [r7, #28]
        break;
 800375a:	e020      	b.n	800379e <UART_SetConfig+0x342>
 800375c:	efff69f3 	.word	0xefff69f3
 8003760:	40008000 	.word	0x40008000
 8003764:	40013800 	.word	0x40013800
 8003768:	40021000 	.word	0x40021000
 800376c:	40004400 	.word	0x40004400
 8003770:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003774:	f7fe fe02 	bl	800237c <HAL_RCC_GetPCLK2Freq>
 8003778:	61f8      	str	r0, [r7, #28]
        break;
 800377a:	e010      	b.n	800379e <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800377c:	4b4c      	ldr	r3, [pc, #304]	@ (80038b0 <UART_SetConfig+0x454>)
 800377e:	61fb      	str	r3, [r7, #28]
        break;
 8003780:	e00d      	b.n	800379e <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003782:	f7fe fd4d 	bl	8002220 <HAL_RCC_GetSysClockFreq>
 8003786:	61f8      	str	r0, [r7, #28]
        break;
 8003788:	e009      	b.n	800379e <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800378a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800378e:	61fb      	str	r3, [r7, #28]
        break;
 8003790:	e005      	b.n	800379e <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 8003792:	2300      	movs	r3, #0
 8003794:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003796:	2301      	movs	r3, #1
 8003798:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800379c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800379e:	69fb      	ldr	r3, [r7, #28]
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d077      	beq.n	8003894 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80037a4:	69fb      	ldr	r3, [r7, #28]
 80037a6:	005a      	lsls	r2, r3, #1
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	685b      	ldr	r3, [r3, #4]
 80037ac:	085b      	lsrs	r3, r3, #1
 80037ae:	441a      	add	r2, r3
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	685b      	ldr	r3, [r3, #4]
 80037b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80037b8:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80037ba:	69bb      	ldr	r3, [r7, #24]
 80037bc:	2b0f      	cmp	r3, #15
 80037be:	d916      	bls.n	80037ee <UART_SetConfig+0x392>
 80037c0:	69bb      	ldr	r3, [r7, #24]
 80037c2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80037c6:	d212      	bcs.n	80037ee <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80037c8:	69bb      	ldr	r3, [r7, #24]
 80037ca:	b29b      	uxth	r3, r3
 80037cc:	f023 030f 	bic.w	r3, r3, #15
 80037d0:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80037d2:	69bb      	ldr	r3, [r7, #24]
 80037d4:	085b      	lsrs	r3, r3, #1
 80037d6:	b29b      	uxth	r3, r3
 80037d8:	f003 0307 	and.w	r3, r3, #7
 80037dc:	b29a      	uxth	r2, r3
 80037de:	8afb      	ldrh	r3, [r7, #22]
 80037e0:	4313      	orrs	r3, r2
 80037e2:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	8afa      	ldrh	r2, [r7, #22]
 80037ea:	60da      	str	r2, [r3, #12]
 80037ec:	e052      	b.n	8003894 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 80037ee:	2301      	movs	r3, #1
 80037f0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80037f4:	e04e      	b.n	8003894 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 80037f6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80037fa:	2b08      	cmp	r3, #8
 80037fc:	d827      	bhi.n	800384e <UART_SetConfig+0x3f2>
 80037fe:	a201      	add	r2, pc, #4	@ (adr r2, 8003804 <UART_SetConfig+0x3a8>)
 8003800:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003804:	08003829 	.word	0x08003829
 8003808:	08003831 	.word	0x08003831
 800380c:	08003839 	.word	0x08003839
 8003810:	0800384f 	.word	0x0800384f
 8003814:	0800383f 	.word	0x0800383f
 8003818:	0800384f 	.word	0x0800384f
 800381c:	0800384f 	.word	0x0800384f
 8003820:	0800384f 	.word	0x0800384f
 8003824:	08003847 	.word	0x08003847
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003828:	f7fe fd92 	bl	8002350 <HAL_RCC_GetPCLK1Freq>
 800382c:	61f8      	str	r0, [r7, #28]
        break;
 800382e:	e014      	b.n	800385a <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003830:	f7fe fda4 	bl	800237c <HAL_RCC_GetPCLK2Freq>
 8003834:	61f8      	str	r0, [r7, #28]
        break;
 8003836:	e010      	b.n	800385a <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003838:	4b1d      	ldr	r3, [pc, #116]	@ (80038b0 <UART_SetConfig+0x454>)
 800383a:	61fb      	str	r3, [r7, #28]
        break;
 800383c:	e00d      	b.n	800385a <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800383e:	f7fe fcef 	bl	8002220 <HAL_RCC_GetSysClockFreq>
 8003842:	61f8      	str	r0, [r7, #28]
        break;
 8003844:	e009      	b.n	800385a <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003846:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800384a:	61fb      	str	r3, [r7, #28]
        break;
 800384c:	e005      	b.n	800385a <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 800384e:	2300      	movs	r3, #0
 8003850:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003852:	2301      	movs	r3, #1
 8003854:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003858:	bf00      	nop
    }

    if (pclk != 0U)
 800385a:	69fb      	ldr	r3, [r7, #28]
 800385c:	2b00      	cmp	r3, #0
 800385e:	d019      	beq.n	8003894 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	685b      	ldr	r3, [r3, #4]
 8003864:	085a      	lsrs	r2, r3, #1
 8003866:	69fb      	ldr	r3, [r7, #28]
 8003868:	441a      	add	r2, r3
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	685b      	ldr	r3, [r3, #4]
 800386e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003872:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003874:	69bb      	ldr	r3, [r7, #24]
 8003876:	2b0f      	cmp	r3, #15
 8003878:	d909      	bls.n	800388e <UART_SetConfig+0x432>
 800387a:	69bb      	ldr	r3, [r7, #24]
 800387c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003880:	d205      	bcs.n	800388e <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003882:	69bb      	ldr	r3, [r7, #24]
 8003884:	b29a      	uxth	r2, r3
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	60da      	str	r2, [r3, #12]
 800388c:	e002      	b.n	8003894 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 800388e:	2301      	movs	r3, #1
 8003890:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	2200      	movs	r2, #0
 8003898:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	2200      	movs	r2, #0
 800389e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80038a0:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 80038a4:	4618      	mov	r0, r3
 80038a6:	3728      	adds	r7, #40	@ 0x28
 80038a8:	46bd      	mov	sp, r7
 80038aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80038ae:	bf00      	nop
 80038b0:	00f42400 	.word	0x00f42400

080038b4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80038b4:	b480      	push	{r7}
 80038b6:	b083      	sub	sp, #12
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038c0:	f003 0308 	and.w	r3, r3, #8
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d00a      	beq.n	80038de <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	685b      	ldr	r3, [r3, #4]
 80038ce:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	430a      	orrs	r2, r1
 80038dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038e2:	f003 0301 	and.w	r3, r3, #1
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d00a      	beq.n	8003900 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	685b      	ldr	r3, [r3, #4]
 80038f0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	430a      	orrs	r2, r1
 80038fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003904:	f003 0302 	and.w	r3, r3, #2
 8003908:	2b00      	cmp	r3, #0
 800390a:	d00a      	beq.n	8003922 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	685b      	ldr	r3, [r3, #4]
 8003912:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	430a      	orrs	r2, r1
 8003920:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003926:	f003 0304 	and.w	r3, r3, #4
 800392a:	2b00      	cmp	r3, #0
 800392c:	d00a      	beq.n	8003944 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	685b      	ldr	r3, [r3, #4]
 8003934:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	430a      	orrs	r2, r1
 8003942:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003948:	f003 0310 	and.w	r3, r3, #16
 800394c:	2b00      	cmp	r3, #0
 800394e:	d00a      	beq.n	8003966 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	689b      	ldr	r3, [r3, #8]
 8003956:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	430a      	orrs	r2, r1
 8003964:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800396a:	f003 0320 	and.w	r3, r3, #32
 800396e:	2b00      	cmp	r3, #0
 8003970:	d00a      	beq.n	8003988 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	689b      	ldr	r3, [r3, #8]
 8003978:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	430a      	orrs	r2, r1
 8003986:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800398c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003990:	2b00      	cmp	r3, #0
 8003992:	d01a      	beq.n	80039ca <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	685b      	ldr	r3, [r3, #4]
 800399a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	430a      	orrs	r2, r1
 80039a8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039ae:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80039b2:	d10a      	bne.n	80039ca <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	685b      	ldr	r3, [r3, #4]
 80039ba:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	430a      	orrs	r2, r1
 80039c8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d00a      	beq.n	80039ec <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	685b      	ldr	r3, [r3, #4]
 80039dc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	430a      	orrs	r2, r1
 80039ea:	605a      	str	r2, [r3, #4]
  }
}
 80039ec:	bf00      	nop
 80039ee:	370c      	adds	r7, #12
 80039f0:	46bd      	mov	sp, r7
 80039f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f6:	4770      	bx	lr

080039f8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b098      	sub	sp, #96	@ 0x60
 80039fc:	af02      	add	r7, sp, #8
 80039fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2200      	movs	r2, #0
 8003a04:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003a08:	f7fd fbea 	bl	80011e0 <HAL_GetTick>
 8003a0c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f003 0308 	and.w	r3, r3, #8
 8003a18:	2b08      	cmp	r3, #8
 8003a1a:	d12e      	bne.n	8003a7a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003a1c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003a20:	9300      	str	r3, [sp, #0]
 8003a22:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003a24:	2200      	movs	r2, #0
 8003a26:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003a2a:	6878      	ldr	r0, [r7, #4]
 8003a2c:	f000 f88c 	bl	8003b48 <UART_WaitOnFlagUntilTimeout>
 8003a30:	4603      	mov	r3, r0
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d021      	beq.n	8003a7a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a3e:	e853 3f00 	ldrex	r3, [r3]
 8003a42:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003a44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a46:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003a4a:	653b      	str	r3, [r7, #80]	@ 0x50
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	461a      	mov	r2, r3
 8003a52:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003a54:	647b      	str	r3, [r7, #68]	@ 0x44
 8003a56:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a58:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003a5a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003a5c:	e841 2300 	strex	r3, r2, [r1]
 8003a60:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003a62:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d1e6      	bne.n	8003a36 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2220      	movs	r2, #32
 8003a6c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	2200      	movs	r2, #0
 8003a72:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003a76:	2303      	movs	r3, #3
 8003a78:	e062      	b.n	8003b40 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f003 0304 	and.w	r3, r3, #4
 8003a84:	2b04      	cmp	r3, #4
 8003a86:	d149      	bne.n	8003b1c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003a88:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003a8c:	9300      	str	r3, [sp, #0]
 8003a8e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003a90:	2200      	movs	r2, #0
 8003a92:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003a96:	6878      	ldr	r0, [r7, #4]
 8003a98:	f000 f856 	bl	8003b48 <UART_WaitOnFlagUntilTimeout>
 8003a9c:	4603      	mov	r3, r0
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d03c      	beq.n	8003b1c <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003aa8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003aaa:	e853 3f00 	ldrex	r3, [r3]
 8003aae:	623b      	str	r3, [r7, #32]
   return(result);
 8003ab0:	6a3b      	ldr	r3, [r7, #32]
 8003ab2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003ab6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	461a      	mov	r2, r3
 8003abe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003ac0:	633b      	str	r3, [r7, #48]	@ 0x30
 8003ac2:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ac4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003ac6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003ac8:	e841 2300 	strex	r3, r2, [r1]
 8003acc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003ace:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d1e6      	bne.n	8003aa2 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	3308      	adds	r3, #8
 8003ada:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003adc:	693b      	ldr	r3, [r7, #16]
 8003ade:	e853 3f00 	ldrex	r3, [r3]
 8003ae2:	60fb      	str	r3, [r7, #12]
   return(result);
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	f023 0301 	bic.w	r3, r3, #1
 8003aea:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	3308      	adds	r3, #8
 8003af2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003af4:	61fa      	str	r2, [r7, #28]
 8003af6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003af8:	69b9      	ldr	r1, [r7, #24]
 8003afa:	69fa      	ldr	r2, [r7, #28]
 8003afc:	e841 2300 	strex	r3, r2, [r1]
 8003b00:	617b      	str	r3, [r7, #20]
   return(result);
 8003b02:	697b      	ldr	r3, [r7, #20]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d1e5      	bne.n	8003ad4 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2220      	movs	r2, #32
 8003b0c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2200      	movs	r2, #0
 8003b14:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003b18:	2303      	movs	r3, #3
 8003b1a:	e011      	b.n	8003b40 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2220      	movs	r2, #32
 8003b20:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	2220      	movs	r2, #32
 8003b26:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2200      	movs	r2, #0
 8003b34:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	2200      	movs	r2, #0
 8003b3a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8003b3e:	2300      	movs	r3, #0
}
 8003b40:	4618      	mov	r0, r3
 8003b42:	3758      	adds	r7, #88	@ 0x58
 8003b44:	46bd      	mov	sp, r7
 8003b46:	bd80      	pop	{r7, pc}

08003b48 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b084      	sub	sp, #16
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	60f8      	str	r0, [r7, #12]
 8003b50:	60b9      	str	r1, [r7, #8]
 8003b52:	603b      	str	r3, [r7, #0]
 8003b54:	4613      	mov	r3, r2
 8003b56:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b58:	e049      	b.n	8003bee <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b5a:	69bb      	ldr	r3, [r7, #24]
 8003b5c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003b60:	d045      	beq.n	8003bee <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b62:	f7fd fb3d 	bl	80011e0 <HAL_GetTick>
 8003b66:	4602      	mov	r2, r0
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	1ad3      	subs	r3, r2, r3
 8003b6c:	69ba      	ldr	r2, [r7, #24]
 8003b6e:	429a      	cmp	r2, r3
 8003b70:	d302      	bcc.n	8003b78 <UART_WaitOnFlagUntilTimeout+0x30>
 8003b72:	69bb      	ldr	r3, [r7, #24]
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d101      	bne.n	8003b7c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003b78:	2303      	movs	r3, #3
 8003b7a:	e048      	b.n	8003c0e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f003 0304 	and.w	r3, r3, #4
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d031      	beq.n	8003bee <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	69db      	ldr	r3, [r3, #28]
 8003b90:	f003 0308 	and.w	r3, r3, #8
 8003b94:	2b08      	cmp	r3, #8
 8003b96:	d110      	bne.n	8003bba <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	2208      	movs	r2, #8
 8003b9e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003ba0:	68f8      	ldr	r0, [r7, #12]
 8003ba2:	f000 f838 	bl	8003c16 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	2208      	movs	r2, #8
 8003baa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	e029      	b.n	8003c0e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	69db      	ldr	r3, [r3, #28]
 8003bc0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003bc4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003bc8:	d111      	bne.n	8003bee <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003bd2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003bd4:	68f8      	ldr	r0, [r7, #12]
 8003bd6:	f000 f81e 	bl	8003c16 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	2220      	movs	r2, #32
 8003bde:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	2200      	movs	r2, #0
 8003be6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8003bea:	2303      	movs	r3, #3
 8003bec:	e00f      	b.n	8003c0e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	69da      	ldr	r2, [r3, #28]
 8003bf4:	68bb      	ldr	r3, [r7, #8]
 8003bf6:	4013      	ands	r3, r2
 8003bf8:	68ba      	ldr	r2, [r7, #8]
 8003bfa:	429a      	cmp	r2, r3
 8003bfc:	bf0c      	ite	eq
 8003bfe:	2301      	moveq	r3, #1
 8003c00:	2300      	movne	r3, #0
 8003c02:	b2db      	uxtb	r3, r3
 8003c04:	461a      	mov	r2, r3
 8003c06:	79fb      	ldrb	r3, [r7, #7]
 8003c08:	429a      	cmp	r2, r3
 8003c0a:	d0a6      	beq.n	8003b5a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003c0c:	2300      	movs	r3, #0
}
 8003c0e:	4618      	mov	r0, r3
 8003c10:	3710      	adds	r7, #16
 8003c12:	46bd      	mov	sp, r7
 8003c14:	bd80      	pop	{r7, pc}

08003c16 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003c16:	b480      	push	{r7}
 8003c18:	b095      	sub	sp, #84	@ 0x54
 8003c1a:	af00      	add	r7, sp, #0
 8003c1c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c26:	e853 3f00 	ldrex	r3, [r3]
 8003c2a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003c2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c2e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003c32:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	461a      	mov	r2, r3
 8003c3a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003c3c:	643b      	str	r3, [r7, #64]	@ 0x40
 8003c3e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c40:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003c42:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003c44:	e841 2300 	strex	r3, r2, [r1]
 8003c48:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003c4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d1e6      	bne.n	8003c1e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	3308      	adds	r3, #8
 8003c56:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c58:	6a3b      	ldr	r3, [r7, #32]
 8003c5a:	e853 3f00 	ldrex	r3, [r3]
 8003c5e:	61fb      	str	r3, [r7, #28]
   return(result);
 8003c60:	69fb      	ldr	r3, [r7, #28]
 8003c62:	f023 0301 	bic.w	r3, r3, #1
 8003c66:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	3308      	adds	r3, #8
 8003c6e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003c70:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003c72:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c74:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003c76:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003c78:	e841 2300 	strex	r3, r2, [r1]
 8003c7c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003c7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d1e5      	bne.n	8003c50 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c88:	2b01      	cmp	r3, #1
 8003c8a:	d118      	bne.n	8003cbe <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	e853 3f00 	ldrex	r3, [r3]
 8003c98:	60bb      	str	r3, [r7, #8]
   return(result);
 8003c9a:	68bb      	ldr	r3, [r7, #8]
 8003c9c:	f023 0310 	bic.w	r3, r3, #16
 8003ca0:	647b      	str	r3, [r7, #68]	@ 0x44
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	461a      	mov	r2, r3
 8003ca8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003caa:	61bb      	str	r3, [r7, #24]
 8003cac:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cae:	6979      	ldr	r1, [r7, #20]
 8003cb0:	69ba      	ldr	r2, [r7, #24]
 8003cb2:	e841 2300 	strex	r3, r2, [r1]
 8003cb6:	613b      	str	r3, [r7, #16]
   return(result);
 8003cb8:	693b      	ldr	r3, [r7, #16]
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d1e6      	bne.n	8003c8c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	2220      	movs	r2, #32
 8003cc2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	2200      	movs	r2, #0
 8003cca:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2200      	movs	r2, #0
 8003cd0:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003cd2:	bf00      	nop
 8003cd4:	3754      	adds	r7, #84	@ 0x54
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cdc:	4770      	bx	lr

08003cde <memset>:
 8003cde:	4402      	add	r2, r0
 8003ce0:	4603      	mov	r3, r0
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	d100      	bne.n	8003ce8 <memset+0xa>
 8003ce6:	4770      	bx	lr
 8003ce8:	f803 1b01 	strb.w	r1, [r3], #1
 8003cec:	e7f9      	b.n	8003ce2 <memset+0x4>
	...

08003cf0 <__libc_init_array>:
 8003cf0:	b570      	push	{r4, r5, r6, lr}
 8003cf2:	4d0d      	ldr	r5, [pc, #52]	@ (8003d28 <__libc_init_array+0x38>)
 8003cf4:	4c0d      	ldr	r4, [pc, #52]	@ (8003d2c <__libc_init_array+0x3c>)
 8003cf6:	1b64      	subs	r4, r4, r5
 8003cf8:	10a4      	asrs	r4, r4, #2
 8003cfa:	2600      	movs	r6, #0
 8003cfc:	42a6      	cmp	r6, r4
 8003cfe:	d109      	bne.n	8003d14 <__libc_init_array+0x24>
 8003d00:	4d0b      	ldr	r5, [pc, #44]	@ (8003d30 <__libc_init_array+0x40>)
 8003d02:	4c0c      	ldr	r4, [pc, #48]	@ (8003d34 <__libc_init_array+0x44>)
 8003d04:	f000 f818 	bl	8003d38 <_init>
 8003d08:	1b64      	subs	r4, r4, r5
 8003d0a:	10a4      	asrs	r4, r4, #2
 8003d0c:	2600      	movs	r6, #0
 8003d0e:	42a6      	cmp	r6, r4
 8003d10:	d105      	bne.n	8003d1e <__libc_init_array+0x2e>
 8003d12:	bd70      	pop	{r4, r5, r6, pc}
 8003d14:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d18:	4798      	blx	r3
 8003d1a:	3601      	adds	r6, #1
 8003d1c:	e7ee      	b.n	8003cfc <__libc_init_array+0xc>
 8003d1e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d22:	4798      	blx	r3
 8003d24:	3601      	adds	r6, #1
 8003d26:	e7f2      	b.n	8003d0e <__libc_init_array+0x1e>
 8003d28:	08003dbc 	.word	0x08003dbc
 8003d2c:	08003dbc 	.word	0x08003dbc
 8003d30:	08003dbc 	.word	0x08003dbc
 8003d34:	08003dc0 	.word	0x08003dc0

08003d38 <_init>:
 8003d38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d3a:	bf00      	nop
 8003d3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d3e:	bc08      	pop	{r3}
 8003d40:	469e      	mov	lr, r3
 8003d42:	4770      	bx	lr

08003d44 <_fini>:
 8003d44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d46:	bf00      	nop
 8003d48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d4a:	bc08      	pop	{r3}
 8003d4c:	469e      	mov	lr, r3
 8003d4e:	4770      	bx	lr
