
AudioAmplifier.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004678  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  08004808  08004808  00005808  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080048a8  080048a8  00006080  2**0
                  CONTENTS
  4 .ARM          00000008  080048a8  080048a8  000058a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080048b0  080048b0  00006080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080048b0  080048b0  000058b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080048b4  080048b4  000058b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  080048b8  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000674  20000080  08004938  00006080  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200006f4  08004938  000066f4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006080  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e2ec  00000000  00000000  000060b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002445  00000000  00000000  0001439c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d00  00000000  00000000  000167e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009e4  00000000  00000000  000174e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020aca  00000000  00000000  00017ecc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f2b8  00000000  00000000  00038996  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c22ba  00000000  00000000  00047c4e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00109f08  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003894  00000000  00000000  00109f4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  0010d7e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000080 	.word	0x20000080
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080047f0 	.word	0x080047f0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000084 	.word	0x20000084
 80001cc:	080047f0 	.word	0x080047f0

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b088      	sub	sp, #32
 8000574:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000576:	f107 030c 	add.w	r3, r7, #12
 800057a:	2200      	movs	r2, #0
 800057c:	601a      	str	r2, [r3, #0]
 800057e:	605a      	str	r2, [r3, #4]
 8000580:	609a      	str	r2, [r3, #8]
 8000582:	60da      	str	r2, [r3, #12]
 8000584:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000586:	4b1f      	ldr	r3, [pc, #124]	@ (8000604 <MX_GPIO_Init+0x94>)
 8000588:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800058a:	4a1e      	ldr	r2, [pc, #120]	@ (8000604 <MX_GPIO_Init+0x94>)
 800058c:	f043 0304 	orr.w	r3, r3, #4
 8000590:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000592:	4b1c      	ldr	r3, [pc, #112]	@ (8000604 <MX_GPIO_Init+0x94>)
 8000594:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000596:	f003 0304 	and.w	r3, r3, #4
 800059a:	60bb      	str	r3, [r7, #8]
 800059c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800059e:	4b19      	ldr	r3, [pc, #100]	@ (8000604 <MX_GPIO_Init+0x94>)
 80005a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005a2:	4a18      	ldr	r2, [pc, #96]	@ (8000604 <MX_GPIO_Init+0x94>)
 80005a4:	f043 0301 	orr.w	r3, r3, #1
 80005a8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80005aa:	4b16      	ldr	r3, [pc, #88]	@ (8000604 <MX_GPIO_Init+0x94>)
 80005ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005ae:	f003 0301 	and.w	r3, r3, #1
 80005b2:	607b      	str	r3, [r7, #4]
 80005b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005b6:	4b13      	ldr	r3, [pc, #76]	@ (8000604 <MX_GPIO_Init+0x94>)
 80005b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005ba:	4a12      	ldr	r2, [pc, #72]	@ (8000604 <MX_GPIO_Init+0x94>)
 80005bc:	f043 0302 	orr.w	r3, r3, #2
 80005c0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80005c2:	4b10      	ldr	r3, [pc, #64]	@ (8000604 <MX_GPIO_Init+0x94>)
 80005c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005c6:	f003 0302 	and.w	r3, r3, #2
 80005ca:	603b      	str	r3, [r7, #0]
 80005cc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CSN_Pin|CE_Pin, GPIO_PIN_RESET);
 80005ce:	2200      	movs	r2, #0
 80005d0:	f44f 6110 	mov.w	r1, #2304	@ 0x900
 80005d4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005d8:	f001 f96a 	bl	80018b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = CSN_Pin|CE_Pin;
 80005dc:	f44f 6310 	mov.w	r3, #2304	@ 0x900
 80005e0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005e2:	2301      	movs	r3, #1
 80005e4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005e6:	2300      	movs	r3, #0
 80005e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005ea:	2300      	movs	r3, #0
 80005ec:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005ee:	f107 030c 	add.w	r3, r7, #12
 80005f2:	4619      	mov	r1, r3
 80005f4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005f8:	f000 fff0 	bl	80015dc <HAL_GPIO_Init>

}
 80005fc:	bf00      	nop
 80005fe:	3720      	adds	r7, #32
 8000600:	46bd      	mov	sp, r7
 8000602:	bd80      	pop	{r7, pc}
 8000604:	40021000 	.word	0x40021000

08000608 <nRF24_CE_L>:

#ifdef USE_HAL_DRIVER
extern SPI_HandleTypeDef hspi3;


static inline void nRF24_CE_L() {
 8000608:	b580      	push	{r7, lr}
 800060a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CE_GPIO_Port, CE_Pin, GPIO_PIN_RESET);
 800060c:	2200      	movs	r2, #0
 800060e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000612:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000616:	f001 f94b 	bl	80018b0 <HAL_GPIO_WritePin>
}
 800061a:	bf00      	nop
 800061c:	bd80      	pop	{r7, pc}

0800061e <nRF24_CE_H>:

static inline void nRF24_CE_H() {
 800061e:	b580      	push	{r7, lr}
 8000620:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CE_GPIO_Port, CE_Pin, GPIO_PIN_SET);
 8000622:	2201      	movs	r2, #1
 8000624:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000628:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800062c:	f001 f940 	bl	80018b0 <HAL_GPIO_WritePin>
}
 8000630:	bf00      	nop
 8000632:	bd80      	pop	{r7, pc}

08000634 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

	HAL_Init();
 8000638:	f000 fe51 	bl	80012de <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800063c:	f000 f81a 	bl	8000674 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000640:	f7ff ff96 	bl	8000570 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000644:	f000 fd88 	bl	8001158 <MX_USART2_UART_Init>
  MX_SPI3_Init();
 8000648:	f000 fc68 	bl	8000f1c <MX_SPI3_Init>
  /* USER CODE BEGIN 2 */
  nRF24_CE_L();
 800064c:	f7ff ffdc 	bl	8000608 <nRF24_CE_L>
  radioInitSuccess = nRF24_Check();
 8000650:	f000 fa02 	bl	8000a58 <nRF24_Check>
 8000654:	4603      	mov	r3, r0
 8000656:	461a      	mov	r2, r3
 8000658:	4b05      	ldr	r3, [pc, #20]	@ (8000670 <main+0x3c>)
 800065a:	701a      	strb	r2, [r3, #0]

  radioSetup();
 800065c:	f000 f86c 	bl	8000738 <radioSetup>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  receiveData(); // also sends data via UART
 8000660:	f000 f898 	bl	8000794 <receiveData>
	  UARTbuf[255] =  '\r';

   	  HAL_UART_Transmit(&huart2, (uint8_t *)UARTbuf, 255, 100);
   	  */

   	  HAL_Delay(1);
 8000664:	2001      	movs	r0, #1
 8000666:	f000 feaf 	bl	80013c8 <HAL_Delay>
	  receiveData(); // also sends data via UART
 800066a:	bf00      	nop
 800066c:	e7f8      	b.n	8000660 <main+0x2c>
 800066e:	bf00      	nop
 8000670:	2000009c 	.word	0x2000009c

08000674 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b096      	sub	sp, #88	@ 0x58
 8000678:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800067a:	f107 0314 	add.w	r3, r7, #20
 800067e:	2244      	movs	r2, #68	@ 0x44
 8000680:	2100      	movs	r1, #0
 8000682:	4618      	mov	r0, r3
 8000684:	f003 fc34 	bl	8003ef0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000688:	463b      	mov	r3, r7
 800068a:	2200      	movs	r2, #0
 800068c:	601a      	str	r2, [r3, #0]
 800068e:	605a      	str	r2, [r3, #4]
 8000690:	609a      	str	r2, [r3, #8]
 8000692:	60da      	str	r2, [r3, #12]
 8000694:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000696:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800069a:	f001 f93f 	bl	800191c <HAL_PWREx_ControlVoltageScaling>
 800069e:	4603      	mov	r3, r0
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d001      	beq.n	80006a8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80006a4:	f000 f90a 	bl	80008bc <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80006a8:	f001 f91a 	bl	80018e0 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80006ac:	4b21      	ldr	r3, [pc, #132]	@ (8000734 <SystemClock_Config+0xc0>)
 80006ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80006b2:	4a20      	ldr	r2, [pc, #128]	@ (8000734 <SystemClock_Config+0xc0>)
 80006b4:	f023 0318 	bic.w	r3, r3, #24
 80006b8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80006bc:	2314      	movs	r3, #20
 80006be:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80006c0:	2301      	movs	r3, #1
 80006c2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80006c4:	2301      	movs	r3, #1
 80006c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80006c8:	2300      	movs	r3, #0
 80006ca:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80006cc:	2360      	movs	r3, #96	@ 0x60
 80006ce:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006d0:	2302      	movs	r3, #2
 80006d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80006d4:	2301      	movs	r3, #1
 80006d6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80006d8:	2301      	movs	r3, #1
 80006da:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 80006dc:	2328      	movs	r3, #40	@ 0x28
 80006de:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80006e0:	2307      	movs	r3, #7
 80006e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80006e4:	2302      	movs	r3, #2
 80006e6:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80006e8:	2302      	movs	r3, #2
 80006ea:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006ec:	f107 0314 	add.w	r3, r7, #20
 80006f0:	4618      	mov	r0, r3
 80006f2:	f001 f969 	bl	80019c8 <HAL_RCC_OscConfig>
 80006f6:	4603      	mov	r3, r0
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d001      	beq.n	8000700 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80006fc:	f000 f8de 	bl	80008bc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000700:	230f      	movs	r3, #15
 8000702:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000704:	2303      	movs	r3, #3
 8000706:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000708:	2300      	movs	r3, #0
 800070a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800070c:	2300      	movs	r3, #0
 800070e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000710:	2300      	movs	r3, #0
 8000712:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000714:	463b      	mov	r3, r7
 8000716:	2104      	movs	r1, #4
 8000718:	4618      	mov	r0, r3
 800071a:	f001 fd69 	bl	80021f0 <HAL_RCC_ClockConfig>
 800071e:	4603      	mov	r3, r0
 8000720:	2b00      	cmp	r3, #0
 8000722:	d001      	beq.n	8000728 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000724:	f000 f8ca 	bl	80008bc <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000728:	f002 f97c 	bl	8002a24 <HAL_RCCEx_EnableMSIPLLMode>
}
 800072c:	bf00      	nop
 800072e:	3758      	adds	r7, #88	@ 0x58
 8000730:	46bd      	mov	sp, r7
 8000732:	bd80      	pop	{r7, pc}
 8000734:	40021000 	.word	0x40021000

08000738 <radioSetup>:

	// Put the transceiver to the RX mode
	nRF24_CE_H();
}
*/
void radioSetup(void){
 8000738:	b580      	push	{r7, lr}
 800073a:	af00      	add	r7, sp, #0
	// Set RF channel
	nRF24_SetRFChannel(40);
 800073c:	2028      	movs	r0, #40	@ 0x28
 800073e:	f000 fa66 	bl	8000c0e <nRF24_SetRFChannel>

	// Set data rate
	nRF24_SetDataRate(nRF24_DR_2Mbps);
 8000742:	2008      	movs	r0, #8
 8000744:	f000 fae7 	bl	8000d16 <nRF24_SetDataRate>

	// Set CRC scheme
	nRF24_SetCRCScheme(nRF24_CRC_2byte);
 8000748:	200c      	movs	r0, #12
 800074a:	f000 fa3f 	bl	8000bcc <nRF24_SetCRCScheme>

	// Set address width, its common for all pipes (RX and TX)
	nRF24_SetAddrWidth(3);
 800074e:	2003      	movs	r0, #3
 8000750:	f000 fa6b 	bl	8000c2a <nRF24_SetAddrWidth>

	// Configure RX PIPE
	static const uint8_t nRF24_ADDR[] = {'E', 'S', 'B'};
	nRF24_SetAddr(nRF24_PIPE1, nRF24_ADDR); // program address for pipe
 8000754:	490e      	ldr	r1, [pc, #56]	@ (8000790 <radioSetup+0x58>)
 8000756:	2001      	movs	r0, #1
 8000758:	f000 fa78 	bl	8000c4c <nRF24_SetAddr>
	nRF24_SetRXPipe(nRF24_PIPE1, nRF24_AA_ON, 10); // Auto-ACK: enabled, payload length: 10 bytes
 800075c:	220a      	movs	r2, #10
 800075e:	2101      	movs	r1, #1
 8000760:	2001      	movs	r0, #1
 8000762:	f000 faf3 	bl	8000d4c <nRF24_SetRXPipe>

	// Set TX power for Auto-ACK (maximum, to ensure that transmitter will hear ACK reply)
	nRF24_SetTXPower(nRF24_TXPWR_0dBm);
 8000766:	2006      	movs	r0, #6
 8000768:	f000 faba 	bl	8000ce0 <nRF24_SetTXPower>

	// Set operational mode (PRX == receiver)
	nRF24_SetOperationalMode(nRF24_MODE_RX);
 800076c:	2001      	movs	r0, #1
 800076e:	f000 f9c0 	bl	8000af2 <nRF24_SetOperationalMode>

	// Clear any pending IRQ flags
	nRF24_ClearIRQFlags();
 8000772:	f000 fb52 	bl	8000e1a <nRF24_ClearIRQFlags>

	// Wake the transceiver
	nRF24_SetPowerMode(nRF24_PWR_UP);
 8000776:	2002      	movs	r0, #2
 8000778:	f000 f99c 	bl	8000ab4 <nRF24_SetPowerMode>

	// Enable DPL
	nRF24_SetDynamicPayloadLength(nRF24_DPL_ON);
 800077c:	2001      	movs	r0, #1
 800077e:	f000 f9d9 	bl	8000b34 <nRF24_SetDynamicPayloadLength>

	nRF24_SetPayloadWithAck(1);
 8000782:	2001      	movs	r0, #1
 8000784:	f000 fa00 	bl	8000b88 <nRF24_SetPayloadWithAck>

		// Put the transceiver to the RX mode
	nRF24_CE_H();
 8000788:	f7ff ff49 	bl	800061e <nRF24_CE_H>
}
 800078c:	bf00      	nop
 800078e:	bd80      	pop	{r7, pc}
 8000790:	08004818 	.word	0x08004818

08000794 <receiveData>:

void receiveData(void){
 8000794:	b580      	push	{r7, lr}
 8000796:	b082      	sub	sp, #8
 8000798:	af00      	add	r7, sp, #0
	if (!radioInitSuccess) return;
 800079a:	4b3a      	ldr	r3, [pc, #232]	@ (8000884 <receiveData+0xf0>)
 800079c:	781b      	ldrb	r3, [r3, #0]
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d06c      	beq.n	800087c <receiveData+0xe8>

	if (nRF24_GetStatus_RXFIFO() != nRF24_STATUS_RXFIFO_EMPTY) {
 80007a2:	f000 fb27 	bl	8000df4 <nRF24_GetStatus_RXFIFO>
 80007a6:	4603      	mov	r3, r0
 80007a8:	2b01      	cmp	r3, #1
 80007aa:	d068      	beq.n	800087e <receiveData+0xea>

		c++;
 80007ac:	4b36      	ldr	r3, [pc, #216]	@ (8000888 <receiveData+0xf4>)
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	3301      	adds	r3, #1
 80007b2:	4a35      	ldr	r2, [pc, #212]	@ (8000888 <receiveData+0xf4>)
 80007b4:	6013      	str	r3, [r2, #0]
		pipeRX = nRF24_ReadPayload(bufRX, &bufLenRX); // read a payload to buffer
 80007b6:	4935      	ldr	r1, [pc, #212]	@ (800088c <receiveData+0xf8>)
 80007b8:	4835      	ldr	r0, [pc, #212]	@ (8000890 <receiveData+0xfc>)
 80007ba:	f000 fb9f 	bl	8000efc <nRF24_ReadPayload>
 80007be:	4603      	mov	r3, r0
 80007c0:	461a      	mov	r2, r3
 80007c2:	4b34      	ldr	r3, [pc, #208]	@ (8000894 <receiveData+0x100>)
 80007c4:	701a      	strb	r2, [r3, #0]

		nRF24_ClearIRQFlags(); // clear any pending IRQ bits
 80007c6:	f000 fb28 	bl	8000e1a <nRF24_ClearIRQFlags>
			nRF24_TransmitPacket(&txBuf[0], 32);
		}
		*/

		// none of these vars are needed, just here for debugging purposes
		recChar = (char)bufRX[0];
 80007ca:	4b31      	ldr	r3, [pc, #196]	@ (8000890 <receiveData+0xfc>)
 80007cc:	781a      	ldrb	r2, [r3, #0]
 80007ce:	4b32      	ldr	r3, [pc, #200]	@ (8000898 <receiveData+0x104>)
 80007d0:	701a      	strb	r2, [r3, #0]
		charConfidence = bufRX[1]; // 1 or 0
 80007d2:	4b2f      	ldr	r3, [pc, #188]	@ (8000890 <receiveData+0xfc>)
 80007d4:	785a      	ldrb	r2, [r3, #1]
 80007d6:	4b31      	ldr	r3, [pc, #196]	@ (800089c <receiveData+0x108>)
 80007d8:	701a      	strb	r2, [r3, #0]

		Vbat = bufRX[2]; // somwhow make this a float lol
 80007da:	4b2d      	ldr	r3, [pc, #180]	@ (8000890 <receiveData+0xfc>)
 80007dc:	789a      	ldrb	r2, [r3, #2]
 80007de:	4b30      	ldr	r3, [pc, #192]	@ (80008a0 <receiveData+0x10c>)
 80007e0:	701a      	strb	r2, [r3, #0]

		imgRow = bufRX[3];
 80007e2:	4b2b      	ldr	r3, [pc, #172]	@ (8000890 <receiveData+0xfc>)
 80007e4:	78da      	ldrb	r2, [r3, #3]
 80007e6:	4b2f      	ldr	r3, [pc, #188]	@ (80008a4 <receiveData+0x110>)
 80007e8:	701a      	strb	r2, [r3, #0]

		for(int i = 0; i < 28; i++) charImg[imgRow][i] = bufRX[i + 4];
 80007ea:	2300      	movs	r3, #0
 80007ec:	607b      	str	r3, [r7, #4]
 80007ee:	e013      	b.n	8000818 <receiveData+0x84>
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	3304      	adds	r3, #4
 80007f4:	4a2b      	ldr	r2, [pc, #172]	@ (80008a4 <receiveData+0x110>)
 80007f6:	7812      	ldrb	r2, [r2, #0]
 80007f8:	4611      	mov	r1, r2
 80007fa:	4a25      	ldr	r2, [pc, #148]	@ (8000890 <receiveData+0xfc>)
 80007fc:	5cd0      	ldrb	r0, [r2, r3]
 80007fe:	4a2a      	ldr	r2, [pc, #168]	@ (80008a8 <receiveData+0x114>)
 8000800:	460b      	mov	r3, r1
 8000802:	00db      	lsls	r3, r3, #3
 8000804:	1a5b      	subs	r3, r3, r1
 8000806:	009b      	lsls	r3, r3, #2
 8000808:	441a      	add	r2, r3
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	4413      	add	r3, r2
 800080e:	4602      	mov	r2, r0
 8000810:	701a      	strb	r2, [r3, #0]
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	3301      	adds	r3, #1
 8000816:	607b      	str	r3, [r7, #4]
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	2b1b      	cmp	r3, #27
 800081c:	dde8      	ble.n	80007f0 <receiveData+0x5c>

		UARTbuf[0] = '\0';
 800081e:	4b23      	ldr	r3, [pc, #140]	@ (80008ac <receiveData+0x118>)
 8000820:	2200      	movs	r2, #0
 8000822:	701a      	strb	r2, [r3, #0]
		for(int i = 0; i < 32; i++) sprintf(UARTbuf + strlen(UARTbuf), "%u ", bufRX[i]); // Add all values of bufRX into a buffer to send data, eparated by whitespace
 8000824:	2300      	movs	r3, #0
 8000826:	603b      	str	r3, [r7, #0]
 8000828:	e010      	b.n	800084c <receiveData+0xb8>
 800082a:	4820      	ldr	r0, [pc, #128]	@ (80008ac <receiveData+0x118>)
 800082c:	f7ff fcd0 	bl	80001d0 <strlen>
 8000830:	4603      	mov	r3, r0
 8000832:	4a1e      	ldr	r2, [pc, #120]	@ (80008ac <receiveData+0x118>)
 8000834:	1898      	adds	r0, r3, r2
 8000836:	4a16      	ldr	r2, [pc, #88]	@ (8000890 <receiveData+0xfc>)
 8000838:	683b      	ldr	r3, [r7, #0]
 800083a:	4413      	add	r3, r2
 800083c:	781b      	ldrb	r3, [r3, #0]
 800083e:	461a      	mov	r2, r3
 8000840:	491b      	ldr	r1, [pc, #108]	@ (80008b0 <receiveData+0x11c>)
 8000842:	f003 fb35 	bl	8003eb0 <siprintf>
 8000846:	683b      	ldr	r3, [r7, #0]
 8000848:	3301      	adds	r3, #1
 800084a:	603b      	str	r3, [r7, #0]
 800084c:	683b      	ldr	r3, [r7, #0]
 800084e:	2b1f      	cmp	r3, #31
 8000850:	ddeb      	ble.n	800082a <receiveData+0x96>
		sprintf(UARTbuf + strlen(UARTbuf), "\n"); // add a new line
 8000852:	4816      	ldr	r0, [pc, #88]	@ (80008ac <receiveData+0x118>)
 8000854:	f7ff fcbc 	bl	80001d0 <strlen>
 8000858:	4603      	mov	r3, r0
 800085a:	4a14      	ldr	r2, [pc, #80]	@ (80008ac <receiveData+0x118>)
 800085c:	4413      	add	r3, r2
 800085e:	4915      	ldr	r1, [pc, #84]	@ (80008b4 <receiveData+0x120>)
 8000860:	4618      	mov	r0, r3
 8000862:	f003 fb25 	bl	8003eb0 <siprintf>

		HAL_UART_Transmit(&huart2, (uint8_t *)UARTbuf, strlen(UARTbuf), 100);
 8000866:	4811      	ldr	r0, [pc, #68]	@ (80008ac <receiveData+0x118>)
 8000868:	f7ff fcb2 	bl	80001d0 <strlen>
 800086c:	4603      	mov	r3, r0
 800086e:	b29a      	uxth	r2, r3
 8000870:	2364      	movs	r3, #100	@ 0x64
 8000872:	490e      	ldr	r1, [pc, #56]	@ (80008ac <receiveData+0x118>)
 8000874:	4810      	ldr	r0, [pc, #64]	@ (80008b8 <receiveData+0x124>)
 8000876:	f002 fe4f 	bl	8003518 <HAL_UART_Transmit>
 800087a:	e000      	b.n	800087e <receiveData+0xea>
	if (!radioInitSuccess) return;
 800087c:	bf00      	nop
	}
}
 800087e:	3708      	adds	r7, #8
 8000880:	46bd      	mov	sp, r7
 8000882:	bd80      	pop	{r7, pc}
 8000884:	2000009c 	.word	0x2000009c
 8000888:	200004b4 	.word	0x200004b4
 800088c:	20000020 	.word	0x20000020
 8000890:	20000000 	.word	0x20000000
 8000894:	2000009d 	.word	0x2000009d
 8000898:	200001a0 	.word	0x200001a0
 800089c:	200001a2 	.word	0x200001a2
 80008a0:	200001a1 	.word	0x200001a1
 80008a4:	200001a3 	.word	0x200001a3
 80008a8:	200001a4 	.word	0x200001a4
 80008ac:	200000a0 	.word	0x200000a0
 80008b0:	08004808 	.word	0x08004808
 80008b4:	0800480c 	.word	0x0800480c
 80008b8:	20000520 	.word	0x20000520

080008bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008bc:	b480      	push	{r7}
 80008be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008c0:	b672      	cpsid	i
}
 80008c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008c4:	bf00      	nop
 80008c6:	e7fd      	b.n	80008c4 <Error_Handler+0x8>

080008c8 <nRF24_CSN_L>:

static inline void nRF24_CSN_L() {
 80008c8:	b580      	push	{r7, lr}
 80008ca:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CSN_GPIO_Port, CSN_Pin, GPIO_PIN_RESET);
 80008cc:	2200      	movs	r2, #0
 80008ce:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80008d2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008d6:	f000 ffeb 	bl	80018b0 <HAL_GPIO_WritePin>
}
 80008da:	bf00      	nop
 80008dc:	bd80      	pop	{r7, pc}

080008de <nRF24_CSN_H>:

static inline void nRF24_CSN_H() {
 80008de:	b580      	push	{r7, lr}
 80008e0:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CSN_GPIO_Port, CSN_Pin, GPIO_PIN_SET);
 80008e2:	2201      	movs	r2, #1
 80008e4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80008e8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008ec:	f000 ffe0 	bl	80018b0 <HAL_GPIO_WritePin>
}
 80008f0:	bf00      	nop
 80008f2:	bd80      	pop	{r7, pc}

080008f4 <nRF24_LL_RW>:


static inline uint8_t nRF24_LL_RW(uint8_t data) {
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b086      	sub	sp, #24
 80008f8:	af02      	add	r7, sp, #8
 80008fa:	4603      	mov	r3, r0
 80008fc:	71fb      	strb	r3, [r7, #7]
    // Wait until TX buffer is empty
    uint8_t result;
    if(HAL_SPI_TransmitReceive(&hspi3,&data,&result,1,2000)!=HAL_OK) {
 80008fe:	f107 020f 	add.w	r2, r7, #15
 8000902:	1df9      	adds	r1, r7, #7
 8000904:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000908:	9300      	str	r3, [sp, #0]
 800090a:	2301      	movs	r3, #1
 800090c:	4806      	ldr	r0, [pc, #24]	@ (8000928 <nRF24_LL_RW+0x34>)
 800090e:	f002 fa2e 	bl	8002d6e <HAL_SPI_TransmitReceive>
 8000912:	4603      	mov	r3, r0
 8000914:	2b00      	cmp	r3, #0
 8000916:	d001      	beq.n	800091c <nRF24_LL_RW+0x28>
        Error_Handler();
 8000918:	f7ff ffd0 	bl	80008bc <Error_Handler>
    };
    return result;
 800091c:	7bfb      	ldrb	r3, [r7, #15]
}
 800091e:	4618      	mov	r0, r3
 8000920:	3710      	adds	r7, #16
 8000922:	46bd      	mov	sp, r7
 8000924:	bd80      	pop	{r7, pc}
 8000926:	bf00      	nop
 8000928:	200004b8 	.word	0x200004b8

0800092c <nRF24_ReadReg>:

// Read a register
// input:
//   reg - number of register to read
// return: value of register
static uint8_t nRF24_ReadReg(uint8_t reg) {
 800092c:	b580      	push	{r7, lr}
 800092e:	b084      	sub	sp, #16
 8000930:	af00      	add	r7, sp, #0
 8000932:	4603      	mov	r3, r0
 8000934:	71fb      	strb	r3, [r7, #7]
	uint8_t value;

	nRF24_CSN_L();
 8000936:	f7ff ffc7 	bl	80008c8 <nRF24_CSN_L>
	nRF24_LL_RW(reg & nRF24_MASK_REG_MAP);
 800093a:	79fb      	ldrb	r3, [r7, #7]
 800093c:	f003 031f 	and.w	r3, r3, #31
 8000940:	b2db      	uxtb	r3, r3
 8000942:	4618      	mov	r0, r3
 8000944:	f7ff ffd6 	bl	80008f4 <nRF24_LL_RW>
	value = nRF24_LL_RW(nRF24_CMD_NOP);
 8000948:	20ff      	movs	r0, #255	@ 0xff
 800094a:	f7ff ffd3 	bl	80008f4 <nRF24_LL_RW>
 800094e:	4603      	mov	r3, r0
 8000950:	73fb      	strb	r3, [r7, #15]
	nRF24_CSN_H();
 8000952:	f7ff ffc4 	bl	80008de <nRF24_CSN_H>

	return value;
 8000956:	7bfb      	ldrb	r3, [r7, #15]
}
 8000958:	4618      	mov	r0, r3
 800095a:	3710      	adds	r7, #16
 800095c:	46bd      	mov	sp, r7
 800095e:	bd80      	pop	{r7, pc}

08000960 <nRF24_WriteReg>:

// Write a new value to register
// input:
//   reg - number of register to write
//   value - value to write
static void nRF24_WriteReg(uint8_t reg, uint8_t value) {
 8000960:	b580      	push	{r7, lr}
 8000962:	b082      	sub	sp, #8
 8000964:	af00      	add	r7, sp, #0
 8000966:	4603      	mov	r3, r0
 8000968:	460a      	mov	r2, r1
 800096a:	71fb      	strb	r3, [r7, #7]
 800096c:	4613      	mov	r3, r2
 800096e:	71bb      	strb	r3, [r7, #6]
	nRF24_CSN_L();
 8000970:	f7ff ffaa 	bl	80008c8 <nRF24_CSN_L>
	if (reg < nRF24_CMD_W_REGISTER) {
 8000974:	79fb      	ldrb	r3, [r7, #7]
 8000976:	2b1f      	cmp	r3, #31
 8000978:	d810      	bhi.n	800099c <nRF24_WriteReg+0x3c>
		// This is a register access
		nRF24_LL_RW(nRF24_CMD_W_REGISTER | (reg & nRF24_MASK_REG_MAP));
 800097a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800097e:	f003 031f 	and.w	r3, r3, #31
 8000982:	b25b      	sxtb	r3, r3
 8000984:	f043 0320 	orr.w	r3, r3, #32
 8000988:	b25b      	sxtb	r3, r3
 800098a:	b2db      	uxtb	r3, r3
 800098c:	4618      	mov	r0, r3
 800098e:	f7ff ffb1 	bl	80008f4 <nRF24_LL_RW>
		nRF24_LL_RW(value);
 8000992:	79bb      	ldrb	r3, [r7, #6]
 8000994:	4618      	mov	r0, r3
 8000996:	f7ff ffad 	bl	80008f4 <nRF24_LL_RW>
 800099a:	e013      	b.n	80009c4 <nRF24_WriteReg+0x64>
	} else {
		// This is a single byte command or future command/register
		nRF24_LL_RW(reg);
 800099c:	79fb      	ldrb	r3, [r7, #7]
 800099e:	4618      	mov	r0, r3
 80009a0:	f7ff ffa8 	bl	80008f4 <nRF24_LL_RW>
		if ((reg != nRF24_CMD_FLUSH_TX) && (reg != nRF24_CMD_FLUSH_RX) && \
 80009a4:	79fb      	ldrb	r3, [r7, #7]
 80009a6:	2be1      	cmp	r3, #225	@ 0xe1
 80009a8:	d00c      	beq.n	80009c4 <nRF24_WriteReg+0x64>
 80009aa:	79fb      	ldrb	r3, [r7, #7]
 80009ac:	2be2      	cmp	r3, #226	@ 0xe2
 80009ae:	d009      	beq.n	80009c4 <nRF24_WriteReg+0x64>
 80009b0:	79fb      	ldrb	r3, [r7, #7]
 80009b2:	2be3      	cmp	r3, #227	@ 0xe3
 80009b4:	d006      	beq.n	80009c4 <nRF24_WriteReg+0x64>
				(reg != nRF24_CMD_REUSE_TX_PL) && (reg != nRF24_CMD_NOP)) {
 80009b6:	79fb      	ldrb	r3, [r7, #7]
 80009b8:	2bff      	cmp	r3, #255	@ 0xff
 80009ba:	d003      	beq.n	80009c4 <nRF24_WriteReg+0x64>
			// Send register value
			nRF24_LL_RW(value);
 80009bc:	79bb      	ldrb	r3, [r7, #6]
 80009be:	4618      	mov	r0, r3
 80009c0:	f7ff ff98 	bl	80008f4 <nRF24_LL_RW>
		}
	}
	nRF24_CSN_H();
 80009c4:	f7ff ff8b 	bl	80008de <nRF24_CSN_H>
}
 80009c8:	bf00      	nop
 80009ca:	3708      	adds	r7, #8
 80009cc:	46bd      	mov	sp, r7
 80009ce:	bd80      	pop	{r7, pc}

080009d0 <nRF24_ReadMBReg>:
// Read a multi-byte register
// input:
//   reg - number of register to read
//   pBuf - pointer to the buffer for register data
//   count - number of bytes to read
static void nRF24_ReadMBReg(uint8_t reg, uint8_t *pBuf, uint8_t count) {
 80009d0:	b590      	push	{r4, r7, lr}
 80009d2:	b083      	sub	sp, #12
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	4603      	mov	r3, r0
 80009d8:	6039      	str	r1, [r7, #0]
 80009da:	71fb      	strb	r3, [r7, #7]
 80009dc:	4613      	mov	r3, r2
 80009de:	71bb      	strb	r3, [r7, #6]
	nRF24_CSN_L();
 80009e0:	f7ff ff72 	bl	80008c8 <nRF24_CSN_L>
	nRF24_LL_RW(reg);
 80009e4:	79fb      	ldrb	r3, [r7, #7]
 80009e6:	4618      	mov	r0, r3
 80009e8:	f7ff ff84 	bl	80008f4 <nRF24_LL_RW>
	while (count--) {
 80009ec:	e007      	b.n	80009fe <nRF24_ReadMBReg+0x2e>
		*pBuf++ = nRF24_LL_RW(nRF24_CMD_NOP);
 80009ee:	683c      	ldr	r4, [r7, #0]
 80009f0:	1c63      	adds	r3, r4, #1
 80009f2:	603b      	str	r3, [r7, #0]
 80009f4:	20ff      	movs	r0, #255	@ 0xff
 80009f6:	f7ff ff7d 	bl	80008f4 <nRF24_LL_RW>
 80009fa:	4603      	mov	r3, r0
 80009fc:	7023      	strb	r3, [r4, #0]
	while (count--) {
 80009fe:	79bb      	ldrb	r3, [r7, #6]
 8000a00:	1e5a      	subs	r2, r3, #1
 8000a02:	71ba      	strb	r2, [r7, #6]
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d1f2      	bne.n	80009ee <nRF24_ReadMBReg+0x1e>
	}
	nRF24_CSN_H();
 8000a08:	f7ff ff69 	bl	80008de <nRF24_CSN_H>
}
 8000a0c:	bf00      	nop
 8000a0e:	370c      	adds	r7, #12
 8000a10:	46bd      	mov	sp, r7
 8000a12:	bd90      	pop	{r4, r7, pc}

08000a14 <nRF24_WriteMBReg>:
// Write a multi-byte register
// input:
//   reg - number of register to write
//   pBuf - pointer to the buffer with data to write
//   count - number of bytes to write
static void nRF24_WriteMBReg(uint8_t reg, uint8_t *pBuf, uint8_t count) {
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b082      	sub	sp, #8
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	6039      	str	r1, [r7, #0]
 8000a1e:	71fb      	strb	r3, [r7, #7]
 8000a20:	4613      	mov	r3, r2
 8000a22:	71bb      	strb	r3, [r7, #6]
	nRF24_CSN_L();
 8000a24:	f7ff ff50 	bl	80008c8 <nRF24_CSN_L>
	nRF24_LL_RW(reg);
 8000a28:	79fb      	ldrb	r3, [r7, #7]
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	f7ff ff62 	bl	80008f4 <nRF24_LL_RW>
	while (count--) {
 8000a30:	e006      	b.n	8000a40 <nRF24_WriteMBReg+0x2c>
		nRF24_LL_RW(*pBuf++);
 8000a32:	683b      	ldr	r3, [r7, #0]
 8000a34:	1c5a      	adds	r2, r3, #1
 8000a36:	603a      	str	r2, [r7, #0]
 8000a38:	781b      	ldrb	r3, [r3, #0]
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	f7ff ff5a 	bl	80008f4 <nRF24_LL_RW>
	while (count--) {
 8000a40:	79bb      	ldrb	r3, [r7, #6]
 8000a42:	1e5a      	subs	r2, r3, #1
 8000a44:	71ba      	strb	r2, [r7, #6]
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d1f3      	bne.n	8000a32 <nRF24_WriteMBReg+0x1e>
	}
	nRF24_CSN_H();
 8000a4a:	f7ff ff48 	bl	80008de <nRF24_CSN_H>
}
 8000a4e:	bf00      	nop
 8000a50:	3708      	adds	r7, #8
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bd80      	pop	{r7, pc}
	...

08000a58 <nRF24_Check>:

// Check if the nRF24L01 present
// return:
//   1 - nRF24L01 is online and responding
//   0 - received sequence differs from original
uint8_t nRF24_Check(void) {
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b084      	sub	sp, #16
 8000a5c:	af00      	add	r7, sp, #0
	uint8_t rxbuf[5];
	uint8_t i;
	uint8_t *ptr = (uint8_t *)nRF24_TEST_ADDR;
 8000a5e:	4b14      	ldr	r3, [pc, #80]	@ (8000ab0 <nRF24_Check+0x58>)
 8000a60:	60bb      	str	r3, [r7, #8]

	// Write test TX address and read TX_ADDR register
	nRF24_WriteMBReg(nRF24_CMD_W_REGISTER | nRF24_REG_TX_ADDR, ptr, 5);
 8000a62:	2205      	movs	r2, #5
 8000a64:	68b9      	ldr	r1, [r7, #8]
 8000a66:	2030      	movs	r0, #48	@ 0x30
 8000a68:	f7ff ffd4 	bl	8000a14 <nRF24_WriteMBReg>
	nRF24_ReadMBReg(nRF24_CMD_R_REGISTER | nRF24_REG_TX_ADDR, rxbuf, 5);
 8000a6c:	463b      	mov	r3, r7
 8000a6e:	2205      	movs	r2, #5
 8000a70:	4619      	mov	r1, r3
 8000a72:	2010      	movs	r0, #16
 8000a74:	f7ff ffac 	bl	80009d0 <nRF24_ReadMBReg>

	// Compare buffers, return error on first mismatch
	for (i = 0; i < 5; i++) {
 8000a78:	2300      	movs	r3, #0
 8000a7a:	73fb      	strb	r3, [r7, #15]
 8000a7c:	e00f      	b.n	8000a9e <nRF24_Check+0x46>
		if (rxbuf[i] != *ptr++) return 0;
 8000a7e:	7bfb      	ldrb	r3, [r7, #15]
 8000a80:	3310      	adds	r3, #16
 8000a82:	443b      	add	r3, r7
 8000a84:	f813 2c10 	ldrb.w	r2, [r3, #-16]
 8000a88:	68bb      	ldr	r3, [r7, #8]
 8000a8a:	1c59      	adds	r1, r3, #1
 8000a8c:	60b9      	str	r1, [r7, #8]
 8000a8e:	781b      	ldrb	r3, [r3, #0]
 8000a90:	429a      	cmp	r2, r3
 8000a92:	d001      	beq.n	8000a98 <nRF24_Check+0x40>
 8000a94:	2300      	movs	r3, #0
 8000a96:	e006      	b.n	8000aa6 <nRF24_Check+0x4e>
	for (i = 0; i < 5; i++) {
 8000a98:	7bfb      	ldrb	r3, [r7, #15]
 8000a9a:	3301      	adds	r3, #1
 8000a9c:	73fb      	strb	r3, [r7, #15]
 8000a9e:	7bfb      	ldrb	r3, [r7, #15]
 8000aa0:	2b04      	cmp	r3, #4
 8000aa2:	d9ec      	bls.n	8000a7e <nRF24_Check+0x26>
	}

	return 1;
 8000aa4:	2301      	movs	r3, #1
}
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	3710      	adds	r7, #16
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	08004810 	.word	0x08004810

08000ab4 <nRF24_SetPowerMode>:

// Control transceiver power mode
// input:
//   mode - new state of power mode, one of nRF24_PWR_xx values
void nRF24_SetPowerMode(uint8_t mode) {
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b084      	sub	sp, #16
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	4603      	mov	r3, r0
 8000abc:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	reg = nRF24_ReadReg(nRF24_REG_CONFIG);
 8000abe:	2000      	movs	r0, #0
 8000ac0:	f7ff ff34 	bl	800092c <nRF24_ReadReg>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	73fb      	strb	r3, [r7, #15]
	if (mode == nRF24_PWR_UP) {
 8000ac8:	79fb      	ldrb	r3, [r7, #7]
 8000aca:	2b02      	cmp	r3, #2
 8000acc:	d104      	bne.n	8000ad8 <nRF24_SetPowerMode+0x24>
		// Set the PWR_UP bit of CONFIG register to wake the transceiver
		// It goes into Stanby-I mode with consumption about 26uA
		reg |= nRF24_CONFIG_PWR_UP;
 8000ace:	7bfb      	ldrb	r3, [r7, #15]
 8000ad0:	f043 0302 	orr.w	r3, r3, #2
 8000ad4:	73fb      	strb	r3, [r7, #15]
 8000ad6:	e003      	b.n	8000ae0 <nRF24_SetPowerMode+0x2c>
	} else {
		// Clear the PWR_UP bit of CONFIG register to put the transceiver
		// into power down mode with consumption about 900nA
		reg &= ~nRF24_CONFIG_PWR_UP;
 8000ad8:	7bfb      	ldrb	r3, [r7, #15]
 8000ada:	f023 0302 	bic.w	r3, r3, #2
 8000ade:	73fb      	strb	r3, [r7, #15]
	}
	nRF24_WriteReg(nRF24_REG_CONFIG, reg);
 8000ae0:	7bfb      	ldrb	r3, [r7, #15]
 8000ae2:	4619      	mov	r1, r3
 8000ae4:	2000      	movs	r0, #0
 8000ae6:	f7ff ff3b 	bl	8000960 <nRF24_WriteReg>
}
 8000aea:	bf00      	nop
 8000aec:	3710      	adds	r7, #16
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd80      	pop	{r7, pc}

08000af2 <nRF24_SetOperationalMode>:

// Set transceiver operational mode
// input:
//   mode - operational mode, one of nRF24_MODE_xx values
void nRF24_SetOperationalMode(uint8_t mode) {
 8000af2:	b580      	push	{r7, lr}
 8000af4:	b084      	sub	sp, #16
 8000af6:	af00      	add	r7, sp, #0
 8000af8:	4603      	mov	r3, r0
 8000afa:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	// Configure PRIM_RX bit of the CONFIG register
	reg  = nRF24_ReadReg(nRF24_REG_CONFIG);
 8000afc:	2000      	movs	r0, #0
 8000afe:	f7ff ff15 	bl	800092c <nRF24_ReadReg>
 8000b02:	4603      	mov	r3, r0
 8000b04:	73fb      	strb	r3, [r7, #15]
	reg &= ~nRF24_CONFIG_PRIM_RX;
 8000b06:	7bfb      	ldrb	r3, [r7, #15]
 8000b08:	f023 0301 	bic.w	r3, r3, #1
 8000b0c:	73fb      	strb	r3, [r7, #15]
	reg |= (mode & nRF24_CONFIG_PRIM_RX);
 8000b0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b12:	f003 0301 	and.w	r3, r3, #1
 8000b16:	b25a      	sxtb	r2, r3
 8000b18:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b1c:	4313      	orrs	r3, r2
 8000b1e:	b25b      	sxtb	r3, r3
 8000b20:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteReg(nRF24_REG_CONFIG, reg);
 8000b22:	7bfb      	ldrb	r3, [r7, #15]
 8000b24:	4619      	mov	r1, r3
 8000b26:	2000      	movs	r0, #0
 8000b28:	f7ff ff1a 	bl	8000960 <nRF24_WriteReg>
}
 8000b2c:	bf00      	nop
 8000b2e:	3710      	adds	r7, #16
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bd80      	pop	{r7, pc}

08000b34 <nRF24_SetDynamicPayloadLength>:

// Set transceiver DynamicPayloadLength feature for all the pipes
// input:
//   mode - status, one of nRF24_DPL_xx values
void nRF24_SetDynamicPayloadLength(uint8_t mode) {
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b084      	sub	sp, #16
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;
	reg  = nRF24_ReadReg(nRF24_REG_FEATURE);
 8000b3e:	201d      	movs	r0, #29
 8000b40:	f7ff fef4 	bl	800092c <nRF24_ReadReg>
 8000b44:	4603      	mov	r3, r0
 8000b46:	73fb      	strb	r3, [r7, #15]
	if(mode) {
 8000b48:	79fb      	ldrb	r3, [r7, #7]
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d00c      	beq.n	8000b68 <nRF24_SetDynamicPayloadLength+0x34>
		nRF24_WriteReg(nRF24_REG_FEATURE, reg | nRF24_FEATURE_EN_DPL);
 8000b4e:	7bfb      	ldrb	r3, [r7, #15]
 8000b50:	f043 0304 	orr.w	r3, r3, #4
 8000b54:	b2db      	uxtb	r3, r3
 8000b56:	4619      	mov	r1, r3
 8000b58:	201d      	movs	r0, #29
 8000b5a:	f7ff ff01 	bl	8000960 <nRF24_WriteReg>
		nRF24_WriteReg(nRF24_REG_DYNPD, 0x1F);
 8000b5e:	211f      	movs	r1, #31
 8000b60:	201c      	movs	r0, #28
 8000b62:	f7ff fefd 	bl	8000960 <nRF24_WriteReg>
	} else {
		nRF24_WriteReg(nRF24_REG_FEATURE, reg &~ nRF24_FEATURE_EN_DPL);
		nRF24_WriteReg(nRF24_REG_DYNPD, 0x0);
	}
}
 8000b66:	e00b      	b.n	8000b80 <nRF24_SetDynamicPayloadLength+0x4c>
		nRF24_WriteReg(nRF24_REG_FEATURE, reg &~ nRF24_FEATURE_EN_DPL);
 8000b68:	7bfb      	ldrb	r3, [r7, #15]
 8000b6a:	f023 0304 	bic.w	r3, r3, #4
 8000b6e:	b2db      	uxtb	r3, r3
 8000b70:	4619      	mov	r1, r3
 8000b72:	201d      	movs	r0, #29
 8000b74:	f7ff fef4 	bl	8000960 <nRF24_WriteReg>
		nRF24_WriteReg(nRF24_REG_DYNPD, 0x0);
 8000b78:	2100      	movs	r1, #0
 8000b7a:	201c      	movs	r0, #28
 8000b7c:	f7ff fef0 	bl	8000960 <nRF24_WriteReg>
}
 8000b80:	bf00      	nop
 8000b82:	3710      	adds	r7, #16
 8000b84:	46bd      	mov	sp, r7
 8000b86:	bd80      	pop	{r7, pc}

08000b88 <nRF24_SetPayloadWithAck>:

// Enables Payload With Ack. NB Refer to the datasheet for proper retransmit timing.
// input:
//   mode - status, 1 or 0
void nRF24_SetPayloadWithAck(uint8_t mode) {
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b084      	sub	sp, #16
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	4603      	mov	r3, r0
 8000b90:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;
	reg  = nRF24_ReadReg(nRF24_REG_FEATURE);
 8000b92:	201d      	movs	r0, #29
 8000b94:	f7ff feca 	bl	800092c <nRF24_ReadReg>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	73fb      	strb	r3, [r7, #15]
	if(mode) {
 8000b9c:	79fb      	ldrb	r3, [r7, #7]
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d008      	beq.n	8000bb4 <nRF24_SetPayloadWithAck+0x2c>
		nRF24_WriteReg(nRF24_REG_FEATURE, reg | nRF24_FEATURE_EN_ACK_PAY);
 8000ba2:	7bfb      	ldrb	r3, [r7, #15]
 8000ba4:	f043 0302 	orr.w	r3, r3, #2
 8000ba8:	b2db      	uxtb	r3, r3
 8000baa:	4619      	mov	r1, r3
 8000bac:	201d      	movs	r0, #29
 8000bae:	f7ff fed7 	bl	8000960 <nRF24_WriteReg>
	} else {
		nRF24_WriteReg(nRF24_REG_FEATURE, reg &~ nRF24_FEATURE_EN_ACK_PAY);
	}
}
 8000bb2:	e007      	b.n	8000bc4 <nRF24_SetPayloadWithAck+0x3c>
		nRF24_WriteReg(nRF24_REG_FEATURE, reg &~ nRF24_FEATURE_EN_ACK_PAY);
 8000bb4:	7bfb      	ldrb	r3, [r7, #15]
 8000bb6:	f023 0302 	bic.w	r3, r3, #2
 8000bba:	b2db      	uxtb	r3, r3
 8000bbc:	4619      	mov	r1, r3
 8000bbe:	201d      	movs	r0, #29
 8000bc0:	f7ff fece 	bl	8000960 <nRF24_WriteReg>
}
 8000bc4:	bf00      	nop
 8000bc6:	3710      	adds	r7, #16
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bd80      	pop	{r7, pc}

08000bcc <nRF24_SetCRCScheme>:
// Configure transceiver CRC scheme
// input:
//   scheme - CRC scheme, one of nRF24_CRC_xx values
// note: transceiver will forcibly turn on the CRC in case if auto acknowledgment
//       enabled for at least one RX pipe
void nRF24_SetCRCScheme(uint8_t scheme) {
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b084      	sub	sp, #16
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	// Configure EN_CRC[3] and CRCO[2] bits of the CONFIG register
	reg  = nRF24_ReadReg(nRF24_REG_CONFIG);
 8000bd6:	2000      	movs	r0, #0
 8000bd8:	f7ff fea8 	bl	800092c <nRF24_ReadReg>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	73fb      	strb	r3, [r7, #15]
	reg &= ~nRF24_MASK_CRC;
 8000be0:	7bfb      	ldrb	r3, [r7, #15]
 8000be2:	f023 030c 	bic.w	r3, r3, #12
 8000be6:	73fb      	strb	r3, [r7, #15]
	reg |= (scheme & nRF24_MASK_CRC);
 8000be8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bec:	f003 030c 	and.w	r3, r3, #12
 8000bf0:	b25a      	sxtb	r2, r3
 8000bf2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000bf6:	4313      	orrs	r3, r2
 8000bf8:	b25b      	sxtb	r3, r3
 8000bfa:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteReg(nRF24_REG_CONFIG, reg);
 8000bfc:	7bfb      	ldrb	r3, [r7, #15]
 8000bfe:	4619      	mov	r1, r3
 8000c00:	2000      	movs	r0, #0
 8000c02:	f7ff fead 	bl	8000960 <nRF24_WriteReg>
}
 8000c06:	bf00      	nop
 8000c08:	3710      	adds	r7, #16
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}

08000c0e <nRF24_SetRFChannel>:
// Set frequency channel
// input:
//   channel - radio frequency channel, value from 0 to 127
// note: frequency will be (2400 + channel)MHz
// note: PLOS_CNT[7:4] bits of the OBSERVER_TX register will be reset
void nRF24_SetRFChannel(uint8_t channel) {
 8000c0e:	b580      	push	{r7, lr}
 8000c10:	b082      	sub	sp, #8
 8000c12:	af00      	add	r7, sp, #0
 8000c14:	4603      	mov	r3, r0
 8000c16:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteReg(nRF24_REG_RF_CH, channel);
 8000c18:	79fb      	ldrb	r3, [r7, #7]
 8000c1a:	4619      	mov	r1, r3
 8000c1c:	2005      	movs	r0, #5
 8000c1e:	f7ff fe9f 	bl	8000960 <nRF24_WriteReg>
}
 8000c22:	bf00      	nop
 8000c24:	3708      	adds	r7, #8
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd80      	pop	{r7, pc}

08000c2a <nRF24_SetAddrWidth>:

// Set of address widths
// input:
//   addr_width - RX/TX address field width, value from 3 to 5
// note: this setting is common for all pipes
void nRF24_SetAddrWidth(uint8_t addr_width) {
 8000c2a:	b580      	push	{r7, lr}
 8000c2c:	b082      	sub	sp, #8
 8000c2e:	af00      	add	r7, sp, #0
 8000c30:	4603      	mov	r3, r0
 8000c32:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteReg(nRF24_REG_SETUP_AW, addr_width - 2);
 8000c34:	79fb      	ldrb	r3, [r7, #7]
 8000c36:	3b02      	subs	r3, #2
 8000c38:	b2db      	uxtb	r3, r3
 8000c3a:	4619      	mov	r1, r3
 8000c3c:	2003      	movs	r0, #3
 8000c3e:	f7ff fe8f 	bl	8000960 <nRF24_WriteReg>
}
 8000c42:	bf00      	nop
 8000c44:	3708      	adds	r7, #8
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}
	...

08000c4c <nRF24_SetAddr>:
// note: buffer length must be equal to current address width of transceiver
// note: for pipes[2..5] only first byte of address will be written because
//       other bytes of address equals to pipe1
// note: for pipes[2..5] only first byte of address will be written because
//       pipes 1-5 share the four most significant address bytes
void nRF24_SetAddr(uint8_t pipe, const uint8_t *addr) {
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b084      	sub	sp, #16
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	4603      	mov	r3, r0
 8000c54:	6039      	str	r1, [r7, #0]
 8000c56:	71fb      	strb	r3, [r7, #7]
	uint8_t addr_width;

	// RX_ADDR_Px register
	switch (pipe) {
 8000c58:	79fb      	ldrb	r3, [r7, #7]
 8000c5a:	2b06      	cmp	r3, #6
 8000c5c:	d00a      	beq.n	8000c74 <nRF24_SetAddr+0x28>
 8000c5e:	2b06      	cmp	r3, #6
 8000c60:	dc36      	bgt.n	8000cd0 <nRF24_SetAddr+0x84>
 8000c62:	2b01      	cmp	r3, #1
 8000c64:	dc02      	bgt.n	8000c6c <nRF24_SetAddr+0x20>
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	da04      	bge.n	8000c74 <nRF24_SetAddr+0x28>
			// Write address LSBbyte (only first byte from the addr buffer)
			nRF24_WriteReg(nRF24_ADDR_REGS[pipe], *addr);
			break;
		default:
			// Incorrect pipe number -> do nothing
			break;
 8000c6a:	e031      	b.n	8000cd0 <nRF24_SetAddr+0x84>
 8000c6c:	3b02      	subs	r3, #2
	switch (pipe) {
 8000c6e:	2b03      	cmp	r3, #3
 8000c70:	d82e      	bhi.n	8000cd0 <nRF24_SetAddr+0x84>
 8000c72:	e023      	b.n	8000cbc <nRF24_SetAddr+0x70>
			addr_width = nRF24_ReadReg(nRF24_REG_SETUP_AW) + 1;
 8000c74:	2003      	movs	r0, #3
 8000c76:	f7ff fe59 	bl	800092c <nRF24_ReadReg>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	3301      	adds	r3, #1
 8000c7e:	73fb      	strb	r3, [r7, #15]
			addr += addr_width;
 8000c80:	7bfb      	ldrb	r3, [r7, #15]
 8000c82:	683a      	ldr	r2, [r7, #0]
 8000c84:	4413      	add	r3, r2
 8000c86:	603b      	str	r3, [r7, #0]
			nRF24_CSN_L();
 8000c88:	f7ff fe1e 	bl	80008c8 <nRF24_CSN_L>
			nRF24_LL_RW(nRF24_CMD_W_REGISTER | nRF24_ADDR_REGS[pipe]);
 8000c8c:	79fb      	ldrb	r3, [r7, #7]
 8000c8e:	4a13      	ldr	r2, [pc, #76]	@ (8000cdc <nRF24_SetAddr+0x90>)
 8000c90:	5cd3      	ldrb	r3, [r2, r3]
 8000c92:	f043 0320 	orr.w	r3, r3, #32
 8000c96:	b2db      	uxtb	r3, r3
 8000c98:	4618      	mov	r0, r3
 8000c9a:	f7ff fe2b 	bl	80008f4 <nRF24_LL_RW>
				nRF24_LL_RW(*addr--);
 8000c9e:	683b      	ldr	r3, [r7, #0]
 8000ca0:	1e5a      	subs	r2, r3, #1
 8000ca2:	603a      	str	r2, [r7, #0]
 8000ca4:	781b      	ldrb	r3, [r3, #0]
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	f7ff fe24 	bl	80008f4 <nRF24_LL_RW>
			} while (addr_width--);
 8000cac:	7bfb      	ldrb	r3, [r7, #15]
 8000cae:	1e5a      	subs	r2, r3, #1
 8000cb0:	73fa      	strb	r2, [r7, #15]
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d1f3      	bne.n	8000c9e <nRF24_SetAddr+0x52>
			nRF24_CSN_H();
 8000cb6:	f7ff fe12 	bl	80008de <nRF24_CSN_H>
			break;
 8000cba:	e00a      	b.n	8000cd2 <nRF24_SetAddr+0x86>
			nRF24_WriteReg(nRF24_ADDR_REGS[pipe], *addr);
 8000cbc:	79fb      	ldrb	r3, [r7, #7]
 8000cbe:	4a07      	ldr	r2, [pc, #28]	@ (8000cdc <nRF24_SetAddr+0x90>)
 8000cc0:	5cd2      	ldrb	r2, [r2, r3]
 8000cc2:	683b      	ldr	r3, [r7, #0]
 8000cc4:	781b      	ldrb	r3, [r3, #0]
 8000cc6:	4619      	mov	r1, r3
 8000cc8:	4610      	mov	r0, r2
 8000cca:	f7ff fe49 	bl	8000960 <nRF24_WriteReg>
			break;
 8000cce:	e000      	b.n	8000cd2 <nRF24_SetAddr+0x86>
			break;
 8000cd0:	bf00      	nop
	}
}
 8000cd2:	bf00      	nop
 8000cd4:	3710      	adds	r7, #16
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	08004824 	.word	0x08004824

08000ce0 <nRF24_SetTXPower>:

// Configure RF output power in TX mode
// input:
//   tx_pwr - RF output power, one of nRF24_TXPWR_xx values
void nRF24_SetTXPower(uint8_t tx_pwr) {
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b084      	sub	sp, #16
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	// Configure RF_PWR[2:1] bits of the RF_SETUP register
	reg  = nRF24_ReadReg(nRF24_REG_RF_SETUP);
 8000cea:	2006      	movs	r0, #6
 8000cec:	f7ff fe1e 	bl	800092c <nRF24_ReadReg>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	73fb      	strb	r3, [r7, #15]
	reg &= ~nRF24_MASK_RF_PWR;
 8000cf4:	7bfb      	ldrb	r3, [r7, #15]
 8000cf6:	f023 0306 	bic.w	r3, r3, #6
 8000cfa:	73fb      	strb	r3, [r7, #15]
	reg |= tx_pwr;
 8000cfc:	7bfa      	ldrb	r2, [r7, #15]
 8000cfe:	79fb      	ldrb	r3, [r7, #7]
 8000d00:	4313      	orrs	r3, r2
 8000d02:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteReg(nRF24_REG_RF_SETUP, reg);
 8000d04:	7bfb      	ldrb	r3, [r7, #15]
 8000d06:	4619      	mov	r1, r3
 8000d08:	2006      	movs	r0, #6
 8000d0a:	f7ff fe29 	bl	8000960 <nRF24_WriteReg>
}
 8000d0e:	bf00      	nop
 8000d10:	3710      	adds	r7, #16
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bd80      	pop	{r7, pc}

08000d16 <nRF24_SetDataRate>:

// Configure transceiver data rate
// input:
//   data_rate - data rate, one of nRF24_DR_xx values
void nRF24_SetDataRate(uint8_t data_rate) {
 8000d16:	b580      	push	{r7, lr}
 8000d18:	b084      	sub	sp, #16
 8000d1a:	af00      	add	r7, sp, #0
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	// Configure RF_DR_LOW[5] and RF_DR_HIGH[3] bits of the RF_SETUP register
	reg  = nRF24_ReadReg(nRF24_REG_RF_SETUP);
 8000d20:	2006      	movs	r0, #6
 8000d22:	f7ff fe03 	bl	800092c <nRF24_ReadReg>
 8000d26:	4603      	mov	r3, r0
 8000d28:	73fb      	strb	r3, [r7, #15]
	reg &= ~nRF24_MASK_DATARATE;
 8000d2a:	7bfb      	ldrb	r3, [r7, #15]
 8000d2c:	f023 0328 	bic.w	r3, r3, #40	@ 0x28
 8000d30:	73fb      	strb	r3, [r7, #15]
	reg |= data_rate;
 8000d32:	7bfa      	ldrb	r2, [r7, #15]
 8000d34:	79fb      	ldrb	r3, [r7, #7]
 8000d36:	4313      	orrs	r3, r2
 8000d38:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteReg(nRF24_REG_RF_SETUP, reg);
 8000d3a:	7bfb      	ldrb	r3, [r7, #15]
 8000d3c:	4619      	mov	r1, r3
 8000d3e:	2006      	movs	r0, #6
 8000d40:	f7ff fe0e 	bl	8000960 <nRF24_WriteReg>
}
 8000d44:	bf00      	nop
 8000d46:	3710      	adds	r7, #16
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	bd80      	pop	{r7, pc}

08000d4c <nRF24_SetRXPipe>:
// Configure a specified RX pipe
// input:
//   pipe - number of the RX pipe, value from 0 to 5
//   aa_state - state of auto acknowledgment, one of nRF24_AA_xx values
//   payload_len - payload length in bytes
void nRF24_SetRXPipe(uint8_t pipe, uint8_t aa_state, uint8_t payload_len) {
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b084      	sub	sp, #16
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	4603      	mov	r3, r0
 8000d54:	71fb      	strb	r3, [r7, #7]
 8000d56:	460b      	mov	r3, r1
 8000d58:	71bb      	strb	r3, [r7, #6]
 8000d5a:	4613      	mov	r3, r2
 8000d5c:	717b      	strb	r3, [r7, #5]
	uint8_t reg;

	// Enable the specified pipe (EN_RXADDR register)
	reg = (nRF24_ReadReg(nRF24_REG_EN_RXADDR) | (1 << pipe)) & nRF24_MASK_EN_RX;
 8000d5e:	2002      	movs	r0, #2
 8000d60:	f7ff fde4 	bl	800092c <nRF24_ReadReg>
 8000d64:	4603      	mov	r3, r0
 8000d66:	b25a      	sxtb	r2, r3
 8000d68:	79fb      	ldrb	r3, [r7, #7]
 8000d6a:	2101      	movs	r1, #1
 8000d6c:	fa01 f303 	lsl.w	r3, r1, r3
 8000d70:	b25b      	sxtb	r3, r3
 8000d72:	4313      	orrs	r3, r2
 8000d74:	b25b      	sxtb	r3, r3
 8000d76:	b2db      	uxtb	r3, r3
 8000d78:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000d7c:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteReg(nRF24_REG_EN_RXADDR, reg);
 8000d7e:	7bfb      	ldrb	r3, [r7, #15]
 8000d80:	4619      	mov	r1, r3
 8000d82:	2002      	movs	r0, #2
 8000d84:	f7ff fdec 	bl	8000960 <nRF24_WriteReg>

	// Set RX payload length (RX_PW_Px register)
	nRF24_WriteReg(nRF24_RX_PW_PIPE[pipe], payload_len & nRF24_MASK_RX_PW);
 8000d88:	79fb      	ldrb	r3, [r7, #7]
 8000d8a:	4a19      	ldr	r2, [pc, #100]	@ (8000df0 <nRF24_SetRXPipe+0xa4>)
 8000d8c:	5cd2      	ldrb	r2, [r2, r3]
 8000d8e:	797b      	ldrb	r3, [r7, #5]
 8000d90:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000d94:	b2db      	uxtb	r3, r3
 8000d96:	4619      	mov	r1, r3
 8000d98:	4610      	mov	r0, r2
 8000d9a:	f7ff fde1 	bl	8000960 <nRF24_WriteReg>

	// Set auto acknowledgment for a specified pipe (EN_AA register)
	reg = nRF24_ReadReg(nRF24_REG_EN_AA);
 8000d9e:	2001      	movs	r0, #1
 8000da0:	f7ff fdc4 	bl	800092c <nRF24_ReadReg>
 8000da4:	4603      	mov	r3, r0
 8000da6:	73fb      	strb	r3, [r7, #15]
	if (aa_state == nRF24_AA_ON) {
 8000da8:	79bb      	ldrb	r3, [r7, #6]
 8000daa:	2b01      	cmp	r3, #1
 8000dac:	d10a      	bne.n	8000dc4 <nRF24_SetRXPipe+0x78>
		reg |=  (1 << pipe);
 8000dae:	79fb      	ldrb	r3, [r7, #7]
 8000db0:	2201      	movs	r2, #1
 8000db2:	fa02 f303 	lsl.w	r3, r2, r3
 8000db6:	b25a      	sxtb	r2, r3
 8000db8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dbc:	4313      	orrs	r3, r2
 8000dbe:	b25b      	sxtb	r3, r3
 8000dc0:	73fb      	strb	r3, [r7, #15]
 8000dc2:	e00b      	b.n	8000ddc <nRF24_SetRXPipe+0x90>
	} else {
		reg &= ~(1 << pipe);
 8000dc4:	79fb      	ldrb	r3, [r7, #7]
 8000dc6:	2201      	movs	r2, #1
 8000dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dcc:	b25b      	sxtb	r3, r3
 8000dce:	43db      	mvns	r3, r3
 8000dd0:	b25a      	sxtb	r2, r3
 8000dd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dd6:	4013      	ands	r3, r2
 8000dd8:	b25b      	sxtb	r3, r3
 8000dda:	73fb      	strb	r3, [r7, #15]
	}
	nRF24_WriteReg(nRF24_REG_EN_AA, reg);
 8000ddc:	7bfb      	ldrb	r3, [r7, #15]
 8000dde:	4619      	mov	r1, r3
 8000de0:	2001      	movs	r0, #1
 8000de2:	f7ff fdbd 	bl	8000960 <nRF24_WriteReg>
}
 8000de6:	bf00      	nop
 8000de8:	3710      	adds	r7, #16
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}
 8000dee:	bf00      	nop
 8000df0:	0800481c 	.word	0x0800481c

08000df4 <nRF24_GetStatus_RXFIFO>:
	return (nRF24_ReadReg(nRF24_REG_STATUS) & nRF24_MASK_STATUS_IRQ);
}

// Get status of the RX FIFO
// return: one of the nRF24_STATUS_RXFIFO_xx values
uint8_t nRF24_GetStatus_RXFIFO(void) {
 8000df4:	b580      	push	{r7, lr}
 8000df6:	af00      	add	r7, sp, #0
	return (nRF24_ReadReg(nRF24_REG_FIFO_STATUS) & nRF24_MASK_RXFIFO);
 8000df8:	2017      	movs	r0, #23
 8000dfa:	f7ff fd97 	bl	800092c <nRF24_ReadReg>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	f003 0303 	and.w	r3, r3, #3
 8000e04:	b2db      	uxtb	r3, r3
}
 8000e06:	4618      	mov	r0, r3
 8000e08:	bd80      	pop	{r7, pc}

08000e0a <nRF24_FlushRX>:
void nRF24_FlushTX(void) {
	nRF24_WriteReg(nRF24_CMD_FLUSH_TX, nRF24_CMD_NOP);
}

// Flush the RX FIFO
void nRF24_FlushRX(void) {
 8000e0a:	b580      	push	{r7, lr}
 8000e0c:	af00      	add	r7, sp, #0
	nRF24_WriteReg(nRF24_CMD_FLUSH_RX, nRF24_CMD_NOP);
 8000e0e:	21ff      	movs	r1, #255	@ 0xff
 8000e10:	20e2      	movs	r0, #226	@ 0xe2
 8000e12:	f7ff fda5 	bl	8000960 <nRF24_WriteReg>
}
 8000e16:	bf00      	nop
 8000e18:	bd80      	pop	{r7, pc}

08000e1a <nRF24_ClearIRQFlags>:

// Clear any pending IRQ flags
void nRF24_ClearIRQFlags(void) {
 8000e1a:	b580      	push	{r7, lr}
 8000e1c:	b082      	sub	sp, #8
 8000e1e:	af00      	add	r7, sp, #0
	uint8_t reg;

	// Clear RX_DR, TX_DS and MAX_RT bits of the STATUS register
	reg  = nRF24_ReadReg(nRF24_REG_STATUS);
 8000e20:	2007      	movs	r0, #7
 8000e22:	f7ff fd83 	bl	800092c <nRF24_ReadReg>
 8000e26:	4603      	mov	r3, r0
 8000e28:	71fb      	strb	r3, [r7, #7]
	reg |= nRF24_MASK_STATUS_IRQ;
 8000e2a:	79fb      	ldrb	r3, [r7, #7]
 8000e2c:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
 8000e30:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteReg(nRF24_REG_STATUS, reg);
 8000e32:	79fb      	ldrb	r3, [r7, #7]
 8000e34:	4619      	mov	r1, r3
 8000e36:	2007      	movs	r0, #7
 8000e38:	f7ff fd92 	bl	8000960 <nRF24_WriteReg>
}
 8000e3c:	bf00      	nop
 8000e3e:	3708      	adds	r7, #8
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bd80      	pop	{r7, pc}

08000e44 <nRF24_GetRxDplPayloadWidth>:
//   length - payload length in bytes
void nRF24_WritePayload(uint8_t *pBuf, uint8_t length) {
	nRF24_WriteMBReg(nRF24_CMD_W_TX_PAYLOAD, pBuf, length);
}

static uint8_t nRF24_GetRxDplPayloadWidth() {
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b082      	sub	sp, #8
 8000e48:	af00      	add	r7, sp, #0
	uint8_t value;

	nRF24_CSN_L();
 8000e4a:	f7ff fd3d 	bl	80008c8 <nRF24_CSN_L>
	nRF24_LL_RW(nRF24_CMD_R_RX_PL_WID);
 8000e4e:	2060      	movs	r0, #96	@ 0x60
 8000e50:	f7ff fd50 	bl	80008f4 <nRF24_LL_RW>
	value = nRF24_LL_RW(nRF24_CMD_NOP);
 8000e54:	20ff      	movs	r0, #255	@ 0xff
 8000e56:	f7ff fd4d 	bl	80008f4 <nRF24_LL_RW>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	71fb      	strb	r3, [r7, #7]
	nRF24_CSN_H();
 8000e5e:	f7ff fd3e 	bl	80008de <nRF24_CSN_H>

	return value;
 8000e62:	79fb      	ldrb	r3, [r7, #7]

}
 8000e64:	4618      	mov	r0, r3
 8000e66:	3708      	adds	r7, #8
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bd80      	pop	{r7, pc}

08000e6c <nRF24_ReadPayloadGeneric>:

static nRF24_RXResult nRF24_ReadPayloadGeneric(uint8_t *pBuf, uint8_t *length, uint8_t dpl) {
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b086      	sub	sp, #24
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	60f8      	str	r0, [r7, #12]
 8000e74:	60b9      	str	r1, [r7, #8]
 8000e76:	4613      	mov	r3, r2
 8000e78:	71fb      	strb	r3, [r7, #7]
	uint8_t pipe;

	// Extract a payload pipe number from the STATUS register
	pipe = (nRF24_ReadReg(nRF24_REG_STATUS) & nRF24_MASK_RX_P_NO) >> 1;
 8000e7a:	2007      	movs	r0, #7
 8000e7c:	f7ff fd56 	bl	800092c <nRF24_ReadReg>
 8000e80:	4603      	mov	r3, r0
 8000e82:	105b      	asrs	r3, r3, #1
 8000e84:	b2db      	uxtb	r3, r3
 8000e86:	f003 0307 	and.w	r3, r3, #7
 8000e8a:	75fb      	strb	r3, [r7, #23]

	// RX FIFO empty?
	if (pipe < 6) {
 8000e8c:	7dfb      	ldrb	r3, [r7, #23]
 8000e8e:	2b05      	cmp	r3, #5
 8000e90:	d829      	bhi.n	8000ee6 <nRF24_ReadPayloadGeneric+0x7a>
		// Get payload length
		if(dpl) {
 8000e92:	79fb      	ldrb	r3, [r7, #7]
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d00f      	beq.n	8000eb8 <nRF24_ReadPayloadGeneric+0x4c>
			*length = nRF24_GetRxDplPayloadWidth();
 8000e98:	f7ff ffd4 	bl	8000e44 <nRF24_GetRxDplPayloadWidth>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	461a      	mov	r2, r3
 8000ea0:	68bb      	ldr	r3, [r7, #8]
 8000ea2:	701a      	strb	r2, [r3, #0]
			if(*length>32) { //broken packet
 8000ea4:	68bb      	ldr	r3, [r7, #8]
 8000ea6:	781b      	ldrb	r3, [r3, #0]
 8000ea8:	2b20      	cmp	r3, #32
 8000eaa:	d90f      	bls.n	8000ecc <nRF24_ReadPayloadGeneric+0x60>
				*length = 0;
 8000eac:	68bb      	ldr	r3, [r7, #8]
 8000eae:	2200      	movs	r2, #0
 8000eb0:	701a      	strb	r2, [r3, #0]
				nRF24_FlushRX();
 8000eb2:	f7ff ffaa 	bl	8000e0a <nRF24_FlushRX>
 8000eb6:	e009      	b.n	8000ecc <nRF24_ReadPayloadGeneric+0x60>
			}
		} else {
			*length = nRF24_ReadReg(nRF24_RX_PW_PIPE[pipe]);
 8000eb8:	7dfb      	ldrb	r3, [r7, #23]
 8000eba:	4a0f      	ldr	r2, [pc, #60]	@ (8000ef8 <nRF24_ReadPayloadGeneric+0x8c>)
 8000ebc:	5cd3      	ldrb	r3, [r2, r3]
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	f7ff fd34 	bl	800092c <nRF24_ReadReg>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	461a      	mov	r2, r3
 8000ec8:	68bb      	ldr	r3, [r7, #8]
 8000eca:	701a      	strb	r2, [r3, #0]
		}

		// Read a payload from the RX FIFO
		if (*length) {
 8000ecc:	68bb      	ldr	r3, [r7, #8]
 8000ece:	781b      	ldrb	r3, [r3, #0]
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d006      	beq.n	8000ee2 <nRF24_ReadPayloadGeneric+0x76>
			nRF24_ReadMBReg(nRF24_CMD_R_RX_PAYLOAD, pBuf, *length);
 8000ed4:	68bb      	ldr	r3, [r7, #8]
 8000ed6:	781b      	ldrb	r3, [r3, #0]
 8000ed8:	461a      	mov	r2, r3
 8000eda:	68f9      	ldr	r1, [r7, #12]
 8000edc:	2061      	movs	r0, #97	@ 0x61
 8000ede:	f7ff fd77 	bl	80009d0 <nRF24_ReadMBReg>
		}

		return ((nRF24_RXResult)pipe);
 8000ee2:	7dfb      	ldrb	r3, [r7, #23]
 8000ee4:	e003      	b.n	8000eee <nRF24_ReadPayloadGeneric+0x82>
	}

	// The RX FIFO is empty
	*length = 0;
 8000ee6:	68bb      	ldr	r3, [r7, #8]
 8000ee8:	2200      	movs	r2, #0
 8000eea:	701a      	strb	r2, [r3, #0]

	return nRF24_RX_EMPTY;
 8000eec:	23ff      	movs	r3, #255	@ 0xff
}
 8000eee:	4618      	mov	r0, r3
 8000ef0:	3718      	adds	r7, #24
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	0800481c 	.word	0x0800481c

08000efc <nRF24_ReadPayload>:
//   pBuf - pointer to the buffer to store a payload data
//   length - pointer to variable to store a payload length
// return: one of nRF24_RX_xx values
//   nRF24_RX_PIPEX - packet has been received from the pipe number X
//   nRF24_RX_EMPTY - the RX FIFO is empty
nRF24_RXResult nRF24_ReadPayload(uint8_t *pBuf, uint8_t *length) {
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b082      	sub	sp, #8
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
 8000f04:	6039      	str	r1, [r7, #0]
	return nRF24_ReadPayloadGeneric(pBuf, length,0);
 8000f06:	2200      	movs	r2, #0
 8000f08:	6839      	ldr	r1, [r7, #0]
 8000f0a:	6878      	ldr	r0, [r7, #4]
 8000f0c:	f7ff ffae 	bl	8000e6c <nRF24_ReadPayloadGeneric>
 8000f10:	4603      	mov	r3, r0
}
 8000f12:	4618      	mov	r0, r3
 8000f14:	3708      	adds	r7, #8
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}
	...

08000f1c <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8000f20:	4b1b      	ldr	r3, [pc, #108]	@ (8000f90 <MX_SPI3_Init+0x74>)
 8000f22:	4a1c      	ldr	r2, [pc, #112]	@ (8000f94 <MX_SPI3_Init+0x78>)
 8000f24:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000f26:	4b1a      	ldr	r3, [pc, #104]	@ (8000f90 <MX_SPI3_Init+0x74>)
 8000f28:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000f2c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000f2e:	4b18      	ldr	r3, [pc, #96]	@ (8000f90 <MX_SPI3_Init+0x74>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000f34:	4b16      	ldr	r3, [pc, #88]	@ (8000f90 <MX_SPI3_Init+0x74>)
 8000f36:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8000f3a:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000f3c:	4b14      	ldr	r3, [pc, #80]	@ (8000f90 <MX_SPI3_Init+0x74>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000f42:	4b13      	ldr	r3, [pc, #76]	@ (8000f90 <MX_SPI3_Init+0x74>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000f48:	4b11      	ldr	r3, [pc, #68]	@ (8000f90 <MX_SPI3_Init+0x74>)
 8000f4a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000f4e:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000f50:	4b0f      	ldr	r3, [pc, #60]	@ (8000f90 <MX_SPI3_Init+0x74>)
 8000f52:	2218      	movs	r2, #24
 8000f54:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f56:	4b0e      	ldr	r3, [pc, #56]	@ (8000f90 <MX_SPI3_Init+0x74>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f5c:	4b0c      	ldr	r3, [pc, #48]	@ (8000f90 <MX_SPI3_Init+0x74>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f62:	4b0b      	ldr	r3, [pc, #44]	@ (8000f90 <MX_SPI3_Init+0x74>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000f68:	4b09      	ldr	r3, [pc, #36]	@ (8000f90 <MX_SPI3_Init+0x74>)
 8000f6a:	2207      	movs	r2, #7
 8000f6c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000f6e:	4b08      	ldr	r3, [pc, #32]	@ (8000f90 <MX_SPI3_Init+0x74>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000f74:	4b06      	ldr	r3, [pc, #24]	@ (8000f90 <MX_SPI3_Init+0x74>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000f7a:	4805      	ldr	r0, [pc, #20]	@ (8000f90 <MX_SPI3_Init+0x74>)
 8000f7c:	f001 fe54 	bl	8002c28 <HAL_SPI_Init>
 8000f80:	4603      	mov	r3, r0
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d001      	beq.n	8000f8a <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8000f86:	f7ff fc99 	bl	80008bc <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000f8a:	bf00      	nop
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	bf00      	nop
 8000f90:	200004b8 	.word	0x200004b8
 8000f94:	40003c00 	.word	0x40003c00

08000f98 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b08a      	sub	sp, #40	@ 0x28
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fa0:	f107 0314 	add.w	r3, r7, #20
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	601a      	str	r2, [r3, #0]
 8000fa8:	605a      	str	r2, [r3, #4]
 8000faa:	609a      	str	r2, [r3, #8]
 8000fac:	60da      	str	r2, [r3, #12]
 8000fae:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	4a17      	ldr	r2, [pc, #92]	@ (8001014 <HAL_SPI_MspInit+0x7c>)
 8000fb6:	4293      	cmp	r3, r2
 8000fb8:	d127      	bne.n	800100a <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000fba:	4b17      	ldr	r3, [pc, #92]	@ (8001018 <HAL_SPI_MspInit+0x80>)
 8000fbc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000fbe:	4a16      	ldr	r2, [pc, #88]	@ (8001018 <HAL_SPI_MspInit+0x80>)
 8000fc0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000fc4:	6593      	str	r3, [r2, #88]	@ 0x58
 8000fc6:	4b14      	ldr	r3, [pc, #80]	@ (8001018 <HAL_SPI_MspInit+0x80>)
 8000fc8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000fca:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000fce:	613b      	str	r3, [r7, #16]
 8000fd0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fd2:	4b11      	ldr	r3, [pc, #68]	@ (8001018 <HAL_SPI_MspInit+0x80>)
 8000fd4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fd6:	4a10      	ldr	r2, [pc, #64]	@ (8001018 <HAL_SPI_MspInit+0x80>)
 8000fd8:	f043 0302 	orr.w	r3, r3, #2
 8000fdc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000fde:	4b0e      	ldr	r3, [pc, #56]	@ (8001018 <HAL_SPI_MspInit+0x80>)
 8000fe0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fe2:	f003 0302 	and.w	r3, r3, #2
 8000fe6:	60fb      	str	r3, [r7, #12]
 8000fe8:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PB3 (JTDO-TRACESWO)     ------> SPI3_SCK
    PB4 (NJTRST)     ------> SPI3_MISO
    PB5     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = RF_SCK_Pin|RF_MISO_Pin|RF_MOSI_Pin;
 8000fea:	2338      	movs	r3, #56	@ 0x38
 8000fec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fee:	2302      	movs	r3, #2
 8000ff0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ff6:	2303      	movs	r3, #3
 8000ff8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000ffa:	2306      	movs	r3, #6
 8000ffc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ffe:	f107 0314 	add.w	r3, r7, #20
 8001002:	4619      	mov	r1, r3
 8001004:	4805      	ldr	r0, [pc, #20]	@ (800101c <HAL_SPI_MspInit+0x84>)
 8001006:	f000 fae9 	bl	80015dc <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 800100a:	bf00      	nop
 800100c:	3728      	adds	r7, #40	@ 0x28
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop
 8001014:	40003c00 	.word	0x40003c00
 8001018:	40021000 	.word	0x40021000
 800101c:	48000400 	.word	0x48000400

08001020 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001020:	b480      	push	{r7}
 8001022:	b083      	sub	sp, #12
 8001024:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001026:	4b0f      	ldr	r3, [pc, #60]	@ (8001064 <HAL_MspInit+0x44>)
 8001028:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800102a:	4a0e      	ldr	r2, [pc, #56]	@ (8001064 <HAL_MspInit+0x44>)
 800102c:	f043 0301 	orr.w	r3, r3, #1
 8001030:	6613      	str	r3, [r2, #96]	@ 0x60
 8001032:	4b0c      	ldr	r3, [pc, #48]	@ (8001064 <HAL_MspInit+0x44>)
 8001034:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001036:	f003 0301 	and.w	r3, r3, #1
 800103a:	607b      	str	r3, [r7, #4]
 800103c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800103e:	4b09      	ldr	r3, [pc, #36]	@ (8001064 <HAL_MspInit+0x44>)
 8001040:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001042:	4a08      	ldr	r2, [pc, #32]	@ (8001064 <HAL_MspInit+0x44>)
 8001044:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001048:	6593      	str	r3, [r2, #88]	@ 0x58
 800104a:	4b06      	ldr	r3, [pc, #24]	@ (8001064 <HAL_MspInit+0x44>)
 800104c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800104e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001052:	603b      	str	r3, [r7, #0]
 8001054:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001056:	bf00      	nop
 8001058:	370c      	adds	r7, #12
 800105a:	46bd      	mov	sp, r7
 800105c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001060:	4770      	bx	lr
 8001062:	bf00      	nop
 8001064:	40021000 	.word	0x40021000

08001068 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001068:	b480      	push	{r7}
 800106a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800106c:	bf00      	nop
 800106e:	e7fd      	b.n	800106c <NMI_Handler+0x4>

08001070 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001070:	b480      	push	{r7}
 8001072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001074:	bf00      	nop
 8001076:	e7fd      	b.n	8001074 <HardFault_Handler+0x4>

08001078 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001078:	b480      	push	{r7}
 800107a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800107c:	bf00      	nop
 800107e:	e7fd      	b.n	800107c <MemManage_Handler+0x4>

08001080 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001080:	b480      	push	{r7}
 8001082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001084:	bf00      	nop
 8001086:	e7fd      	b.n	8001084 <BusFault_Handler+0x4>

08001088 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001088:	b480      	push	{r7}
 800108a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800108c:	bf00      	nop
 800108e:	e7fd      	b.n	800108c <UsageFault_Handler+0x4>

08001090 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001090:	b480      	push	{r7}
 8001092:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001094:	bf00      	nop
 8001096:	46bd      	mov	sp, r7
 8001098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109c:	4770      	bx	lr

0800109e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800109e:	b480      	push	{r7}
 80010a0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010a2:	bf00      	nop
 80010a4:	46bd      	mov	sp, r7
 80010a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010aa:	4770      	bx	lr

080010ac <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010ac:	b480      	push	{r7}
 80010ae:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010b0:	bf00      	nop
 80010b2:	46bd      	mov	sp, r7
 80010b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b8:	4770      	bx	lr

080010ba <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010ba:	b580      	push	{r7, lr}
 80010bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010be:	f000 f963 	bl	8001388 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010c2:	bf00      	nop
 80010c4:	bd80      	pop	{r7, pc}
	...

080010c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b086      	sub	sp, #24
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010d0:	4a14      	ldr	r2, [pc, #80]	@ (8001124 <_sbrk+0x5c>)
 80010d2:	4b15      	ldr	r3, [pc, #84]	@ (8001128 <_sbrk+0x60>)
 80010d4:	1ad3      	subs	r3, r2, r3
 80010d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010d8:	697b      	ldr	r3, [r7, #20]
 80010da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010dc:	4b13      	ldr	r3, [pc, #76]	@ (800112c <_sbrk+0x64>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d102      	bne.n	80010ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010e4:	4b11      	ldr	r3, [pc, #68]	@ (800112c <_sbrk+0x64>)
 80010e6:	4a12      	ldr	r2, [pc, #72]	@ (8001130 <_sbrk+0x68>)
 80010e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010ea:	4b10      	ldr	r3, [pc, #64]	@ (800112c <_sbrk+0x64>)
 80010ec:	681a      	ldr	r2, [r3, #0]
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	4413      	add	r3, r2
 80010f2:	693a      	ldr	r2, [r7, #16]
 80010f4:	429a      	cmp	r2, r3
 80010f6:	d207      	bcs.n	8001108 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80010f8:	f002 ff02 	bl	8003f00 <__errno>
 80010fc:	4603      	mov	r3, r0
 80010fe:	220c      	movs	r2, #12
 8001100:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001102:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001106:	e009      	b.n	800111c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001108:	4b08      	ldr	r3, [pc, #32]	@ (800112c <_sbrk+0x64>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800110e:	4b07      	ldr	r3, [pc, #28]	@ (800112c <_sbrk+0x64>)
 8001110:	681a      	ldr	r2, [r3, #0]
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	4413      	add	r3, r2
 8001116:	4a05      	ldr	r2, [pc, #20]	@ (800112c <_sbrk+0x64>)
 8001118:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800111a:	68fb      	ldr	r3, [r7, #12]
}
 800111c:	4618      	mov	r0, r3
 800111e:	3718      	adds	r7, #24
 8001120:	46bd      	mov	sp, r7
 8001122:	bd80      	pop	{r7, pc}
 8001124:	20010000 	.word	0x20010000
 8001128:	00000400 	.word	0x00000400
 800112c:	2000051c 	.word	0x2000051c
 8001130:	200006f8 	.word	0x200006f8

08001134 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001134:	b480      	push	{r7}
 8001136:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001138:	4b06      	ldr	r3, [pc, #24]	@ (8001154 <SystemInit+0x20>)
 800113a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800113e:	4a05      	ldr	r2, [pc, #20]	@ (8001154 <SystemInit+0x20>)
 8001140:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001144:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001148:	bf00      	nop
 800114a:	46bd      	mov	sp, r7
 800114c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001150:	4770      	bx	lr
 8001152:	bf00      	nop
 8001154:	e000ed00 	.word	0xe000ed00

08001158 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800115c:	4b14      	ldr	r3, [pc, #80]	@ (80011b0 <MX_USART2_UART_Init+0x58>)
 800115e:	4a15      	ldr	r2, [pc, #84]	@ (80011b4 <MX_USART2_UART_Init+0x5c>)
 8001160:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001162:	4b13      	ldr	r3, [pc, #76]	@ (80011b0 <MX_USART2_UART_Init+0x58>)
 8001164:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001168:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800116a:	4b11      	ldr	r3, [pc, #68]	@ (80011b0 <MX_USART2_UART_Init+0x58>)
 800116c:	2200      	movs	r2, #0
 800116e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001170:	4b0f      	ldr	r3, [pc, #60]	@ (80011b0 <MX_USART2_UART_Init+0x58>)
 8001172:	2200      	movs	r2, #0
 8001174:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001176:	4b0e      	ldr	r3, [pc, #56]	@ (80011b0 <MX_USART2_UART_Init+0x58>)
 8001178:	2200      	movs	r2, #0
 800117a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800117c:	4b0c      	ldr	r3, [pc, #48]	@ (80011b0 <MX_USART2_UART_Init+0x58>)
 800117e:	220c      	movs	r2, #12
 8001180:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001182:	4b0b      	ldr	r3, [pc, #44]	@ (80011b0 <MX_USART2_UART_Init+0x58>)
 8001184:	2200      	movs	r2, #0
 8001186:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001188:	4b09      	ldr	r3, [pc, #36]	@ (80011b0 <MX_USART2_UART_Init+0x58>)
 800118a:	2200      	movs	r2, #0
 800118c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800118e:	4b08      	ldr	r3, [pc, #32]	@ (80011b0 <MX_USART2_UART_Init+0x58>)
 8001190:	2200      	movs	r2, #0
 8001192:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001194:	4b06      	ldr	r3, [pc, #24]	@ (80011b0 <MX_USART2_UART_Init+0x58>)
 8001196:	2200      	movs	r2, #0
 8001198:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800119a:	4805      	ldr	r0, [pc, #20]	@ (80011b0 <MX_USART2_UART_Init+0x58>)
 800119c:	f002 f96e 	bl	800347c <HAL_UART_Init>
 80011a0:	4603      	mov	r3, r0
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d001      	beq.n	80011aa <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80011a6:	f7ff fb89 	bl	80008bc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80011aa:	bf00      	nop
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	bf00      	nop
 80011b0:	20000520 	.word	0x20000520
 80011b4:	40004400 	.word	0x40004400

080011b8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b09e      	sub	sp, #120	@ 0x78
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011c0:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80011c4:	2200      	movs	r2, #0
 80011c6:	601a      	str	r2, [r3, #0]
 80011c8:	605a      	str	r2, [r3, #4]
 80011ca:	609a      	str	r2, [r3, #8]
 80011cc:	60da      	str	r2, [r3, #12]
 80011ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80011d0:	f107 0310 	add.w	r3, r7, #16
 80011d4:	2254      	movs	r2, #84	@ 0x54
 80011d6:	2100      	movs	r1, #0
 80011d8:	4618      	mov	r0, r3
 80011da:	f002 fe89 	bl	8003ef0 <memset>
  if(uartHandle->Instance==USART2)
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	4a28      	ldr	r2, [pc, #160]	@ (8001284 <HAL_UART_MspInit+0xcc>)
 80011e4:	4293      	cmp	r3, r2
 80011e6:	d148      	bne.n	800127a <HAL_UART_MspInit+0xc2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80011e8:	2302      	movs	r3, #2
 80011ea:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80011ec:	2300      	movs	r3, #0
 80011ee:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011f0:	f107 0310 	add.w	r3, r7, #16
 80011f4:	4618      	mov	r0, r3
 80011f6:	f001 fa1f 	bl	8002638 <HAL_RCCEx_PeriphCLKConfig>
 80011fa:	4603      	mov	r3, r0
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d001      	beq.n	8001204 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001200:	f7ff fb5c 	bl	80008bc <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001204:	4b20      	ldr	r3, [pc, #128]	@ (8001288 <HAL_UART_MspInit+0xd0>)
 8001206:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001208:	4a1f      	ldr	r2, [pc, #124]	@ (8001288 <HAL_UART_MspInit+0xd0>)
 800120a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800120e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001210:	4b1d      	ldr	r3, [pc, #116]	@ (8001288 <HAL_UART_MspInit+0xd0>)
 8001212:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001214:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001218:	60fb      	str	r3, [r7, #12]
 800121a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800121c:	4b1a      	ldr	r3, [pc, #104]	@ (8001288 <HAL_UART_MspInit+0xd0>)
 800121e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001220:	4a19      	ldr	r2, [pc, #100]	@ (8001288 <HAL_UART_MspInit+0xd0>)
 8001222:	f043 0301 	orr.w	r3, r3, #1
 8001226:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001228:	4b17      	ldr	r3, [pc, #92]	@ (8001288 <HAL_UART_MspInit+0xd0>)
 800122a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800122c:	f003 0301 	and.w	r3, r3, #1
 8001230:	60bb      	str	r3, [r7, #8]
 8001232:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8001234:	2304      	movs	r3, #4
 8001236:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001238:	2302      	movs	r3, #2
 800123a:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800123c:	2300      	movs	r3, #0
 800123e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001240:	2303      	movs	r3, #3
 8001242:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001244:	2307      	movs	r3, #7
 8001246:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8001248:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800124c:	4619      	mov	r1, r3
 800124e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001252:	f000 f9c3 	bl	80015dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8001256:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800125a:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800125c:	2302      	movs	r3, #2
 800125e:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001260:	2300      	movs	r3, #0
 8001262:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001264:	2303      	movs	r3, #3
 8001266:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8001268:	2303      	movs	r3, #3
 800126a:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 800126c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001270:	4619      	mov	r1, r3
 8001272:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001276:	f000 f9b1 	bl	80015dc <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800127a:	bf00      	nop
 800127c:	3778      	adds	r7, #120	@ 0x78
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	40004400 	.word	0x40004400
 8001288:	40021000 	.word	0x40021000

0800128c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800128c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80012c4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001290:	f7ff ff50 	bl	8001134 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001294:	480c      	ldr	r0, [pc, #48]	@ (80012c8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001296:	490d      	ldr	r1, [pc, #52]	@ (80012cc <LoopForever+0xa>)
  ldr r2, =_sidata
 8001298:	4a0d      	ldr	r2, [pc, #52]	@ (80012d0 <LoopForever+0xe>)
  movs r3, #0
 800129a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800129c:	e002      	b.n	80012a4 <LoopCopyDataInit>

0800129e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800129e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012a2:	3304      	adds	r3, #4

080012a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012a8:	d3f9      	bcc.n	800129e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012aa:	4a0a      	ldr	r2, [pc, #40]	@ (80012d4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80012ac:	4c0a      	ldr	r4, [pc, #40]	@ (80012d8 <LoopForever+0x16>)
  movs r3, #0
 80012ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012b0:	e001      	b.n	80012b6 <LoopFillZerobss>

080012b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012b4:	3204      	adds	r2, #4

080012b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012b8:	d3fb      	bcc.n	80012b2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80012ba:	f002 fe27 	bl	8003f0c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80012be:	f7ff f9b9 	bl	8000634 <main>

080012c2 <LoopForever>:

LoopForever:
    b LoopForever
 80012c2:	e7fe      	b.n	80012c2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80012c4:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80012c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012cc:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 80012d0:	080048b8 	.word	0x080048b8
  ldr r2, =_sbss
 80012d4:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 80012d8:	200006f4 	.word	0x200006f4

080012dc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80012dc:	e7fe      	b.n	80012dc <ADC1_IRQHandler>

080012de <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012de:	b580      	push	{r7, lr}
 80012e0:	b082      	sub	sp, #8
 80012e2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80012e4:	2300      	movs	r3, #0
 80012e6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012e8:	2003      	movs	r0, #3
 80012ea:	f000 f943 	bl	8001574 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80012ee:	2000      	movs	r0, #0
 80012f0:	f000 f80e 	bl	8001310 <HAL_InitTick>
 80012f4:	4603      	mov	r3, r0
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d002      	beq.n	8001300 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80012fa:	2301      	movs	r3, #1
 80012fc:	71fb      	strb	r3, [r7, #7]
 80012fe:	e001      	b.n	8001304 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001300:	f7ff fe8e 	bl	8001020 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001304:	79fb      	ldrb	r3, [r7, #7]
}
 8001306:	4618      	mov	r0, r3
 8001308:	3708      	adds	r7, #8
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}
	...

08001310 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b084      	sub	sp, #16
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001318:	2300      	movs	r3, #0
 800131a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800131c:	4b17      	ldr	r3, [pc, #92]	@ (800137c <HAL_InitTick+0x6c>)
 800131e:	781b      	ldrb	r3, [r3, #0]
 8001320:	2b00      	cmp	r3, #0
 8001322:	d023      	beq.n	800136c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001324:	4b16      	ldr	r3, [pc, #88]	@ (8001380 <HAL_InitTick+0x70>)
 8001326:	681a      	ldr	r2, [r3, #0]
 8001328:	4b14      	ldr	r3, [pc, #80]	@ (800137c <HAL_InitTick+0x6c>)
 800132a:	781b      	ldrb	r3, [r3, #0]
 800132c:	4619      	mov	r1, r3
 800132e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001332:	fbb3 f3f1 	udiv	r3, r3, r1
 8001336:	fbb2 f3f3 	udiv	r3, r2, r3
 800133a:	4618      	mov	r0, r3
 800133c:	f000 f941 	bl	80015c2 <HAL_SYSTICK_Config>
 8001340:	4603      	mov	r3, r0
 8001342:	2b00      	cmp	r3, #0
 8001344:	d10f      	bne.n	8001366 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	2b0f      	cmp	r3, #15
 800134a:	d809      	bhi.n	8001360 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800134c:	2200      	movs	r2, #0
 800134e:	6879      	ldr	r1, [r7, #4]
 8001350:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001354:	f000 f919 	bl	800158a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001358:	4a0a      	ldr	r2, [pc, #40]	@ (8001384 <HAL_InitTick+0x74>)
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	6013      	str	r3, [r2, #0]
 800135e:	e007      	b.n	8001370 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001360:	2301      	movs	r3, #1
 8001362:	73fb      	strb	r3, [r7, #15]
 8001364:	e004      	b.n	8001370 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001366:	2301      	movs	r3, #1
 8001368:	73fb      	strb	r3, [r7, #15]
 800136a:	e001      	b.n	8001370 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800136c:	2301      	movs	r3, #1
 800136e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001370:	7bfb      	ldrb	r3, [r7, #15]
}
 8001372:	4618      	mov	r0, r3
 8001374:	3710      	adds	r7, #16
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}
 800137a:	bf00      	nop
 800137c:	2000002c 	.word	0x2000002c
 8001380:	20000024 	.word	0x20000024
 8001384:	20000028 	.word	0x20000028

08001388 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001388:	b480      	push	{r7}
 800138a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800138c:	4b06      	ldr	r3, [pc, #24]	@ (80013a8 <HAL_IncTick+0x20>)
 800138e:	781b      	ldrb	r3, [r3, #0]
 8001390:	461a      	mov	r2, r3
 8001392:	4b06      	ldr	r3, [pc, #24]	@ (80013ac <HAL_IncTick+0x24>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	4413      	add	r3, r2
 8001398:	4a04      	ldr	r2, [pc, #16]	@ (80013ac <HAL_IncTick+0x24>)
 800139a:	6013      	str	r3, [r2, #0]
}
 800139c:	bf00      	nop
 800139e:	46bd      	mov	sp, r7
 80013a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a4:	4770      	bx	lr
 80013a6:	bf00      	nop
 80013a8:	2000002c 	.word	0x2000002c
 80013ac:	200005a8 	.word	0x200005a8

080013b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013b0:	b480      	push	{r7}
 80013b2:	af00      	add	r7, sp, #0
  return uwTick;
 80013b4:	4b03      	ldr	r3, [pc, #12]	@ (80013c4 <HAL_GetTick+0x14>)
 80013b6:	681b      	ldr	r3, [r3, #0]
}
 80013b8:	4618      	mov	r0, r3
 80013ba:	46bd      	mov	sp, r7
 80013bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c0:	4770      	bx	lr
 80013c2:	bf00      	nop
 80013c4:	200005a8 	.word	0x200005a8

080013c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b084      	sub	sp, #16
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80013d0:	f7ff ffee 	bl	80013b0 <HAL_GetTick>
 80013d4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80013e0:	d005      	beq.n	80013ee <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80013e2:	4b0a      	ldr	r3, [pc, #40]	@ (800140c <HAL_Delay+0x44>)
 80013e4:	781b      	ldrb	r3, [r3, #0]
 80013e6:	461a      	mov	r2, r3
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	4413      	add	r3, r2
 80013ec:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80013ee:	bf00      	nop
 80013f0:	f7ff ffde 	bl	80013b0 <HAL_GetTick>
 80013f4:	4602      	mov	r2, r0
 80013f6:	68bb      	ldr	r3, [r7, #8]
 80013f8:	1ad3      	subs	r3, r2, r3
 80013fa:	68fa      	ldr	r2, [r7, #12]
 80013fc:	429a      	cmp	r2, r3
 80013fe:	d8f7      	bhi.n	80013f0 <HAL_Delay+0x28>
  {
  }
}
 8001400:	bf00      	nop
 8001402:	bf00      	nop
 8001404:	3710      	adds	r7, #16
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	2000002c 	.word	0x2000002c

08001410 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001410:	b480      	push	{r7}
 8001412:	b085      	sub	sp, #20
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	f003 0307 	and.w	r3, r3, #7
 800141e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001420:	4b0c      	ldr	r3, [pc, #48]	@ (8001454 <__NVIC_SetPriorityGrouping+0x44>)
 8001422:	68db      	ldr	r3, [r3, #12]
 8001424:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001426:	68ba      	ldr	r2, [r7, #8]
 8001428:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800142c:	4013      	ands	r3, r2
 800142e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001434:	68bb      	ldr	r3, [r7, #8]
 8001436:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001438:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800143c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001440:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001442:	4a04      	ldr	r2, [pc, #16]	@ (8001454 <__NVIC_SetPriorityGrouping+0x44>)
 8001444:	68bb      	ldr	r3, [r7, #8]
 8001446:	60d3      	str	r3, [r2, #12]
}
 8001448:	bf00      	nop
 800144a:	3714      	adds	r7, #20
 800144c:	46bd      	mov	sp, r7
 800144e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001452:	4770      	bx	lr
 8001454:	e000ed00 	.word	0xe000ed00

08001458 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001458:	b480      	push	{r7}
 800145a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800145c:	4b04      	ldr	r3, [pc, #16]	@ (8001470 <__NVIC_GetPriorityGrouping+0x18>)
 800145e:	68db      	ldr	r3, [r3, #12]
 8001460:	0a1b      	lsrs	r3, r3, #8
 8001462:	f003 0307 	and.w	r3, r3, #7
}
 8001466:	4618      	mov	r0, r3
 8001468:	46bd      	mov	sp, r7
 800146a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146e:	4770      	bx	lr
 8001470:	e000ed00 	.word	0xe000ed00

08001474 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001474:	b480      	push	{r7}
 8001476:	b083      	sub	sp, #12
 8001478:	af00      	add	r7, sp, #0
 800147a:	4603      	mov	r3, r0
 800147c:	6039      	str	r1, [r7, #0]
 800147e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001480:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001484:	2b00      	cmp	r3, #0
 8001486:	db0a      	blt.n	800149e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	b2da      	uxtb	r2, r3
 800148c:	490c      	ldr	r1, [pc, #48]	@ (80014c0 <__NVIC_SetPriority+0x4c>)
 800148e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001492:	0112      	lsls	r2, r2, #4
 8001494:	b2d2      	uxtb	r2, r2
 8001496:	440b      	add	r3, r1
 8001498:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800149c:	e00a      	b.n	80014b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800149e:	683b      	ldr	r3, [r7, #0]
 80014a0:	b2da      	uxtb	r2, r3
 80014a2:	4908      	ldr	r1, [pc, #32]	@ (80014c4 <__NVIC_SetPriority+0x50>)
 80014a4:	79fb      	ldrb	r3, [r7, #7]
 80014a6:	f003 030f 	and.w	r3, r3, #15
 80014aa:	3b04      	subs	r3, #4
 80014ac:	0112      	lsls	r2, r2, #4
 80014ae:	b2d2      	uxtb	r2, r2
 80014b0:	440b      	add	r3, r1
 80014b2:	761a      	strb	r2, [r3, #24]
}
 80014b4:	bf00      	nop
 80014b6:	370c      	adds	r7, #12
 80014b8:	46bd      	mov	sp, r7
 80014ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014be:	4770      	bx	lr
 80014c0:	e000e100 	.word	0xe000e100
 80014c4:	e000ed00 	.word	0xe000ed00

080014c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014c8:	b480      	push	{r7}
 80014ca:	b089      	sub	sp, #36	@ 0x24
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	60f8      	str	r0, [r7, #12]
 80014d0:	60b9      	str	r1, [r7, #8]
 80014d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	f003 0307 	and.w	r3, r3, #7
 80014da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014dc:	69fb      	ldr	r3, [r7, #28]
 80014de:	f1c3 0307 	rsb	r3, r3, #7
 80014e2:	2b04      	cmp	r3, #4
 80014e4:	bf28      	it	cs
 80014e6:	2304      	movcs	r3, #4
 80014e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014ea:	69fb      	ldr	r3, [r7, #28]
 80014ec:	3304      	adds	r3, #4
 80014ee:	2b06      	cmp	r3, #6
 80014f0:	d902      	bls.n	80014f8 <NVIC_EncodePriority+0x30>
 80014f2:	69fb      	ldr	r3, [r7, #28]
 80014f4:	3b03      	subs	r3, #3
 80014f6:	e000      	b.n	80014fa <NVIC_EncodePriority+0x32>
 80014f8:	2300      	movs	r3, #0
 80014fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014fc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001500:	69bb      	ldr	r3, [r7, #24]
 8001502:	fa02 f303 	lsl.w	r3, r2, r3
 8001506:	43da      	mvns	r2, r3
 8001508:	68bb      	ldr	r3, [r7, #8]
 800150a:	401a      	ands	r2, r3
 800150c:	697b      	ldr	r3, [r7, #20]
 800150e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001510:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001514:	697b      	ldr	r3, [r7, #20]
 8001516:	fa01 f303 	lsl.w	r3, r1, r3
 800151a:	43d9      	mvns	r1, r3
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001520:	4313      	orrs	r3, r2
         );
}
 8001522:	4618      	mov	r0, r3
 8001524:	3724      	adds	r7, #36	@ 0x24
 8001526:	46bd      	mov	sp, r7
 8001528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152c:	4770      	bx	lr
	...

08001530 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b082      	sub	sp, #8
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	3b01      	subs	r3, #1
 800153c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001540:	d301      	bcc.n	8001546 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001542:	2301      	movs	r3, #1
 8001544:	e00f      	b.n	8001566 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001546:	4a0a      	ldr	r2, [pc, #40]	@ (8001570 <SysTick_Config+0x40>)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	3b01      	subs	r3, #1
 800154c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800154e:	210f      	movs	r1, #15
 8001550:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001554:	f7ff ff8e 	bl	8001474 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001558:	4b05      	ldr	r3, [pc, #20]	@ (8001570 <SysTick_Config+0x40>)
 800155a:	2200      	movs	r2, #0
 800155c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800155e:	4b04      	ldr	r3, [pc, #16]	@ (8001570 <SysTick_Config+0x40>)
 8001560:	2207      	movs	r2, #7
 8001562:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001564:	2300      	movs	r3, #0
}
 8001566:	4618      	mov	r0, r3
 8001568:	3708      	adds	r7, #8
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}
 800156e:	bf00      	nop
 8001570:	e000e010 	.word	0xe000e010

08001574 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b082      	sub	sp, #8
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800157c:	6878      	ldr	r0, [r7, #4]
 800157e:	f7ff ff47 	bl	8001410 <__NVIC_SetPriorityGrouping>
}
 8001582:	bf00      	nop
 8001584:	3708      	adds	r7, #8
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}

0800158a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800158a:	b580      	push	{r7, lr}
 800158c:	b086      	sub	sp, #24
 800158e:	af00      	add	r7, sp, #0
 8001590:	4603      	mov	r3, r0
 8001592:	60b9      	str	r1, [r7, #8]
 8001594:	607a      	str	r2, [r7, #4]
 8001596:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001598:	2300      	movs	r3, #0
 800159a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800159c:	f7ff ff5c 	bl	8001458 <__NVIC_GetPriorityGrouping>
 80015a0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015a2:	687a      	ldr	r2, [r7, #4]
 80015a4:	68b9      	ldr	r1, [r7, #8]
 80015a6:	6978      	ldr	r0, [r7, #20]
 80015a8:	f7ff ff8e 	bl	80014c8 <NVIC_EncodePriority>
 80015ac:	4602      	mov	r2, r0
 80015ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015b2:	4611      	mov	r1, r2
 80015b4:	4618      	mov	r0, r3
 80015b6:	f7ff ff5d 	bl	8001474 <__NVIC_SetPriority>
}
 80015ba:	bf00      	nop
 80015bc:	3718      	adds	r7, #24
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}

080015c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015c2:	b580      	push	{r7, lr}
 80015c4:	b082      	sub	sp, #8
 80015c6:	af00      	add	r7, sp, #0
 80015c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015ca:	6878      	ldr	r0, [r7, #4]
 80015cc:	f7ff ffb0 	bl	8001530 <SysTick_Config>
 80015d0:	4603      	mov	r3, r0
}
 80015d2:	4618      	mov	r0, r3
 80015d4:	3708      	adds	r7, #8
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}
	...

080015dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015dc:	b480      	push	{r7}
 80015de:	b087      	sub	sp, #28
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
 80015e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80015e6:	2300      	movs	r3, #0
 80015e8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015ea:	e148      	b.n	800187e <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	681a      	ldr	r2, [r3, #0]
 80015f0:	2101      	movs	r1, #1
 80015f2:	697b      	ldr	r3, [r7, #20]
 80015f4:	fa01 f303 	lsl.w	r3, r1, r3
 80015f8:	4013      	ands	r3, r2
 80015fa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	2b00      	cmp	r3, #0
 8001600:	f000 813a 	beq.w	8001878 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	685b      	ldr	r3, [r3, #4]
 8001608:	f003 0303 	and.w	r3, r3, #3
 800160c:	2b01      	cmp	r3, #1
 800160e:	d005      	beq.n	800161c <HAL_GPIO_Init+0x40>
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	685b      	ldr	r3, [r3, #4]
 8001614:	f003 0303 	and.w	r3, r3, #3
 8001618:	2b02      	cmp	r3, #2
 800161a:	d130      	bne.n	800167e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	689b      	ldr	r3, [r3, #8]
 8001620:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001622:	697b      	ldr	r3, [r7, #20]
 8001624:	005b      	lsls	r3, r3, #1
 8001626:	2203      	movs	r2, #3
 8001628:	fa02 f303 	lsl.w	r3, r2, r3
 800162c:	43db      	mvns	r3, r3
 800162e:	693a      	ldr	r2, [r7, #16]
 8001630:	4013      	ands	r3, r2
 8001632:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	68da      	ldr	r2, [r3, #12]
 8001638:	697b      	ldr	r3, [r7, #20]
 800163a:	005b      	lsls	r3, r3, #1
 800163c:	fa02 f303 	lsl.w	r3, r2, r3
 8001640:	693a      	ldr	r2, [r7, #16]
 8001642:	4313      	orrs	r3, r2
 8001644:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	693a      	ldr	r2, [r7, #16]
 800164a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	685b      	ldr	r3, [r3, #4]
 8001650:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001652:	2201      	movs	r2, #1
 8001654:	697b      	ldr	r3, [r7, #20]
 8001656:	fa02 f303 	lsl.w	r3, r2, r3
 800165a:	43db      	mvns	r3, r3
 800165c:	693a      	ldr	r2, [r7, #16]
 800165e:	4013      	ands	r3, r2
 8001660:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	685b      	ldr	r3, [r3, #4]
 8001666:	091b      	lsrs	r3, r3, #4
 8001668:	f003 0201 	and.w	r2, r3, #1
 800166c:	697b      	ldr	r3, [r7, #20]
 800166e:	fa02 f303 	lsl.w	r3, r2, r3
 8001672:	693a      	ldr	r2, [r7, #16]
 8001674:	4313      	orrs	r3, r2
 8001676:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	693a      	ldr	r2, [r7, #16]
 800167c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800167e:	683b      	ldr	r3, [r7, #0]
 8001680:	685b      	ldr	r3, [r3, #4]
 8001682:	f003 0303 	and.w	r3, r3, #3
 8001686:	2b03      	cmp	r3, #3
 8001688:	d017      	beq.n	80016ba <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	68db      	ldr	r3, [r3, #12]
 800168e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001690:	697b      	ldr	r3, [r7, #20]
 8001692:	005b      	lsls	r3, r3, #1
 8001694:	2203      	movs	r2, #3
 8001696:	fa02 f303 	lsl.w	r3, r2, r3
 800169a:	43db      	mvns	r3, r3
 800169c:	693a      	ldr	r2, [r7, #16]
 800169e:	4013      	ands	r3, r2
 80016a0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80016a2:	683b      	ldr	r3, [r7, #0]
 80016a4:	689a      	ldr	r2, [r3, #8]
 80016a6:	697b      	ldr	r3, [r7, #20]
 80016a8:	005b      	lsls	r3, r3, #1
 80016aa:	fa02 f303 	lsl.w	r3, r2, r3
 80016ae:	693a      	ldr	r2, [r7, #16]
 80016b0:	4313      	orrs	r3, r2
 80016b2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	693a      	ldr	r2, [r7, #16]
 80016b8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016ba:	683b      	ldr	r3, [r7, #0]
 80016bc:	685b      	ldr	r3, [r3, #4]
 80016be:	f003 0303 	and.w	r3, r3, #3
 80016c2:	2b02      	cmp	r3, #2
 80016c4:	d123      	bne.n	800170e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80016c6:	697b      	ldr	r3, [r7, #20]
 80016c8:	08da      	lsrs	r2, r3, #3
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	3208      	adds	r2, #8
 80016ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016d2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80016d4:	697b      	ldr	r3, [r7, #20]
 80016d6:	f003 0307 	and.w	r3, r3, #7
 80016da:	009b      	lsls	r3, r3, #2
 80016dc:	220f      	movs	r2, #15
 80016de:	fa02 f303 	lsl.w	r3, r2, r3
 80016e2:	43db      	mvns	r3, r3
 80016e4:	693a      	ldr	r2, [r7, #16]
 80016e6:	4013      	ands	r3, r2
 80016e8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80016ea:	683b      	ldr	r3, [r7, #0]
 80016ec:	691a      	ldr	r2, [r3, #16]
 80016ee:	697b      	ldr	r3, [r7, #20]
 80016f0:	f003 0307 	and.w	r3, r3, #7
 80016f4:	009b      	lsls	r3, r3, #2
 80016f6:	fa02 f303 	lsl.w	r3, r2, r3
 80016fa:	693a      	ldr	r2, [r7, #16]
 80016fc:	4313      	orrs	r3, r2
 80016fe:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001700:	697b      	ldr	r3, [r7, #20]
 8001702:	08da      	lsrs	r2, r3, #3
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	3208      	adds	r2, #8
 8001708:	6939      	ldr	r1, [r7, #16]
 800170a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001714:	697b      	ldr	r3, [r7, #20]
 8001716:	005b      	lsls	r3, r3, #1
 8001718:	2203      	movs	r2, #3
 800171a:	fa02 f303 	lsl.w	r3, r2, r3
 800171e:	43db      	mvns	r3, r3
 8001720:	693a      	ldr	r2, [r7, #16]
 8001722:	4013      	ands	r3, r2
 8001724:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001726:	683b      	ldr	r3, [r7, #0]
 8001728:	685b      	ldr	r3, [r3, #4]
 800172a:	f003 0203 	and.w	r2, r3, #3
 800172e:	697b      	ldr	r3, [r7, #20]
 8001730:	005b      	lsls	r3, r3, #1
 8001732:	fa02 f303 	lsl.w	r3, r2, r3
 8001736:	693a      	ldr	r2, [r7, #16]
 8001738:	4313      	orrs	r3, r2
 800173a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	693a      	ldr	r2, [r7, #16]
 8001740:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	685b      	ldr	r3, [r3, #4]
 8001746:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800174a:	2b00      	cmp	r3, #0
 800174c:	f000 8094 	beq.w	8001878 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001750:	4b52      	ldr	r3, [pc, #328]	@ (800189c <HAL_GPIO_Init+0x2c0>)
 8001752:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001754:	4a51      	ldr	r2, [pc, #324]	@ (800189c <HAL_GPIO_Init+0x2c0>)
 8001756:	f043 0301 	orr.w	r3, r3, #1
 800175a:	6613      	str	r3, [r2, #96]	@ 0x60
 800175c:	4b4f      	ldr	r3, [pc, #316]	@ (800189c <HAL_GPIO_Init+0x2c0>)
 800175e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001760:	f003 0301 	and.w	r3, r3, #1
 8001764:	60bb      	str	r3, [r7, #8]
 8001766:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001768:	4a4d      	ldr	r2, [pc, #308]	@ (80018a0 <HAL_GPIO_Init+0x2c4>)
 800176a:	697b      	ldr	r3, [r7, #20]
 800176c:	089b      	lsrs	r3, r3, #2
 800176e:	3302      	adds	r3, #2
 8001770:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001774:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001776:	697b      	ldr	r3, [r7, #20]
 8001778:	f003 0303 	and.w	r3, r3, #3
 800177c:	009b      	lsls	r3, r3, #2
 800177e:	220f      	movs	r2, #15
 8001780:	fa02 f303 	lsl.w	r3, r2, r3
 8001784:	43db      	mvns	r3, r3
 8001786:	693a      	ldr	r2, [r7, #16]
 8001788:	4013      	ands	r3, r2
 800178a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001792:	d00d      	beq.n	80017b0 <HAL_GPIO_Init+0x1d4>
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	4a43      	ldr	r2, [pc, #268]	@ (80018a4 <HAL_GPIO_Init+0x2c8>)
 8001798:	4293      	cmp	r3, r2
 800179a:	d007      	beq.n	80017ac <HAL_GPIO_Init+0x1d0>
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	4a42      	ldr	r2, [pc, #264]	@ (80018a8 <HAL_GPIO_Init+0x2cc>)
 80017a0:	4293      	cmp	r3, r2
 80017a2:	d101      	bne.n	80017a8 <HAL_GPIO_Init+0x1cc>
 80017a4:	2302      	movs	r3, #2
 80017a6:	e004      	b.n	80017b2 <HAL_GPIO_Init+0x1d6>
 80017a8:	2307      	movs	r3, #7
 80017aa:	e002      	b.n	80017b2 <HAL_GPIO_Init+0x1d6>
 80017ac:	2301      	movs	r3, #1
 80017ae:	e000      	b.n	80017b2 <HAL_GPIO_Init+0x1d6>
 80017b0:	2300      	movs	r3, #0
 80017b2:	697a      	ldr	r2, [r7, #20]
 80017b4:	f002 0203 	and.w	r2, r2, #3
 80017b8:	0092      	lsls	r2, r2, #2
 80017ba:	4093      	lsls	r3, r2
 80017bc:	693a      	ldr	r2, [r7, #16]
 80017be:	4313      	orrs	r3, r2
 80017c0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80017c2:	4937      	ldr	r1, [pc, #220]	@ (80018a0 <HAL_GPIO_Init+0x2c4>)
 80017c4:	697b      	ldr	r3, [r7, #20]
 80017c6:	089b      	lsrs	r3, r3, #2
 80017c8:	3302      	adds	r3, #2
 80017ca:	693a      	ldr	r2, [r7, #16]
 80017cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80017d0:	4b36      	ldr	r3, [pc, #216]	@ (80018ac <HAL_GPIO_Init+0x2d0>)
 80017d2:	689b      	ldr	r3, [r3, #8]
 80017d4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	43db      	mvns	r3, r3
 80017da:	693a      	ldr	r2, [r7, #16]
 80017dc:	4013      	ands	r3, r2
 80017de:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	685b      	ldr	r3, [r3, #4]
 80017e4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d003      	beq.n	80017f4 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 80017ec:	693a      	ldr	r2, [r7, #16]
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	4313      	orrs	r3, r2
 80017f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80017f4:	4a2d      	ldr	r2, [pc, #180]	@ (80018ac <HAL_GPIO_Init+0x2d0>)
 80017f6:	693b      	ldr	r3, [r7, #16]
 80017f8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80017fa:	4b2c      	ldr	r3, [pc, #176]	@ (80018ac <HAL_GPIO_Init+0x2d0>)
 80017fc:	68db      	ldr	r3, [r3, #12]
 80017fe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	43db      	mvns	r3, r3
 8001804:	693a      	ldr	r2, [r7, #16]
 8001806:	4013      	ands	r3, r2
 8001808:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800180a:	683b      	ldr	r3, [r7, #0]
 800180c:	685b      	ldr	r3, [r3, #4]
 800180e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001812:	2b00      	cmp	r3, #0
 8001814:	d003      	beq.n	800181e <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8001816:	693a      	ldr	r2, [r7, #16]
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	4313      	orrs	r3, r2
 800181c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800181e:	4a23      	ldr	r2, [pc, #140]	@ (80018ac <HAL_GPIO_Init+0x2d0>)
 8001820:	693b      	ldr	r3, [r7, #16]
 8001822:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001824:	4b21      	ldr	r3, [pc, #132]	@ (80018ac <HAL_GPIO_Init+0x2d0>)
 8001826:	685b      	ldr	r3, [r3, #4]
 8001828:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	43db      	mvns	r3, r3
 800182e:	693a      	ldr	r2, [r7, #16]
 8001830:	4013      	ands	r3, r2
 8001832:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	685b      	ldr	r3, [r3, #4]
 8001838:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800183c:	2b00      	cmp	r3, #0
 800183e:	d003      	beq.n	8001848 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8001840:	693a      	ldr	r2, [r7, #16]
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	4313      	orrs	r3, r2
 8001846:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001848:	4a18      	ldr	r2, [pc, #96]	@ (80018ac <HAL_GPIO_Init+0x2d0>)
 800184a:	693b      	ldr	r3, [r7, #16]
 800184c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800184e:	4b17      	ldr	r3, [pc, #92]	@ (80018ac <HAL_GPIO_Init+0x2d0>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	43db      	mvns	r3, r3
 8001858:	693a      	ldr	r2, [r7, #16]
 800185a:	4013      	ands	r3, r2
 800185c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	685b      	ldr	r3, [r3, #4]
 8001862:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001866:	2b00      	cmp	r3, #0
 8001868:	d003      	beq.n	8001872 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 800186a:	693a      	ldr	r2, [r7, #16]
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	4313      	orrs	r3, r2
 8001870:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001872:	4a0e      	ldr	r2, [pc, #56]	@ (80018ac <HAL_GPIO_Init+0x2d0>)
 8001874:	693b      	ldr	r3, [r7, #16]
 8001876:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001878:	697b      	ldr	r3, [r7, #20]
 800187a:	3301      	adds	r3, #1
 800187c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	681a      	ldr	r2, [r3, #0]
 8001882:	697b      	ldr	r3, [r7, #20]
 8001884:	fa22 f303 	lsr.w	r3, r2, r3
 8001888:	2b00      	cmp	r3, #0
 800188a:	f47f aeaf 	bne.w	80015ec <HAL_GPIO_Init+0x10>
  }
}
 800188e:	bf00      	nop
 8001890:	bf00      	nop
 8001892:	371c      	adds	r7, #28
 8001894:	46bd      	mov	sp, r7
 8001896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189a:	4770      	bx	lr
 800189c:	40021000 	.word	0x40021000
 80018a0:	40010000 	.word	0x40010000
 80018a4:	48000400 	.word	0x48000400
 80018a8:	48000800 	.word	0x48000800
 80018ac:	40010400 	.word	0x40010400

080018b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80018b0:	b480      	push	{r7}
 80018b2:	b083      	sub	sp, #12
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
 80018b8:	460b      	mov	r3, r1
 80018ba:	807b      	strh	r3, [r7, #2]
 80018bc:	4613      	mov	r3, r2
 80018be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80018c0:	787b      	ldrb	r3, [r7, #1]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d003      	beq.n	80018ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80018c6:	887a      	ldrh	r2, [r7, #2]
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80018cc:	e002      	b.n	80018d4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80018ce:	887a      	ldrh	r2, [r7, #2]
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80018d4:	bf00      	nop
 80018d6:	370c      	adds	r7, #12
 80018d8:	46bd      	mov	sp, r7
 80018da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018de:	4770      	bx	lr

080018e0 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80018e0:	b480      	push	{r7}
 80018e2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80018e4:	4b05      	ldr	r3, [pc, #20]	@ (80018fc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	4a04      	ldr	r2, [pc, #16]	@ (80018fc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80018ea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80018ee:	6013      	str	r3, [r2, #0]
}
 80018f0:	bf00      	nop
 80018f2:	46bd      	mov	sp, r7
 80018f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f8:	4770      	bx	lr
 80018fa:	bf00      	nop
 80018fc:	40007000 	.word	0x40007000

08001900 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001900:	b480      	push	{r7}
 8001902:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001904:	4b04      	ldr	r3, [pc, #16]	@ (8001918 <HAL_PWREx_GetVoltageRange+0x18>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 800190c:	4618      	mov	r0, r3
 800190e:	46bd      	mov	sp, r7
 8001910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001914:	4770      	bx	lr
 8001916:	bf00      	nop
 8001918:	40007000 	.word	0x40007000

0800191c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800191c:	b480      	push	{r7}
 800191e:	b085      	sub	sp, #20
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800192a:	d130      	bne.n	800198e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800192c:	4b23      	ldr	r3, [pc, #140]	@ (80019bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001934:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001938:	d038      	beq.n	80019ac <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800193a:	4b20      	ldr	r3, [pc, #128]	@ (80019bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001942:	4a1e      	ldr	r2, [pc, #120]	@ (80019bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001944:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001948:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800194a:	4b1d      	ldr	r3, [pc, #116]	@ (80019c0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	2232      	movs	r2, #50	@ 0x32
 8001950:	fb02 f303 	mul.w	r3, r2, r3
 8001954:	4a1b      	ldr	r2, [pc, #108]	@ (80019c4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001956:	fba2 2303 	umull	r2, r3, r2, r3
 800195a:	0c9b      	lsrs	r3, r3, #18
 800195c:	3301      	adds	r3, #1
 800195e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001960:	e002      	b.n	8001968 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	3b01      	subs	r3, #1
 8001966:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001968:	4b14      	ldr	r3, [pc, #80]	@ (80019bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800196a:	695b      	ldr	r3, [r3, #20]
 800196c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001970:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001974:	d102      	bne.n	800197c <HAL_PWREx_ControlVoltageScaling+0x60>
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	2b00      	cmp	r3, #0
 800197a:	d1f2      	bne.n	8001962 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800197c:	4b0f      	ldr	r3, [pc, #60]	@ (80019bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800197e:	695b      	ldr	r3, [r3, #20]
 8001980:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001984:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001988:	d110      	bne.n	80019ac <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800198a:	2303      	movs	r3, #3
 800198c:	e00f      	b.n	80019ae <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800198e:	4b0b      	ldr	r3, [pc, #44]	@ (80019bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001996:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800199a:	d007      	beq.n	80019ac <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800199c:	4b07      	ldr	r3, [pc, #28]	@ (80019bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80019a4:	4a05      	ldr	r2, [pc, #20]	@ (80019bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80019a6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80019aa:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80019ac:	2300      	movs	r3, #0
}
 80019ae:	4618      	mov	r0, r3
 80019b0:	3714      	adds	r7, #20
 80019b2:	46bd      	mov	sp, r7
 80019b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b8:	4770      	bx	lr
 80019ba:	bf00      	nop
 80019bc:	40007000 	.word	0x40007000
 80019c0:	20000024 	.word	0x20000024
 80019c4:	431bde83 	.word	0x431bde83

080019c8 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b088      	sub	sp, #32
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d102      	bne.n	80019dc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80019d6:	2301      	movs	r3, #1
 80019d8:	f000 bc02 	b.w	80021e0 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80019dc:	4b96      	ldr	r3, [pc, #600]	@ (8001c38 <HAL_RCC_OscConfig+0x270>)
 80019de:	689b      	ldr	r3, [r3, #8]
 80019e0:	f003 030c 	and.w	r3, r3, #12
 80019e4:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80019e6:	4b94      	ldr	r3, [pc, #592]	@ (8001c38 <HAL_RCC_OscConfig+0x270>)
 80019e8:	68db      	ldr	r3, [r3, #12]
 80019ea:	f003 0303 	and.w	r3, r3, #3
 80019ee:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f003 0310 	and.w	r3, r3, #16
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	f000 80e4 	beq.w	8001bc6 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80019fe:	69bb      	ldr	r3, [r7, #24]
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d007      	beq.n	8001a14 <HAL_RCC_OscConfig+0x4c>
 8001a04:	69bb      	ldr	r3, [r7, #24]
 8001a06:	2b0c      	cmp	r3, #12
 8001a08:	f040 808b 	bne.w	8001b22 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001a0c:	697b      	ldr	r3, [r7, #20]
 8001a0e:	2b01      	cmp	r3, #1
 8001a10:	f040 8087 	bne.w	8001b22 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001a14:	4b88      	ldr	r3, [pc, #544]	@ (8001c38 <HAL_RCC_OscConfig+0x270>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f003 0302 	and.w	r3, r3, #2
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d005      	beq.n	8001a2c <HAL_RCC_OscConfig+0x64>
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	699b      	ldr	r3, [r3, #24]
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d101      	bne.n	8001a2c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001a28:	2301      	movs	r3, #1
 8001a2a:	e3d9      	b.n	80021e0 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	6a1a      	ldr	r2, [r3, #32]
 8001a30:	4b81      	ldr	r3, [pc, #516]	@ (8001c38 <HAL_RCC_OscConfig+0x270>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f003 0308 	and.w	r3, r3, #8
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d004      	beq.n	8001a46 <HAL_RCC_OscConfig+0x7e>
 8001a3c:	4b7e      	ldr	r3, [pc, #504]	@ (8001c38 <HAL_RCC_OscConfig+0x270>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001a44:	e005      	b.n	8001a52 <HAL_RCC_OscConfig+0x8a>
 8001a46:	4b7c      	ldr	r3, [pc, #496]	@ (8001c38 <HAL_RCC_OscConfig+0x270>)
 8001a48:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001a4c:	091b      	lsrs	r3, r3, #4
 8001a4e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001a52:	4293      	cmp	r3, r2
 8001a54:	d223      	bcs.n	8001a9e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	6a1b      	ldr	r3, [r3, #32]
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	f000 fd8c 	bl	8002578 <RCC_SetFlashLatencyFromMSIRange>
 8001a60:	4603      	mov	r3, r0
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d001      	beq.n	8001a6a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001a66:	2301      	movs	r3, #1
 8001a68:	e3ba      	b.n	80021e0 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001a6a:	4b73      	ldr	r3, [pc, #460]	@ (8001c38 <HAL_RCC_OscConfig+0x270>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	4a72      	ldr	r2, [pc, #456]	@ (8001c38 <HAL_RCC_OscConfig+0x270>)
 8001a70:	f043 0308 	orr.w	r3, r3, #8
 8001a74:	6013      	str	r3, [r2, #0]
 8001a76:	4b70      	ldr	r3, [pc, #448]	@ (8001c38 <HAL_RCC_OscConfig+0x270>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	6a1b      	ldr	r3, [r3, #32]
 8001a82:	496d      	ldr	r1, [pc, #436]	@ (8001c38 <HAL_RCC_OscConfig+0x270>)
 8001a84:	4313      	orrs	r3, r2
 8001a86:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001a88:	4b6b      	ldr	r3, [pc, #428]	@ (8001c38 <HAL_RCC_OscConfig+0x270>)
 8001a8a:	685b      	ldr	r3, [r3, #4]
 8001a8c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	69db      	ldr	r3, [r3, #28]
 8001a94:	021b      	lsls	r3, r3, #8
 8001a96:	4968      	ldr	r1, [pc, #416]	@ (8001c38 <HAL_RCC_OscConfig+0x270>)
 8001a98:	4313      	orrs	r3, r2
 8001a9a:	604b      	str	r3, [r1, #4]
 8001a9c:	e025      	b.n	8001aea <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001a9e:	4b66      	ldr	r3, [pc, #408]	@ (8001c38 <HAL_RCC_OscConfig+0x270>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	4a65      	ldr	r2, [pc, #404]	@ (8001c38 <HAL_RCC_OscConfig+0x270>)
 8001aa4:	f043 0308 	orr.w	r3, r3, #8
 8001aa8:	6013      	str	r3, [r2, #0]
 8001aaa:	4b63      	ldr	r3, [pc, #396]	@ (8001c38 <HAL_RCC_OscConfig+0x270>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	6a1b      	ldr	r3, [r3, #32]
 8001ab6:	4960      	ldr	r1, [pc, #384]	@ (8001c38 <HAL_RCC_OscConfig+0x270>)
 8001ab8:	4313      	orrs	r3, r2
 8001aba:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001abc:	4b5e      	ldr	r3, [pc, #376]	@ (8001c38 <HAL_RCC_OscConfig+0x270>)
 8001abe:	685b      	ldr	r3, [r3, #4]
 8001ac0:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	69db      	ldr	r3, [r3, #28]
 8001ac8:	021b      	lsls	r3, r3, #8
 8001aca:	495b      	ldr	r1, [pc, #364]	@ (8001c38 <HAL_RCC_OscConfig+0x270>)
 8001acc:	4313      	orrs	r3, r2
 8001ace:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001ad0:	69bb      	ldr	r3, [r7, #24]
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d109      	bne.n	8001aea <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	6a1b      	ldr	r3, [r3, #32]
 8001ada:	4618      	mov	r0, r3
 8001adc:	f000 fd4c 	bl	8002578 <RCC_SetFlashLatencyFromMSIRange>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d001      	beq.n	8001aea <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	e37a      	b.n	80021e0 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001aea:	f000 fc81 	bl	80023f0 <HAL_RCC_GetSysClockFreq>
 8001aee:	4602      	mov	r2, r0
 8001af0:	4b51      	ldr	r3, [pc, #324]	@ (8001c38 <HAL_RCC_OscConfig+0x270>)
 8001af2:	689b      	ldr	r3, [r3, #8]
 8001af4:	091b      	lsrs	r3, r3, #4
 8001af6:	f003 030f 	and.w	r3, r3, #15
 8001afa:	4950      	ldr	r1, [pc, #320]	@ (8001c3c <HAL_RCC_OscConfig+0x274>)
 8001afc:	5ccb      	ldrb	r3, [r1, r3]
 8001afe:	f003 031f 	and.w	r3, r3, #31
 8001b02:	fa22 f303 	lsr.w	r3, r2, r3
 8001b06:	4a4e      	ldr	r2, [pc, #312]	@ (8001c40 <HAL_RCC_OscConfig+0x278>)
 8001b08:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001b0a:	4b4e      	ldr	r3, [pc, #312]	@ (8001c44 <HAL_RCC_OscConfig+0x27c>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	4618      	mov	r0, r3
 8001b10:	f7ff fbfe 	bl	8001310 <HAL_InitTick>
 8001b14:	4603      	mov	r3, r0
 8001b16:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001b18:	7bfb      	ldrb	r3, [r7, #15]
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d052      	beq.n	8001bc4 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8001b1e:	7bfb      	ldrb	r3, [r7, #15]
 8001b20:	e35e      	b.n	80021e0 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	699b      	ldr	r3, [r3, #24]
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d032      	beq.n	8001b90 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001b2a:	4b43      	ldr	r3, [pc, #268]	@ (8001c38 <HAL_RCC_OscConfig+0x270>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	4a42      	ldr	r2, [pc, #264]	@ (8001c38 <HAL_RCC_OscConfig+0x270>)
 8001b30:	f043 0301 	orr.w	r3, r3, #1
 8001b34:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001b36:	f7ff fc3b 	bl	80013b0 <HAL_GetTick>
 8001b3a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001b3c:	e008      	b.n	8001b50 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001b3e:	f7ff fc37 	bl	80013b0 <HAL_GetTick>
 8001b42:	4602      	mov	r2, r0
 8001b44:	693b      	ldr	r3, [r7, #16]
 8001b46:	1ad3      	subs	r3, r2, r3
 8001b48:	2b02      	cmp	r3, #2
 8001b4a:	d901      	bls.n	8001b50 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001b4c:	2303      	movs	r3, #3
 8001b4e:	e347      	b.n	80021e0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001b50:	4b39      	ldr	r3, [pc, #228]	@ (8001c38 <HAL_RCC_OscConfig+0x270>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f003 0302 	and.w	r3, r3, #2
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d0f0      	beq.n	8001b3e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001b5c:	4b36      	ldr	r3, [pc, #216]	@ (8001c38 <HAL_RCC_OscConfig+0x270>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	4a35      	ldr	r2, [pc, #212]	@ (8001c38 <HAL_RCC_OscConfig+0x270>)
 8001b62:	f043 0308 	orr.w	r3, r3, #8
 8001b66:	6013      	str	r3, [r2, #0]
 8001b68:	4b33      	ldr	r3, [pc, #204]	@ (8001c38 <HAL_RCC_OscConfig+0x270>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	6a1b      	ldr	r3, [r3, #32]
 8001b74:	4930      	ldr	r1, [pc, #192]	@ (8001c38 <HAL_RCC_OscConfig+0x270>)
 8001b76:	4313      	orrs	r3, r2
 8001b78:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001b7a:	4b2f      	ldr	r3, [pc, #188]	@ (8001c38 <HAL_RCC_OscConfig+0x270>)
 8001b7c:	685b      	ldr	r3, [r3, #4]
 8001b7e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	69db      	ldr	r3, [r3, #28]
 8001b86:	021b      	lsls	r3, r3, #8
 8001b88:	492b      	ldr	r1, [pc, #172]	@ (8001c38 <HAL_RCC_OscConfig+0x270>)
 8001b8a:	4313      	orrs	r3, r2
 8001b8c:	604b      	str	r3, [r1, #4]
 8001b8e:	e01a      	b.n	8001bc6 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001b90:	4b29      	ldr	r3, [pc, #164]	@ (8001c38 <HAL_RCC_OscConfig+0x270>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	4a28      	ldr	r2, [pc, #160]	@ (8001c38 <HAL_RCC_OscConfig+0x270>)
 8001b96:	f023 0301 	bic.w	r3, r3, #1
 8001b9a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001b9c:	f7ff fc08 	bl	80013b0 <HAL_GetTick>
 8001ba0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001ba2:	e008      	b.n	8001bb6 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001ba4:	f7ff fc04 	bl	80013b0 <HAL_GetTick>
 8001ba8:	4602      	mov	r2, r0
 8001baa:	693b      	ldr	r3, [r7, #16]
 8001bac:	1ad3      	subs	r3, r2, r3
 8001bae:	2b02      	cmp	r3, #2
 8001bb0:	d901      	bls.n	8001bb6 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001bb2:	2303      	movs	r3, #3
 8001bb4:	e314      	b.n	80021e0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001bb6:	4b20      	ldr	r3, [pc, #128]	@ (8001c38 <HAL_RCC_OscConfig+0x270>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f003 0302 	and.w	r3, r3, #2
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d1f0      	bne.n	8001ba4 <HAL_RCC_OscConfig+0x1dc>
 8001bc2:	e000      	b.n	8001bc6 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001bc4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f003 0301 	and.w	r3, r3, #1
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d073      	beq.n	8001cba <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001bd2:	69bb      	ldr	r3, [r7, #24]
 8001bd4:	2b08      	cmp	r3, #8
 8001bd6:	d005      	beq.n	8001be4 <HAL_RCC_OscConfig+0x21c>
 8001bd8:	69bb      	ldr	r3, [r7, #24]
 8001bda:	2b0c      	cmp	r3, #12
 8001bdc:	d10e      	bne.n	8001bfc <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001bde:	697b      	ldr	r3, [r7, #20]
 8001be0:	2b03      	cmp	r3, #3
 8001be2:	d10b      	bne.n	8001bfc <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001be4:	4b14      	ldr	r3, [pc, #80]	@ (8001c38 <HAL_RCC_OscConfig+0x270>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d063      	beq.n	8001cb8 <HAL_RCC_OscConfig+0x2f0>
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	685b      	ldr	r3, [r3, #4]
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d15f      	bne.n	8001cb8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001bf8:	2301      	movs	r3, #1
 8001bfa:	e2f1      	b.n	80021e0 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	685b      	ldr	r3, [r3, #4]
 8001c00:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001c04:	d106      	bne.n	8001c14 <HAL_RCC_OscConfig+0x24c>
 8001c06:	4b0c      	ldr	r3, [pc, #48]	@ (8001c38 <HAL_RCC_OscConfig+0x270>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	4a0b      	ldr	r2, [pc, #44]	@ (8001c38 <HAL_RCC_OscConfig+0x270>)
 8001c0c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c10:	6013      	str	r3, [r2, #0]
 8001c12:	e025      	b.n	8001c60 <HAL_RCC_OscConfig+0x298>
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	685b      	ldr	r3, [r3, #4]
 8001c18:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001c1c:	d114      	bne.n	8001c48 <HAL_RCC_OscConfig+0x280>
 8001c1e:	4b06      	ldr	r3, [pc, #24]	@ (8001c38 <HAL_RCC_OscConfig+0x270>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	4a05      	ldr	r2, [pc, #20]	@ (8001c38 <HAL_RCC_OscConfig+0x270>)
 8001c24:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001c28:	6013      	str	r3, [r2, #0]
 8001c2a:	4b03      	ldr	r3, [pc, #12]	@ (8001c38 <HAL_RCC_OscConfig+0x270>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	4a02      	ldr	r2, [pc, #8]	@ (8001c38 <HAL_RCC_OscConfig+0x270>)
 8001c30:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c34:	6013      	str	r3, [r2, #0]
 8001c36:	e013      	b.n	8001c60 <HAL_RCC_OscConfig+0x298>
 8001c38:	40021000 	.word	0x40021000
 8001c3c:	0800482c 	.word	0x0800482c
 8001c40:	20000024 	.word	0x20000024
 8001c44:	20000028 	.word	0x20000028
 8001c48:	4ba0      	ldr	r3, [pc, #640]	@ (8001ecc <HAL_RCC_OscConfig+0x504>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	4a9f      	ldr	r2, [pc, #636]	@ (8001ecc <HAL_RCC_OscConfig+0x504>)
 8001c4e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001c52:	6013      	str	r3, [r2, #0]
 8001c54:	4b9d      	ldr	r3, [pc, #628]	@ (8001ecc <HAL_RCC_OscConfig+0x504>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	4a9c      	ldr	r2, [pc, #624]	@ (8001ecc <HAL_RCC_OscConfig+0x504>)
 8001c5a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001c5e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	685b      	ldr	r3, [r3, #4]
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d013      	beq.n	8001c90 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c68:	f7ff fba2 	bl	80013b0 <HAL_GetTick>
 8001c6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c6e:	e008      	b.n	8001c82 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c70:	f7ff fb9e 	bl	80013b0 <HAL_GetTick>
 8001c74:	4602      	mov	r2, r0
 8001c76:	693b      	ldr	r3, [r7, #16]
 8001c78:	1ad3      	subs	r3, r2, r3
 8001c7a:	2b64      	cmp	r3, #100	@ 0x64
 8001c7c:	d901      	bls.n	8001c82 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001c7e:	2303      	movs	r3, #3
 8001c80:	e2ae      	b.n	80021e0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c82:	4b92      	ldr	r3, [pc, #584]	@ (8001ecc <HAL_RCC_OscConfig+0x504>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d0f0      	beq.n	8001c70 <HAL_RCC_OscConfig+0x2a8>
 8001c8e:	e014      	b.n	8001cba <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c90:	f7ff fb8e 	bl	80013b0 <HAL_GetTick>
 8001c94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001c96:	e008      	b.n	8001caa <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c98:	f7ff fb8a 	bl	80013b0 <HAL_GetTick>
 8001c9c:	4602      	mov	r2, r0
 8001c9e:	693b      	ldr	r3, [r7, #16]
 8001ca0:	1ad3      	subs	r3, r2, r3
 8001ca2:	2b64      	cmp	r3, #100	@ 0x64
 8001ca4:	d901      	bls.n	8001caa <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001ca6:	2303      	movs	r3, #3
 8001ca8:	e29a      	b.n	80021e0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001caa:	4b88      	ldr	r3, [pc, #544]	@ (8001ecc <HAL_RCC_OscConfig+0x504>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d1f0      	bne.n	8001c98 <HAL_RCC_OscConfig+0x2d0>
 8001cb6:	e000      	b.n	8001cba <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cb8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f003 0302 	and.w	r3, r3, #2
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d060      	beq.n	8001d88 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001cc6:	69bb      	ldr	r3, [r7, #24]
 8001cc8:	2b04      	cmp	r3, #4
 8001cca:	d005      	beq.n	8001cd8 <HAL_RCC_OscConfig+0x310>
 8001ccc:	69bb      	ldr	r3, [r7, #24]
 8001cce:	2b0c      	cmp	r3, #12
 8001cd0:	d119      	bne.n	8001d06 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001cd2:	697b      	ldr	r3, [r7, #20]
 8001cd4:	2b02      	cmp	r3, #2
 8001cd6:	d116      	bne.n	8001d06 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001cd8:	4b7c      	ldr	r3, [pc, #496]	@ (8001ecc <HAL_RCC_OscConfig+0x504>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d005      	beq.n	8001cf0 <HAL_RCC_OscConfig+0x328>
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	68db      	ldr	r3, [r3, #12]
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d101      	bne.n	8001cf0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001cec:	2301      	movs	r3, #1
 8001cee:	e277      	b.n	80021e0 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cf0:	4b76      	ldr	r3, [pc, #472]	@ (8001ecc <HAL_RCC_OscConfig+0x504>)
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	691b      	ldr	r3, [r3, #16]
 8001cfc:	061b      	lsls	r3, r3, #24
 8001cfe:	4973      	ldr	r1, [pc, #460]	@ (8001ecc <HAL_RCC_OscConfig+0x504>)
 8001d00:	4313      	orrs	r3, r2
 8001d02:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001d04:	e040      	b.n	8001d88 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	68db      	ldr	r3, [r3, #12]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d023      	beq.n	8001d56 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d0e:	4b6f      	ldr	r3, [pc, #444]	@ (8001ecc <HAL_RCC_OscConfig+0x504>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	4a6e      	ldr	r2, [pc, #440]	@ (8001ecc <HAL_RCC_OscConfig+0x504>)
 8001d14:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d18:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d1a:	f7ff fb49 	bl	80013b0 <HAL_GetTick>
 8001d1e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d20:	e008      	b.n	8001d34 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d22:	f7ff fb45 	bl	80013b0 <HAL_GetTick>
 8001d26:	4602      	mov	r2, r0
 8001d28:	693b      	ldr	r3, [r7, #16]
 8001d2a:	1ad3      	subs	r3, r2, r3
 8001d2c:	2b02      	cmp	r3, #2
 8001d2e:	d901      	bls.n	8001d34 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001d30:	2303      	movs	r3, #3
 8001d32:	e255      	b.n	80021e0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d34:	4b65      	ldr	r3, [pc, #404]	@ (8001ecc <HAL_RCC_OscConfig+0x504>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d0f0      	beq.n	8001d22 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d40:	4b62      	ldr	r3, [pc, #392]	@ (8001ecc <HAL_RCC_OscConfig+0x504>)
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	691b      	ldr	r3, [r3, #16]
 8001d4c:	061b      	lsls	r3, r3, #24
 8001d4e:	495f      	ldr	r1, [pc, #380]	@ (8001ecc <HAL_RCC_OscConfig+0x504>)
 8001d50:	4313      	orrs	r3, r2
 8001d52:	604b      	str	r3, [r1, #4]
 8001d54:	e018      	b.n	8001d88 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d56:	4b5d      	ldr	r3, [pc, #372]	@ (8001ecc <HAL_RCC_OscConfig+0x504>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	4a5c      	ldr	r2, [pc, #368]	@ (8001ecc <HAL_RCC_OscConfig+0x504>)
 8001d5c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001d60:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d62:	f7ff fb25 	bl	80013b0 <HAL_GetTick>
 8001d66:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001d68:	e008      	b.n	8001d7c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d6a:	f7ff fb21 	bl	80013b0 <HAL_GetTick>
 8001d6e:	4602      	mov	r2, r0
 8001d70:	693b      	ldr	r3, [r7, #16]
 8001d72:	1ad3      	subs	r3, r2, r3
 8001d74:	2b02      	cmp	r3, #2
 8001d76:	d901      	bls.n	8001d7c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001d78:	2303      	movs	r3, #3
 8001d7a:	e231      	b.n	80021e0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001d7c:	4b53      	ldr	r3, [pc, #332]	@ (8001ecc <HAL_RCC_OscConfig+0x504>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d1f0      	bne.n	8001d6a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f003 0308 	and.w	r3, r3, #8
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d03c      	beq.n	8001e0e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	695b      	ldr	r3, [r3, #20]
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d01c      	beq.n	8001dd6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d9c:	4b4b      	ldr	r3, [pc, #300]	@ (8001ecc <HAL_RCC_OscConfig+0x504>)
 8001d9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001da2:	4a4a      	ldr	r2, [pc, #296]	@ (8001ecc <HAL_RCC_OscConfig+0x504>)
 8001da4:	f043 0301 	orr.w	r3, r3, #1
 8001da8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dac:	f7ff fb00 	bl	80013b0 <HAL_GetTick>
 8001db0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001db2:	e008      	b.n	8001dc6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001db4:	f7ff fafc 	bl	80013b0 <HAL_GetTick>
 8001db8:	4602      	mov	r2, r0
 8001dba:	693b      	ldr	r3, [r7, #16]
 8001dbc:	1ad3      	subs	r3, r2, r3
 8001dbe:	2b02      	cmp	r3, #2
 8001dc0:	d901      	bls.n	8001dc6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001dc2:	2303      	movs	r3, #3
 8001dc4:	e20c      	b.n	80021e0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001dc6:	4b41      	ldr	r3, [pc, #260]	@ (8001ecc <HAL_RCC_OscConfig+0x504>)
 8001dc8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001dcc:	f003 0302 	and.w	r3, r3, #2
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d0ef      	beq.n	8001db4 <HAL_RCC_OscConfig+0x3ec>
 8001dd4:	e01b      	b.n	8001e0e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001dd6:	4b3d      	ldr	r3, [pc, #244]	@ (8001ecc <HAL_RCC_OscConfig+0x504>)
 8001dd8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001ddc:	4a3b      	ldr	r2, [pc, #236]	@ (8001ecc <HAL_RCC_OscConfig+0x504>)
 8001dde:	f023 0301 	bic.w	r3, r3, #1
 8001de2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001de6:	f7ff fae3 	bl	80013b0 <HAL_GetTick>
 8001dea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001dec:	e008      	b.n	8001e00 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001dee:	f7ff fadf 	bl	80013b0 <HAL_GetTick>
 8001df2:	4602      	mov	r2, r0
 8001df4:	693b      	ldr	r3, [r7, #16]
 8001df6:	1ad3      	subs	r3, r2, r3
 8001df8:	2b02      	cmp	r3, #2
 8001dfa:	d901      	bls.n	8001e00 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001dfc:	2303      	movs	r3, #3
 8001dfe:	e1ef      	b.n	80021e0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001e00:	4b32      	ldr	r3, [pc, #200]	@ (8001ecc <HAL_RCC_OscConfig+0x504>)
 8001e02:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001e06:	f003 0302 	and.w	r3, r3, #2
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d1ef      	bne.n	8001dee <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f003 0304 	and.w	r3, r3, #4
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	f000 80a6 	beq.w	8001f68 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001e20:	4b2a      	ldr	r3, [pc, #168]	@ (8001ecc <HAL_RCC_OscConfig+0x504>)
 8001e22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e24:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d10d      	bne.n	8001e48 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e2c:	4b27      	ldr	r3, [pc, #156]	@ (8001ecc <HAL_RCC_OscConfig+0x504>)
 8001e2e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e30:	4a26      	ldr	r2, [pc, #152]	@ (8001ecc <HAL_RCC_OscConfig+0x504>)
 8001e32:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e36:	6593      	str	r3, [r2, #88]	@ 0x58
 8001e38:	4b24      	ldr	r3, [pc, #144]	@ (8001ecc <HAL_RCC_OscConfig+0x504>)
 8001e3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e3c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e40:	60bb      	str	r3, [r7, #8]
 8001e42:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e44:	2301      	movs	r3, #1
 8001e46:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e48:	4b21      	ldr	r3, [pc, #132]	@ (8001ed0 <HAL_RCC_OscConfig+0x508>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d118      	bne.n	8001e86 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001e54:	4b1e      	ldr	r3, [pc, #120]	@ (8001ed0 <HAL_RCC_OscConfig+0x508>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4a1d      	ldr	r2, [pc, #116]	@ (8001ed0 <HAL_RCC_OscConfig+0x508>)
 8001e5a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e5e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e60:	f7ff faa6 	bl	80013b0 <HAL_GetTick>
 8001e64:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e66:	e008      	b.n	8001e7a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e68:	f7ff faa2 	bl	80013b0 <HAL_GetTick>
 8001e6c:	4602      	mov	r2, r0
 8001e6e:	693b      	ldr	r3, [r7, #16]
 8001e70:	1ad3      	subs	r3, r2, r3
 8001e72:	2b02      	cmp	r3, #2
 8001e74:	d901      	bls.n	8001e7a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001e76:	2303      	movs	r3, #3
 8001e78:	e1b2      	b.n	80021e0 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e7a:	4b15      	ldr	r3, [pc, #84]	@ (8001ed0 <HAL_RCC_OscConfig+0x508>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d0f0      	beq.n	8001e68 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	689b      	ldr	r3, [r3, #8]
 8001e8a:	2b01      	cmp	r3, #1
 8001e8c:	d108      	bne.n	8001ea0 <HAL_RCC_OscConfig+0x4d8>
 8001e8e:	4b0f      	ldr	r3, [pc, #60]	@ (8001ecc <HAL_RCC_OscConfig+0x504>)
 8001e90:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e94:	4a0d      	ldr	r2, [pc, #52]	@ (8001ecc <HAL_RCC_OscConfig+0x504>)
 8001e96:	f043 0301 	orr.w	r3, r3, #1
 8001e9a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001e9e:	e029      	b.n	8001ef4 <HAL_RCC_OscConfig+0x52c>
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	689b      	ldr	r3, [r3, #8]
 8001ea4:	2b05      	cmp	r3, #5
 8001ea6:	d115      	bne.n	8001ed4 <HAL_RCC_OscConfig+0x50c>
 8001ea8:	4b08      	ldr	r3, [pc, #32]	@ (8001ecc <HAL_RCC_OscConfig+0x504>)
 8001eaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001eae:	4a07      	ldr	r2, [pc, #28]	@ (8001ecc <HAL_RCC_OscConfig+0x504>)
 8001eb0:	f043 0304 	orr.w	r3, r3, #4
 8001eb4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001eb8:	4b04      	ldr	r3, [pc, #16]	@ (8001ecc <HAL_RCC_OscConfig+0x504>)
 8001eba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ebe:	4a03      	ldr	r2, [pc, #12]	@ (8001ecc <HAL_RCC_OscConfig+0x504>)
 8001ec0:	f043 0301 	orr.w	r3, r3, #1
 8001ec4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001ec8:	e014      	b.n	8001ef4 <HAL_RCC_OscConfig+0x52c>
 8001eca:	bf00      	nop
 8001ecc:	40021000 	.word	0x40021000
 8001ed0:	40007000 	.word	0x40007000
 8001ed4:	4b9a      	ldr	r3, [pc, #616]	@ (8002140 <HAL_RCC_OscConfig+0x778>)
 8001ed6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001eda:	4a99      	ldr	r2, [pc, #612]	@ (8002140 <HAL_RCC_OscConfig+0x778>)
 8001edc:	f023 0301 	bic.w	r3, r3, #1
 8001ee0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001ee4:	4b96      	ldr	r3, [pc, #600]	@ (8002140 <HAL_RCC_OscConfig+0x778>)
 8001ee6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001eea:	4a95      	ldr	r2, [pc, #596]	@ (8002140 <HAL_RCC_OscConfig+0x778>)
 8001eec:	f023 0304 	bic.w	r3, r3, #4
 8001ef0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	689b      	ldr	r3, [r3, #8]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d016      	beq.n	8001f2a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001efc:	f7ff fa58 	bl	80013b0 <HAL_GetTick>
 8001f00:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f02:	e00a      	b.n	8001f1a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f04:	f7ff fa54 	bl	80013b0 <HAL_GetTick>
 8001f08:	4602      	mov	r2, r0
 8001f0a:	693b      	ldr	r3, [r7, #16]
 8001f0c:	1ad3      	subs	r3, r2, r3
 8001f0e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d901      	bls.n	8001f1a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001f16:	2303      	movs	r3, #3
 8001f18:	e162      	b.n	80021e0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f1a:	4b89      	ldr	r3, [pc, #548]	@ (8002140 <HAL_RCC_OscConfig+0x778>)
 8001f1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f20:	f003 0302 	and.w	r3, r3, #2
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d0ed      	beq.n	8001f04 <HAL_RCC_OscConfig+0x53c>
 8001f28:	e015      	b.n	8001f56 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f2a:	f7ff fa41 	bl	80013b0 <HAL_GetTick>
 8001f2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001f30:	e00a      	b.n	8001f48 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f32:	f7ff fa3d 	bl	80013b0 <HAL_GetTick>
 8001f36:	4602      	mov	r2, r0
 8001f38:	693b      	ldr	r3, [r7, #16]
 8001f3a:	1ad3      	subs	r3, r2, r3
 8001f3c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f40:	4293      	cmp	r3, r2
 8001f42:	d901      	bls.n	8001f48 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001f44:	2303      	movs	r3, #3
 8001f46:	e14b      	b.n	80021e0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001f48:	4b7d      	ldr	r3, [pc, #500]	@ (8002140 <HAL_RCC_OscConfig+0x778>)
 8001f4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f4e:	f003 0302 	and.w	r3, r3, #2
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d1ed      	bne.n	8001f32 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001f56:	7ffb      	ldrb	r3, [r7, #31]
 8001f58:	2b01      	cmp	r3, #1
 8001f5a:	d105      	bne.n	8001f68 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f5c:	4b78      	ldr	r3, [pc, #480]	@ (8002140 <HAL_RCC_OscConfig+0x778>)
 8001f5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f60:	4a77      	ldr	r2, [pc, #476]	@ (8002140 <HAL_RCC_OscConfig+0x778>)
 8001f62:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001f66:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f003 0320 	and.w	r3, r3, #32
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d03c      	beq.n	8001fee <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d01c      	beq.n	8001fb6 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001f7c:	4b70      	ldr	r3, [pc, #448]	@ (8002140 <HAL_RCC_OscConfig+0x778>)
 8001f7e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001f82:	4a6f      	ldr	r2, [pc, #444]	@ (8002140 <HAL_RCC_OscConfig+0x778>)
 8001f84:	f043 0301 	orr.w	r3, r3, #1
 8001f88:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f8c:	f7ff fa10 	bl	80013b0 <HAL_GetTick>
 8001f90:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001f92:	e008      	b.n	8001fa6 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001f94:	f7ff fa0c 	bl	80013b0 <HAL_GetTick>
 8001f98:	4602      	mov	r2, r0
 8001f9a:	693b      	ldr	r3, [r7, #16]
 8001f9c:	1ad3      	subs	r3, r2, r3
 8001f9e:	2b02      	cmp	r3, #2
 8001fa0:	d901      	bls.n	8001fa6 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001fa2:	2303      	movs	r3, #3
 8001fa4:	e11c      	b.n	80021e0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001fa6:	4b66      	ldr	r3, [pc, #408]	@ (8002140 <HAL_RCC_OscConfig+0x778>)
 8001fa8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001fac:	f003 0302 	and.w	r3, r3, #2
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d0ef      	beq.n	8001f94 <HAL_RCC_OscConfig+0x5cc>
 8001fb4:	e01b      	b.n	8001fee <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001fb6:	4b62      	ldr	r3, [pc, #392]	@ (8002140 <HAL_RCC_OscConfig+0x778>)
 8001fb8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001fbc:	4a60      	ldr	r2, [pc, #384]	@ (8002140 <HAL_RCC_OscConfig+0x778>)
 8001fbe:	f023 0301 	bic.w	r3, r3, #1
 8001fc2:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fc6:	f7ff f9f3 	bl	80013b0 <HAL_GetTick>
 8001fca:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001fcc:	e008      	b.n	8001fe0 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001fce:	f7ff f9ef 	bl	80013b0 <HAL_GetTick>
 8001fd2:	4602      	mov	r2, r0
 8001fd4:	693b      	ldr	r3, [r7, #16]
 8001fd6:	1ad3      	subs	r3, r2, r3
 8001fd8:	2b02      	cmp	r3, #2
 8001fda:	d901      	bls.n	8001fe0 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001fdc:	2303      	movs	r3, #3
 8001fde:	e0ff      	b.n	80021e0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001fe0:	4b57      	ldr	r3, [pc, #348]	@ (8002140 <HAL_RCC_OscConfig+0x778>)
 8001fe2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001fe6:	f003 0302 	and.w	r3, r3, #2
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d1ef      	bne.n	8001fce <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	f000 80f3 	beq.w	80021de <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ffc:	2b02      	cmp	r3, #2
 8001ffe:	f040 80c9 	bne.w	8002194 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002002:	4b4f      	ldr	r3, [pc, #316]	@ (8002140 <HAL_RCC_OscConfig+0x778>)
 8002004:	68db      	ldr	r3, [r3, #12]
 8002006:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002008:	697b      	ldr	r3, [r7, #20]
 800200a:	f003 0203 	and.w	r2, r3, #3
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002012:	429a      	cmp	r2, r3
 8002014:	d12c      	bne.n	8002070 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002016:	697b      	ldr	r3, [r7, #20]
 8002018:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002020:	3b01      	subs	r3, #1
 8002022:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002024:	429a      	cmp	r2, r3
 8002026:	d123      	bne.n	8002070 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002028:	697b      	ldr	r3, [r7, #20]
 800202a:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002032:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002034:	429a      	cmp	r2, r3
 8002036:	d11b      	bne.n	8002070 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002038:	697b      	ldr	r3, [r7, #20]
 800203a:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002042:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002044:	429a      	cmp	r2, r3
 8002046:	d113      	bne.n	8002070 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002048:	697b      	ldr	r3, [r7, #20]
 800204a:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002052:	085b      	lsrs	r3, r3, #1
 8002054:	3b01      	subs	r3, #1
 8002056:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002058:	429a      	cmp	r2, r3
 800205a:	d109      	bne.n	8002070 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800205c:	697b      	ldr	r3, [r7, #20]
 800205e:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002066:	085b      	lsrs	r3, r3, #1
 8002068:	3b01      	subs	r3, #1
 800206a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800206c:	429a      	cmp	r2, r3
 800206e:	d06b      	beq.n	8002148 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002070:	69bb      	ldr	r3, [r7, #24]
 8002072:	2b0c      	cmp	r3, #12
 8002074:	d062      	beq.n	800213c <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002076:	4b32      	ldr	r3, [pc, #200]	@ (8002140 <HAL_RCC_OscConfig+0x778>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800207e:	2b00      	cmp	r3, #0
 8002080:	d001      	beq.n	8002086 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8002082:	2301      	movs	r3, #1
 8002084:	e0ac      	b.n	80021e0 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002086:	4b2e      	ldr	r3, [pc, #184]	@ (8002140 <HAL_RCC_OscConfig+0x778>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	4a2d      	ldr	r2, [pc, #180]	@ (8002140 <HAL_RCC_OscConfig+0x778>)
 800208c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002090:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002092:	f7ff f98d 	bl	80013b0 <HAL_GetTick>
 8002096:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002098:	e008      	b.n	80020ac <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800209a:	f7ff f989 	bl	80013b0 <HAL_GetTick>
 800209e:	4602      	mov	r2, r0
 80020a0:	693b      	ldr	r3, [r7, #16]
 80020a2:	1ad3      	subs	r3, r2, r3
 80020a4:	2b02      	cmp	r3, #2
 80020a6:	d901      	bls.n	80020ac <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80020a8:	2303      	movs	r3, #3
 80020aa:	e099      	b.n	80021e0 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80020ac:	4b24      	ldr	r3, [pc, #144]	@ (8002140 <HAL_RCC_OscConfig+0x778>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d1f0      	bne.n	800209a <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80020b8:	4b21      	ldr	r3, [pc, #132]	@ (8002140 <HAL_RCC_OscConfig+0x778>)
 80020ba:	68da      	ldr	r2, [r3, #12]
 80020bc:	4b21      	ldr	r3, [pc, #132]	@ (8002144 <HAL_RCC_OscConfig+0x77c>)
 80020be:	4013      	ands	r3, r2
 80020c0:	687a      	ldr	r2, [r7, #4]
 80020c2:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80020c4:	687a      	ldr	r2, [r7, #4]
 80020c6:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80020c8:	3a01      	subs	r2, #1
 80020ca:	0112      	lsls	r2, r2, #4
 80020cc:	4311      	orrs	r1, r2
 80020ce:	687a      	ldr	r2, [r7, #4]
 80020d0:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80020d2:	0212      	lsls	r2, r2, #8
 80020d4:	4311      	orrs	r1, r2
 80020d6:	687a      	ldr	r2, [r7, #4]
 80020d8:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80020da:	0852      	lsrs	r2, r2, #1
 80020dc:	3a01      	subs	r2, #1
 80020de:	0552      	lsls	r2, r2, #21
 80020e0:	4311      	orrs	r1, r2
 80020e2:	687a      	ldr	r2, [r7, #4]
 80020e4:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80020e6:	0852      	lsrs	r2, r2, #1
 80020e8:	3a01      	subs	r2, #1
 80020ea:	0652      	lsls	r2, r2, #25
 80020ec:	4311      	orrs	r1, r2
 80020ee:	687a      	ldr	r2, [r7, #4]
 80020f0:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80020f2:	06d2      	lsls	r2, r2, #27
 80020f4:	430a      	orrs	r2, r1
 80020f6:	4912      	ldr	r1, [pc, #72]	@ (8002140 <HAL_RCC_OscConfig+0x778>)
 80020f8:	4313      	orrs	r3, r2
 80020fa:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80020fc:	4b10      	ldr	r3, [pc, #64]	@ (8002140 <HAL_RCC_OscConfig+0x778>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	4a0f      	ldr	r2, [pc, #60]	@ (8002140 <HAL_RCC_OscConfig+0x778>)
 8002102:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002106:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002108:	4b0d      	ldr	r3, [pc, #52]	@ (8002140 <HAL_RCC_OscConfig+0x778>)
 800210a:	68db      	ldr	r3, [r3, #12]
 800210c:	4a0c      	ldr	r2, [pc, #48]	@ (8002140 <HAL_RCC_OscConfig+0x778>)
 800210e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002112:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002114:	f7ff f94c 	bl	80013b0 <HAL_GetTick>
 8002118:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800211a:	e008      	b.n	800212e <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800211c:	f7ff f948 	bl	80013b0 <HAL_GetTick>
 8002120:	4602      	mov	r2, r0
 8002122:	693b      	ldr	r3, [r7, #16]
 8002124:	1ad3      	subs	r3, r2, r3
 8002126:	2b02      	cmp	r3, #2
 8002128:	d901      	bls.n	800212e <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800212a:	2303      	movs	r3, #3
 800212c:	e058      	b.n	80021e0 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800212e:	4b04      	ldr	r3, [pc, #16]	@ (8002140 <HAL_RCC_OscConfig+0x778>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002136:	2b00      	cmp	r3, #0
 8002138:	d0f0      	beq.n	800211c <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800213a:	e050      	b.n	80021de <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800213c:	2301      	movs	r3, #1
 800213e:	e04f      	b.n	80021e0 <HAL_RCC_OscConfig+0x818>
 8002140:	40021000 	.word	0x40021000
 8002144:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002148:	4b27      	ldr	r3, [pc, #156]	@ (80021e8 <HAL_RCC_OscConfig+0x820>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002150:	2b00      	cmp	r3, #0
 8002152:	d144      	bne.n	80021de <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002154:	4b24      	ldr	r3, [pc, #144]	@ (80021e8 <HAL_RCC_OscConfig+0x820>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	4a23      	ldr	r2, [pc, #140]	@ (80021e8 <HAL_RCC_OscConfig+0x820>)
 800215a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800215e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002160:	4b21      	ldr	r3, [pc, #132]	@ (80021e8 <HAL_RCC_OscConfig+0x820>)
 8002162:	68db      	ldr	r3, [r3, #12]
 8002164:	4a20      	ldr	r2, [pc, #128]	@ (80021e8 <HAL_RCC_OscConfig+0x820>)
 8002166:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800216a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800216c:	f7ff f920 	bl	80013b0 <HAL_GetTick>
 8002170:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002172:	e008      	b.n	8002186 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002174:	f7ff f91c 	bl	80013b0 <HAL_GetTick>
 8002178:	4602      	mov	r2, r0
 800217a:	693b      	ldr	r3, [r7, #16]
 800217c:	1ad3      	subs	r3, r2, r3
 800217e:	2b02      	cmp	r3, #2
 8002180:	d901      	bls.n	8002186 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8002182:	2303      	movs	r3, #3
 8002184:	e02c      	b.n	80021e0 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002186:	4b18      	ldr	r3, [pc, #96]	@ (80021e8 <HAL_RCC_OscConfig+0x820>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800218e:	2b00      	cmp	r3, #0
 8002190:	d0f0      	beq.n	8002174 <HAL_RCC_OscConfig+0x7ac>
 8002192:	e024      	b.n	80021de <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002194:	69bb      	ldr	r3, [r7, #24]
 8002196:	2b0c      	cmp	r3, #12
 8002198:	d01f      	beq.n	80021da <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800219a:	4b13      	ldr	r3, [pc, #76]	@ (80021e8 <HAL_RCC_OscConfig+0x820>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	4a12      	ldr	r2, [pc, #72]	@ (80021e8 <HAL_RCC_OscConfig+0x820>)
 80021a0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80021a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021a6:	f7ff f903 	bl	80013b0 <HAL_GetTick>
 80021aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80021ac:	e008      	b.n	80021c0 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021ae:	f7ff f8ff 	bl	80013b0 <HAL_GetTick>
 80021b2:	4602      	mov	r2, r0
 80021b4:	693b      	ldr	r3, [r7, #16]
 80021b6:	1ad3      	subs	r3, r2, r3
 80021b8:	2b02      	cmp	r3, #2
 80021ba:	d901      	bls.n	80021c0 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 80021bc:	2303      	movs	r3, #3
 80021be:	e00f      	b.n	80021e0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80021c0:	4b09      	ldr	r3, [pc, #36]	@ (80021e8 <HAL_RCC_OscConfig+0x820>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d1f0      	bne.n	80021ae <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80021cc:	4b06      	ldr	r3, [pc, #24]	@ (80021e8 <HAL_RCC_OscConfig+0x820>)
 80021ce:	68da      	ldr	r2, [r3, #12]
 80021d0:	4905      	ldr	r1, [pc, #20]	@ (80021e8 <HAL_RCC_OscConfig+0x820>)
 80021d2:	4b06      	ldr	r3, [pc, #24]	@ (80021ec <HAL_RCC_OscConfig+0x824>)
 80021d4:	4013      	ands	r3, r2
 80021d6:	60cb      	str	r3, [r1, #12]
 80021d8:	e001      	b.n	80021de <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80021da:	2301      	movs	r3, #1
 80021dc:	e000      	b.n	80021e0 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 80021de:	2300      	movs	r3, #0
}
 80021e0:	4618      	mov	r0, r3
 80021e2:	3720      	adds	r7, #32
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bd80      	pop	{r7, pc}
 80021e8:	40021000 	.word	0x40021000
 80021ec:	feeefffc 	.word	0xfeeefffc

080021f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b084      	sub	sp, #16
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
 80021f8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d101      	bne.n	8002204 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002200:	2301      	movs	r3, #1
 8002202:	e0e7      	b.n	80023d4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002204:	4b75      	ldr	r3, [pc, #468]	@ (80023dc <HAL_RCC_ClockConfig+0x1ec>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f003 0307 	and.w	r3, r3, #7
 800220c:	683a      	ldr	r2, [r7, #0]
 800220e:	429a      	cmp	r2, r3
 8002210:	d910      	bls.n	8002234 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002212:	4b72      	ldr	r3, [pc, #456]	@ (80023dc <HAL_RCC_ClockConfig+0x1ec>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f023 0207 	bic.w	r2, r3, #7
 800221a:	4970      	ldr	r1, [pc, #448]	@ (80023dc <HAL_RCC_ClockConfig+0x1ec>)
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	4313      	orrs	r3, r2
 8002220:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002222:	4b6e      	ldr	r3, [pc, #440]	@ (80023dc <HAL_RCC_ClockConfig+0x1ec>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f003 0307 	and.w	r3, r3, #7
 800222a:	683a      	ldr	r2, [r7, #0]
 800222c:	429a      	cmp	r2, r3
 800222e:	d001      	beq.n	8002234 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002230:	2301      	movs	r3, #1
 8002232:	e0cf      	b.n	80023d4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f003 0302 	and.w	r3, r3, #2
 800223c:	2b00      	cmp	r3, #0
 800223e:	d010      	beq.n	8002262 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	689a      	ldr	r2, [r3, #8]
 8002244:	4b66      	ldr	r3, [pc, #408]	@ (80023e0 <HAL_RCC_ClockConfig+0x1f0>)
 8002246:	689b      	ldr	r3, [r3, #8]
 8002248:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800224c:	429a      	cmp	r2, r3
 800224e:	d908      	bls.n	8002262 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002250:	4b63      	ldr	r3, [pc, #396]	@ (80023e0 <HAL_RCC_ClockConfig+0x1f0>)
 8002252:	689b      	ldr	r3, [r3, #8]
 8002254:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	689b      	ldr	r3, [r3, #8]
 800225c:	4960      	ldr	r1, [pc, #384]	@ (80023e0 <HAL_RCC_ClockConfig+0x1f0>)
 800225e:	4313      	orrs	r3, r2
 8002260:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f003 0301 	and.w	r3, r3, #1
 800226a:	2b00      	cmp	r3, #0
 800226c:	d04c      	beq.n	8002308 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	685b      	ldr	r3, [r3, #4]
 8002272:	2b03      	cmp	r3, #3
 8002274:	d107      	bne.n	8002286 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002276:	4b5a      	ldr	r3, [pc, #360]	@ (80023e0 <HAL_RCC_ClockConfig+0x1f0>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800227e:	2b00      	cmp	r3, #0
 8002280:	d121      	bne.n	80022c6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002282:	2301      	movs	r3, #1
 8002284:	e0a6      	b.n	80023d4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	685b      	ldr	r3, [r3, #4]
 800228a:	2b02      	cmp	r3, #2
 800228c:	d107      	bne.n	800229e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800228e:	4b54      	ldr	r3, [pc, #336]	@ (80023e0 <HAL_RCC_ClockConfig+0x1f0>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002296:	2b00      	cmp	r3, #0
 8002298:	d115      	bne.n	80022c6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800229a:	2301      	movs	r3, #1
 800229c:	e09a      	b.n	80023d4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	685b      	ldr	r3, [r3, #4]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d107      	bne.n	80022b6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80022a6:	4b4e      	ldr	r3, [pc, #312]	@ (80023e0 <HAL_RCC_ClockConfig+0x1f0>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f003 0302 	and.w	r3, r3, #2
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d109      	bne.n	80022c6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80022b2:	2301      	movs	r3, #1
 80022b4:	e08e      	b.n	80023d4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80022b6:	4b4a      	ldr	r3, [pc, #296]	@ (80023e0 <HAL_RCC_ClockConfig+0x1f0>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d101      	bne.n	80022c6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80022c2:	2301      	movs	r3, #1
 80022c4:	e086      	b.n	80023d4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80022c6:	4b46      	ldr	r3, [pc, #280]	@ (80023e0 <HAL_RCC_ClockConfig+0x1f0>)
 80022c8:	689b      	ldr	r3, [r3, #8]
 80022ca:	f023 0203 	bic.w	r2, r3, #3
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	685b      	ldr	r3, [r3, #4]
 80022d2:	4943      	ldr	r1, [pc, #268]	@ (80023e0 <HAL_RCC_ClockConfig+0x1f0>)
 80022d4:	4313      	orrs	r3, r2
 80022d6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80022d8:	f7ff f86a 	bl	80013b0 <HAL_GetTick>
 80022dc:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022de:	e00a      	b.n	80022f6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022e0:	f7ff f866 	bl	80013b0 <HAL_GetTick>
 80022e4:	4602      	mov	r2, r0
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	1ad3      	subs	r3, r2, r3
 80022ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d901      	bls.n	80022f6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80022f2:	2303      	movs	r3, #3
 80022f4:	e06e      	b.n	80023d4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022f6:	4b3a      	ldr	r3, [pc, #232]	@ (80023e0 <HAL_RCC_ClockConfig+0x1f0>)
 80022f8:	689b      	ldr	r3, [r3, #8]
 80022fa:	f003 020c 	and.w	r2, r3, #12
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	685b      	ldr	r3, [r3, #4]
 8002302:	009b      	lsls	r3, r3, #2
 8002304:	429a      	cmp	r2, r3
 8002306:	d1eb      	bne.n	80022e0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f003 0302 	and.w	r3, r3, #2
 8002310:	2b00      	cmp	r3, #0
 8002312:	d010      	beq.n	8002336 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	689a      	ldr	r2, [r3, #8]
 8002318:	4b31      	ldr	r3, [pc, #196]	@ (80023e0 <HAL_RCC_ClockConfig+0x1f0>)
 800231a:	689b      	ldr	r3, [r3, #8]
 800231c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002320:	429a      	cmp	r2, r3
 8002322:	d208      	bcs.n	8002336 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002324:	4b2e      	ldr	r3, [pc, #184]	@ (80023e0 <HAL_RCC_ClockConfig+0x1f0>)
 8002326:	689b      	ldr	r3, [r3, #8]
 8002328:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	689b      	ldr	r3, [r3, #8]
 8002330:	492b      	ldr	r1, [pc, #172]	@ (80023e0 <HAL_RCC_ClockConfig+0x1f0>)
 8002332:	4313      	orrs	r3, r2
 8002334:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002336:	4b29      	ldr	r3, [pc, #164]	@ (80023dc <HAL_RCC_ClockConfig+0x1ec>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f003 0307 	and.w	r3, r3, #7
 800233e:	683a      	ldr	r2, [r7, #0]
 8002340:	429a      	cmp	r2, r3
 8002342:	d210      	bcs.n	8002366 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002344:	4b25      	ldr	r3, [pc, #148]	@ (80023dc <HAL_RCC_ClockConfig+0x1ec>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f023 0207 	bic.w	r2, r3, #7
 800234c:	4923      	ldr	r1, [pc, #140]	@ (80023dc <HAL_RCC_ClockConfig+0x1ec>)
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	4313      	orrs	r3, r2
 8002352:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002354:	4b21      	ldr	r3, [pc, #132]	@ (80023dc <HAL_RCC_ClockConfig+0x1ec>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f003 0307 	and.w	r3, r3, #7
 800235c:	683a      	ldr	r2, [r7, #0]
 800235e:	429a      	cmp	r2, r3
 8002360:	d001      	beq.n	8002366 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002362:	2301      	movs	r3, #1
 8002364:	e036      	b.n	80023d4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f003 0304 	and.w	r3, r3, #4
 800236e:	2b00      	cmp	r3, #0
 8002370:	d008      	beq.n	8002384 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002372:	4b1b      	ldr	r3, [pc, #108]	@ (80023e0 <HAL_RCC_ClockConfig+0x1f0>)
 8002374:	689b      	ldr	r3, [r3, #8]
 8002376:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	68db      	ldr	r3, [r3, #12]
 800237e:	4918      	ldr	r1, [pc, #96]	@ (80023e0 <HAL_RCC_ClockConfig+0x1f0>)
 8002380:	4313      	orrs	r3, r2
 8002382:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f003 0308 	and.w	r3, r3, #8
 800238c:	2b00      	cmp	r3, #0
 800238e:	d009      	beq.n	80023a4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002390:	4b13      	ldr	r3, [pc, #76]	@ (80023e0 <HAL_RCC_ClockConfig+0x1f0>)
 8002392:	689b      	ldr	r3, [r3, #8]
 8002394:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	691b      	ldr	r3, [r3, #16]
 800239c:	00db      	lsls	r3, r3, #3
 800239e:	4910      	ldr	r1, [pc, #64]	@ (80023e0 <HAL_RCC_ClockConfig+0x1f0>)
 80023a0:	4313      	orrs	r3, r2
 80023a2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80023a4:	f000 f824 	bl	80023f0 <HAL_RCC_GetSysClockFreq>
 80023a8:	4602      	mov	r2, r0
 80023aa:	4b0d      	ldr	r3, [pc, #52]	@ (80023e0 <HAL_RCC_ClockConfig+0x1f0>)
 80023ac:	689b      	ldr	r3, [r3, #8]
 80023ae:	091b      	lsrs	r3, r3, #4
 80023b0:	f003 030f 	and.w	r3, r3, #15
 80023b4:	490b      	ldr	r1, [pc, #44]	@ (80023e4 <HAL_RCC_ClockConfig+0x1f4>)
 80023b6:	5ccb      	ldrb	r3, [r1, r3]
 80023b8:	f003 031f 	and.w	r3, r3, #31
 80023bc:	fa22 f303 	lsr.w	r3, r2, r3
 80023c0:	4a09      	ldr	r2, [pc, #36]	@ (80023e8 <HAL_RCC_ClockConfig+0x1f8>)
 80023c2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80023c4:	4b09      	ldr	r3, [pc, #36]	@ (80023ec <HAL_RCC_ClockConfig+0x1fc>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	4618      	mov	r0, r3
 80023ca:	f7fe ffa1 	bl	8001310 <HAL_InitTick>
 80023ce:	4603      	mov	r3, r0
 80023d0:	72fb      	strb	r3, [r7, #11]

  return status;
 80023d2:	7afb      	ldrb	r3, [r7, #11]
}
 80023d4:	4618      	mov	r0, r3
 80023d6:	3710      	adds	r7, #16
 80023d8:	46bd      	mov	sp, r7
 80023da:	bd80      	pop	{r7, pc}
 80023dc:	40022000 	.word	0x40022000
 80023e0:	40021000 	.word	0x40021000
 80023e4:	0800482c 	.word	0x0800482c
 80023e8:	20000024 	.word	0x20000024
 80023ec:	20000028 	.word	0x20000028

080023f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80023f0:	b480      	push	{r7}
 80023f2:	b089      	sub	sp, #36	@ 0x24
 80023f4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80023f6:	2300      	movs	r3, #0
 80023f8:	61fb      	str	r3, [r7, #28]
 80023fa:	2300      	movs	r3, #0
 80023fc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80023fe:	4b3e      	ldr	r3, [pc, #248]	@ (80024f8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002400:	689b      	ldr	r3, [r3, #8]
 8002402:	f003 030c 	and.w	r3, r3, #12
 8002406:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002408:	4b3b      	ldr	r3, [pc, #236]	@ (80024f8 <HAL_RCC_GetSysClockFreq+0x108>)
 800240a:	68db      	ldr	r3, [r3, #12]
 800240c:	f003 0303 	and.w	r3, r3, #3
 8002410:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002412:	693b      	ldr	r3, [r7, #16]
 8002414:	2b00      	cmp	r3, #0
 8002416:	d005      	beq.n	8002424 <HAL_RCC_GetSysClockFreq+0x34>
 8002418:	693b      	ldr	r3, [r7, #16]
 800241a:	2b0c      	cmp	r3, #12
 800241c:	d121      	bne.n	8002462 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	2b01      	cmp	r3, #1
 8002422:	d11e      	bne.n	8002462 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002424:	4b34      	ldr	r3, [pc, #208]	@ (80024f8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f003 0308 	and.w	r3, r3, #8
 800242c:	2b00      	cmp	r3, #0
 800242e:	d107      	bne.n	8002440 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002430:	4b31      	ldr	r3, [pc, #196]	@ (80024f8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002432:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002436:	0a1b      	lsrs	r3, r3, #8
 8002438:	f003 030f 	and.w	r3, r3, #15
 800243c:	61fb      	str	r3, [r7, #28]
 800243e:	e005      	b.n	800244c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002440:	4b2d      	ldr	r3, [pc, #180]	@ (80024f8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	091b      	lsrs	r3, r3, #4
 8002446:	f003 030f 	and.w	r3, r3, #15
 800244a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800244c:	4a2b      	ldr	r2, [pc, #172]	@ (80024fc <HAL_RCC_GetSysClockFreq+0x10c>)
 800244e:	69fb      	ldr	r3, [r7, #28]
 8002450:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002454:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002456:	693b      	ldr	r3, [r7, #16]
 8002458:	2b00      	cmp	r3, #0
 800245a:	d10d      	bne.n	8002478 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800245c:	69fb      	ldr	r3, [r7, #28]
 800245e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002460:	e00a      	b.n	8002478 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002462:	693b      	ldr	r3, [r7, #16]
 8002464:	2b04      	cmp	r3, #4
 8002466:	d102      	bne.n	800246e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002468:	4b25      	ldr	r3, [pc, #148]	@ (8002500 <HAL_RCC_GetSysClockFreq+0x110>)
 800246a:	61bb      	str	r3, [r7, #24]
 800246c:	e004      	b.n	8002478 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800246e:	693b      	ldr	r3, [r7, #16]
 8002470:	2b08      	cmp	r3, #8
 8002472:	d101      	bne.n	8002478 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002474:	4b23      	ldr	r3, [pc, #140]	@ (8002504 <HAL_RCC_GetSysClockFreq+0x114>)
 8002476:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002478:	693b      	ldr	r3, [r7, #16]
 800247a:	2b0c      	cmp	r3, #12
 800247c:	d134      	bne.n	80024e8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800247e:	4b1e      	ldr	r3, [pc, #120]	@ (80024f8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002480:	68db      	ldr	r3, [r3, #12]
 8002482:	f003 0303 	and.w	r3, r3, #3
 8002486:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002488:	68bb      	ldr	r3, [r7, #8]
 800248a:	2b02      	cmp	r3, #2
 800248c:	d003      	beq.n	8002496 <HAL_RCC_GetSysClockFreq+0xa6>
 800248e:	68bb      	ldr	r3, [r7, #8]
 8002490:	2b03      	cmp	r3, #3
 8002492:	d003      	beq.n	800249c <HAL_RCC_GetSysClockFreq+0xac>
 8002494:	e005      	b.n	80024a2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002496:	4b1a      	ldr	r3, [pc, #104]	@ (8002500 <HAL_RCC_GetSysClockFreq+0x110>)
 8002498:	617b      	str	r3, [r7, #20]
      break;
 800249a:	e005      	b.n	80024a8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800249c:	4b19      	ldr	r3, [pc, #100]	@ (8002504 <HAL_RCC_GetSysClockFreq+0x114>)
 800249e:	617b      	str	r3, [r7, #20]
      break;
 80024a0:	e002      	b.n	80024a8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80024a2:	69fb      	ldr	r3, [r7, #28]
 80024a4:	617b      	str	r3, [r7, #20]
      break;
 80024a6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80024a8:	4b13      	ldr	r3, [pc, #76]	@ (80024f8 <HAL_RCC_GetSysClockFreq+0x108>)
 80024aa:	68db      	ldr	r3, [r3, #12]
 80024ac:	091b      	lsrs	r3, r3, #4
 80024ae:	f003 0307 	and.w	r3, r3, #7
 80024b2:	3301      	adds	r3, #1
 80024b4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80024b6:	4b10      	ldr	r3, [pc, #64]	@ (80024f8 <HAL_RCC_GetSysClockFreq+0x108>)
 80024b8:	68db      	ldr	r3, [r3, #12]
 80024ba:	0a1b      	lsrs	r3, r3, #8
 80024bc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80024c0:	697a      	ldr	r2, [r7, #20]
 80024c2:	fb03 f202 	mul.w	r2, r3, r2
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80024cc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80024ce:	4b0a      	ldr	r3, [pc, #40]	@ (80024f8 <HAL_RCC_GetSysClockFreq+0x108>)
 80024d0:	68db      	ldr	r3, [r3, #12]
 80024d2:	0e5b      	lsrs	r3, r3, #25
 80024d4:	f003 0303 	and.w	r3, r3, #3
 80024d8:	3301      	adds	r3, #1
 80024da:	005b      	lsls	r3, r3, #1
 80024dc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80024de:	697a      	ldr	r2, [r7, #20]
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80024e6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80024e8:	69bb      	ldr	r3, [r7, #24]
}
 80024ea:	4618      	mov	r0, r3
 80024ec:	3724      	adds	r7, #36	@ 0x24
 80024ee:	46bd      	mov	sp, r7
 80024f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f4:	4770      	bx	lr
 80024f6:	bf00      	nop
 80024f8:	40021000 	.word	0x40021000
 80024fc:	08004844 	.word	0x08004844
 8002500:	00f42400 	.word	0x00f42400
 8002504:	007a1200 	.word	0x007a1200

08002508 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002508:	b480      	push	{r7}
 800250a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800250c:	4b03      	ldr	r3, [pc, #12]	@ (800251c <HAL_RCC_GetHCLKFreq+0x14>)
 800250e:	681b      	ldr	r3, [r3, #0]
}
 8002510:	4618      	mov	r0, r3
 8002512:	46bd      	mov	sp, r7
 8002514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002518:	4770      	bx	lr
 800251a:	bf00      	nop
 800251c:	20000024 	.word	0x20000024

08002520 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002524:	f7ff fff0 	bl	8002508 <HAL_RCC_GetHCLKFreq>
 8002528:	4602      	mov	r2, r0
 800252a:	4b06      	ldr	r3, [pc, #24]	@ (8002544 <HAL_RCC_GetPCLK1Freq+0x24>)
 800252c:	689b      	ldr	r3, [r3, #8]
 800252e:	0a1b      	lsrs	r3, r3, #8
 8002530:	f003 0307 	and.w	r3, r3, #7
 8002534:	4904      	ldr	r1, [pc, #16]	@ (8002548 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002536:	5ccb      	ldrb	r3, [r1, r3]
 8002538:	f003 031f 	and.w	r3, r3, #31
 800253c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002540:	4618      	mov	r0, r3
 8002542:	bd80      	pop	{r7, pc}
 8002544:	40021000 	.word	0x40021000
 8002548:	0800483c 	.word	0x0800483c

0800254c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002550:	f7ff ffda 	bl	8002508 <HAL_RCC_GetHCLKFreq>
 8002554:	4602      	mov	r2, r0
 8002556:	4b06      	ldr	r3, [pc, #24]	@ (8002570 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002558:	689b      	ldr	r3, [r3, #8]
 800255a:	0adb      	lsrs	r3, r3, #11
 800255c:	f003 0307 	and.w	r3, r3, #7
 8002560:	4904      	ldr	r1, [pc, #16]	@ (8002574 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002562:	5ccb      	ldrb	r3, [r1, r3]
 8002564:	f003 031f 	and.w	r3, r3, #31
 8002568:	fa22 f303 	lsr.w	r3, r2, r3
}
 800256c:	4618      	mov	r0, r3
 800256e:	bd80      	pop	{r7, pc}
 8002570:	40021000 	.word	0x40021000
 8002574:	0800483c 	.word	0x0800483c

08002578 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b086      	sub	sp, #24
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002580:	2300      	movs	r3, #0
 8002582:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002584:	4b2a      	ldr	r3, [pc, #168]	@ (8002630 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002586:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002588:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800258c:	2b00      	cmp	r3, #0
 800258e:	d003      	beq.n	8002598 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002590:	f7ff f9b6 	bl	8001900 <HAL_PWREx_GetVoltageRange>
 8002594:	6178      	str	r0, [r7, #20]
 8002596:	e014      	b.n	80025c2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002598:	4b25      	ldr	r3, [pc, #148]	@ (8002630 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800259a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800259c:	4a24      	ldr	r2, [pc, #144]	@ (8002630 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800259e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80025a2:	6593      	str	r3, [r2, #88]	@ 0x58
 80025a4:	4b22      	ldr	r3, [pc, #136]	@ (8002630 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80025a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025a8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80025ac:	60fb      	str	r3, [r7, #12]
 80025ae:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80025b0:	f7ff f9a6 	bl	8001900 <HAL_PWREx_GetVoltageRange>
 80025b4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80025b6:	4b1e      	ldr	r3, [pc, #120]	@ (8002630 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80025b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025ba:	4a1d      	ldr	r2, [pc, #116]	@ (8002630 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80025bc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80025c0:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80025c2:	697b      	ldr	r3, [r7, #20]
 80025c4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80025c8:	d10b      	bne.n	80025e2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	2b80      	cmp	r3, #128	@ 0x80
 80025ce:	d919      	bls.n	8002604 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2ba0      	cmp	r3, #160	@ 0xa0
 80025d4:	d902      	bls.n	80025dc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80025d6:	2302      	movs	r3, #2
 80025d8:	613b      	str	r3, [r7, #16]
 80025da:	e013      	b.n	8002604 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80025dc:	2301      	movs	r3, #1
 80025de:	613b      	str	r3, [r7, #16]
 80025e0:	e010      	b.n	8002604 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	2b80      	cmp	r3, #128	@ 0x80
 80025e6:	d902      	bls.n	80025ee <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80025e8:	2303      	movs	r3, #3
 80025ea:	613b      	str	r3, [r7, #16]
 80025ec:	e00a      	b.n	8002604 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	2b80      	cmp	r3, #128	@ 0x80
 80025f2:	d102      	bne.n	80025fa <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80025f4:	2302      	movs	r3, #2
 80025f6:	613b      	str	r3, [r7, #16]
 80025f8:	e004      	b.n	8002604 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	2b70      	cmp	r3, #112	@ 0x70
 80025fe:	d101      	bne.n	8002604 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002600:	2301      	movs	r3, #1
 8002602:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002604:	4b0b      	ldr	r3, [pc, #44]	@ (8002634 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f023 0207 	bic.w	r2, r3, #7
 800260c:	4909      	ldr	r1, [pc, #36]	@ (8002634 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800260e:	693b      	ldr	r3, [r7, #16]
 8002610:	4313      	orrs	r3, r2
 8002612:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002614:	4b07      	ldr	r3, [pc, #28]	@ (8002634 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f003 0307 	and.w	r3, r3, #7
 800261c:	693a      	ldr	r2, [r7, #16]
 800261e:	429a      	cmp	r2, r3
 8002620:	d001      	beq.n	8002626 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002622:	2301      	movs	r3, #1
 8002624:	e000      	b.n	8002628 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002626:	2300      	movs	r3, #0
}
 8002628:	4618      	mov	r0, r3
 800262a:	3718      	adds	r7, #24
 800262c:	46bd      	mov	sp, r7
 800262e:	bd80      	pop	{r7, pc}
 8002630:	40021000 	.word	0x40021000
 8002634:	40022000 	.word	0x40022000

08002638 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b086      	sub	sp, #24
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002640:	2300      	movs	r3, #0
 8002642:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002644:	2300      	movs	r3, #0
 8002646:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002650:	2b00      	cmp	r3, #0
 8002652:	d031      	beq.n	80026b8 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002658:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800265c:	d01a      	beq.n	8002694 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 800265e:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002662:	d814      	bhi.n	800268e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002664:	2b00      	cmp	r3, #0
 8002666:	d009      	beq.n	800267c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002668:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800266c:	d10f      	bne.n	800268e <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800266e:	4b5d      	ldr	r3, [pc, #372]	@ (80027e4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002670:	68db      	ldr	r3, [r3, #12]
 8002672:	4a5c      	ldr	r2, [pc, #368]	@ (80027e4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002674:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002678:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800267a:	e00c      	b.n	8002696 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	3304      	adds	r3, #4
 8002680:	2100      	movs	r1, #0
 8002682:	4618      	mov	r0, r3
 8002684:	f000 f9de 	bl	8002a44 <RCCEx_PLLSAI1_Config>
 8002688:	4603      	mov	r3, r0
 800268a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800268c:	e003      	b.n	8002696 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800268e:	2301      	movs	r3, #1
 8002690:	74fb      	strb	r3, [r7, #19]
      break;
 8002692:	e000      	b.n	8002696 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8002694:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002696:	7cfb      	ldrb	r3, [r7, #19]
 8002698:	2b00      	cmp	r3, #0
 800269a:	d10b      	bne.n	80026b4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800269c:	4b51      	ldr	r3, [pc, #324]	@ (80027e4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800269e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026a2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80026aa:	494e      	ldr	r1, [pc, #312]	@ (80027e4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80026ac:	4313      	orrs	r3, r2
 80026ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80026b2:	e001      	b.n	80026b8 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80026b4:	7cfb      	ldrb	r3, [r7, #19]
 80026b6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	f000 809e 	beq.w	8002802 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80026c6:	2300      	movs	r3, #0
 80026c8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80026ca:	4b46      	ldr	r3, [pc, #280]	@ (80027e4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80026cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d101      	bne.n	80026da <HAL_RCCEx_PeriphCLKConfig+0xa2>
 80026d6:	2301      	movs	r3, #1
 80026d8:	e000      	b.n	80026dc <HAL_RCCEx_PeriphCLKConfig+0xa4>
 80026da:	2300      	movs	r3, #0
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d00d      	beq.n	80026fc <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026e0:	4b40      	ldr	r3, [pc, #256]	@ (80027e4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80026e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026e4:	4a3f      	ldr	r2, [pc, #252]	@ (80027e4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80026e6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80026ea:	6593      	str	r3, [r2, #88]	@ 0x58
 80026ec:	4b3d      	ldr	r3, [pc, #244]	@ (80027e4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80026ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026f0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80026f4:	60bb      	str	r3, [r7, #8]
 80026f6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80026f8:	2301      	movs	r3, #1
 80026fa:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80026fc:	4b3a      	ldr	r3, [pc, #232]	@ (80027e8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4a39      	ldr	r2, [pc, #228]	@ (80027e8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002702:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002706:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002708:	f7fe fe52 	bl	80013b0 <HAL_GetTick>
 800270c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800270e:	e009      	b.n	8002724 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002710:	f7fe fe4e 	bl	80013b0 <HAL_GetTick>
 8002714:	4602      	mov	r2, r0
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	1ad3      	subs	r3, r2, r3
 800271a:	2b02      	cmp	r3, #2
 800271c:	d902      	bls.n	8002724 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 800271e:	2303      	movs	r3, #3
 8002720:	74fb      	strb	r3, [r7, #19]
        break;
 8002722:	e005      	b.n	8002730 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002724:	4b30      	ldr	r3, [pc, #192]	@ (80027e8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800272c:	2b00      	cmp	r3, #0
 800272e:	d0ef      	beq.n	8002710 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8002730:	7cfb      	ldrb	r3, [r7, #19]
 8002732:	2b00      	cmp	r3, #0
 8002734:	d15a      	bne.n	80027ec <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002736:	4b2b      	ldr	r3, [pc, #172]	@ (80027e4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002738:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800273c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002740:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002742:	697b      	ldr	r3, [r7, #20]
 8002744:	2b00      	cmp	r3, #0
 8002746:	d01e      	beq.n	8002786 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800274c:	697a      	ldr	r2, [r7, #20]
 800274e:	429a      	cmp	r2, r3
 8002750:	d019      	beq.n	8002786 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002752:	4b24      	ldr	r3, [pc, #144]	@ (80027e4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002754:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002758:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800275c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800275e:	4b21      	ldr	r3, [pc, #132]	@ (80027e4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002760:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002764:	4a1f      	ldr	r2, [pc, #124]	@ (80027e4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002766:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800276a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800276e:	4b1d      	ldr	r3, [pc, #116]	@ (80027e4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002770:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002774:	4a1b      	ldr	r2, [pc, #108]	@ (80027e4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002776:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800277a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800277e:	4a19      	ldr	r2, [pc, #100]	@ (80027e4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002780:	697b      	ldr	r3, [r7, #20]
 8002782:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002786:	697b      	ldr	r3, [r7, #20]
 8002788:	f003 0301 	and.w	r3, r3, #1
 800278c:	2b00      	cmp	r3, #0
 800278e:	d016      	beq.n	80027be <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002790:	f7fe fe0e 	bl	80013b0 <HAL_GetTick>
 8002794:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002796:	e00b      	b.n	80027b0 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002798:	f7fe fe0a 	bl	80013b0 <HAL_GetTick>
 800279c:	4602      	mov	r2, r0
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	1ad3      	subs	r3, r2, r3
 80027a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d902      	bls.n	80027b0 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 80027aa:	2303      	movs	r3, #3
 80027ac:	74fb      	strb	r3, [r7, #19]
            break;
 80027ae:	e006      	b.n	80027be <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80027b0:	4b0c      	ldr	r3, [pc, #48]	@ (80027e4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80027b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027b6:	f003 0302 	and.w	r3, r3, #2
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d0ec      	beq.n	8002798 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 80027be:	7cfb      	ldrb	r3, [r7, #19]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d10b      	bne.n	80027dc <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80027c4:	4b07      	ldr	r3, [pc, #28]	@ (80027e4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80027c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027ca:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80027d2:	4904      	ldr	r1, [pc, #16]	@ (80027e4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80027d4:	4313      	orrs	r3, r2
 80027d6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80027da:	e009      	b.n	80027f0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80027dc:	7cfb      	ldrb	r3, [r7, #19]
 80027de:	74bb      	strb	r3, [r7, #18]
 80027e0:	e006      	b.n	80027f0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 80027e2:	bf00      	nop
 80027e4:	40021000 	.word	0x40021000
 80027e8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80027ec:	7cfb      	ldrb	r3, [r7, #19]
 80027ee:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80027f0:	7c7b      	ldrb	r3, [r7, #17]
 80027f2:	2b01      	cmp	r3, #1
 80027f4:	d105      	bne.n	8002802 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027f6:	4b8a      	ldr	r3, [pc, #552]	@ (8002a20 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80027f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027fa:	4a89      	ldr	r2, [pc, #548]	@ (8002a20 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80027fc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002800:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f003 0301 	and.w	r3, r3, #1
 800280a:	2b00      	cmp	r3, #0
 800280c:	d00a      	beq.n	8002824 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800280e:	4b84      	ldr	r3, [pc, #528]	@ (8002a20 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002810:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002814:	f023 0203 	bic.w	r2, r3, #3
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6a1b      	ldr	r3, [r3, #32]
 800281c:	4980      	ldr	r1, [pc, #512]	@ (8002a20 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800281e:	4313      	orrs	r3, r2
 8002820:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f003 0302 	and.w	r3, r3, #2
 800282c:	2b00      	cmp	r3, #0
 800282e:	d00a      	beq.n	8002846 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002830:	4b7b      	ldr	r3, [pc, #492]	@ (8002a20 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002832:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002836:	f023 020c 	bic.w	r2, r3, #12
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800283e:	4978      	ldr	r1, [pc, #480]	@ (8002a20 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002840:	4313      	orrs	r3, r2
 8002842:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f003 0320 	and.w	r3, r3, #32
 800284e:	2b00      	cmp	r3, #0
 8002850:	d00a      	beq.n	8002868 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002852:	4b73      	ldr	r3, [pc, #460]	@ (8002a20 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002854:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002858:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002860:	496f      	ldr	r1, [pc, #444]	@ (8002a20 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002862:	4313      	orrs	r3, r2
 8002864:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002870:	2b00      	cmp	r3, #0
 8002872:	d00a      	beq.n	800288a <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002874:	4b6a      	ldr	r3, [pc, #424]	@ (8002a20 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002876:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800287a:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002882:	4967      	ldr	r1, [pc, #412]	@ (8002a20 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002884:	4313      	orrs	r3, r2
 8002886:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002892:	2b00      	cmp	r3, #0
 8002894:	d00a      	beq.n	80028ac <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002896:	4b62      	ldr	r3, [pc, #392]	@ (8002a20 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002898:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800289c:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028a4:	495e      	ldr	r1, [pc, #376]	@ (8002a20 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80028a6:	4313      	orrs	r3, r2
 80028a8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d00a      	beq.n	80028ce <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80028b8:	4b59      	ldr	r3, [pc, #356]	@ (8002a20 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80028ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028be:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028c6:	4956      	ldr	r1, [pc, #344]	@ (8002a20 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80028c8:	4313      	orrs	r3, r2
 80028ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d00a      	beq.n	80028f0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80028da:	4b51      	ldr	r3, [pc, #324]	@ (8002a20 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80028dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028e0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028e8:	494d      	ldr	r1, [pc, #308]	@ (8002a20 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80028ea:	4313      	orrs	r3, r2
 80028ec:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d028      	beq.n	800294e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80028fc:	4b48      	ldr	r3, [pc, #288]	@ (8002a20 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80028fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002902:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800290a:	4945      	ldr	r1, [pc, #276]	@ (8002a20 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800290c:	4313      	orrs	r3, r2
 800290e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002916:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800291a:	d106      	bne.n	800292a <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800291c:	4b40      	ldr	r3, [pc, #256]	@ (8002a20 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800291e:	68db      	ldr	r3, [r3, #12]
 8002920:	4a3f      	ldr	r2, [pc, #252]	@ (8002a20 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002922:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002926:	60d3      	str	r3, [r2, #12]
 8002928:	e011      	b.n	800294e <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800292e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002932:	d10c      	bne.n	800294e <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	3304      	adds	r3, #4
 8002938:	2101      	movs	r1, #1
 800293a:	4618      	mov	r0, r3
 800293c:	f000 f882 	bl	8002a44 <RCCEx_PLLSAI1_Config>
 8002940:	4603      	mov	r3, r0
 8002942:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002944:	7cfb      	ldrb	r3, [r7, #19]
 8002946:	2b00      	cmp	r3, #0
 8002948:	d001      	beq.n	800294e <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 800294a:	7cfb      	ldrb	r3, [r7, #19]
 800294c:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002956:	2b00      	cmp	r3, #0
 8002958:	d028      	beq.n	80029ac <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800295a:	4b31      	ldr	r3, [pc, #196]	@ (8002a20 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800295c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002960:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002968:	492d      	ldr	r1, [pc, #180]	@ (8002a20 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800296a:	4313      	orrs	r3, r2
 800296c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002974:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002978:	d106      	bne.n	8002988 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800297a:	4b29      	ldr	r3, [pc, #164]	@ (8002a20 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800297c:	68db      	ldr	r3, [r3, #12]
 800297e:	4a28      	ldr	r2, [pc, #160]	@ (8002a20 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002980:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002984:	60d3      	str	r3, [r2, #12]
 8002986:	e011      	b.n	80029ac <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800298c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002990:	d10c      	bne.n	80029ac <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	3304      	adds	r3, #4
 8002996:	2101      	movs	r1, #1
 8002998:	4618      	mov	r0, r3
 800299a:	f000 f853 	bl	8002a44 <RCCEx_PLLSAI1_Config>
 800299e:	4603      	mov	r3, r0
 80029a0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80029a2:	7cfb      	ldrb	r3, [r7, #19]
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d001      	beq.n	80029ac <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 80029a8:	7cfb      	ldrb	r3, [r7, #19]
 80029aa:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d01c      	beq.n	80029f2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80029b8:	4b19      	ldr	r3, [pc, #100]	@ (8002a20 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80029ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029be:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80029c6:	4916      	ldr	r1, [pc, #88]	@ (8002a20 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80029c8:	4313      	orrs	r3, r2
 80029ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80029d2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80029d6:	d10c      	bne.n	80029f2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	3304      	adds	r3, #4
 80029dc:	2102      	movs	r1, #2
 80029de:	4618      	mov	r0, r3
 80029e0:	f000 f830 	bl	8002a44 <RCCEx_PLLSAI1_Config>
 80029e4:	4603      	mov	r3, r0
 80029e6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80029e8:	7cfb      	ldrb	r3, [r7, #19]
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d001      	beq.n	80029f2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 80029ee:	7cfb      	ldrb	r3, [r7, #19]
 80029f0:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d00a      	beq.n	8002a14 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80029fe:	4b08      	ldr	r3, [pc, #32]	@ (8002a20 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002a00:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a04:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a0c:	4904      	ldr	r1, [pc, #16]	@ (8002a20 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002a0e:	4313      	orrs	r3, r2
 8002a10:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002a14:	7cbb      	ldrb	r3, [r7, #18]
}
 8002a16:	4618      	mov	r0, r3
 8002a18:	3718      	adds	r7, #24
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	bd80      	pop	{r7, pc}
 8002a1e:	bf00      	nop
 8002a20:	40021000 	.word	0x40021000

08002a24 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8002a24:	b480      	push	{r7}
 8002a26:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8002a28:	4b05      	ldr	r3, [pc, #20]	@ (8002a40 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	4a04      	ldr	r2, [pc, #16]	@ (8002a40 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8002a2e:	f043 0304 	orr.w	r3, r3, #4
 8002a32:	6013      	str	r3, [r2, #0]
}
 8002a34:	bf00      	nop
 8002a36:	46bd      	mov	sp, r7
 8002a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3c:	4770      	bx	lr
 8002a3e:	bf00      	nop
 8002a40:	40021000 	.word	0x40021000

08002a44 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b084      	sub	sp, #16
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
 8002a4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002a4e:	2300      	movs	r3, #0
 8002a50:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002a52:	4b74      	ldr	r3, [pc, #464]	@ (8002c24 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002a54:	68db      	ldr	r3, [r3, #12]
 8002a56:	f003 0303 	and.w	r3, r3, #3
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d018      	beq.n	8002a90 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002a5e:	4b71      	ldr	r3, [pc, #452]	@ (8002c24 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002a60:	68db      	ldr	r3, [r3, #12]
 8002a62:	f003 0203 	and.w	r2, r3, #3
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	429a      	cmp	r2, r3
 8002a6c:	d10d      	bne.n	8002a8a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
       ||
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d009      	beq.n	8002a8a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002a76:	4b6b      	ldr	r3, [pc, #428]	@ (8002c24 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002a78:	68db      	ldr	r3, [r3, #12]
 8002a7a:	091b      	lsrs	r3, r3, #4
 8002a7c:	f003 0307 	and.w	r3, r3, #7
 8002a80:	1c5a      	adds	r2, r3, #1
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	685b      	ldr	r3, [r3, #4]
       ||
 8002a86:	429a      	cmp	r2, r3
 8002a88:	d047      	beq.n	8002b1a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	73fb      	strb	r3, [r7, #15]
 8002a8e:	e044      	b.n	8002b1a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	2b03      	cmp	r3, #3
 8002a96:	d018      	beq.n	8002aca <RCCEx_PLLSAI1_Config+0x86>
 8002a98:	2b03      	cmp	r3, #3
 8002a9a:	d825      	bhi.n	8002ae8 <RCCEx_PLLSAI1_Config+0xa4>
 8002a9c:	2b01      	cmp	r3, #1
 8002a9e:	d002      	beq.n	8002aa6 <RCCEx_PLLSAI1_Config+0x62>
 8002aa0:	2b02      	cmp	r3, #2
 8002aa2:	d009      	beq.n	8002ab8 <RCCEx_PLLSAI1_Config+0x74>
 8002aa4:	e020      	b.n	8002ae8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002aa6:	4b5f      	ldr	r3, [pc, #380]	@ (8002c24 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f003 0302 	and.w	r3, r3, #2
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d11d      	bne.n	8002aee <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ab6:	e01a      	b.n	8002aee <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002ab8:	4b5a      	ldr	r3, [pc, #360]	@ (8002c24 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d116      	bne.n	8002af2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002ac4:	2301      	movs	r3, #1
 8002ac6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ac8:	e013      	b.n	8002af2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002aca:	4b56      	ldr	r3, [pc, #344]	@ (8002c24 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d10f      	bne.n	8002af6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002ad6:	4b53      	ldr	r3, [pc, #332]	@ (8002c24 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d109      	bne.n	8002af6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002ae6:	e006      	b.n	8002af6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002ae8:	2301      	movs	r3, #1
 8002aea:	73fb      	strb	r3, [r7, #15]
      break;
 8002aec:	e004      	b.n	8002af8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002aee:	bf00      	nop
 8002af0:	e002      	b.n	8002af8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002af2:	bf00      	nop
 8002af4:	e000      	b.n	8002af8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002af6:	bf00      	nop
    }

    if(status == HAL_OK)
 8002af8:	7bfb      	ldrb	r3, [r7, #15]
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d10d      	bne.n	8002b1a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002afe:	4b49      	ldr	r3, [pc, #292]	@ (8002c24 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002b00:	68db      	ldr	r3, [r3, #12]
 8002b02:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6819      	ldr	r1, [r3, #0]
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	685b      	ldr	r3, [r3, #4]
 8002b0e:	3b01      	subs	r3, #1
 8002b10:	011b      	lsls	r3, r3, #4
 8002b12:	430b      	orrs	r3, r1
 8002b14:	4943      	ldr	r1, [pc, #268]	@ (8002c24 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002b16:	4313      	orrs	r3, r2
 8002b18:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002b1a:	7bfb      	ldrb	r3, [r7, #15]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d17c      	bne.n	8002c1a <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002b20:	4b40      	ldr	r3, [pc, #256]	@ (8002c24 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4a3f      	ldr	r2, [pc, #252]	@ (8002c24 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002b26:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002b2a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b2c:	f7fe fc40 	bl	80013b0 <HAL_GetTick>
 8002b30:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002b32:	e009      	b.n	8002b48 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002b34:	f7fe fc3c 	bl	80013b0 <HAL_GetTick>
 8002b38:	4602      	mov	r2, r0
 8002b3a:	68bb      	ldr	r3, [r7, #8]
 8002b3c:	1ad3      	subs	r3, r2, r3
 8002b3e:	2b02      	cmp	r3, #2
 8002b40:	d902      	bls.n	8002b48 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002b42:	2303      	movs	r3, #3
 8002b44:	73fb      	strb	r3, [r7, #15]
        break;
 8002b46:	e005      	b.n	8002b54 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002b48:	4b36      	ldr	r3, [pc, #216]	@ (8002c24 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d1ef      	bne.n	8002b34 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002b54:	7bfb      	ldrb	r3, [r7, #15]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d15f      	bne.n	8002c1a <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d110      	bne.n	8002b82 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002b60:	4b30      	ldr	r3, [pc, #192]	@ (8002c24 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002b62:	691b      	ldr	r3, [r3, #16]
 8002b64:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8002b68:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002b6c:	687a      	ldr	r2, [r7, #4]
 8002b6e:	6892      	ldr	r2, [r2, #8]
 8002b70:	0211      	lsls	r1, r2, #8
 8002b72:	687a      	ldr	r2, [r7, #4]
 8002b74:	68d2      	ldr	r2, [r2, #12]
 8002b76:	06d2      	lsls	r2, r2, #27
 8002b78:	430a      	orrs	r2, r1
 8002b7a:	492a      	ldr	r1, [pc, #168]	@ (8002c24 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002b7c:	4313      	orrs	r3, r2
 8002b7e:	610b      	str	r3, [r1, #16]
 8002b80:	e027      	b.n	8002bd2 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	2b01      	cmp	r3, #1
 8002b86:	d112      	bne.n	8002bae <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002b88:	4b26      	ldr	r3, [pc, #152]	@ (8002c24 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002b8a:	691b      	ldr	r3, [r3, #16]
 8002b8c:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8002b90:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002b94:	687a      	ldr	r2, [r7, #4]
 8002b96:	6892      	ldr	r2, [r2, #8]
 8002b98:	0211      	lsls	r1, r2, #8
 8002b9a:	687a      	ldr	r2, [r7, #4]
 8002b9c:	6912      	ldr	r2, [r2, #16]
 8002b9e:	0852      	lsrs	r2, r2, #1
 8002ba0:	3a01      	subs	r2, #1
 8002ba2:	0552      	lsls	r2, r2, #21
 8002ba4:	430a      	orrs	r2, r1
 8002ba6:	491f      	ldr	r1, [pc, #124]	@ (8002c24 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002ba8:	4313      	orrs	r3, r2
 8002baa:	610b      	str	r3, [r1, #16]
 8002bac:	e011      	b.n	8002bd2 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002bae:	4b1d      	ldr	r3, [pc, #116]	@ (8002c24 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002bb0:	691b      	ldr	r3, [r3, #16]
 8002bb2:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002bb6:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002bba:	687a      	ldr	r2, [r7, #4]
 8002bbc:	6892      	ldr	r2, [r2, #8]
 8002bbe:	0211      	lsls	r1, r2, #8
 8002bc0:	687a      	ldr	r2, [r7, #4]
 8002bc2:	6952      	ldr	r2, [r2, #20]
 8002bc4:	0852      	lsrs	r2, r2, #1
 8002bc6:	3a01      	subs	r2, #1
 8002bc8:	0652      	lsls	r2, r2, #25
 8002bca:	430a      	orrs	r2, r1
 8002bcc:	4915      	ldr	r1, [pc, #84]	@ (8002c24 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002bce:	4313      	orrs	r3, r2
 8002bd0:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002bd2:	4b14      	ldr	r3, [pc, #80]	@ (8002c24 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	4a13      	ldr	r2, [pc, #76]	@ (8002c24 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002bd8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002bdc:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bde:	f7fe fbe7 	bl	80013b0 <HAL_GetTick>
 8002be2:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002be4:	e009      	b.n	8002bfa <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002be6:	f7fe fbe3 	bl	80013b0 <HAL_GetTick>
 8002bea:	4602      	mov	r2, r0
 8002bec:	68bb      	ldr	r3, [r7, #8]
 8002bee:	1ad3      	subs	r3, r2, r3
 8002bf0:	2b02      	cmp	r3, #2
 8002bf2:	d902      	bls.n	8002bfa <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8002bf4:	2303      	movs	r3, #3
 8002bf6:	73fb      	strb	r3, [r7, #15]
          break;
 8002bf8:	e005      	b.n	8002c06 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002bfa:	4b0a      	ldr	r3, [pc, #40]	@ (8002c24 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d0ef      	beq.n	8002be6 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8002c06:	7bfb      	ldrb	r3, [r7, #15]
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d106      	bne.n	8002c1a <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002c0c:	4b05      	ldr	r3, [pc, #20]	@ (8002c24 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002c0e:	691a      	ldr	r2, [r3, #16]
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	699b      	ldr	r3, [r3, #24]
 8002c14:	4903      	ldr	r1, [pc, #12]	@ (8002c24 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002c16:	4313      	orrs	r3, r2
 8002c18:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002c1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	3710      	adds	r7, #16
 8002c20:	46bd      	mov	sp, r7
 8002c22:	bd80      	pop	{r7, pc}
 8002c24:	40021000 	.word	0x40021000

08002c28 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b084      	sub	sp, #16
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d101      	bne.n	8002c3a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002c36:	2301      	movs	r3, #1
 8002c38:	e095      	b.n	8002d66 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d108      	bne.n	8002c54 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	685b      	ldr	r3, [r3, #4]
 8002c46:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002c4a:	d009      	beq.n	8002c60 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2200      	movs	r2, #0
 8002c50:	61da      	str	r2, [r3, #28]
 8002c52:	e005      	b.n	8002c60 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2200      	movs	r2, #0
 8002c58:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2200      	movs	r2, #0
 8002c64:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002c6c:	b2db      	uxtb	r3, r3
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d106      	bne.n	8002c80 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2200      	movs	r2, #0
 8002c76:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002c7a:	6878      	ldr	r0, [r7, #4]
 8002c7c:	f7fe f98c 	bl	8000f98 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2202      	movs	r2, #2
 8002c84:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	681a      	ldr	r2, [r3, #0]
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002c96:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	68db      	ldr	r3, [r3, #12]
 8002c9c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002ca0:	d902      	bls.n	8002ca8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	60fb      	str	r3, [r7, #12]
 8002ca6:	e002      	b.n	8002cae <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002ca8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002cac:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	68db      	ldr	r3, [r3, #12]
 8002cb2:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8002cb6:	d007      	beq.n	8002cc8 <HAL_SPI_Init+0xa0>
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	68db      	ldr	r3, [r3, #12]
 8002cbc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002cc0:	d002      	beq.n	8002cc8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	685b      	ldr	r3, [r3, #4]
 8002ccc:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	689b      	ldr	r3, [r3, #8]
 8002cd4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002cd8:	431a      	orrs	r2, r3
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	691b      	ldr	r3, [r3, #16]
 8002cde:	f003 0302 	and.w	r3, r3, #2
 8002ce2:	431a      	orrs	r2, r3
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	695b      	ldr	r3, [r3, #20]
 8002ce8:	f003 0301 	and.w	r3, r3, #1
 8002cec:	431a      	orrs	r2, r3
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	699b      	ldr	r3, [r3, #24]
 8002cf2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002cf6:	431a      	orrs	r2, r3
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	69db      	ldr	r3, [r3, #28]
 8002cfc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002d00:	431a      	orrs	r2, r3
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6a1b      	ldr	r3, [r3, #32]
 8002d06:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d0a:	ea42 0103 	orr.w	r1, r2, r3
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d12:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	430a      	orrs	r2, r1
 8002d1c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	699b      	ldr	r3, [r3, #24]
 8002d22:	0c1b      	lsrs	r3, r3, #16
 8002d24:	f003 0204 	and.w	r2, r3, #4
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d2c:	f003 0310 	and.w	r3, r3, #16
 8002d30:	431a      	orrs	r2, r3
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d36:	f003 0308 	and.w	r3, r3, #8
 8002d3a:	431a      	orrs	r2, r3
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	68db      	ldr	r3, [r3, #12]
 8002d40:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8002d44:	ea42 0103 	orr.w	r1, r2, r3
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	430a      	orrs	r2, r1
 8002d54:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	2200      	movs	r2, #0
 8002d5a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2201      	movs	r2, #1
 8002d60:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8002d64:	2300      	movs	r3, #0
}
 8002d66:	4618      	mov	r0, r3
 8002d68:	3710      	adds	r7, #16
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	bd80      	pop	{r7, pc}

08002d6e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002d6e:	b580      	push	{r7, lr}
 8002d70:	b08a      	sub	sp, #40	@ 0x28
 8002d72:	af00      	add	r7, sp, #0
 8002d74:	60f8      	str	r0, [r7, #12]
 8002d76:	60b9      	str	r1, [r7, #8]
 8002d78:	607a      	str	r2, [r7, #4]
 8002d7a:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002d80:	2300      	movs	r3, #0
 8002d82:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002d8c:	2b01      	cmp	r3, #1
 8002d8e:	d101      	bne.n	8002d94 <HAL_SPI_TransmitReceive+0x26>
 8002d90:	2302      	movs	r3, #2
 8002d92:	e20a      	b.n	80031aa <HAL_SPI_TransmitReceive+0x43c>
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	2201      	movs	r2, #1
 8002d98:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002d9c:	f7fe fb08 	bl	80013b0 <HAL_GetTick>
 8002da0:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002da8:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	685b      	ldr	r3, [r3, #4]
 8002dae:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8002db0:	887b      	ldrh	r3, [r7, #2]
 8002db2:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8002db4:	887b      	ldrh	r3, [r7, #2]
 8002db6:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002db8:	7efb      	ldrb	r3, [r7, #27]
 8002dba:	2b01      	cmp	r3, #1
 8002dbc:	d00e      	beq.n	8002ddc <HAL_SPI_TransmitReceive+0x6e>
 8002dbe:	697b      	ldr	r3, [r7, #20]
 8002dc0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002dc4:	d106      	bne.n	8002dd4 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	689b      	ldr	r3, [r3, #8]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d102      	bne.n	8002dd4 <HAL_SPI_TransmitReceive+0x66>
 8002dce:	7efb      	ldrb	r3, [r7, #27]
 8002dd0:	2b04      	cmp	r3, #4
 8002dd2:	d003      	beq.n	8002ddc <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8002dd4:	2302      	movs	r3, #2
 8002dd6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8002dda:	e1e0      	b.n	800319e <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002ddc:	68bb      	ldr	r3, [r7, #8]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d005      	beq.n	8002dee <HAL_SPI_TransmitReceive+0x80>
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d002      	beq.n	8002dee <HAL_SPI_TransmitReceive+0x80>
 8002de8:	887b      	ldrh	r3, [r7, #2]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d103      	bne.n	8002df6 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8002dee:	2301      	movs	r3, #1
 8002df0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8002df4:	e1d3      	b.n	800319e <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002dfc:	b2db      	uxtb	r3, r3
 8002dfe:	2b04      	cmp	r3, #4
 8002e00:	d003      	beq.n	8002e0a <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	2205      	movs	r2, #5
 8002e06:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	687a      	ldr	r2, [r7, #4]
 8002e14:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	887a      	ldrh	r2, [r7, #2]
 8002e1a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	887a      	ldrh	r2, [r7, #2]
 8002e22:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	68ba      	ldr	r2, [r7, #8]
 8002e2a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	887a      	ldrh	r2, [r7, #2]
 8002e30:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	887a      	ldrh	r2, [r7, #2]
 8002e36:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	2200      	movs	r2, #0
 8002e42:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	68db      	ldr	r3, [r3, #12]
 8002e48:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002e4c:	d802      	bhi.n	8002e54 <HAL_SPI_TransmitReceive+0xe6>
 8002e4e:	8a3b      	ldrh	r3, [r7, #16]
 8002e50:	2b01      	cmp	r3, #1
 8002e52:	d908      	bls.n	8002e66 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	685a      	ldr	r2, [r3, #4]
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002e62:	605a      	str	r2, [r3, #4]
 8002e64:	e007      	b.n	8002e76 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	685a      	ldr	r2, [r3, #4]
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002e74:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e80:	2b40      	cmp	r3, #64	@ 0x40
 8002e82:	d007      	beq.n	8002e94 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	681a      	ldr	r2, [r3, #0]
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002e92:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	68db      	ldr	r3, [r3, #12]
 8002e98:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002e9c:	f240 8081 	bls.w	8002fa2 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	685b      	ldr	r3, [r3, #4]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d002      	beq.n	8002eae <HAL_SPI_TransmitReceive+0x140>
 8002ea8:	8a7b      	ldrh	r3, [r7, #18]
 8002eaa:	2b01      	cmp	r3, #1
 8002eac:	d16d      	bne.n	8002f8a <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002eb2:	881a      	ldrh	r2, [r3, #0]
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ebe:	1c9a      	adds	r2, r3, #2
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002ec8:	b29b      	uxth	r3, r3
 8002eca:	3b01      	subs	r3, #1
 8002ecc:	b29a      	uxth	r2, r3
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002ed2:	e05a      	b.n	8002f8a <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	689b      	ldr	r3, [r3, #8]
 8002eda:	f003 0302 	and.w	r3, r3, #2
 8002ede:	2b02      	cmp	r3, #2
 8002ee0:	d11b      	bne.n	8002f1a <HAL_SPI_TransmitReceive+0x1ac>
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002ee6:	b29b      	uxth	r3, r3
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d016      	beq.n	8002f1a <HAL_SPI_TransmitReceive+0x1ac>
 8002eec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002eee:	2b01      	cmp	r3, #1
 8002ef0:	d113      	bne.n	8002f1a <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ef6:	881a      	ldrh	r2, [r3, #0]
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f02:	1c9a      	adds	r2, r3, #2
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002f0c:	b29b      	uxth	r3, r3
 8002f0e:	3b01      	subs	r3, #1
 8002f10:	b29a      	uxth	r2, r3
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002f16:	2300      	movs	r3, #0
 8002f18:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	689b      	ldr	r3, [r3, #8]
 8002f20:	f003 0301 	and.w	r3, r3, #1
 8002f24:	2b01      	cmp	r3, #1
 8002f26:	d11c      	bne.n	8002f62 <HAL_SPI_TransmitReceive+0x1f4>
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002f2e:	b29b      	uxth	r3, r3
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d016      	beq.n	8002f62 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	68da      	ldr	r2, [r3, #12]
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f3e:	b292      	uxth	r2, r2
 8002f40:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f46:	1c9a      	adds	r2, r3, #2
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002f52:	b29b      	uxth	r3, r3
 8002f54:	3b01      	subs	r3, #1
 8002f56:	b29a      	uxth	r2, r3
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002f5e:	2301      	movs	r3, #1
 8002f60:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002f62:	f7fe fa25 	bl	80013b0 <HAL_GetTick>
 8002f66:	4602      	mov	r2, r0
 8002f68:	69fb      	ldr	r3, [r7, #28]
 8002f6a:	1ad3      	subs	r3, r2, r3
 8002f6c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002f6e:	429a      	cmp	r2, r3
 8002f70:	d80b      	bhi.n	8002f8a <HAL_SPI_TransmitReceive+0x21c>
 8002f72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f74:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002f78:	d007      	beq.n	8002f8a <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 8002f7a:	2303      	movs	r3, #3
 8002f7c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	2201      	movs	r2, #1
 8002f84:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8002f88:	e109      	b.n	800319e <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002f8e:	b29b      	uxth	r3, r3
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d19f      	bne.n	8002ed4 <HAL_SPI_TransmitReceive+0x166>
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002f9a:	b29b      	uxth	r3, r3
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d199      	bne.n	8002ed4 <HAL_SPI_TransmitReceive+0x166>
 8002fa0:	e0e3      	b.n	800316a <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	685b      	ldr	r3, [r3, #4]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d003      	beq.n	8002fb2 <HAL_SPI_TransmitReceive+0x244>
 8002faa:	8a7b      	ldrh	r3, [r7, #18]
 8002fac:	2b01      	cmp	r3, #1
 8002fae:	f040 80cf 	bne.w	8003150 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002fb6:	b29b      	uxth	r3, r3
 8002fb8:	2b01      	cmp	r3, #1
 8002fba:	d912      	bls.n	8002fe2 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fc0:	881a      	ldrh	r2, [r3, #0]
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fcc:	1c9a      	adds	r2, r3, #2
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002fd6:	b29b      	uxth	r3, r3
 8002fd8:	3b02      	subs	r3, #2
 8002fda:	b29a      	uxth	r2, r3
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002fe0:	e0b6      	b.n	8003150 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	330c      	adds	r3, #12
 8002fec:	7812      	ldrb	r2, [r2, #0]
 8002fee:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ff4:	1c5a      	adds	r2, r3, #1
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002ffe:	b29b      	uxth	r3, r3
 8003000:	3b01      	subs	r3, #1
 8003002:	b29a      	uxth	r2, r3
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003008:	e0a2      	b.n	8003150 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	689b      	ldr	r3, [r3, #8]
 8003010:	f003 0302 	and.w	r3, r3, #2
 8003014:	2b02      	cmp	r3, #2
 8003016:	d134      	bne.n	8003082 <HAL_SPI_TransmitReceive+0x314>
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800301c:	b29b      	uxth	r3, r3
 800301e:	2b00      	cmp	r3, #0
 8003020:	d02f      	beq.n	8003082 <HAL_SPI_TransmitReceive+0x314>
 8003022:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003024:	2b01      	cmp	r3, #1
 8003026:	d12c      	bne.n	8003082 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800302c:	b29b      	uxth	r3, r3
 800302e:	2b01      	cmp	r3, #1
 8003030:	d912      	bls.n	8003058 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003036:	881a      	ldrh	r2, [r3, #0]
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003042:	1c9a      	adds	r2, r3, #2
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800304c:	b29b      	uxth	r3, r3
 800304e:	3b02      	subs	r3, #2
 8003050:	b29a      	uxth	r2, r3
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003056:	e012      	b.n	800307e <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	330c      	adds	r3, #12
 8003062:	7812      	ldrb	r2, [r2, #0]
 8003064:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800306a:	1c5a      	adds	r2, r3, #1
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003074:	b29b      	uxth	r3, r3
 8003076:	3b01      	subs	r3, #1
 8003078:	b29a      	uxth	r2, r3
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800307e:	2300      	movs	r3, #0
 8003080:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	689b      	ldr	r3, [r3, #8]
 8003088:	f003 0301 	and.w	r3, r3, #1
 800308c:	2b01      	cmp	r3, #1
 800308e:	d148      	bne.n	8003122 <HAL_SPI_TransmitReceive+0x3b4>
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003096:	b29b      	uxth	r3, r3
 8003098:	2b00      	cmp	r3, #0
 800309a:	d042      	beq.n	8003122 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80030a2:	b29b      	uxth	r3, r3
 80030a4:	2b01      	cmp	r3, #1
 80030a6:	d923      	bls.n	80030f0 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	68da      	ldr	r2, [r3, #12]
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030b2:	b292      	uxth	r2, r2
 80030b4:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030ba:	1c9a      	adds	r2, r3, #2
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80030c6:	b29b      	uxth	r3, r3
 80030c8:	3b02      	subs	r3, #2
 80030ca:	b29a      	uxth	r2, r3
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80030d8:	b29b      	uxth	r3, r3
 80030da:	2b01      	cmp	r3, #1
 80030dc:	d81f      	bhi.n	800311e <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	685a      	ldr	r2, [r3, #4]
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80030ec:	605a      	str	r2, [r3, #4]
 80030ee:	e016      	b.n	800311e <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f103 020c 	add.w	r2, r3, #12
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030fc:	7812      	ldrb	r2, [r2, #0]
 80030fe:	b2d2      	uxtb	r2, r2
 8003100:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003106:	1c5a      	adds	r2, r3, #1
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003112:	b29b      	uxth	r3, r3
 8003114:	3b01      	subs	r3, #1
 8003116:	b29a      	uxth	r2, r3
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800311e:	2301      	movs	r3, #1
 8003120:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003122:	f7fe f945 	bl	80013b0 <HAL_GetTick>
 8003126:	4602      	mov	r2, r0
 8003128:	69fb      	ldr	r3, [r7, #28]
 800312a:	1ad3      	subs	r3, r2, r3
 800312c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800312e:	429a      	cmp	r2, r3
 8003130:	d803      	bhi.n	800313a <HAL_SPI_TransmitReceive+0x3cc>
 8003132:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003134:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003138:	d102      	bne.n	8003140 <HAL_SPI_TransmitReceive+0x3d2>
 800313a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800313c:	2b00      	cmp	r3, #0
 800313e:	d107      	bne.n	8003150 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 8003140:	2303      	movs	r3, #3
 8003142:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	2201      	movs	r2, #1
 800314a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 800314e:	e026      	b.n	800319e <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003154:	b29b      	uxth	r3, r3
 8003156:	2b00      	cmp	r3, #0
 8003158:	f47f af57 	bne.w	800300a <HAL_SPI_TransmitReceive+0x29c>
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003162:	b29b      	uxth	r3, r3
 8003164:	2b00      	cmp	r3, #0
 8003166:	f47f af50 	bne.w	800300a <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800316a:	69fa      	ldr	r2, [r7, #28]
 800316c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800316e:	68f8      	ldr	r0, [r7, #12]
 8003170:	f000 f93e 	bl	80033f0 <SPI_EndRxTxTransaction>
 8003174:	4603      	mov	r3, r0
 8003176:	2b00      	cmp	r3, #0
 8003178:	d005      	beq.n	8003186 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 800317a:	2301      	movs	r3, #1
 800317c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	2220      	movs	r2, #32
 8003184:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800318a:	2b00      	cmp	r3, #0
 800318c:	d003      	beq.n	8003196 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 800318e:	2301      	movs	r3, #1
 8003190:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003194:	e003      	b.n	800319e <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	2201      	movs	r2, #1
 800319a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	2200      	movs	r2, #0
 80031a2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 80031a6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 80031aa:	4618      	mov	r0, r3
 80031ac:	3728      	adds	r7, #40	@ 0x28
 80031ae:	46bd      	mov	sp, r7
 80031b0:	bd80      	pop	{r7, pc}
	...

080031b4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b088      	sub	sp, #32
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	60f8      	str	r0, [r7, #12]
 80031bc:	60b9      	str	r1, [r7, #8]
 80031be:	603b      	str	r3, [r7, #0]
 80031c0:	4613      	mov	r3, r2
 80031c2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80031c4:	f7fe f8f4 	bl	80013b0 <HAL_GetTick>
 80031c8:	4602      	mov	r2, r0
 80031ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031cc:	1a9b      	subs	r3, r3, r2
 80031ce:	683a      	ldr	r2, [r7, #0]
 80031d0:	4413      	add	r3, r2
 80031d2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80031d4:	f7fe f8ec 	bl	80013b0 <HAL_GetTick>
 80031d8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80031da:	4b39      	ldr	r3, [pc, #228]	@ (80032c0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	015b      	lsls	r3, r3, #5
 80031e0:	0d1b      	lsrs	r3, r3, #20
 80031e2:	69fa      	ldr	r2, [r7, #28]
 80031e4:	fb02 f303 	mul.w	r3, r2, r3
 80031e8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80031ea:	e054      	b.n	8003296 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80031f2:	d050      	beq.n	8003296 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80031f4:	f7fe f8dc 	bl	80013b0 <HAL_GetTick>
 80031f8:	4602      	mov	r2, r0
 80031fa:	69bb      	ldr	r3, [r7, #24]
 80031fc:	1ad3      	subs	r3, r2, r3
 80031fe:	69fa      	ldr	r2, [r7, #28]
 8003200:	429a      	cmp	r2, r3
 8003202:	d902      	bls.n	800320a <SPI_WaitFlagStateUntilTimeout+0x56>
 8003204:	69fb      	ldr	r3, [r7, #28]
 8003206:	2b00      	cmp	r3, #0
 8003208:	d13d      	bne.n	8003286 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	685a      	ldr	r2, [r3, #4]
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003218:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	685b      	ldr	r3, [r3, #4]
 800321e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003222:	d111      	bne.n	8003248 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	689b      	ldr	r3, [r3, #8]
 8003228:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800322c:	d004      	beq.n	8003238 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	689b      	ldr	r3, [r3, #8]
 8003232:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003236:	d107      	bne.n	8003248 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	681a      	ldr	r2, [r3, #0]
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003246:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800324c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003250:	d10f      	bne.n	8003272 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	681a      	ldr	r2, [r3, #0]
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003260:	601a      	str	r2, [r3, #0]
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	681a      	ldr	r2, [r3, #0]
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003270:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	2201      	movs	r2, #1
 8003276:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	2200      	movs	r2, #0
 800327e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8003282:	2303      	movs	r3, #3
 8003284:	e017      	b.n	80032b6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003286:	697b      	ldr	r3, [r7, #20]
 8003288:	2b00      	cmp	r3, #0
 800328a:	d101      	bne.n	8003290 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800328c:	2300      	movs	r3, #0
 800328e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003290:	697b      	ldr	r3, [r7, #20]
 8003292:	3b01      	subs	r3, #1
 8003294:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	689a      	ldr	r2, [r3, #8]
 800329c:	68bb      	ldr	r3, [r7, #8]
 800329e:	4013      	ands	r3, r2
 80032a0:	68ba      	ldr	r2, [r7, #8]
 80032a2:	429a      	cmp	r2, r3
 80032a4:	bf0c      	ite	eq
 80032a6:	2301      	moveq	r3, #1
 80032a8:	2300      	movne	r3, #0
 80032aa:	b2db      	uxtb	r3, r3
 80032ac:	461a      	mov	r2, r3
 80032ae:	79fb      	ldrb	r3, [r7, #7]
 80032b0:	429a      	cmp	r2, r3
 80032b2:	d19b      	bne.n	80031ec <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80032b4:	2300      	movs	r3, #0
}
 80032b6:	4618      	mov	r0, r3
 80032b8:	3720      	adds	r7, #32
 80032ba:	46bd      	mov	sp, r7
 80032bc:	bd80      	pop	{r7, pc}
 80032be:	bf00      	nop
 80032c0:	20000024 	.word	0x20000024

080032c4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b08a      	sub	sp, #40	@ 0x28
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	60f8      	str	r0, [r7, #12]
 80032cc:	60b9      	str	r1, [r7, #8]
 80032ce:	607a      	str	r2, [r7, #4]
 80032d0:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80032d2:	2300      	movs	r3, #0
 80032d4:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80032d6:	f7fe f86b 	bl	80013b0 <HAL_GetTick>
 80032da:	4602      	mov	r2, r0
 80032dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032de:	1a9b      	subs	r3, r3, r2
 80032e0:	683a      	ldr	r2, [r7, #0]
 80032e2:	4413      	add	r3, r2
 80032e4:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 80032e6:	f7fe f863 	bl	80013b0 <HAL_GetTick>
 80032ea:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	330c      	adds	r3, #12
 80032f2:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80032f4:	4b3d      	ldr	r3, [pc, #244]	@ (80033ec <SPI_WaitFifoStateUntilTimeout+0x128>)
 80032f6:	681a      	ldr	r2, [r3, #0]
 80032f8:	4613      	mov	r3, r2
 80032fa:	009b      	lsls	r3, r3, #2
 80032fc:	4413      	add	r3, r2
 80032fe:	00da      	lsls	r2, r3, #3
 8003300:	1ad3      	subs	r3, r2, r3
 8003302:	0d1b      	lsrs	r3, r3, #20
 8003304:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003306:	fb02 f303 	mul.w	r3, r2, r3
 800330a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800330c:	e060      	b.n	80033d0 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800330e:	68bb      	ldr	r3, [r7, #8]
 8003310:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8003314:	d107      	bne.n	8003326 <SPI_WaitFifoStateUntilTimeout+0x62>
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	2b00      	cmp	r3, #0
 800331a:	d104      	bne.n	8003326 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800331c:	69fb      	ldr	r3, [r7, #28]
 800331e:	781b      	ldrb	r3, [r3, #0]
 8003320:	b2db      	uxtb	r3, r3
 8003322:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003324:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800332c:	d050      	beq.n	80033d0 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800332e:	f7fe f83f 	bl	80013b0 <HAL_GetTick>
 8003332:	4602      	mov	r2, r0
 8003334:	6a3b      	ldr	r3, [r7, #32]
 8003336:	1ad3      	subs	r3, r2, r3
 8003338:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800333a:	429a      	cmp	r2, r3
 800333c:	d902      	bls.n	8003344 <SPI_WaitFifoStateUntilTimeout+0x80>
 800333e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003340:	2b00      	cmp	r3, #0
 8003342:	d13d      	bne.n	80033c0 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	685a      	ldr	r2, [r3, #4]
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003352:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	685b      	ldr	r3, [r3, #4]
 8003358:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800335c:	d111      	bne.n	8003382 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	689b      	ldr	r3, [r3, #8]
 8003362:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003366:	d004      	beq.n	8003372 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	689b      	ldr	r3, [r3, #8]
 800336c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003370:	d107      	bne.n	8003382 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	681a      	ldr	r2, [r3, #0]
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003380:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003386:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800338a:	d10f      	bne.n	80033ac <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	681a      	ldr	r2, [r3, #0]
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800339a:	601a      	str	r2, [r3, #0]
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	681a      	ldr	r2, [r3, #0]
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80033aa:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	2201      	movs	r2, #1
 80033b0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	2200      	movs	r2, #0
 80033b8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80033bc:	2303      	movs	r3, #3
 80033be:	e010      	b.n	80033e2 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80033c0:	69bb      	ldr	r3, [r7, #24]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d101      	bne.n	80033ca <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80033c6:	2300      	movs	r3, #0
 80033c8:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 80033ca:	69bb      	ldr	r3, [r7, #24]
 80033cc:	3b01      	subs	r3, #1
 80033ce:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	689a      	ldr	r2, [r3, #8]
 80033d6:	68bb      	ldr	r3, [r7, #8]
 80033d8:	4013      	ands	r3, r2
 80033da:	687a      	ldr	r2, [r7, #4]
 80033dc:	429a      	cmp	r2, r3
 80033de:	d196      	bne.n	800330e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80033e0:	2300      	movs	r3, #0
}
 80033e2:	4618      	mov	r0, r3
 80033e4:	3728      	adds	r7, #40	@ 0x28
 80033e6:	46bd      	mov	sp, r7
 80033e8:	bd80      	pop	{r7, pc}
 80033ea:	bf00      	nop
 80033ec:	20000024 	.word	0x20000024

080033f0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b086      	sub	sp, #24
 80033f4:	af02      	add	r7, sp, #8
 80033f6:	60f8      	str	r0, [r7, #12]
 80033f8:	60b9      	str	r1, [r7, #8]
 80033fa:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	9300      	str	r3, [sp, #0]
 8003400:	68bb      	ldr	r3, [r7, #8]
 8003402:	2200      	movs	r2, #0
 8003404:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8003408:	68f8      	ldr	r0, [r7, #12]
 800340a:	f7ff ff5b 	bl	80032c4 <SPI_WaitFifoStateUntilTimeout>
 800340e:	4603      	mov	r3, r0
 8003410:	2b00      	cmp	r3, #0
 8003412:	d007      	beq.n	8003424 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003418:	f043 0220 	orr.w	r2, r3, #32
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003420:	2303      	movs	r3, #3
 8003422:	e027      	b.n	8003474 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	9300      	str	r3, [sp, #0]
 8003428:	68bb      	ldr	r3, [r7, #8]
 800342a:	2200      	movs	r2, #0
 800342c:	2180      	movs	r1, #128	@ 0x80
 800342e:	68f8      	ldr	r0, [r7, #12]
 8003430:	f7ff fec0 	bl	80031b4 <SPI_WaitFlagStateUntilTimeout>
 8003434:	4603      	mov	r3, r0
 8003436:	2b00      	cmp	r3, #0
 8003438:	d007      	beq.n	800344a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800343e:	f043 0220 	orr.w	r2, r3, #32
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003446:	2303      	movs	r3, #3
 8003448:	e014      	b.n	8003474 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	9300      	str	r3, [sp, #0]
 800344e:	68bb      	ldr	r3, [r7, #8]
 8003450:	2200      	movs	r2, #0
 8003452:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8003456:	68f8      	ldr	r0, [r7, #12]
 8003458:	f7ff ff34 	bl	80032c4 <SPI_WaitFifoStateUntilTimeout>
 800345c:	4603      	mov	r3, r0
 800345e:	2b00      	cmp	r3, #0
 8003460:	d007      	beq.n	8003472 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003466:	f043 0220 	orr.w	r2, r3, #32
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800346e:	2303      	movs	r3, #3
 8003470:	e000      	b.n	8003474 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003472:	2300      	movs	r3, #0
}
 8003474:	4618      	mov	r0, r3
 8003476:	3710      	adds	r7, #16
 8003478:	46bd      	mov	sp, r7
 800347a:	bd80      	pop	{r7, pc}

0800347c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b082      	sub	sp, #8
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2b00      	cmp	r3, #0
 8003488:	d101      	bne.n	800348e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800348a:	2301      	movs	r3, #1
 800348c:	e040      	b.n	8003510 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003492:	2b00      	cmp	r3, #0
 8003494:	d106      	bne.n	80034a4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	2200      	movs	r2, #0
 800349a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800349e:	6878      	ldr	r0, [r7, #4]
 80034a0:	f7fd fe8a 	bl	80011b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2224      	movs	r2, #36	@ 0x24
 80034a8:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	681a      	ldr	r2, [r3, #0]
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f022 0201 	bic.w	r2, r2, #1
 80034b8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d002      	beq.n	80034c8 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80034c2:	6878      	ldr	r0, [r7, #4]
 80034c4:	f000 fade 	bl	8003a84 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80034c8:	6878      	ldr	r0, [r7, #4]
 80034ca:	f000 f8af 	bl	800362c <UART_SetConfig>
 80034ce:	4603      	mov	r3, r0
 80034d0:	2b01      	cmp	r3, #1
 80034d2:	d101      	bne.n	80034d8 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80034d4:	2301      	movs	r3, #1
 80034d6:	e01b      	b.n	8003510 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	685a      	ldr	r2, [r3, #4]
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80034e6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	689a      	ldr	r2, [r3, #8]
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80034f6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	681a      	ldr	r2, [r3, #0]
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f042 0201 	orr.w	r2, r2, #1
 8003506:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003508:	6878      	ldr	r0, [r7, #4]
 800350a:	f000 fb5d 	bl	8003bc8 <UART_CheckIdleState>
 800350e:	4603      	mov	r3, r0
}
 8003510:	4618      	mov	r0, r3
 8003512:	3708      	adds	r7, #8
 8003514:	46bd      	mov	sp, r7
 8003516:	bd80      	pop	{r7, pc}

08003518 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003518:	b580      	push	{r7, lr}
 800351a:	b08a      	sub	sp, #40	@ 0x28
 800351c:	af02      	add	r7, sp, #8
 800351e:	60f8      	str	r0, [r7, #12]
 8003520:	60b9      	str	r1, [r7, #8]
 8003522:	603b      	str	r3, [r7, #0]
 8003524:	4613      	mov	r3, r2
 8003526:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800352c:	2b20      	cmp	r3, #32
 800352e:	d177      	bne.n	8003620 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8003530:	68bb      	ldr	r3, [r7, #8]
 8003532:	2b00      	cmp	r3, #0
 8003534:	d002      	beq.n	800353c <HAL_UART_Transmit+0x24>
 8003536:	88fb      	ldrh	r3, [r7, #6]
 8003538:	2b00      	cmp	r3, #0
 800353a:	d101      	bne.n	8003540 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800353c:	2301      	movs	r3, #1
 800353e:	e070      	b.n	8003622 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	2200      	movs	r2, #0
 8003544:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	2221      	movs	r2, #33	@ 0x21
 800354c:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800354e:	f7fd ff2f 	bl	80013b0 <HAL_GetTick>
 8003552:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	88fa      	ldrh	r2, [r7, #6]
 8003558:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	88fa      	ldrh	r2, [r7, #6]
 8003560:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	689b      	ldr	r3, [r3, #8]
 8003568:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800356c:	d108      	bne.n	8003580 <HAL_UART_Transmit+0x68>
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	691b      	ldr	r3, [r3, #16]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d104      	bne.n	8003580 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003576:	2300      	movs	r3, #0
 8003578:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800357a:	68bb      	ldr	r3, [r7, #8]
 800357c:	61bb      	str	r3, [r7, #24]
 800357e:	e003      	b.n	8003588 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003580:	68bb      	ldr	r3, [r7, #8]
 8003582:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003584:	2300      	movs	r3, #0
 8003586:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003588:	e02f      	b.n	80035ea <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	9300      	str	r3, [sp, #0]
 800358e:	697b      	ldr	r3, [r7, #20]
 8003590:	2200      	movs	r2, #0
 8003592:	2180      	movs	r1, #128	@ 0x80
 8003594:	68f8      	ldr	r0, [r7, #12]
 8003596:	f000 fbbf 	bl	8003d18 <UART_WaitOnFlagUntilTimeout>
 800359a:	4603      	mov	r3, r0
 800359c:	2b00      	cmp	r3, #0
 800359e:	d004      	beq.n	80035aa <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	2220      	movs	r2, #32
 80035a4:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80035a6:	2303      	movs	r3, #3
 80035a8:	e03b      	b.n	8003622 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80035aa:	69fb      	ldr	r3, [r7, #28]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d10b      	bne.n	80035c8 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80035b0:	69bb      	ldr	r3, [r7, #24]
 80035b2:	881a      	ldrh	r2, [r3, #0]
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80035bc:	b292      	uxth	r2, r2
 80035be:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80035c0:	69bb      	ldr	r3, [r7, #24]
 80035c2:	3302      	adds	r3, #2
 80035c4:	61bb      	str	r3, [r7, #24]
 80035c6:	e007      	b.n	80035d8 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80035c8:	69fb      	ldr	r3, [r7, #28]
 80035ca:	781a      	ldrb	r2, [r3, #0]
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80035d2:	69fb      	ldr	r3, [r7, #28]
 80035d4:	3301      	adds	r3, #1
 80035d6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80035de:	b29b      	uxth	r3, r3
 80035e0:	3b01      	subs	r3, #1
 80035e2:	b29a      	uxth	r2, r3
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80035f0:	b29b      	uxth	r3, r3
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d1c9      	bne.n	800358a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	9300      	str	r3, [sp, #0]
 80035fa:	697b      	ldr	r3, [r7, #20]
 80035fc:	2200      	movs	r2, #0
 80035fe:	2140      	movs	r1, #64	@ 0x40
 8003600:	68f8      	ldr	r0, [r7, #12]
 8003602:	f000 fb89 	bl	8003d18 <UART_WaitOnFlagUntilTimeout>
 8003606:	4603      	mov	r3, r0
 8003608:	2b00      	cmp	r3, #0
 800360a:	d004      	beq.n	8003616 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	2220      	movs	r2, #32
 8003610:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8003612:	2303      	movs	r3, #3
 8003614:	e005      	b.n	8003622 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	2220      	movs	r2, #32
 800361a:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800361c:	2300      	movs	r3, #0
 800361e:	e000      	b.n	8003622 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8003620:	2302      	movs	r3, #2
  }
}
 8003622:	4618      	mov	r0, r3
 8003624:	3720      	adds	r7, #32
 8003626:	46bd      	mov	sp, r7
 8003628:	bd80      	pop	{r7, pc}
	...

0800362c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800362c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003630:	b08a      	sub	sp, #40	@ 0x28
 8003632:	af00      	add	r7, sp, #0
 8003634:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003636:	2300      	movs	r3, #0
 8003638:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	689a      	ldr	r2, [r3, #8]
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	691b      	ldr	r3, [r3, #16]
 8003644:	431a      	orrs	r2, r3
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	695b      	ldr	r3, [r3, #20]
 800364a:	431a      	orrs	r2, r3
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	69db      	ldr	r3, [r3, #28]
 8003650:	4313      	orrs	r3, r2
 8003652:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	681a      	ldr	r2, [r3, #0]
 800365a:	4bb4      	ldr	r3, [pc, #720]	@ (800392c <UART_SetConfig+0x300>)
 800365c:	4013      	ands	r3, r2
 800365e:	68fa      	ldr	r2, [r7, #12]
 8003660:	6812      	ldr	r2, [r2, #0]
 8003662:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003664:	430b      	orrs	r3, r1
 8003666:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	685b      	ldr	r3, [r3, #4]
 800366e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	68da      	ldr	r2, [r3, #12]
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	430a      	orrs	r2, r1
 800367c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	699b      	ldr	r3, [r3, #24]
 8003682:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	4aa9      	ldr	r2, [pc, #676]	@ (8003930 <UART_SetConfig+0x304>)
 800368a:	4293      	cmp	r3, r2
 800368c:	d004      	beq.n	8003698 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	6a1b      	ldr	r3, [r3, #32]
 8003692:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003694:	4313      	orrs	r3, r2
 8003696:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	689b      	ldr	r3, [r3, #8]
 800369e:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80036a8:	430a      	orrs	r2, r1
 80036aa:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4aa0      	ldr	r2, [pc, #640]	@ (8003934 <UART_SetConfig+0x308>)
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d126      	bne.n	8003704 <UART_SetConfig+0xd8>
 80036b6:	4ba0      	ldr	r3, [pc, #640]	@ (8003938 <UART_SetConfig+0x30c>)
 80036b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036bc:	f003 0303 	and.w	r3, r3, #3
 80036c0:	2b03      	cmp	r3, #3
 80036c2:	d81b      	bhi.n	80036fc <UART_SetConfig+0xd0>
 80036c4:	a201      	add	r2, pc, #4	@ (adr r2, 80036cc <UART_SetConfig+0xa0>)
 80036c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036ca:	bf00      	nop
 80036cc:	080036dd 	.word	0x080036dd
 80036d0:	080036ed 	.word	0x080036ed
 80036d4:	080036e5 	.word	0x080036e5
 80036d8:	080036f5 	.word	0x080036f5
 80036dc:	2301      	movs	r3, #1
 80036de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80036e2:	e080      	b.n	80037e6 <UART_SetConfig+0x1ba>
 80036e4:	2302      	movs	r3, #2
 80036e6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80036ea:	e07c      	b.n	80037e6 <UART_SetConfig+0x1ba>
 80036ec:	2304      	movs	r3, #4
 80036ee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80036f2:	e078      	b.n	80037e6 <UART_SetConfig+0x1ba>
 80036f4:	2308      	movs	r3, #8
 80036f6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80036fa:	e074      	b.n	80037e6 <UART_SetConfig+0x1ba>
 80036fc:	2310      	movs	r3, #16
 80036fe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003702:	e070      	b.n	80037e6 <UART_SetConfig+0x1ba>
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	4a8c      	ldr	r2, [pc, #560]	@ (800393c <UART_SetConfig+0x310>)
 800370a:	4293      	cmp	r3, r2
 800370c:	d138      	bne.n	8003780 <UART_SetConfig+0x154>
 800370e:	4b8a      	ldr	r3, [pc, #552]	@ (8003938 <UART_SetConfig+0x30c>)
 8003710:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003714:	f003 030c 	and.w	r3, r3, #12
 8003718:	2b0c      	cmp	r3, #12
 800371a:	d82d      	bhi.n	8003778 <UART_SetConfig+0x14c>
 800371c:	a201      	add	r2, pc, #4	@ (adr r2, 8003724 <UART_SetConfig+0xf8>)
 800371e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003722:	bf00      	nop
 8003724:	08003759 	.word	0x08003759
 8003728:	08003779 	.word	0x08003779
 800372c:	08003779 	.word	0x08003779
 8003730:	08003779 	.word	0x08003779
 8003734:	08003769 	.word	0x08003769
 8003738:	08003779 	.word	0x08003779
 800373c:	08003779 	.word	0x08003779
 8003740:	08003779 	.word	0x08003779
 8003744:	08003761 	.word	0x08003761
 8003748:	08003779 	.word	0x08003779
 800374c:	08003779 	.word	0x08003779
 8003750:	08003779 	.word	0x08003779
 8003754:	08003771 	.word	0x08003771
 8003758:	2300      	movs	r3, #0
 800375a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800375e:	e042      	b.n	80037e6 <UART_SetConfig+0x1ba>
 8003760:	2302      	movs	r3, #2
 8003762:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003766:	e03e      	b.n	80037e6 <UART_SetConfig+0x1ba>
 8003768:	2304      	movs	r3, #4
 800376a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800376e:	e03a      	b.n	80037e6 <UART_SetConfig+0x1ba>
 8003770:	2308      	movs	r3, #8
 8003772:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003776:	e036      	b.n	80037e6 <UART_SetConfig+0x1ba>
 8003778:	2310      	movs	r3, #16
 800377a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800377e:	e032      	b.n	80037e6 <UART_SetConfig+0x1ba>
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	4a6a      	ldr	r2, [pc, #424]	@ (8003930 <UART_SetConfig+0x304>)
 8003786:	4293      	cmp	r3, r2
 8003788:	d12a      	bne.n	80037e0 <UART_SetConfig+0x1b4>
 800378a:	4b6b      	ldr	r3, [pc, #428]	@ (8003938 <UART_SetConfig+0x30c>)
 800378c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003790:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003794:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003798:	d01a      	beq.n	80037d0 <UART_SetConfig+0x1a4>
 800379a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800379e:	d81b      	bhi.n	80037d8 <UART_SetConfig+0x1ac>
 80037a0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80037a4:	d00c      	beq.n	80037c0 <UART_SetConfig+0x194>
 80037a6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80037aa:	d815      	bhi.n	80037d8 <UART_SetConfig+0x1ac>
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d003      	beq.n	80037b8 <UART_SetConfig+0x18c>
 80037b0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80037b4:	d008      	beq.n	80037c8 <UART_SetConfig+0x19c>
 80037b6:	e00f      	b.n	80037d8 <UART_SetConfig+0x1ac>
 80037b8:	2300      	movs	r3, #0
 80037ba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80037be:	e012      	b.n	80037e6 <UART_SetConfig+0x1ba>
 80037c0:	2302      	movs	r3, #2
 80037c2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80037c6:	e00e      	b.n	80037e6 <UART_SetConfig+0x1ba>
 80037c8:	2304      	movs	r3, #4
 80037ca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80037ce:	e00a      	b.n	80037e6 <UART_SetConfig+0x1ba>
 80037d0:	2308      	movs	r3, #8
 80037d2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80037d6:	e006      	b.n	80037e6 <UART_SetConfig+0x1ba>
 80037d8:	2310      	movs	r3, #16
 80037da:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80037de:	e002      	b.n	80037e6 <UART_SetConfig+0x1ba>
 80037e0:	2310      	movs	r3, #16
 80037e2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	4a51      	ldr	r2, [pc, #324]	@ (8003930 <UART_SetConfig+0x304>)
 80037ec:	4293      	cmp	r3, r2
 80037ee:	d17a      	bne.n	80038e6 <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80037f0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80037f4:	2b08      	cmp	r3, #8
 80037f6:	d824      	bhi.n	8003842 <UART_SetConfig+0x216>
 80037f8:	a201      	add	r2, pc, #4	@ (adr r2, 8003800 <UART_SetConfig+0x1d4>)
 80037fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037fe:	bf00      	nop
 8003800:	08003825 	.word	0x08003825
 8003804:	08003843 	.word	0x08003843
 8003808:	0800382d 	.word	0x0800382d
 800380c:	08003843 	.word	0x08003843
 8003810:	08003833 	.word	0x08003833
 8003814:	08003843 	.word	0x08003843
 8003818:	08003843 	.word	0x08003843
 800381c:	08003843 	.word	0x08003843
 8003820:	0800383b 	.word	0x0800383b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003824:	f7fe fe7c 	bl	8002520 <HAL_RCC_GetPCLK1Freq>
 8003828:	61f8      	str	r0, [r7, #28]
        break;
 800382a:	e010      	b.n	800384e <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800382c:	4b44      	ldr	r3, [pc, #272]	@ (8003940 <UART_SetConfig+0x314>)
 800382e:	61fb      	str	r3, [r7, #28]
        break;
 8003830:	e00d      	b.n	800384e <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003832:	f7fe fddd 	bl	80023f0 <HAL_RCC_GetSysClockFreq>
 8003836:	61f8      	str	r0, [r7, #28]
        break;
 8003838:	e009      	b.n	800384e <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800383a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800383e:	61fb      	str	r3, [r7, #28]
        break;
 8003840:	e005      	b.n	800384e <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 8003842:	2300      	movs	r3, #0
 8003844:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003846:	2301      	movs	r3, #1
 8003848:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800384c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800384e:	69fb      	ldr	r3, [r7, #28]
 8003850:	2b00      	cmp	r3, #0
 8003852:	f000 8107 	beq.w	8003a64 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	685a      	ldr	r2, [r3, #4]
 800385a:	4613      	mov	r3, r2
 800385c:	005b      	lsls	r3, r3, #1
 800385e:	4413      	add	r3, r2
 8003860:	69fa      	ldr	r2, [r7, #28]
 8003862:	429a      	cmp	r2, r3
 8003864:	d305      	bcc.n	8003872 <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	685b      	ldr	r3, [r3, #4]
 800386a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800386c:	69fa      	ldr	r2, [r7, #28]
 800386e:	429a      	cmp	r2, r3
 8003870:	d903      	bls.n	800387a <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 8003872:	2301      	movs	r3, #1
 8003874:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003878:	e0f4      	b.n	8003a64 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800387a:	69fb      	ldr	r3, [r7, #28]
 800387c:	2200      	movs	r2, #0
 800387e:	461c      	mov	r4, r3
 8003880:	4615      	mov	r5, r2
 8003882:	f04f 0200 	mov.w	r2, #0
 8003886:	f04f 0300 	mov.w	r3, #0
 800388a:	022b      	lsls	r3, r5, #8
 800388c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003890:	0222      	lsls	r2, r4, #8
 8003892:	68f9      	ldr	r1, [r7, #12]
 8003894:	6849      	ldr	r1, [r1, #4]
 8003896:	0849      	lsrs	r1, r1, #1
 8003898:	2000      	movs	r0, #0
 800389a:	4688      	mov	r8, r1
 800389c:	4681      	mov	r9, r0
 800389e:	eb12 0a08 	adds.w	sl, r2, r8
 80038a2:	eb43 0b09 	adc.w	fp, r3, r9
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	685b      	ldr	r3, [r3, #4]
 80038aa:	2200      	movs	r2, #0
 80038ac:	603b      	str	r3, [r7, #0]
 80038ae:	607a      	str	r2, [r7, #4]
 80038b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80038b4:	4650      	mov	r0, sl
 80038b6:	4659      	mov	r1, fp
 80038b8:	f7fc fce2 	bl	8000280 <__aeabi_uldivmod>
 80038bc:	4602      	mov	r2, r0
 80038be:	460b      	mov	r3, r1
 80038c0:	4613      	mov	r3, r2
 80038c2:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80038c4:	69bb      	ldr	r3, [r7, #24]
 80038c6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80038ca:	d308      	bcc.n	80038de <UART_SetConfig+0x2b2>
 80038cc:	69bb      	ldr	r3, [r7, #24]
 80038ce:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80038d2:	d204      	bcs.n	80038de <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	69ba      	ldr	r2, [r7, #24]
 80038da:	60da      	str	r2, [r3, #12]
 80038dc:	e0c2      	b.n	8003a64 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 80038de:	2301      	movs	r3, #1
 80038e0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80038e4:	e0be      	b.n	8003a64 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	69db      	ldr	r3, [r3, #28]
 80038ea:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80038ee:	d16a      	bne.n	80039c6 <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 80038f0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80038f4:	2b08      	cmp	r3, #8
 80038f6:	d834      	bhi.n	8003962 <UART_SetConfig+0x336>
 80038f8:	a201      	add	r2, pc, #4	@ (adr r2, 8003900 <UART_SetConfig+0x2d4>)
 80038fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038fe:	bf00      	nop
 8003900:	08003925 	.word	0x08003925
 8003904:	08003945 	.word	0x08003945
 8003908:	0800394d 	.word	0x0800394d
 800390c:	08003963 	.word	0x08003963
 8003910:	08003953 	.word	0x08003953
 8003914:	08003963 	.word	0x08003963
 8003918:	08003963 	.word	0x08003963
 800391c:	08003963 	.word	0x08003963
 8003920:	0800395b 	.word	0x0800395b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003924:	f7fe fdfc 	bl	8002520 <HAL_RCC_GetPCLK1Freq>
 8003928:	61f8      	str	r0, [r7, #28]
        break;
 800392a:	e020      	b.n	800396e <UART_SetConfig+0x342>
 800392c:	efff69f3 	.word	0xefff69f3
 8003930:	40008000 	.word	0x40008000
 8003934:	40013800 	.word	0x40013800
 8003938:	40021000 	.word	0x40021000
 800393c:	40004400 	.word	0x40004400
 8003940:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003944:	f7fe fe02 	bl	800254c <HAL_RCC_GetPCLK2Freq>
 8003948:	61f8      	str	r0, [r7, #28]
        break;
 800394a:	e010      	b.n	800396e <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800394c:	4b4c      	ldr	r3, [pc, #304]	@ (8003a80 <UART_SetConfig+0x454>)
 800394e:	61fb      	str	r3, [r7, #28]
        break;
 8003950:	e00d      	b.n	800396e <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003952:	f7fe fd4d 	bl	80023f0 <HAL_RCC_GetSysClockFreq>
 8003956:	61f8      	str	r0, [r7, #28]
        break;
 8003958:	e009      	b.n	800396e <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800395a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800395e:	61fb      	str	r3, [r7, #28]
        break;
 8003960:	e005      	b.n	800396e <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 8003962:	2300      	movs	r3, #0
 8003964:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003966:	2301      	movs	r3, #1
 8003968:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800396c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800396e:	69fb      	ldr	r3, [r7, #28]
 8003970:	2b00      	cmp	r3, #0
 8003972:	d077      	beq.n	8003a64 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003974:	69fb      	ldr	r3, [r7, #28]
 8003976:	005a      	lsls	r2, r3, #1
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	685b      	ldr	r3, [r3, #4]
 800397c:	085b      	lsrs	r3, r3, #1
 800397e:	441a      	add	r2, r3
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	685b      	ldr	r3, [r3, #4]
 8003984:	fbb2 f3f3 	udiv	r3, r2, r3
 8003988:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800398a:	69bb      	ldr	r3, [r7, #24]
 800398c:	2b0f      	cmp	r3, #15
 800398e:	d916      	bls.n	80039be <UART_SetConfig+0x392>
 8003990:	69bb      	ldr	r3, [r7, #24]
 8003992:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003996:	d212      	bcs.n	80039be <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003998:	69bb      	ldr	r3, [r7, #24]
 800399a:	b29b      	uxth	r3, r3
 800399c:	f023 030f 	bic.w	r3, r3, #15
 80039a0:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80039a2:	69bb      	ldr	r3, [r7, #24]
 80039a4:	085b      	lsrs	r3, r3, #1
 80039a6:	b29b      	uxth	r3, r3
 80039a8:	f003 0307 	and.w	r3, r3, #7
 80039ac:	b29a      	uxth	r2, r3
 80039ae:	8afb      	ldrh	r3, [r7, #22]
 80039b0:	4313      	orrs	r3, r2
 80039b2:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	8afa      	ldrh	r2, [r7, #22]
 80039ba:	60da      	str	r2, [r3, #12]
 80039bc:	e052      	b.n	8003a64 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 80039be:	2301      	movs	r3, #1
 80039c0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80039c4:	e04e      	b.n	8003a64 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 80039c6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80039ca:	2b08      	cmp	r3, #8
 80039cc:	d827      	bhi.n	8003a1e <UART_SetConfig+0x3f2>
 80039ce:	a201      	add	r2, pc, #4	@ (adr r2, 80039d4 <UART_SetConfig+0x3a8>)
 80039d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039d4:	080039f9 	.word	0x080039f9
 80039d8:	08003a01 	.word	0x08003a01
 80039dc:	08003a09 	.word	0x08003a09
 80039e0:	08003a1f 	.word	0x08003a1f
 80039e4:	08003a0f 	.word	0x08003a0f
 80039e8:	08003a1f 	.word	0x08003a1f
 80039ec:	08003a1f 	.word	0x08003a1f
 80039f0:	08003a1f 	.word	0x08003a1f
 80039f4:	08003a17 	.word	0x08003a17
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80039f8:	f7fe fd92 	bl	8002520 <HAL_RCC_GetPCLK1Freq>
 80039fc:	61f8      	str	r0, [r7, #28]
        break;
 80039fe:	e014      	b.n	8003a2a <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003a00:	f7fe fda4 	bl	800254c <HAL_RCC_GetPCLK2Freq>
 8003a04:	61f8      	str	r0, [r7, #28]
        break;
 8003a06:	e010      	b.n	8003a2a <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003a08:	4b1d      	ldr	r3, [pc, #116]	@ (8003a80 <UART_SetConfig+0x454>)
 8003a0a:	61fb      	str	r3, [r7, #28]
        break;
 8003a0c:	e00d      	b.n	8003a2a <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003a0e:	f7fe fcef 	bl	80023f0 <HAL_RCC_GetSysClockFreq>
 8003a12:	61f8      	str	r0, [r7, #28]
        break;
 8003a14:	e009      	b.n	8003a2a <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003a16:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003a1a:	61fb      	str	r3, [r7, #28]
        break;
 8003a1c:	e005      	b.n	8003a2a <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 8003a1e:	2300      	movs	r3, #0
 8003a20:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003a22:	2301      	movs	r3, #1
 8003a24:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003a28:	bf00      	nop
    }

    if (pclk != 0U)
 8003a2a:	69fb      	ldr	r3, [r7, #28]
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d019      	beq.n	8003a64 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	685b      	ldr	r3, [r3, #4]
 8003a34:	085a      	lsrs	r2, r3, #1
 8003a36:	69fb      	ldr	r3, [r7, #28]
 8003a38:	441a      	add	r2, r3
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	685b      	ldr	r3, [r3, #4]
 8003a3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a42:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003a44:	69bb      	ldr	r3, [r7, #24]
 8003a46:	2b0f      	cmp	r3, #15
 8003a48:	d909      	bls.n	8003a5e <UART_SetConfig+0x432>
 8003a4a:	69bb      	ldr	r3, [r7, #24]
 8003a4c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003a50:	d205      	bcs.n	8003a5e <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003a52:	69bb      	ldr	r3, [r7, #24]
 8003a54:	b29a      	uxth	r2, r3
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	60da      	str	r2, [r3, #12]
 8003a5c:	e002      	b.n	8003a64 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8003a5e:	2301      	movs	r3, #1
 8003a60:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	2200      	movs	r2, #0
 8003a68:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003a70:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8003a74:	4618      	mov	r0, r3
 8003a76:	3728      	adds	r7, #40	@ 0x28
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003a7e:	bf00      	nop
 8003a80:	00f42400 	.word	0x00f42400

08003a84 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003a84:	b480      	push	{r7}
 8003a86:	b083      	sub	sp, #12
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a90:	f003 0308 	and.w	r3, r3, #8
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d00a      	beq.n	8003aae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	685b      	ldr	r3, [r3, #4]
 8003a9e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	430a      	orrs	r2, r1
 8003aac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ab2:	f003 0301 	and.w	r3, r3, #1
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d00a      	beq.n	8003ad0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	685b      	ldr	r3, [r3, #4]
 8003ac0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	430a      	orrs	r2, r1
 8003ace:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ad4:	f003 0302 	and.w	r3, r3, #2
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d00a      	beq.n	8003af2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	685b      	ldr	r3, [r3, #4]
 8003ae2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	430a      	orrs	r2, r1
 8003af0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003af6:	f003 0304 	and.w	r3, r3, #4
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d00a      	beq.n	8003b14 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	685b      	ldr	r3, [r3, #4]
 8003b04:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	430a      	orrs	r2, r1
 8003b12:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b18:	f003 0310 	and.w	r3, r3, #16
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d00a      	beq.n	8003b36 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	689b      	ldr	r3, [r3, #8]
 8003b26:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	430a      	orrs	r2, r1
 8003b34:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b3a:	f003 0320 	and.w	r3, r3, #32
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d00a      	beq.n	8003b58 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	689b      	ldr	r3, [r3, #8]
 8003b48:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	430a      	orrs	r2, r1
 8003b56:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d01a      	beq.n	8003b9a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	685b      	ldr	r3, [r3, #4]
 8003b6a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	430a      	orrs	r2, r1
 8003b78:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b7e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003b82:	d10a      	bne.n	8003b9a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	685b      	ldr	r3, [r3, #4]
 8003b8a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	430a      	orrs	r2, r1
 8003b98:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b9e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d00a      	beq.n	8003bbc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	685b      	ldr	r3, [r3, #4]
 8003bac:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	430a      	orrs	r2, r1
 8003bba:	605a      	str	r2, [r3, #4]
  }
}
 8003bbc:	bf00      	nop
 8003bbe:	370c      	adds	r7, #12
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc6:	4770      	bx	lr

08003bc8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b098      	sub	sp, #96	@ 0x60
 8003bcc:	af02      	add	r7, sp, #8
 8003bce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003bd8:	f7fd fbea 	bl	80013b0 <HAL_GetTick>
 8003bdc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f003 0308 	and.w	r3, r3, #8
 8003be8:	2b08      	cmp	r3, #8
 8003bea:	d12e      	bne.n	8003c4a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003bec:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003bf0:	9300      	str	r3, [sp, #0]
 8003bf2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003bfa:	6878      	ldr	r0, [r7, #4]
 8003bfc:	f000 f88c 	bl	8003d18 <UART_WaitOnFlagUntilTimeout>
 8003c00:	4603      	mov	r3, r0
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d021      	beq.n	8003c4a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c0e:	e853 3f00 	ldrex	r3, [r3]
 8003c12:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003c14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c16:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003c1a:	653b      	str	r3, [r7, #80]	@ 0x50
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	461a      	mov	r2, r3
 8003c22:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003c24:	647b      	str	r3, [r7, #68]	@ 0x44
 8003c26:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c28:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003c2a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003c2c:	e841 2300 	strex	r3, r2, [r1]
 8003c30:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003c32:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d1e6      	bne.n	8003c06 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2220      	movs	r2, #32
 8003c3c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	2200      	movs	r2, #0
 8003c42:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003c46:	2303      	movs	r3, #3
 8003c48:	e062      	b.n	8003d10 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f003 0304 	and.w	r3, r3, #4
 8003c54:	2b04      	cmp	r3, #4
 8003c56:	d149      	bne.n	8003cec <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003c58:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003c5c:	9300      	str	r3, [sp, #0]
 8003c5e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c60:	2200      	movs	r2, #0
 8003c62:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003c66:	6878      	ldr	r0, [r7, #4]
 8003c68:	f000 f856 	bl	8003d18 <UART_WaitOnFlagUntilTimeout>
 8003c6c:	4603      	mov	r3, r0
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d03c      	beq.n	8003cec <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c7a:	e853 3f00 	ldrex	r3, [r3]
 8003c7e:	623b      	str	r3, [r7, #32]
   return(result);
 8003c80:	6a3b      	ldr	r3, [r7, #32]
 8003c82:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003c86:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	461a      	mov	r2, r3
 8003c8e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003c90:	633b      	str	r3, [r7, #48]	@ 0x30
 8003c92:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c94:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003c96:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003c98:	e841 2300 	strex	r3, r2, [r1]
 8003c9c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003c9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d1e6      	bne.n	8003c72 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	3308      	adds	r3, #8
 8003caa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cac:	693b      	ldr	r3, [r7, #16]
 8003cae:	e853 3f00 	ldrex	r3, [r3]
 8003cb2:	60fb      	str	r3, [r7, #12]
   return(result);
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	f023 0301 	bic.w	r3, r3, #1
 8003cba:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	3308      	adds	r3, #8
 8003cc2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003cc4:	61fa      	str	r2, [r7, #28]
 8003cc6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cc8:	69b9      	ldr	r1, [r7, #24]
 8003cca:	69fa      	ldr	r2, [r7, #28]
 8003ccc:	e841 2300 	strex	r3, r2, [r1]
 8003cd0:	617b      	str	r3, [r7, #20]
   return(result);
 8003cd2:	697b      	ldr	r3, [r7, #20]
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d1e5      	bne.n	8003ca4 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2220      	movs	r2, #32
 8003cdc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003ce8:	2303      	movs	r3, #3
 8003cea:	e011      	b.n	8003d10 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2220      	movs	r2, #32
 8003cf0:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	2220      	movs	r2, #32
 8003cf6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2200      	movs	r2, #0
 8003d04:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	2200      	movs	r2, #0
 8003d0a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8003d0e:	2300      	movs	r3, #0
}
 8003d10:	4618      	mov	r0, r3
 8003d12:	3758      	adds	r7, #88	@ 0x58
 8003d14:	46bd      	mov	sp, r7
 8003d16:	bd80      	pop	{r7, pc}

08003d18 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b084      	sub	sp, #16
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	60f8      	str	r0, [r7, #12]
 8003d20:	60b9      	str	r1, [r7, #8]
 8003d22:	603b      	str	r3, [r7, #0]
 8003d24:	4613      	mov	r3, r2
 8003d26:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d28:	e049      	b.n	8003dbe <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d2a:	69bb      	ldr	r3, [r7, #24]
 8003d2c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003d30:	d045      	beq.n	8003dbe <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d32:	f7fd fb3d 	bl	80013b0 <HAL_GetTick>
 8003d36:	4602      	mov	r2, r0
 8003d38:	683b      	ldr	r3, [r7, #0]
 8003d3a:	1ad3      	subs	r3, r2, r3
 8003d3c:	69ba      	ldr	r2, [r7, #24]
 8003d3e:	429a      	cmp	r2, r3
 8003d40:	d302      	bcc.n	8003d48 <UART_WaitOnFlagUntilTimeout+0x30>
 8003d42:	69bb      	ldr	r3, [r7, #24]
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d101      	bne.n	8003d4c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003d48:	2303      	movs	r3, #3
 8003d4a:	e048      	b.n	8003dde <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f003 0304 	and.w	r3, r3, #4
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d031      	beq.n	8003dbe <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	69db      	ldr	r3, [r3, #28]
 8003d60:	f003 0308 	and.w	r3, r3, #8
 8003d64:	2b08      	cmp	r3, #8
 8003d66:	d110      	bne.n	8003d8a <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	2208      	movs	r2, #8
 8003d6e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003d70:	68f8      	ldr	r0, [r7, #12]
 8003d72:	f000 f838 	bl	8003de6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	2208      	movs	r2, #8
 8003d7a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	2200      	movs	r2, #0
 8003d82:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8003d86:	2301      	movs	r3, #1
 8003d88:	e029      	b.n	8003dde <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	69db      	ldr	r3, [r3, #28]
 8003d90:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003d94:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003d98:	d111      	bne.n	8003dbe <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003da2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003da4:	68f8      	ldr	r0, [r7, #12]
 8003da6:	f000 f81e 	bl	8003de6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	2220      	movs	r2, #32
 8003dae:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	2200      	movs	r2, #0
 8003db6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8003dba:	2303      	movs	r3, #3
 8003dbc:	e00f      	b.n	8003dde <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	69da      	ldr	r2, [r3, #28]
 8003dc4:	68bb      	ldr	r3, [r7, #8]
 8003dc6:	4013      	ands	r3, r2
 8003dc8:	68ba      	ldr	r2, [r7, #8]
 8003dca:	429a      	cmp	r2, r3
 8003dcc:	bf0c      	ite	eq
 8003dce:	2301      	moveq	r3, #1
 8003dd0:	2300      	movne	r3, #0
 8003dd2:	b2db      	uxtb	r3, r3
 8003dd4:	461a      	mov	r2, r3
 8003dd6:	79fb      	ldrb	r3, [r7, #7]
 8003dd8:	429a      	cmp	r2, r3
 8003dda:	d0a6      	beq.n	8003d2a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003ddc:	2300      	movs	r3, #0
}
 8003dde:	4618      	mov	r0, r3
 8003de0:	3710      	adds	r7, #16
 8003de2:	46bd      	mov	sp, r7
 8003de4:	bd80      	pop	{r7, pc}

08003de6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003de6:	b480      	push	{r7}
 8003de8:	b095      	sub	sp, #84	@ 0x54
 8003dea:	af00      	add	r7, sp, #0
 8003dec:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003df4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003df6:	e853 3f00 	ldrex	r3, [r3]
 8003dfa:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003dfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003dfe:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003e02:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	461a      	mov	r2, r3
 8003e0a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003e0c:	643b      	str	r3, [r7, #64]	@ 0x40
 8003e0e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e10:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003e12:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003e14:	e841 2300 	strex	r3, r2, [r1]
 8003e18:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003e1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d1e6      	bne.n	8003dee <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	3308      	adds	r3, #8
 8003e26:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e28:	6a3b      	ldr	r3, [r7, #32]
 8003e2a:	e853 3f00 	ldrex	r3, [r3]
 8003e2e:	61fb      	str	r3, [r7, #28]
   return(result);
 8003e30:	69fb      	ldr	r3, [r7, #28]
 8003e32:	f023 0301 	bic.w	r3, r3, #1
 8003e36:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	3308      	adds	r3, #8
 8003e3e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003e40:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003e42:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e44:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003e46:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003e48:	e841 2300 	strex	r3, r2, [r1]
 8003e4c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003e4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d1e5      	bne.n	8003e20 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e58:	2b01      	cmp	r3, #1
 8003e5a:	d118      	bne.n	8003e8e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	e853 3f00 	ldrex	r3, [r3]
 8003e68:	60bb      	str	r3, [r7, #8]
   return(result);
 8003e6a:	68bb      	ldr	r3, [r7, #8]
 8003e6c:	f023 0310 	bic.w	r3, r3, #16
 8003e70:	647b      	str	r3, [r7, #68]	@ 0x44
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	461a      	mov	r2, r3
 8003e78:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003e7a:	61bb      	str	r3, [r7, #24]
 8003e7c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e7e:	6979      	ldr	r1, [r7, #20]
 8003e80:	69ba      	ldr	r2, [r7, #24]
 8003e82:	e841 2300 	strex	r3, r2, [r1]
 8003e86:	613b      	str	r3, [r7, #16]
   return(result);
 8003e88:	693b      	ldr	r3, [r7, #16]
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d1e6      	bne.n	8003e5c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	2220      	movs	r2, #32
 8003e92:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	2200      	movs	r2, #0
 8003e9a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003ea2:	bf00      	nop
 8003ea4:	3754      	adds	r7, #84	@ 0x54
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eac:	4770      	bx	lr
	...

08003eb0 <siprintf>:
 8003eb0:	b40e      	push	{r1, r2, r3}
 8003eb2:	b500      	push	{lr}
 8003eb4:	b09c      	sub	sp, #112	@ 0x70
 8003eb6:	ab1d      	add	r3, sp, #116	@ 0x74
 8003eb8:	9002      	str	r0, [sp, #8]
 8003eba:	9006      	str	r0, [sp, #24]
 8003ebc:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8003ec0:	4809      	ldr	r0, [pc, #36]	@ (8003ee8 <siprintf+0x38>)
 8003ec2:	9107      	str	r1, [sp, #28]
 8003ec4:	9104      	str	r1, [sp, #16]
 8003ec6:	4909      	ldr	r1, [pc, #36]	@ (8003eec <siprintf+0x3c>)
 8003ec8:	f853 2b04 	ldr.w	r2, [r3], #4
 8003ecc:	9105      	str	r1, [sp, #20]
 8003ece:	6800      	ldr	r0, [r0, #0]
 8003ed0:	9301      	str	r3, [sp, #4]
 8003ed2:	a902      	add	r1, sp, #8
 8003ed4:	f000 f89c 	bl	8004010 <_svfiprintf_r>
 8003ed8:	9b02      	ldr	r3, [sp, #8]
 8003eda:	2200      	movs	r2, #0
 8003edc:	701a      	strb	r2, [r3, #0]
 8003ede:	b01c      	add	sp, #112	@ 0x70
 8003ee0:	f85d eb04 	ldr.w	lr, [sp], #4
 8003ee4:	b003      	add	sp, #12
 8003ee6:	4770      	bx	lr
 8003ee8:	20000030 	.word	0x20000030
 8003eec:	ffff0208 	.word	0xffff0208

08003ef0 <memset>:
 8003ef0:	4402      	add	r2, r0
 8003ef2:	4603      	mov	r3, r0
 8003ef4:	4293      	cmp	r3, r2
 8003ef6:	d100      	bne.n	8003efa <memset+0xa>
 8003ef8:	4770      	bx	lr
 8003efa:	f803 1b01 	strb.w	r1, [r3], #1
 8003efe:	e7f9      	b.n	8003ef4 <memset+0x4>

08003f00 <__errno>:
 8003f00:	4b01      	ldr	r3, [pc, #4]	@ (8003f08 <__errno+0x8>)
 8003f02:	6818      	ldr	r0, [r3, #0]
 8003f04:	4770      	bx	lr
 8003f06:	bf00      	nop
 8003f08:	20000030 	.word	0x20000030

08003f0c <__libc_init_array>:
 8003f0c:	b570      	push	{r4, r5, r6, lr}
 8003f0e:	4d0d      	ldr	r5, [pc, #52]	@ (8003f44 <__libc_init_array+0x38>)
 8003f10:	4c0d      	ldr	r4, [pc, #52]	@ (8003f48 <__libc_init_array+0x3c>)
 8003f12:	1b64      	subs	r4, r4, r5
 8003f14:	10a4      	asrs	r4, r4, #2
 8003f16:	2600      	movs	r6, #0
 8003f18:	42a6      	cmp	r6, r4
 8003f1a:	d109      	bne.n	8003f30 <__libc_init_array+0x24>
 8003f1c:	4d0b      	ldr	r5, [pc, #44]	@ (8003f4c <__libc_init_array+0x40>)
 8003f1e:	4c0c      	ldr	r4, [pc, #48]	@ (8003f50 <__libc_init_array+0x44>)
 8003f20:	f000 fc66 	bl	80047f0 <_init>
 8003f24:	1b64      	subs	r4, r4, r5
 8003f26:	10a4      	asrs	r4, r4, #2
 8003f28:	2600      	movs	r6, #0
 8003f2a:	42a6      	cmp	r6, r4
 8003f2c:	d105      	bne.n	8003f3a <__libc_init_array+0x2e>
 8003f2e:	bd70      	pop	{r4, r5, r6, pc}
 8003f30:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f34:	4798      	blx	r3
 8003f36:	3601      	adds	r6, #1
 8003f38:	e7ee      	b.n	8003f18 <__libc_init_array+0xc>
 8003f3a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f3e:	4798      	blx	r3
 8003f40:	3601      	adds	r6, #1
 8003f42:	e7f2      	b.n	8003f2a <__libc_init_array+0x1e>
 8003f44:	080048b0 	.word	0x080048b0
 8003f48:	080048b0 	.word	0x080048b0
 8003f4c:	080048b0 	.word	0x080048b0
 8003f50:	080048b4 	.word	0x080048b4

08003f54 <__retarget_lock_acquire_recursive>:
 8003f54:	4770      	bx	lr

08003f56 <__retarget_lock_release_recursive>:
 8003f56:	4770      	bx	lr

08003f58 <__ssputs_r>:
 8003f58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003f5c:	688e      	ldr	r6, [r1, #8]
 8003f5e:	461f      	mov	r7, r3
 8003f60:	42be      	cmp	r6, r7
 8003f62:	680b      	ldr	r3, [r1, #0]
 8003f64:	4682      	mov	sl, r0
 8003f66:	460c      	mov	r4, r1
 8003f68:	4690      	mov	r8, r2
 8003f6a:	d82d      	bhi.n	8003fc8 <__ssputs_r+0x70>
 8003f6c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003f70:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8003f74:	d026      	beq.n	8003fc4 <__ssputs_r+0x6c>
 8003f76:	6965      	ldr	r5, [r4, #20]
 8003f78:	6909      	ldr	r1, [r1, #16]
 8003f7a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003f7e:	eba3 0901 	sub.w	r9, r3, r1
 8003f82:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003f86:	1c7b      	adds	r3, r7, #1
 8003f88:	444b      	add	r3, r9
 8003f8a:	106d      	asrs	r5, r5, #1
 8003f8c:	429d      	cmp	r5, r3
 8003f8e:	bf38      	it	cc
 8003f90:	461d      	movcc	r5, r3
 8003f92:	0553      	lsls	r3, r2, #21
 8003f94:	d527      	bpl.n	8003fe6 <__ssputs_r+0x8e>
 8003f96:	4629      	mov	r1, r5
 8003f98:	f000 f958 	bl	800424c <_malloc_r>
 8003f9c:	4606      	mov	r6, r0
 8003f9e:	b360      	cbz	r0, 8003ffa <__ssputs_r+0xa2>
 8003fa0:	6921      	ldr	r1, [r4, #16]
 8003fa2:	464a      	mov	r2, r9
 8003fa4:	f000 fbc4 	bl	8004730 <memcpy>
 8003fa8:	89a3      	ldrh	r3, [r4, #12]
 8003faa:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8003fae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003fb2:	81a3      	strh	r3, [r4, #12]
 8003fb4:	6126      	str	r6, [r4, #16]
 8003fb6:	6165      	str	r5, [r4, #20]
 8003fb8:	444e      	add	r6, r9
 8003fba:	eba5 0509 	sub.w	r5, r5, r9
 8003fbe:	6026      	str	r6, [r4, #0]
 8003fc0:	60a5      	str	r5, [r4, #8]
 8003fc2:	463e      	mov	r6, r7
 8003fc4:	42be      	cmp	r6, r7
 8003fc6:	d900      	bls.n	8003fca <__ssputs_r+0x72>
 8003fc8:	463e      	mov	r6, r7
 8003fca:	6820      	ldr	r0, [r4, #0]
 8003fcc:	4632      	mov	r2, r6
 8003fce:	4641      	mov	r1, r8
 8003fd0:	f000 fb84 	bl	80046dc <memmove>
 8003fd4:	68a3      	ldr	r3, [r4, #8]
 8003fd6:	1b9b      	subs	r3, r3, r6
 8003fd8:	60a3      	str	r3, [r4, #8]
 8003fda:	6823      	ldr	r3, [r4, #0]
 8003fdc:	4433      	add	r3, r6
 8003fde:	6023      	str	r3, [r4, #0]
 8003fe0:	2000      	movs	r0, #0
 8003fe2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003fe6:	462a      	mov	r2, r5
 8003fe8:	f000 fb4a 	bl	8004680 <_realloc_r>
 8003fec:	4606      	mov	r6, r0
 8003fee:	2800      	cmp	r0, #0
 8003ff0:	d1e0      	bne.n	8003fb4 <__ssputs_r+0x5c>
 8003ff2:	6921      	ldr	r1, [r4, #16]
 8003ff4:	4650      	mov	r0, sl
 8003ff6:	f000 fba9 	bl	800474c <_free_r>
 8003ffa:	230c      	movs	r3, #12
 8003ffc:	f8ca 3000 	str.w	r3, [sl]
 8004000:	89a3      	ldrh	r3, [r4, #12]
 8004002:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004006:	81a3      	strh	r3, [r4, #12]
 8004008:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800400c:	e7e9      	b.n	8003fe2 <__ssputs_r+0x8a>
	...

08004010 <_svfiprintf_r>:
 8004010:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004014:	4698      	mov	r8, r3
 8004016:	898b      	ldrh	r3, [r1, #12]
 8004018:	061b      	lsls	r3, r3, #24
 800401a:	b09d      	sub	sp, #116	@ 0x74
 800401c:	4607      	mov	r7, r0
 800401e:	460d      	mov	r5, r1
 8004020:	4614      	mov	r4, r2
 8004022:	d510      	bpl.n	8004046 <_svfiprintf_r+0x36>
 8004024:	690b      	ldr	r3, [r1, #16]
 8004026:	b973      	cbnz	r3, 8004046 <_svfiprintf_r+0x36>
 8004028:	2140      	movs	r1, #64	@ 0x40
 800402a:	f000 f90f 	bl	800424c <_malloc_r>
 800402e:	6028      	str	r0, [r5, #0]
 8004030:	6128      	str	r0, [r5, #16]
 8004032:	b930      	cbnz	r0, 8004042 <_svfiprintf_r+0x32>
 8004034:	230c      	movs	r3, #12
 8004036:	603b      	str	r3, [r7, #0]
 8004038:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800403c:	b01d      	add	sp, #116	@ 0x74
 800403e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004042:	2340      	movs	r3, #64	@ 0x40
 8004044:	616b      	str	r3, [r5, #20]
 8004046:	2300      	movs	r3, #0
 8004048:	9309      	str	r3, [sp, #36]	@ 0x24
 800404a:	2320      	movs	r3, #32
 800404c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004050:	f8cd 800c 	str.w	r8, [sp, #12]
 8004054:	2330      	movs	r3, #48	@ 0x30
 8004056:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80041f4 <_svfiprintf_r+0x1e4>
 800405a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800405e:	f04f 0901 	mov.w	r9, #1
 8004062:	4623      	mov	r3, r4
 8004064:	469a      	mov	sl, r3
 8004066:	f813 2b01 	ldrb.w	r2, [r3], #1
 800406a:	b10a      	cbz	r2, 8004070 <_svfiprintf_r+0x60>
 800406c:	2a25      	cmp	r2, #37	@ 0x25
 800406e:	d1f9      	bne.n	8004064 <_svfiprintf_r+0x54>
 8004070:	ebba 0b04 	subs.w	fp, sl, r4
 8004074:	d00b      	beq.n	800408e <_svfiprintf_r+0x7e>
 8004076:	465b      	mov	r3, fp
 8004078:	4622      	mov	r2, r4
 800407a:	4629      	mov	r1, r5
 800407c:	4638      	mov	r0, r7
 800407e:	f7ff ff6b 	bl	8003f58 <__ssputs_r>
 8004082:	3001      	adds	r0, #1
 8004084:	f000 80a7 	beq.w	80041d6 <_svfiprintf_r+0x1c6>
 8004088:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800408a:	445a      	add	r2, fp
 800408c:	9209      	str	r2, [sp, #36]	@ 0x24
 800408e:	f89a 3000 	ldrb.w	r3, [sl]
 8004092:	2b00      	cmp	r3, #0
 8004094:	f000 809f 	beq.w	80041d6 <_svfiprintf_r+0x1c6>
 8004098:	2300      	movs	r3, #0
 800409a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800409e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80040a2:	f10a 0a01 	add.w	sl, sl, #1
 80040a6:	9304      	str	r3, [sp, #16]
 80040a8:	9307      	str	r3, [sp, #28]
 80040aa:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80040ae:	931a      	str	r3, [sp, #104]	@ 0x68
 80040b0:	4654      	mov	r4, sl
 80040b2:	2205      	movs	r2, #5
 80040b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80040b8:	484e      	ldr	r0, [pc, #312]	@ (80041f4 <_svfiprintf_r+0x1e4>)
 80040ba:	f7fc f891 	bl	80001e0 <memchr>
 80040be:	9a04      	ldr	r2, [sp, #16]
 80040c0:	b9d8      	cbnz	r0, 80040fa <_svfiprintf_r+0xea>
 80040c2:	06d0      	lsls	r0, r2, #27
 80040c4:	bf44      	itt	mi
 80040c6:	2320      	movmi	r3, #32
 80040c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80040cc:	0711      	lsls	r1, r2, #28
 80040ce:	bf44      	itt	mi
 80040d0:	232b      	movmi	r3, #43	@ 0x2b
 80040d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80040d6:	f89a 3000 	ldrb.w	r3, [sl]
 80040da:	2b2a      	cmp	r3, #42	@ 0x2a
 80040dc:	d015      	beq.n	800410a <_svfiprintf_r+0xfa>
 80040de:	9a07      	ldr	r2, [sp, #28]
 80040e0:	4654      	mov	r4, sl
 80040e2:	2000      	movs	r0, #0
 80040e4:	f04f 0c0a 	mov.w	ip, #10
 80040e8:	4621      	mov	r1, r4
 80040ea:	f811 3b01 	ldrb.w	r3, [r1], #1
 80040ee:	3b30      	subs	r3, #48	@ 0x30
 80040f0:	2b09      	cmp	r3, #9
 80040f2:	d94b      	bls.n	800418c <_svfiprintf_r+0x17c>
 80040f4:	b1b0      	cbz	r0, 8004124 <_svfiprintf_r+0x114>
 80040f6:	9207      	str	r2, [sp, #28]
 80040f8:	e014      	b.n	8004124 <_svfiprintf_r+0x114>
 80040fa:	eba0 0308 	sub.w	r3, r0, r8
 80040fe:	fa09 f303 	lsl.w	r3, r9, r3
 8004102:	4313      	orrs	r3, r2
 8004104:	9304      	str	r3, [sp, #16]
 8004106:	46a2      	mov	sl, r4
 8004108:	e7d2      	b.n	80040b0 <_svfiprintf_r+0xa0>
 800410a:	9b03      	ldr	r3, [sp, #12]
 800410c:	1d19      	adds	r1, r3, #4
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	9103      	str	r1, [sp, #12]
 8004112:	2b00      	cmp	r3, #0
 8004114:	bfbb      	ittet	lt
 8004116:	425b      	neglt	r3, r3
 8004118:	f042 0202 	orrlt.w	r2, r2, #2
 800411c:	9307      	strge	r3, [sp, #28]
 800411e:	9307      	strlt	r3, [sp, #28]
 8004120:	bfb8      	it	lt
 8004122:	9204      	strlt	r2, [sp, #16]
 8004124:	7823      	ldrb	r3, [r4, #0]
 8004126:	2b2e      	cmp	r3, #46	@ 0x2e
 8004128:	d10a      	bne.n	8004140 <_svfiprintf_r+0x130>
 800412a:	7863      	ldrb	r3, [r4, #1]
 800412c:	2b2a      	cmp	r3, #42	@ 0x2a
 800412e:	d132      	bne.n	8004196 <_svfiprintf_r+0x186>
 8004130:	9b03      	ldr	r3, [sp, #12]
 8004132:	1d1a      	adds	r2, r3, #4
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	9203      	str	r2, [sp, #12]
 8004138:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800413c:	3402      	adds	r4, #2
 800413e:	9305      	str	r3, [sp, #20]
 8004140:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8004204 <_svfiprintf_r+0x1f4>
 8004144:	7821      	ldrb	r1, [r4, #0]
 8004146:	2203      	movs	r2, #3
 8004148:	4650      	mov	r0, sl
 800414a:	f7fc f849 	bl	80001e0 <memchr>
 800414e:	b138      	cbz	r0, 8004160 <_svfiprintf_r+0x150>
 8004150:	9b04      	ldr	r3, [sp, #16]
 8004152:	eba0 000a 	sub.w	r0, r0, sl
 8004156:	2240      	movs	r2, #64	@ 0x40
 8004158:	4082      	lsls	r2, r0
 800415a:	4313      	orrs	r3, r2
 800415c:	3401      	adds	r4, #1
 800415e:	9304      	str	r3, [sp, #16]
 8004160:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004164:	4824      	ldr	r0, [pc, #144]	@ (80041f8 <_svfiprintf_r+0x1e8>)
 8004166:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800416a:	2206      	movs	r2, #6
 800416c:	f7fc f838 	bl	80001e0 <memchr>
 8004170:	2800      	cmp	r0, #0
 8004172:	d036      	beq.n	80041e2 <_svfiprintf_r+0x1d2>
 8004174:	4b21      	ldr	r3, [pc, #132]	@ (80041fc <_svfiprintf_r+0x1ec>)
 8004176:	bb1b      	cbnz	r3, 80041c0 <_svfiprintf_r+0x1b0>
 8004178:	9b03      	ldr	r3, [sp, #12]
 800417a:	3307      	adds	r3, #7
 800417c:	f023 0307 	bic.w	r3, r3, #7
 8004180:	3308      	adds	r3, #8
 8004182:	9303      	str	r3, [sp, #12]
 8004184:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004186:	4433      	add	r3, r6
 8004188:	9309      	str	r3, [sp, #36]	@ 0x24
 800418a:	e76a      	b.n	8004062 <_svfiprintf_r+0x52>
 800418c:	fb0c 3202 	mla	r2, ip, r2, r3
 8004190:	460c      	mov	r4, r1
 8004192:	2001      	movs	r0, #1
 8004194:	e7a8      	b.n	80040e8 <_svfiprintf_r+0xd8>
 8004196:	2300      	movs	r3, #0
 8004198:	3401      	adds	r4, #1
 800419a:	9305      	str	r3, [sp, #20]
 800419c:	4619      	mov	r1, r3
 800419e:	f04f 0c0a 	mov.w	ip, #10
 80041a2:	4620      	mov	r0, r4
 80041a4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80041a8:	3a30      	subs	r2, #48	@ 0x30
 80041aa:	2a09      	cmp	r2, #9
 80041ac:	d903      	bls.n	80041b6 <_svfiprintf_r+0x1a6>
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d0c6      	beq.n	8004140 <_svfiprintf_r+0x130>
 80041b2:	9105      	str	r1, [sp, #20]
 80041b4:	e7c4      	b.n	8004140 <_svfiprintf_r+0x130>
 80041b6:	fb0c 2101 	mla	r1, ip, r1, r2
 80041ba:	4604      	mov	r4, r0
 80041bc:	2301      	movs	r3, #1
 80041be:	e7f0      	b.n	80041a2 <_svfiprintf_r+0x192>
 80041c0:	ab03      	add	r3, sp, #12
 80041c2:	9300      	str	r3, [sp, #0]
 80041c4:	462a      	mov	r2, r5
 80041c6:	4b0e      	ldr	r3, [pc, #56]	@ (8004200 <_svfiprintf_r+0x1f0>)
 80041c8:	a904      	add	r1, sp, #16
 80041ca:	4638      	mov	r0, r7
 80041cc:	f3af 8000 	nop.w
 80041d0:	1c42      	adds	r2, r0, #1
 80041d2:	4606      	mov	r6, r0
 80041d4:	d1d6      	bne.n	8004184 <_svfiprintf_r+0x174>
 80041d6:	89ab      	ldrh	r3, [r5, #12]
 80041d8:	065b      	lsls	r3, r3, #25
 80041da:	f53f af2d 	bmi.w	8004038 <_svfiprintf_r+0x28>
 80041de:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80041e0:	e72c      	b.n	800403c <_svfiprintf_r+0x2c>
 80041e2:	ab03      	add	r3, sp, #12
 80041e4:	9300      	str	r3, [sp, #0]
 80041e6:	462a      	mov	r2, r5
 80041e8:	4b05      	ldr	r3, [pc, #20]	@ (8004200 <_svfiprintf_r+0x1f0>)
 80041ea:	a904      	add	r1, sp, #16
 80041ec:	4638      	mov	r0, r7
 80041ee:	f000 f91b 	bl	8004428 <_printf_i>
 80041f2:	e7ed      	b.n	80041d0 <_svfiprintf_r+0x1c0>
 80041f4:	08004874 	.word	0x08004874
 80041f8:	0800487e 	.word	0x0800487e
 80041fc:	00000000 	.word	0x00000000
 8004200:	08003f59 	.word	0x08003f59
 8004204:	0800487a 	.word	0x0800487a

08004208 <sbrk_aligned>:
 8004208:	b570      	push	{r4, r5, r6, lr}
 800420a:	4e0f      	ldr	r6, [pc, #60]	@ (8004248 <sbrk_aligned+0x40>)
 800420c:	460c      	mov	r4, r1
 800420e:	6831      	ldr	r1, [r6, #0]
 8004210:	4605      	mov	r5, r0
 8004212:	b911      	cbnz	r1, 800421a <sbrk_aligned+0x12>
 8004214:	f000 fa7c 	bl	8004710 <_sbrk_r>
 8004218:	6030      	str	r0, [r6, #0]
 800421a:	4621      	mov	r1, r4
 800421c:	4628      	mov	r0, r5
 800421e:	f000 fa77 	bl	8004710 <_sbrk_r>
 8004222:	1c43      	adds	r3, r0, #1
 8004224:	d103      	bne.n	800422e <sbrk_aligned+0x26>
 8004226:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800422a:	4620      	mov	r0, r4
 800422c:	bd70      	pop	{r4, r5, r6, pc}
 800422e:	1cc4      	adds	r4, r0, #3
 8004230:	f024 0403 	bic.w	r4, r4, #3
 8004234:	42a0      	cmp	r0, r4
 8004236:	d0f8      	beq.n	800422a <sbrk_aligned+0x22>
 8004238:	1a21      	subs	r1, r4, r0
 800423a:	4628      	mov	r0, r5
 800423c:	f000 fa68 	bl	8004710 <_sbrk_r>
 8004240:	3001      	adds	r0, #1
 8004242:	d1f2      	bne.n	800422a <sbrk_aligned+0x22>
 8004244:	e7ef      	b.n	8004226 <sbrk_aligned+0x1e>
 8004246:	bf00      	nop
 8004248:	200006e8 	.word	0x200006e8

0800424c <_malloc_r>:
 800424c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004250:	1ccd      	adds	r5, r1, #3
 8004252:	f025 0503 	bic.w	r5, r5, #3
 8004256:	3508      	adds	r5, #8
 8004258:	2d0c      	cmp	r5, #12
 800425a:	bf38      	it	cc
 800425c:	250c      	movcc	r5, #12
 800425e:	2d00      	cmp	r5, #0
 8004260:	4606      	mov	r6, r0
 8004262:	db01      	blt.n	8004268 <_malloc_r+0x1c>
 8004264:	42a9      	cmp	r1, r5
 8004266:	d904      	bls.n	8004272 <_malloc_r+0x26>
 8004268:	230c      	movs	r3, #12
 800426a:	6033      	str	r3, [r6, #0]
 800426c:	2000      	movs	r0, #0
 800426e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004272:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004348 <_malloc_r+0xfc>
 8004276:	f000 f9f7 	bl	8004668 <__malloc_lock>
 800427a:	f8d8 3000 	ldr.w	r3, [r8]
 800427e:	461c      	mov	r4, r3
 8004280:	bb44      	cbnz	r4, 80042d4 <_malloc_r+0x88>
 8004282:	4629      	mov	r1, r5
 8004284:	4630      	mov	r0, r6
 8004286:	f7ff ffbf 	bl	8004208 <sbrk_aligned>
 800428a:	1c43      	adds	r3, r0, #1
 800428c:	4604      	mov	r4, r0
 800428e:	d158      	bne.n	8004342 <_malloc_r+0xf6>
 8004290:	f8d8 4000 	ldr.w	r4, [r8]
 8004294:	4627      	mov	r7, r4
 8004296:	2f00      	cmp	r7, #0
 8004298:	d143      	bne.n	8004322 <_malloc_r+0xd6>
 800429a:	2c00      	cmp	r4, #0
 800429c:	d04b      	beq.n	8004336 <_malloc_r+0xea>
 800429e:	6823      	ldr	r3, [r4, #0]
 80042a0:	4639      	mov	r1, r7
 80042a2:	4630      	mov	r0, r6
 80042a4:	eb04 0903 	add.w	r9, r4, r3
 80042a8:	f000 fa32 	bl	8004710 <_sbrk_r>
 80042ac:	4581      	cmp	r9, r0
 80042ae:	d142      	bne.n	8004336 <_malloc_r+0xea>
 80042b0:	6821      	ldr	r1, [r4, #0]
 80042b2:	1a6d      	subs	r5, r5, r1
 80042b4:	4629      	mov	r1, r5
 80042b6:	4630      	mov	r0, r6
 80042b8:	f7ff ffa6 	bl	8004208 <sbrk_aligned>
 80042bc:	3001      	adds	r0, #1
 80042be:	d03a      	beq.n	8004336 <_malloc_r+0xea>
 80042c0:	6823      	ldr	r3, [r4, #0]
 80042c2:	442b      	add	r3, r5
 80042c4:	6023      	str	r3, [r4, #0]
 80042c6:	f8d8 3000 	ldr.w	r3, [r8]
 80042ca:	685a      	ldr	r2, [r3, #4]
 80042cc:	bb62      	cbnz	r2, 8004328 <_malloc_r+0xdc>
 80042ce:	f8c8 7000 	str.w	r7, [r8]
 80042d2:	e00f      	b.n	80042f4 <_malloc_r+0xa8>
 80042d4:	6822      	ldr	r2, [r4, #0]
 80042d6:	1b52      	subs	r2, r2, r5
 80042d8:	d420      	bmi.n	800431c <_malloc_r+0xd0>
 80042da:	2a0b      	cmp	r2, #11
 80042dc:	d917      	bls.n	800430e <_malloc_r+0xc2>
 80042de:	1961      	adds	r1, r4, r5
 80042e0:	42a3      	cmp	r3, r4
 80042e2:	6025      	str	r5, [r4, #0]
 80042e4:	bf18      	it	ne
 80042e6:	6059      	strne	r1, [r3, #4]
 80042e8:	6863      	ldr	r3, [r4, #4]
 80042ea:	bf08      	it	eq
 80042ec:	f8c8 1000 	streq.w	r1, [r8]
 80042f0:	5162      	str	r2, [r4, r5]
 80042f2:	604b      	str	r3, [r1, #4]
 80042f4:	4630      	mov	r0, r6
 80042f6:	f000 f9bd 	bl	8004674 <__malloc_unlock>
 80042fa:	f104 000b 	add.w	r0, r4, #11
 80042fe:	1d23      	adds	r3, r4, #4
 8004300:	f020 0007 	bic.w	r0, r0, #7
 8004304:	1ac2      	subs	r2, r0, r3
 8004306:	bf1c      	itt	ne
 8004308:	1a1b      	subne	r3, r3, r0
 800430a:	50a3      	strne	r3, [r4, r2]
 800430c:	e7af      	b.n	800426e <_malloc_r+0x22>
 800430e:	6862      	ldr	r2, [r4, #4]
 8004310:	42a3      	cmp	r3, r4
 8004312:	bf0c      	ite	eq
 8004314:	f8c8 2000 	streq.w	r2, [r8]
 8004318:	605a      	strne	r2, [r3, #4]
 800431a:	e7eb      	b.n	80042f4 <_malloc_r+0xa8>
 800431c:	4623      	mov	r3, r4
 800431e:	6864      	ldr	r4, [r4, #4]
 8004320:	e7ae      	b.n	8004280 <_malloc_r+0x34>
 8004322:	463c      	mov	r4, r7
 8004324:	687f      	ldr	r7, [r7, #4]
 8004326:	e7b6      	b.n	8004296 <_malloc_r+0x4a>
 8004328:	461a      	mov	r2, r3
 800432a:	685b      	ldr	r3, [r3, #4]
 800432c:	42a3      	cmp	r3, r4
 800432e:	d1fb      	bne.n	8004328 <_malloc_r+0xdc>
 8004330:	2300      	movs	r3, #0
 8004332:	6053      	str	r3, [r2, #4]
 8004334:	e7de      	b.n	80042f4 <_malloc_r+0xa8>
 8004336:	230c      	movs	r3, #12
 8004338:	6033      	str	r3, [r6, #0]
 800433a:	4630      	mov	r0, r6
 800433c:	f000 f99a 	bl	8004674 <__malloc_unlock>
 8004340:	e794      	b.n	800426c <_malloc_r+0x20>
 8004342:	6005      	str	r5, [r0, #0]
 8004344:	e7d6      	b.n	80042f4 <_malloc_r+0xa8>
 8004346:	bf00      	nop
 8004348:	200006ec 	.word	0x200006ec

0800434c <_printf_common>:
 800434c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004350:	4616      	mov	r6, r2
 8004352:	4698      	mov	r8, r3
 8004354:	688a      	ldr	r2, [r1, #8]
 8004356:	690b      	ldr	r3, [r1, #16]
 8004358:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800435c:	4293      	cmp	r3, r2
 800435e:	bfb8      	it	lt
 8004360:	4613      	movlt	r3, r2
 8004362:	6033      	str	r3, [r6, #0]
 8004364:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004368:	4607      	mov	r7, r0
 800436a:	460c      	mov	r4, r1
 800436c:	b10a      	cbz	r2, 8004372 <_printf_common+0x26>
 800436e:	3301      	adds	r3, #1
 8004370:	6033      	str	r3, [r6, #0]
 8004372:	6823      	ldr	r3, [r4, #0]
 8004374:	0699      	lsls	r1, r3, #26
 8004376:	bf42      	ittt	mi
 8004378:	6833      	ldrmi	r3, [r6, #0]
 800437a:	3302      	addmi	r3, #2
 800437c:	6033      	strmi	r3, [r6, #0]
 800437e:	6825      	ldr	r5, [r4, #0]
 8004380:	f015 0506 	ands.w	r5, r5, #6
 8004384:	d106      	bne.n	8004394 <_printf_common+0x48>
 8004386:	f104 0a19 	add.w	sl, r4, #25
 800438a:	68e3      	ldr	r3, [r4, #12]
 800438c:	6832      	ldr	r2, [r6, #0]
 800438e:	1a9b      	subs	r3, r3, r2
 8004390:	42ab      	cmp	r3, r5
 8004392:	dc26      	bgt.n	80043e2 <_printf_common+0x96>
 8004394:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004398:	6822      	ldr	r2, [r4, #0]
 800439a:	3b00      	subs	r3, #0
 800439c:	bf18      	it	ne
 800439e:	2301      	movne	r3, #1
 80043a0:	0692      	lsls	r2, r2, #26
 80043a2:	d42b      	bmi.n	80043fc <_printf_common+0xb0>
 80043a4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80043a8:	4641      	mov	r1, r8
 80043aa:	4638      	mov	r0, r7
 80043ac:	47c8      	blx	r9
 80043ae:	3001      	adds	r0, #1
 80043b0:	d01e      	beq.n	80043f0 <_printf_common+0xa4>
 80043b2:	6823      	ldr	r3, [r4, #0]
 80043b4:	6922      	ldr	r2, [r4, #16]
 80043b6:	f003 0306 	and.w	r3, r3, #6
 80043ba:	2b04      	cmp	r3, #4
 80043bc:	bf02      	ittt	eq
 80043be:	68e5      	ldreq	r5, [r4, #12]
 80043c0:	6833      	ldreq	r3, [r6, #0]
 80043c2:	1aed      	subeq	r5, r5, r3
 80043c4:	68a3      	ldr	r3, [r4, #8]
 80043c6:	bf0c      	ite	eq
 80043c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80043cc:	2500      	movne	r5, #0
 80043ce:	4293      	cmp	r3, r2
 80043d0:	bfc4      	itt	gt
 80043d2:	1a9b      	subgt	r3, r3, r2
 80043d4:	18ed      	addgt	r5, r5, r3
 80043d6:	2600      	movs	r6, #0
 80043d8:	341a      	adds	r4, #26
 80043da:	42b5      	cmp	r5, r6
 80043dc:	d11a      	bne.n	8004414 <_printf_common+0xc8>
 80043de:	2000      	movs	r0, #0
 80043e0:	e008      	b.n	80043f4 <_printf_common+0xa8>
 80043e2:	2301      	movs	r3, #1
 80043e4:	4652      	mov	r2, sl
 80043e6:	4641      	mov	r1, r8
 80043e8:	4638      	mov	r0, r7
 80043ea:	47c8      	blx	r9
 80043ec:	3001      	adds	r0, #1
 80043ee:	d103      	bne.n	80043f8 <_printf_common+0xac>
 80043f0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80043f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80043f8:	3501      	adds	r5, #1
 80043fa:	e7c6      	b.n	800438a <_printf_common+0x3e>
 80043fc:	18e1      	adds	r1, r4, r3
 80043fe:	1c5a      	adds	r2, r3, #1
 8004400:	2030      	movs	r0, #48	@ 0x30
 8004402:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004406:	4422      	add	r2, r4
 8004408:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800440c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004410:	3302      	adds	r3, #2
 8004412:	e7c7      	b.n	80043a4 <_printf_common+0x58>
 8004414:	2301      	movs	r3, #1
 8004416:	4622      	mov	r2, r4
 8004418:	4641      	mov	r1, r8
 800441a:	4638      	mov	r0, r7
 800441c:	47c8      	blx	r9
 800441e:	3001      	adds	r0, #1
 8004420:	d0e6      	beq.n	80043f0 <_printf_common+0xa4>
 8004422:	3601      	adds	r6, #1
 8004424:	e7d9      	b.n	80043da <_printf_common+0x8e>
	...

08004428 <_printf_i>:
 8004428:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800442c:	7e0f      	ldrb	r7, [r1, #24]
 800442e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004430:	2f78      	cmp	r7, #120	@ 0x78
 8004432:	4691      	mov	r9, r2
 8004434:	4680      	mov	r8, r0
 8004436:	460c      	mov	r4, r1
 8004438:	469a      	mov	sl, r3
 800443a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800443e:	d807      	bhi.n	8004450 <_printf_i+0x28>
 8004440:	2f62      	cmp	r7, #98	@ 0x62
 8004442:	d80a      	bhi.n	800445a <_printf_i+0x32>
 8004444:	2f00      	cmp	r7, #0
 8004446:	f000 80d2 	beq.w	80045ee <_printf_i+0x1c6>
 800444a:	2f58      	cmp	r7, #88	@ 0x58
 800444c:	f000 80b9 	beq.w	80045c2 <_printf_i+0x19a>
 8004450:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004454:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004458:	e03a      	b.n	80044d0 <_printf_i+0xa8>
 800445a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800445e:	2b15      	cmp	r3, #21
 8004460:	d8f6      	bhi.n	8004450 <_printf_i+0x28>
 8004462:	a101      	add	r1, pc, #4	@ (adr r1, 8004468 <_printf_i+0x40>)
 8004464:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004468:	080044c1 	.word	0x080044c1
 800446c:	080044d5 	.word	0x080044d5
 8004470:	08004451 	.word	0x08004451
 8004474:	08004451 	.word	0x08004451
 8004478:	08004451 	.word	0x08004451
 800447c:	08004451 	.word	0x08004451
 8004480:	080044d5 	.word	0x080044d5
 8004484:	08004451 	.word	0x08004451
 8004488:	08004451 	.word	0x08004451
 800448c:	08004451 	.word	0x08004451
 8004490:	08004451 	.word	0x08004451
 8004494:	080045d5 	.word	0x080045d5
 8004498:	080044ff 	.word	0x080044ff
 800449c:	0800458f 	.word	0x0800458f
 80044a0:	08004451 	.word	0x08004451
 80044a4:	08004451 	.word	0x08004451
 80044a8:	080045f7 	.word	0x080045f7
 80044ac:	08004451 	.word	0x08004451
 80044b0:	080044ff 	.word	0x080044ff
 80044b4:	08004451 	.word	0x08004451
 80044b8:	08004451 	.word	0x08004451
 80044bc:	08004597 	.word	0x08004597
 80044c0:	6833      	ldr	r3, [r6, #0]
 80044c2:	1d1a      	adds	r2, r3, #4
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	6032      	str	r2, [r6, #0]
 80044c8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80044cc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80044d0:	2301      	movs	r3, #1
 80044d2:	e09d      	b.n	8004610 <_printf_i+0x1e8>
 80044d4:	6833      	ldr	r3, [r6, #0]
 80044d6:	6820      	ldr	r0, [r4, #0]
 80044d8:	1d19      	adds	r1, r3, #4
 80044da:	6031      	str	r1, [r6, #0]
 80044dc:	0606      	lsls	r6, r0, #24
 80044de:	d501      	bpl.n	80044e4 <_printf_i+0xbc>
 80044e0:	681d      	ldr	r5, [r3, #0]
 80044e2:	e003      	b.n	80044ec <_printf_i+0xc4>
 80044e4:	0645      	lsls	r5, r0, #25
 80044e6:	d5fb      	bpl.n	80044e0 <_printf_i+0xb8>
 80044e8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80044ec:	2d00      	cmp	r5, #0
 80044ee:	da03      	bge.n	80044f8 <_printf_i+0xd0>
 80044f0:	232d      	movs	r3, #45	@ 0x2d
 80044f2:	426d      	negs	r5, r5
 80044f4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80044f8:	4859      	ldr	r0, [pc, #356]	@ (8004660 <_printf_i+0x238>)
 80044fa:	230a      	movs	r3, #10
 80044fc:	e011      	b.n	8004522 <_printf_i+0xfa>
 80044fe:	6821      	ldr	r1, [r4, #0]
 8004500:	6833      	ldr	r3, [r6, #0]
 8004502:	0608      	lsls	r0, r1, #24
 8004504:	f853 5b04 	ldr.w	r5, [r3], #4
 8004508:	d402      	bmi.n	8004510 <_printf_i+0xe8>
 800450a:	0649      	lsls	r1, r1, #25
 800450c:	bf48      	it	mi
 800450e:	b2ad      	uxthmi	r5, r5
 8004510:	2f6f      	cmp	r7, #111	@ 0x6f
 8004512:	4853      	ldr	r0, [pc, #332]	@ (8004660 <_printf_i+0x238>)
 8004514:	6033      	str	r3, [r6, #0]
 8004516:	bf14      	ite	ne
 8004518:	230a      	movne	r3, #10
 800451a:	2308      	moveq	r3, #8
 800451c:	2100      	movs	r1, #0
 800451e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004522:	6866      	ldr	r6, [r4, #4]
 8004524:	60a6      	str	r6, [r4, #8]
 8004526:	2e00      	cmp	r6, #0
 8004528:	bfa2      	ittt	ge
 800452a:	6821      	ldrge	r1, [r4, #0]
 800452c:	f021 0104 	bicge.w	r1, r1, #4
 8004530:	6021      	strge	r1, [r4, #0]
 8004532:	b90d      	cbnz	r5, 8004538 <_printf_i+0x110>
 8004534:	2e00      	cmp	r6, #0
 8004536:	d04b      	beq.n	80045d0 <_printf_i+0x1a8>
 8004538:	4616      	mov	r6, r2
 800453a:	fbb5 f1f3 	udiv	r1, r5, r3
 800453e:	fb03 5711 	mls	r7, r3, r1, r5
 8004542:	5dc7      	ldrb	r7, [r0, r7]
 8004544:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004548:	462f      	mov	r7, r5
 800454a:	42bb      	cmp	r3, r7
 800454c:	460d      	mov	r5, r1
 800454e:	d9f4      	bls.n	800453a <_printf_i+0x112>
 8004550:	2b08      	cmp	r3, #8
 8004552:	d10b      	bne.n	800456c <_printf_i+0x144>
 8004554:	6823      	ldr	r3, [r4, #0]
 8004556:	07df      	lsls	r7, r3, #31
 8004558:	d508      	bpl.n	800456c <_printf_i+0x144>
 800455a:	6923      	ldr	r3, [r4, #16]
 800455c:	6861      	ldr	r1, [r4, #4]
 800455e:	4299      	cmp	r1, r3
 8004560:	bfde      	ittt	le
 8004562:	2330      	movle	r3, #48	@ 0x30
 8004564:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004568:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800456c:	1b92      	subs	r2, r2, r6
 800456e:	6122      	str	r2, [r4, #16]
 8004570:	f8cd a000 	str.w	sl, [sp]
 8004574:	464b      	mov	r3, r9
 8004576:	aa03      	add	r2, sp, #12
 8004578:	4621      	mov	r1, r4
 800457a:	4640      	mov	r0, r8
 800457c:	f7ff fee6 	bl	800434c <_printf_common>
 8004580:	3001      	adds	r0, #1
 8004582:	d14a      	bne.n	800461a <_printf_i+0x1f2>
 8004584:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004588:	b004      	add	sp, #16
 800458a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800458e:	6823      	ldr	r3, [r4, #0]
 8004590:	f043 0320 	orr.w	r3, r3, #32
 8004594:	6023      	str	r3, [r4, #0]
 8004596:	4833      	ldr	r0, [pc, #204]	@ (8004664 <_printf_i+0x23c>)
 8004598:	2778      	movs	r7, #120	@ 0x78
 800459a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800459e:	6823      	ldr	r3, [r4, #0]
 80045a0:	6831      	ldr	r1, [r6, #0]
 80045a2:	061f      	lsls	r7, r3, #24
 80045a4:	f851 5b04 	ldr.w	r5, [r1], #4
 80045a8:	d402      	bmi.n	80045b0 <_printf_i+0x188>
 80045aa:	065f      	lsls	r7, r3, #25
 80045ac:	bf48      	it	mi
 80045ae:	b2ad      	uxthmi	r5, r5
 80045b0:	6031      	str	r1, [r6, #0]
 80045b2:	07d9      	lsls	r1, r3, #31
 80045b4:	bf44      	itt	mi
 80045b6:	f043 0320 	orrmi.w	r3, r3, #32
 80045ba:	6023      	strmi	r3, [r4, #0]
 80045bc:	b11d      	cbz	r5, 80045c6 <_printf_i+0x19e>
 80045be:	2310      	movs	r3, #16
 80045c0:	e7ac      	b.n	800451c <_printf_i+0xf4>
 80045c2:	4827      	ldr	r0, [pc, #156]	@ (8004660 <_printf_i+0x238>)
 80045c4:	e7e9      	b.n	800459a <_printf_i+0x172>
 80045c6:	6823      	ldr	r3, [r4, #0]
 80045c8:	f023 0320 	bic.w	r3, r3, #32
 80045cc:	6023      	str	r3, [r4, #0]
 80045ce:	e7f6      	b.n	80045be <_printf_i+0x196>
 80045d0:	4616      	mov	r6, r2
 80045d2:	e7bd      	b.n	8004550 <_printf_i+0x128>
 80045d4:	6833      	ldr	r3, [r6, #0]
 80045d6:	6825      	ldr	r5, [r4, #0]
 80045d8:	6961      	ldr	r1, [r4, #20]
 80045da:	1d18      	adds	r0, r3, #4
 80045dc:	6030      	str	r0, [r6, #0]
 80045de:	062e      	lsls	r6, r5, #24
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	d501      	bpl.n	80045e8 <_printf_i+0x1c0>
 80045e4:	6019      	str	r1, [r3, #0]
 80045e6:	e002      	b.n	80045ee <_printf_i+0x1c6>
 80045e8:	0668      	lsls	r0, r5, #25
 80045ea:	d5fb      	bpl.n	80045e4 <_printf_i+0x1bc>
 80045ec:	8019      	strh	r1, [r3, #0]
 80045ee:	2300      	movs	r3, #0
 80045f0:	6123      	str	r3, [r4, #16]
 80045f2:	4616      	mov	r6, r2
 80045f4:	e7bc      	b.n	8004570 <_printf_i+0x148>
 80045f6:	6833      	ldr	r3, [r6, #0]
 80045f8:	1d1a      	adds	r2, r3, #4
 80045fa:	6032      	str	r2, [r6, #0]
 80045fc:	681e      	ldr	r6, [r3, #0]
 80045fe:	6862      	ldr	r2, [r4, #4]
 8004600:	2100      	movs	r1, #0
 8004602:	4630      	mov	r0, r6
 8004604:	f7fb fdec 	bl	80001e0 <memchr>
 8004608:	b108      	cbz	r0, 800460e <_printf_i+0x1e6>
 800460a:	1b80      	subs	r0, r0, r6
 800460c:	6060      	str	r0, [r4, #4]
 800460e:	6863      	ldr	r3, [r4, #4]
 8004610:	6123      	str	r3, [r4, #16]
 8004612:	2300      	movs	r3, #0
 8004614:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004618:	e7aa      	b.n	8004570 <_printf_i+0x148>
 800461a:	6923      	ldr	r3, [r4, #16]
 800461c:	4632      	mov	r2, r6
 800461e:	4649      	mov	r1, r9
 8004620:	4640      	mov	r0, r8
 8004622:	47d0      	blx	sl
 8004624:	3001      	adds	r0, #1
 8004626:	d0ad      	beq.n	8004584 <_printf_i+0x15c>
 8004628:	6823      	ldr	r3, [r4, #0]
 800462a:	079b      	lsls	r3, r3, #30
 800462c:	d413      	bmi.n	8004656 <_printf_i+0x22e>
 800462e:	68e0      	ldr	r0, [r4, #12]
 8004630:	9b03      	ldr	r3, [sp, #12]
 8004632:	4298      	cmp	r0, r3
 8004634:	bfb8      	it	lt
 8004636:	4618      	movlt	r0, r3
 8004638:	e7a6      	b.n	8004588 <_printf_i+0x160>
 800463a:	2301      	movs	r3, #1
 800463c:	4632      	mov	r2, r6
 800463e:	4649      	mov	r1, r9
 8004640:	4640      	mov	r0, r8
 8004642:	47d0      	blx	sl
 8004644:	3001      	adds	r0, #1
 8004646:	d09d      	beq.n	8004584 <_printf_i+0x15c>
 8004648:	3501      	adds	r5, #1
 800464a:	68e3      	ldr	r3, [r4, #12]
 800464c:	9903      	ldr	r1, [sp, #12]
 800464e:	1a5b      	subs	r3, r3, r1
 8004650:	42ab      	cmp	r3, r5
 8004652:	dcf2      	bgt.n	800463a <_printf_i+0x212>
 8004654:	e7eb      	b.n	800462e <_printf_i+0x206>
 8004656:	2500      	movs	r5, #0
 8004658:	f104 0619 	add.w	r6, r4, #25
 800465c:	e7f5      	b.n	800464a <_printf_i+0x222>
 800465e:	bf00      	nop
 8004660:	08004885 	.word	0x08004885
 8004664:	08004896 	.word	0x08004896

08004668 <__malloc_lock>:
 8004668:	4801      	ldr	r0, [pc, #4]	@ (8004670 <__malloc_lock+0x8>)
 800466a:	f7ff bc73 	b.w	8003f54 <__retarget_lock_acquire_recursive>
 800466e:	bf00      	nop
 8004670:	200006e4 	.word	0x200006e4

08004674 <__malloc_unlock>:
 8004674:	4801      	ldr	r0, [pc, #4]	@ (800467c <__malloc_unlock+0x8>)
 8004676:	f7ff bc6e 	b.w	8003f56 <__retarget_lock_release_recursive>
 800467a:	bf00      	nop
 800467c:	200006e4 	.word	0x200006e4

08004680 <_realloc_r>:
 8004680:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004684:	4680      	mov	r8, r0
 8004686:	4615      	mov	r5, r2
 8004688:	460c      	mov	r4, r1
 800468a:	b921      	cbnz	r1, 8004696 <_realloc_r+0x16>
 800468c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004690:	4611      	mov	r1, r2
 8004692:	f7ff bddb 	b.w	800424c <_malloc_r>
 8004696:	b92a      	cbnz	r2, 80046a4 <_realloc_r+0x24>
 8004698:	f000 f858 	bl	800474c <_free_r>
 800469c:	2400      	movs	r4, #0
 800469e:	4620      	mov	r0, r4
 80046a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80046a4:	f000 f89c 	bl	80047e0 <_malloc_usable_size_r>
 80046a8:	4285      	cmp	r5, r0
 80046aa:	4606      	mov	r6, r0
 80046ac:	d802      	bhi.n	80046b4 <_realloc_r+0x34>
 80046ae:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80046b2:	d8f4      	bhi.n	800469e <_realloc_r+0x1e>
 80046b4:	4629      	mov	r1, r5
 80046b6:	4640      	mov	r0, r8
 80046b8:	f7ff fdc8 	bl	800424c <_malloc_r>
 80046bc:	4607      	mov	r7, r0
 80046be:	2800      	cmp	r0, #0
 80046c0:	d0ec      	beq.n	800469c <_realloc_r+0x1c>
 80046c2:	42b5      	cmp	r5, r6
 80046c4:	462a      	mov	r2, r5
 80046c6:	4621      	mov	r1, r4
 80046c8:	bf28      	it	cs
 80046ca:	4632      	movcs	r2, r6
 80046cc:	f000 f830 	bl	8004730 <memcpy>
 80046d0:	4621      	mov	r1, r4
 80046d2:	4640      	mov	r0, r8
 80046d4:	f000 f83a 	bl	800474c <_free_r>
 80046d8:	463c      	mov	r4, r7
 80046da:	e7e0      	b.n	800469e <_realloc_r+0x1e>

080046dc <memmove>:
 80046dc:	4288      	cmp	r0, r1
 80046de:	b510      	push	{r4, lr}
 80046e0:	eb01 0402 	add.w	r4, r1, r2
 80046e4:	d902      	bls.n	80046ec <memmove+0x10>
 80046e6:	4284      	cmp	r4, r0
 80046e8:	4623      	mov	r3, r4
 80046ea:	d807      	bhi.n	80046fc <memmove+0x20>
 80046ec:	1e43      	subs	r3, r0, #1
 80046ee:	42a1      	cmp	r1, r4
 80046f0:	d008      	beq.n	8004704 <memmove+0x28>
 80046f2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80046f6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80046fa:	e7f8      	b.n	80046ee <memmove+0x12>
 80046fc:	4402      	add	r2, r0
 80046fe:	4601      	mov	r1, r0
 8004700:	428a      	cmp	r2, r1
 8004702:	d100      	bne.n	8004706 <memmove+0x2a>
 8004704:	bd10      	pop	{r4, pc}
 8004706:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800470a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800470e:	e7f7      	b.n	8004700 <memmove+0x24>

08004710 <_sbrk_r>:
 8004710:	b538      	push	{r3, r4, r5, lr}
 8004712:	4d06      	ldr	r5, [pc, #24]	@ (800472c <_sbrk_r+0x1c>)
 8004714:	2300      	movs	r3, #0
 8004716:	4604      	mov	r4, r0
 8004718:	4608      	mov	r0, r1
 800471a:	602b      	str	r3, [r5, #0]
 800471c:	f7fc fcd4 	bl	80010c8 <_sbrk>
 8004720:	1c43      	adds	r3, r0, #1
 8004722:	d102      	bne.n	800472a <_sbrk_r+0x1a>
 8004724:	682b      	ldr	r3, [r5, #0]
 8004726:	b103      	cbz	r3, 800472a <_sbrk_r+0x1a>
 8004728:	6023      	str	r3, [r4, #0]
 800472a:	bd38      	pop	{r3, r4, r5, pc}
 800472c:	200006f0 	.word	0x200006f0

08004730 <memcpy>:
 8004730:	440a      	add	r2, r1
 8004732:	4291      	cmp	r1, r2
 8004734:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8004738:	d100      	bne.n	800473c <memcpy+0xc>
 800473a:	4770      	bx	lr
 800473c:	b510      	push	{r4, lr}
 800473e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004742:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004746:	4291      	cmp	r1, r2
 8004748:	d1f9      	bne.n	800473e <memcpy+0xe>
 800474a:	bd10      	pop	{r4, pc}

0800474c <_free_r>:
 800474c:	b538      	push	{r3, r4, r5, lr}
 800474e:	4605      	mov	r5, r0
 8004750:	2900      	cmp	r1, #0
 8004752:	d041      	beq.n	80047d8 <_free_r+0x8c>
 8004754:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004758:	1f0c      	subs	r4, r1, #4
 800475a:	2b00      	cmp	r3, #0
 800475c:	bfb8      	it	lt
 800475e:	18e4      	addlt	r4, r4, r3
 8004760:	f7ff ff82 	bl	8004668 <__malloc_lock>
 8004764:	4a1d      	ldr	r2, [pc, #116]	@ (80047dc <_free_r+0x90>)
 8004766:	6813      	ldr	r3, [r2, #0]
 8004768:	b933      	cbnz	r3, 8004778 <_free_r+0x2c>
 800476a:	6063      	str	r3, [r4, #4]
 800476c:	6014      	str	r4, [r2, #0]
 800476e:	4628      	mov	r0, r5
 8004770:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004774:	f7ff bf7e 	b.w	8004674 <__malloc_unlock>
 8004778:	42a3      	cmp	r3, r4
 800477a:	d908      	bls.n	800478e <_free_r+0x42>
 800477c:	6820      	ldr	r0, [r4, #0]
 800477e:	1821      	adds	r1, r4, r0
 8004780:	428b      	cmp	r3, r1
 8004782:	bf01      	itttt	eq
 8004784:	6819      	ldreq	r1, [r3, #0]
 8004786:	685b      	ldreq	r3, [r3, #4]
 8004788:	1809      	addeq	r1, r1, r0
 800478a:	6021      	streq	r1, [r4, #0]
 800478c:	e7ed      	b.n	800476a <_free_r+0x1e>
 800478e:	461a      	mov	r2, r3
 8004790:	685b      	ldr	r3, [r3, #4]
 8004792:	b10b      	cbz	r3, 8004798 <_free_r+0x4c>
 8004794:	42a3      	cmp	r3, r4
 8004796:	d9fa      	bls.n	800478e <_free_r+0x42>
 8004798:	6811      	ldr	r1, [r2, #0]
 800479a:	1850      	adds	r0, r2, r1
 800479c:	42a0      	cmp	r0, r4
 800479e:	d10b      	bne.n	80047b8 <_free_r+0x6c>
 80047a0:	6820      	ldr	r0, [r4, #0]
 80047a2:	4401      	add	r1, r0
 80047a4:	1850      	adds	r0, r2, r1
 80047a6:	4283      	cmp	r3, r0
 80047a8:	6011      	str	r1, [r2, #0]
 80047aa:	d1e0      	bne.n	800476e <_free_r+0x22>
 80047ac:	6818      	ldr	r0, [r3, #0]
 80047ae:	685b      	ldr	r3, [r3, #4]
 80047b0:	6053      	str	r3, [r2, #4]
 80047b2:	4408      	add	r0, r1
 80047b4:	6010      	str	r0, [r2, #0]
 80047b6:	e7da      	b.n	800476e <_free_r+0x22>
 80047b8:	d902      	bls.n	80047c0 <_free_r+0x74>
 80047ba:	230c      	movs	r3, #12
 80047bc:	602b      	str	r3, [r5, #0]
 80047be:	e7d6      	b.n	800476e <_free_r+0x22>
 80047c0:	6820      	ldr	r0, [r4, #0]
 80047c2:	1821      	adds	r1, r4, r0
 80047c4:	428b      	cmp	r3, r1
 80047c6:	bf04      	itt	eq
 80047c8:	6819      	ldreq	r1, [r3, #0]
 80047ca:	685b      	ldreq	r3, [r3, #4]
 80047cc:	6063      	str	r3, [r4, #4]
 80047ce:	bf04      	itt	eq
 80047d0:	1809      	addeq	r1, r1, r0
 80047d2:	6021      	streq	r1, [r4, #0]
 80047d4:	6054      	str	r4, [r2, #4]
 80047d6:	e7ca      	b.n	800476e <_free_r+0x22>
 80047d8:	bd38      	pop	{r3, r4, r5, pc}
 80047da:	bf00      	nop
 80047dc:	200006ec 	.word	0x200006ec

080047e0 <_malloc_usable_size_r>:
 80047e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80047e4:	1f18      	subs	r0, r3, #4
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	bfbc      	itt	lt
 80047ea:	580b      	ldrlt	r3, [r1, r0]
 80047ec:	18c0      	addlt	r0, r0, r3
 80047ee:	4770      	bx	lr

080047f0 <_init>:
 80047f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047f2:	bf00      	nop
 80047f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80047f6:	bc08      	pop	{r3}
 80047f8:	469e      	mov	lr, r3
 80047fa:	4770      	bx	lr

080047fc <_fini>:
 80047fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047fe:	bf00      	nop
 8004800:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004802:	bc08      	pop	{r3}
 8004804:	469e      	mov	lr, r3
 8004806:	4770      	bx	lr
