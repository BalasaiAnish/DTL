
AudioAmplifier.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003e80  0800018c  0800018c  0000118c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000064  0800400c  0800400c  0000500c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004070  08004070  00006010  2**0
                  CONTENTS
  4 .ARM          00000008  08004070  08004070  00005070  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004078  08004078  00006010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004078  08004078  00005078  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800407c  0800407c  0000507c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08004080  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b4  20000010  08004090  00006010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001c4  08004090  000061c4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e163  00000000  00000000  00006040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000238c  00000000  00000000  000141a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cf8  00000000  00000000  00016530  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009e3  00000000  00000000  00017228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000207a4  00000000  00000000  00017c0b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e8b8  00000000  00000000  000383af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c1ec7  00000000  00000000  00046c67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00108b2e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003390  00000000  00000000  00108b74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  0010bf04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	@ (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	20000010 	.word	0x20000010
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08003ff4 	.word	0x08003ff4

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	@ (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	@ (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	@ (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000014 	.word	0x20000014
 80001c8:	08003ff4 	.word	0x08003ff4

080001cc <strlen>:
 80001cc:	4603      	mov	r3, r0
 80001ce:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d2:	2a00      	cmp	r2, #0
 80001d4:	d1fb      	bne.n	80001ce <strlen+0x2>
 80001d6:	1a18      	subs	r0, r3, r0
 80001d8:	3801      	subs	r0, #1
 80001da:	4770      	bx	lr

080001dc <__aeabi_uldivmod>:
 80001dc:	b953      	cbnz	r3, 80001f4 <__aeabi_uldivmod+0x18>
 80001de:	b94a      	cbnz	r2, 80001f4 <__aeabi_uldivmod+0x18>
 80001e0:	2900      	cmp	r1, #0
 80001e2:	bf08      	it	eq
 80001e4:	2800      	cmpeq	r0, #0
 80001e6:	bf1c      	itt	ne
 80001e8:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80001ec:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80001f0:	f000 b96a 	b.w	80004c8 <__aeabi_idiv0>
 80001f4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001fc:	f000 f806 	bl	800020c <__udivmoddi4>
 8000200:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000204:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000208:	b004      	add	sp, #16
 800020a:	4770      	bx	lr

0800020c <__udivmoddi4>:
 800020c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000210:	9d08      	ldr	r5, [sp, #32]
 8000212:	460c      	mov	r4, r1
 8000214:	2b00      	cmp	r3, #0
 8000216:	d14e      	bne.n	80002b6 <__udivmoddi4+0xaa>
 8000218:	4694      	mov	ip, r2
 800021a:	458c      	cmp	ip, r1
 800021c:	4686      	mov	lr, r0
 800021e:	fab2 f282 	clz	r2, r2
 8000222:	d962      	bls.n	80002ea <__udivmoddi4+0xde>
 8000224:	b14a      	cbz	r2, 800023a <__udivmoddi4+0x2e>
 8000226:	f1c2 0320 	rsb	r3, r2, #32
 800022a:	4091      	lsls	r1, r2
 800022c:	fa20 f303 	lsr.w	r3, r0, r3
 8000230:	fa0c fc02 	lsl.w	ip, ip, r2
 8000234:	4319      	orrs	r1, r3
 8000236:	fa00 fe02 	lsl.w	lr, r0, r2
 800023a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800023e:	fa1f f68c 	uxth.w	r6, ip
 8000242:	fbb1 f4f7 	udiv	r4, r1, r7
 8000246:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800024a:	fb07 1114 	mls	r1, r7, r4, r1
 800024e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000252:	fb04 f106 	mul.w	r1, r4, r6
 8000256:	4299      	cmp	r1, r3
 8000258:	d90a      	bls.n	8000270 <__udivmoddi4+0x64>
 800025a:	eb1c 0303 	adds.w	r3, ip, r3
 800025e:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000262:	f080 8112 	bcs.w	800048a <__udivmoddi4+0x27e>
 8000266:	4299      	cmp	r1, r3
 8000268:	f240 810f 	bls.w	800048a <__udivmoddi4+0x27e>
 800026c:	3c02      	subs	r4, #2
 800026e:	4463      	add	r3, ip
 8000270:	1a59      	subs	r1, r3, r1
 8000272:	fa1f f38e 	uxth.w	r3, lr
 8000276:	fbb1 f0f7 	udiv	r0, r1, r7
 800027a:	fb07 1110 	mls	r1, r7, r0, r1
 800027e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000282:	fb00 f606 	mul.w	r6, r0, r6
 8000286:	429e      	cmp	r6, r3
 8000288:	d90a      	bls.n	80002a0 <__udivmoddi4+0x94>
 800028a:	eb1c 0303 	adds.w	r3, ip, r3
 800028e:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000292:	f080 80fc 	bcs.w	800048e <__udivmoddi4+0x282>
 8000296:	429e      	cmp	r6, r3
 8000298:	f240 80f9 	bls.w	800048e <__udivmoddi4+0x282>
 800029c:	4463      	add	r3, ip
 800029e:	3802      	subs	r0, #2
 80002a0:	1b9b      	subs	r3, r3, r6
 80002a2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002a6:	2100      	movs	r1, #0
 80002a8:	b11d      	cbz	r5, 80002b2 <__udivmoddi4+0xa6>
 80002aa:	40d3      	lsrs	r3, r2
 80002ac:	2200      	movs	r2, #0
 80002ae:	e9c5 3200 	strd	r3, r2, [r5]
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	428b      	cmp	r3, r1
 80002b8:	d905      	bls.n	80002c6 <__udivmoddi4+0xba>
 80002ba:	b10d      	cbz	r5, 80002c0 <__udivmoddi4+0xb4>
 80002bc:	e9c5 0100 	strd	r0, r1, [r5]
 80002c0:	2100      	movs	r1, #0
 80002c2:	4608      	mov	r0, r1
 80002c4:	e7f5      	b.n	80002b2 <__udivmoddi4+0xa6>
 80002c6:	fab3 f183 	clz	r1, r3
 80002ca:	2900      	cmp	r1, #0
 80002cc:	d146      	bne.n	800035c <__udivmoddi4+0x150>
 80002ce:	42a3      	cmp	r3, r4
 80002d0:	d302      	bcc.n	80002d8 <__udivmoddi4+0xcc>
 80002d2:	4290      	cmp	r0, r2
 80002d4:	f0c0 80f0 	bcc.w	80004b8 <__udivmoddi4+0x2ac>
 80002d8:	1a86      	subs	r6, r0, r2
 80002da:	eb64 0303 	sbc.w	r3, r4, r3
 80002de:	2001      	movs	r0, #1
 80002e0:	2d00      	cmp	r5, #0
 80002e2:	d0e6      	beq.n	80002b2 <__udivmoddi4+0xa6>
 80002e4:	e9c5 6300 	strd	r6, r3, [r5]
 80002e8:	e7e3      	b.n	80002b2 <__udivmoddi4+0xa6>
 80002ea:	2a00      	cmp	r2, #0
 80002ec:	f040 8090 	bne.w	8000410 <__udivmoddi4+0x204>
 80002f0:	eba1 040c 	sub.w	r4, r1, ip
 80002f4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f8:	fa1f f78c 	uxth.w	r7, ip
 80002fc:	2101      	movs	r1, #1
 80002fe:	fbb4 f6f8 	udiv	r6, r4, r8
 8000302:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000306:	fb08 4416 	mls	r4, r8, r6, r4
 800030a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800030e:	fb07 f006 	mul.w	r0, r7, r6
 8000312:	4298      	cmp	r0, r3
 8000314:	d908      	bls.n	8000328 <__udivmoddi4+0x11c>
 8000316:	eb1c 0303 	adds.w	r3, ip, r3
 800031a:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 800031e:	d202      	bcs.n	8000326 <__udivmoddi4+0x11a>
 8000320:	4298      	cmp	r0, r3
 8000322:	f200 80cd 	bhi.w	80004c0 <__udivmoddi4+0x2b4>
 8000326:	4626      	mov	r6, r4
 8000328:	1a1c      	subs	r4, r3, r0
 800032a:	fa1f f38e 	uxth.w	r3, lr
 800032e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000332:	fb08 4410 	mls	r4, r8, r0, r4
 8000336:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800033a:	fb00 f707 	mul.w	r7, r0, r7
 800033e:	429f      	cmp	r7, r3
 8000340:	d908      	bls.n	8000354 <__udivmoddi4+0x148>
 8000342:	eb1c 0303 	adds.w	r3, ip, r3
 8000346:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x146>
 800034c:	429f      	cmp	r7, r3
 800034e:	f200 80b0 	bhi.w	80004b2 <__udivmoddi4+0x2a6>
 8000352:	4620      	mov	r0, r4
 8000354:	1bdb      	subs	r3, r3, r7
 8000356:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800035a:	e7a5      	b.n	80002a8 <__udivmoddi4+0x9c>
 800035c:	f1c1 0620 	rsb	r6, r1, #32
 8000360:	408b      	lsls	r3, r1
 8000362:	fa22 f706 	lsr.w	r7, r2, r6
 8000366:	431f      	orrs	r7, r3
 8000368:	fa20 fc06 	lsr.w	ip, r0, r6
 800036c:	fa04 f301 	lsl.w	r3, r4, r1
 8000370:	ea43 030c 	orr.w	r3, r3, ip
 8000374:	40f4      	lsrs	r4, r6
 8000376:	fa00 f801 	lsl.w	r8, r0, r1
 800037a:	0c38      	lsrs	r0, r7, #16
 800037c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000380:	fbb4 fef0 	udiv	lr, r4, r0
 8000384:	fa1f fc87 	uxth.w	ip, r7
 8000388:	fb00 441e 	mls	r4, r0, lr, r4
 800038c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000390:	fb0e f90c 	mul.w	r9, lr, ip
 8000394:	45a1      	cmp	r9, r4
 8000396:	fa02 f201 	lsl.w	r2, r2, r1
 800039a:	d90a      	bls.n	80003b2 <__udivmoddi4+0x1a6>
 800039c:	193c      	adds	r4, r7, r4
 800039e:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 80003a2:	f080 8084 	bcs.w	80004ae <__udivmoddi4+0x2a2>
 80003a6:	45a1      	cmp	r9, r4
 80003a8:	f240 8081 	bls.w	80004ae <__udivmoddi4+0x2a2>
 80003ac:	f1ae 0e02 	sub.w	lr, lr, #2
 80003b0:	443c      	add	r4, r7
 80003b2:	eba4 0409 	sub.w	r4, r4, r9
 80003b6:	fa1f f983 	uxth.w	r9, r3
 80003ba:	fbb4 f3f0 	udiv	r3, r4, r0
 80003be:	fb00 4413 	mls	r4, r0, r3, r4
 80003c2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003c6:	fb03 fc0c 	mul.w	ip, r3, ip
 80003ca:	45a4      	cmp	ip, r4
 80003cc:	d907      	bls.n	80003de <__udivmoddi4+0x1d2>
 80003ce:	193c      	adds	r4, r7, r4
 80003d0:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80003d4:	d267      	bcs.n	80004a6 <__udivmoddi4+0x29a>
 80003d6:	45a4      	cmp	ip, r4
 80003d8:	d965      	bls.n	80004a6 <__udivmoddi4+0x29a>
 80003da:	3b02      	subs	r3, #2
 80003dc:	443c      	add	r4, r7
 80003de:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003e2:	fba0 9302 	umull	r9, r3, r0, r2
 80003e6:	eba4 040c 	sub.w	r4, r4, ip
 80003ea:	429c      	cmp	r4, r3
 80003ec:	46ce      	mov	lr, r9
 80003ee:	469c      	mov	ip, r3
 80003f0:	d351      	bcc.n	8000496 <__udivmoddi4+0x28a>
 80003f2:	d04e      	beq.n	8000492 <__udivmoddi4+0x286>
 80003f4:	b155      	cbz	r5, 800040c <__udivmoddi4+0x200>
 80003f6:	ebb8 030e 	subs.w	r3, r8, lr
 80003fa:	eb64 040c 	sbc.w	r4, r4, ip
 80003fe:	fa04 f606 	lsl.w	r6, r4, r6
 8000402:	40cb      	lsrs	r3, r1
 8000404:	431e      	orrs	r6, r3
 8000406:	40cc      	lsrs	r4, r1
 8000408:	e9c5 6400 	strd	r6, r4, [r5]
 800040c:	2100      	movs	r1, #0
 800040e:	e750      	b.n	80002b2 <__udivmoddi4+0xa6>
 8000410:	f1c2 0320 	rsb	r3, r2, #32
 8000414:	fa20 f103 	lsr.w	r1, r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa24 f303 	lsr.w	r3, r4, r3
 8000420:	4094      	lsls	r4, r2
 8000422:	430c      	orrs	r4, r1
 8000424:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000428:	fa00 fe02 	lsl.w	lr, r0, r2
 800042c:	fa1f f78c 	uxth.w	r7, ip
 8000430:	fbb3 f0f8 	udiv	r0, r3, r8
 8000434:	fb08 3110 	mls	r1, r8, r0, r3
 8000438:	0c23      	lsrs	r3, r4, #16
 800043a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043e:	fb00 f107 	mul.w	r1, r0, r7
 8000442:	4299      	cmp	r1, r3
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x24c>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 800044e:	d22c      	bcs.n	80004aa <__udivmoddi4+0x29e>
 8000450:	4299      	cmp	r1, r3
 8000452:	d92a      	bls.n	80004aa <__udivmoddi4+0x29e>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1a5b      	subs	r3, r3, r1
 800045a:	b2a4      	uxth	r4, r4
 800045c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000460:	fb08 3311 	mls	r3, r8, r1, r3
 8000464:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000468:	fb01 f307 	mul.w	r3, r1, r7
 800046c:	42a3      	cmp	r3, r4
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x276>
 8000470:	eb1c 0404 	adds.w	r4, ip, r4
 8000474:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000478:	d213      	bcs.n	80004a2 <__udivmoddi4+0x296>
 800047a:	42a3      	cmp	r3, r4
 800047c:	d911      	bls.n	80004a2 <__udivmoddi4+0x296>
 800047e:	3902      	subs	r1, #2
 8000480:	4464      	add	r4, ip
 8000482:	1ae4      	subs	r4, r4, r3
 8000484:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000488:	e739      	b.n	80002fe <__udivmoddi4+0xf2>
 800048a:	4604      	mov	r4, r0
 800048c:	e6f0      	b.n	8000270 <__udivmoddi4+0x64>
 800048e:	4608      	mov	r0, r1
 8000490:	e706      	b.n	80002a0 <__udivmoddi4+0x94>
 8000492:	45c8      	cmp	r8, r9
 8000494:	d2ae      	bcs.n	80003f4 <__udivmoddi4+0x1e8>
 8000496:	ebb9 0e02 	subs.w	lr, r9, r2
 800049a:	eb63 0c07 	sbc.w	ip, r3, r7
 800049e:	3801      	subs	r0, #1
 80004a0:	e7a8      	b.n	80003f4 <__udivmoddi4+0x1e8>
 80004a2:	4631      	mov	r1, r6
 80004a4:	e7ed      	b.n	8000482 <__udivmoddi4+0x276>
 80004a6:	4603      	mov	r3, r0
 80004a8:	e799      	b.n	80003de <__udivmoddi4+0x1d2>
 80004aa:	4630      	mov	r0, r6
 80004ac:	e7d4      	b.n	8000458 <__udivmoddi4+0x24c>
 80004ae:	46d6      	mov	lr, sl
 80004b0:	e77f      	b.n	80003b2 <__udivmoddi4+0x1a6>
 80004b2:	4463      	add	r3, ip
 80004b4:	3802      	subs	r0, #2
 80004b6:	e74d      	b.n	8000354 <__udivmoddi4+0x148>
 80004b8:	4606      	mov	r6, r0
 80004ba:	4623      	mov	r3, r4
 80004bc:	4608      	mov	r0, r1
 80004be:	e70f      	b.n	80002e0 <__udivmoddi4+0xd4>
 80004c0:	3e02      	subs	r6, #2
 80004c2:	4463      	add	r3, ip
 80004c4:	e730      	b.n	8000328 <__udivmoddi4+0x11c>
 80004c6:	bf00      	nop

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b088      	sub	sp, #32
 80004d0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004d2:	f107 030c 	add.w	r3, r7, #12
 80004d6:	2200      	movs	r2, #0
 80004d8:	601a      	str	r2, [r3, #0]
 80004da:	605a      	str	r2, [r3, #4]
 80004dc:	609a      	str	r2, [r3, #8]
 80004de:	60da      	str	r2, [r3, #12]
 80004e0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004e2:	4b1f      	ldr	r3, [pc, #124]	@ (8000560 <MX_GPIO_Init+0x94>)
 80004e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80004e6:	4a1e      	ldr	r2, [pc, #120]	@ (8000560 <MX_GPIO_Init+0x94>)
 80004e8:	f043 0304 	orr.w	r3, r3, #4
 80004ec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80004ee:	4b1c      	ldr	r3, [pc, #112]	@ (8000560 <MX_GPIO_Init+0x94>)
 80004f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80004f2:	f003 0304 	and.w	r3, r3, #4
 80004f6:	60bb      	str	r3, [r7, #8]
 80004f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004fa:	4b19      	ldr	r3, [pc, #100]	@ (8000560 <MX_GPIO_Init+0x94>)
 80004fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80004fe:	4a18      	ldr	r2, [pc, #96]	@ (8000560 <MX_GPIO_Init+0x94>)
 8000500:	f043 0301 	orr.w	r3, r3, #1
 8000504:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000506:	4b16      	ldr	r3, [pc, #88]	@ (8000560 <MX_GPIO_Init+0x94>)
 8000508:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800050a:	f003 0301 	and.w	r3, r3, #1
 800050e:	607b      	str	r3, [r7, #4]
 8000510:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000512:	4b13      	ldr	r3, [pc, #76]	@ (8000560 <MX_GPIO_Init+0x94>)
 8000514:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000516:	4a12      	ldr	r2, [pc, #72]	@ (8000560 <MX_GPIO_Init+0x94>)
 8000518:	f043 0302 	orr.w	r3, r3, #2
 800051c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800051e:	4b10      	ldr	r3, [pc, #64]	@ (8000560 <MX_GPIO_Init+0x94>)
 8000520:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000522:	f003 0302 	and.w	r3, r3, #2
 8000526:	603b      	str	r3, [r7, #0]
 8000528:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CSN_Pin|CE_Pin, GPIO_PIN_RESET);
 800052a:	2200      	movs	r2, #0
 800052c:	f44f 6110 	mov.w	r1, #2304	@ 0x900
 8000530:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000534:	f001 f968 	bl	8001808 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = CSN_Pin|CE_Pin;
 8000538:	f44f 6310 	mov.w	r3, #2304	@ 0x900
 800053c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800053e:	2301      	movs	r3, #1
 8000540:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000542:	2300      	movs	r3, #0
 8000544:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000546:	2300      	movs	r3, #0
 8000548:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800054a:	f107 030c 	add.w	r3, r7, #12
 800054e:	4619      	mov	r1, r3
 8000550:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000554:	f000 ffee 	bl	8001534 <HAL_GPIO_Init>

}
 8000558:	bf00      	nop
 800055a:	3720      	adds	r7, #32
 800055c:	46bd      	mov	sp, r7
 800055e:	bd80      	pop	{r7, pc}
 8000560:	40021000 	.word	0x40021000

08000564 <nRF24_CE_L>:

#ifdef USE_HAL_DRIVER
extern SPI_HandleTypeDef hspi3;


static inline void nRF24_CE_L() {
 8000564:	b580      	push	{r7, lr}
 8000566:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CE_GPIO_Port, CE_Pin, GPIO_PIN_RESET);
 8000568:	2200      	movs	r2, #0
 800056a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800056e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000572:	f001 f949 	bl	8001808 <HAL_GPIO_WritePin>
}
 8000576:	bf00      	nop
 8000578:	bd80      	pop	{r7, pc}

0800057a <nRF24_CE_H>:

static inline void nRF24_CE_H() {
 800057a:	b580      	push	{r7, lr}
 800057c:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CE_GPIO_Port, CE_Pin, GPIO_PIN_SET);
 800057e:	2201      	movs	r2, #1
 8000580:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000584:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000588:	f001 f93e 	bl	8001808 <HAL_GPIO_WritePin>
}
 800058c:	bf00      	nop
 800058e:	bd80      	pop	{r7, pc}

08000590 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b08a      	sub	sp, #40	@ 0x28
 8000594:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000596:	f000 fe4e 	bl	8001236 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800059a:	f000 f83d 	bl	8000618 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800059e:	f7ff ff95 	bl	80004cc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005a2:	f000 fd45 	bl	8001030 <MX_USART2_UART_Init>
  MX_SPI3_Init();
 80005a6:	f000 fc2b 	bl	8000e00 <MX_SPI3_Init>
  MX_USART1_UART_Init();
 80005aa:	f000 fd11 	bl	8000fd0 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  nRF24_CE_L();
 80005ae:	f7ff ffd9 	bl	8000564 <nRF24_CE_L>
  radioInitSuccess = nRF24_Check();
 80005b2:	f000 f9c3 	bl	800093c <nRF24_Check>
 80005b6:	4603      	mov	r3, r0
 80005b8:	461a      	mov	r2, r3
 80005ba:	4b14      	ldr	r3, [pc, #80]	@ (800060c <main+0x7c>)
 80005bc:	701a      	strb	r2, [r3, #0]

  radioSetup();
 80005be:	f000 f88d 	bl	80006dc <radioSetup>

  uint8_t rx_buffer[20]={0};
 80005c2:	2300      	movs	r3, #0
 80005c4:	617b      	str	r3, [r7, #20]
 80005c6:	f107 0318 	add.w	r3, r7, #24
 80005ca:	2200      	movs	r2, #0
 80005cc:	601a      	str	r2, [r3, #0]
 80005ce:	605a      	str	r2, [r3, #4]
 80005d0:	609a      	str	r2, [r3, #8]
 80005d2:	60da      	str	r2, [r3, #12]
  uint8_t tx_buffer[20]={0};
 80005d4:	2300      	movs	r3, #0
 80005d6:	603b      	str	r3, [r7, #0]
 80005d8:	1d3b      	adds	r3, r7, #4
 80005da:	2200      	movs	r2, #0
 80005dc:	601a      	str	r2, [r3, #0]
 80005de:	605a      	str	r2, [r3, #4]
 80005e0:	609a      	str	r2, [r3, #8]
 80005e2:	60da      	str	r2, [r3, #12]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  receiveData(); // also sends data via UART
 80005e4:	f000 f8a8 	bl	8000738 <receiveData>
	  UARTbuf[255] =  '\r';

   	  HAL_UART_Transmit(&huart2, (uint8_t *)UARTbuf, 255, 100);
   	  */

	  HAL_UART_Receive(&huart1,rx_buffer,20,100);
 80005e8:	f107 0114 	add.w	r1, r7, #20
 80005ec:	2364      	movs	r3, #100	@ 0x64
 80005ee:	2214      	movs	r2, #20
 80005f0:	4807      	ldr	r0, [pc, #28]	@ (8000610 <main+0x80>)
 80005f2:	f002 ffc2 	bl	800357a <HAL_UART_Receive>

	  HAL_UART_Transmit(&huart2,tx_buffer,20,100);
 80005f6:	4639      	mov	r1, r7
 80005f8:	2364      	movs	r3, #100	@ 0x64
 80005fa:	2214      	movs	r2, #20
 80005fc:	4805      	ldr	r0, [pc, #20]	@ (8000614 <main+0x84>)
 80005fe:	f002 ff33 	bl	8003468 <HAL_UART_Transmit>

   	  HAL_Delay(1);
 8000602:	2001      	movs	r0, #1
 8000604:	f000 fe8c 	bl	8001320 <HAL_Delay>
	  receiveData(); // also sends data via UART
 8000608:	bf00      	nop
 800060a:	e7eb      	b.n	80005e4 <main+0x54>
 800060c:	2000002c 	.word	0x2000002c
 8000610:	200000b0 	.word	0x200000b0
 8000614:	20000138 	.word	0x20000138

08000618 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b096      	sub	sp, #88	@ 0x58
 800061c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800061e:	f107 0314 	add.w	r3, r7, #20
 8000622:	2244      	movs	r2, #68	@ 0x44
 8000624:	2100      	movs	r1, #0
 8000626:	4618      	mov	r0, r3
 8000628:	f003 fcb7 	bl	8003f9a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800062c:	463b      	mov	r3, r7
 800062e:	2200      	movs	r2, #0
 8000630:	601a      	str	r2, [r3, #0]
 8000632:	605a      	str	r2, [r3, #4]
 8000634:	609a      	str	r2, [r3, #8]
 8000636:	60da      	str	r2, [r3, #12]
 8000638:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800063a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800063e:	f001 f919 	bl	8001874 <HAL_PWREx_ControlVoltageScaling>
 8000642:	4603      	mov	r3, r0
 8000644:	2b00      	cmp	r3, #0
 8000646:	d001      	beq.n	800064c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000648:	f000 f8aa 	bl	80007a0 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800064c:	f001 f8f4 	bl	8001838 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000650:	4b21      	ldr	r3, [pc, #132]	@ (80006d8 <SystemClock_Config+0xc0>)
 8000652:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000656:	4a20      	ldr	r2, [pc, #128]	@ (80006d8 <SystemClock_Config+0xc0>)
 8000658:	f023 0318 	bic.w	r3, r3, #24
 800065c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000660:	2314      	movs	r3, #20
 8000662:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000664:	2301      	movs	r3, #1
 8000666:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000668:	2301      	movs	r3, #1
 800066a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800066c:	2300      	movs	r3, #0
 800066e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000670:	2360      	movs	r3, #96	@ 0x60
 8000672:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000674:	2302      	movs	r3, #2
 8000676:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000678:	2301      	movs	r3, #1
 800067a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800067c:	2301      	movs	r3, #1
 800067e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000680:	2328      	movs	r3, #40	@ 0x28
 8000682:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000684:	2307      	movs	r3, #7
 8000686:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000688:	2302      	movs	r3, #2
 800068a:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800068c:	2302      	movs	r3, #2
 800068e:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000690:	f107 0314 	add.w	r3, r7, #20
 8000694:	4618      	mov	r0, r3
 8000696:	f001 f943 	bl	8001920 <HAL_RCC_OscConfig>
 800069a:	4603      	mov	r3, r0
 800069c:	2b00      	cmp	r3, #0
 800069e:	d001      	beq.n	80006a4 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80006a0:	f000 f87e 	bl	80007a0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006a4:	230f      	movs	r3, #15
 80006a6:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006a8:	2303      	movs	r3, #3
 80006aa:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006ac:	2300      	movs	r3, #0
 80006ae:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006b0:	2300      	movs	r3, #0
 80006b2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006b4:	2300      	movs	r3, #0
 80006b6:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80006b8:	463b      	mov	r3, r7
 80006ba:	2104      	movs	r1, #4
 80006bc:	4618      	mov	r0, r3
 80006be:	f001 fd43 	bl	8002148 <HAL_RCC_ClockConfig>
 80006c2:	4603      	mov	r3, r0
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d001      	beq.n	80006cc <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80006c8:	f000 f86a 	bl	80007a0 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80006cc:	f002 f956 	bl	800297c <HAL_RCCEx_EnableMSIPLLMode>
}
 80006d0:	bf00      	nop
 80006d2:	3758      	adds	r7, #88	@ 0x58
 80006d4:	46bd      	mov	sp, r7
 80006d6:	bd80      	pop	{r7, pc}
 80006d8:	40021000 	.word	0x40021000

080006dc <radioSetup>:

	// Put the transceiver to the RX mode
	nRF24_CE_H();
}
*/
void radioSetup(void){
 80006dc:	b580      	push	{r7, lr}
 80006de:	af00      	add	r7, sp, #0
	// Set RF channel
	nRF24_SetRFChannel(40);
 80006e0:	2028      	movs	r0, #40	@ 0x28
 80006e2:	f000 fa06 	bl	8000af2 <nRF24_SetRFChannel>

	// Set data rate
	nRF24_SetDataRate(nRF24_DR_2Mbps);
 80006e6:	2008      	movs	r0, #8
 80006e8:	f000 fa87 	bl	8000bfa <nRF24_SetDataRate>

	// Set CRC scheme
	nRF24_SetCRCScheme(nRF24_CRC_2byte);
 80006ec:	200c      	movs	r0, #12
 80006ee:	f000 f9df 	bl	8000ab0 <nRF24_SetCRCScheme>

	// Set address width, its common for all pipes (RX and TX)
	nRF24_SetAddrWidth(3);
 80006f2:	2003      	movs	r0, #3
 80006f4:	f000 fa0b 	bl	8000b0e <nRF24_SetAddrWidth>

	// Configure RX PIPE
	static const uint8_t nRF24_ADDR[] = {'E', 'S', 'B'};
	nRF24_SetAddr(nRF24_PIPE1, nRF24_ADDR); // program address for pipe
 80006f8:	490e      	ldr	r1, [pc, #56]	@ (8000734 <radioSetup+0x58>)
 80006fa:	2001      	movs	r0, #1
 80006fc:	f000 fa18 	bl	8000b30 <nRF24_SetAddr>
	nRF24_SetRXPipe(nRF24_PIPE1, nRF24_AA_ON, 10); // Auto-ACK: enabled, payload length: 10 bytes
 8000700:	220a      	movs	r2, #10
 8000702:	2101      	movs	r1, #1
 8000704:	2001      	movs	r0, #1
 8000706:	f000 fa93 	bl	8000c30 <nRF24_SetRXPipe>

	// Set TX power for Auto-ACK (maximum, to ensure that transmitter will hear ACK reply)
	nRF24_SetTXPower(nRF24_TXPWR_0dBm);
 800070a:	2006      	movs	r0, #6
 800070c:	f000 fa5a 	bl	8000bc4 <nRF24_SetTXPower>

	// Set operational mode (PRX == receiver)
	nRF24_SetOperationalMode(nRF24_MODE_RX);
 8000710:	2001      	movs	r0, #1
 8000712:	f000 f960 	bl	80009d6 <nRF24_SetOperationalMode>

	// Clear any pending IRQ flags
	nRF24_ClearIRQFlags();
 8000716:	f000 faf2 	bl	8000cfe <nRF24_ClearIRQFlags>

	// Wake the transceiver
	nRF24_SetPowerMode(nRF24_PWR_UP);
 800071a:	2002      	movs	r0, #2
 800071c:	f000 f93c 	bl	8000998 <nRF24_SetPowerMode>

	// Enable DPL
	nRF24_SetDynamicPayloadLength(nRF24_DPL_ON);
 8000720:	2001      	movs	r0, #1
 8000722:	f000 f979 	bl	8000a18 <nRF24_SetDynamicPayloadLength>

	nRF24_SetPayloadWithAck(1);
 8000726:	2001      	movs	r0, #1
 8000728:	f000 f9a0 	bl	8000a6c <nRF24_SetPayloadWithAck>

		// Put the transceiver to the RX mode
	nRF24_CE_H();
 800072c:	f7ff ff25 	bl	800057a <nRF24_CE_H>
}
 8000730:	bf00      	nop
 8000732:	bd80      	pop	{r7, pc}
 8000734:	08004014 	.word	0x08004014

08000738 <receiveData>:

void receiveData(void){
 8000738:	b580      	push	{r7, lr}
 800073a:	af00      	add	r7, sp, #0
	if (!radioInitSuccess) return;
 800073c:	4b12      	ldr	r3, [pc, #72]	@ (8000788 <receiveData+0x50>)
 800073e:	781b      	ldrb	r3, [r3, #0]
 8000740:	2b00      	cmp	r3, #0
 8000742:	d01e      	beq.n	8000782 <receiveData+0x4a>

	if (nRF24_GetStatus_RXFIFO() != nRF24_STATUS_RXFIFO_EMPTY) {
 8000744:	f000 fac8 	bl	8000cd8 <nRF24_GetStatus_RXFIFO>
 8000748:	4603      	mov	r3, r0
 800074a:	2b01      	cmp	r3, #1
 800074c:	d01a      	beq.n	8000784 <receiveData+0x4c>

		c++;
 800074e:	4b0f      	ldr	r3, [pc, #60]	@ (800078c <receiveData+0x54>)
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	3301      	adds	r3, #1
 8000754:	4a0d      	ldr	r2, [pc, #52]	@ (800078c <receiveData+0x54>)
 8000756:	6013      	str	r3, [r2, #0]
		pipeRX = nRF24_ReadPayload(bufRX, &bufLenRX); // read a payload to buffer
 8000758:	490d      	ldr	r1, [pc, #52]	@ (8000790 <receiveData+0x58>)
 800075a:	480e      	ldr	r0, [pc, #56]	@ (8000794 <receiveData+0x5c>)
 800075c:	f000 fb40 	bl	8000de0 <nRF24_ReadPayload>
 8000760:	4603      	mov	r3, r0
 8000762:	461a      	mov	r2, r3
 8000764:	4b0c      	ldr	r3, [pc, #48]	@ (8000798 <receiveData+0x60>)
 8000766:	701a      	strb	r2, [r3, #0]

		nRF24_ClearIRQFlags(); // clear any pending IRQ bits
 8000768:	f000 fac9 	bl	8000cfe <nRF24_ClearIRQFlags>
			for (int j = 0; j < 28; j++) txBuf[j + 4] = charImg[i][j];
			nRF24_TransmitPacket(&txBuf[0], 32);
		}
		*/

		HAL_UART_Transmit(&huart2,(uint8_t *) bufRX, strlen(bufRX), 100);
 800076c:	4809      	ldr	r0, [pc, #36]	@ (8000794 <receiveData+0x5c>)
 800076e:	f7ff fd2d 	bl	80001cc <strlen>
 8000772:	4603      	mov	r3, r0
 8000774:	b29a      	uxth	r2, r3
 8000776:	2364      	movs	r3, #100	@ 0x64
 8000778:	4906      	ldr	r1, [pc, #24]	@ (8000794 <receiveData+0x5c>)
 800077a:	4808      	ldr	r0, [pc, #32]	@ (800079c <receiveData+0x64>)
 800077c:	f002 fe74 	bl	8003468 <HAL_UART_Transmit>
 8000780:	e000      	b.n	8000784 <receiveData+0x4c>
	if (!radioInitSuccess) return;
 8000782:	bf00      	nop
	}
}
 8000784:	bd80      	pop	{r7, pc}
 8000786:	bf00      	nop
 8000788:	2000002c 	.word	0x2000002c
 800078c:	20000048 	.word	0x20000048
 8000790:	20000000 	.word	0x20000000
 8000794:	20000030 	.word	0x20000030
 8000798:	20000044 	.word	0x20000044
 800079c:	20000138 	.word	0x20000138

080007a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007a0:	b480      	push	{r7}
 80007a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007a4:	b672      	cpsid	i
}
 80007a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007a8:	bf00      	nop
 80007aa:	e7fd      	b.n	80007a8 <Error_Handler+0x8>

080007ac <nRF24_CSN_L>:

static inline void nRF24_CSN_L() {
 80007ac:	b580      	push	{r7, lr}
 80007ae:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CSN_GPIO_Port, CSN_Pin, GPIO_PIN_RESET);
 80007b0:	2200      	movs	r2, #0
 80007b2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80007b6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80007ba:	f001 f825 	bl	8001808 <HAL_GPIO_WritePin>
}
 80007be:	bf00      	nop
 80007c0:	bd80      	pop	{r7, pc}

080007c2 <nRF24_CSN_H>:

static inline void nRF24_CSN_H() {
 80007c2:	b580      	push	{r7, lr}
 80007c4:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CSN_GPIO_Port, CSN_Pin, GPIO_PIN_SET);
 80007c6:	2201      	movs	r2, #1
 80007c8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80007cc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80007d0:	f001 f81a 	bl	8001808 <HAL_GPIO_WritePin>
}
 80007d4:	bf00      	nop
 80007d6:	bd80      	pop	{r7, pc}

080007d8 <nRF24_LL_RW>:


static inline uint8_t nRF24_LL_RW(uint8_t data) {
 80007d8:	b580      	push	{r7, lr}
 80007da:	b086      	sub	sp, #24
 80007dc:	af02      	add	r7, sp, #8
 80007de:	4603      	mov	r3, r0
 80007e0:	71fb      	strb	r3, [r7, #7]
    // Wait until TX buffer is empty
    uint8_t result;
    if(HAL_SPI_TransmitReceive(&hspi3,&data,&result,1,2000)!=HAL_OK) {
 80007e2:	f107 020f 	add.w	r2, r7, #15
 80007e6:	1df9      	adds	r1, r7, #7
 80007e8:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80007ec:	9300      	str	r3, [sp, #0]
 80007ee:	2301      	movs	r3, #1
 80007f0:	4806      	ldr	r0, [pc, #24]	@ (800080c <nRF24_LL_RW+0x34>)
 80007f2:	f002 fa68 	bl	8002cc6 <HAL_SPI_TransmitReceive>
 80007f6:	4603      	mov	r3, r0
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d001      	beq.n	8000800 <nRF24_LL_RW+0x28>
        Error_Handler();
 80007fc:	f7ff ffd0 	bl	80007a0 <Error_Handler>
    };
    return result;
 8000800:	7bfb      	ldrb	r3, [r7, #15]
}
 8000802:	4618      	mov	r0, r3
 8000804:	3710      	adds	r7, #16
 8000806:	46bd      	mov	sp, r7
 8000808:	bd80      	pop	{r7, pc}
 800080a:	bf00      	nop
 800080c:	2000004c 	.word	0x2000004c

08000810 <nRF24_ReadReg>:

// Read a register
// input:
//   reg - number of register to read
// return: value of register
static uint8_t nRF24_ReadReg(uint8_t reg) {
 8000810:	b580      	push	{r7, lr}
 8000812:	b084      	sub	sp, #16
 8000814:	af00      	add	r7, sp, #0
 8000816:	4603      	mov	r3, r0
 8000818:	71fb      	strb	r3, [r7, #7]
	uint8_t value;

	nRF24_CSN_L();
 800081a:	f7ff ffc7 	bl	80007ac <nRF24_CSN_L>
	nRF24_LL_RW(reg & nRF24_MASK_REG_MAP);
 800081e:	79fb      	ldrb	r3, [r7, #7]
 8000820:	f003 031f 	and.w	r3, r3, #31
 8000824:	b2db      	uxtb	r3, r3
 8000826:	4618      	mov	r0, r3
 8000828:	f7ff ffd6 	bl	80007d8 <nRF24_LL_RW>
	value = nRF24_LL_RW(nRF24_CMD_NOP);
 800082c:	20ff      	movs	r0, #255	@ 0xff
 800082e:	f7ff ffd3 	bl	80007d8 <nRF24_LL_RW>
 8000832:	4603      	mov	r3, r0
 8000834:	73fb      	strb	r3, [r7, #15]
	nRF24_CSN_H();
 8000836:	f7ff ffc4 	bl	80007c2 <nRF24_CSN_H>

	return value;
 800083a:	7bfb      	ldrb	r3, [r7, #15]
}
 800083c:	4618      	mov	r0, r3
 800083e:	3710      	adds	r7, #16
 8000840:	46bd      	mov	sp, r7
 8000842:	bd80      	pop	{r7, pc}

08000844 <nRF24_WriteReg>:

// Write a new value to register
// input:
//   reg - number of register to write
//   value - value to write
static void nRF24_WriteReg(uint8_t reg, uint8_t value) {
 8000844:	b580      	push	{r7, lr}
 8000846:	b082      	sub	sp, #8
 8000848:	af00      	add	r7, sp, #0
 800084a:	4603      	mov	r3, r0
 800084c:	460a      	mov	r2, r1
 800084e:	71fb      	strb	r3, [r7, #7]
 8000850:	4613      	mov	r3, r2
 8000852:	71bb      	strb	r3, [r7, #6]
	nRF24_CSN_L();
 8000854:	f7ff ffaa 	bl	80007ac <nRF24_CSN_L>
	if (reg < nRF24_CMD_W_REGISTER) {
 8000858:	79fb      	ldrb	r3, [r7, #7]
 800085a:	2b1f      	cmp	r3, #31
 800085c:	d810      	bhi.n	8000880 <nRF24_WriteReg+0x3c>
		// This is a register access
		nRF24_LL_RW(nRF24_CMD_W_REGISTER | (reg & nRF24_MASK_REG_MAP));
 800085e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000862:	f003 031f 	and.w	r3, r3, #31
 8000866:	b25b      	sxtb	r3, r3
 8000868:	f043 0320 	orr.w	r3, r3, #32
 800086c:	b25b      	sxtb	r3, r3
 800086e:	b2db      	uxtb	r3, r3
 8000870:	4618      	mov	r0, r3
 8000872:	f7ff ffb1 	bl	80007d8 <nRF24_LL_RW>
		nRF24_LL_RW(value);
 8000876:	79bb      	ldrb	r3, [r7, #6]
 8000878:	4618      	mov	r0, r3
 800087a:	f7ff ffad 	bl	80007d8 <nRF24_LL_RW>
 800087e:	e013      	b.n	80008a8 <nRF24_WriteReg+0x64>
	} else {
		// This is a single byte command or future command/register
		nRF24_LL_RW(reg);
 8000880:	79fb      	ldrb	r3, [r7, #7]
 8000882:	4618      	mov	r0, r3
 8000884:	f7ff ffa8 	bl	80007d8 <nRF24_LL_RW>
		if ((reg != nRF24_CMD_FLUSH_TX) && (reg != nRF24_CMD_FLUSH_RX) && \
 8000888:	79fb      	ldrb	r3, [r7, #7]
 800088a:	2be1      	cmp	r3, #225	@ 0xe1
 800088c:	d00c      	beq.n	80008a8 <nRF24_WriteReg+0x64>
 800088e:	79fb      	ldrb	r3, [r7, #7]
 8000890:	2be2      	cmp	r3, #226	@ 0xe2
 8000892:	d009      	beq.n	80008a8 <nRF24_WriteReg+0x64>
 8000894:	79fb      	ldrb	r3, [r7, #7]
 8000896:	2be3      	cmp	r3, #227	@ 0xe3
 8000898:	d006      	beq.n	80008a8 <nRF24_WriteReg+0x64>
				(reg != nRF24_CMD_REUSE_TX_PL) && (reg != nRF24_CMD_NOP)) {
 800089a:	79fb      	ldrb	r3, [r7, #7]
 800089c:	2bff      	cmp	r3, #255	@ 0xff
 800089e:	d003      	beq.n	80008a8 <nRF24_WriteReg+0x64>
			// Send register value
			nRF24_LL_RW(value);
 80008a0:	79bb      	ldrb	r3, [r7, #6]
 80008a2:	4618      	mov	r0, r3
 80008a4:	f7ff ff98 	bl	80007d8 <nRF24_LL_RW>
		}
	}
	nRF24_CSN_H();
 80008a8:	f7ff ff8b 	bl	80007c2 <nRF24_CSN_H>
}
 80008ac:	bf00      	nop
 80008ae:	3708      	adds	r7, #8
 80008b0:	46bd      	mov	sp, r7
 80008b2:	bd80      	pop	{r7, pc}

080008b4 <nRF24_ReadMBReg>:
// Read a multi-byte register
// input:
//   reg - number of register to read
//   pBuf - pointer to the buffer for register data
//   count - number of bytes to read
static void nRF24_ReadMBReg(uint8_t reg, uint8_t *pBuf, uint8_t count) {
 80008b4:	b590      	push	{r4, r7, lr}
 80008b6:	b083      	sub	sp, #12
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	4603      	mov	r3, r0
 80008bc:	6039      	str	r1, [r7, #0]
 80008be:	71fb      	strb	r3, [r7, #7]
 80008c0:	4613      	mov	r3, r2
 80008c2:	71bb      	strb	r3, [r7, #6]
	nRF24_CSN_L();
 80008c4:	f7ff ff72 	bl	80007ac <nRF24_CSN_L>
	nRF24_LL_RW(reg);
 80008c8:	79fb      	ldrb	r3, [r7, #7]
 80008ca:	4618      	mov	r0, r3
 80008cc:	f7ff ff84 	bl	80007d8 <nRF24_LL_RW>
	while (count--) {
 80008d0:	e007      	b.n	80008e2 <nRF24_ReadMBReg+0x2e>
		*pBuf++ = nRF24_LL_RW(nRF24_CMD_NOP);
 80008d2:	683c      	ldr	r4, [r7, #0]
 80008d4:	1c63      	adds	r3, r4, #1
 80008d6:	603b      	str	r3, [r7, #0]
 80008d8:	20ff      	movs	r0, #255	@ 0xff
 80008da:	f7ff ff7d 	bl	80007d8 <nRF24_LL_RW>
 80008de:	4603      	mov	r3, r0
 80008e0:	7023      	strb	r3, [r4, #0]
	while (count--) {
 80008e2:	79bb      	ldrb	r3, [r7, #6]
 80008e4:	1e5a      	subs	r2, r3, #1
 80008e6:	71ba      	strb	r2, [r7, #6]
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d1f2      	bne.n	80008d2 <nRF24_ReadMBReg+0x1e>
	}
	nRF24_CSN_H();
 80008ec:	f7ff ff69 	bl	80007c2 <nRF24_CSN_H>
}
 80008f0:	bf00      	nop
 80008f2:	370c      	adds	r7, #12
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bd90      	pop	{r4, r7, pc}

080008f8 <nRF24_WriteMBReg>:
// Write a multi-byte register
// input:
//   reg - number of register to write
//   pBuf - pointer to the buffer with data to write
//   count - number of bytes to write
static void nRF24_WriteMBReg(uint8_t reg, uint8_t *pBuf, uint8_t count) {
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b082      	sub	sp, #8
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	4603      	mov	r3, r0
 8000900:	6039      	str	r1, [r7, #0]
 8000902:	71fb      	strb	r3, [r7, #7]
 8000904:	4613      	mov	r3, r2
 8000906:	71bb      	strb	r3, [r7, #6]
	nRF24_CSN_L();
 8000908:	f7ff ff50 	bl	80007ac <nRF24_CSN_L>
	nRF24_LL_RW(reg);
 800090c:	79fb      	ldrb	r3, [r7, #7]
 800090e:	4618      	mov	r0, r3
 8000910:	f7ff ff62 	bl	80007d8 <nRF24_LL_RW>
	while (count--) {
 8000914:	e006      	b.n	8000924 <nRF24_WriteMBReg+0x2c>
		nRF24_LL_RW(*pBuf++);
 8000916:	683b      	ldr	r3, [r7, #0]
 8000918:	1c5a      	adds	r2, r3, #1
 800091a:	603a      	str	r2, [r7, #0]
 800091c:	781b      	ldrb	r3, [r3, #0]
 800091e:	4618      	mov	r0, r3
 8000920:	f7ff ff5a 	bl	80007d8 <nRF24_LL_RW>
	while (count--) {
 8000924:	79bb      	ldrb	r3, [r7, #6]
 8000926:	1e5a      	subs	r2, r3, #1
 8000928:	71ba      	strb	r2, [r7, #6]
 800092a:	2b00      	cmp	r3, #0
 800092c:	d1f3      	bne.n	8000916 <nRF24_WriteMBReg+0x1e>
	}
	nRF24_CSN_H();
 800092e:	f7ff ff48 	bl	80007c2 <nRF24_CSN_H>
}
 8000932:	bf00      	nop
 8000934:	3708      	adds	r7, #8
 8000936:	46bd      	mov	sp, r7
 8000938:	bd80      	pop	{r7, pc}
	...

0800093c <nRF24_Check>:

// Check if the nRF24L01 present
// return:
//   1 - nRF24L01 is online and responding
//   0 - received sequence differs from original
uint8_t nRF24_Check(void) {
 800093c:	b580      	push	{r7, lr}
 800093e:	b084      	sub	sp, #16
 8000940:	af00      	add	r7, sp, #0
	uint8_t rxbuf[5];
	uint8_t i;
	uint8_t *ptr = (uint8_t *)nRF24_TEST_ADDR;
 8000942:	4b14      	ldr	r3, [pc, #80]	@ (8000994 <nRF24_Check+0x58>)
 8000944:	60bb      	str	r3, [r7, #8]

	// Write test TX address and read TX_ADDR register
	nRF24_WriteMBReg(nRF24_CMD_W_REGISTER | nRF24_REG_TX_ADDR, ptr, 5);
 8000946:	2205      	movs	r2, #5
 8000948:	68b9      	ldr	r1, [r7, #8]
 800094a:	2030      	movs	r0, #48	@ 0x30
 800094c:	f7ff ffd4 	bl	80008f8 <nRF24_WriteMBReg>
	nRF24_ReadMBReg(nRF24_CMD_R_REGISTER | nRF24_REG_TX_ADDR, rxbuf, 5);
 8000950:	463b      	mov	r3, r7
 8000952:	2205      	movs	r2, #5
 8000954:	4619      	mov	r1, r3
 8000956:	2010      	movs	r0, #16
 8000958:	f7ff ffac 	bl	80008b4 <nRF24_ReadMBReg>

	// Compare buffers, return error on first mismatch
	for (i = 0; i < 5; i++) {
 800095c:	2300      	movs	r3, #0
 800095e:	73fb      	strb	r3, [r7, #15]
 8000960:	e00f      	b.n	8000982 <nRF24_Check+0x46>
		if (rxbuf[i] != *ptr++) return 0;
 8000962:	7bfb      	ldrb	r3, [r7, #15]
 8000964:	3310      	adds	r3, #16
 8000966:	443b      	add	r3, r7
 8000968:	f813 2c10 	ldrb.w	r2, [r3, #-16]
 800096c:	68bb      	ldr	r3, [r7, #8]
 800096e:	1c59      	adds	r1, r3, #1
 8000970:	60b9      	str	r1, [r7, #8]
 8000972:	781b      	ldrb	r3, [r3, #0]
 8000974:	429a      	cmp	r2, r3
 8000976:	d001      	beq.n	800097c <nRF24_Check+0x40>
 8000978:	2300      	movs	r3, #0
 800097a:	e006      	b.n	800098a <nRF24_Check+0x4e>
	for (i = 0; i < 5; i++) {
 800097c:	7bfb      	ldrb	r3, [r7, #15]
 800097e:	3301      	adds	r3, #1
 8000980:	73fb      	strb	r3, [r7, #15]
 8000982:	7bfb      	ldrb	r3, [r7, #15]
 8000984:	2b04      	cmp	r3, #4
 8000986:	d9ec      	bls.n	8000962 <nRF24_Check+0x26>
	}

	return 1;
 8000988:	2301      	movs	r3, #1
}
 800098a:	4618      	mov	r0, r3
 800098c:	3710      	adds	r7, #16
 800098e:	46bd      	mov	sp, r7
 8000990:	bd80      	pop	{r7, pc}
 8000992:	bf00      	nop
 8000994:	0800400c 	.word	0x0800400c

08000998 <nRF24_SetPowerMode>:

// Control transceiver power mode
// input:
//   mode - new state of power mode, one of nRF24_PWR_xx values
void nRF24_SetPowerMode(uint8_t mode) {
 8000998:	b580      	push	{r7, lr}
 800099a:	b084      	sub	sp, #16
 800099c:	af00      	add	r7, sp, #0
 800099e:	4603      	mov	r3, r0
 80009a0:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	reg = nRF24_ReadReg(nRF24_REG_CONFIG);
 80009a2:	2000      	movs	r0, #0
 80009a4:	f7ff ff34 	bl	8000810 <nRF24_ReadReg>
 80009a8:	4603      	mov	r3, r0
 80009aa:	73fb      	strb	r3, [r7, #15]
	if (mode == nRF24_PWR_UP) {
 80009ac:	79fb      	ldrb	r3, [r7, #7]
 80009ae:	2b02      	cmp	r3, #2
 80009b0:	d104      	bne.n	80009bc <nRF24_SetPowerMode+0x24>
		// Set the PWR_UP bit of CONFIG register to wake the transceiver
		// It goes into Stanby-I mode with consumption about 26uA
		reg |= nRF24_CONFIG_PWR_UP;
 80009b2:	7bfb      	ldrb	r3, [r7, #15]
 80009b4:	f043 0302 	orr.w	r3, r3, #2
 80009b8:	73fb      	strb	r3, [r7, #15]
 80009ba:	e003      	b.n	80009c4 <nRF24_SetPowerMode+0x2c>
	} else {
		// Clear the PWR_UP bit of CONFIG register to put the transceiver
		// into power down mode with consumption about 900nA
		reg &= ~nRF24_CONFIG_PWR_UP;
 80009bc:	7bfb      	ldrb	r3, [r7, #15]
 80009be:	f023 0302 	bic.w	r3, r3, #2
 80009c2:	73fb      	strb	r3, [r7, #15]
	}
	nRF24_WriteReg(nRF24_REG_CONFIG, reg);
 80009c4:	7bfb      	ldrb	r3, [r7, #15]
 80009c6:	4619      	mov	r1, r3
 80009c8:	2000      	movs	r0, #0
 80009ca:	f7ff ff3b 	bl	8000844 <nRF24_WriteReg>
}
 80009ce:	bf00      	nop
 80009d0:	3710      	adds	r7, #16
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bd80      	pop	{r7, pc}

080009d6 <nRF24_SetOperationalMode>:

// Set transceiver operational mode
// input:
//   mode - operational mode, one of nRF24_MODE_xx values
void nRF24_SetOperationalMode(uint8_t mode) {
 80009d6:	b580      	push	{r7, lr}
 80009d8:	b084      	sub	sp, #16
 80009da:	af00      	add	r7, sp, #0
 80009dc:	4603      	mov	r3, r0
 80009de:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	// Configure PRIM_RX bit of the CONFIG register
	reg  = nRF24_ReadReg(nRF24_REG_CONFIG);
 80009e0:	2000      	movs	r0, #0
 80009e2:	f7ff ff15 	bl	8000810 <nRF24_ReadReg>
 80009e6:	4603      	mov	r3, r0
 80009e8:	73fb      	strb	r3, [r7, #15]
	reg &= ~nRF24_CONFIG_PRIM_RX;
 80009ea:	7bfb      	ldrb	r3, [r7, #15]
 80009ec:	f023 0301 	bic.w	r3, r3, #1
 80009f0:	73fb      	strb	r3, [r7, #15]
	reg |= (mode & nRF24_CONFIG_PRIM_RX);
 80009f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009f6:	f003 0301 	and.w	r3, r3, #1
 80009fa:	b25a      	sxtb	r2, r3
 80009fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a00:	4313      	orrs	r3, r2
 8000a02:	b25b      	sxtb	r3, r3
 8000a04:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteReg(nRF24_REG_CONFIG, reg);
 8000a06:	7bfb      	ldrb	r3, [r7, #15]
 8000a08:	4619      	mov	r1, r3
 8000a0a:	2000      	movs	r0, #0
 8000a0c:	f7ff ff1a 	bl	8000844 <nRF24_WriteReg>
}
 8000a10:	bf00      	nop
 8000a12:	3710      	adds	r7, #16
 8000a14:	46bd      	mov	sp, r7
 8000a16:	bd80      	pop	{r7, pc}

08000a18 <nRF24_SetDynamicPayloadLength>:

// Set transceiver DynamicPayloadLength feature for all the pipes
// input:
//   mode - status, one of nRF24_DPL_xx values
void nRF24_SetDynamicPayloadLength(uint8_t mode) {
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b084      	sub	sp, #16
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	4603      	mov	r3, r0
 8000a20:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;
	reg  = nRF24_ReadReg(nRF24_REG_FEATURE);
 8000a22:	201d      	movs	r0, #29
 8000a24:	f7ff fef4 	bl	8000810 <nRF24_ReadReg>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	73fb      	strb	r3, [r7, #15]
	if(mode) {
 8000a2c:	79fb      	ldrb	r3, [r7, #7]
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d00c      	beq.n	8000a4c <nRF24_SetDynamicPayloadLength+0x34>
		nRF24_WriteReg(nRF24_REG_FEATURE, reg | nRF24_FEATURE_EN_DPL);
 8000a32:	7bfb      	ldrb	r3, [r7, #15]
 8000a34:	f043 0304 	orr.w	r3, r3, #4
 8000a38:	b2db      	uxtb	r3, r3
 8000a3a:	4619      	mov	r1, r3
 8000a3c:	201d      	movs	r0, #29
 8000a3e:	f7ff ff01 	bl	8000844 <nRF24_WriteReg>
		nRF24_WriteReg(nRF24_REG_DYNPD, 0x1F);
 8000a42:	211f      	movs	r1, #31
 8000a44:	201c      	movs	r0, #28
 8000a46:	f7ff fefd 	bl	8000844 <nRF24_WriteReg>
	} else {
		nRF24_WriteReg(nRF24_REG_FEATURE, reg &~ nRF24_FEATURE_EN_DPL);
		nRF24_WriteReg(nRF24_REG_DYNPD, 0x0);
	}
}
 8000a4a:	e00b      	b.n	8000a64 <nRF24_SetDynamicPayloadLength+0x4c>
		nRF24_WriteReg(nRF24_REG_FEATURE, reg &~ nRF24_FEATURE_EN_DPL);
 8000a4c:	7bfb      	ldrb	r3, [r7, #15]
 8000a4e:	f023 0304 	bic.w	r3, r3, #4
 8000a52:	b2db      	uxtb	r3, r3
 8000a54:	4619      	mov	r1, r3
 8000a56:	201d      	movs	r0, #29
 8000a58:	f7ff fef4 	bl	8000844 <nRF24_WriteReg>
		nRF24_WriteReg(nRF24_REG_DYNPD, 0x0);
 8000a5c:	2100      	movs	r1, #0
 8000a5e:	201c      	movs	r0, #28
 8000a60:	f7ff fef0 	bl	8000844 <nRF24_WriteReg>
}
 8000a64:	bf00      	nop
 8000a66:	3710      	adds	r7, #16
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	bd80      	pop	{r7, pc}

08000a6c <nRF24_SetPayloadWithAck>:

// Enables Payload With Ack. NB Refer to the datasheet for proper retransmit timing.
// input:
//   mode - status, 1 or 0
void nRF24_SetPayloadWithAck(uint8_t mode) {
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b084      	sub	sp, #16
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	4603      	mov	r3, r0
 8000a74:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;
	reg  = nRF24_ReadReg(nRF24_REG_FEATURE);
 8000a76:	201d      	movs	r0, #29
 8000a78:	f7ff feca 	bl	8000810 <nRF24_ReadReg>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	73fb      	strb	r3, [r7, #15]
	if(mode) {
 8000a80:	79fb      	ldrb	r3, [r7, #7]
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d008      	beq.n	8000a98 <nRF24_SetPayloadWithAck+0x2c>
		nRF24_WriteReg(nRF24_REG_FEATURE, reg | nRF24_FEATURE_EN_ACK_PAY);
 8000a86:	7bfb      	ldrb	r3, [r7, #15]
 8000a88:	f043 0302 	orr.w	r3, r3, #2
 8000a8c:	b2db      	uxtb	r3, r3
 8000a8e:	4619      	mov	r1, r3
 8000a90:	201d      	movs	r0, #29
 8000a92:	f7ff fed7 	bl	8000844 <nRF24_WriteReg>
	} else {
		nRF24_WriteReg(nRF24_REG_FEATURE, reg &~ nRF24_FEATURE_EN_ACK_PAY);
	}
}
 8000a96:	e007      	b.n	8000aa8 <nRF24_SetPayloadWithAck+0x3c>
		nRF24_WriteReg(nRF24_REG_FEATURE, reg &~ nRF24_FEATURE_EN_ACK_PAY);
 8000a98:	7bfb      	ldrb	r3, [r7, #15]
 8000a9a:	f023 0302 	bic.w	r3, r3, #2
 8000a9e:	b2db      	uxtb	r3, r3
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	201d      	movs	r0, #29
 8000aa4:	f7ff fece 	bl	8000844 <nRF24_WriteReg>
}
 8000aa8:	bf00      	nop
 8000aaa:	3710      	adds	r7, #16
 8000aac:	46bd      	mov	sp, r7
 8000aae:	bd80      	pop	{r7, pc}

08000ab0 <nRF24_SetCRCScheme>:
// Configure transceiver CRC scheme
// input:
//   scheme - CRC scheme, one of nRF24_CRC_xx values
// note: transceiver will forcibly turn on the CRC in case if auto acknowledgment
//       enabled for at least one RX pipe
void nRF24_SetCRCScheme(uint8_t scheme) {
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b084      	sub	sp, #16
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	// Configure EN_CRC[3] and CRCO[2] bits of the CONFIG register
	reg  = nRF24_ReadReg(nRF24_REG_CONFIG);
 8000aba:	2000      	movs	r0, #0
 8000abc:	f7ff fea8 	bl	8000810 <nRF24_ReadReg>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	73fb      	strb	r3, [r7, #15]
	reg &= ~nRF24_MASK_CRC;
 8000ac4:	7bfb      	ldrb	r3, [r7, #15]
 8000ac6:	f023 030c 	bic.w	r3, r3, #12
 8000aca:	73fb      	strb	r3, [r7, #15]
	reg |= (scheme & nRF24_MASK_CRC);
 8000acc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ad0:	f003 030c 	and.w	r3, r3, #12
 8000ad4:	b25a      	sxtb	r2, r3
 8000ad6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ada:	4313      	orrs	r3, r2
 8000adc:	b25b      	sxtb	r3, r3
 8000ade:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteReg(nRF24_REG_CONFIG, reg);
 8000ae0:	7bfb      	ldrb	r3, [r7, #15]
 8000ae2:	4619      	mov	r1, r3
 8000ae4:	2000      	movs	r0, #0
 8000ae6:	f7ff fead 	bl	8000844 <nRF24_WriteReg>
}
 8000aea:	bf00      	nop
 8000aec:	3710      	adds	r7, #16
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd80      	pop	{r7, pc}

08000af2 <nRF24_SetRFChannel>:
// Set frequency channel
// input:
//   channel - radio frequency channel, value from 0 to 127
// note: frequency will be (2400 + channel)MHz
// note: PLOS_CNT[7:4] bits of the OBSERVER_TX register will be reset
void nRF24_SetRFChannel(uint8_t channel) {
 8000af2:	b580      	push	{r7, lr}
 8000af4:	b082      	sub	sp, #8
 8000af6:	af00      	add	r7, sp, #0
 8000af8:	4603      	mov	r3, r0
 8000afa:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteReg(nRF24_REG_RF_CH, channel);
 8000afc:	79fb      	ldrb	r3, [r7, #7]
 8000afe:	4619      	mov	r1, r3
 8000b00:	2005      	movs	r0, #5
 8000b02:	f7ff fe9f 	bl	8000844 <nRF24_WriteReg>
}
 8000b06:	bf00      	nop
 8000b08:	3708      	adds	r7, #8
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd80      	pop	{r7, pc}

08000b0e <nRF24_SetAddrWidth>:

// Set of address widths
// input:
//   addr_width - RX/TX address field width, value from 3 to 5
// note: this setting is common for all pipes
void nRF24_SetAddrWidth(uint8_t addr_width) {
 8000b0e:	b580      	push	{r7, lr}
 8000b10:	b082      	sub	sp, #8
 8000b12:	af00      	add	r7, sp, #0
 8000b14:	4603      	mov	r3, r0
 8000b16:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteReg(nRF24_REG_SETUP_AW, addr_width - 2);
 8000b18:	79fb      	ldrb	r3, [r7, #7]
 8000b1a:	3b02      	subs	r3, #2
 8000b1c:	b2db      	uxtb	r3, r3
 8000b1e:	4619      	mov	r1, r3
 8000b20:	2003      	movs	r0, #3
 8000b22:	f7ff fe8f 	bl	8000844 <nRF24_WriteReg>
}
 8000b26:	bf00      	nop
 8000b28:	3708      	adds	r7, #8
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}
	...

08000b30 <nRF24_SetAddr>:
// note: buffer length must be equal to current address width of transceiver
// note: for pipes[2..5] only first byte of address will be written because
//       other bytes of address equals to pipe1
// note: for pipes[2..5] only first byte of address will be written because
//       pipes 1-5 share the four most significant address bytes
void nRF24_SetAddr(uint8_t pipe, const uint8_t *addr) {
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b084      	sub	sp, #16
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	4603      	mov	r3, r0
 8000b38:	6039      	str	r1, [r7, #0]
 8000b3a:	71fb      	strb	r3, [r7, #7]
	uint8_t addr_width;

	// RX_ADDR_Px register
	switch (pipe) {
 8000b3c:	79fb      	ldrb	r3, [r7, #7]
 8000b3e:	2b06      	cmp	r3, #6
 8000b40:	d00a      	beq.n	8000b58 <nRF24_SetAddr+0x28>
 8000b42:	2b06      	cmp	r3, #6
 8000b44:	dc36      	bgt.n	8000bb4 <nRF24_SetAddr+0x84>
 8000b46:	2b01      	cmp	r3, #1
 8000b48:	dc02      	bgt.n	8000b50 <nRF24_SetAddr+0x20>
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	da04      	bge.n	8000b58 <nRF24_SetAddr+0x28>
			// Write address LSBbyte (only first byte from the addr buffer)
			nRF24_WriteReg(nRF24_ADDR_REGS[pipe], *addr);
			break;
		default:
			// Incorrect pipe number -> do nothing
			break;
 8000b4e:	e031      	b.n	8000bb4 <nRF24_SetAddr+0x84>
 8000b50:	3b02      	subs	r3, #2
	switch (pipe) {
 8000b52:	2b03      	cmp	r3, #3
 8000b54:	d82e      	bhi.n	8000bb4 <nRF24_SetAddr+0x84>
 8000b56:	e023      	b.n	8000ba0 <nRF24_SetAddr+0x70>
			addr_width = nRF24_ReadReg(nRF24_REG_SETUP_AW) + 1;
 8000b58:	2003      	movs	r0, #3
 8000b5a:	f7ff fe59 	bl	8000810 <nRF24_ReadReg>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	3301      	adds	r3, #1
 8000b62:	73fb      	strb	r3, [r7, #15]
			addr += addr_width;
 8000b64:	7bfb      	ldrb	r3, [r7, #15]
 8000b66:	683a      	ldr	r2, [r7, #0]
 8000b68:	4413      	add	r3, r2
 8000b6a:	603b      	str	r3, [r7, #0]
			nRF24_CSN_L();
 8000b6c:	f7ff fe1e 	bl	80007ac <nRF24_CSN_L>
			nRF24_LL_RW(nRF24_CMD_W_REGISTER | nRF24_ADDR_REGS[pipe]);
 8000b70:	79fb      	ldrb	r3, [r7, #7]
 8000b72:	4a13      	ldr	r2, [pc, #76]	@ (8000bc0 <nRF24_SetAddr+0x90>)
 8000b74:	5cd3      	ldrb	r3, [r2, r3]
 8000b76:	f043 0320 	orr.w	r3, r3, #32
 8000b7a:	b2db      	uxtb	r3, r3
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	f7ff fe2b 	bl	80007d8 <nRF24_LL_RW>
				nRF24_LL_RW(*addr--);
 8000b82:	683b      	ldr	r3, [r7, #0]
 8000b84:	1e5a      	subs	r2, r3, #1
 8000b86:	603a      	str	r2, [r7, #0]
 8000b88:	781b      	ldrb	r3, [r3, #0]
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	f7ff fe24 	bl	80007d8 <nRF24_LL_RW>
			} while (addr_width--);
 8000b90:	7bfb      	ldrb	r3, [r7, #15]
 8000b92:	1e5a      	subs	r2, r3, #1
 8000b94:	73fa      	strb	r2, [r7, #15]
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d1f3      	bne.n	8000b82 <nRF24_SetAddr+0x52>
			nRF24_CSN_H();
 8000b9a:	f7ff fe12 	bl	80007c2 <nRF24_CSN_H>
			break;
 8000b9e:	e00a      	b.n	8000bb6 <nRF24_SetAddr+0x86>
			nRF24_WriteReg(nRF24_ADDR_REGS[pipe], *addr);
 8000ba0:	79fb      	ldrb	r3, [r7, #7]
 8000ba2:	4a07      	ldr	r2, [pc, #28]	@ (8000bc0 <nRF24_SetAddr+0x90>)
 8000ba4:	5cd2      	ldrb	r2, [r2, r3]
 8000ba6:	683b      	ldr	r3, [r7, #0]
 8000ba8:	781b      	ldrb	r3, [r3, #0]
 8000baa:	4619      	mov	r1, r3
 8000bac:	4610      	mov	r0, r2
 8000bae:	f7ff fe49 	bl	8000844 <nRF24_WriteReg>
			break;
 8000bb2:	e000      	b.n	8000bb6 <nRF24_SetAddr+0x86>
			break;
 8000bb4:	bf00      	nop
	}
}
 8000bb6:	bf00      	nop
 8000bb8:	3710      	adds	r7, #16
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	bf00      	nop
 8000bc0:	08004020 	.word	0x08004020

08000bc4 <nRF24_SetTXPower>:

// Configure RF output power in TX mode
// input:
//   tx_pwr - RF output power, one of nRF24_TXPWR_xx values
void nRF24_SetTXPower(uint8_t tx_pwr) {
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b084      	sub	sp, #16
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	4603      	mov	r3, r0
 8000bcc:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	// Configure RF_PWR[2:1] bits of the RF_SETUP register
	reg  = nRF24_ReadReg(nRF24_REG_RF_SETUP);
 8000bce:	2006      	movs	r0, #6
 8000bd0:	f7ff fe1e 	bl	8000810 <nRF24_ReadReg>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	73fb      	strb	r3, [r7, #15]
	reg &= ~nRF24_MASK_RF_PWR;
 8000bd8:	7bfb      	ldrb	r3, [r7, #15]
 8000bda:	f023 0306 	bic.w	r3, r3, #6
 8000bde:	73fb      	strb	r3, [r7, #15]
	reg |= tx_pwr;
 8000be0:	7bfa      	ldrb	r2, [r7, #15]
 8000be2:	79fb      	ldrb	r3, [r7, #7]
 8000be4:	4313      	orrs	r3, r2
 8000be6:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteReg(nRF24_REG_RF_SETUP, reg);
 8000be8:	7bfb      	ldrb	r3, [r7, #15]
 8000bea:	4619      	mov	r1, r3
 8000bec:	2006      	movs	r0, #6
 8000bee:	f7ff fe29 	bl	8000844 <nRF24_WriteReg>
}
 8000bf2:	bf00      	nop
 8000bf4:	3710      	adds	r7, #16
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bd80      	pop	{r7, pc}

08000bfa <nRF24_SetDataRate>:

// Configure transceiver data rate
// input:
//   data_rate - data rate, one of nRF24_DR_xx values
void nRF24_SetDataRate(uint8_t data_rate) {
 8000bfa:	b580      	push	{r7, lr}
 8000bfc:	b084      	sub	sp, #16
 8000bfe:	af00      	add	r7, sp, #0
 8000c00:	4603      	mov	r3, r0
 8000c02:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	// Configure RF_DR_LOW[5] and RF_DR_HIGH[3] bits of the RF_SETUP register
	reg  = nRF24_ReadReg(nRF24_REG_RF_SETUP);
 8000c04:	2006      	movs	r0, #6
 8000c06:	f7ff fe03 	bl	8000810 <nRF24_ReadReg>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	73fb      	strb	r3, [r7, #15]
	reg &= ~nRF24_MASK_DATARATE;
 8000c0e:	7bfb      	ldrb	r3, [r7, #15]
 8000c10:	f023 0328 	bic.w	r3, r3, #40	@ 0x28
 8000c14:	73fb      	strb	r3, [r7, #15]
	reg |= data_rate;
 8000c16:	7bfa      	ldrb	r2, [r7, #15]
 8000c18:	79fb      	ldrb	r3, [r7, #7]
 8000c1a:	4313      	orrs	r3, r2
 8000c1c:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteReg(nRF24_REG_RF_SETUP, reg);
 8000c1e:	7bfb      	ldrb	r3, [r7, #15]
 8000c20:	4619      	mov	r1, r3
 8000c22:	2006      	movs	r0, #6
 8000c24:	f7ff fe0e 	bl	8000844 <nRF24_WriteReg>
}
 8000c28:	bf00      	nop
 8000c2a:	3710      	adds	r7, #16
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bd80      	pop	{r7, pc}

08000c30 <nRF24_SetRXPipe>:
// Configure a specified RX pipe
// input:
//   pipe - number of the RX pipe, value from 0 to 5
//   aa_state - state of auto acknowledgment, one of nRF24_AA_xx values
//   payload_len - payload length in bytes
void nRF24_SetRXPipe(uint8_t pipe, uint8_t aa_state, uint8_t payload_len) {
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b084      	sub	sp, #16
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	4603      	mov	r3, r0
 8000c38:	71fb      	strb	r3, [r7, #7]
 8000c3a:	460b      	mov	r3, r1
 8000c3c:	71bb      	strb	r3, [r7, #6]
 8000c3e:	4613      	mov	r3, r2
 8000c40:	717b      	strb	r3, [r7, #5]
	uint8_t reg;

	// Enable the specified pipe (EN_RXADDR register)
	reg = (nRF24_ReadReg(nRF24_REG_EN_RXADDR) | (1 << pipe)) & nRF24_MASK_EN_RX;
 8000c42:	2002      	movs	r0, #2
 8000c44:	f7ff fde4 	bl	8000810 <nRF24_ReadReg>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	b25a      	sxtb	r2, r3
 8000c4c:	79fb      	ldrb	r3, [r7, #7]
 8000c4e:	2101      	movs	r1, #1
 8000c50:	fa01 f303 	lsl.w	r3, r1, r3
 8000c54:	b25b      	sxtb	r3, r3
 8000c56:	4313      	orrs	r3, r2
 8000c58:	b25b      	sxtb	r3, r3
 8000c5a:	b2db      	uxtb	r3, r3
 8000c5c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000c60:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteReg(nRF24_REG_EN_RXADDR, reg);
 8000c62:	7bfb      	ldrb	r3, [r7, #15]
 8000c64:	4619      	mov	r1, r3
 8000c66:	2002      	movs	r0, #2
 8000c68:	f7ff fdec 	bl	8000844 <nRF24_WriteReg>

	// Set RX payload length (RX_PW_Px register)
	nRF24_WriteReg(nRF24_RX_PW_PIPE[pipe], payload_len & nRF24_MASK_RX_PW);
 8000c6c:	79fb      	ldrb	r3, [r7, #7]
 8000c6e:	4a19      	ldr	r2, [pc, #100]	@ (8000cd4 <nRF24_SetRXPipe+0xa4>)
 8000c70:	5cd2      	ldrb	r2, [r2, r3]
 8000c72:	797b      	ldrb	r3, [r7, #5]
 8000c74:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000c78:	b2db      	uxtb	r3, r3
 8000c7a:	4619      	mov	r1, r3
 8000c7c:	4610      	mov	r0, r2
 8000c7e:	f7ff fde1 	bl	8000844 <nRF24_WriteReg>

	// Set auto acknowledgment for a specified pipe (EN_AA register)
	reg = nRF24_ReadReg(nRF24_REG_EN_AA);
 8000c82:	2001      	movs	r0, #1
 8000c84:	f7ff fdc4 	bl	8000810 <nRF24_ReadReg>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	73fb      	strb	r3, [r7, #15]
	if (aa_state == nRF24_AA_ON) {
 8000c8c:	79bb      	ldrb	r3, [r7, #6]
 8000c8e:	2b01      	cmp	r3, #1
 8000c90:	d10a      	bne.n	8000ca8 <nRF24_SetRXPipe+0x78>
		reg |=  (1 << pipe);
 8000c92:	79fb      	ldrb	r3, [r7, #7]
 8000c94:	2201      	movs	r2, #1
 8000c96:	fa02 f303 	lsl.w	r3, r2, r3
 8000c9a:	b25a      	sxtb	r2, r3
 8000c9c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ca0:	4313      	orrs	r3, r2
 8000ca2:	b25b      	sxtb	r3, r3
 8000ca4:	73fb      	strb	r3, [r7, #15]
 8000ca6:	e00b      	b.n	8000cc0 <nRF24_SetRXPipe+0x90>
	} else {
		reg &= ~(1 << pipe);
 8000ca8:	79fb      	ldrb	r3, [r7, #7]
 8000caa:	2201      	movs	r2, #1
 8000cac:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb0:	b25b      	sxtb	r3, r3
 8000cb2:	43db      	mvns	r3, r3
 8000cb4:	b25a      	sxtb	r2, r3
 8000cb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cba:	4013      	ands	r3, r2
 8000cbc:	b25b      	sxtb	r3, r3
 8000cbe:	73fb      	strb	r3, [r7, #15]
	}
	nRF24_WriteReg(nRF24_REG_EN_AA, reg);
 8000cc0:	7bfb      	ldrb	r3, [r7, #15]
 8000cc2:	4619      	mov	r1, r3
 8000cc4:	2001      	movs	r0, #1
 8000cc6:	f7ff fdbd 	bl	8000844 <nRF24_WriteReg>
}
 8000cca:	bf00      	nop
 8000ccc:	3710      	adds	r7, #16
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	08004018 	.word	0x08004018

08000cd8 <nRF24_GetStatus_RXFIFO>:
	return (nRF24_ReadReg(nRF24_REG_STATUS) & nRF24_MASK_STATUS_IRQ);
}

// Get status of the RX FIFO
// return: one of the nRF24_STATUS_RXFIFO_xx values
uint8_t nRF24_GetStatus_RXFIFO(void) {
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	af00      	add	r7, sp, #0
	return (nRF24_ReadReg(nRF24_REG_FIFO_STATUS) & nRF24_MASK_RXFIFO);
 8000cdc:	2017      	movs	r0, #23
 8000cde:	f7ff fd97 	bl	8000810 <nRF24_ReadReg>
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	f003 0303 	and.w	r3, r3, #3
 8000ce8:	b2db      	uxtb	r3, r3
}
 8000cea:	4618      	mov	r0, r3
 8000cec:	bd80      	pop	{r7, pc}

08000cee <nRF24_FlushRX>:
void nRF24_FlushTX(void) {
	nRF24_WriteReg(nRF24_CMD_FLUSH_TX, nRF24_CMD_NOP);
}

// Flush the RX FIFO
void nRF24_FlushRX(void) {
 8000cee:	b580      	push	{r7, lr}
 8000cf0:	af00      	add	r7, sp, #0
	nRF24_WriteReg(nRF24_CMD_FLUSH_RX, nRF24_CMD_NOP);
 8000cf2:	21ff      	movs	r1, #255	@ 0xff
 8000cf4:	20e2      	movs	r0, #226	@ 0xe2
 8000cf6:	f7ff fda5 	bl	8000844 <nRF24_WriteReg>
}
 8000cfa:	bf00      	nop
 8000cfc:	bd80      	pop	{r7, pc}

08000cfe <nRF24_ClearIRQFlags>:

// Clear any pending IRQ flags
void nRF24_ClearIRQFlags(void) {
 8000cfe:	b580      	push	{r7, lr}
 8000d00:	b082      	sub	sp, #8
 8000d02:	af00      	add	r7, sp, #0
	uint8_t reg;

	// Clear RX_DR, TX_DS and MAX_RT bits of the STATUS register
	reg  = nRF24_ReadReg(nRF24_REG_STATUS);
 8000d04:	2007      	movs	r0, #7
 8000d06:	f7ff fd83 	bl	8000810 <nRF24_ReadReg>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	71fb      	strb	r3, [r7, #7]
	reg |= nRF24_MASK_STATUS_IRQ;
 8000d0e:	79fb      	ldrb	r3, [r7, #7]
 8000d10:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
 8000d14:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteReg(nRF24_REG_STATUS, reg);
 8000d16:	79fb      	ldrb	r3, [r7, #7]
 8000d18:	4619      	mov	r1, r3
 8000d1a:	2007      	movs	r0, #7
 8000d1c:	f7ff fd92 	bl	8000844 <nRF24_WriteReg>
}
 8000d20:	bf00      	nop
 8000d22:	3708      	adds	r7, #8
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bd80      	pop	{r7, pc}

08000d28 <nRF24_GetRxDplPayloadWidth>:
//   length - payload length in bytes
void nRF24_WritePayload(uint8_t *pBuf, uint8_t length) {
	nRF24_WriteMBReg(nRF24_CMD_W_TX_PAYLOAD, pBuf, length);
}

static uint8_t nRF24_GetRxDplPayloadWidth() {
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b082      	sub	sp, #8
 8000d2c:	af00      	add	r7, sp, #0
	uint8_t value;

	nRF24_CSN_L();
 8000d2e:	f7ff fd3d 	bl	80007ac <nRF24_CSN_L>
	nRF24_LL_RW(nRF24_CMD_R_RX_PL_WID);
 8000d32:	2060      	movs	r0, #96	@ 0x60
 8000d34:	f7ff fd50 	bl	80007d8 <nRF24_LL_RW>
	value = nRF24_LL_RW(nRF24_CMD_NOP);
 8000d38:	20ff      	movs	r0, #255	@ 0xff
 8000d3a:	f7ff fd4d 	bl	80007d8 <nRF24_LL_RW>
 8000d3e:	4603      	mov	r3, r0
 8000d40:	71fb      	strb	r3, [r7, #7]
	nRF24_CSN_H();
 8000d42:	f7ff fd3e 	bl	80007c2 <nRF24_CSN_H>

	return value;
 8000d46:	79fb      	ldrb	r3, [r7, #7]

}
 8000d48:	4618      	mov	r0, r3
 8000d4a:	3708      	adds	r7, #8
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	bd80      	pop	{r7, pc}

08000d50 <nRF24_ReadPayloadGeneric>:

static nRF24_RXResult nRF24_ReadPayloadGeneric(uint8_t *pBuf, uint8_t *length, uint8_t dpl) {
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b086      	sub	sp, #24
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	60f8      	str	r0, [r7, #12]
 8000d58:	60b9      	str	r1, [r7, #8]
 8000d5a:	4613      	mov	r3, r2
 8000d5c:	71fb      	strb	r3, [r7, #7]
	uint8_t pipe;

	// Extract a payload pipe number from the STATUS register
	pipe = (nRF24_ReadReg(nRF24_REG_STATUS) & nRF24_MASK_RX_P_NO) >> 1;
 8000d5e:	2007      	movs	r0, #7
 8000d60:	f7ff fd56 	bl	8000810 <nRF24_ReadReg>
 8000d64:	4603      	mov	r3, r0
 8000d66:	105b      	asrs	r3, r3, #1
 8000d68:	b2db      	uxtb	r3, r3
 8000d6a:	f003 0307 	and.w	r3, r3, #7
 8000d6e:	75fb      	strb	r3, [r7, #23]

	// RX FIFO empty?
	if (pipe < 6) {
 8000d70:	7dfb      	ldrb	r3, [r7, #23]
 8000d72:	2b05      	cmp	r3, #5
 8000d74:	d829      	bhi.n	8000dca <nRF24_ReadPayloadGeneric+0x7a>
		// Get payload length
		if(dpl) {
 8000d76:	79fb      	ldrb	r3, [r7, #7]
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d00f      	beq.n	8000d9c <nRF24_ReadPayloadGeneric+0x4c>
			*length = nRF24_GetRxDplPayloadWidth();
 8000d7c:	f7ff ffd4 	bl	8000d28 <nRF24_GetRxDplPayloadWidth>
 8000d80:	4603      	mov	r3, r0
 8000d82:	461a      	mov	r2, r3
 8000d84:	68bb      	ldr	r3, [r7, #8]
 8000d86:	701a      	strb	r2, [r3, #0]
			if(*length>32) { //broken packet
 8000d88:	68bb      	ldr	r3, [r7, #8]
 8000d8a:	781b      	ldrb	r3, [r3, #0]
 8000d8c:	2b20      	cmp	r3, #32
 8000d8e:	d90f      	bls.n	8000db0 <nRF24_ReadPayloadGeneric+0x60>
				*length = 0;
 8000d90:	68bb      	ldr	r3, [r7, #8]
 8000d92:	2200      	movs	r2, #0
 8000d94:	701a      	strb	r2, [r3, #0]
				nRF24_FlushRX();
 8000d96:	f7ff ffaa 	bl	8000cee <nRF24_FlushRX>
 8000d9a:	e009      	b.n	8000db0 <nRF24_ReadPayloadGeneric+0x60>
			}
		} else {
			*length = nRF24_ReadReg(nRF24_RX_PW_PIPE[pipe]);
 8000d9c:	7dfb      	ldrb	r3, [r7, #23]
 8000d9e:	4a0f      	ldr	r2, [pc, #60]	@ (8000ddc <nRF24_ReadPayloadGeneric+0x8c>)
 8000da0:	5cd3      	ldrb	r3, [r2, r3]
 8000da2:	4618      	mov	r0, r3
 8000da4:	f7ff fd34 	bl	8000810 <nRF24_ReadReg>
 8000da8:	4603      	mov	r3, r0
 8000daa:	461a      	mov	r2, r3
 8000dac:	68bb      	ldr	r3, [r7, #8]
 8000dae:	701a      	strb	r2, [r3, #0]
		}

		// Read a payload from the RX FIFO
		if (*length) {
 8000db0:	68bb      	ldr	r3, [r7, #8]
 8000db2:	781b      	ldrb	r3, [r3, #0]
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d006      	beq.n	8000dc6 <nRF24_ReadPayloadGeneric+0x76>
			nRF24_ReadMBReg(nRF24_CMD_R_RX_PAYLOAD, pBuf, *length);
 8000db8:	68bb      	ldr	r3, [r7, #8]
 8000dba:	781b      	ldrb	r3, [r3, #0]
 8000dbc:	461a      	mov	r2, r3
 8000dbe:	68f9      	ldr	r1, [r7, #12]
 8000dc0:	2061      	movs	r0, #97	@ 0x61
 8000dc2:	f7ff fd77 	bl	80008b4 <nRF24_ReadMBReg>
		}

		return ((nRF24_RXResult)pipe);
 8000dc6:	7dfb      	ldrb	r3, [r7, #23]
 8000dc8:	e003      	b.n	8000dd2 <nRF24_ReadPayloadGeneric+0x82>
	}

	// The RX FIFO is empty
	*length = 0;
 8000dca:	68bb      	ldr	r3, [r7, #8]
 8000dcc:	2200      	movs	r2, #0
 8000dce:	701a      	strb	r2, [r3, #0]

	return nRF24_RX_EMPTY;
 8000dd0:	23ff      	movs	r3, #255	@ 0xff
}
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	3718      	adds	r7, #24
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	08004018 	.word	0x08004018

08000de0 <nRF24_ReadPayload>:
//   pBuf - pointer to the buffer to store a payload data
//   length - pointer to variable to store a payload length
// return: one of nRF24_RX_xx values
//   nRF24_RX_PIPEX - packet has been received from the pipe number X
//   nRF24_RX_EMPTY - the RX FIFO is empty
nRF24_RXResult nRF24_ReadPayload(uint8_t *pBuf, uint8_t *length) {
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b082      	sub	sp, #8
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
 8000de8:	6039      	str	r1, [r7, #0]
	return nRF24_ReadPayloadGeneric(pBuf, length,0);
 8000dea:	2200      	movs	r2, #0
 8000dec:	6839      	ldr	r1, [r7, #0]
 8000dee:	6878      	ldr	r0, [r7, #4]
 8000df0:	f7ff ffae 	bl	8000d50 <nRF24_ReadPayloadGeneric>
 8000df4:	4603      	mov	r3, r0
}
 8000df6:	4618      	mov	r0, r3
 8000df8:	3708      	adds	r7, #8
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}
	...

08000e00 <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8000e04:	4b1b      	ldr	r3, [pc, #108]	@ (8000e74 <MX_SPI3_Init+0x74>)
 8000e06:	4a1c      	ldr	r2, [pc, #112]	@ (8000e78 <MX_SPI3_Init+0x78>)
 8000e08:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000e0a:	4b1a      	ldr	r3, [pc, #104]	@ (8000e74 <MX_SPI3_Init+0x74>)
 8000e0c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000e10:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000e12:	4b18      	ldr	r3, [pc, #96]	@ (8000e74 <MX_SPI3_Init+0x74>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000e18:	4b16      	ldr	r3, [pc, #88]	@ (8000e74 <MX_SPI3_Init+0x74>)
 8000e1a:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8000e1e:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000e20:	4b14      	ldr	r3, [pc, #80]	@ (8000e74 <MX_SPI3_Init+0x74>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000e26:	4b13      	ldr	r3, [pc, #76]	@ (8000e74 <MX_SPI3_Init+0x74>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000e2c:	4b11      	ldr	r3, [pc, #68]	@ (8000e74 <MX_SPI3_Init+0x74>)
 8000e2e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000e32:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000e34:	4b0f      	ldr	r3, [pc, #60]	@ (8000e74 <MX_SPI3_Init+0x74>)
 8000e36:	2218      	movs	r2, #24
 8000e38:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000e3a:	4b0e      	ldr	r3, [pc, #56]	@ (8000e74 <MX_SPI3_Init+0x74>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000e40:	4b0c      	ldr	r3, [pc, #48]	@ (8000e74 <MX_SPI3_Init+0x74>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000e46:	4b0b      	ldr	r3, [pc, #44]	@ (8000e74 <MX_SPI3_Init+0x74>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000e4c:	4b09      	ldr	r3, [pc, #36]	@ (8000e74 <MX_SPI3_Init+0x74>)
 8000e4e:	2207      	movs	r2, #7
 8000e50:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000e52:	4b08      	ldr	r3, [pc, #32]	@ (8000e74 <MX_SPI3_Init+0x74>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000e58:	4b06      	ldr	r3, [pc, #24]	@ (8000e74 <MX_SPI3_Init+0x74>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000e5e:	4805      	ldr	r0, [pc, #20]	@ (8000e74 <MX_SPI3_Init+0x74>)
 8000e60:	f001 fe8e 	bl	8002b80 <HAL_SPI_Init>
 8000e64:	4603      	mov	r3, r0
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d001      	beq.n	8000e6e <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8000e6a:	f7ff fc99 	bl	80007a0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000e6e:	bf00      	nop
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	bf00      	nop
 8000e74:	2000004c 	.word	0x2000004c
 8000e78:	40003c00 	.word	0x40003c00

08000e7c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b08a      	sub	sp, #40	@ 0x28
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e84:	f107 0314 	add.w	r3, r7, #20
 8000e88:	2200      	movs	r2, #0
 8000e8a:	601a      	str	r2, [r3, #0]
 8000e8c:	605a      	str	r2, [r3, #4]
 8000e8e:	609a      	str	r2, [r3, #8]
 8000e90:	60da      	str	r2, [r3, #12]
 8000e92:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	4a17      	ldr	r2, [pc, #92]	@ (8000ef8 <HAL_SPI_MspInit+0x7c>)
 8000e9a:	4293      	cmp	r3, r2
 8000e9c:	d127      	bne.n	8000eee <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000e9e:	4b17      	ldr	r3, [pc, #92]	@ (8000efc <HAL_SPI_MspInit+0x80>)
 8000ea0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ea2:	4a16      	ldr	r2, [pc, #88]	@ (8000efc <HAL_SPI_MspInit+0x80>)
 8000ea4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000ea8:	6593      	str	r3, [r2, #88]	@ 0x58
 8000eaa:	4b14      	ldr	r3, [pc, #80]	@ (8000efc <HAL_SPI_MspInit+0x80>)
 8000eac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000eae:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000eb2:	613b      	str	r3, [r7, #16]
 8000eb4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000eb6:	4b11      	ldr	r3, [pc, #68]	@ (8000efc <HAL_SPI_MspInit+0x80>)
 8000eb8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000eba:	4a10      	ldr	r2, [pc, #64]	@ (8000efc <HAL_SPI_MspInit+0x80>)
 8000ebc:	f043 0302 	orr.w	r3, r3, #2
 8000ec0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ec2:	4b0e      	ldr	r3, [pc, #56]	@ (8000efc <HAL_SPI_MspInit+0x80>)
 8000ec4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ec6:	f003 0302 	and.w	r3, r3, #2
 8000eca:	60fb      	str	r3, [r7, #12]
 8000ecc:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PB3 (JTDO-TRACESWO)     ------> SPI3_SCK
    PB4 (NJTRST)     ------> SPI3_MISO
    PB5     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = RF_SCK_Pin|RF_MISO_Pin|RF_MOSI_Pin;
 8000ece:	2338      	movs	r3, #56	@ 0x38
 8000ed0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ed2:	2302      	movs	r3, #2
 8000ed4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eda:	2303      	movs	r3, #3
 8000edc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000ede:	2306      	movs	r3, #6
 8000ee0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ee2:	f107 0314 	add.w	r3, r7, #20
 8000ee6:	4619      	mov	r1, r3
 8000ee8:	4805      	ldr	r0, [pc, #20]	@ (8000f00 <HAL_SPI_MspInit+0x84>)
 8000eea:	f000 fb23 	bl	8001534 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8000eee:	bf00      	nop
 8000ef0:	3728      	adds	r7, #40	@ 0x28
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	40003c00 	.word	0x40003c00
 8000efc:	40021000 	.word	0x40021000
 8000f00:	48000400 	.word	0x48000400

08000f04 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f04:	b480      	push	{r7}
 8000f06:	b083      	sub	sp, #12
 8000f08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f0a:	4b0f      	ldr	r3, [pc, #60]	@ (8000f48 <HAL_MspInit+0x44>)
 8000f0c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f0e:	4a0e      	ldr	r2, [pc, #56]	@ (8000f48 <HAL_MspInit+0x44>)
 8000f10:	f043 0301 	orr.w	r3, r3, #1
 8000f14:	6613      	str	r3, [r2, #96]	@ 0x60
 8000f16:	4b0c      	ldr	r3, [pc, #48]	@ (8000f48 <HAL_MspInit+0x44>)
 8000f18:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f1a:	f003 0301 	and.w	r3, r3, #1
 8000f1e:	607b      	str	r3, [r7, #4]
 8000f20:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f22:	4b09      	ldr	r3, [pc, #36]	@ (8000f48 <HAL_MspInit+0x44>)
 8000f24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f26:	4a08      	ldr	r2, [pc, #32]	@ (8000f48 <HAL_MspInit+0x44>)
 8000f28:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f2c:	6593      	str	r3, [r2, #88]	@ 0x58
 8000f2e:	4b06      	ldr	r3, [pc, #24]	@ (8000f48 <HAL_MspInit+0x44>)
 8000f30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f32:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f36:	603b      	str	r3, [r7, #0]
 8000f38:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f3a:	bf00      	nop
 8000f3c:	370c      	adds	r7, #12
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop
 8000f48:	40021000 	.word	0x40021000

08000f4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f50:	bf00      	nop
 8000f52:	e7fd      	b.n	8000f50 <NMI_Handler+0x4>

08000f54 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f54:	b480      	push	{r7}
 8000f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f58:	bf00      	nop
 8000f5a:	e7fd      	b.n	8000f58 <HardFault_Handler+0x4>

08000f5c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f60:	bf00      	nop
 8000f62:	e7fd      	b.n	8000f60 <MemManage_Handler+0x4>

08000f64 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f64:	b480      	push	{r7}
 8000f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f68:	bf00      	nop
 8000f6a:	e7fd      	b.n	8000f68 <BusFault_Handler+0x4>

08000f6c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f70:	bf00      	nop
 8000f72:	e7fd      	b.n	8000f70 <UsageFault_Handler+0x4>

08000f74 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f74:	b480      	push	{r7}
 8000f76:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f78:	bf00      	nop
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f80:	4770      	bx	lr

08000f82 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f82:	b480      	push	{r7}
 8000f84:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f86:	bf00      	nop
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8e:	4770      	bx	lr

08000f90 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f90:	b480      	push	{r7}
 8000f92:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f94:	bf00      	nop
 8000f96:	46bd      	mov	sp, r7
 8000f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9c:	4770      	bx	lr

08000f9e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f9e:	b580      	push	{r7, lr}
 8000fa0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fa2:	f000 f99d 	bl	80012e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fa6:	bf00      	nop
 8000fa8:	bd80      	pop	{r7, pc}
	...

08000fac <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000fac:	b480      	push	{r7}
 8000fae:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000fb0:	4b06      	ldr	r3, [pc, #24]	@ (8000fcc <SystemInit+0x20>)
 8000fb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000fb6:	4a05      	ldr	r2, [pc, #20]	@ (8000fcc <SystemInit+0x20>)
 8000fb8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000fbc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000fc0:	bf00      	nop
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc8:	4770      	bx	lr
 8000fca:	bf00      	nop
 8000fcc:	e000ed00 	.word	0xe000ed00

08000fd0 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000fd4:	4b14      	ldr	r3, [pc, #80]	@ (8001028 <MX_USART1_UART_Init+0x58>)
 8000fd6:	4a15      	ldr	r2, [pc, #84]	@ (800102c <MX_USART1_UART_Init+0x5c>)
 8000fd8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000fda:	4b13      	ldr	r3, [pc, #76]	@ (8001028 <MX_USART1_UART_Init+0x58>)
 8000fdc:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000fe0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000fe2:	4b11      	ldr	r3, [pc, #68]	@ (8001028 <MX_USART1_UART_Init+0x58>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000fe8:	4b0f      	ldr	r3, [pc, #60]	@ (8001028 <MX_USART1_UART_Init+0x58>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000fee:	4b0e      	ldr	r3, [pc, #56]	@ (8001028 <MX_USART1_UART_Init+0x58>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000ff4:	4b0c      	ldr	r3, [pc, #48]	@ (8001028 <MX_USART1_UART_Init+0x58>)
 8000ff6:	220c      	movs	r2, #12
 8000ff8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ffa:	4b0b      	ldr	r3, [pc, #44]	@ (8001028 <MX_USART1_UART_Init+0x58>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001000:	4b09      	ldr	r3, [pc, #36]	@ (8001028 <MX_USART1_UART_Init+0x58>)
 8001002:	2200      	movs	r2, #0
 8001004:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001006:	4b08      	ldr	r3, [pc, #32]	@ (8001028 <MX_USART1_UART_Init+0x58>)
 8001008:	2200      	movs	r2, #0
 800100a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800100c:	4b06      	ldr	r3, [pc, #24]	@ (8001028 <MX_USART1_UART_Init+0x58>)
 800100e:	2200      	movs	r2, #0
 8001010:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001012:	4805      	ldr	r0, [pc, #20]	@ (8001028 <MX_USART1_UART_Init+0x58>)
 8001014:	f002 f9da 	bl	80033cc <HAL_UART_Init>
 8001018:	4603      	mov	r3, r0
 800101a:	2b00      	cmp	r3, #0
 800101c:	d001      	beq.n	8001022 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800101e:	f7ff fbbf 	bl	80007a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001022:	bf00      	nop
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	200000b0 	.word	0x200000b0
 800102c:	40013800 	.word	0x40013800

08001030 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001034:	4b14      	ldr	r3, [pc, #80]	@ (8001088 <MX_USART2_UART_Init+0x58>)
 8001036:	4a15      	ldr	r2, [pc, #84]	@ (800108c <MX_USART2_UART_Init+0x5c>)
 8001038:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800103a:	4b13      	ldr	r3, [pc, #76]	@ (8001088 <MX_USART2_UART_Init+0x58>)
 800103c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001040:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001042:	4b11      	ldr	r3, [pc, #68]	@ (8001088 <MX_USART2_UART_Init+0x58>)
 8001044:	2200      	movs	r2, #0
 8001046:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001048:	4b0f      	ldr	r3, [pc, #60]	@ (8001088 <MX_USART2_UART_Init+0x58>)
 800104a:	2200      	movs	r2, #0
 800104c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800104e:	4b0e      	ldr	r3, [pc, #56]	@ (8001088 <MX_USART2_UART_Init+0x58>)
 8001050:	2200      	movs	r2, #0
 8001052:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001054:	4b0c      	ldr	r3, [pc, #48]	@ (8001088 <MX_USART2_UART_Init+0x58>)
 8001056:	220c      	movs	r2, #12
 8001058:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800105a:	4b0b      	ldr	r3, [pc, #44]	@ (8001088 <MX_USART2_UART_Init+0x58>)
 800105c:	2200      	movs	r2, #0
 800105e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001060:	4b09      	ldr	r3, [pc, #36]	@ (8001088 <MX_USART2_UART_Init+0x58>)
 8001062:	2200      	movs	r2, #0
 8001064:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001066:	4b08      	ldr	r3, [pc, #32]	@ (8001088 <MX_USART2_UART_Init+0x58>)
 8001068:	2200      	movs	r2, #0
 800106a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800106c:	4b06      	ldr	r3, [pc, #24]	@ (8001088 <MX_USART2_UART_Init+0x58>)
 800106e:	2200      	movs	r2, #0
 8001070:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001072:	4805      	ldr	r0, [pc, #20]	@ (8001088 <MX_USART2_UART_Init+0x58>)
 8001074:	f002 f9aa 	bl	80033cc <HAL_UART_Init>
 8001078:	4603      	mov	r3, r0
 800107a:	2b00      	cmp	r3, #0
 800107c:	d001      	beq.n	8001082 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800107e:	f7ff fb8f 	bl	80007a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001082:	bf00      	nop
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	20000138 	.word	0x20000138
 800108c:	40004400 	.word	0x40004400

08001090 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b0a0      	sub	sp, #128	@ 0x80
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001098:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800109c:	2200      	movs	r2, #0
 800109e:	601a      	str	r2, [r3, #0]
 80010a0:	605a      	str	r2, [r3, #4]
 80010a2:	609a      	str	r2, [r3, #8]
 80010a4:	60da      	str	r2, [r3, #12]
 80010a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80010a8:	f107 0318 	add.w	r3, r7, #24
 80010ac:	2254      	movs	r2, #84	@ 0x54
 80010ae:	2100      	movs	r1, #0
 80010b0:	4618      	mov	r0, r3
 80010b2:	f002 ff72 	bl	8003f9a <memset>
  if(uartHandle->Instance==USART1)
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	4a47      	ldr	r2, [pc, #284]	@ (80011d8 <HAL_UART_MspInit+0x148>)
 80010bc:	4293      	cmp	r3, r2
 80010be:	d138      	bne.n	8001132 <HAL_UART_MspInit+0xa2>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80010c0:	2301      	movs	r3, #1
 80010c2:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80010c4:	2300      	movs	r3, #0
 80010c6:	63bb      	str	r3, [r7, #56]	@ 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80010c8:	f107 0318 	add.w	r3, r7, #24
 80010cc:	4618      	mov	r0, r3
 80010ce:	f001 fa5f 	bl	8002590 <HAL_RCCEx_PeriphCLKConfig>
 80010d2:	4603      	mov	r3, r0
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d001      	beq.n	80010dc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80010d8:	f7ff fb62 	bl	80007a0 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80010dc:	4b3f      	ldr	r3, [pc, #252]	@ (80011dc <HAL_UART_MspInit+0x14c>)
 80010de:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80010e0:	4a3e      	ldr	r2, [pc, #248]	@ (80011dc <HAL_UART_MspInit+0x14c>)
 80010e2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80010e6:	6613      	str	r3, [r2, #96]	@ 0x60
 80010e8:	4b3c      	ldr	r3, [pc, #240]	@ (80011dc <HAL_UART_MspInit+0x14c>)
 80010ea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80010ec:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80010f0:	617b      	str	r3, [r7, #20]
 80010f2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010f4:	4b39      	ldr	r3, [pc, #228]	@ (80011dc <HAL_UART_MspInit+0x14c>)
 80010f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010f8:	4a38      	ldr	r2, [pc, #224]	@ (80011dc <HAL_UART_MspInit+0x14c>)
 80010fa:	f043 0301 	orr.w	r3, r3, #1
 80010fe:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001100:	4b36      	ldr	r3, [pc, #216]	@ (80011dc <HAL_UART_MspInit+0x14c>)
 8001102:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001104:	f003 0301 	and.w	r3, r3, #1
 8001108:	613b      	str	r3, [r7, #16]
 800110a:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800110c:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001110:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001112:	2302      	movs	r3, #2
 8001114:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001116:	2300      	movs	r3, #0
 8001118:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800111a:	2303      	movs	r3, #3
 800111c:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800111e:	2307      	movs	r3, #7
 8001120:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001122:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001126:	4619      	mov	r1, r3
 8001128:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800112c:	f000 fa02 	bl	8001534 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001130:	e04d      	b.n	80011ce <HAL_UART_MspInit+0x13e>
  else if(uartHandle->Instance==USART2)
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	4a2a      	ldr	r2, [pc, #168]	@ (80011e0 <HAL_UART_MspInit+0x150>)
 8001138:	4293      	cmp	r3, r2
 800113a:	d148      	bne.n	80011ce <HAL_UART_MspInit+0x13e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800113c:	2302      	movs	r3, #2
 800113e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001140:	2300      	movs	r3, #0
 8001142:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001144:	f107 0318 	add.w	r3, r7, #24
 8001148:	4618      	mov	r0, r3
 800114a:	f001 fa21 	bl	8002590 <HAL_RCCEx_PeriphCLKConfig>
 800114e:	4603      	mov	r3, r0
 8001150:	2b00      	cmp	r3, #0
 8001152:	d001      	beq.n	8001158 <HAL_UART_MspInit+0xc8>
      Error_Handler();
 8001154:	f7ff fb24 	bl	80007a0 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001158:	4b20      	ldr	r3, [pc, #128]	@ (80011dc <HAL_UART_MspInit+0x14c>)
 800115a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800115c:	4a1f      	ldr	r2, [pc, #124]	@ (80011dc <HAL_UART_MspInit+0x14c>)
 800115e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001162:	6593      	str	r3, [r2, #88]	@ 0x58
 8001164:	4b1d      	ldr	r3, [pc, #116]	@ (80011dc <HAL_UART_MspInit+0x14c>)
 8001166:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001168:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800116c:	60fb      	str	r3, [r7, #12]
 800116e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001170:	4b1a      	ldr	r3, [pc, #104]	@ (80011dc <HAL_UART_MspInit+0x14c>)
 8001172:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001174:	4a19      	ldr	r2, [pc, #100]	@ (80011dc <HAL_UART_MspInit+0x14c>)
 8001176:	f043 0301 	orr.w	r3, r3, #1
 800117a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800117c:	4b17      	ldr	r3, [pc, #92]	@ (80011dc <HAL_UART_MspInit+0x14c>)
 800117e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001180:	f003 0301 	and.w	r3, r3, #1
 8001184:	60bb      	str	r3, [r7, #8]
 8001186:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8001188:	2304      	movs	r3, #4
 800118a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800118c:	2302      	movs	r3, #2
 800118e:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001190:	2300      	movs	r3, #0
 8001192:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001194:	2303      	movs	r3, #3
 8001196:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001198:	2307      	movs	r3, #7
 800119a:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 800119c:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80011a0:	4619      	mov	r1, r3
 80011a2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80011a6:	f000 f9c5 	bl	8001534 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 80011aa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80011ae:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011b0:	2302      	movs	r3, #2
 80011b2:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b4:	2300      	movs	r3, #0
 80011b6:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011b8:	2303      	movs	r3, #3
 80011ba:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 80011bc:	2303      	movs	r3, #3
 80011be:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 80011c0:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80011c4:	4619      	mov	r1, r3
 80011c6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80011ca:	f000 f9b3 	bl	8001534 <HAL_GPIO_Init>
}
 80011ce:	bf00      	nop
 80011d0:	3780      	adds	r7, #128	@ 0x80
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}
 80011d6:	bf00      	nop
 80011d8:	40013800 	.word	0x40013800
 80011dc:	40021000 	.word	0x40021000
 80011e0:	40004400 	.word	0x40004400

080011e4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80011e4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800121c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80011e8:	f7ff fee0 	bl	8000fac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80011ec:	480c      	ldr	r0, [pc, #48]	@ (8001220 <LoopForever+0x6>)
  ldr r1, =_edata
 80011ee:	490d      	ldr	r1, [pc, #52]	@ (8001224 <LoopForever+0xa>)
  ldr r2, =_sidata
 80011f0:	4a0d      	ldr	r2, [pc, #52]	@ (8001228 <LoopForever+0xe>)
  movs r3, #0
 80011f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011f4:	e002      	b.n	80011fc <LoopCopyDataInit>

080011f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011fa:	3304      	adds	r3, #4

080011fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001200:	d3f9      	bcc.n	80011f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001202:	4a0a      	ldr	r2, [pc, #40]	@ (800122c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001204:	4c0a      	ldr	r4, [pc, #40]	@ (8001230 <LoopForever+0x16>)
  movs r3, #0
 8001206:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001208:	e001      	b.n	800120e <LoopFillZerobss>

0800120a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800120a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800120c:	3204      	adds	r2, #4

0800120e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800120e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001210:	d3fb      	bcc.n	800120a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001212:	f002 fecb 	bl	8003fac <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001216:	f7ff f9bb 	bl	8000590 <main>

0800121a <LoopForever>:

LoopForever:
    b LoopForever
 800121a:	e7fe      	b.n	800121a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800121c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001220:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001224:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001228:	08004080 	.word	0x08004080
  ldr r2, =_sbss
 800122c:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001230:	200001c4 	.word	0x200001c4

08001234 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001234:	e7fe      	b.n	8001234 <ADC1_IRQHandler>

08001236 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001236:	b580      	push	{r7, lr}
 8001238:	b082      	sub	sp, #8
 800123a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800123c:	2300      	movs	r3, #0
 800123e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001240:	2003      	movs	r0, #3
 8001242:	f000 f943 	bl	80014cc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001246:	2000      	movs	r0, #0
 8001248:	f000 f80e 	bl	8001268 <HAL_InitTick>
 800124c:	4603      	mov	r3, r0
 800124e:	2b00      	cmp	r3, #0
 8001250:	d002      	beq.n	8001258 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001252:	2301      	movs	r3, #1
 8001254:	71fb      	strb	r3, [r7, #7]
 8001256:	e001      	b.n	800125c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001258:	f7ff fe54 	bl	8000f04 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800125c:	79fb      	ldrb	r3, [r7, #7]
}
 800125e:	4618      	mov	r0, r3
 8001260:	3708      	adds	r7, #8
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}
	...

08001268 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b084      	sub	sp, #16
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001270:	2300      	movs	r3, #0
 8001272:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001274:	4b17      	ldr	r3, [pc, #92]	@ (80012d4 <HAL_InitTick+0x6c>)
 8001276:	781b      	ldrb	r3, [r3, #0]
 8001278:	2b00      	cmp	r3, #0
 800127a:	d023      	beq.n	80012c4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800127c:	4b16      	ldr	r3, [pc, #88]	@ (80012d8 <HAL_InitTick+0x70>)
 800127e:	681a      	ldr	r2, [r3, #0]
 8001280:	4b14      	ldr	r3, [pc, #80]	@ (80012d4 <HAL_InitTick+0x6c>)
 8001282:	781b      	ldrb	r3, [r3, #0]
 8001284:	4619      	mov	r1, r3
 8001286:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800128a:	fbb3 f3f1 	udiv	r3, r3, r1
 800128e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001292:	4618      	mov	r0, r3
 8001294:	f000 f941 	bl	800151a <HAL_SYSTICK_Config>
 8001298:	4603      	mov	r3, r0
 800129a:	2b00      	cmp	r3, #0
 800129c:	d10f      	bne.n	80012be <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	2b0f      	cmp	r3, #15
 80012a2:	d809      	bhi.n	80012b8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012a4:	2200      	movs	r2, #0
 80012a6:	6879      	ldr	r1, [r7, #4]
 80012a8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80012ac:	f000 f919 	bl	80014e2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80012b0:	4a0a      	ldr	r2, [pc, #40]	@ (80012dc <HAL_InitTick+0x74>)
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	6013      	str	r3, [r2, #0]
 80012b6:	e007      	b.n	80012c8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80012b8:	2301      	movs	r3, #1
 80012ba:	73fb      	strb	r3, [r7, #15]
 80012bc:	e004      	b.n	80012c8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80012be:	2301      	movs	r3, #1
 80012c0:	73fb      	strb	r3, [r7, #15]
 80012c2:	e001      	b.n	80012c8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80012c4:	2301      	movs	r3, #1
 80012c6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80012c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80012ca:	4618      	mov	r0, r3
 80012cc:	3710      	adds	r7, #16
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	2000000c 	.word	0x2000000c
 80012d8:	20000004 	.word	0x20000004
 80012dc:	20000008 	.word	0x20000008

080012e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012e0:	b480      	push	{r7}
 80012e2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80012e4:	4b06      	ldr	r3, [pc, #24]	@ (8001300 <HAL_IncTick+0x20>)
 80012e6:	781b      	ldrb	r3, [r3, #0]
 80012e8:	461a      	mov	r2, r3
 80012ea:	4b06      	ldr	r3, [pc, #24]	@ (8001304 <HAL_IncTick+0x24>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	4413      	add	r3, r2
 80012f0:	4a04      	ldr	r2, [pc, #16]	@ (8001304 <HAL_IncTick+0x24>)
 80012f2:	6013      	str	r3, [r2, #0]
}
 80012f4:	bf00      	nop
 80012f6:	46bd      	mov	sp, r7
 80012f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fc:	4770      	bx	lr
 80012fe:	bf00      	nop
 8001300:	2000000c 	.word	0x2000000c
 8001304:	200001c0 	.word	0x200001c0

08001308 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001308:	b480      	push	{r7}
 800130a:	af00      	add	r7, sp, #0
  return uwTick;
 800130c:	4b03      	ldr	r3, [pc, #12]	@ (800131c <HAL_GetTick+0x14>)
 800130e:	681b      	ldr	r3, [r3, #0]
}
 8001310:	4618      	mov	r0, r3
 8001312:	46bd      	mov	sp, r7
 8001314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001318:	4770      	bx	lr
 800131a:	bf00      	nop
 800131c:	200001c0 	.word	0x200001c0

08001320 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b084      	sub	sp, #16
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001328:	f7ff ffee 	bl	8001308 <HAL_GetTick>
 800132c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001338:	d005      	beq.n	8001346 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800133a:	4b0a      	ldr	r3, [pc, #40]	@ (8001364 <HAL_Delay+0x44>)
 800133c:	781b      	ldrb	r3, [r3, #0]
 800133e:	461a      	mov	r2, r3
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	4413      	add	r3, r2
 8001344:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001346:	bf00      	nop
 8001348:	f7ff ffde 	bl	8001308 <HAL_GetTick>
 800134c:	4602      	mov	r2, r0
 800134e:	68bb      	ldr	r3, [r7, #8]
 8001350:	1ad3      	subs	r3, r2, r3
 8001352:	68fa      	ldr	r2, [r7, #12]
 8001354:	429a      	cmp	r2, r3
 8001356:	d8f7      	bhi.n	8001348 <HAL_Delay+0x28>
  {
  }
}
 8001358:	bf00      	nop
 800135a:	bf00      	nop
 800135c:	3710      	adds	r7, #16
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}
 8001362:	bf00      	nop
 8001364:	2000000c 	.word	0x2000000c

08001368 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001368:	b480      	push	{r7}
 800136a:	b085      	sub	sp, #20
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	f003 0307 	and.w	r3, r3, #7
 8001376:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001378:	4b0c      	ldr	r3, [pc, #48]	@ (80013ac <__NVIC_SetPriorityGrouping+0x44>)
 800137a:	68db      	ldr	r3, [r3, #12]
 800137c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800137e:	68ba      	ldr	r2, [r7, #8]
 8001380:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001384:	4013      	ands	r3, r2
 8001386:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800138c:	68bb      	ldr	r3, [r7, #8]
 800138e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001390:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001394:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001398:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800139a:	4a04      	ldr	r2, [pc, #16]	@ (80013ac <__NVIC_SetPriorityGrouping+0x44>)
 800139c:	68bb      	ldr	r3, [r7, #8]
 800139e:	60d3      	str	r3, [r2, #12]
}
 80013a0:	bf00      	nop
 80013a2:	3714      	adds	r7, #20
 80013a4:	46bd      	mov	sp, r7
 80013a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013aa:	4770      	bx	lr
 80013ac:	e000ed00 	.word	0xe000ed00

080013b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013b0:	b480      	push	{r7}
 80013b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013b4:	4b04      	ldr	r3, [pc, #16]	@ (80013c8 <__NVIC_GetPriorityGrouping+0x18>)
 80013b6:	68db      	ldr	r3, [r3, #12]
 80013b8:	0a1b      	lsrs	r3, r3, #8
 80013ba:	f003 0307 	and.w	r3, r3, #7
}
 80013be:	4618      	mov	r0, r3
 80013c0:	46bd      	mov	sp, r7
 80013c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c6:	4770      	bx	lr
 80013c8:	e000ed00 	.word	0xe000ed00

080013cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013cc:	b480      	push	{r7}
 80013ce:	b083      	sub	sp, #12
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	4603      	mov	r3, r0
 80013d4:	6039      	str	r1, [r7, #0]
 80013d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013dc:	2b00      	cmp	r3, #0
 80013de:	db0a      	blt.n	80013f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	b2da      	uxtb	r2, r3
 80013e4:	490c      	ldr	r1, [pc, #48]	@ (8001418 <__NVIC_SetPriority+0x4c>)
 80013e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ea:	0112      	lsls	r2, r2, #4
 80013ec:	b2d2      	uxtb	r2, r2
 80013ee:	440b      	add	r3, r1
 80013f0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013f4:	e00a      	b.n	800140c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	b2da      	uxtb	r2, r3
 80013fa:	4908      	ldr	r1, [pc, #32]	@ (800141c <__NVIC_SetPriority+0x50>)
 80013fc:	79fb      	ldrb	r3, [r7, #7]
 80013fe:	f003 030f 	and.w	r3, r3, #15
 8001402:	3b04      	subs	r3, #4
 8001404:	0112      	lsls	r2, r2, #4
 8001406:	b2d2      	uxtb	r2, r2
 8001408:	440b      	add	r3, r1
 800140a:	761a      	strb	r2, [r3, #24]
}
 800140c:	bf00      	nop
 800140e:	370c      	adds	r7, #12
 8001410:	46bd      	mov	sp, r7
 8001412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001416:	4770      	bx	lr
 8001418:	e000e100 	.word	0xe000e100
 800141c:	e000ed00 	.word	0xe000ed00

08001420 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001420:	b480      	push	{r7}
 8001422:	b089      	sub	sp, #36	@ 0x24
 8001424:	af00      	add	r7, sp, #0
 8001426:	60f8      	str	r0, [r7, #12]
 8001428:	60b9      	str	r1, [r7, #8]
 800142a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	f003 0307 	and.w	r3, r3, #7
 8001432:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001434:	69fb      	ldr	r3, [r7, #28]
 8001436:	f1c3 0307 	rsb	r3, r3, #7
 800143a:	2b04      	cmp	r3, #4
 800143c:	bf28      	it	cs
 800143e:	2304      	movcs	r3, #4
 8001440:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001442:	69fb      	ldr	r3, [r7, #28]
 8001444:	3304      	adds	r3, #4
 8001446:	2b06      	cmp	r3, #6
 8001448:	d902      	bls.n	8001450 <NVIC_EncodePriority+0x30>
 800144a:	69fb      	ldr	r3, [r7, #28]
 800144c:	3b03      	subs	r3, #3
 800144e:	e000      	b.n	8001452 <NVIC_EncodePriority+0x32>
 8001450:	2300      	movs	r3, #0
 8001452:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001454:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001458:	69bb      	ldr	r3, [r7, #24]
 800145a:	fa02 f303 	lsl.w	r3, r2, r3
 800145e:	43da      	mvns	r2, r3
 8001460:	68bb      	ldr	r3, [r7, #8]
 8001462:	401a      	ands	r2, r3
 8001464:	697b      	ldr	r3, [r7, #20]
 8001466:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001468:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800146c:	697b      	ldr	r3, [r7, #20]
 800146e:	fa01 f303 	lsl.w	r3, r1, r3
 8001472:	43d9      	mvns	r1, r3
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001478:	4313      	orrs	r3, r2
         );
}
 800147a:	4618      	mov	r0, r3
 800147c:	3724      	adds	r7, #36	@ 0x24
 800147e:	46bd      	mov	sp, r7
 8001480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001484:	4770      	bx	lr
	...

08001488 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b082      	sub	sp, #8
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	3b01      	subs	r3, #1
 8001494:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001498:	d301      	bcc.n	800149e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800149a:	2301      	movs	r3, #1
 800149c:	e00f      	b.n	80014be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800149e:	4a0a      	ldr	r2, [pc, #40]	@ (80014c8 <SysTick_Config+0x40>)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	3b01      	subs	r3, #1
 80014a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014a6:	210f      	movs	r1, #15
 80014a8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80014ac:	f7ff ff8e 	bl	80013cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014b0:	4b05      	ldr	r3, [pc, #20]	@ (80014c8 <SysTick_Config+0x40>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014b6:	4b04      	ldr	r3, [pc, #16]	@ (80014c8 <SysTick_Config+0x40>)
 80014b8:	2207      	movs	r2, #7
 80014ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014bc:	2300      	movs	r3, #0
}
 80014be:	4618      	mov	r0, r3
 80014c0:	3708      	adds	r7, #8
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	bf00      	nop
 80014c8:	e000e010 	.word	0xe000e010

080014cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b082      	sub	sp, #8
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014d4:	6878      	ldr	r0, [r7, #4]
 80014d6:	f7ff ff47 	bl	8001368 <__NVIC_SetPriorityGrouping>
}
 80014da:	bf00      	nop
 80014dc:	3708      	adds	r7, #8
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}

080014e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014e2:	b580      	push	{r7, lr}
 80014e4:	b086      	sub	sp, #24
 80014e6:	af00      	add	r7, sp, #0
 80014e8:	4603      	mov	r3, r0
 80014ea:	60b9      	str	r1, [r7, #8]
 80014ec:	607a      	str	r2, [r7, #4]
 80014ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80014f0:	2300      	movs	r3, #0
 80014f2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80014f4:	f7ff ff5c 	bl	80013b0 <__NVIC_GetPriorityGrouping>
 80014f8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014fa:	687a      	ldr	r2, [r7, #4]
 80014fc:	68b9      	ldr	r1, [r7, #8]
 80014fe:	6978      	ldr	r0, [r7, #20]
 8001500:	f7ff ff8e 	bl	8001420 <NVIC_EncodePriority>
 8001504:	4602      	mov	r2, r0
 8001506:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800150a:	4611      	mov	r1, r2
 800150c:	4618      	mov	r0, r3
 800150e:	f7ff ff5d 	bl	80013cc <__NVIC_SetPriority>
}
 8001512:	bf00      	nop
 8001514:	3718      	adds	r7, #24
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}

0800151a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800151a:	b580      	push	{r7, lr}
 800151c:	b082      	sub	sp, #8
 800151e:	af00      	add	r7, sp, #0
 8001520:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001522:	6878      	ldr	r0, [r7, #4]
 8001524:	f7ff ffb0 	bl	8001488 <SysTick_Config>
 8001528:	4603      	mov	r3, r0
}
 800152a:	4618      	mov	r0, r3
 800152c:	3708      	adds	r7, #8
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}
	...

08001534 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001534:	b480      	push	{r7}
 8001536:	b087      	sub	sp, #28
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
 800153c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800153e:	2300      	movs	r3, #0
 8001540:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001542:	e148      	b.n	80017d6 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	681a      	ldr	r2, [r3, #0]
 8001548:	2101      	movs	r1, #1
 800154a:	697b      	ldr	r3, [r7, #20]
 800154c:	fa01 f303 	lsl.w	r3, r1, r3
 8001550:	4013      	ands	r3, r2
 8001552:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	2b00      	cmp	r3, #0
 8001558:	f000 813a 	beq.w	80017d0 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	685b      	ldr	r3, [r3, #4]
 8001560:	f003 0303 	and.w	r3, r3, #3
 8001564:	2b01      	cmp	r3, #1
 8001566:	d005      	beq.n	8001574 <HAL_GPIO_Init+0x40>
 8001568:	683b      	ldr	r3, [r7, #0]
 800156a:	685b      	ldr	r3, [r3, #4]
 800156c:	f003 0303 	and.w	r3, r3, #3
 8001570:	2b02      	cmp	r3, #2
 8001572:	d130      	bne.n	80015d6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	689b      	ldr	r3, [r3, #8]
 8001578:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800157a:	697b      	ldr	r3, [r7, #20]
 800157c:	005b      	lsls	r3, r3, #1
 800157e:	2203      	movs	r2, #3
 8001580:	fa02 f303 	lsl.w	r3, r2, r3
 8001584:	43db      	mvns	r3, r3
 8001586:	693a      	ldr	r2, [r7, #16]
 8001588:	4013      	ands	r3, r2
 800158a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	68da      	ldr	r2, [r3, #12]
 8001590:	697b      	ldr	r3, [r7, #20]
 8001592:	005b      	lsls	r3, r3, #1
 8001594:	fa02 f303 	lsl.w	r3, r2, r3
 8001598:	693a      	ldr	r2, [r7, #16]
 800159a:	4313      	orrs	r3, r2
 800159c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	693a      	ldr	r2, [r7, #16]
 80015a2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	685b      	ldr	r3, [r3, #4]
 80015a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80015aa:	2201      	movs	r2, #1
 80015ac:	697b      	ldr	r3, [r7, #20]
 80015ae:	fa02 f303 	lsl.w	r3, r2, r3
 80015b2:	43db      	mvns	r3, r3
 80015b4:	693a      	ldr	r2, [r7, #16]
 80015b6:	4013      	ands	r3, r2
 80015b8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	685b      	ldr	r3, [r3, #4]
 80015be:	091b      	lsrs	r3, r3, #4
 80015c0:	f003 0201 	and.w	r2, r3, #1
 80015c4:	697b      	ldr	r3, [r7, #20]
 80015c6:	fa02 f303 	lsl.w	r3, r2, r3
 80015ca:	693a      	ldr	r2, [r7, #16]
 80015cc:	4313      	orrs	r3, r2
 80015ce:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	693a      	ldr	r2, [r7, #16]
 80015d4:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	685b      	ldr	r3, [r3, #4]
 80015da:	f003 0303 	and.w	r3, r3, #3
 80015de:	2b03      	cmp	r3, #3
 80015e0:	d017      	beq.n	8001612 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	68db      	ldr	r3, [r3, #12]
 80015e6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80015e8:	697b      	ldr	r3, [r7, #20]
 80015ea:	005b      	lsls	r3, r3, #1
 80015ec:	2203      	movs	r2, #3
 80015ee:	fa02 f303 	lsl.w	r3, r2, r3
 80015f2:	43db      	mvns	r3, r3
 80015f4:	693a      	ldr	r2, [r7, #16]
 80015f6:	4013      	ands	r3, r2
 80015f8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80015fa:	683b      	ldr	r3, [r7, #0]
 80015fc:	689a      	ldr	r2, [r3, #8]
 80015fe:	697b      	ldr	r3, [r7, #20]
 8001600:	005b      	lsls	r3, r3, #1
 8001602:	fa02 f303 	lsl.w	r3, r2, r3
 8001606:	693a      	ldr	r2, [r7, #16]
 8001608:	4313      	orrs	r3, r2
 800160a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	693a      	ldr	r2, [r7, #16]
 8001610:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	685b      	ldr	r3, [r3, #4]
 8001616:	f003 0303 	and.w	r3, r3, #3
 800161a:	2b02      	cmp	r3, #2
 800161c:	d123      	bne.n	8001666 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800161e:	697b      	ldr	r3, [r7, #20]
 8001620:	08da      	lsrs	r2, r3, #3
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	3208      	adds	r2, #8
 8001626:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800162a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800162c:	697b      	ldr	r3, [r7, #20]
 800162e:	f003 0307 	and.w	r3, r3, #7
 8001632:	009b      	lsls	r3, r3, #2
 8001634:	220f      	movs	r2, #15
 8001636:	fa02 f303 	lsl.w	r3, r2, r3
 800163a:	43db      	mvns	r3, r3
 800163c:	693a      	ldr	r2, [r7, #16]
 800163e:	4013      	ands	r3, r2
 8001640:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	691a      	ldr	r2, [r3, #16]
 8001646:	697b      	ldr	r3, [r7, #20]
 8001648:	f003 0307 	and.w	r3, r3, #7
 800164c:	009b      	lsls	r3, r3, #2
 800164e:	fa02 f303 	lsl.w	r3, r2, r3
 8001652:	693a      	ldr	r2, [r7, #16]
 8001654:	4313      	orrs	r3, r2
 8001656:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001658:	697b      	ldr	r3, [r7, #20]
 800165a:	08da      	lsrs	r2, r3, #3
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	3208      	adds	r2, #8
 8001660:	6939      	ldr	r1, [r7, #16]
 8001662:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800166c:	697b      	ldr	r3, [r7, #20]
 800166e:	005b      	lsls	r3, r3, #1
 8001670:	2203      	movs	r2, #3
 8001672:	fa02 f303 	lsl.w	r3, r2, r3
 8001676:	43db      	mvns	r3, r3
 8001678:	693a      	ldr	r2, [r7, #16]
 800167a:	4013      	ands	r3, r2
 800167c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800167e:	683b      	ldr	r3, [r7, #0]
 8001680:	685b      	ldr	r3, [r3, #4]
 8001682:	f003 0203 	and.w	r2, r3, #3
 8001686:	697b      	ldr	r3, [r7, #20]
 8001688:	005b      	lsls	r3, r3, #1
 800168a:	fa02 f303 	lsl.w	r3, r2, r3
 800168e:	693a      	ldr	r2, [r7, #16]
 8001690:	4313      	orrs	r3, r2
 8001692:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	693a      	ldr	r2, [r7, #16]
 8001698:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800169a:	683b      	ldr	r3, [r7, #0]
 800169c:	685b      	ldr	r3, [r3, #4]
 800169e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	f000 8094 	beq.w	80017d0 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016a8:	4b52      	ldr	r3, [pc, #328]	@ (80017f4 <HAL_GPIO_Init+0x2c0>)
 80016aa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80016ac:	4a51      	ldr	r2, [pc, #324]	@ (80017f4 <HAL_GPIO_Init+0x2c0>)
 80016ae:	f043 0301 	orr.w	r3, r3, #1
 80016b2:	6613      	str	r3, [r2, #96]	@ 0x60
 80016b4:	4b4f      	ldr	r3, [pc, #316]	@ (80017f4 <HAL_GPIO_Init+0x2c0>)
 80016b6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80016b8:	f003 0301 	and.w	r3, r3, #1
 80016bc:	60bb      	str	r3, [r7, #8]
 80016be:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80016c0:	4a4d      	ldr	r2, [pc, #308]	@ (80017f8 <HAL_GPIO_Init+0x2c4>)
 80016c2:	697b      	ldr	r3, [r7, #20]
 80016c4:	089b      	lsrs	r3, r3, #2
 80016c6:	3302      	adds	r3, #2
 80016c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016cc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80016ce:	697b      	ldr	r3, [r7, #20]
 80016d0:	f003 0303 	and.w	r3, r3, #3
 80016d4:	009b      	lsls	r3, r3, #2
 80016d6:	220f      	movs	r2, #15
 80016d8:	fa02 f303 	lsl.w	r3, r2, r3
 80016dc:	43db      	mvns	r3, r3
 80016de:	693a      	ldr	r2, [r7, #16]
 80016e0:	4013      	ands	r3, r2
 80016e2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80016ea:	d00d      	beq.n	8001708 <HAL_GPIO_Init+0x1d4>
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	4a43      	ldr	r2, [pc, #268]	@ (80017fc <HAL_GPIO_Init+0x2c8>)
 80016f0:	4293      	cmp	r3, r2
 80016f2:	d007      	beq.n	8001704 <HAL_GPIO_Init+0x1d0>
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	4a42      	ldr	r2, [pc, #264]	@ (8001800 <HAL_GPIO_Init+0x2cc>)
 80016f8:	4293      	cmp	r3, r2
 80016fa:	d101      	bne.n	8001700 <HAL_GPIO_Init+0x1cc>
 80016fc:	2302      	movs	r3, #2
 80016fe:	e004      	b.n	800170a <HAL_GPIO_Init+0x1d6>
 8001700:	2307      	movs	r3, #7
 8001702:	e002      	b.n	800170a <HAL_GPIO_Init+0x1d6>
 8001704:	2301      	movs	r3, #1
 8001706:	e000      	b.n	800170a <HAL_GPIO_Init+0x1d6>
 8001708:	2300      	movs	r3, #0
 800170a:	697a      	ldr	r2, [r7, #20]
 800170c:	f002 0203 	and.w	r2, r2, #3
 8001710:	0092      	lsls	r2, r2, #2
 8001712:	4093      	lsls	r3, r2
 8001714:	693a      	ldr	r2, [r7, #16]
 8001716:	4313      	orrs	r3, r2
 8001718:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800171a:	4937      	ldr	r1, [pc, #220]	@ (80017f8 <HAL_GPIO_Init+0x2c4>)
 800171c:	697b      	ldr	r3, [r7, #20]
 800171e:	089b      	lsrs	r3, r3, #2
 8001720:	3302      	adds	r3, #2
 8001722:	693a      	ldr	r2, [r7, #16]
 8001724:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001728:	4b36      	ldr	r3, [pc, #216]	@ (8001804 <HAL_GPIO_Init+0x2d0>)
 800172a:	689b      	ldr	r3, [r3, #8]
 800172c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	43db      	mvns	r3, r3
 8001732:	693a      	ldr	r2, [r7, #16]
 8001734:	4013      	ands	r3, r2
 8001736:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	685b      	ldr	r3, [r3, #4]
 800173c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001740:	2b00      	cmp	r3, #0
 8001742:	d003      	beq.n	800174c <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8001744:	693a      	ldr	r2, [r7, #16]
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	4313      	orrs	r3, r2
 800174a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800174c:	4a2d      	ldr	r2, [pc, #180]	@ (8001804 <HAL_GPIO_Init+0x2d0>)
 800174e:	693b      	ldr	r3, [r7, #16]
 8001750:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001752:	4b2c      	ldr	r3, [pc, #176]	@ (8001804 <HAL_GPIO_Init+0x2d0>)
 8001754:	68db      	ldr	r3, [r3, #12]
 8001756:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	43db      	mvns	r3, r3
 800175c:	693a      	ldr	r2, [r7, #16]
 800175e:	4013      	ands	r3, r2
 8001760:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001762:	683b      	ldr	r3, [r7, #0]
 8001764:	685b      	ldr	r3, [r3, #4]
 8001766:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800176a:	2b00      	cmp	r3, #0
 800176c:	d003      	beq.n	8001776 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800176e:	693a      	ldr	r2, [r7, #16]
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	4313      	orrs	r3, r2
 8001774:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001776:	4a23      	ldr	r2, [pc, #140]	@ (8001804 <HAL_GPIO_Init+0x2d0>)
 8001778:	693b      	ldr	r3, [r7, #16]
 800177a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800177c:	4b21      	ldr	r3, [pc, #132]	@ (8001804 <HAL_GPIO_Init+0x2d0>)
 800177e:	685b      	ldr	r3, [r3, #4]
 8001780:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	43db      	mvns	r3, r3
 8001786:	693a      	ldr	r2, [r7, #16]
 8001788:	4013      	ands	r3, r2
 800178a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	685b      	ldr	r3, [r3, #4]
 8001790:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001794:	2b00      	cmp	r3, #0
 8001796:	d003      	beq.n	80017a0 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8001798:	693a      	ldr	r2, [r7, #16]
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	4313      	orrs	r3, r2
 800179e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80017a0:	4a18      	ldr	r2, [pc, #96]	@ (8001804 <HAL_GPIO_Init+0x2d0>)
 80017a2:	693b      	ldr	r3, [r7, #16]
 80017a4:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80017a6:	4b17      	ldr	r3, [pc, #92]	@ (8001804 <HAL_GPIO_Init+0x2d0>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	43db      	mvns	r3, r3
 80017b0:	693a      	ldr	r2, [r7, #16]
 80017b2:	4013      	ands	r3, r2
 80017b4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80017b6:	683b      	ldr	r3, [r7, #0]
 80017b8:	685b      	ldr	r3, [r3, #4]
 80017ba:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d003      	beq.n	80017ca <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 80017c2:	693a      	ldr	r2, [r7, #16]
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	4313      	orrs	r3, r2
 80017c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80017ca:	4a0e      	ldr	r2, [pc, #56]	@ (8001804 <HAL_GPIO_Init+0x2d0>)
 80017cc:	693b      	ldr	r3, [r7, #16]
 80017ce:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80017d0:	697b      	ldr	r3, [r7, #20]
 80017d2:	3301      	adds	r3, #1
 80017d4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	681a      	ldr	r2, [r3, #0]
 80017da:	697b      	ldr	r3, [r7, #20]
 80017dc:	fa22 f303 	lsr.w	r3, r2, r3
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	f47f aeaf 	bne.w	8001544 <HAL_GPIO_Init+0x10>
  }
}
 80017e6:	bf00      	nop
 80017e8:	bf00      	nop
 80017ea:	371c      	adds	r7, #28
 80017ec:	46bd      	mov	sp, r7
 80017ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f2:	4770      	bx	lr
 80017f4:	40021000 	.word	0x40021000
 80017f8:	40010000 	.word	0x40010000
 80017fc:	48000400 	.word	0x48000400
 8001800:	48000800 	.word	0x48000800
 8001804:	40010400 	.word	0x40010400

08001808 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001808:	b480      	push	{r7}
 800180a:	b083      	sub	sp, #12
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
 8001810:	460b      	mov	r3, r1
 8001812:	807b      	strh	r3, [r7, #2]
 8001814:	4613      	mov	r3, r2
 8001816:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001818:	787b      	ldrb	r3, [r7, #1]
 800181a:	2b00      	cmp	r3, #0
 800181c:	d003      	beq.n	8001826 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800181e:	887a      	ldrh	r2, [r7, #2]
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001824:	e002      	b.n	800182c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001826:	887a      	ldrh	r2, [r7, #2]
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800182c:	bf00      	nop
 800182e:	370c      	adds	r7, #12
 8001830:	46bd      	mov	sp, r7
 8001832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001836:	4770      	bx	lr

08001838 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001838:	b480      	push	{r7}
 800183a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800183c:	4b05      	ldr	r3, [pc, #20]	@ (8001854 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	4a04      	ldr	r2, [pc, #16]	@ (8001854 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001842:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001846:	6013      	str	r3, [r2, #0]
}
 8001848:	bf00      	nop
 800184a:	46bd      	mov	sp, r7
 800184c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001850:	4770      	bx	lr
 8001852:	bf00      	nop
 8001854:	40007000 	.word	0x40007000

08001858 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001858:	b480      	push	{r7}
 800185a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800185c:	4b04      	ldr	r3, [pc, #16]	@ (8001870 <HAL_PWREx_GetVoltageRange+0x18>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8001864:	4618      	mov	r0, r3
 8001866:	46bd      	mov	sp, r7
 8001868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186c:	4770      	bx	lr
 800186e:	bf00      	nop
 8001870:	40007000 	.word	0x40007000

08001874 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001874:	b480      	push	{r7}
 8001876:	b085      	sub	sp, #20
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001882:	d130      	bne.n	80018e6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001884:	4b23      	ldr	r3, [pc, #140]	@ (8001914 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800188c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001890:	d038      	beq.n	8001904 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001892:	4b20      	ldr	r3, [pc, #128]	@ (8001914 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800189a:	4a1e      	ldr	r2, [pc, #120]	@ (8001914 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800189c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80018a0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80018a2:	4b1d      	ldr	r3, [pc, #116]	@ (8001918 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	2232      	movs	r2, #50	@ 0x32
 80018a8:	fb02 f303 	mul.w	r3, r2, r3
 80018ac:	4a1b      	ldr	r2, [pc, #108]	@ (800191c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80018ae:	fba2 2303 	umull	r2, r3, r2, r3
 80018b2:	0c9b      	lsrs	r3, r3, #18
 80018b4:	3301      	adds	r3, #1
 80018b6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80018b8:	e002      	b.n	80018c0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	3b01      	subs	r3, #1
 80018be:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80018c0:	4b14      	ldr	r3, [pc, #80]	@ (8001914 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80018c2:	695b      	ldr	r3, [r3, #20]
 80018c4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80018c8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80018cc:	d102      	bne.n	80018d4 <HAL_PWREx_ControlVoltageScaling+0x60>
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d1f2      	bne.n	80018ba <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80018d4:	4b0f      	ldr	r3, [pc, #60]	@ (8001914 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80018d6:	695b      	ldr	r3, [r3, #20]
 80018d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80018dc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80018e0:	d110      	bne.n	8001904 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80018e2:	2303      	movs	r3, #3
 80018e4:	e00f      	b.n	8001906 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80018e6:	4b0b      	ldr	r3, [pc, #44]	@ (8001914 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80018ee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80018f2:	d007      	beq.n	8001904 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80018f4:	4b07      	ldr	r3, [pc, #28]	@ (8001914 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80018fc:	4a05      	ldr	r2, [pc, #20]	@ (8001914 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80018fe:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001902:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001904:	2300      	movs	r3, #0
}
 8001906:	4618      	mov	r0, r3
 8001908:	3714      	adds	r7, #20
 800190a:	46bd      	mov	sp, r7
 800190c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001910:	4770      	bx	lr
 8001912:	bf00      	nop
 8001914:	40007000 	.word	0x40007000
 8001918:	20000004 	.word	0x20000004
 800191c:	431bde83 	.word	0x431bde83

08001920 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b088      	sub	sp, #32
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	2b00      	cmp	r3, #0
 800192c:	d102      	bne.n	8001934 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800192e:	2301      	movs	r3, #1
 8001930:	f000 bc02 	b.w	8002138 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001934:	4b96      	ldr	r3, [pc, #600]	@ (8001b90 <HAL_RCC_OscConfig+0x270>)
 8001936:	689b      	ldr	r3, [r3, #8]
 8001938:	f003 030c 	and.w	r3, r3, #12
 800193c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800193e:	4b94      	ldr	r3, [pc, #592]	@ (8001b90 <HAL_RCC_OscConfig+0x270>)
 8001940:	68db      	ldr	r3, [r3, #12]
 8001942:	f003 0303 	and.w	r3, r3, #3
 8001946:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f003 0310 	and.w	r3, r3, #16
 8001950:	2b00      	cmp	r3, #0
 8001952:	f000 80e4 	beq.w	8001b1e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001956:	69bb      	ldr	r3, [r7, #24]
 8001958:	2b00      	cmp	r3, #0
 800195a:	d007      	beq.n	800196c <HAL_RCC_OscConfig+0x4c>
 800195c:	69bb      	ldr	r3, [r7, #24]
 800195e:	2b0c      	cmp	r3, #12
 8001960:	f040 808b 	bne.w	8001a7a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001964:	697b      	ldr	r3, [r7, #20]
 8001966:	2b01      	cmp	r3, #1
 8001968:	f040 8087 	bne.w	8001a7a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800196c:	4b88      	ldr	r3, [pc, #544]	@ (8001b90 <HAL_RCC_OscConfig+0x270>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f003 0302 	and.w	r3, r3, #2
 8001974:	2b00      	cmp	r3, #0
 8001976:	d005      	beq.n	8001984 <HAL_RCC_OscConfig+0x64>
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	699b      	ldr	r3, [r3, #24]
 800197c:	2b00      	cmp	r3, #0
 800197e:	d101      	bne.n	8001984 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001980:	2301      	movs	r3, #1
 8001982:	e3d9      	b.n	8002138 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	6a1a      	ldr	r2, [r3, #32]
 8001988:	4b81      	ldr	r3, [pc, #516]	@ (8001b90 <HAL_RCC_OscConfig+0x270>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f003 0308 	and.w	r3, r3, #8
 8001990:	2b00      	cmp	r3, #0
 8001992:	d004      	beq.n	800199e <HAL_RCC_OscConfig+0x7e>
 8001994:	4b7e      	ldr	r3, [pc, #504]	@ (8001b90 <HAL_RCC_OscConfig+0x270>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800199c:	e005      	b.n	80019aa <HAL_RCC_OscConfig+0x8a>
 800199e:	4b7c      	ldr	r3, [pc, #496]	@ (8001b90 <HAL_RCC_OscConfig+0x270>)
 80019a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80019a4:	091b      	lsrs	r3, r3, #4
 80019a6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80019aa:	4293      	cmp	r3, r2
 80019ac:	d223      	bcs.n	80019f6 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	6a1b      	ldr	r3, [r3, #32]
 80019b2:	4618      	mov	r0, r3
 80019b4:	f000 fd8c 	bl	80024d0 <RCC_SetFlashLatencyFromMSIRange>
 80019b8:	4603      	mov	r3, r0
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d001      	beq.n	80019c2 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80019be:	2301      	movs	r3, #1
 80019c0:	e3ba      	b.n	8002138 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80019c2:	4b73      	ldr	r3, [pc, #460]	@ (8001b90 <HAL_RCC_OscConfig+0x270>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	4a72      	ldr	r2, [pc, #456]	@ (8001b90 <HAL_RCC_OscConfig+0x270>)
 80019c8:	f043 0308 	orr.w	r3, r3, #8
 80019cc:	6013      	str	r3, [r2, #0]
 80019ce:	4b70      	ldr	r3, [pc, #448]	@ (8001b90 <HAL_RCC_OscConfig+0x270>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	6a1b      	ldr	r3, [r3, #32]
 80019da:	496d      	ldr	r1, [pc, #436]	@ (8001b90 <HAL_RCC_OscConfig+0x270>)
 80019dc:	4313      	orrs	r3, r2
 80019de:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80019e0:	4b6b      	ldr	r3, [pc, #428]	@ (8001b90 <HAL_RCC_OscConfig+0x270>)
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	69db      	ldr	r3, [r3, #28]
 80019ec:	021b      	lsls	r3, r3, #8
 80019ee:	4968      	ldr	r1, [pc, #416]	@ (8001b90 <HAL_RCC_OscConfig+0x270>)
 80019f0:	4313      	orrs	r3, r2
 80019f2:	604b      	str	r3, [r1, #4]
 80019f4:	e025      	b.n	8001a42 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80019f6:	4b66      	ldr	r3, [pc, #408]	@ (8001b90 <HAL_RCC_OscConfig+0x270>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	4a65      	ldr	r2, [pc, #404]	@ (8001b90 <HAL_RCC_OscConfig+0x270>)
 80019fc:	f043 0308 	orr.w	r3, r3, #8
 8001a00:	6013      	str	r3, [r2, #0]
 8001a02:	4b63      	ldr	r3, [pc, #396]	@ (8001b90 <HAL_RCC_OscConfig+0x270>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	6a1b      	ldr	r3, [r3, #32]
 8001a0e:	4960      	ldr	r1, [pc, #384]	@ (8001b90 <HAL_RCC_OscConfig+0x270>)
 8001a10:	4313      	orrs	r3, r2
 8001a12:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001a14:	4b5e      	ldr	r3, [pc, #376]	@ (8001b90 <HAL_RCC_OscConfig+0x270>)
 8001a16:	685b      	ldr	r3, [r3, #4]
 8001a18:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	69db      	ldr	r3, [r3, #28]
 8001a20:	021b      	lsls	r3, r3, #8
 8001a22:	495b      	ldr	r1, [pc, #364]	@ (8001b90 <HAL_RCC_OscConfig+0x270>)
 8001a24:	4313      	orrs	r3, r2
 8001a26:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001a28:	69bb      	ldr	r3, [r7, #24]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d109      	bne.n	8001a42 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	6a1b      	ldr	r3, [r3, #32]
 8001a32:	4618      	mov	r0, r3
 8001a34:	f000 fd4c 	bl	80024d0 <RCC_SetFlashLatencyFromMSIRange>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d001      	beq.n	8001a42 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001a3e:	2301      	movs	r3, #1
 8001a40:	e37a      	b.n	8002138 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001a42:	f000 fc81 	bl	8002348 <HAL_RCC_GetSysClockFreq>
 8001a46:	4602      	mov	r2, r0
 8001a48:	4b51      	ldr	r3, [pc, #324]	@ (8001b90 <HAL_RCC_OscConfig+0x270>)
 8001a4a:	689b      	ldr	r3, [r3, #8]
 8001a4c:	091b      	lsrs	r3, r3, #4
 8001a4e:	f003 030f 	and.w	r3, r3, #15
 8001a52:	4950      	ldr	r1, [pc, #320]	@ (8001b94 <HAL_RCC_OscConfig+0x274>)
 8001a54:	5ccb      	ldrb	r3, [r1, r3]
 8001a56:	f003 031f 	and.w	r3, r3, #31
 8001a5a:	fa22 f303 	lsr.w	r3, r2, r3
 8001a5e:	4a4e      	ldr	r2, [pc, #312]	@ (8001b98 <HAL_RCC_OscConfig+0x278>)
 8001a60:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001a62:	4b4e      	ldr	r3, [pc, #312]	@ (8001b9c <HAL_RCC_OscConfig+0x27c>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	4618      	mov	r0, r3
 8001a68:	f7ff fbfe 	bl	8001268 <HAL_InitTick>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001a70:	7bfb      	ldrb	r3, [r7, #15]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d052      	beq.n	8001b1c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8001a76:	7bfb      	ldrb	r3, [r7, #15]
 8001a78:	e35e      	b.n	8002138 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	699b      	ldr	r3, [r3, #24]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d032      	beq.n	8001ae8 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001a82:	4b43      	ldr	r3, [pc, #268]	@ (8001b90 <HAL_RCC_OscConfig+0x270>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	4a42      	ldr	r2, [pc, #264]	@ (8001b90 <HAL_RCC_OscConfig+0x270>)
 8001a88:	f043 0301 	orr.w	r3, r3, #1
 8001a8c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001a8e:	f7ff fc3b 	bl	8001308 <HAL_GetTick>
 8001a92:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001a94:	e008      	b.n	8001aa8 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001a96:	f7ff fc37 	bl	8001308 <HAL_GetTick>
 8001a9a:	4602      	mov	r2, r0
 8001a9c:	693b      	ldr	r3, [r7, #16]
 8001a9e:	1ad3      	subs	r3, r2, r3
 8001aa0:	2b02      	cmp	r3, #2
 8001aa2:	d901      	bls.n	8001aa8 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001aa4:	2303      	movs	r3, #3
 8001aa6:	e347      	b.n	8002138 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001aa8:	4b39      	ldr	r3, [pc, #228]	@ (8001b90 <HAL_RCC_OscConfig+0x270>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f003 0302 	and.w	r3, r3, #2
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d0f0      	beq.n	8001a96 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001ab4:	4b36      	ldr	r3, [pc, #216]	@ (8001b90 <HAL_RCC_OscConfig+0x270>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	4a35      	ldr	r2, [pc, #212]	@ (8001b90 <HAL_RCC_OscConfig+0x270>)
 8001aba:	f043 0308 	orr.w	r3, r3, #8
 8001abe:	6013      	str	r3, [r2, #0]
 8001ac0:	4b33      	ldr	r3, [pc, #204]	@ (8001b90 <HAL_RCC_OscConfig+0x270>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	6a1b      	ldr	r3, [r3, #32]
 8001acc:	4930      	ldr	r1, [pc, #192]	@ (8001b90 <HAL_RCC_OscConfig+0x270>)
 8001ace:	4313      	orrs	r3, r2
 8001ad0:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001ad2:	4b2f      	ldr	r3, [pc, #188]	@ (8001b90 <HAL_RCC_OscConfig+0x270>)
 8001ad4:	685b      	ldr	r3, [r3, #4]
 8001ad6:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	69db      	ldr	r3, [r3, #28]
 8001ade:	021b      	lsls	r3, r3, #8
 8001ae0:	492b      	ldr	r1, [pc, #172]	@ (8001b90 <HAL_RCC_OscConfig+0x270>)
 8001ae2:	4313      	orrs	r3, r2
 8001ae4:	604b      	str	r3, [r1, #4]
 8001ae6:	e01a      	b.n	8001b1e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001ae8:	4b29      	ldr	r3, [pc, #164]	@ (8001b90 <HAL_RCC_OscConfig+0x270>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	4a28      	ldr	r2, [pc, #160]	@ (8001b90 <HAL_RCC_OscConfig+0x270>)
 8001aee:	f023 0301 	bic.w	r3, r3, #1
 8001af2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001af4:	f7ff fc08 	bl	8001308 <HAL_GetTick>
 8001af8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001afa:	e008      	b.n	8001b0e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001afc:	f7ff fc04 	bl	8001308 <HAL_GetTick>
 8001b00:	4602      	mov	r2, r0
 8001b02:	693b      	ldr	r3, [r7, #16]
 8001b04:	1ad3      	subs	r3, r2, r3
 8001b06:	2b02      	cmp	r3, #2
 8001b08:	d901      	bls.n	8001b0e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001b0a:	2303      	movs	r3, #3
 8001b0c:	e314      	b.n	8002138 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001b0e:	4b20      	ldr	r3, [pc, #128]	@ (8001b90 <HAL_RCC_OscConfig+0x270>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f003 0302 	and.w	r3, r3, #2
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d1f0      	bne.n	8001afc <HAL_RCC_OscConfig+0x1dc>
 8001b1a:	e000      	b.n	8001b1e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001b1c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f003 0301 	and.w	r3, r3, #1
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d073      	beq.n	8001c12 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001b2a:	69bb      	ldr	r3, [r7, #24]
 8001b2c:	2b08      	cmp	r3, #8
 8001b2e:	d005      	beq.n	8001b3c <HAL_RCC_OscConfig+0x21c>
 8001b30:	69bb      	ldr	r3, [r7, #24]
 8001b32:	2b0c      	cmp	r3, #12
 8001b34:	d10e      	bne.n	8001b54 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001b36:	697b      	ldr	r3, [r7, #20]
 8001b38:	2b03      	cmp	r3, #3
 8001b3a:	d10b      	bne.n	8001b54 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b3c:	4b14      	ldr	r3, [pc, #80]	@ (8001b90 <HAL_RCC_OscConfig+0x270>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d063      	beq.n	8001c10 <HAL_RCC_OscConfig+0x2f0>
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	685b      	ldr	r3, [r3, #4]
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d15f      	bne.n	8001c10 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001b50:	2301      	movs	r3, #1
 8001b52:	e2f1      	b.n	8002138 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	685b      	ldr	r3, [r3, #4]
 8001b58:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001b5c:	d106      	bne.n	8001b6c <HAL_RCC_OscConfig+0x24c>
 8001b5e:	4b0c      	ldr	r3, [pc, #48]	@ (8001b90 <HAL_RCC_OscConfig+0x270>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	4a0b      	ldr	r2, [pc, #44]	@ (8001b90 <HAL_RCC_OscConfig+0x270>)
 8001b64:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001b68:	6013      	str	r3, [r2, #0]
 8001b6a:	e025      	b.n	8001bb8 <HAL_RCC_OscConfig+0x298>
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	685b      	ldr	r3, [r3, #4]
 8001b70:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001b74:	d114      	bne.n	8001ba0 <HAL_RCC_OscConfig+0x280>
 8001b76:	4b06      	ldr	r3, [pc, #24]	@ (8001b90 <HAL_RCC_OscConfig+0x270>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	4a05      	ldr	r2, [pc, #20]	@ (8001b90 <HAL_RCC_OscConfig+0x270>)
 8001b7c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001b80:	6013      	str	r3, [r2, #0]
 8001b82:	4b03      	ldr	r3, [pc, #12]	@ (8001b90 <HAL_RCC_OscConfig+0x270>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	4a02      	ldr	r2, [pc, #8]	@ (8001b90 <HAL_RCC_OscConfig+0x270>)
 8001b88:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001b8c:	6013      	str	r3, [r2, #0]
 8001b8e:	e013      	b.n	8001bb8 <HAL_RCC_OscConfig+0x298>
 8001b90:	40021000 	.word	0x40021000
 8001b94:	08004028 	.word	0x08004028
 8001b98:	20000004 	.word	0x20000004
 8001b9c:	20000008 	.word	0x20000008
 8001ba0:	4ba0      	ldr	r3, [pc, #640]	@ (8001e24 <HAL_RCC_OscConfig+0x504>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	4a9f      	ldr	r2, [pc, #636]	@ (8001e24 <HAL_RCC_OscConfig+0x504>)
 8001ba6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001baa:	6013      	str	r3, [r2, #0]
 8001bac:	4b9d      	ldr	r3, [pc, #628]	@ (8001e24 <HAL_RCC_OscConfig+0x504>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	4a9c      	ldr	r2, [pc, #624]	@ (8001e24 <HAL_RCC_OscConfig+0x504>)
 8001bb2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001bb6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d013      	beq.n	8001be8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bc0:	f7ff fba2 	bl	8001308 <HAL_GetTick>
 8001bc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001bc6:	e008      	b.n	8001bda <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001bc8:	f7ff fb9e 	bl	8001308 <HAL_GetTick>
 8001bcc:	4602      	mov	r2, r0
 8001bce:	693b      	ldr	r3, [r7, #16]
 8001bd0:	1ad3      	subs	r3, r2, r3
 8001bd2:	2b64      	cmp	r3, #100	@ 0x64
 8001bd4:	d901      	bls.n	8001bda <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001bd6:	2303      	movs	r3, #3
 8001bd8:	e2ae      	b.n	8002138 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001bda:	4b92      	ldr	r3, [pc, #584]	@ (8001e24 <HAL_RCC_OscConfig+0x504>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d0f0      	beq.n	8001bc8 <HAL_RCC_OscConfig+0x2a8>
 8001be6:	e014      	b.n	8001c12 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001be8:	f7ff fb8e 	bl	8001308 <HAL_GetTick>
 8001bec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001bee:	e008      	b.n	8001c02 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001bf0:	f7ff fb8a 	bl	8001308 <HAL_GetTick>
 8001bf4:	4602      	mov	r2, r0
 8001bf6:	693b      	ldr	r3, [r7, #16]
 8001bf8:	1ad3      	subs	r3, r2, r3
 8001bfa:	2b64      	cmp	r3, #100	@ 0x64
 8001bfc:	d901      	bls.n	8001c02 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001bfe:	2303      	movs	r3, #3
 8001c00:	e29a      	b.n	8002138 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001c02:	4b88      	ldr	r3, [pc, #544]	@ (8001e24 <HAL_RCC_OscConfig+0x504>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d1f0      	bne.n	8001bf0 <HAL_RCC_OscConfig+0x2d0>
 8001c0e:	e000      	b.n	8001c12 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c10:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f003 0302 	and.w	r3, r3, #2
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d060      	beq.n	8001ce0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001c1e:	69bb      	ldr	r3, [r7, #24]
 8001c20:	2b04      	cmp	r3, #4
 8001c22:	d005      	beq.n	8001c30 <HAL_RCC_OscConfig+0x310>
 8001c24:	69bb      	ldr	r3, [r7, #24]
 8001c26:	2b0c      	cmp	r3, #12
 8001c28:	d119      	bne.n	8001c5e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001c2a:	697b      	ldr	r3, [r7, #20]
 8001c2c:	2b02      	cmp	r3, #2
 8001c2e:	d116      	bne.n	8001c5e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001c30:	4b7c      	ldr	r3, [pc, #496]	@ (8001e24 <HAL_RCC_OscConfig+0x504>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d005      	beq.n	8001c48 <HAL_RCC_OscConfig+0x328>
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	68db      	ldr	r3, [r3, #12]
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d101      	bne.n	8001c48 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001c44:	2301      	movs	r3, #1
 8001c46:	e277      	b.n	8002138 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c48:	4b76      	ldr	r3, [pc, #472]	@ (8001e24 <HAL_RCC_OscConfig+0x504>)
 8001c4a:	685b      	ldr	r3, [r3, #4]
 8001c4c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	691b      	ldr	r3, [r3, #16]
 8001c54:	061b      	lsls	r3, r3, #24
 8001c56:	4973      	ldr	r1, [pc, #460]	@ (8001e24 <HAL_RCC_OscConfig+0x504>)
 8001c58:	4313      	orrs	r3, r2
 8001c5a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001c5c:	e040      	b.n	8001ce0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	68db      	ldr	r3, [r3, #12]
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d023      	beq.n	8001cae <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c66:	4b6f      	ldr	r3, [pc, #444]	@ (8001e24 <HAL_RCC_OscConfig+0x504>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	4a6e      	ldr	r2, [pc, #440]	@ (8001e24 <HAL_RCC_OscConfig+0x504>)
 8001c6c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c70:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c72:	f7ff fb49 	bl	8001308 <HAL_GetTick>
 8001c76:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c78:	e008      	b.n	8001c8c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c7a:	f7ff fb45 	bl	8001308 <HAL_GetTick>
 8001c7e:	4602      	mov	r2, r0
 8001c80:	693b      	ldr	r3, [r7, #16]
 8001c82:	1ad3      	subs	r3, r2, r3
 8001c84:	2b02      	cmp	r3, #2
 8001c86:	d901      	bls.n	8001c8c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001c88:	2303      	movs	r3, #3
 8001c8a:	e255      	b.n	8002138 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c8c:	4b65      	ldr	r3, [pc, #404]	@ (8001e24 <HAL_RCC_OscConfig+0x504>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d0f0      	beq.n	8001c7a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c98:	4b62      	ldr	r3, [pc, #392]	@ (8001e24 <HAL_RCC_OscConfig+0x504>)
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	691b      	ldr	r3, [r3, #16]
 8001ca4:	061b      	lsls	r3, r3, #24
 8001ca6:	495f      	ldr	r1, [pc, #380]	@ (8001e24 <HAL_RCC_OscConfig+0x504>)
 8001ca8:	4313      	orrs	r3, r2
 8001caa:	604b      	str	r3, [r1, #4]
 8001cac:	e018      	b.n	8001ce0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001cae:	4b5d      	ldr	r3, [pc, #372]	@ (8001e24 <HAL_RCC_OscConfig+0x504>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	4a5c      	ldr	r2, [pc, #368]	@ (8001e24 <HAL_RCC_OscConfig+0x504>)
 8001cb4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001cb8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cba:	f7ff fb25 	bl	8001308 <HAL_GetTick>
 8001cbe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001cc0:	e008      	b.n	8001cd4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001cc2:	f7ff fb21 	bl	8001308 <HAL_GetTick>
 8001cc6:	4602      	mov	r2, r0
 8001cc8:	693b      	ldr	r3, [r7, #16]
 8001cca:	1ad3      	subs	r3, r2, r3
 8001ccc:	2b02      	cmp	r3, #2
 8001cce:	d901      	bls.n	8001cd4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001cd0:	2303      	movs	r3, #3
 8001cd2:	e231      	b.n	8002138 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001cd4:	4b53      	ldr	r3, [pc, #332]	@ (8001e24 <HAL_RCC_OscConfig+0x504>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d1f0      	bne.n	8001cc2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f003 0308 	and.w	r3, r3, #8
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d03c      	beq.n	8001d66 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	695b      	ldr	r3, [r3, #20]
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d01c      	beq.n	8001d2e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001cf4:	4b4b      	ldr	r3, [pc, #300]	@ (8001e24 <HAL_RCC_OscConfig+0x504>)
 8001cf6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001cfa:	4a4a      	ldr	r2, [pc, #296]	@ (8001e24 <HAL_RCC_OscConfig+0x504>)
 8001cfc:	f043 0301 	orr.w	r3, r3, #1
 8001d00:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d04:	f7ff fb00 	bl	8001308 <HAL_GetTick>
 8001d08:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001d0a:	e008      	b.n	8001d1e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d0c:	f7ff fafc 	bl	8001308 <HAL_GetTick>
 8001d10:	4602      	mov	r2, r0
 8001d12:	693b      	ldr	r3, [r7, #16]
 8001d14:	1ad3      	subs	r3, r2, r3
 8001d16:	2b02      	cmp	r3, #2
 8001d18:	d901      	bls.n	8001d1e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001d1a:	2303      	movs	r3, #3
 8001d1c:	e20c      	b.n	8002138 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001d1e:	4b41      	ldr	r3, [pc, #260]	@ (8001e24 <HAL_RCC_OscConfig+0x504>)
 8001d20:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001d24:	f003 0302 	and.w	r3, r3, #2
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d0ef      	beq.n	8001d0c <HAL_RCC_OscConfig+0x3ec>
 8001d2c:	e01b      	b.n	8001d66 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d2e:	4b3d      	ldr	r3, [pc, #244]	@ (8001e24 <HAL_RCC_OscConfig+0x504>)
 8001d30:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001d34:	4a3b      	ldr	r2, [pc, #236]	@ (8001e24 <HAL_RCC_OscConfig+0x504>)
 8001d36:	f023 0301 	bic.w	r3, r3, #1
 8001d3a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d3e:	f7ff fae3 	bl	8001308 <HAL_GetTick>
 8001d42:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001d44:	e008      	b.n	8001d58 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d46:	f7ff fadf 	bl	8001308 <HAL_GetTick>
 8001d4a:	4602      	mov	r2, r0
 8001d4c:	693b      	ldr	r3, [r7, #16]
 8001d4e:	1ad3      	subs	r3, r2, r3
 8001d50:	2b02      	cmp	r3, #2
 8001d52:	d901      	bls.n	8001d58 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001d54:	2303      	movs	r3, #3
 8001d56:	e1ef      	b.n	8002138 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001d58:	4b32      	ldr	r3, [pc, #200]	@ (8001e24 <HAL_RCC_OscConfig+0x504>)
 8001d5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001d5e:	f003 0302 	and.w	r3, r3, #2
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d1ef      	bne.n	8001d46 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f003 0304 	and.w	r3, r3, #4
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	f000 80a6 	beq.w	8001ec0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d74:	2300      	movs	r3, #0
 8001d76:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001d78:	4b2a      	ldr	r3, [pc, #168]	@ (8001e24 <HAL_RCC_OscConfig+0x504>)
 8001d7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d7c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d10d      	bne.n	8001da0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d84:	4b27      	ldr	r3, [pc, #156]	@ (8001e24 <HAL_RCC_OscConfig+0x504>)
 8001d86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d88:	4a26      	ldr	r2, [pc, #152]	@ (8001e24 <HAL_RCC_OscConfig+0x504>)
 8001d8a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d8e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001d90:	4b24      	ldr	r3, [pc, #144]	@ (8001e24 <HAL_RCC_OscConfig+0x504>)
 8001d92:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d94:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d98:	60bb      	str	r3, [r7, #8]
 8001d9a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001da0:	4b21      	ldr	r3, [pc, #132]	@ (8001e28 <HAL_RCC_OscConfig+0x508>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d118      	bne.n	8001dde <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001dac:	4b1e      	ldr	r3, [pc, #120]	@ (8001e28 <HAL_RCC_OscConfig+0x508>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	4a1d      	ldr	r2, [pc, #116]	@ (8001e28 <HAL_RCC_OscConfig+0x508>)
 8001db2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001db6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001db8:	f7ff faa6 	bl	8001308 <HAL_GetTick>
 8001dbc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001dbe:	e008      	b.n	8001dd2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001dc0:	f7ff faa2 	bl	8001308 <HAL_GetTick>
 8001dc4:	4602      	mov	r2, r0
 8001dc6:	693b      	ldr	r3, [r7, #16]
 8001dc8:	1ad3      	subs	r3, r2, r3
 8001dca:	2b02      	cmp	r3, #2
 8001dcc:	d901      	bls.n	8001dd2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001dce:	2303      	movs	r3, #3
 8001dd0:	e1b2      	b.n	8002138 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001dd2:	4b15      	ldr	r3, [pc, #84]	@ (8001e28 <HAL_RCC_OscConfig+0x508>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d0f0      	beq.n	8001dc0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	689b      	ldr	r3, [r3, #8]
 8001de2:	2b01      	cmp	r3, #1
 8001de4:	d108      	bne.n	8001df8 <HAL_RCC_OscConfig+0x4d8>
 8001de6:	4b0f      	ldr	r3, [pc, #60]	@ (8001e24 <HAL_RCC_OscConfig+0x504>)
 8001de8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001dec:	4a0d      	ldr	r2, [pc, #52]	@ (8001e24 <HAL_RCC_OscConfig+0x504>)
 8001dee:	f043 0301 	orr.w	r3, r3, #1
 8001df2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001df6:	e029      	b.n	8001e4c <HAL_RCC_OscConfig+0x52c>
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	689b      	ldr	r3, [r3, #8]
 8001dfc:	2b05      	cmp	r3, #5
 8001dfe:	d115      	bne.n	8001e2c <HAL_RCC_OscConfig+0x50c>
 8001e00:	4b08      	ldr	r3, [pc, #32]	@ (8001e24 <HAL_RCC_OscConfig+0x504>)
 8001e02:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e06:	4a07      	ldr	r2, [pc, #28]	@ (8001e24 <HAL_RCC_OscConfig+0x504>)
 8001e08:	f043 0304 	orr.w	r3, r3, #4
 8001e0c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001e10:	4b04      	ldr	r3, [pc, #16]	@ (8001e24 <HAL_RCC_OscConfig+0x504>)
 8001e12:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e16:	4a03      	ldr	r2, [pc, #12]	@ (8001e24 <HAL_RCC_OscConfig+0x504>)
 8001e18:	f043 0301 	orr.w	r3, r3, #1
 8001e1c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001e20:	e014      	b.n	8001e4c <HAL_RCC_OscConfig+0x52c>
 8001e22:	bf00      	nop
 8001e24:	40021000 	.word	0x40021000
 8001e28:	40007000 	.word	0x40007000
 8001e2c:	4b9a      	ldr	r3, [pc, #616]	@ (8002098 <HAL_RCC_OscConfig+0x778>)
 8001e2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e32:	4a99      	ldr	r2, [pc, #612]	@ (8002098 <HAL_RCC_OscConfig+0x778>)
 8001e34:	f023 0301 	bic.w	r3, r3, #1
 8001e38:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001e3c:	4b96      	ldr	r3, [pc, #600]	@ (8002098 <HAL_RCC_OscConfig+0x778>)
 8001e3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e42:	4a95      	ldr	r2, [pc, #596]	@ (8002098 <HAL_RCC_OscConfig+0x778>)
 8001e44:	f023 0304 	bic.w	r3, r3, #4
 8001e48:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	689b      	ldr	r3, [r3, #8]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d016      	beq.n	8001e82 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e54:	f7ff fa58 	bl	8001308 <HAL_GetTick>
 8001e58:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e5a:	e00a      	b.n	8001e72 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e5c:	f7ff fa54 	bl	8001308 <HAL_GetTick>
 8001e60:	4602      	mov	r2, r0
 8001e62:	693b      	ldr	r3, [r7, #16]
 8001e64:	1ad3      	subs	r3, r2, r3
 8001e66:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	d901      	bls.n	8001e72 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001e6e:	2303      	movs	r3, #3
 8001e70:	e162      	b.n	8002138 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e72:	4b89      	ldr	r3, [pc, #548]	@ (8002098 <HAL_RCC_OscConfig+0x778>)
 8001e74:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e78:	f003 0302 	and.w	r3, r3, #2
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d0ed      	beq.n	8001e5c <HAL_RCC_OscConfig+0x53c>
 8001e80:	e015      	b.n	8001eae <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e82:	f7ff fa41 	bl	8001308 <HAL_GetTick>
 8001e86:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001e88:	e00a      	b.n	8001ea0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e8a:	f7ff fa3d 	bl	8001308 <HAL_GetTick>
 8001e8e:	4602      	mov	r2, r0
 8001e90:	693b      	ldr	r3, [r7, #16]
 8001e92:	1ad3      	subs	r3, r2, r3
 8001e94:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e98:	4293      	cmp	r3, r2
 8001e9a:	d901      	bls.n	8001ea0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001e9c:	2303      	movs	r3, #3
 8001e9e:	e14b      	b.n	8002138 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001ea0:	4b7d      	ldr	r3, [pc, #500]	@ (8002098 <HAL_RCC_OscConfig+0x778>)
 8001ea2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ea6:	f003 0302 	and.w	r3, r3, #2
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d1ed      	bne.n	8001e8a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001eae:	7ffb      	ldrb	r3, [r7, #31]
 8001eb0:	2b01      	cmp	r3, #1
 8001eb2:	d105      	bne.n	8001ec0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001eb4:	4b78      	ldr	r3, [pc, #480]	@ (8002098 <HAL_RCC_OscConfig+0x778>)
 8001eb6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001eb8:	4a77      	ldr	r2, [pc, #476]	@ (8002098 <HAL_RCC_OscConfig+0x778>)
 8001eba:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001ebe:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f003 0320 	and.w	r3, r3, #32
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d03c      	beq.n	8001f46 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d01c      	beq.n	8001f0e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001ed4:	4b70      	ldr	r3, [pc, #448]	@ (8002098 <HAL_RCC_OscConfig+0x778>)
 8001ed6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001eda:	4a6f      	ldr	r2, [pc, #444]	@ (8002098 <HAL_RCC_OscConfig+0x778>)
 8001edc:	f043 0301 	orr.w	r3, r3, #1
 8001ee0:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ee4:	f7ff fa10 	bl	8001308 <HAL_GetTick>
 8001ee8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001eea:	e008      	b.n	8001efe <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001eec:	f7ff fa0c 	bl	8001308 <HAL_GetTick>
 8001ef0:	4602      	mov	r2, r0
 8001ef2:	693b      	ldr	r3, [r7, #16]
 8001ef4:	1ad3      	subs	r3, r2, r3
 8001ef6:	2b02      	cmp	r3, #2
 8001ef8:	d901      	bls.n	8001efe <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001efa:	2303      	movs	r3, #3
 8001efc:	e11c      	b.n	8002138 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001efe:	4b66      	ldr	r3, [pc, #408]	@ (8002098 <HAL_RCC_OscConfig+0x778>)
 8001f00:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001f04:	f003 0302 	and.w	r3, r3, #2
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d0ef      	beq.n	8001eec <HAL_RCC_OscConfig+0x5cc>
 8001f0c:	e01b      	b.n	8001f46 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001f0e:	4b62      	ldr	r3, [pc, #392]	@ (8002098 <HAL_RCC_OscConfig+0x778>)
 8001f10:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001f14:	4a60      	ldr	r2, [pc, #384]	@ (8002098 <HAL_RCC_OscConfig+0x778>)
 8001f16:	f023 0301 	bic.w	r3, r3, #1
 8001f1a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f1e:	f7ff f9f3 	bl	8001308 <HAL_GetTick>
 8001f22:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001f24:	e008      	b.n	8001f38 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001f26:	f7ff f9ef 	bl	8001308 <HAL_GetTick>
 8001f2a:	4602      	mov	r2, r0
 8001f2c:	693b      	ldr	r3, [r7, #16]
 8001f2e:	1ad3      	subs	r3, r2, r3
 8001f30:	2b02      	cmp	r3, #2
 8001f32:	d901      	bls.n	8001f38 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001f34:	2303      	movs	r3, #3
 8001f36:	e0ff      	b.n	8002138 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001f38:	4b57      	ldr	r3, [pc, #348]	@ (8002098 <HAL_RCC_OscConfig+0x778>)
 8001f3a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001f3e:	f003 0302 	and.w	r3, r3, #2
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d1ef      	bne.n	8001f26 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	f000 80f3 	beq.w	8002136 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f54:	2b02      	cmp	r3, #2
 8001f56:	f040 80c9 	bne.w	80020ec <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001f5a:	4b4f      	ldr	r3, [pc, #316]	@ (8002098 <HAL_RCC_OscConfig+0x778>)
 8001f5c:	68db      	ldr	r3, [r3, #12]
 8001f5e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f60:	697b      	ldr	r3, [r7, #20]
 8001f62:	f003 0203 	and.w	r2, r3, #3
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f6a:	429a      	cmp	r2, r3
 8001f6c:	d12c      	bne.n	8001fc8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001f6e:	697b      	ldr	r3, [r7, #20]
 8001f70:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f78:	3b01      	subs	r3, #1
 8001f7a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f7c:	429a      	cmp	r2, r3
 8001f7e:	d123      	bne.n	8001fc8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001f80:	697b      	ldr	r3, [r7, #20]
 8001f82:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001f8a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001f8c:	429a      	cmp	r2, r3
 8001f8e:	d11b      	bne.n	8001fc8 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001f90:	697b      	ldr	r3, [r7, #20]
 8001f92:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001f9a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001f9c:	429a      	cmp	r2, r3
 8001f9e:	d113      	bne.n	8001fc8 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001fa0:	697b      	ldr	r3, [r7, #20]
 8001fa2:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001faa:	085b      	lsrs	r3, r3, #1
 8001fac:	3b01      	subs	r3, #1
 8001fae:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001fb0:	429a      	cmp	r2, r3
 8001fb2:	d109      	bne.n	8001fc8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001fb4:	697b      	ldr	r3, [r7, #20]
 8001fb6:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fbe:	085b      	lsrs	r3, r3, #1
 8001fc0:	3b01      	subs	r3, #1
 8001fc2:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001fc4:	429a      	cmp	r2, r3
 8001fc6:	d06b      	beq.n	80020a0 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001fc8:	69bb      	ldr	r3, [r7, #24]
 8001fca:	2b0c      	cmp	r3, #12
 8001fcc:	d062      	beq.n	8002094 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001fce:	4b32      	ldr	r3, [pc, #200]	@ (8002098 <HAL_RCC_OscConfig+0x778>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d001      	beq.n	8001fde <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8001fda:	2301      	movs	r3, #1
 8001fdc:	e0ac      	b.n	8002138 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001fde:	4b2e      	ldr	r3, [pc, #184]	@ (8002098 <HAL_RCC_OscConfig+0x778>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	4a2d      	ldr	r2, [pc, #180]	@ (8002098 <HAL_RCC_OscConfig+0x778>)
 8001fe4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001fe8:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001fea:	f7ff f98d 	bl	8001308 <HAL_GetTick>
 8001fee:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ff0:	e008      	b.n	8002004 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ff2:	f7ff f989 	bl	8001308 <HAL_GetTick>
 8001ff6:	4602      	mov	r2, r0
 8001ff8:	693b      	ldr	r3, [r7, #16]
 8001ffa:	1ad3      	subs	r3, r2, r3
 8001ffc:	2b02      	cmp	r3, #2
 8001ffe:	d901      	bls.n	8002004 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8002000:	2303      	movs	r3, #3
 8002002:	e099      	b.n	8002138 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002004:	4b24      	ldr	r3, [pc, #144]	@ (8002098 <HAL_RCC_OscConfig+0x778>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800200c:	2b00      	cmp	r3, #0
 800200e:	d1f0      	bne.n	8001ff2 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002010:	4b21      	ldr	r3, [pc, #132]	@ (8002098 <HAL_RCC_OscConfig+0x778>)
 8002012:	68da      	ldr	r2, [r3, #12]
 8002014:	4b21      	ldr	r3, [pc, #132]	@ (800209c <HAL_RCC_OscConfig+0x77c>)
 8002016:	4013      	ands	r3, r2
 8002018:	687a      	ldr	r2, [r7, #4]
 800201a:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 800201c:	687a      	ldr	r2, [r7, #4]
 800201e:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002020:	3a01      	subs	r2, #1
 8002022:	0112      	lsls	r2, r2, #4
 8002024:	4311      	orrs	r1, r2
 8002026:	687a      	ldr	r2, [r7, #4]
 8002028:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800202a:	0212      	lsls	r2, r2, #8
 800202c:	4311      	orrs	r1, r2
 800202e:	687a      	ldr	r2, [r7, #4]
 8002030:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002032:	0852      	lsrs	r2, r2, #1
 8002034:	3a01      	subs	r2, #1
 8002036:	0552      	lsls	r2, r2, #21
 8002038:	4311      	orrs	r1, r2
 800203a:	687a      	ldr	r2, [r7, #4]
 800203c:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800203e:	0852      	lsrs	r2, r2, #1
 8002040:	3a01      	subs	r2, #1
 8002042:	0652      	lsls	r2, r2, #25
 8002044:	4311      	orrs	r1, r2
 8002046:	687a      	ldr	r2, [r7, #4]
 8002048:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800204a:	06d2      	lsls	r2, r2, #27
 800204c:	430a      	orrs	r2, r1
 800204e:	4912      	ldr	r1, [pc, #72]	@ (8002098 <HAL_RCC_OscConfig+0x778>)
 8002050:	4313      	orrs	r3, r2
 8002052:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002054:	4b10      	ldr	r3, [pc, #64]	@ (8002098 <HAL_RCC_OscConfig+0x778>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	4a0f      	ldr	r2, [pc, #60]	@ (8002098 <HAL_RCC_OscConfig+0x778>)
 800205a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800205e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002060:	4b0d      	ldr	r3, [pc, #52]	@ (8002098 <HAL_RCC_OscConfig+0x778>)
 8002062:	68db      	ldr	r3, [r3, #12]
 8002064:	4a0c      	ldr	r2, [pc, #48]	@ (8002098 <HAL_RCC_OscConfig+0x778>)
 8002066:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800206a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800206c:	f7ff f94c 	bl	8001308 <HAL_GetTick>
 8002070:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002072:	e008      	b.n	8002086 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002074:	f7ff f948 	bl	8001308 <HAL_GetTick>
 8002078:	4602      	mov	r2, r0
 800207a:	693b      	ldr	r3, [r7, #16]
 800207c:	1ad3      	subs	r3, r2, r3
 800207e:	2b02      	cmp	r3, #2
 8002080:	d901      	bls.n	8002086 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8002082:	2303      	movs	r3, #3
 8002084:	e058      	b.n	8002138 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002086:	4b04      	ldr	r3, [pc, #16]	@ (8002098 <HAL_RCC_OscConfig+0x778>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800208e:	2b00      	cmp	r3, #0
 8002090:	d0f0      	beq.n	8002074 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002092:	e050      	b.n	8002136 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002094:	2301      	movs	r3, #1
 8002096:	e04f      	b.n	8002138 <HAL_RCC_OscConfig+0x818>
 8002098:	40021000 	.word	0x40021000
 800209c:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020a0:	4b27      	ldr	r3, [pc, #156]	@ (8002140 <HAL_RCC_OscConfig+0x820>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d144      	bne.n	8002136 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80020ac:	4b24      	ldr	r3, [pc, #144]	@ (8002140 <HAL_RCC_OscConfig+0x820>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	4a23      	ldr	r2, [pc, #140]	@ (8002140 <HAL_RCC_OscConfig+0x820>)
 80020b2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80020b6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80020b8:	4b21      	ldr	r3, [pc, #132]	@ (8002140 <HAL_RCC_OscConfig+0x820>)
 80020ba:	68db      	ldr	r3, [r3, #12]
 80020bc:	4a20      	ldr	r2, [pc, #128]	@ (8002140 <HAL_RCC_OscConfig+0x820>)
 80020be:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80020c2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80020c4:	f7ff f920 	bl	8001308 <HAL_GetTick>
 80020c8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020ca:	e008      	b.n	80020de <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020cc:	f7ff f91c 	bl	8001308 <HAL_GetTick>
 80020d0:	4602      	mov	r2, r0
 80020d2:	693b      	ldr	r3, [r7, #16]
 80020d4:	1ad3      	subs	r3, r2, r3
 80020d6:	2b02      	cmp	r3, #2
 80020d8:	d901      	bls.n	80020de <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 80020da:	2303      	movs	r3, #3
 80020dc:	e02c      	b.n	8002138 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020de:	4b18      	ldr	r3, [pc, #96]	@ (8002140 <HAL_RCC_OscConfig+0x820>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d0f0      	beq.n	80020cc <HAL_RCC_OscConfig+0x7ac>
 80020ea:	e024      	b.n	8002136 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80020ec:	69bb      	ldr	r3, [r7, #24]
 80020ee:	2b0c      	cmp	r3, #12
 80020f0:	d01f      	beq.n	8002132 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020f2:	4b13      	ldr	r3, [pc, #76]	@ (8002140 <HAL_RCC_OscConfig+0x820>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	4a12      	ldr	r2, [pc, #72]	@ (8002140 <HAL_RCC_OscConfig+0x820>)
 80020f8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80020fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020fe:	f7ff f903 	bl	8001308 <HAL_GetTick>
 8002102:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002104:	e008      	b.n	8002118 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002106:	f7ff f8ff 	bl	8001308 <HAL_GetTick>
 800210a:	4602      	mov	r2, r0
 800210c:	693b      	ldr	r3, [r7, #16]
 800210e:	1ad3      	subs	r3, r2, r3
 8002110:	2b02      	cmp	r3, #2
 8002112:	d901      	bls.n	8002118 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8002114:	2303      	movs	r3, #3
 8002116:	e00f      	b.n	8002138 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002118:	4b09      	ldr	r3, [pc, #36]	@ (8002140 <HAL_RCC_OscConfig+0x820>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002120:	2b00      	cmp	r3, #0
 8002122:	d1f0      	bne.n	8002106 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8002124:	4b06      	ldr	r3, [pc, #24]	@ (8002140 <HAL_RCC_OscConfig+0x820>)
 8002126:	68da      	ldr	r2, [r3, #12]
 8002128:	4905      	ldr	r1, [pc, #20]	@ (8002140 <HAL_RCC_OscConfig+0x820>)
 800212a:	4b06      	ldr	r3, [pc, #24]	@ (8002144 <HAL_RCC_OscConfig+0x824>)
 800212c:	4013      	ands	r3, r2
 800212e:	60cb      	str	r3, [r1, #12]
 8002130:	e001      	b.n	8002136 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002132:	2301      	movs	r3, #1
 8002134:	e000      	b.n	8002138 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8002136:	2300      	movs	r3, #0
}
 8002138:	4618      	mov	r0, r3
 800213a:	3720      	adds	r7, #32
 800213c:	46bd      	mov	sp, r7
 800213e:	bd80      	pop	{r7, pc}
 8002140:	40021000 	.word	0x40021000
 8002144:	feeefffc 	.word	0xfeeefffc

08002148 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b084      	sub	sp, #16
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
 8002150:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	2b00      	cmp	r3, #0
 8002156:	d101      	bne.n	800215c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002158:	2301      	movs	r3, #1
 800215a:	e0e7      	b.n	800232c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800215c:	4b75      	ldr	r3, [pc, #468]	@ (8002334 <HAL_RCC_ClockConfig+0x1ec>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f003 0307 	and.w	r3, r3, #7
 8002164:	683a      	ldr	r2, [r7, #0]
 8002166:	429a      	cmp	r2, r3
 8002168:	d910      	bls.n	800218c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800216a:	4b72      	ldr	r3, [pc, #456]	@ (8002334 <HAL_RCC_ClockConfig+0x1ec>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f023 0207 	bic.w	r2, r3, #7
 8002172:	4970      	ldr	r1, [pc, #448]	@ (8002334 <HAL_RCC_ClockConfig+0x1ec>)
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	4313      	orrs	r3, r2
 8002178:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800217a:	4b6e      	ldr	r3, [pc, #440]	@ (8002334 <HAL_RCC_ClockConfig+0x1ec>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f003 0307 	and.w	r3, r3, #7
 8002182:	683a      	ldr	r2, [r7, #0]
 8002184:	429a      	cmp	r2, r3
 8002186:	d001      	beq.n	800218c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002188:	2301      	movs	r3, #1
 800218a:	e0cf      	b.n	800232c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f003 0302 	and.w	r3, r3, #2
 8002194:	2b00      	cmp	r3, #0
 8002196:	d010      	beq.n	80021ba <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	689a      	ldr	r2, [r3, #8]
 800219c:	4b66      	ldr	r3, [pc, #408]	@ (8002338 <HAL_RCC_ClockConfig+0x1f0>)
 800219e:	689b      	ldr	r3, [r3, #8]
 80021a0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80021a4:	429a      	cmp	r2, r3
 80021a6:	d908      	bls.n	80021ba <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021a8:	4b63      	ldr	r3, [pc, #396]	@ (8002338 <HAL_RCC_ClockConfig+0x1f0>)
 80021aa:	689b      	ldr	r3, [r3, #8]
 80021ac:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	689b      	ldr	r3, [r3, #8]
 80021b4:	4960      	ldr	r1, [pc, #384]	@ (8002338 <HAL_RCC_ClockConfig+0x1f0>)
 80021b6:	4313      	orrs	r3, r2
 80021b8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f003 0301 	and.w	r3, r3, #1
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d04c      	beq.n	8002260 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	685b      	ldr	r3, [r3, #4]
 80021ca:	2b03      	cmp	r3, #3
 80021cc:	d107      	bne.n	80021de <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021ce:	4b5a      	ldr	r3, [pc, #360]	@ (8002338 <HAL_RCC_ClockConfig+0x1f0>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d121      	bne.n	800221e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80021da:	2301      	movs	r3, #1
 80021dc:	e0a6      	b.n	800232c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	685b      	ldr	r3, [r3, #4]
 80021e2:	2b02      	cmp	r3, #2
 80021e4:	d107      	bne.n	80021f6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80021e6:	4b54      	ldr	r3, [pc, #336]	@ (8002338 <HAL_RCC_ClockConfig+0x1f0>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d115      	bne.n	800221e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80021f2:	2301      	movs	r3, #1
 80021f4:	e09a      	b.n	800232c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	685b      	ldr	r3, [r3, #4]
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d107      	bne.n	800220e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80021fe:	4b4e      	ldr	r3, [pc, #312]	@ (8002338 <HAL_RCC_ClockConfig+0x1f0>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f003 0302 	and.w	r3, r3, #2
 8002206:	2b00      	cmp	r3, #0
 8002208:	d109      	bne.n	800221e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800220a:	2301      	movs	r3, #1
 800220c:	e08e      	b.n	800232c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800220e:	4b4a      	ldr	r3, [pc, #296]	@ (8002338 <HAL_RCC_ClockConfig+0x1f0>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002216:	2b00      	cmp	r3, #0
 8002218:	d101      	bne.n	800221e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800221a:	2301      	movs	r3, #1
 800221c:	e086      	b.n	800232c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800221e:	4b46      	ldr	r3, [pc, #280]	@ (8002338 <HAL_RCC_ClockConfig+0x1f0>)
 8002220:	689b      	ldr	r3, [r3, #8]
 8002222:	f023 0203 	bic.w	r2, r3, #3
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	4943      	ldr	r1, [pc, #268]	@ (8002338 <HAL_RCC_ClockConfig+0x1f0>)
 800222c:	4313      	orrs	r3, r2
 800222e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002230:	f7ff f86a 	bl	8001308 <HAL_GetTick>
 8002234:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002236:	e00a      	b.n	800224e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002238:	f7ff f866 	bl	8001308 <HAL_GetTick>
 800223c:	4602      	mov	r2, r0
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	1ad3      	subs	r3, r2, r3
 8002242:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002246:	4293      	cmp	r3, r2
 8002248:	d901      	bls.n	800224e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800224a:	2303      	movs	r3, #3
 800224c:	e06e      	b.n	800232c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800224e:	4b3a      	ldr	r3, [pc, #232]	@ (8002338 <HAL_RCC_ClockConfig+0x1f0>)
 8002250:	689b      	ldr	r3, [r3, #8]
 8002252:	f003 020c 	and.w	r2, r3, #12
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	009b      	lsls	r3, r3, #2
 800225c:	429a      	cmp	r2, r3
 800225e:	d1eb      	bne.n	8002238 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f003 0302 	and.w	r3, r3, #2
 8002268:	2b00      	cmp	r3, #0
 800226a:	d010      	beq.n	800228e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	689a      	ldr	r2, [r3, #8]
 8002270:	4b31      	ldr	r3, [pc, #196]	@ (8002338 <HAL_RCC_ClockConfig+0x1f0>)
 8002272:	689b      	ldr	r3, [r3, #8]
 8002274:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002278:	429a      	cmp	r2, r3
 800227a:	d208      	bcs.n	800228e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800227c:	4b2e      	ldr	r3, [pc, #184]	@ (8002338 <HAL_RCC_ClockConfig+0x1f0>)
 800227e:	689b      	ldr	r3, [r3, #8]
 8002280:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	689b      	ldr	r3, [r3, #8]
 8002288:	492b      	ldr	r1, [pc, #172]	@ (8002338 <HAL_RCC_ClockConfig+0x1f0>)
 800228a:	4313      	orrs	r3, r2
 800228c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800228e:	4b29      	ldr	r3, [pc, #164]	@ (8002334 <HAL_RCC_ClockConfig+0x1ec>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f003 0307 	and.w	r3, r3, #7
 8002296:	683a      	ldr	r2, [r7, #0]
 8002298:	429a      	cmp	r2, r3
 800229a:	d210      	bcs.n	80022be <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800229c:	4b25      	ldr	r3, [pc, #148]	@ (8002334 <HAL_RCC_ClockConfig+0x1ec>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f023 0207 	bic.w	r2, r3, #7
 80022a4:	4923      	ldr	r1, [pc, #140]	@ (8002334 <HAL_RCC_ClockConfig+0x1ec>)
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	4313      	orrs	r3, r2
 80022aa:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80022ac:	4b21      	ldr	r3, [pc, #132]	@ (8002334 <HAL_RCC_ClockConfig+0x1ec>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f003 0307 	and.w	r3, r3, #7
 80022b4:	683a      	ldr	r2, [r7, #0]
 80022b6:	429a      	cmp	r2, r3
 80022b8:	d001      	beq.n	80022be <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80022ba:	2301      	movs	r3, #1
 80022bc:	e036      	b.n	800232c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f003 0304 	and.w	r3, r3, #4
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d008      	beq.n	80022dc <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80022ca:	4b1b      	ldr	r3, [pc, #108]	@ (8002338 <HAL_RCC_ClockConfig+0x1f0>)
 80022cc:	689b      	ldr	r3, [r3, #8]
 80022ce:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	68db      	ldr	r3, [r3, #12]
 80022d6:	4918      	ldr	r1, [pc, #96]	@ (8002338 <HAL_RCC_ClockConfig+0x1f0>)
 80022d8:	4313      	orrs	r3, r2
 80022da:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f003 0308 	and.w	r3, r3, #8
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d009      	beq.n	80022fc <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80022e8:	4b13      	ldr	r3, [pc, #76]	@ (8002338 <HAL_RCC_ClockConfig+0x1f0>)
 80022ea:	689b      	ldr	r3, [r3, #8]
 80022ec:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	691b      	ldr	r3, [r3, #16]
 80022f4:	00db      	lsls	r3, r3, #3
 80022f6:	4910      	ldr	r1, [pc, #64]	@ (8002338 <HAL_RCC_ClockConfig+0x1f0>)
 80022f8:	4313      	orrs	r3, r2
 80022fa:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80022fc:	f000 f824 	bl	8002348 <HAL_RCC_GetSysClockFreq>
 8002300:	4602      	mov	r2, r0
 8002302:	4b0d      	ldr	r3, [pc, #52]	@ (8002338 <HAL_RCC_ClockConfig+0x1f0>)
 8002304:	689b      	ldr	r3, [r3, #8]
 8002306:	091b      	lsrs	r3, r3, #4
 8002308:	f003 030f 	and.w	r3, r3, #15
 800230c:	490b      	ldr	r1, [pc, #44]	@ (800233c <HAL_RCC_ClockConfig+0x1f4>)
 800230e:	5ccb      	ldrb	r3, [r1, r3]
 8002310:	f003 031f 	and.w	r3, r3, #31
 8002314:	fa22 f303 	lsr.w	r3, r2, r3
 8002318:	4a09      	ldr	r2, [pc, #36]	@ (8002340 <HAL_RCC_ClockConfig+0x1f8>)
 800231a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800231c:	4b09      	ldr	r3, [pc, #36]	@ (8002344 <HAL_RCC_ClockConfig+0x1fc>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4618      	mov	r0, r3
 8002322:	f7fe ffa1 	bl	8001268 <HAL_InitTick>
 8002326:	4603      	mov	r3, r0
 8002328:	72fb      	strb	r3, [r7, #11]

  return status;
 800232a:	7afb      	ldrb	r3, [r7, #11]
}
 800232c:	4618      	mov	r0, r3
 800232e:	3710      	adds	r7, #16
 8002330:	46bd      	mov	sp, r7
 8002332:	bd80      	pop	{r7, pc}
 8002334:	40022000 	.word	0x40022000
 8002338:	40021000 	.word	0x40021000
 800233c:	08004028 	.word	0x08004028
 8002340:	20000004 	.word	0x20000004
 8002344:	20000008 	.word	0x20000008

08002348 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002348:	b480      	push	{r7}
 800234a:	b089      	sub	sp, #36	@ 0x24
 800234c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800234e:	2300      	movs	r3, #0
 8002350:	61fb      	str	r3, [r7, #28]
 8002352:	2300      	movs	r3, #0
 8002354:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002356:	4b3e      	ldr	r3, [pc, #248]	@ (8002450 <HAL_RCC_GetSysClockFreq+0x108>)
 8002358:	689b      	ldr	r3, [r3, #8]
 800235a:	f003 030c 	and.w	r3, r3, #12
 800235e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002360:	4b3b      	ldr	r3, [pc, #236]	@ (8002450 <HAL_RCC_GetSysClockFreq+0x108>)
 8002362:	68db      	ldr	r3, [r3, #12]
 8002364:	f003 0303 	and.w	r3, r3, #3
 8002368:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800236a:	693b      	ldr	r3, [r7, #16]
 800236c:	2b00      	cmp	r3, #0
 800236e:	d005      	beq.n	800237c <HAL_RCC_GetSysClockFreq+0x34>
 8002370:	693b      	ldr	r3, [r7, #16]
 8002372:	2b0c      	cmp	r3, #12
 8002374:	d121      	bne.n	80023ba <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	2b01      	cmp	r3, #1
 800237a:	d11e      	bne.n	80023ba <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800237c:	4b34      	ldr	r3, [pc, #208]	@ (8002450 <HAL_RCC_GetSysClockFreq+0x108>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f003 0308 	and.w	r3, r3, #8
 8002384:	2b00      	cmp	r3, #0
 8002386:	d107      	bne.n	8002398 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002388:	4b31      	ldr	r3, [pc, #196]	@ (8002450 <HAL_RCC_GetSysClockFreq+0x108>)
 800238a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800238e:	0a1b      	lsrs	r3, r3, #8
 8002390:	f003 030f 	and.w	r3, r3, #15
 8002394:	61fb      	str	r3, [r7, #28]
 8002396:	e005      	b.n	80023a4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002398:	4b2d      	ldr	r3, [pc, #180]	@ (8002450 <HAL_RCC_GetSysClockFreq+0x108>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	091b      	lsrs	r3, r3, #4
 800239e:	f003 030f 	and.w	r3, r3, #15
 80023a2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80023a4:	4a2b      	ldr	r2, [pc, #172]	@ (8002454 <HAL_RCC_GetSysClockFreq+0x10c>)
 80023a6:	69fb      	ldr	r3, [r7, #28]
 80023a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023ac:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80023ae:	693b      	ldr	r3, [r7, #16]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d10d      	bne.n	80023d0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80023b4:	69fb      	ldr	r3, [r7, #28]
 80023b6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80023b8:	e00a      	b.n	80023d0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80023ba:	693b      	ldr	r3, [r7, #16]
 80023bc:	2b04      	cmp	r3, #4
 80023be:	d102      	bne.n	80023c6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80023c0:	4b25      	ldr	r3, [pc, #148]	@ (8002458 <HAL_RCC_GetSysClockFreq+0x110>)
 80023c2:	61bb      	str	r3, [r7, #24]
 80023c4:	e004      	b.n	80023d0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80023c6:	693b      	ldr	r3, [r7, #16]
 80023c8:	2b08      	cmp	r3, #8
 80023ca:	d101      	bne.n	80023d0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80023cc:	4b23      	ldr	r3, [pc, #140]	@ (800245c <HAL_RCC_GetSysClockFreq+0x114>)
 80023ce:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80023d0:	693b      	ldr	r3, [r7, #16]
 80023d2:	2b0c      	cmp	r3, #12
 80023d4:	d134      	bne.n	8002440 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80023d6:	4b1e      	ldr	r3, [pc, #120]	@ (8002450 <HAL_RCC_GetSysClockFreq+0x108>)
 80023d8:	68db      	ldr	r3, [r3, #12]
 80023da:	f003 0303 	and.w	r3, r3, #3
 80023de:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80023e0:	68bb      	ldr	r3, [r7, #8]
 80023e2:	2b02      	cmp	r3, #2
 80023e4:	d003      	beq.n	80023ee <HAL_RCC_GetSysClockFreq+0xa6>
 80023e6:	68bb      	ldr	r3, [r7, #8]
 80023e8:	2b03      	cmp	r3, #3
 80023ea:	d003      	beq.n	80023f4 <HAL_RCC_GetSysClockFreq+0xac>
 80023ec:	e005      	b.n	80023fa <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80023ee:	4b1a      	ldr	r3, [pc, #104]	@ (8002458 <HAL_RCC_GetSysClockFreq+0x110>)
 80023f0:	617b      	str	r3, [r7, #20]
      break;
 80023f2:	e005      	b.n	8002400 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80023f4:	4b19      	ldr	r3, [pc, #100]	@ (800245c <HAL_RCC_GetSysClockFreq+0x114>)
 80023f6:	617b      	str	r3, [r7, #20]
      break;
 80023f8:	e002      	b.n	8002400 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80023fa:	69fb      	ldr	r3, [r7, #28]
 80023fc:	617b      	str	r3, [r7, #20]
      break;
 80023fe:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002400:	4b13      	ldr	r3, [pc, #76]	@ (8002450 <HAL_RCC_GetSysClockFreq+0x108>)
 8002402:	68db      	ldr	r3, [r3, #12]
 8002404:	091b      	lsrs	r3, r3, #4
 8002406:	f003 0307 	and.w	r3, r3, #7
 800240a:	3301      	adds	r3, #1
 800240c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800240e:	4b10      	ldr	r3, [pc, #64]	@ (8002450 <HAL_RCC_GetSysClockFreq+0x108>)
 8002410:	68db      	ldr	r3, [r3, #12]
 8002412:	0a1b      	lsrs	r3, r3, #8
 8002414:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002418:	697a      	ldr	r2, [r7, #20]
 800241a:	fb03 f202 	mul.w	r2, r3, r2
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	fbb2 f3f3 	udiv	r3, r2, r3
 8002424:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002426:	4b0a      	ldr	r3, [pc, #40]	@ (8002450 <HAL_RCC_GetSysClockFreq+0x108>)
 8002428:	68db      	ldr	r3, [r3, #12]
 800242a:	0e5b      	lsrs	r3, r3, #25
 800242c:	f003 0303 	and.w	r3, r3, #3
 8002430:	3301      	adds	r3, #1
 8002432:	005b      	lsls	r3, r3, #1
 8002434:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002436:	697a      	ldr	r2, [r7, #20]
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	fbb2 f3f3 	udiv	r3, r2, r3
 800243e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002440:	69bb      	ldr	r3, [r7, #24]
}
 8002442:	4618      	mov	r0, r3
 8002444:	3724      	adds	r7, #36	@ 0x24
 8002446:	46bd      	mov	sp, r7
 8002448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244c:	4770      	bx	lr
 800244e:	bf00      	nop
 8002450:	40021000 	.word	0x40021000
 8002454:	08004040 	.word	0x08004040
 8002458:	00f42400 	.word	0x00f42400
 800245c:	007a1200 	.word	0x007a1200

08002460 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002460:	b480      	push	{r7}
 8002462:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002464:	4b03      	ldr	r3, [pc, #12]	@ (8002474 <HAL_RCC_GetHCLKFreq+0x14>)
 8002466:	681b      	ldr	r3, [r3, #0]
}
 8002468:	4618      	mov	r0, r3
 800246a:	46bd      	mov	sp, r7
 800246c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002470:	4770      	bx	lr
 8002472:	bf00      	nop
 8002474:	20000004 	.word	0x20000004

08002478 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800247c:	f7ff fff0 	bl	8002460 <HAL_RCC_GetHCLKFreq>
 8002480:	4602      	mov	r2, r0
 8002482:	4b06      	ldr	r3, [pc, #24]	@ (800249c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002484:	689b      	ldr	r3, [r3, #8]
 8002486:	0a1b      	lsrs	r3, r3, #8
 8002488:	f003 0307 	and.w	r3, r3, #7
 800248c:	4904      	ldr	r1, [pc, #16]	@ (80024a0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800248e:	5ccb      	ldrb	r3, [r1, r3]
 8002490:	f003 031f 	and.w	r3, r3, #31
 8002494:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002498:	4618      	mov	r0, r3
 800249a:	bd80      	pop	{r7, pc}
 800249c:	40021000 	.word	0x40021000
 80024a0:	08004038 	.word	0x08004038

080024a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80024a8:	f7ff ffda 	bl	8002460 <HAL_RCC_GetHCLKFreq>
 80024ac:	4602      	mov	r2, r0
 80024ae:	4b06      	ldr	r3, [pc, #24]	@ (80024c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80024b0:	689b      	ldr	r3, [r3, #8]
 80024b2:	0adb      	lsrs	r3, r3, #11
 80024b4:	f003 0307 	and.w	r3, r3, #7
 80024b8:	4904      	ldr	r1, [pc, #16]	@ (80024cc <HAL_RCC_GetPCLK2Freq+0x28>)
 80024ba:	5ccb      	ldrb	r3, [r1, r3]
 80024bc:	f003 031f 	and.w	r3, r3, #31
 80024c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80024c4:	4618      	mov	r0, r3
 80024c6:	bd80      	pop	{r7, pc}
 80024c8:	40021000 	.word	0x40021000
 80024cc:	08004038 	.word	0x08004038

080024d0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b086      	sub	sp, #24
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80024d8:	2300      	movs	r3, #0
 80024da:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80024dc:	4b2a      	ldr	r3, [pc, #168]	@ (8002588 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80024de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024e0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d003      	beq.n	80024f0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80024e8:	f7ff f9b6 	bl	8001858 <HAL_PWREx_GetVoltageRange>
 80024ec:	6178      	str	r0, [r7, #20]
 80024ee:	e014      	b.n	800251a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80024f0:	4b25      	ldr	r3, [pc, #148]	@ (8002588 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80024f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024f4:	4a24      	ldr	r2, [pc, #144]	@ (8002588 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80024f6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80024fa:	6593      	str	r3, [r2, #88]	@ 0x58
 80024fc:	4b22      	ldr	r3, [pc, #136]	@ (8002588 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80024fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002500:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002504:	60fb      	str	r3, [r7, #12]
 8002506:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002508:	f7ff f9a6 	bl	8001858 <HAL_PWREx_GetVoltageRange>
 800250c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800250e:	4b1e      	ldr	r3, [pc, #120]	@ (8002588 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002510:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002512:	4a1d      	ldr	r2, [pc, #116]	@ (8002588 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002514:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002518:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800251a:	697b      	ldr	r3, [r7, #20]
 800251c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002520:	d10b      	bne.n	800253a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	2b80      	cmp	r3, #128	@ 0x80
 8002526:	d919      	bls.n	800255c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2ba0      	cmp	r3, #160	@ 0xa0
 800252c:	d902      	bls.n	8002534 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800252e:	2302      	movs	r3, #2
 8002530:	613b      	str	r3, [r7, #16]
 8002532:	e013      	b.n	800255c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002534:	2301      	movs	r3, #1
 8002536:	613b      	str	r3, [r7, #16]
 8002538:	e010      	b.n	800255c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	2b80      	cmp	r3, #128	@ 0x80
 800253e:	d902      	bls.n	8002546 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002540:	2303      	movs	r3, #3
 8002542:	613b      	str	r3, [r7, #16]
 8002544:	e00a      	b.n	800255c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	2b80      	cmp	r3, #128	@ 0x80
 800254a:	d102      	bne.n	8002552 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800254c:	2302      	movs	r3, #2
 800254e:	613b      	str	r3, [r7, #16]
 8002550:	e004      	b.n	800255c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	2b70      	cmp	r3, #112	@ 0x70
 8002556:	d101      	bne.n	800255c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002558:	2301      	movs	r3, #1
 800255a:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800255c:	4b0b      	ldr	r3, [pc, #44]	@ (800258c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f023 0207 	bic.w	r2, r3, #7
 8002564:	4909      	ldr	r1, [pc, #36]	@ (800258c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002566:	693b      	ldr	r3, [r7, #16]
 8002568:	4313      	orrs	r3, r2
 800256a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800256c:	4b07      	ldr	r3, [pc, #28]	@ (800258c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f003 0307 	and.w	r3, r3, #7
 8002574:	693a      	ldr	r2, [r7, #16]
 8002576:	429a      	cmp	r2, r3
 8002578:	d001      	beq.n	800257e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800257a:	2301      	movs	r3, #1
 800257c:	e000      	b.n	8002580 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800257e:	2300      	movs	r3, #0
}
 8002580:	4618      	mov	r0, r3
 8002582:	3718      	adds	r7, #24
 8002584:	46bd      	mov	sp, r7
 8002586:	bd80      	pop	{r7, pc}
 8002588:	40021000 	.word	0x40021000
 800258c:	40022000 	.word	0x40022000

08002590 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b086      	sub	sp, #24
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002598:	2300      	movs	r3, #0
 800259a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800259c:	2300      	movs	r3, #0
 800259e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d031      	beq.n	8002610 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80025b0:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80025b4:	d01a      	beq.n	80025ec <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80025b6:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80025ba:	d814      	bhi.n	80025e6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d009      	beq.n	80025d4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80025c0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80025c4:	d10f      	bne.n	80025e6 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80025c6:	4b5d      	ldr	r3, [pc, #372]	@ (800273c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80025c8:	68db      	ldr	r3, [r3, #12]
 80025ca:	4a5c      	ldr	r2, [pc, #368]	@ (800273c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80025cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80025d0:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80025d2:	e00c      	b.n	80025ee <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	3304      	adds	r3, #4
 80025d8:	2100      	movs	r1, #0
 80025da:	4618      	mov	r0, r3
 80025dc:	f000 f9de 	bl	800299c <RCCEx_PLLSAI1_Config>
 80025e0:	4603      	mov	r3, r0
 80025e2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80025e4:	e003      	b.n	80025ee <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80025e6:	2301      	movs	r3, #1
 80025e8:	74fb      	strb	r3, [r7, #19]
      break;
 80025ea:	e000      	b.n	80025ee <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 80025ec:	bf00      	nop
    }

    if(ret == HAL_OK)
 80025ee:	7cfb      	ldrb	r3, [r7, #19]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d10b      	bne.n	800260c <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80025f4:	4b51      	ldr	r3, [pc, #324]	@ (800273c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80025f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025fa:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002602:	494e      	ldr	r1, [pc, #312]	@ (800273c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002604:	4313      	orrs	r3, r2
 8002606:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800260a:	e001      	b.n	8002610 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800260c:	7cfb      	ldrb	r3, [r7, #19]
 800260e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002618:	2b00      	cmp	r3, #0
 800261a:	f000 809e 	beq.w	800275a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 800261e:	2300      	movs	r3, #0
 8002620:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002622:	4b46      	ldr	r3, [pc, #280]	@ (800273c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002624:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002626:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800262a:	2b00      	cmp	r3, #0
 800262c:	d101      	bne.n	8002632 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800262e:	2301      	movs	r3, #1
 8002630:	e000      	b.n	8002634 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8002632:	2300      	movs	r3, #0
 8002634:	2b00      	cmp	r3, #0
 8002636:	d00d      	beq.n	8002654 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002638:	4b40      	ldr	r3, [pc, #256]	@ (800273c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800263a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800263c:	4a3f      	ldr	r2, [pc, #252]	@ (800273c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800263e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002642:	6593      	str	r3, [r2, #88]	@ 0x58
 8002644:	4b3d      	ldr	r3, [pc, #244]	@ (800273c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002646:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002648:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800264c:	60bb      	str	r3, [r7, #8]
 800264e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002650:	2301      	movs	r3, #1
 8002652:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002654:	4b3a      	ldr	r3, [pc, #232]	@ (8002740 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	4a39      	ldr	r2, [pc, #228]	@ (8002740 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800265a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800265e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002660:	f7fe fe52 	bl	8001308 <HAL_GetTick>
 8002664:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002666:	e009      	b.n	800267c <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002668:	f7fe fe4e 	bl	8001308 <HAL_GetTick>
 800266c:	4602      	mov	r2, r0
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	1ad3      	subs	r3, r2, r3
 8002672:	2b02      	cmp	r3, #2
 8002674:	d902      	bls.n	800267c <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8002676:	2303      	movs	r3, #3
 8002678:	74fb      	strb	r3, [r7, #19]
        break;
 800267a:	e005      	b.n	8002688 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800267c:	4b30      	ldr	r3, [pc, #192]	@ (8002740 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002684:	2b00      	cmp	r3, #0
 8002686:	d0ef      	beq.n	8002668 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8002688:	7cfb      	ldrb	r3, [r7, #19]
 800268a:	2b00      	cmp	r3, #0
 800268c:	d15a      	bne.n	8002744 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800268e:	4b2b      	ldr	r3, [pc, #172]	@ (800273c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002690:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002694:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002698:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800269a:	697b      	ldr	r3, [r7, #20]
 800269c:	2b00      	cmp	r3, #0
 800269e:	d01e      	beq.n	80026de <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80026a4:	697a      	ldr	r2, [r7, #20]
 80026a6:	429a      	cmp	r2, r3
 80026a8:	d019      	beq.n	80026de <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80026aa:	4b24      	ldr	r3, [pc, #144]	@ (800273c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80026ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026b0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80026b4:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80026b6:	4b21      	ldr	r3, [pc, #132]	@ (800273c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80026b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026bc:	4a1f      	ldr	r2, [pc, #124]	@ (800273c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80026be:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80026c2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80026c6:	4b1d      	ldr	r3, [pc, #116]	@ (800273c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80026c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026cc:	4a1b      	ldr	r2, [pc, #108]	@ (800273c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80026ce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80026d2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80026d6:	4a19      	ldr	r2, [pc, #100]	@ (800273c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80026d8:	697b      	ldr	r3, [r7, #20]
 80026da:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80026de:	697b      	ldr	r3, [r7, #20]
 80026e0:	f003 0301 	and.w	r3, r3, #1
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d016      	beq.n	8002716 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026e8:	f7fe fe0e 	bl	8001308 <HAL_GetTick>
 80026ec:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80026ee:	e00b      	b.n	8002708 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026f0:	f7fe fe0a 	bl	8001308 <HAL_GetTick>
 80026f4:	4602      	mov	r2, r0
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	1ad3      	subs	r3, r2, r3
 80026fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80026fe:	4293      	cmp	r3, r2
 8002700:	d902      	bls.n	8002708 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8002702:	2303      	movs	r3, #3
 8002704:	74fb      	strb	r3, [r7, #19]
            break;
 8002706:	e006      	b.n	8002716 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002708:	4b0c      	ldr	r3, [pc, #48]	@ (800273c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800270a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800270e:	f003 0302 	and.w	r3, r3, #2
 8002712:	2b00      	cmp	r3, #0
 8002714:	d0ec      	beq.n	80026f0 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8002716:	7cfb      	ldrb	r3, [r7, #19]
 8002718:	2b00      	cmp	r3, #0
 800271a:	d10b      	bne.n	8002734 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800271c:	4b07      	ldr	r3, [pc, #28]	@ (800273c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800271e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002722:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800272a:	4904      	ldr	r1, [pc, #16]	@ (800273c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800272c:	4313      	orrs	r3, r2
 800272e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002732:	e009      	b.n	8002748 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002734:	7cfb      	ldrb	r3, [r7, #19]
 8002736:	74bb      	strb	r3, [r7, #18]
 8002738:	e006      	b.n	8002748 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 800273a:	bf00      	nop
 800273c:	40021000 	.word	0x40021000
 8002740:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002744:	7cfb      	ldrb	r3, [r7, #19]
 8002746:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002748:	7c7b      	ldrb	r3, [r7, #17]
 800274a:	2b01      	cmp	r3, #1
 800274c:	d105      	bne.n	800275a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800274e:	4b8a      	ldr	r3, [pc, #552]	@ (8002978 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002750:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002752:	4a89      	ldr	r2, [pc, #548]	@ (8002978 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002754:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002758:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f003 0301 	and.w	r3, r3, #1
 8002762:	2b00      	cmp	r3, #0
 8002764:	d00a      	beq.n	800277c <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002766:	4b84      	ldr	r3, [pc, #528]	@ (8002978 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002768:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800276c:	f023 0203 	bic.w	r2, r3, #3
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6a1b      	ldr	r3, [r3, #32]
 8002774:	4980      	ldr	r1, [pc, #512]	@ (8002978 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002776:	4313      	orrs	r3, r2
 8002778:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f003 0302 	and.w	r3, r3, #2
 8002784:	2b00      	cmp	r3, #0
 8002786:	d00a      	beq.n	800279e <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002788:	4b7b      	ldr	r3, [pc, #492]	@ (8002978 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800278a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800278e:	f023 020c 	bic.w	r2, r3, #12
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002796:	4978      	ldr	r1, [pc, #480]	@ (8002978 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002798:	4313      	orrs	r3, r2
 800279a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f003 0320 	and.w	r3, r3, #32
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d00a      	beq.n	80027c0 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80027aa:	4b73      	ldr	r3, [pc, #460]	@ (8002978 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80027ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027b0:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027b8:	496f      	ldr	r1, [pc, #444]	@ (8002978 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80027ba:	4313      	orrs	r3, r2
 80027bc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d00a      	beq.n	80027e2 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80027cc:	4b6a      	ldr	r3, [pc, #424]	@ (8002978 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80027ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027d2:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80027da:	4967      	ldr	r1, [pc, #412]	@ (8002978 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80027dc:	4313      	orrs	r3, r2
 80027de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d00a      	beq.n	8002804 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80027ee:	4b62      	ldr	r3, [pc, #392]	@ (8002978 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80027f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027f4:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027fc:	495e      	ldr	r1, [pc, #376]	@ (8002978 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80027fe:	4313      	orrs	r3, r2
 8002800:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800280c:	2b00      	cmp	r3, #0
 800280e:	d00a      	beq.n	8002826 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002810:	4b59      	ldr	r3, [pc, #356]	@ (8002978 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002812:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002816:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800281e:	4956      	ldr	r1, [pc, #344]	@ (8002978 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002820:	4313      	orrs	r3, r2
 8002822:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800282e:	2b00      	cmp	r3, #0
 8002830:	d00a      	beq.n	8002848 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002832:	4b51      	ldr	r3, [pc, #324]	@ (8002978 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002834:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002838:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002840:	494d      	ldr	r1, [pc, #308]	@ (8002978 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002842:	4313      	orrs	r3, r2
 8002844:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002850:	2b00      	cmp	r3, #0
 8002852:	d028      	beq.n	80028a6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002854:	4b48      	ldr	r3, [pc, #288]	@ (8002978 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002856:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800285a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002862:	4945      	ldr	r1, [pc, #276]	@ (8002978 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002864:	4313      	orrs	r3, r2
 8002866:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800286e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002872:	d106      	bne.n	8002882 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002874:	4b40      	ldr	r3, [pc, #256]	@ (8002978 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002876:	68db      	ldr	r3, [r3, #12]
 8002878:	4a3f      	ldr	r2, [pc, #252]	@ (8002978 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800287a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800287e:	60d3      	str	r3, [r2, #12]
 8002880:	e011      	b.n	80028a6 <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002886:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800288a:	d10c      	bne.n	80028a6 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	3304      	adds	r3, #4
 8002890:	2101      	movs	r1, #1
 8002892:	4618      	mov	r0, r3
 8002894:	f000 f882 	bl	800299c <RCCEx_PLLSAI1_Config>
 8002898:	4603      	mov	r3, r0
 800289a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800289c:	7cfb      	ldrb	r3, [r7, #19]
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d001      	beq.n	80028a6 <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 80028a2:	7cfb      	ldrb	r3, [r7, #19]
 80028a4:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d028      	beq.n	8002904 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80028b2:	4b31      	ldr	r3, [pc, #196]	@ (8002978 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80028b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028b8:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028c0:	492d      	ldr	r1, [pc, #180]	@ (8002978 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80028c2:	4313      	orrs	r3, r2
 80028c4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028cc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80028d0:	d106      	bne.n	80028e0 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80028d2:	4b29      	ldr	r3, [pc, #164]	@ (8002978 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80028d4:	68db      	ldr	r3, [r3, #12]
 80028d6:	4a28      	ldr	r2, [pc, #160]	@ (8002978 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80028d8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80028dc:	60d3      	str	r3, [r2, #12]
 80028de:	e011      	b.n	8002904 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028e4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80028e8:	d10c      	bne.n	8002904 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	3304      	adds	r3, #4
 80028ee:	2101      	movs	r1, #1
 80028f0:	4618      	mov	r0, r3
 80028f2:	f000 f853 	bl	800299c <RCCEx_PLLSAI1_Config>
 80028f6:	4603      	mov	r3, r0
 80028f8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80028fa:	7cfb      	ldrb	r3, [r7, #19]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d001      	beq.n	8002904 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8002900:	7cfb      	ldrb	r3, [r7, #19]
 8002902:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800290c:	2b00      	cmp	r3, #0
 800290e:	d01c      	beq.n	800294a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002910:	4b19      	ldr	r3, [pc, #100]	@ (8002978 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002912:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002916:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800291e:	4916      	ldr	r1, [pc, #88]	@ (8002978 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002920:	4313      	orrs	r3, r2
 8002922:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800292a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800292e:	d10c      	bne.n	800294a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	3304      	adds	r3, #4
 8002934:	2102      	movs	r1, #2
 8002936:	4618      	mov	r0, r3
 8002938:	f000 f830 	bl	800299c <RCCEx_PLLSAI1_Config>
 800293c:	4603      	mov	r3, r0
 800293e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002940:	7cfb      	ldrb	r3, [r7, #19]
 8002942:	2b00      	cmp	r3, #0
 8002944:	d001      	beq.n	800294a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8002946:	7cfb      	ldrb	r3, [r7, #19]
 8002948:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002952:	2b00      	cmp	r3, #0
 8002954:	d00a      	beq.n	800296c <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002956:	4b08      	ldr	r3, [pc, #32]	@ (8002978 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002958:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800295c:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002964:	4904      	ldr	r1, [pc, #16]	@ (8002978 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002966:	4313      	orrs	r3, r2
 8002968:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800296c:	7cbb      	ldrb	r3, [r7, #18]
}
 800296e:	4618      	mov	r0, r3
 8002970:	3718      	adds	r7, #24
 8002972:	46bd      	mov	sp, r7
 8002974:	bd80      	pop	{r7, pc}
 8002976:	bf00      	nop
 8002978:	40021000 	.word	0x40021000

0800297c <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 800297c:	b480      	push	{r7}
 800297e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8002980:	4b05      	ldr	r3, [pc, #20]	@ (8002998 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4a04      	ldr	r2, [pc, #16]	@ (8002998 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8002986:	f043 0304 	orr.w	r3, r3, #4
 800298a:	6013      	str	r3, [r2, #0]
}
 800298c:	bf00      	nop
 800298e:	46bd      	mov	sp, r7
 8002990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002994:	4770      	bx	lr
 8002996:	bf00      	nop
 8002998:	40021000 	.word	0x40021000

0800299c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b084      	sub	sp, #16
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
 80029a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80029a6:	2300      	movs	r3, #0
 80029a8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80029aa:	4b74      	ldr	r3, [pc, #464]	@ (8002b7c <RCCEx_PLLSAI1_Config+0x1e0>)
 80029ac:	68db      	ldr	r3, [r3, #12]
 80029ae:	f003 0303 	and.w	r3, r3, #3
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d018      	beq.n	80029e8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80029b6:	4b71      	ldr	r3, [pc, #452]	@ (8002b7c <RCCEx_PLLSAI1_Config+0x1e0>)
 80029b8:	68db      	ldr	r3, [r3, #12]
 80029ba:	f003 0203 	and.w	r2, r3, #3
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	429a      	cmp	r2, r3
 80029c4:	d10d      	bne.n	80029e2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
       ||
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d009      	beq.n	80029e2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80029ce:	4b6b      	ldr	r3, [pc, #428]	@ (8002b7c <RCCEx_PLLSAI1_Config+0x1e0>)
 80029d0:	68db      	ldr	r3, [r3, #12]
 80029d2:	091b      	lsrs	r3, r3, #4
 80029d4:	f003 0307 	and.w	r3, r3, #7
 80029d8:	1c5a      	adds	r2, r3, #1
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	685b      	ldr	r3, [r3, #4]
       ||
 80029de:	429a      	cmp	r2, r3
 80029e0:	d047      	beq.n	8002a72 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80029e2:	2301      	movs	r3, #1
 80029e4:	73fb      	strb	r3, [r7, #15]
 80029e6:	e044      	b.n	8002a72 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	2b03      	cmp	r3, #3
 80029ee:	d018      	beq.n	8002a22 <RCCEx_PLLSAI1_Config+0x86>
 80029f0:	2b03      	cmp	r3, #3
 80029f2:	d825      	bhi.n	8002a40 <RCCEx_PLLSAI1_Config+0xa4>
 80029f4:	2b01      	cmp	r3, #1
 80029f6:	d002      	beq.n	80029fe <RCCEx_PLLSAI1_Config+0x62>
 80029f8:	2b02      	cmp	r3, #2
 80029fa:	d009      	beq.n	8002a10 <RCCEx_PLLSAI1_Config+0x74>
 80029fc:	e020      	b.n	8002a40 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80029fe:	4b5f      	ldr	r3, [pc, #380]	@ (8002b7c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f003 0302 	and.w	r3, r3, #2
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d11d      	bne.n	8002a46 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a0e:	e01a      	b.n	8002a46 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002a10:	4b5a      	ldr	r3, [pc, #360]	@ (8002b7c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d116      	bne.n	8002a4a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002a1c:	2301      	movs	r3, #1
 8002a1e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a20:	e013      	b.n	8002a4a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002a22:	4b56      	ldr	r3, [pc, #344]	@ (8002b7c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d10f      	bne.n	8002a4e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002a2e:	4b53      	ldr	r3, [pc, #332]	@ (8002b7c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d109      	bne.n	8002a4e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002a3e:	e006      	b.n	8002a4e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002a40:	2301      	movs	r3, #1
 8002a42:	73fb      	strb	r3, [r7, #15]
      break;
 8002a44:	e004      	b.n	8002a50 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002a46:	bf00      	nop
 8002a48:	e002      	b.n	8002a50 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002a4a:	bf00      	nop
 8002a4c:	e000      	b.n	8002a50 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002a4e:	bf00      	nop
    }

    if(status == HAL_OK)
 8002a50:	7bfb      	ldrb	r3, [r7, #15]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d10d      	bne.n	8002a72 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002a56:	4b49      	ldr	r3, [pc, #292]	@ (8002b7c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002a58:	68db      	ldr	r3, [r3, #12]
 8002a5a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6819      	ldr	r1, [r3, #0]
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	3b01      	subs	r3, #1
 8002a68:	011b      	lsls	r3, r3, #4
 8002a6a:	430b      	orrs	r3, r1
 8002a6c:	4943      	ldr	r1, [pc, #268]	@ (8002b7c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002a6e:	4313      	orrs	r3, r2
 8002a70:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002a72:	7bfb      	ldrb	r3, [r7, #15]
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d17c      	bne.n	8002b72 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002a78:	4b40      	ldr	r3, [pc, #256]	@ (8002b7c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4a3f      	ldr	r2, [pc, #252]	@ (8002b7c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002a7e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002a82:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a84:	f7fe fc40 	bl	8001308 <HAL_GetTick>
 8002a88:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002a8a:	e009      	b.n	8002aa0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002a8c:	f7fe fc3c 	bl	8001308 <HAL_GetTick>
 8002a90:	4602      	mov	r2, r0
 8002a92:	68bb      	ldr	r3, [r7, #8]
 8002a94:	1ad3      	subs	r3, r2, r3
 8002a96:	2b02      	cmp	r3, #2
 8002a98:	d902      	bls.n	8002aa0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002a9a:	2303      	movs	r3, #3
 8002a9c:	73fb      	strb	r3, [r7, #15]
        break;
 8002a9e:	e005      	b.n	8002aac <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002aa0:	4b36      	ldr	r3, [pc, #216]	@ (8002b7c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d1ef      	bne.n	8002a8c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002aac:	7bfb      	ldrb	r3, [r7, #15]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d15f      	bne.n	8002b72 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d110      	bne.n	8002ada <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002ab8:	4b30      	ldr	r3, [pc, #192]	@ (8002b7c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002aba:	691b      	ldr	r3, [r3, #16]
 8002abc:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8002ac0:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002ac4:	687a      	ldr	r2, [r7, #4]
 8002ac6:	6892      	ldr	r2, [r2, #8]
 8002ac8:	0211      	lsls	r1, r2, #8
 8002aca:	687a      	ldr	r2, [r7, #4]
 8002acc:	68d2      	ldr	r2, [r2, #12]
 8002ace:	06d2      	lsls	r2, r2, #27
 8002ad0:	430a      	orrs	r2, r1
 8002ad2:	492a      	ldr	r1, [pc, #168]	@ (8002b7c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002ad4:	4313      	orrs	r3, r2
 8002ad6:	610b      	str	r3, [r1, #16]
 8002ad8:	e027      	b.n	8002b2a <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	2b01      	cmp	r3, #1
 8002ade:	d112      	bne.n	8002b06 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002ae0:	4b26      	ldr	r3, [pc, #152]	@ (8002b7c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002ae2:	691b      	ldr	r3, [r3, #16]
 8002ae4:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8002ae8:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002aec:	687a      	ldr	r2, [r7, #4]
 8002aee:	6892      	ldr	r2, [r2, #8]
 8002af0:	0211      	lsls	r1, r2, #8
 8002af2:	687a      	ldr	r2, [r7, #4]
 8002af4:	6912      	ldr	r2, [r2, #16]
 8002af6:	0852      	lsrs	r2, r2, #1
 8002af8:	3a01      	subs	r2, #1
 8002afa:	0552      	lsls	r2, r2, #21
 8002afc:	430a      	orrs	r2, r1
 8002afe:	491f      	ldr	r1, [pc, #124]	@ (8002b7c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002b00:	4313      	orrs	r3, r2
 8002b02:	610b      	str	r3, [r1, #16]
 8002b04:	e011      	b.n	8002b2a <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002b06:	4b1d      	ldr	r3, [pc, #116]	@ (8002b7c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002b08:	691b      	ldr	r3, [r3, #16]
 8002b0a:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002b0e:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002b12:	687a      	ldr	r2, [r7, #4]
 8002b14:	6892      	ldr	r2, [r2, #8]
 8002b16:	0211      	lsls	r1, r2, #8
 8002b18:	687a      	ldr	r2, [r7, #4]
 8002b1a:	6952      	ldr	r2, [r2, #20]
 8002b1c:	0852      	lsrs	r2, r2, #1
 8002b1e:	3a01      	subs	r2, #1
 8002b20:	0652      	lsls	r2, r2, #25
 8002b22:	430a      	orrs	r2, r1
 8002b24:	4915      	ldr	r1, [pc, #84]	@ (8002b7c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002b26:	4313      	orrs	r3, r2
 8002b28:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002b2a:	4b14      	ldr	r3, [pc, #80]	@ (8002b7c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	4a13      	ldr	r2, [pc, #76]	@ (8002b7c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002b30:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002b34:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b36:	f7fe fbe7 	bl	8001308 <HAL_GetTick>
 8002b3a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002b3c:	e009      	b.n	8002b52 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002b3e:	f7fe fbe3 	bl	8001308 <HAL_GetTick>
 8002b42:	4602      	mov	r2, r0
 8002b44:	68bb      	ldr	r3, [r7, #8]
 8002b46:	1ad3      	subs	r3, r2, r3
 8002b48:	2b02      	cmp	r3, #2
 8002b4a:	d902      	bls.n	8002b52 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8002b4c:	2303      	movs	r3, #3
 8002b4e:	73fb      	strb	r3, [r7, #15]
          break;
 8002b50:	e005      	b.n	8002b5e <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002b52:	4b0a      	ldr	r3, [pc, #40]	@ (8002b7c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d0ef      	beq.n	8002b3e <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8002b5e:	7bfb      	ldrb	r3, [r7, #15]
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d106      	bne.n	8002b72 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002b64:	4b05      	ldr	r3, [pc, #20]	@ (8002b7c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002b66:	691a      	ldr	r2, [r3, #16]
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	699b      	ldr	r3, [r3, #24]
 8002b6c:	4903      	ldr	r1, [pc, #12]	@ (8002b7c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002b6e:	4313      	orrs	r3, r2
 8002b70:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002b72:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b74:	4618      	mov	r0, r3
 8002b76:	3710      	adds	r7, #16
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	bd80      	pop	{r7, pc}
 8002b7c:	40021000 	.word	0x40021000

08002b80 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b084      	sub	sp, #16
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d101      	bne.n	8002b92 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002b8e:	2301      	movs	r3, #1
 8002b90:	e095      	b.n	8002cbe <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d108      	bne.n	8002bac <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	685b      	ldr	r3, [r3, #4]
 8002b9e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002ba2:	d009      	beq.n	8002bb8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	61da      	str	r2, [r3, #28]
 8002baa:	e005      	b.n	8002bb8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2200      	movs	r2, #0
 8002bb0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2200      	movs	r2, #0
 8002bbc:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002bc4:	b2db      	uxtb	r3, r3
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d106      	bne.n	8002bd8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	2200      	movs	r2, #0
 8002bce:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002bd2:	6878      	ldr	r0, [r7, #4]
 8002bd4:	f7fe f952 	bl	8000e7c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2202      	movs	r2, #2
 8002bdc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	681a      	ldr	r2, [r3, #0]
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002bee:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	68db      	ldr	r3, [r3, #12]
 8002bf4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002bf8:	d902      	bls.n	8002c00 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	60fb      	str	r3, [r7, #12]
 8002bfe:	e002      	b.n	8002c06 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002c00:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002c04:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	68db      	ldr	r3, [r3, #12]
 8002c0a:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8002c0e:	d007      	beq.n	8002c20 <HAL_SPI_Init+0xa0>
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	68db      	ldr	r3, [r3, #12]
 8002c14:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002c18:	d002      	beq.n	8002c20 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	685b      	ldr	r3, [r3, #4]
 8002c24:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	689b      	ldr	r3, [r3, #8]
 8002c2c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002c30:	431a      	orrs	r2, r3
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	691b      	ldr	r3, [r3, #16]
 8002c36:	f003 0302 	and.w	r3, r3, #2
 8002c3a:	431a      	orrs	r2, r3
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	695b      	ldr	r3, [r3, #20]
 8002c40:	f003 0301 	and.w	r3, r3, #1
 8002c44:	431a      	orrs	r2, r3
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	699b      	ldr	r3, [r3, #24]
 8002c4a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002c4e:	431a      	orrs	r2, r3
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	69db      	ldr	r3, [r3, #28]
 8002c54:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002c58:	431a      	orrs	r2, r3
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6a1b      	ldr	r3, [r3, #32]
 8002c5e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c62:	ea42 0103 	orr.w	r1, r2, r3
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c6a:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	430a      	orrs	r2, r1
 8002c74:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	699b      	ldr	r3, [r3, #24]
 8002c7a:	0c1b      	lsrs	r3, r3, #16
 8002c7c:	f003 0204 	and.w	r2, r3, #4
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c84:	f003 0310 	and.w	r3, r3, #16
 8002c88:	431a      	orrs	r2, r3
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c8e:	f003 0308 	and.w	r3, r3, #8
 8002c92:	431a      	orrs	r2, r3
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	68db      	ldr	r3, [r3, #12]
 8002c98:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8002c9c:	ea42 0103 	orr.w	r1, r2, r3
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	430a      	orrs	r2, r1
 8002cac:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2201      	movs	r2, #1
 8002cb8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8002cbc:	2300      	movs	r3, #0
}
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	3710      	adds	r7, #16
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	bd80      	pop	{r7, pc}

08002cc6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002cc6:	b580      	push	{r7, lr}
 8002cc8:	b08a      	sub	sp, #40	@ 0x28
 8002cca:	af00      	add	r7, sp, #0
 8002ccc:	60f8      	str	r0, [r7, #12]
 8002cce:	60b9      	str	r1, [r7, #8]
 8002cd0:	607a      	str	r2, [r7, #4]
 8002cd2:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002cd4:	2301      	movs	r3, #1
 8002cd6:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002cd8:	f7fe fb16 	bl	8001308 <HAL_GetTick>
 8002cdc:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002ce4:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	685b      	ldr	r3, [r3, #4]
 8002cea:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8002cec:	887b      	ldrh	r3, [r7, #2]
 8002cee:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 8002cf0:	887b      	ldrh	r3, [r7, #2]
 8002cf2:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002cf4:	7ffb      	ldrb	r3, [r7, #31]
 8002cf6:	2b01      	cmp	r3, #1
 8002cf8:	d00c      	beq.n	8002d14 <HAL_SPI_TransmitReceive+0x4e>
 8002cfa:	69bb      	ldr	r3, [r7, #24]
 8002cfc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002d00:	d106      	bne.n	8002d10 <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	689b      	ldr	r3, [r3, #8]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d102      	bne.n	8002d10 <HAL_SPI_TransmitReceive+0x4a>
 8002d0a:	7ffb      	ldrb	r3, [r7, #31]
 8002d0c:	2b04      	cmp	r3, #4
 8002d0e:	d001      	beq.n	8002d14 <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8002d10:	2302      	movs	r3, #2
 8002d12:	e1f3      	b.n	80030fc <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002d14:	68bb      	ldr	r3, [r7, #8]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d005      	beq.n	8002d26 <HAL_SPI_TransmitReceive+0x60>
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d002      	beq.n	8002d26 <HAL_SPI_TransmitReceive+0x60>
 8002d20:	887b      	ldrh	r3, [r7, #2]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d101      	bne.n	8002d2a <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 8002d26:	2301      	movs	r3, #1
 8002d28:	e1e8      	b.n	80030fc <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002d30:	2b01      	cmp	r3, #1
 8002d32:	d101      	bne.n	8002d38 <HAL_SPI_TransmitReceive+0x72>
 8002d34:	2302      	movs	r3, #2
 8002d36:	e1e1      	b.n	80030fc <HAL_SPI_TransmitReceive+0x436>
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	2201      	movs	r2, #1
 8002d3c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002d46:	b2db      	uxtb	r3, r3
 8002d48:	2b04      	cmp	r3, #4
 8002d4a:	d003      	beq.n	8002d54 <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	2205      	movs	r2, #5
 8002d50:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	2200      	movs	r2, #0
 8002d58:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	687a      	ldr	r2, [r7, #4]
 8002d5e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	887a      	ldrh	r2, [r7, #2]
 8002d64:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	887a      	ldrh	r2, [r7, #2]
 8002d6c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	68ba      	ldr	r2, [r7, #8]
 8002d74:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	887a      	ldrh	r2, [r7, #2]
 8002d7a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	887a      	ldrh	r2, [r7, #2]
 8002d80:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	2200      	movs	r2, #0
 8002d86:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	68db      	ldr	r3, [r3, #12]
 8002d92:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002d96:	d802      	bhi.n	8002d9e <HAL_SPI_TransmitReceive+0xd8>
 8002d98:	8abb      	ldrh	r3, [r7, #20]
 8002d9a:	2b01      	cmp	r3, #1
 8002d9c:	d908      	bls.n	8002db0 <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	685a      	ldr	r2, [r3, #4]
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002dac:	605a      	str	r2, [r3, #4]
 8002dae:	e007      	b.n	8002dc0 <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	685a      	ldr	r2, [r3, #4]
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002dbe:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002dca:	2b40      	cmp	r3, #64	@ 0x40
 8002dcc:	d007      	beq.n	8002dde <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	681a      	ldr	r2, [r3, #0]
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002ddc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	68db      	ldr	r3, [r3, #12]
 8002de2:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002de6:	f240 8083 	bls.w	8002ef0 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	685b      	ldr	r3, [r3, #4]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d002      	beq.n	8002df8 <HAL_SPI_TransmitReceive+0x132>
 8002df2:	8afb      	ldrh	r3, [r7, #22]
 8002df4:	2b01      	cmp	r3, #1
 8002df6:	d16f      	bne.n	8002ed8 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002dfc:	881a      	ldrh	r2, [r3, #0]
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e08:	1c9a      	adds	r2, r3, #2
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002e12:	b29b      	uxth	r3, r3
 8002e14:	3b01      	subs	r3, #1
 8002e16:	b29a      	uxth	r2, r3
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002e1c:	e05c      	b.n	8002ed8 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	689b      	ldr	r3, [r3, #8]
 8002e24:	f003 0302 	and.w	r3, r3, #2
 8002e28:	2b02      	cmp	r3, #2
 8002e2a:	d11b      	bne.n	8002e64 <HAL_SPI_TransmitReceive+0x19e>
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002e30:	b29b      	uxth	r3, r3
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d016      	beq.n	8002e64 <HAL_SPI_TransmitReceive+0x19e>
 8002e36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e38:	2b01      	cmp	r3, #1
 8002e3a:	d113      	bne.n	8002e64 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e40:	881a      	ldrh	r2, [r3, #0]
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e4c:	1c9a      	adds	r2, r3, #2
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002e56:	b29b      	uxth	r3, r3
 8002e58:	3b01      	subs	r3, #1
 8002e5a:	b29a      	uxth	r2, r3
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002e60:	2300      	movs	r3, #0
 8002e62:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	689b      	ldr	r3, [r3, #8]
 8002e6a:	f003 0301 	and.w	r3, r3, #1
 8002e6e:	2b01      	cmp	r3, #1
 8002e70:	d11c      	bne.n	8002eac <HAL_SPI_TransmitReceive+0x1e6>
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002e78:	b29b      	uxth	r3, r3
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d016      	beq.n	8002eac <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	68da      	ldr	r2, [r3, #12]
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e88:	b292      	uxth	r2, r2
 8002e8a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e90:	1c9a      	adds	r2, r3, #2
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002e9c:	b29b      	uxth	r3, r3
 8002e9e:	3b01      	subs	r3, #1
 8002ea0:	b29a      	uxth	r2, r3
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002ea8:	2301      	movs	r3, #1
 8002eaa:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002eac:	f7fe fa2c 	bl	8001308 <HAL_GetTick>
 8002eb0:	4602      	mov	r2, r0
 8002eb2:	6a3b      	ldr	r3, [r7, #32]
 8002eb4:	1ad3      	subs	r3, r2, r3
 8002eb6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002eb8:	429a      	cmp	r2, r3
 8002eba:	d80d      	bhi.n	8002ed8 <HAL_SPI_TransmitReceive+0x212>
 8002ebc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ebe:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002ec2:	d009      	beq.n	8002ed8 <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	2201      	movs	r2, #1
 8002ec8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	2200      	movs	r2, #0
 8002ed0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8002ed4:	2303      	movs	r3, #3
 8002ed6:	e111      	b.n	80030fc <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002edc:	b29b      	uxth	r3, r3
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d19d      	bne.n	8002e1e <HAL_SPI_TransmitReceive+0x158>
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002ee8:	b29b      	uxth	r3, r3
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d197      	bne.n	8002e1e <HAL_SPI_TransmitReceive+0x158>
 8002eee:	e0e5      	b.n	80030bc <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	685b      	ldr	r3, [r3, #4]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d003      	beq.n	8002f00 <HAL_SPI_TransmitReceive+0x23a>
 8002ef8:	8afb      	ldrh	r3, [r7, #22]
 8002efa:	2b01      	cmp	r3, #1
 8002efc:	f040 80d1 	bne.w	80030a2 <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002f04:	b29b      	uxth	r3, r3
 8002f06:	2b01      	cmp	r3, #1
 8002f08:	d912      	bls.n	8002f30 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f0e:	881a      	ldrh	r2, [r3, #0]
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f1a:	1c9a      	adds	r2, r3, #2
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002f24:	b29b      	uxth	r3, r3
 8002f26:	3b02      	subs	r3, #2
 8002f28:	b29a      	uxth	r2, r3
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002f2e:	e0b8      	b.n	80030a2 <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	330c      	adds	r3, #12
 8002f3a:	7812      	ldrb	r2, [r2, #0]
 8002f3c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f42:	1c5a      	adds	r2, r3, #1
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002f4c:	b29b      	uxth	r3, r3
 8002f4e:	3b01      	subs	r3, #1
 8002f50:	b29a      	uxth	r2, r3
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002f56:	e0a4      	b.n	80030a2 <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	689b      	ldr	r3, [r3, #8]
 8002f5e:	f003 0302 	and.w	r3, r3, #2
 8002f62:	2b02      	cmp	r3, #2
 8002f64:	d134      	bne.n	8002fd0 <HAL_SPI_TransmitReceive+0x30a>
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002f6a:	b29b      	uxth	r3, r3
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d02f      	beq.n	8002fd0 <HAL_SPI_TransmitReceive+0x30a>
 8002f70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f72:	2b01      	cmp	r3, #1
 8002f74:	d12c      	bne.n	8002fd0 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002f7a:	b29b      	uxth	r3, r3
 8002f7c:	2b01      	cmp	r3, #1
 8002f7e:	d912      	bls.n	8002fa6 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f84:	881a      	ldrh	r2, [r3, #0]
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f90:	1c9a      	adds	r2, r3, #2
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002f9a:	b29b      	uxth	r3, r3
 8002f9c:	3b02      	subs	r3, #2
 8002f9e:	b29a      	uxth	r2, r3
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002fa4:	e012      	b.n	8002fcc <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	330c      	adds	r3, #12
 8002fb0:	7812      	ldrb	r2, [r2, #0]
 8002fb2:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fb8:	1c5a      	adds	r2, r3, #1
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002fc2:	b29b      	uxth	r3, r3
 8002fc4:	3b01      	subs	r3, #1
 8002fc6:	b29a      	uxth	r2, r3
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002fcc:	2300      	movs	r3, #0
 8002fce:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	689b      	ldr	r3, [r3, #8]
 8002fd6:	f003 0301 	and.w	r3, r3, #1
 8002fda:	2b01      	cmp	r3, #1
 8002fdc:	d148      	bne.n	8003070 <HAL_SPI_TransmitReceive+0x3aa>
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002fe4:	b29b      	uxth	r3, r3
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d042      	beq.n	8003070 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002ff0:	b29b      	uxth	r3, r3
 8002ff2:	2b01      	cmp	r3, #1
 8002ff4:	d923      	bls.n	800303e <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	68da      	ldr	r2, [r3, #12]
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003000:	b292      	uxth	r2, r2
 8003002:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003008:	1c9a      	adds	r2, r3, #2
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003014:	b29b      	uxth	r3, r3
 8003016:	3b02      	subs	r3, #2
 8003018:	b29a      	uxth	r2, r3
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003026:	b29b      	uxth	r3, r3
 8003028:	2b01      	cmp	r3, #1
 800302a:	d81f      	bhi.n	800306c <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	685a      	ldr	r2, [r3, #4]
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800303a:	605a      	str	r2, [r3, #4]
 800303c:	e016      	b.n	800306c <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f103 020c 	add.w	r2, r3, #12
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800304a:	7812      	ldrb	r2, [r2, #0]
 800304c:	b2d2      	uxtb	r2, r2
 800304e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003054:	1c5a      	adds	r2, r3, #1
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003060:	b29b      	uxth	r3, r3
 8003062:	3b01      	subs	r3, #1
 8003064:	b29a      	uxth	r2, r3
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800306c:	2301      	movs	r3, #1
 800306e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003070:	f7fe f94a 	bl	8001308 <HAL_GetTick>
 8003074:	4602      	mov	r2, r0
 8003076:	6a3b      	ldr	r3, [r7, #32]
 8003078:	1ad3      	subs	r3, r2, r3
 800307a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800307c:	429a      	cmp	r2, r3
 800307e:	d803      	bhi.n	8003088 <HAL_SPI_TransmitReceive+0x3c2>
 8003080:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003082:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003086:	d102      	bne.n	800308e <HAL_SPI_TransmitReceive+0x3c8>
 8003088:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800308a:	2b00      	cmp	r3, #0
 800308c:	d109      	bne.n	80030a2 <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	2201      	movs	r2, #1
 8003092:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	2200      	movs	r2, #0
 800309a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 800309e:	2303      	movs	r3, #3
 80030a0:	e02c      	b.n	80030fc <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80030a6:	b29b      	uxth	r3, r3
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	f47f af55 	bne.w	8002f58 <HAL_SPI_TransmitReceive+0x292>
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80030b4:	b29b      	uxth	r3, r3
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	f47f af4e 	bne.w	8002f58 <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80030bc:	6a3a      	ldr	r2, [r7, #32]
 80030be:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80030c0:	68f8      	ldr	r0, [r7, #12]
 80030c2:	f000 f93d 	bl	8003340 <SPI_EndRxTxTransaction>
 80030c6:	4603      	mov	r3, r0
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d008      	beq.n	80030de <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	2220      	movs	r2, #32
 80030d0:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	2200      	movs	r2, #0
 80030d6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 80030da:	2301      	movs	r3, #1
 80030dc:	e00e      	b.n	80030fc <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	2201      	movs	r2, #1
 80030e2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	2200      	movs	r2, #0
 80030ea:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d001      	beq.n	80030fa <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 80030f6:	2301      	movs	r3, #1
 80030f8:	e000      	b.n	80030fc <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 80030fa:	2300      	movs	r3, #0
  }
}
 80030fc:	4618      	mov	r0, r3
 80030fe:	3728      	adds	r7, #40	@ 0x28
 8003100:	46bd      	mov	sp, r7
 8003102:	bd80      	pop	{r7, pc}

08003104 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b088      	sub	sp, #32
 8003108:	af00      	add	r7, sp, #0
 800310a:	60f8      	str	r0, [r7, #12]
 800310c:	60b9      	str	r1, [r7, #8]
 800310e:	603b      	str	r3, [r7, #0]
 8003110:	4613      	mov	r3, r2
 8003112:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003114:	f7fe f8f8 	bl	8001308 <HAL_GetTick>
 8003118:	4602      	mov	r2, r0
 800311a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800311c:	1a9b      	subs	r3, r3, r2
 800311e:	683a      	ldr	r2, [r7, #0]
 8003120:	4413      	add	r3, r2
 8003122:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003124:	f7fe f8f0 	bl	8001308 <HAL_GetTick>
 8003128:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800312a:	4b39      	ldr	r3, [pc, #228]	@ (8003210 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	015b      	lsls	r3, r3, #5
 8003130:	0d1b      	lsrs	r3, r3, #20
 8003132:	69fa      	ldr	r2, [r7, #28]
 8003134:	fb02 f303 	mul.w	r3, r2, r3
 8003138:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800313a:	e054      	b.n	80031e6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003142:	d050      	beq.n	80031e6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003144:	f7fe f8e0 	bl	8001308 <HAL_GetTick>
 8003148:	4602      	mov	r2, r0
 800314a:	69bb      	ldr	r3, [r7, #24]
 800314c:	1ad3      	subs	r3, r2, r3
 800314e:	69fa      	ldr	r2, [r7, #28]
 8003150:	429a      	cmp	r2, r3
 8003152:	d902      	bls.n	800315a <SPI_WaitFlagStateUntilTimeout+0x56>
 8003154:	69fb      	ldr	r3, [r7, #28]
 8003156:	2b00      	cmp	r3, #0
 8003158:	d13d      	bne.n	80031d6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	685a      	ldr	r2, [r3, #4]
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003168:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	685b      	ldr	r3, [r3, #4]
 800316e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003172:	d111      	bne.n	8003198 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	689b      	ldr	r3, [r3, #8]
 8003178:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800317c:	d004      	beq.n	8003188 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	689b      	ldr	r3, [r3, #8]
 8003182:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003186:	d107      	bne.n	8003198 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	681a      	ldr	r2, [r3, #0]
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003196:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800319c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80031a0:	d10f      	bne.n	80031c2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	681a      	ldr	r2, [r3, #0]
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80031b0:	601a      	str	r2, [r3, #0]
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	681a      	ldr	r2, [r3, #0]
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80031c0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	2201      	movs	r2, #1
 80031c6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	2200      	movs	r2, #0
 80031ce:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80031d2:	2303      	movs	r3, #3
 80031d4:	e017      	b.n	8003206 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80031d6:	697b      	ldr	r3, [r7, #20]
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d101      	bne.n	80031e0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80031dc:	2300      	movs	r3, #0
 80031de:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80031e0:	697b      	ldr	r3, [r7, #20]
 80031e2:	3b01      	subs	r3, #1
 80031e4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	689a      	ldr	r2, [r3, #8]
 80031ec:	68bb      	ldr	r3, [r7, #8]
 80031ee:	4013      	ands	r3, r2
 80031f0:	68ba      	ldr	r2, [r7, #8]
 80031f2:	429a      	cmp	r2, r3
 80031f4:	bf0c      	ite	eq
 80031f6:	2301      	moveq	r3, #1
 80031f8:	2300      	movne	r3, #0
 80031fa:	b2db      	uxtb	r3, r3
 80031fc:	461a      	mov	r2, r3
 80031fe:	79fb      	ldrb	r3, [r7, #7]
 8003200:	429a      	cmp	r2, r3
 8003202:	d19b      	bne.n	800313c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003204:	2300      	movs	r3, #0
}
 8003206:	4618      	mov	r0, r3
 8003208:	3720      	adds	r7, #32
 800320a:	46bd      	mov	sp, r7
 800320c:	bd80      	pop	{r7, pc}
 800320e:	bf00      	nop
 8003210:	20000004 	.word	0x20000004

08003214 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b08a      	sub	sp, #40	@ 0x28
 8003218:	af00      	add	r7, sp, #0
 800321a:	60f8      	str	r0, [r7, #12]
 800321c:	60b9      	str	r1, [r7, #8]
 800321e:	607a      	str	r2, [r7, #4]
 8003220:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8003222:	2300      	movs	r3, #0
 8003224:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003226:	f7fe f86f 	bl	8001308 <HAL_GetTick>
 800322a:	4602      	mov	r2, r0
 800322c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800322e:	1a9b      	subs	r3, r3, r2
 8003230:	683a      	ldr	r2, [r7, #0]
 8003232:	4413      	add	r3, r2
 8003234:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8003236:	f7fe f867 	bl	8001308 <HAL_GetTick>
 800323a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	330c      	adds	r3, #12
 8003242:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003244:	4b3d      	ldr	r3, [pc, #244]	@ (800333c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8003246:	681a      	ldr	r2, [r3, #0]
 8003248:	4613      	mov	r3, r2
 800324a:	009b      	lsls	r3, r3, #2
 800324c:	4413      	add	r3, r2
 800324e:	00da      	lsls	r2, r3, #3
 8003250:	1ad3      	subs	r3, r2, r3
 8003252:	0d1b      	lsrs	r3, r3, #20
 8003254:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003256:	fb02 f303 	mul.w	r3, r2, r3
 800325a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800325c:	e060      	b.n	8003320 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800325e:	68bb      	ldr	r3, [r7, #8]
 8003260:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8003264:	d107      	bne.n	8003276 <SPI_WaitFifoStateUntilTimeout+0x62>
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2b00      	cmp	r3, #0
 800326a:	d104      	bne.n	8003276 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800326c:	69fb      	ldr	r3, [r7, #28]
 800326e:	781b      	ldrb	r3, [r3, #0]
 8003270:	b2db      	uxtb	r3, r3
 8003272:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003274:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800327c:	d050      	beq.n	8003320 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800327e:	f7fe f843 	bl	8001308 <HAL_GetTick>
 8003282:	4602      	mov	r2, r0
 8003284:	6a3b      	ldr	r3, [r7, #32]
 8003286:	1ad3      	subs	r3, r2, r3
 8003288:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800328a:	429a      	cmp	r2, r3
 800328c:	d902      	bls.n	8003294 <SPI_WaitFifoStateUntilTimeout+0x80>
 800328e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003290:	2b00      	cmp	r3, #0
 8003292:	d13d      	bne.n	8003310 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	685a      	ldr	r2, [r3, #4]
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80032a2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	685b      	ldr	r3, [r3, #4]
 80032a8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80032ac:	d111      	bne.n	80032d2 <SPI_WaitFifoStateUntilTimeout+0xbe>
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	689b      	ldr	r3, [r3, #8]
 80032b2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80032b6:	d004      	beq.n	80032c2 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	689b      	ldr	r3, [r3, #8]
 80032bc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80032c0:	d107      	bne.n	80032d2 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	681a      	ldr	r2, [r3, #0]
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80032d0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032d6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80032da:	d10f      	bne.n	80032fc <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	681a      	ldr	r2, [r3, #0]
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80032ea:	601a      	str	r2, [r3, #0]
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	681a      	ldr	r2, [r3, #0]
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80032fa:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	2201      	movs	r2, #1
 8003300:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	2200      	movs	r2, #0
 8003308:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800330c:	2303      	movs	r3, #3
 800330e:	e010      	b.n	8003332 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003310:	69bb      	ldr	r3, [r7, #24]
 8003312:	2b00      	cmp	r3, #0
 8003314:	d101      	bne.n	800331a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8003316:	2300      	movs	r3, #0
 8003318:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800331a:	69bb      	ldr	r3, [r7, #24]
 800331c:	3b01      	subs	r3, #1
 800331e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	689a      	ldr	r2, [r3, #8]
 8003326:	68bb      	ldr	r3, [r7, #8]
 8003328:	4013      	ands	r3, r2
 800332a:	687a      	ldr	r2, [r7, #4]
 800332c:	429a      	cmp	r2, r3
 800332e:	d196      	bne.n	800325e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8003330:	2300      	movs	r3, #0
}
 8003332:	4618      	mov	r0, r3
 8003334:	3728      	adds	r7, #40	@ 0x28
 8003336:	46bd      	mov	sp, r7
 8003338:	bd80      	pop	{r7, pc}
 800333a:	bf00      	nop
 800333c:	20000004 	.word	0x20000004

08003340 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b086      	sub	sp, #24
 8003344:	af02      	add	r7, sp, #8
 8003346:	60f8      	str	r0, [r7, #12]
 8003348:	60b9      	str	r1, [r7, #8]
 800334a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	9300      	str	r3, [sp, #0]
 8003350:	68bb      	ldr	r3, [r7, #8]
 8003352:	2200      	movs	r2, #0
 8003354:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8003358:	68f8      	ldr	r0, [r7, #12]
 800335a:	f7ff ff5b 	bl	8003214 <SPI_WaitFifoStateUntilTimeout>
 800335e:	4603      	mov	r3, r0
 8003360:	2b00      	cmp	r3, #0
 8003362:	d007      	beq.n	8003374 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003368:	f043 0220 	orr.w	r2, r3, #32
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003370:	2303      	movs	r3, #3
 8003372:	e027      	b.n	80033c4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	9300      	str	r3, [sp, #0]
 8003378:	68bb      	ldr	r3, [r7, #8]
 800337a:	2200      	movs	r2, #0
 800337c:	2180      	movs	r1, #128	@ 0x80
 800337e:	68f8      	ldr	r0, [r7, #12]
 8003380:	f7ff fec0 	bl	8003104 <SPI_WaitFlagStateUntilTimeout>
 8003384:	4603      	mov	r3, r0
 8003386:	2b00      	cmp	r3, #0
 8003388:	d007      	beq.n	800339a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800338e:	f043 0220 	orr.w	r2, r3, #32
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003396:	2303      	movs	r3, #3
 8003398:	e014      	b.n	80033c4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	9300      	str	r3, [sp, #0]
 800339e:	68bb      	ldr	r3, [r7, #8]
 80033a0:	2200      	movs	r2, #0
 80033a2:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80033a6:	68f8      	ldr	r0, [r7, #12]
 80033a8:	f7ff ff34 	bl	8003214 <SPI_WaitFifoStateUntilTimeout>
 80033ac:	4603      	mov	r3, r0
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d007      	beq.n	80033c2 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80033b6:	f043 0220 	orr.w	r2, r3, #32
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80033be:	2303      	movs	r3, #3
 80033c0:	e000      	b.n	80033c4 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80033c2:	2300      	movs	r3, #0
}
 80033c4:	4618      	mov	r0, r3
 80033c6:	3710      	adds	r7, #16
 80033c8:	46bd      	mov	sp, r7
 80033ca:	bd80      	pop	{r7, pc}

080033cc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b082      	sub	sp, #8
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d101      	bne.n	80033de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80033da:	2301      	movs	r3, #1
 80033dc:	e040      	b.n	8003460 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d106      	bne.n	80033f4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2200      	movs	r2, #0
 80033ea:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80033ee:	6878      	ldr	r0, [r7, #4]
 80033f0:	f7fd fe4e 	bl	8001090 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2224      	movs	r2, #36	@ 0x24
 80033f8:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	681a      	ldr	r2, [r3, #0]
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f022 0201 	bic.w	r2, r2, #1
 8003408:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800340e:	2b00      	cmp	r3, #0
 8003410:	d002      	beq.n	8003418 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003412:	6878      	ldr	r0, [r7, #4]
 8003414:	f000 fba6 	bl	8003b64 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003418:	6878      	ldr	r0, [r7, #4]
 800341a:	f000 f977 	bl	800370c <UART_SetConfig>
 800341e:	4603      	mov	r3, r0
 8003420:	2b01      	cmp	r3, #1
 8003422:	d101      	bne.n	8003428 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003424:	2301      	movs	r3, #1
 8003426:	e01b      	b.n	8003460 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	685a      	ldr	r2, [r3, #4]
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003436:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	689a      	ldr	r2, [r3, #8]
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003446:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	681a      	ldr	r2, [r3, #0]
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f042 0201 	orr.w	r2, r2, #1
 8003456:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003458:	6878      	ldr	r0, [r7, #4]
 800345a:	f000 fc25 	bl	8003ca8 <UART_CheckIdleState>
 800345e:	4603      	mov	r3, r0
}
 8003460:	4618      	mov	r0, r3
 8003462:	3708      	adds	r7, #8
 8003464:	46bd      	mov	sp, r7
 8003466:	bd80      	pop	{r7, pc}

08003468 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	b08a      	sub	sp, #40	@ 0x28
 800346c:	af02      	add	r7, sp, #8
 800346e:	60f8      	str	r0, [r7, #12]
 8003470:	60b9      	str	r1, [r7, #8]
 8003472:	603b      	str	r3, [r7, #0]
 8003474:	4613      	mov	r3, r2
 8003476:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800347c:	2b20      	cmp	r3, #32
 800347e:	d177      	bne.n	8003570 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8003480:	68bb      	ldr	r3, [r7, #8]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d002      	beq.n	800348c <HAL_UART_Transmit+0x24>
 8003486:	88fb      	ldrh	r3, [r7, #6]
 8003488:	2b00      	cmp	r3, #0
 800348a:	d101      	bne.n	8003490 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800348c:	2301      	movs	r3, #1
 800348e:	e070      	b.n	8003572 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	2200      	movs	r2, #0
 8003494:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	2221      	movs	r2, #33	@ 0x21
 800349c:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800349e:	f7fd ff33 	bl	8001308 <HAL_GetTick>
 80034a2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	88fa      	ldrh	r2, [r7, #6]
 80034a8:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	88fa      	ldrh	r2, [r7, #6]
 80034b0:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	689b      	ldr	r3, [r3, #8]
 80034b8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80034bc:	d108      	bne.n	80034d0 <HAL_UART_Transmit+0x68>
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	691b      	ldr	r3, [r3, #16]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d104      	bne.n	80034d0 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80034c6:	2300      	movs	r3, #0
 80034c8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80034ca:	68bb      	ldr	r3, [r7, #8]
 80034cc:	61bb      	str	r3, [r7, #24]
 80034ce:	e003      	b.n	80034d8 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80034d0:	68bb      	ldr	r3, [r7, #8]
 80034d2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80034d4:	2300      	movs	r3, #0
 80034d6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80034d8:	e02f      	b.n	800353a <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	9300      	str	r3, [sp, #0]
 80034de:	697b      	ldr	r3, [r7, #20]
 80034e0:	2200      	movs	r2, #0
 80034e2:	2180      	movs	r1, #128	@ 0x80
 80034e4:	68f8      	ldr	r0, [r7, #12]
 80034e6:	f000 fc87 	bl	8003df8 <UART_WaitOnFlagUntilTimeout>
 80034ea:	4603      	mov	r3, r0
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d004      	beq.n	80034fa <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	2220      	movs	r2, #32
 80034f4:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80034f6:	2303      	movs	r3, #3
 80034f8:	e03b      	b.n	8003572 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80034fa:	69fb      	ldr	r3, [r7, #28]
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d10b      	bne.n	8003518 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003500:	69bb      	ldr	r3, [r7, #24]
 8003502:	881a      	ldrh	r2, [r3, #0]
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800350c:	b292      	uxth	r2, r2
 800350e:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003510:	69bb      	ldr	r3, [r7, #24]
 8003512:	3302      	adds	r3, #2
 8003514:	61bb      	str	r3, [r7, #24]
 8003516:	e007      	b.n	8003528 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003518:	69fb      	ldr	r3, [r7, #28]
 800351a:	781a      	ldrb	r2, [r3, #0]
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8003522:	69fb      	ldr	r3, [r7, #28]
 8003524:	3301      	adds	r3, #1
 8003526:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800352e:	b29b      	uxth	r3, r3
 8003530:	3b01      	subs	r3, #1
 8003532:	b29a      	uxth	r2, r3
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003540:	b29b      	uxth	r3, r3
 8003542:	2b00      	cmp	r3, #0
 8003544:	d1c9      	bne.n	80034da <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	9300      	str	r3, [sp, #0]
 800354a:	697b      	ldr	r3, [r7, #20]
 800354c:	2200      	movs	r2, #0
 800354e:	2140      	movs	r1, #64	@ 0x40
 8003550:	68f8      	ldr	r0, [r7, #12]
 8003552:	f000 fc51 	bl	8003df8 <UART_WaitOnFlagUntilTimeout>
 8003556:	4603      	mov	r3, r0
 8003558:	2b00      	cmp	r3, #0
 800355a:	d004      	beq.n	8003566 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	2220      	movs	r2, #32
 8003560:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8003562:	2303      	movs	r3, #3
 8003564:	e005      	b.n	8003572 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	2220      	movs	r2, #32
 800356a:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800356c:	2300      	movs	r3, #0
 800356e:	e000      	b.n	8003572 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8003570:	2302      	movs	r3, #2
  }
}
 8003572:	4618      	mov	r0, r3
 8003574:	3720      	adds	r7, #32
 8003576:	46bd      	mov	sp, r7
 8003578:	bd80      	pop	{r7, pc}

0800357a <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800357a:	b580      	push	{r7, lr}
 800357c:	b08a      	sub	sp, #40	@ 0x28
 800357e:	af02      	add	r7, sp, #8
 8003580:	60f8      	str	r0, [r7, #12]
 8003582:	60b9      	str	r1, [r7, #8]
 8003584:	603b      	str	r3, [r7, #0]
 8003586:	4613      	mov	r3, r2
 8003588:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003590:	2b20      	cmp	r3, #32
 8003592:	f040 80b6 	bne.w	8003702 <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 8003596:	68bb      	ldr	r3, [r7, #8]
 8003598:	2b00      	cmp	r3, #0
 800359a:	d002      	beq.n	80035a2 <HAL_UART_Receive+0x28>
 800359c:	88fb      	ldrh	r3, [r7, #6]
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d101      	bne.n	80035a6 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 80035a2:	2301      	movs	r3, #1
 80035a4:	e0ae      	b.n	8003704 <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	2200      	movs	r2, #0
 80035aa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	2222      	movs	r2, #34	@ 0x22
 80035b2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	2200      	movs	r2, #0
 80035ba:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80035bc:	f7fd fea4 	bl	8001308 <HAL_GetTick>
 80035c0:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	88fa      	ldrh	r2, [r7, #6]
 80035c6:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
    huart->RxXferCount = Size;
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	88fa      	ldrh	r2, [r7, #6]
 80035ce:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	689b      	ldr	r3, [r3, #8]
 80035d6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80035da:	d10e      	bne.n	80035fa <HAL_UART_Receive+0x80>
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	691b      	ldr	r3, [r3, #16]
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d105      	bne.n	80035f0 <HAL_UART_Receive+0x76>
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80035ea:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80035ee:	e02d      	b.n	800364c <HAL_UART_Receive+0xd2>
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	22ff      	movs	r2, #255	@ 0xff
 80035f4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80035f8:	e028      	b.n	800364c <HAL_UART_Receive+0xd2>
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	689b      	ldr	r3, [r3, #8]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d10d      	bne.n	800361e <HAL_UART_Receive+0xa4>
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	691b      	ldr	r3, [r3, #16]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d104      	bne.n	8003614 <HAL_UART_Receive+0x9a>
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	22ff      	movs	r2, #255	@ 0xff
 800360e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003612:	e01b      	b.n	800364c <HAL_UART_Receive+0xd2>
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	227f      	movs	r2, #127	@ 0x7f
 8003618:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800361c:	e016      	b.n	800364c <HAL_UART_Receive+0xd2>
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	689b      	ldr	r3, [r3, #8]
 8003622:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003626:	d10d      	bne.n	8003644 <HAL_UART_Receive+0xca>
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	691b      	ldr	r3, [r3, #16]
 800362c:	2b00      	cmp	r3, #0
 800362e:	d104      	bne.n	800363a <HAL_UART_Receive+0xc0>
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	227f      	movs	r2, #127	@ 0x7f
 8003634:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003638:	e008      	b.n	800364c <HAL_UART_Receive+0xd2>
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	223f      	movs	r2, #63	@ 0x3f
 800363e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003642:	e003      	b.n	800364c <HAL_UART_Receive+0xd2>
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	2200      	movs	r2, #0
 8003648:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    uhMask = huart->Mask;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8003652:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	689b      	ldr	r3, [r3, #8]
 8003658:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800365c:	d108      	bne.n	8003670 <HAL_UART_Receive+0xf6>
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	691b      	ldr	r3, [r3, #16]
 8003662:	2b00      	cmp	r3, #0
 8003664:	d104      	bne.n	8003670 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8003666:	2300      	movs	r3, #0
 8003668:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800366a:	68bb      	ldr	r3, [r7, #8]
 800366c:	61bb      	str	r3, [r7, #24]
 800366e:	e003      	b.n	8003678 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8003670:	68bb      	ldr	r3, [r7, #8]
 8003672:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003674:	2300      	movs	r3, #0
 8003676:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8003678:	e037      	b.n	80036ea <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	9300      	str	r3, [sp, #0]
 800367e:	697b      	ldr	r3, [r7, #20]
 8003680:	2200      	movs	r2, #0
 8003682:	2120      	movs	r1, #32
 8003684:	68f8      	ldr	r0, [r7, #12]
 8003686:	f000 fbb7 	bl	8003df8 <UART_WaitOnFlagUntilTimeout>
 800368a:	4603      	mov	r3, r0
 800368c:	2b00      	cmp	r3, #0
 800368e:	d005      	beq.n	800369c <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	2220      	movs	r2, #32
 8003694:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        return HAL_TIMEOUT;
 8003698:	2303      	movs	r3, #3
 800369a:	e033      	b.n	8003704 <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 800369c:	69fb      	ldr	r3, [r7, #28]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d10c      	bne.n	80036bc <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80036a8:	b29a      	uxth	r2, r3
 80036aa:	8a7b      	ldrh	r3, [r7, #18]
 80036ac:	4013      	ands	r3, r2
 80036ae:	b29a      	uxth	r2, r3
 80036b0:	69bb      	ldr	r3, [r7, #24]
 80036b2:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80036b4:	69bb      	ldr	r3, [r7, #24]
 80036b6:	3302      	adds	r3, #2
 80036b8:	61bb      	str	r3, [r7, #24]
 80036ba:	e00d      	b.n	80036d8 <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80036c2:	b29b      	uxth	r3, r3
 80036c4:	b2da      	uxtb	r2, r3
 80036c6:	8a7b      	ldrh	r3, [r7, #18]
 80036c8:	b2db      	uxtb	r3, r3
 80036ca:	4013      	ands	r3, r2
 80036cc:	b2da      	uxtb	r2, r3
 80036ce:	69fb      	ldr	r3, [r7, #28]
 80036d0:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80036d2:	69fb      	ldr	r3, [r7, #28]
 80036d4:	3301      	adds	r3, #1
 80036d6:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80036de:	b29b      	uxth	r3, r3
 80036e0:	3b01      	subs	r3, #1
 80036e2:	b29a      	uxth	r2, r3
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    while (huart->RxXferCount > 0U)
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80036f0:	b29b      	uxth	r3, r3
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d1c1      	bne.n	800367a <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	2220      	movs	r2, #32
 80036fa:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    return HAL_OK;
 80036fe:	2300      	movs	r3, #0
 8003700:	e000      	b.n	8003704 <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 8003702:	2302      	movs	r3, #2
  }
}
 8003704:	4618      	mov	r0, r3
 8003706:	3720      	adds	r7, #32
 8003708:	46bd      	mov	sp, r7
 800370a:	bd80      	pop	{r7, pc}

0800370c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800370c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003710:	b08a      	sub	sp, #40	@ 0x28
 8003712:	af00      	add	r7, sp, #0
 8003714:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003716:	2300      	movs	r3, #0
 8003718:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	689a      	ldr	r2, [r3, #8]
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	691b      	ldr	r3, [r3, #16]
 8003724:	431a      	orrs	r2, r3
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	695b      	ldr	r3, [r3, #20]
 800372a:	431a      	orrs	r2, r3
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	69db      	ldr	r3, [r3, #28]
 8003730:	4313      	orrs	r3, r2
 8003732:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	681a      	ldr	r2, [r3, #0]
 800373a:	4bb4      	ldr	r3, [pc, #720]	@ (8003a0c <UART_SetConfig+0x300>)
 800373c:	4013      	ands	r3, r2
 800373e:	68fa      	ldr	r2, [r7, #12]
 8003740:	6812      	ldr	r2, [r2, #0]
 8003742:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003744:	430b      	orrs	r3, r1
 8003746:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	685b      	ldr	r3, [r3, #4]
 800374e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	68da      	ldr	r2, [r3, #12]
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	430a      	orrs	r2, r1
 800375c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	699b      	ldr	r3, [r3, #24]
 8003762:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	4aa9      	ldr	r2, [pc, #676]	@ (8003a10 <UART_SetConfig+0x304>)
 800376a:	4293      	cmp	r3, r2
 800376c:	d004      	beq.n	8003778 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	6a1b      	ldr	r3, [r3, #32]
 8003772:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003774:	4313      	orrs	r3, r2
 8003776:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	689b      	ldr	r3, [r3, #8]
 800377e:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003788:	430a      	orrs	r2, r1
 800378a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	4aa0      	ldr	r2, [pc, #640]	@ (8003a14 <UART_SetConfig+0x308>)
 8003792:	4293      	cmp	r3, r2
 8003794:	d126      	bne.n	80037e4 <UART_SetConfig+0xd8>
 8003796:	4ba0      	ldr	r3, [pc, #640]	@ (8003a18 <UART_SetConfig+0x30c>)
 8003798:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800379c:	f003 0303 	and.w	r3, r3, #3
 80037a0:	2b03      	cmp	r3, #3
 80037a2:	d81b      	bhi.n	80037dc <UART_SetConfig+0xd0>
 80037a4:	a201      	add	r2, pc, #4	@ (adr r2, 80037ac <UART_SetConfig+0xa0>)
 80037a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037aa:	bf00      	nop
 80037ac:	080037bd 	.word	0x080037bd
 80037b0:	080037cd 	.word	0x080037cd
 80037b4:	080037c5 	.word	0x080037c5
 80037b8:	080037d5 	.word	0x080037d5
 80037bc:	2301      	movs	r3, #1
 80037be:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80037c2:	e080      	b.n	80038c6 <UART_SetConfig+0x1ba>
 80037c4:	2302      	movs	r3, #2
 80037c6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80037ca:	e07c      	b.n	80038c6 <UART_SetConfig+0x1ba>
 80037cc:	2304      	movs	r3, #4
 80037ce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80037d2:	e078      	b.n	80038c6 <UART_SetConfig+0x1ba>
 80037d4:	2308      	movs	r3, #8
 80037d6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80037da:	e074      	b.n	80038c6 <UART_SetConfig+0x1ba>
 80037dc:	2310      	movs	r3, #16
 80037de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80037e2:	e070      	b.n	80038c6 <UART_SetConfig+0x1ba>
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	4a8c      	ldr	r2, [pc, #560]	@ (8003a1c <UART_SetConfig+0x310>)
 80037ea:	4293      	cmp	r3, r2
 80037ec:	d138      	bne.n	8003860 <UART_SetConfig+0x154>
 80037ee:	4b8a      	ldr	r3, [pc, #552]	@ (8003a18 <UART_SetConfig+0x30c>)
 80037f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037f4:	f003 030c 	and.w	r3, r3, #12
 80037f8:	2b0c      	cmp	r3, #12
 80037fa:	d82d      	bhi.n	8003858 <UART_SetConfig+0x14c>
 80037fc:	a201      	add	r2, pc, #4	@ (adr r2, 8003804 <UART_SetConfig+0xf8>)
 80037fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003802:	bf00      	nop
 8003804:	08003839 	.word	0x08003839
 8003808:	08003859 	.word	0x08003859
 800380c:	08003859 	.word	0x08003859
 8003810:	08003859 	.word	0x08003859
 8003814:	08003849 	.word	0x08003849
 8003818:	08003859 	.word	0x08003859
 800381c:	08003859 	.word	0x08003859
 8003820:	08003859 	.word	0x08003859
 8003824:	08003841 	.word	0x08003841
 8003828:	08003859 	.word	0x08003859
 800382c:	08003859 	.word	0x08003859
 8003830:	08003859 	.word	0x08003859
 8003834:	08003851 	.word	0x08003851
 8003838:	2300      	movs	r3, #0
 800383a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800383e:	e042      	b.n	80038c6 <UART_SetConfig+0x1ba>
 8003840:	2302      	movs	r3, #2
 8003842:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003846:	e03e      	b.n	80038c6 <UART_SetConfig+0x1ba>
 8003848:	2304      	movs	r3, #4
 800384a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800384e:	e03a      	b.n	80038c6 <UART_SetConfig+0x1ba>
 8003850:	2308      	movs	r3, #8
 8003852:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003856:	e036      	b.n	80038c6 <UART_SetConfig+0x1ba>
 8003858:	2310      	movs	r3, #16
 800385a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800385e:	e032      	b.n	80038c6 <UART_SetConfig+0x1ba>
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	4a6a      	ldr	r2, [pc, #424]	@ (8003a10 <UART_SetConfig+0x304>)
 8003866:	4293      	cmp	r3, r2
 8003868:	d12a      	bne.n	80038c0 <UART_SetConfig+0x1b4>
 800386a:	4b6b      	ldr	r3, [pc, #428]	@ (8003a18 <UART_SetConfig+0x30c>)
 800386c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003870:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003874:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003878:	d01a      	beq.n	80038b0 <UART_SetConfig+0x1a4>
 800387a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800387e:	d81b      	bhi.n	80038b8 <UART_SetConfig+0x1ac>
 8003880:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003884:	d00c      	beq.n	80038a0 <UART_SetConfig+0x194>
 8003886:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800388a:	d815      	bhi.n	80038b8 <UART_SetConfig+0x1ac>
 800388c:	2b00      	cmp	r3, #0
 800388e:	d003      	beq.n	8003898 <UART_SetConfig+0x18c>
 8003890:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003894:	d008      	beq.n	80038a8 <UART_SetConfig+0x19c>
 8003896:	e00f      	b.n	80038b8 <UART_SetConfig+0x1ac>
 8003898:	2300      	movs	r3, #0
 800389a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800389e:	e012      	b.n	80038c6 <UART_SetConfig+0x1ba>
 80038a0:	2302      	movs	r3, #2
 80038a2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80038a6:	e00e      	b.n	80038c6 <UART_SetConfig+0x1ba>
 80038a8:	2304      	movs	r3, #4
 80038aa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80038ae:	e00a      	b.n	80038c6 <UART_SetConfig+0x1ba>
 80038b0:	2308      	movs	r3, #8
 80038b2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80038b6:	e006      	b.n	80038c6 <UART_SetConfig+0x1ba>
 80038b8:	2310      	movs	r3, #16
 80038ba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80038be:	e002      	b.n	80038c6 <UART_SetConfig+0x1ba>
 80038c0:	2310      	movs	r3, #16
 80038c2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	4a51      	ldr	r2, [pc, #324]	@ (8003a10 <UART_SetConfig+0x304>)
 80038cc:	4293      	cmp	r3, r2
 80038ce:	d17a      	bne.n	80039c6 <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80038d0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80038d4:	2b08      	cmp	r3, #8
 80038d6:	d824      	bhi.n	8003922 <UART_SetConfig+0x216>
 80038d8:	a201      	add	r2, pc, #4	@ (adr r2, 80038e0 <UART_SetConfig+0x1d4>)
 80038da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038de:	bf00      	nop
 80038e0:	08003905 	.word	0x08003905
 80038e4:	08003923 	.word	0x08003923
 80038e8:	0800390d 	.word	0x0800390d
 80038ec:	08003923 	.word	0x08003923
 80038f0:	08003913 	.word	0x08003913
 80038f4:	08003923 	.word	0x08003923
 80038f8:	08003923 	.word	0x08003923
 80038fc:	08003923 	.word	0x08003923
 8003900:	0800391b 	.word	0x0800391b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003904:	f7fe fdb8 	bl	8002478 <HAL_RCC_GetPCLK1Freq>
 8003908:	61f8      	str	r0, [r7, #28]
        break;
 800390a:	e010      	b.n	800392e <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800390c:	4b44      	ldr	r3, [pc, #272]	@ (8003a20 <UART_SetConfig+0x314>)
 800390e:	61fb      	str	r3, [r7, #28]
        break;
 8003910:	e00d      	b.n	800392e <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003912:	f7fe fd19 	bl	8002348 <HAL_RCC_GetSysClockFreq>
 8003916:	61f8      	str	r0, [r7, #28]
        break;
 8003918:	e009      	b.n	800392e <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800391a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800391e:	61fb      	str	r3, [r7, #28]
        break;
 8003920:	e005      	b.n	800392e <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 8003922:	2300      	movs	r3, #0
 8003924:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003926:	2301      	movs	r3, #1
 8003928:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800392c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800392e:	69fb      	ldr	r3, [r7, #28]
 8003930:	2b00      	cmp	r3, #0
 8003932:	f000 8107 	beq.w	8003b44 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	685a      	ldr	r2, [r3, #4]
 800393a:	4613      	mov	r3, r2
 800393c:	005b      	lsls	r3, r3, #1
 800393e:	4413      	add	r3, r2
 8003940:	69fa      	ldr	r2, [r7, #28]
 8003942:	429a      	cmp	r2, r3
 8003944:	d305      	bcc.n	8003952 <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	685b      	ldr	r3, [r3, #4]
 800394a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800394c:	69fa      	ldr	r2, [r7, #28]
 800394e:	429a      	cmp	r2, r3
 8003950:	d903      	bls.n	800395a <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 8003952:	2301      	movs	r3, #1
 8003954:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003958:	e0f4      	b.n	8003b44 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800395a:	69fb      	ldr	r3, [r7, #28]
 800395c:	2200      	movs	r2, #0
 800395e:	461c      	mov	r4, r3
 8003960:	4615      	mov	r5, r2
 8003962:	f04f 0200 	mov.w	r2, #0
 8003966:	f04f 0300 	mov.w	r3, #0
 800396a:	022b      	lsls	r3, r5, #8
 800396c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003970:	0222      	lsls	r2, r4, #8
 8003972:	68f9      	ldr	r1, [r7, #12]
 8003974:	6849      	ldr	r1, [r1, #4]
 8003976:	0849      	lsrs	r1, r1, #1
 8003978:	2000      	movs	r0, #0
 800397a:	4688      	mov	r8, r1
 800397c:	4681      	mov	r9, r0
 800397e:	eb12 0a08 	adds.w	sl, r2, r8
 8003982:	eb43 0b09 	adc.w	fp, r3, r9
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	685b      	ldr	r3, [r3, #4]
 800398a:	2200      	movs	r2, #0
 800398c:	603b      	str	r3, [r7, #0]
 800398e:	607a      	str	r2, [r7, #4]
 8003990:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003994:	4650      	mov	r0, sl
 8003996:	4659      	mov	r1, fp
 8003998:	f7fc fc20 	bl	80001dc <__aeabi_uldivmod>
 800399c:	4602      	mov	r2, r0
 800399e:	460b      	mov	r3, r1
 80039a0:	4613      	mov	r3, r2
 80039a2:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80039a4:	69bb      	ldr	r3, [r7, #24]
 80039a6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80039aa:	d308      	bcc.n	80039be <UART_SetConfig+0x2b2>
 80039ac:	69bb      	ldr	r3, [r7, #24]
 80039ae:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80039b2:	d204      	bcs.n	80039be <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	69ba      	ldr	r2, [r7, #24]
 80039ba:	60da      	str	r2, [r3, #12]
 80039bc:	e0c2      	b.n	8003b44 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 80039be:	2301      	movs	r3, #1
 80039c0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80039c4:	e0be      	b.n	8003b44 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	69db      	ldr	r3, [r3, #28]
 80039ca:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80039ce:	d16a      	bne.n	8003aa6 <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 80039d0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80039d4:	2b08      	cmp	r3, #8
 80039d6:	d834      	bhi.n	8003a42 <UART_SetConfig+0x336>
 80039d8:	a201      	add	r2, pc, #4	@ (adr r2, 80039e0 <UART_SetConfig+0x2d4>)
 80039da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039de:	bf00      	nop
 80039e0:	08003a05 	.word	0x08003a05
 80039e4:	08003a25 	.word	0x08003a25
 80039e8:	08003a2d 	.word	0x08003a2d
 80039ec:	08003a43 	.word	0x08003a43
 80039f0:	08003a33 	.word	0x08003a33
 80039f4:	08003a43 	.word	0x08003a43
 80039f8:	08003a43 	.word	0x08003a43
 80039fc:	08003a43 	.word	0x08003a43
 8003a00:	08003a3b 	.word	0x08003a3b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003a04:	f7fe fd38 	bl	8002478 <HAL_RCC_GetPCLK1Freq>
 8003a08:	61f8      	str	r0, [r7, #28]
        break;
 8003a0a:	e020      	b.n	8003a4e <UART_SetConfig+0x342>
 8003a0c:	efff69f3 	.word	0xefff69f3
 8003a10:	40008000 	.word	0x40008000
 8003a14:	40013800 	.word	0x40013800
 8003a18:	40021000 	.word	0x40021000
 8003a1c:	40004400 	.word	0x40004400
 8003a20:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003a24:	f7fe fd3e 	bl	80024a4 <HAL_RCC_GetPCLK2Freq>
 8003a28:	61f8      	str	r0, [r7, #28]
        break;
 8003a2a:	e010      	b.n	8003a4e <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003a2c:	4b4c      	ldr	r3, [pc, #304]	@ (8003b60 <UART_SetConfig+0x454>)
 8003a2e:	61fb      	str	r3, [r7, #28]
        break;
 8003a30:	e00d      	b.n	8003a4e <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003a32:	f7fe fc89 	bl	8002348 <HAL_RCC_GetSysClockFreq>
 8003a36:	61f8      	str	r0, [r7, #28]
        break;
 8003a38:	e009      	b.n	8003a4e <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003a3a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003a3e:	61fb      	str	r3, [r7, #28]
        break;
 8003a40:	e005      	b.n	8003a4e <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 8003a42:	2300      	movs	r3, #0
 8003a44:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003a46:	2301      	movs	r3, #1
 8003a48:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003a4c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003a4e:	69fb      	ldr	r3, [r7, #28]
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d077      	beq.n	8003b44 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003a54:	69fb      	ldr	r3, [r7, #28]
 8003a56:	005a      	lsls	r2, r3, #1
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	685b      	ldr	r3, [r3, #4]
 8003a5c:	085b      	lsrs	r3, r3, #1
 8003a5e:	441a      	add	r2, r3
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	685b      	ldr	r3, [r3, #4]
 8003a64:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a68:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003a6a:	69bb      	ldr	r3, [r7, #24]
 8003a6c:	2b0f      	cmp	r3, #15
 8003a6e:	d916      	bls.n	8003a9e <UART_SetConfig+0x392>
 8003a70:	69bb      	ldr	r3, [r7, #24]
 8003a72:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003a76:	d212      	bcs.n	8003a9e <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003a78:	69bb      	ldr	r3, [r7, #24]
 8003a7a:	b29b      	uxth	r3, r3
 8003a7c:	f023 030f 	bic.w	r3, r3, #15
 8003a80:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003a82:	69bb      	ldr	r3, [r7, #24]
 8003a84:	085b      	lsrs	r3, r3, #1
 8003a86:	b29b      	uxth	r3, r3
 8003a88:	f003 0307 	and.w	r3, r3, #7
 8003a8c:	b29a      	uxth	r2, r3
 8003a8e:	8afb      	ldrh	r3, [r7, #22]
 8003a90:	4313      	orrs	r3, r2
 8003a92:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	8afa      	ldrh	r2, [r7, #22]
 8003a9a:	60da      	str	r2, [r3, #12]
 8003a9c:	e052      	b.n	8003b44 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8003a9e:	2301      	movs	r3, #1
 8003aa0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003aa4:	e04e      	b.n	8003b44 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003aa6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003aaa:	2b08      	cmp	r3, #8
 8003aac:	d827      	bhi.n	8003afe <UART_SetConfig+0x3f2>
 8003aae:	a201      	add	r2, pc, #4	@ (adr r2, 8003ab4 <UART_SetConfig+0x3a8>)
 8003ab0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ab4:	08003ad9 	.word	0x08003ad9
 8003ab8:	08003ae1 	.word	0x08003ae1
 8003abc:	08003ae9 	.word	0x08003ae9
 8003ac0:	08003aff 	.word	0x08003aff
 8003ac4:	08003aef 	.word	0x08003aef
 8003ac8:	08003aff 	.word	0x08003aff
 8003acc:	08003aff 	.word	0x08003aff
 8003ad0:	08003aff 	.word	0x08003aff
 8003ad4:	08003af7 	.word	0x08003af7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003ad8:	f7fe fcce 	bl	8002478 <HAL_RCC_GetPCLK1Freq>
 8003adc:	61f8      	str	r0, [r7, #28]
        break;
 8003ade:	e014      	b.n	8003b0a <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003ae0:	f7fe fce0 	bl	80024a4 <HAL_RCC_GetPCLK2Freq>
 8003ae4:	61f8      	str	r0, [r7, #28]
        break;
 8003ae6:	e010      	b.n	8003b0a <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003ae8:	4b1d      	ldr	r3, [pc, #116]	@ (8003b60 <UART_SetConfig+0x454>)
 8003aea:	61fb      	str	r3, [r7, #28]
        break;
 8003aec:	e00d      	b.n	8003b0a <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003aee:	f7fe fc2b 	bl	8002348 <HAL_RCC_GetSysClockFreq>
 8003af2:	61f8      	str	r0, [r7, #28]
        break;
 8003af4:	e009      	b.n	8003b0a <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003af6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003afa:	61fb      	str	r3, [r7, #28]
        break;
 8003afc:	e005      	b.n	8003b0a <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 8003afe:	2300      	movs	r3, #0
 8003b00:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003b02:	2301      	movs	r3, #1
 8003b04:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003b08:	bf00      	nop
    }

    if (pclk != 0U)
 8003b0a:	69fb      	ldr	r3, [r7, #28]
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d019      	beq.n	8003b44 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	685b      	ldr	r3, [r3, #4]
 8003b14:	085a      	lsrs	r2, r3, #1
 8003b16:	69fb      	ldr	r3, [r7, #28]
 8003b18:	441a      	add	r2, r3
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	685b      	ldr	r3, [r3, #4]
 8003b1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b22:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003b24:	69bb      	ldr	r3, [r7, #24]
 8003b26:	2b0f      	cmp	r3, #15
 8003b28:	d909      	bls.n	8003b3e <UART_SetConfig+0x432>
 8003b2a:	69bb      	ldr	r3, [r7, #24]
 8003b2c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003b30:	d205      	bcs.n	8003b3e <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003b32:	69bb      	ldr	r3, [r7, #24]
 8003b34:	b29a      	uxth	r2, r3
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	60da      	str	r2, [r3, #12]
 8003b3c:	e002      	b.n	8003b44 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8003b3e:	2301      	movs	r3, #1
 8003b40:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	2200      	movs	r2, #0
 8003b48:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003b50:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8003b54:	4618      	mov	r0, r3
 8003b56:	3728      	adds	r7, #40	@ 0x28
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003b5e:	bf00      	nop
 8003b60:	00f42400 	.word	0x00f42400

08003b64 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003b64:	b480      	push	{r7}
 8003b66:	b083      	sub	sp, #12
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b70:	f003 0308 	and.w	r3, r3, #8
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d00a      	beq.n	8003b8e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	685b      	ldr	r3, [r3, #4]
 8003b7e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	430a      	orrs	r2, r1
 8003b8c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b92:	f003 0301 	and.w	r3, r3, #1
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d00a      	beq.n	8003bb0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	685b      	ldr	r3, [r3, #4]
 8003ba0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	430a      	orrs	r2, r1
 8003bae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bb4:	f003 0302 	and.w	r3, r3, #2
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d00a      	beq.n	8003bd2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	685b      	ldr	r3, [r3, #4]
 8003bc2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	430a      	orrs	r2, r1
 8003bd0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bd6:	f003 0304 	and.w	r3, r3, #4
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d00a      	beq.n	8003bf4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	685b      	ldr	r3, [r3, #4]
 8003be4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	430a      	orrs	r2, r1
 8003bf2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bf8:	f003 0310 	and.w	r3, r3, #16
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d00a      	beq.n	8003c16 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	689b      	ldr	r3, [r3, #8]
 8003c06:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	430a      	orrs	r2, r1
 8003c14:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c1a:	f003 0320 	and.w	r3, r3, #32
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d00a      	beq.n	8003c38 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	689b      	ldr	r3, [r3, #8]
 8003c28:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	430a      	orrs	r2, r1
 8003c36:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d01a      	beq.n	8003c7a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	685b      	ldr	r3, [r3, #4]
 8003c4a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	430a      	orrs	r2, r1
 8003c58:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c5e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003c62:	d10a      	bne.n	8003c7a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	685b      	ldr	r3, [r3, #4]
 8003c6a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	430a      	orrs	r2, r1
 8003c78:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d00a      	beq.n	8003c9c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	685b      	ldr	r3, [r3, #4]
 8003c8c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	430a      	orrs	r2, r1
 8003c9a:	605a      	str	r2, [r3, #4]
  }
}
 8003c9c:	bf00      	nop
 8003c9e:	370c      	adds	r7, #12
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca6:	4770      	bx	lr

08003ca8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b098      	sub	sp, #96	@ 0x60
 8003cac:	af02      	add	r7, sp, #8
 8003cae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003cb8:	f7fd fb26 	bl	8001308 <HAL_GetTick>
 8003cbc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f003 0308 	and.w	r3, r3, #8
 8003cc8:	2b08      	cmp	r3, #8
 8003cca:	d12e      	bne.n	8003d2a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003ccc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003cd0:	9300      	str	r3, [sp, #0]
 8003cd2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003cda:	6878      	ldr	r0, [r7, #4]
 8003cdc:	f000 f88c 	bl	8003df8 <UART_WaitOnFlagUntilTimeout>
 8003ce0:	4603      	mov	r3, r0
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d021      	beq.n	8003d2a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003cee:	e853 3f00 	ldrex	r3, [r3]
 8003cf2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003cf4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003cf6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003cfa:	653b      	str	r3, [r7, #80]	@ 0x50
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	461a      	mov	r2, r3
 8003d02:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003d04:	647b      	str	r3, [r7, #68]	@ 0x44
 8003d06:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d08:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003d0a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003d0c:	e841 2300 	strex	r3, r2, [r1]
 8003d10:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003d12:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d1e6      	bne.n	8003ce6 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2220      	movs	r2, #32
 8003d1c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	2200      	movs	r2, #0
 8003d22:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003d26:	2303      	movs	r3, #3
 8003d28:	e062      	b.n	8003df0 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f003 0304 	and.w	r3, r3, #4
 8003d34:	2b04      	cmp	r3, #4
 8003d36:	d149      	bne.n	8003dcc <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003d38:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003d3c:	9300      	str	r3, [sp, #0]
 8003d3e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d40:	2200      	movs	r2, #0
 8003d42:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003d46:	6878      	ldr	r0, [r7, #4]
 8003d48:	f000 f856 	bl	8003df8 <UART_WaitOnFlagUntilTimeout>
 8003d4c:	4603      	mov	r3, r0
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d03c      	beq.n	8003dcc <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d5a:	e853 3f00 	ldrex	r3, [r3]
 8003d5e:	623b      	str	r3, [r7, #32]
   return(result);
 8003d60:	6a3b      	ldr	r3, [r7, #32]
 8003d62:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003d66:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	461a      	mov	r2, r3
 8003d6e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003d70:	633b      	str	r3, [r7, #48]	@ 0x30
 8003d72:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d74:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003d76:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003d78:	e841 2300 	strex	r3, r2, [r1]
 8003d7c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003d7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d1e6      	bne.n	8003d52 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	3308      	adds	r3, #8
 8003d8a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d8c:	693b      	ldr	r3, [r7, #16]
 8003d8e:	e853 3f00 	ldrex	r3, [r3]
 8003d92:	60fb      	str	r3, [r7, #12]
   return(result);
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	f023 0301 	bic.w	r3, r3, #1
 8003d9a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	3308      	adds	r3, #8
 8003da2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003da4:	61fa      	str	r2, [r7, #28]
 8003da6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003da8:	69b9      	ldr	r1, [r7, #24]
 8003daa:	69fa      	ldr	r2, [r7, #28]
 8003dac:	e841 2300 	strex	r3, r2, [r1]
 8003db0:	617b      	str	r3, [r7, #20]
   return(result);
 8003db2:	697b      	ldr	r3, [r7, #20]
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d1e5      	bne.n	8003d84 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2220      	movs	r2, #32
 8003dbc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003dc8:	2303      	movs	r3, #3
 8003dca:	e011      	b.n	8003df0 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2220      	movs	r2, #32
 8003dd0:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	2220      	movs	r2, #32
 8003dd6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	2200      	movs	r2, #0
 8003dde:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2200      	movs	r2, #0
 8003de4:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	2200      	movs	r2, #0
 8003dea:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8003dee:	2300      	movs	r3, #0
}
 8003df0:	4618      	mov	r0, r3
 8003df2:	3758      	adds	r7, #88	@ 0x58
 8003df4:	46bd      	mov	sp, r7
 8003df6:	bd80      	pop	{r7, pc}

08003df8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	b084      	sub	sp, #16
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	60f8      	str	r0, [r7, #12]
 8003e00:	60b9      	str	r1, [r7, #8]
 8003e02:	603b      	str	r3, [r7, #0]
 8003e04:	4613      	mov	r3, r2
 8003e06:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e08:	e04f      	b.n	8003eaa <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e0a:	69bb      	ldr	r3, [r7, #24]
 8003e0c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003e10:	d04b      	beq.n	8003eaa <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e12:	f7fd fa79 	bl	8001308 <HAL_GetTick>
 8003e16:	4602      	mov	r2, r0
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	1ad3      	subs	r3, r2, r3
 8003e1c:	69ba      	ldr	r2, [r7, #24]
 8003e1e:	429a      	cmp	r2, r3
 8003e20:	d302      	bcc.n	8003e28 <UART_WaitOnFlagUntilTimeout+0x30>
 8003e22:	69bb      	ldr	r3, [r7, #24]
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d101      	bne.n	8003e2c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003e28:	2303      	movs	r3, #3
 8003e2a:	e04e      	b.n	8003eca <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f003 0304 	and.w	r3, r3, #4
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d037      	beq.n	8003eaa <UART_WaitOnFlagUntilTimeout+0xb2>
 8003e3a:	68bb      	ldr	r3, [r7, #8]
 8003e3c:	2b80      	cmp	r3, #128	@ 0x80
 8003e3e:	d034      	beq.n	8003eaa <UART_WaitOnFlagUntilTimeout+0xb2>
 8003e40:	68bb      	ldr	r3, [r7, #8]
 8003e42:	2b40      	cmp	r3, #64	@ 0x40
 8003e44:	d031      	beq.n	8003eaa <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	69db      	ldr	r3, [r3, #28]
 8003e4c:	f003 0308 	and.w	r3, r3, #8
 8003e50:	2b08      	cmp	r3, #8
 8003e52:	d110      	bne.n	8003e76 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	2208      	movs	r2, #8
 8003e5a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003e5c:	68f8      	ldr	r0, [r7, #12]
 8003e5e:	f000 f838 	bl	8003ed2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	2208      	movs	r2, #8
 8003e66:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8003e72:	2301      	movs	r3, #1
 8003e74:	e029      	b.n	8003eca <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	69db      	ldr	r3, [r3, #28]
 8003e7c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003e80:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003e84:	d111      	bne.n	8003eaa <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003e8e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003e90:	68f8      	ldr	r0, [r7, #12]
 8003e92:	f000 f81e 	bl	8003ed2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	2220      	movs	r2, #32
 8003e9a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8003ea6:	2303      	movs	r3, #3
 8003ea8:	e00f      	b.n	8003eca <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	69da      	ldr	r2, [r3, #28]
 8003eb0:	68bb      	ldr	r3, [r7, #8]
 8003eb2:	4013      	ands	r3, r2
 8003eb4:	68ba      	ldr	r2, [r7, #8]
 8003eb6:	429a      	cmp	r2, r3
 8003eb8:	bf0c      	ite	eq
 8003eba:	2301      	moveq	r3, #1
 8003ebc:	2300      	movne	r3, #0
 8003ebe:	b2db      	uxtb	r3, r3
 8003ec0:	461a      	mov	r2, r3
 8003ec2:	79fb      	ldrb	r3, [r7, #7]
 8003ec4:	429a      	cmp	r2, r3
 8003ec6:	d0a0      	beq.n	8003e0a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003ec8:	2300      	movs	r3, #0
}
 8003eca:	4618      	mov	r0, r3
 8003ecc:	3710      	adds	r7, #16
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	bd80      	pop	{r7, pc}

08003ed2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003ed2:	b480      	push	{r7}
 8003ed4:	b095      	sub	sp, #84	@ 0x54
 8003ed6:	af00      	add	r7, sp, #0
 8003ed8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ee0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ee2:	e853 3f00 	ldrex	r3, [r3]
 8003ee6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003ee8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003eea:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003eee:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	461a      	mov	r2, r3
 8003ef6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003ef8:	643b      	str	r3, [r7, #64]	@ 0x40
 8003efa:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003efc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003efe:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003f00:	e841 2300 	strex	r3, r2, [r1]
 8003f04:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003f06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d1e6      	bne.n	8003eda <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	3308      	adds	r3, #8
 8003f12:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f14:	6a3b      	ldr	r3, [r7, #32]
 8003f16:	e853 3f00 	ldrex	r3, [r3]
 8003f1a:	61fb      	str	r3, [r7, #28]
   return(result);
 8003f1c:	69fb      	ldr	r3, [r7, #28]
 8003f1e:	f023 0301 	bic.w	r3, r3, #1
 8003f22:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	3308      	adds	r3, #8
 8003f2a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003f2c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003f2e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f30:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003f32:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003f34:	e841 2300 	strex	r3, r2, [r1]
 8003f38:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003f3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d1e5      	bne.n	8003f0c <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f44:	2b01      	cmp	r3, #1
 8003f46:	d118      	bne.n	8003f7a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	e853 3f00 	ldrex	r3, [r3]
 8003f54:	60bb      	str	r3, [r7, #8]
   return(result);
 8003f56:	68bb      	ldr	r3, [r7, #8]
 8003f58:	f023 0310 	bic.w	r3, r3, #16
 8003f5c:	647b      	str	r3, [r7, #68]	@ 0x44
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	461a      	mov	r2, r3
 8003f64:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003f66:	61bb      	str	r3, [r7, #24]
 8003f68:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f6a:	6979      	ldr	r1, [r7, #20]
 8003f6c:	69ba      	ldr	r2, [r7, #24]
 8003f6e:	e841 2300 	strex	r3, r2, [r1]
 8003f72:	613b      	str	r3, [r7, #16]
   return(result);
 8003f74:	693b      	ldr	r3, [r7, #16]
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d1e6      	bne.n	8003f48 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	2220      	movs	r2, #32
 8003f7e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	2200      	movs	r2, #0
 8003f86:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003f8e:	bf00      	nop
 8003f90:	3754      	adds	r7, #84	@ 0x54
 8003f92:	46bd      	mov	sp, r7
 8003f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f98:	4770      	bx	lr

08003f9a <memset>:
 8003f9a:	4402      	add	r2, r0
 8003f9c:	4603      	mov	r3, r0
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d100      	bne.n	8003fa4 <memset+0xa>
 8003fa2:	4770      	bx	lr
 8003fa4:	f803 1b01 	strb.w	r1, [r3], #1
 8003fa8:	e7f9      	b.n	8003f9e <memset+0x4>
	...

08003fac <__libc_init_array>:
 8003fac:	b570      	push	{r4, r5, r6, lr}
 8003fae:	4d0d      	ldr	r5, [pc, #52]	@ (8003fe4 <__libc_init_array+0x38>)
 8003fb0:	4c0d      	ldr	r4, [pc, #52]	@ (8003fe8 <__libc_init_array+0x3c>)
 8003fb2:	1b64      	subs	r4, r4, r5
 8003fb4:	10a4      	asrs	r4, r4, #2
 8003fb6:	2600      	movs	r6, #0
 8003fb8:	42a6      	cmp	r6, r4
 8003fba:	d109      	bne.n	8003fd0 <__libc_init_array+0x24>
 8003fbc:	4d0b      	ldr	r5, [pc, #44]	@ (8003fec <__libc_init_array+0x40>)
 8003fbe:	4c0c      	ldr	r4, [pc, #48]	@ (8003ff0 <__libc_init_array+0x44>)
 8003fc0:	f000 f818 	bl	8003ff4 <_init>
 8003fc4:	1b64      	subs	r4, r4, r5
 8003fc6:	10a4      	asrs	r4, r4, #2
 8003fc8:	2600      	movs	r6, #0
 8003fca:	42a6      	cmp	r6, r4
 8003fcc:	d105      	bne.n	8003fda <__libc_init_array+0x2e>
 8003fce:	bd70      	pop	{r4, r5, r6, pc}
 8003fd0:	f855 3b04 	ldr.w	r3, [r5], #4
 8003fd4:	4798      	blx	r3
 8003fd6:	3601      	adds	r6, #1
 8003fd8:	e7ee      	b.n	8003fb8 <__libc_init_array+0xc>
 8003fda:	f855 3b04 	ldr.w	r3, [r5], #4
 8003fde:	4798      	blx	r3
 8003fe0:	3601      	adds	r6, #1
 8003fe2:	e7f2      	b.n	8003fca <__libc_init_array+0x1e>
 8003fe4:	08004078 	.word	0x08004078
 8003fe8:	08004078 	.word	0x08004078
 8003fec:	08004078 	.word	0x08004078
 8003ff0:	0800407c 	.word	0x0800407c

08003ff4 <_init>:
 8003ff4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ff6:	bf00      	nop
 8003ff8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ffa:	bc08      	pop	{r3}
 8003ffc:	469e      	mov	lr, r3
 8003ffe:	4770      	bx	lr

08004000 <_fini>:
 8004000:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004002:	bf00      	nop
 8004004:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004006:	bc08      	pop	{r3}
 8004008:	469e      	mov	lr, r3
 800400a:	4770      	bx	lr
