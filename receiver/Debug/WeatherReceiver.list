
WeatherReceiver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003a7c  0800018c  0800018c  0000118c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08003c08  08003c08  00004c08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003c50  08003c50  0000500c  2**0
                  CONTENTS
  4 .ARM          00000008  08003c50  08003c50  00004c50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003c58  08003c58  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003c58  08003c58  00004c58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003c5c  08003c5c  00004c5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08003c60  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000160  2000000c  08003c6c  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000016c  08003c6c  0000516c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c5e3  00000000  00000000  0000503c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f0e  00000000  00000000  0001161f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a18  00000000  00000000  00013530  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000007b7  00000000  00000000  00013f48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f118  00000000  00000000  000146ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bfe8  00000000  00000000  00033817  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000bb719  00000000  00000000  0003f7ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000faf18  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000280c  00000000  00000000  000faf5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000071  00000000  00000000  000fd768  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	@ (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	2000000c 	.word	0x2000000c
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08003bf0 	.word	0x08003bf0

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	@ (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	@ (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	@ (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000010 	.word	0x20000010
 80001c8:	08003bf0 	.word	0x08003bf0

080001cc <__aeabi_uldivmod>:
 80001cc:	b953      	cbnz	r3, 80001e4 <__aeabi_uldivmod+0x18>
 80001ce:	b94a      	cbnz	r2, 80001e4 <__aeabi_uldivmod+0x18>
 80001d0:	2900      	cmp	r1, #0
 80001d2:	bf08      	it	eq
 80001d4:	2800      	cmpeq	r0, #0
 80001d6:	bf1c      	itt	ne
 80001d8:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80001dc:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80001e0:	f000 b96a 	b.w	80004b8 <__aeabi_idiv0>
 80001e4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001ec:	f000 f806 	bl	80001fc <__udivmoddi4>
 80001f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f8:	b004      	add	sp, #16
 80001fa:	4770      	bx	lr

080001fc <__udivmoddi4>:
 80001fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000200:	9d08      	ldr	r5, [sp, #32]
 8000202:	460c      	mov	r4, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14e      	bne.n	80002a6 <__udivmoddi4+0xaa>
 8000208:	4694      	mov	ip, r2
 800020a:	458c      	cmp	ip, r1
 800020c:	4686      	mov	lr, r0
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	d962      	bls.n	80002da <__udivmoddi4+0xde>
 8000214:	b14a      	cbz	r2, 800022a <__udivmoddi4+0x2e>
 8000216:	f1c2 0320 	rsb	r3, r2, #32
 800021a:	4091      	lsls	r1, r2
 800021c:	fa20 f303 	lsr.w	r3, r0, r3
 8000220:	fa0c fc02 	lsl.w	ip, ip, r2
 8000224:	4319      	orrs	r1, r3
 8000226:	fa00 fe02 	lsl.w	lr, r0, r2
 800022a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800022e:	fa1f f68c 	uxth.w	r6, ip
 8000232:	fbb1 f4f7 	udiv	r4, r1, r7
 8000236:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800023a:	fb07 1114 	mls	r1, r7, r4, r1
 800023e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000242:	fb04 f106 	mul.w	r1, r4, r6
 8000246:	4299      	cmp	r1, r3
 8000248:	d90a      	bls.n	8000260 <__udivmoddi4+0x64>
 800024a:	eb1c 0303 	adds.w	r3, ip, r3
 800024e:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000252:	f080 8112 	bcs.w	800047a <__udivmoddi4+0x27e>
 8000256:	4299      	cmp	r1, r3
 8000258:	f240 810f 	bls.w	800047a <__udivmoddi4+0x27e>
 800025c:	3c02      	subs	r4, #2
 800025e:	4463      	add	r3, ip
 8000260:	1a59      	subs	r1, r3, r1
 8000262:	fa1f f38e 	uxth.w	r3, lr
 8000266:	fbb1 f0f7 	udiv	r0, r1, r7
 800026a:	fb07 1110 	mls	r1, r7, r0, r1
 800026e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000272:	fb00 f606 	mul.w	r6, r0, r6
 8000276:	429e      	cmp	r6, r3
 8000278:	d90a      	bls.n	8000290 <__udivmoddi4+0x94>
 800027a:	eb1c 0303 	adds.w	r3, ip, r3
 800027e:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000282:	f080 80fc 	bcs.w	800047e <__udivmoddi4+0x282>
 8000286:	429e      	cmp	r6, r3
 8000288:	f240 80f9 	bls.w	800047e <__udivmoddi4+0x282>
 800028c:	4463      	add	r3, ip
 800028e:	3802      	subs	r0, #2
 8000290:	1b9b      	subs	r3, r3, r6
 8000292:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000296:	2100      	movs	r1, #0
 8000298:	b11d      	cbz	r5, 80002a2 <__udivmoddi4+0xa6>
 800029a:	40d3      	lsrs	r3, r2
 800029c:	2200      	movs	r2, #0
 800029e:	e9c5 3200 	strd	r3, r2, [r5]
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	428b      	cmp	r3, r1
 80002a8:	d905      	bls.n	80002b6 <__udivmoddi4+0xba>
 80002aa:	b10d      	cbz	r5, 80002b0 <__udivmoddi4+0xb4>
 80002ac:	e9c5 0100 	strd	r0, r1, [r5]
 80002b0:	2100      	movs	r1, #0
 80002b2:	4608      	mov	r0, r1
 80002b4:	e7f5      	b.n	80002a2 <__udivmoddi4+0xa6>
 80002b6:	fab3 f183 	clz	r1, r3
 80002ba:	2900      	cmp	r1, #0
 80002bc:	d146      	bne.n	800034c <__udivmoddi4+0x150>
 80002be:	42a3      	cmp	r3, r4
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xcc>
 80002c2:	4290      	cmp	r0, r2
 80002c4:	f0c0 80f0 	bcc.w	80004a8 <__udivmoddi4+0x2ac>
 80002c8:	1a86      	subs	r6, r0, r2
 80002ca:	eb64 0303 	sbc.w	r3, r4, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	2d00      	cmp	r5, #0
 80002d2:	d0e6      	beq.n	80002a2 <__udivmoddi4+0xa6>
 80002d4:	e9c5 6300 	strd	r6, r3, [r5]
 80002d8:	e7e3      	b.n	80002a2 <__udivmoddi4+0xa6>
 80002da:	2a00      	cmp	r2, #0
 80002dc:	f040 8090 	bne.w	8000400 <__udivmoddi4+0x204>
 80002e0:	eba1 040c 	sub.w	r4, r1, ip
 80002e4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e8:	fa1f f78c 	uxth.w	r7, ip
 80002ec:	2101      	movs	r1, #1
 80002ee:	fbb4 f6f8 	udiv	r6, r4, r8
 80002f2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f6:	fb08 4416 	mls	r4, r8, r6, r4
 80002fa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002fe:	fb07 f006 	mul.w	r0, r7, r6
 8000302:	4298      	cmp	r0, r3
 8000304:	d908      	bls.n	8000318 <__udivmoddi4+0x11c>
 8000306:	eb1c 0303 	adds.w	r3, ip, r3
 800030a:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 800030e:	d202      	bcs.n	8000316 <__udivmoddi4+0x11a>
 8000310:	4298      	cmp	r0, r3
 8000312:	f200 80cd 	bhi.w	80004b0 <__udivmoddi4+0x2b4>
 8000316:	4626      	mov	r6, r4
 8000318:	1a1c      	subs	r4, r3, r0
 800031a:	fa1f f38e 	uxth.w	r3, lr
 800031e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000322:	fb08 4410 	mls	r4, r8, r0, r4
 8000326:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800032a:	fb00 f707 	mul.w	r7, r0, r7
 800032e:	429f      	cmp	r7, r3
 8000330:	d908      	bls.n	8000344 <__udivmoddi4+0x148>
 8000332:	eb1c 0303 	adds.w	r3, ip, r3
 8000336:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x146>
 800033c:	429f      	cmp	r7, r3
 800033e:	f200 80b0 	bhi.w	80004a2 <__udivmoddi4+0x2a6>
 8000342:	4620      	mov	r0, r4
 8000344:	1bdb      	subs	r3, r3, r7
 8000346:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0x9c>
 800034c:	f1c1 0620 	rsb	r6, r1, #32
 8000350:	408b      	lsls	r3, r1
 8000352:	fa22 f706 	lsr.w	r7, r2, r6
 8000356:	431f      	orrs	r7, r3
 8000358:	fa20 fc06 	lsr.w	ip, r0, r6
 800035c:	fa04 f301 	lsl.w	r3, r4, r1
 8000360:	ea43 030c 	orr.w	r3, r3, ip
 8000364:	40f4      	lsrs	r4, r6
 8000366:	fa00 f801 	lsl.w	r8, r0, r1
 800036a:	0c38      	lsrs	r0, r7, #16
 800036c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000370:	fbb4 fef0 	udiv	lr, r4, r0
 8000374:	fa1f fc87 	uxth.w	ip, r7
 8000378:	fb00 441e 	mls	r4, r0, lr, r4
 800037c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000380:	fb0e f90c 	mul.w	r9, lr, ip
 8000384:	45a1      	cmp	r9, r4
 8000386:	fa02 f201 	lsl.w	r2, r2, r1
 800038a:	d90a      	bls.n	80003a2 <__udivmoddi4+0x1a6>
 800038c:	193c      	adds	r4, r7, r4
 800038e:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000392:	f080 8084 	bcs.w	800049e <__udivmoddi4+0x2a2>
 8000396:	45a1      	cmp	r9, r4
 8000398:	f240 8081 	bls.w	800049e <__udivmoddi4+0x2a2>
 800039c:	f1ae 0e02 	sub.w	lr, lr, #2
 80003a0:	443c      	add	r4, r7
 80003a2:	eba4 0409 	sub.w	r4, r4, r9
 80003a6:	fa1f f983 	uxth.w	r9, r3
 80003aa:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ae:	fb00 4413 	mls	r4, r0, r3, r4
 80003b2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b6:	fb03 fc0c 	mul.w	ip, r3, ip
 80003ba:	45a4      	cmp	ip, r4
 80003bc:	d907      	bls.n	80003ce <__udivmoddi4+0x1d2>
 80003be:	193c      	adds	r4, r7, r4
 80003c0:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80003c4:	d267      	bcs.n	8000496 <__udivmoddi4+0x29a>
 80003c6:	45a4      	cmp	ip, r4
 80003c8:	d965      	bls.n	8000496 <__udivmoddi4+0x29a>
 80003ca:	3b02      	subs	r3, #2
 80003cc:	443c      	add	r4, r7
 80003ce:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003d2:	fba0 9302 	umull	r9, r3, r0, r2
 80003d6:	eba4 040c 	sub.w	r4, r4, ip
 80003da:	429c      	cmp	r4, r3
 80003dc:	46ce      	mov	lr, r9
 80003de:	469c      	mov	ip, r3
 80003e0:	d351      	bcc.n	8000486 <__udivmoddi4+0x28a>
 80003e2:	d04e      	beq.n	8000482 <__udivmoddi4+0x286>
 80003e4:	b155      	cbz	r5, 80003fc <__udivmoddi4+0x200>
 80003e6:	ebb8 030e 	subs.w	r3, r8, lr
 80003ea:	eb64 040c 	sbc.w	r4, r4, ip
 80003ee:	fa04 f606 	lsl.w	r6, r4, r6
 80003f2:	40cb      	lsrs	r3, r1
 80003f4:	431e      	orrs	r6, r3
 80003f6:	40cc      	lsrs	r4, r1
 80003f8:	e9c5 6400 	strd	r6, r4, [r5]
 80003fc:	2100      	movs	r1, #0
 80003fe:	e750      	b.n	80002a2 <__udivmoddi4+0xa6>
 8000400:	f1c2 0320 	rsb	r3, r2, #32
 8000404:	fa20 f103 	lsr.w	r1, r0, r3
 8000408:	fa0c fc02 	lsl.w	ip, ip, r2
 800040c:	fa24 f303 	lsr.w	r3, r4, r3
 8000410:	4094      	lsls	r4, r2
 8000412:	430c      	orrs	r4, r1
 8000414:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000418:	fa00 fe02 	lsl.w	lr, r0, r2
 800041c:	fa1f f78c 	uxth.w	r7, ip
 8000420:	fbb3 f0f8 	udiv	r0, r3, r8
 8000424:	fb08 3110 	mls	r1, r8, r0, r3
 8000428:	0c23      	lsrs	r3, r4, #16
 800042a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042e:	fb00 f107 	mul.w	r1, r0, r7
 8000432:	4299      	cmp	r1, r3
 8000434:	d908      	bls.n	8000448 <__udivmoddi4+0x24c>
 8000436:	eb1c 0303 	adds.w	r3, ip, r3
 800043a:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 800043e:	d22c      	bcs.n	800049a <__udivmoddi4+0x29e>
 8000440:	4299      	cmp	r1, r3
 8000442:	d92a      	bls.n	800049a <__udivmoddi4+0x29e>
 8000444:	3802      	subs	r0, #2
 8000446:	4463      	add	r3, ip
 8000448:	1a5b      	subs	r3, r3, r1
 800044a:	b2a4      	uxth	r4, r4
 800044c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000450:	fb08 3311 	mls	r3, r8, r1, r3
 8000454:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000458:	fb01 f307 	mul.w	r3, r1, r7
 800045c:	42a3      	cmp	r3, r4
 800045e:	d908      	bls.n	8000472 <__udivmoddi4+0x276>
 8000460:	eb1c 0404 	adds.w	r4, ip, r4
 8000464:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000468:	d213      	bcs.n	8000492 <__udivmoddi4+0x296>
 800046a:	42a3      	cmp	r3, r4
 800046c:	d911      	bls.n	8000492 <__udivmoddi4+0x296>
 800046e:	3902      	subs	r1, #2
 8000470:	4464      	add	r4, ip
 8000472:	1ae4      	subs	r4, r4, r3
 8000474:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000478:	e739      	b.n	80002ee <__udivmoddi4+0xf2>
 800047a:	4604      	mov	r4, r0
 800047c:	e6f0      	b.n	8000260 <__udivmoddi4+0x64>
 800047e:	4608      	mov	r0, r1
 8000480:	e706      	b.n	8000290 <__udivmoddi4+0x94>
 8000482:	45c8      	cmp	r8, r9
 8000484:	d2ae      	bcs.n	80003e4 <__udivmoddi4+0x1e8>
 8000486:	ebb9 0e02 	subs.w	lr, r9, r2
 800048a:	eb63 0c07 	sbc.w	ip, r3, r7
 800048e:	3801      	subs	r0, #1
 8000490:	e7a8      	b.n	80003e4 <__udivmoddi4+0x1e8>
 8000492:	4631      	mov	r1, r6
 8000494:	e7ed      	b.n	8000472 <__udivmoddi4+0x276>
 8000496:	4603      	mov	r3, r0
 8000498:	e799      	b.n	80003ce <__udivmoddi4+0x1d2>
 800049a:	4630      	mov	r0, r6
 800049c:	e7d4      	b.n	8000448 <__udivmoddi4+0x24c>
 800049e:	46d6      	mov	lr, sl
 80004a0:	e77f      	b.n	80003a2 <__udivmoddi4+0x1a6>
 80004a2:	4463      	add	r3, ip
 80004a4:	3802      	subs	r0, #2
 80004a6:	e74d      	b.n	8000344 <__udivmoddi4+0x148>
 80004a8:	4606      	mov	r6, r0
 80004aa:	4623      	mov	r3, r4
 80004ac:	4608      	mov	r0, r1
 80004ae:	e70f      	b.n	80002d0 <__udivmoddi4+0xd4>
 80004b0:	3e02      	subs	r6, #2
 80004b2:	4463      	add	r3, ip
 80004b4:	e730      	b.n	8000318 <__udivmoddi4+0x11c>
 80004b6:	bf00      	nop

080004b8 <__aeabi_idiv0>:
 80004b8:	4770      	bx	lr
 80004ba:	bf00      	nop

080004bc <HAL_UART_RxCpltCallback>:
}ldr, rain;



void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80004bc:	b580      	push	{r7, lr}
 80004be:	b084      	sub	sp, #16
 80004c0:	af00      	add	r7, sp, #0
 80004c2:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart2, buf, 20, 100);
 80004c4:	2364      	movs	r3, #100	@ 0x64
 80004c6:	2214      	movs	r2, #20
 80004c8:	4928      	ldr	r1, [pc, #160]	@ (800056c <HAL_UART_RxCpltCallback+0xb0>)
 80004ca:	4829      	ldr	r0, [pc, #164]	@ (8000570 <HAL_UART_RxCpltCallback+0xb4>)
 80004cc:	f002 f876 	bl	80025bc <HAL_UART_Transmit>
    HAL_UART_Receive_IT(&huart1, buf, 20);
 80004d0:	2214      	movs	r2, #20
 80004d2:	4926      	ldr	r1, [pc, #152]	@ (800056c <HAL_UART_RxCpltCallback+0xb0>)
 80004d4:	4827      	ldr	r0, [pc, #156]	@ (8000574 <HAL_UART_RxCpltCallback+0xb8>)
 80004d6:	f002 f8fb 	bl	80026d0 <HAL_UART_Receive_IT>
    UARTcnt++;
 80004da:	4b27      	ldr	r3, [pc, #156]	@ (8000578 <HAL_UART_RxCpltCallback+0xbc>)
 80004dc:	781b      	ldrb	r3, [r3, #0]
 80004de:	b2db      	uxtb	r3, r3
 80004e0:	3301      	adds	r3, #1
 80004e2:	b2da      	uxtb	r2, r3
 80004e4:	4b24      	ldr	r3, [pc, #144]	@ (8000578 <HAL_UART_RxCpltCallback+0xbc>)
 80004e6:	701a      	strb	r2, [r3, #0]

    for(int i=0;i<4;i++)
 80004e8:	2300      	movs	r3, #0
 80004ea:	60fb      	str	r3, [r7, #12]
 80004ec:	e026      	b.n	800053c <HAL_UART_RxCpltCallback+0x80>
	{
    	temp.in[i] = buf[i];
 80004ee:	4a1f      	ldr	r2, [pc, #124]	@ (800056c <HAL_UART_RxCpltCallback+0xb0>)
 80004f0:	68fb      	ldr	r3, [r7, #12]
 80004f2:	4413      	add	r3, r2
 80004f4:	7819      	ldrb	r1, [r3, #0]
 80004f6:	4a21      	ldr	r2, [pc, #132]	@ (800057c <HAL_UART_RxCpltCallback+0xc0>)
 80004f8:	68fb      	ldr	r3, [r7, #12]
 80004fa:	4413      	add	r3, r2
 80004fc:	460a      	mov	r2, r1
 80004fe:	701a      	strb	r2, [r3, #0]
		press.in[i] = buf[i+4];
 8000500:	68fb      	ldr	r3, [r7, #12]
 8000502:	3304      	adds	r3, #4
 8000504:	4a19      	ldr	r2, [pc, #100]	@ (800056c <HAL_UART_RxCpltCallback+0xb0>)
 8000506:	5cd1      	ldrb	r1, [r2, r3]
 8000508:	4a1d      	ldr	r2, [pc, #116]	@ (8000580 <HAL_UART_RxCpltCallback+0xc4>)
 800050a:	68fb      	ldr	r3, [r7, #12]
 800050c:	4413      	add	r3, r2
 800050e:	460a      	mov	r2, r1
 8000510:	701a      	strb	r2, [r3, #0]
		temp2.in[i] = buf[i+8];
 8000512:	68fb      	ldr	r3, [r7, #12]
 8000514:	3308      	adds	r3, #8
 8000516:	4a15      	ldr	r2, [pc, #84]	@ (800056c <HAL_UART_RxCpltCallback+0xb0>)
 8000518:	5cd1      	ldrb	r1, [r2, r3]
 800051a:	4a1a      	ldr	r2, [pc, #104]	@ (8000584 <HAL_UART_RxCpltCallback+0xc8>)
 800051c:	68fb      	ldr	r3, [r7, #12]
 800051e:	4413      	add	r3, r2
 8000520:	460a      	mov	r2, r1
 8000522:	701a      	strb	r2, [r3, #0]
		hum.in[i] = buf[i+12];
 8000524:	68fb      	ldr	r3, [r7, #12]
 8000526:	330c      	adds	r3, #12
 8000528:	4a10      	ldr	r2, [pc, #64]	@ (800056c <HAL_UART_RxCpltCallback+0xb0>)
 800052a:	5cd1      	ldrb	r1, [r2, r3]
 800052c:	4a16      	ldr	r2, [pc, #88]	@ (8000588 <HAL_UART_RxCpltCallback+0xcc>)
 800052e:	68fb      	ldr	r3, [r7, #12]
 8000530:	4413      	add	r3, r2
 8000532:	460a      	mov	r2, r1
 8000534:	701a      	strb	r2, [r3, #0]
    for(int i=0;i<4;i++)
 8000536:	68fb      	ldr	r3, [r7, #12]
 8000538:	3301      	adds	r3, #1
 800053a:	60fb      	str	r3, [r7, #12]
 800053c:	68fb      	ldr	r3, [r7, #12]
 800053e:	2b03      	cmp	r3, #3
 8000540:	ddd5      	ble.n	80004ee <HAL_UART_RxCpltCallback+0x32>
	}

    ldr.in[0] = buf[16];
 8000542:	4b0a      	ldr	r3, [pc, #40]	@ (800056c <HAL_UART_RxCpltCallback+0xb0>)
 8000544:	7c1a      	ldrb	r2, [r3, #16]
 8000546:	4b11      	ldr	r3, [pc, #68]	@ (800058c <HAL_UART_RxCpltCallback+0xd0>)
 8000548:	701a      	strb	r2, [r3, #0]
    ldr.in[1] = buf[17];
 800054a:	4b08      	ldr	r3, [pc, #32]	@ (800056c <HAL_UART_RxCpltCallback+0xb0>)
 800054c:	7c5a      	ldrb	r2, [r3, #17]
 800054e:	4b0f      	ldr	r3, [pc, #60]	@ (800058c <HAL_UART_RxCpltCallback+0xd0>)
 8000550:	705a      	strb	r2, [r3, #1]

    rain.in[0] = buf[19];
 8000552:	4b06      	ldr	r3, [pc, #24]	@ (800056c <HAL_UART_RxCpltCallback+0xb0>)
 8000554:	7cda      	ldrb	r2, [r3, #19]
 8000556:	4b0e      	ldr	r3, [pc, #56]	@ (8000590 <HAL_UART_RxCpltCallback+0xd4>)
 8000558:	701a      	strb	r2, [r3, #0]
	rain.in[1] = buf[18];
 800055a:	4b04      	ldr	r3, [pc, #16]	@ (800056c <HAL_UART_RxCpltCallback+0xb0>)
 800055c:	7c9a      	ldrb	r2, [r3, #18]
 800055e:	4b0c      	ldr	r3, [pc, #48]	@ (8000590 <HAL_UART_RxCpltCallback+0xd4>)
 8000560:	705a      	strb	r2, [r3, #1]
}
 8000562:	bf00      	nop
 8000564:	3710      	adds	r7, #16
 8000566:	46bd      	mov	sp, r7
 8000568:	bd80      	pop	{r7, pc}
 800056a:	bf00      	nop
 800056c:	20000138 	.word	0x20000138
 8000570:	200000b0 	.word	0x200000b0
 8000574:	20000028 	.word	0x20000028
 8000578:	2000014c 	.word	0x2000014c
 800057c:	20000150 	.word	0x20000150
 8000580:	20000154 	.word	0x20000154
 8000584:	20000158 	.word	0x20000158
 8000588:	2000015c 	.word	0x2000015c
 800058c:	20000160 	.word	0x20000160
 8000590:	20000164 	.word	0x20000164

08000594 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000598:	f000 fa73 	bl	8000a82 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800059c:	f000 f814 	bl	80005c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005a0:	f000 f8d4 	bl	800074c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005a4:	f000 f8a2 	bl	80006ec <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 80005a8:	f000 f870 	bl	800068c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart1, buf, 20);
 80005ac:	2214      	movs	r2, #20
 80005ae:	4904      	ldr	r1, [pc, #16]	@ (80005c0 <main+0x2c>)
 80005b0:	4804      	ldr	r0, [pc, #16]	@ (80005c4 <main+0x30>)
 80005b2:	f002 f88d 	bl	80026d0 <HAL_UART_Receive_IT>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  //HAL_UART_Transmit(&huart2, test, 10, 10);
	  HAL_Delay(1000);
 80005b6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80005ba:	f000 fad7 	bl	8000b6c <HAL_Delay>
 80005be:	e7fa      	b.n	80005b6 <main+0x22>
 80005c0:	20000138 	.word	0x20000138
 80005c4:	20000028 	.word	0x20000028

080005c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b096      	sub	sp, #88	@ 0x58
 80005cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ce:	f107 0314 	add.w	r3, r7, #20
 80005d2:	2244      	movs	r2, #68	@ 0x44
 80005d4:	2100      	movs	r1, #0
 80005d6:	4618      	mov	r0, r3
 80005d8:	f003 fade 	bl	8003b98 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005dc:	463b      	mov	r3, r7
 80005de:	2200      	movs	r2, #0
 80005e0:	601a      	str	r2, [r3, #0]
 80005e2:	605a      	str	r2, [r3, #4]
 80005e4:	609a      	str	r2, [r3, #8]
 80005e6:	60da      	str	r2, [r3, #12]
 80005e8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80005ea:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80005ee:	f000 fe11 	bl	8001214 <HAL_PWREx_ControlVoltageScaling>
 80005f2:	4603      	mov	r3, r0
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d001      	beq.n	80005fc <SystemClock_Config+0x34>
  {
    Error_Handler();
 80005f8:	f000 f8f2 	bl	80007e0 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80005fc:	f000 fdec 	bl	80011d8 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000600:	4b21      	ldr	r3, [pc, #132]	@ (8000688 <SystemClock_Config+0xc0>)
 8000602:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000606:	4a20      	ldr	r2, [pc, #128]	@ (8000688 <SystemClock_Config+0xc0>)
 8000608:	f023 0318 	bic.w	r3, r3, #24
 800060c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000610:	2314      	movs	r3, #20
 8000612:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000614:	2301      	movs	r3, #1
 8000616:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000618:	2301      	movs	r3, #1
 800061a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800061c:	2300      	movs	r3, #0
 800061e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000620:	2360      	movs	r3, #96	@ 0x60
 8000622:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000624:	2302      	movs	r3, #2
 8000626:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000628:	2301      	movs	r3, #1
 800062a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800062c:	2301      	movs	r3, #1
 800062e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 8000630:	2310      	movs	r3, #16
 8000632:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000634:	2307      	movs	r3, #7
 8000636:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000638:	2302      	movs	r3, #2
 800063a:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800063c:	2302      	movs	r3, #2
 800063e:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000640:	f107 0314 	add.w	r3, r7, #20
 8000644:	4618      	mov	r0, r3
 8000646:	f000 fe3b 	bl	80012c0 <HAL_RCC_OscConfig>
 800064a:	4603      	mov	r3, r0
 800064c:	2b00      	cmp	r3, #0
 800064e:	d001      	beq.n	8000654 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000650:	f000 f8c6 	bl	80007e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000654:	230f      	movs	r3, #15
 8000656:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000658:	2303      	movs	r3, #3
 800065a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800065c:	2300      	movs	r3, #0
 800065e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000660:	2300      	movs	r3, #0
 8000662:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000664:	2300      	movs	r3, #0
 8000666:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000668:	463b      	mov	r3, r7
 800066a:	2101      	movs	r1, #1
 800066c:	4618      	mov	r0, r3
 800066e:	f001 fa3b 	bl	8001ae8 <HAL_RCC_ClockConfig>
 8000672:	4603      	mov	r3, r0
 8000674:	2b00      	cmp	r3, #0
 8000676:	d001      	beq.n	800067c <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000678:	f000 f8b2 	bl	80007e0 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 800067c:	f001 fe4e 	bl	800231c <HAL_RCCEx_EnableMSIPLLMode>
}
 8000680:	bf00      	nop
 8000682:	3758      	adds	r7, #88	@ 0x58
 8000684:	46bd      	mov	sp, r7
 8000686:	bd80      	pop	{r7, pc}
 8000688:	40021000 	.word	0x40021000

0800068c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000690:	4b14      	ldr	r3, [pc, #80]	@ (80006e4 <MX_USART1_UART_Init+0x58>)
 8000692:	4a15      	ldr	r2, [pc, #84]	@ (80006e8 <MX_USART1_UART_Init+0x5c>)
 8000694:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000696:	4b13      	ldr	r3, [pc, #76]	@ (80006e4 <MX_USART1_UART_Init+0x58>)
 8000698:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 800069c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800069e:	4b11      	ldr	r3, [pc, #68]	@ (80006e4 <MX_USART1_UART_Init+0x58>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80006a4:	4b0f      	ldr	r3, [pc, #60]	@ (80006e4 <MX_USART1_UART_Init+0x58>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80006aa:	4b0e      	ldr	r3, [pc, #56]	@ (80006e4 <MX_USART1_UART_Init+0x58>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80006b0:	4b0c      	ldr	r3, [pc, #48]	@ (80006e4 <MX_USART1_UART_Init+0x58>)
 80006b2:	220c      	movs	r2, #12
 80006b4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006b6:	4b0b      	ldr	r3, [pc, #44]	@ (80006e4 <MX_USART1_UART_Init+0x58>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80006bc:	4b09      	ldr	r3, [pc, #36]	@ (80006e4 <MX_USART1_UART_Init+0x58>)
 80006be:	2200      	movs	r2, #0
 80006c0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006c2:	4b08      	ldr	r3, [pc, #32]	@ (80006e4 <MX_USART1_UART_Init+0x58>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006c8:	4b06      	ldr	r3, [pc, #24]	@ (80006e4 <MX_USART1_UART_Init+0x58>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80006ce:	4805      	ldr	r0, [pc, #20]	@ (80006e4 <MX_USART1_UART_Init+0x58>)
 80006d0:	f001 ff26 	bl	8002520 <HAL_UART_Init>
 80006d4:	4603      	mov	r3, r0
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d001      	beq.n	80006de <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80006da:	f000 f881 	bl	80007e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80006de:	bf00      	nop
 80006e0:	bd80      	pop	{r7, pc}
 80006e2:	bf00      	nop
 80006e4:	20000028 	.word	0x20000028
 80006e8:	40013800 	.word	0x40013800

080006ec <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006f0:	4b14      	ldr	r3, [pc, #80]	@ (8000744 <MX_USART2_UART_Init+0x58>)
 80006f2:	4a15      	ldr	r2, [pc, #84]	@ (8000748 <MX_USART2_UART_Init+0x5c>)
 80006f4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80006f6:	4b13      	ldr	r3, [pc, #76]	@ (8000744 <MX_USART2_UART_Init+0x58>)
 80006f8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80006fc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006fe:	4b11      	ldr	r3, [pc, #68]	@ (8000744 <MX_USART2_UART_Init+0x58>)
 8000700:	2200      	movs	r2, #0
 8000702:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000704:	4b0f      	ldr	r3, [pc, #60]	@ (8000744 <MX_USART2_UART_Init+0x58>)
 8000706:	2200      	movs	r2, #0
 8000708:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800070a:	4b0e      	ldr	r3, [pc, #56]	@ (8000744 <MX_USART2_UART_Init+0x58>)
 800070c:	2200      	movs	r2, #0
 800070e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000710:	4b0c      	ldr	r3, [pc, #48]	@ (8000744 <MX_USART2_UART_Init+0x58>)
 8000712:	220c      	movs	r2, #12
 8000714:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000716:	4b0b      	ldr	r3, [pc, #44]	@ (8000744 <MX_USART2_UART_Init+0x58>)
 8000718:	2200      	movs	r2, #0
 800071a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800071c:	4b09      	ldr	r3, [pc, #36]	@ (8000744 <MX_USART2_UART_Init+0x58>)
 800071e:	2200      	movs	r2, #0
 8000720:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000722:	4b08      	ldr	r3, [pc, #32]	@ (8000744 <MX_USART2_UART_Init+0x58>)
 8000724:	2200      	movs	r2, #0
 8000726:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000728:	4b06      	ldr	r3, [pc, #24]	@ (8000744 <MX_USART2_UART_Init+0x58>)
 800072a:	2200      	movs	r2, #0
 800072c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800072e:	4805      	ldr	r0, [pc, #20]	@ (8000744 <MX_USART2_UART_Init+0x58>)
 8000730:	f001 fef6 	bl	8002520 <HAL_UART_Init>
 8000734:	4603      	mov	r3, r0
 8000736:	2b00      	cmp	r3, #0
 8000738:	d001      	beq.n	800073e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800073a:	f000 f851 	bl	80007e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800073e:	bf00      	nop
 8000740:	bd80      	pop	{r7, pc}
 8000742:	bf00      	nop
 8000744:	200000b0 	.word	0x200000b0
 8000748:	40004400 	.word	0x40004400

0800074c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b088      	sub	sp, #32
 8000750:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000752:	f107 030c 	add.w	r3, r7, #12
 8000756:	2200      	movs	r2, #0
 8000758:	601a      	str	r2, [r3, #0]
 800075a:	605a      	str	r2, [r3, #4]
 800075c:	609a      	str	r2, [r3, #8]
 800075e:	60da      	str	r2, [r3, #12]
 8000760:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000762:	4b1d      	ldr	r3, [pc, #116]	@ (80007d8 <MX_GPIO_Init+0x8c>)
 8000764:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000766:	4a1c      	ldr	r2, [pc, #112]	@ (80007d8 <MX_GPIO_Init+0x8c>)
 8000768:	f043 0304 	orr.w	r3, r3, #4
 800076c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800076e:	4b1a      	ldr	r3, [pc, #104]	@ (80007d8 <MX_GPIO_Init+0x8c>)
 8000770:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000772:	f003 0304 	and.w	r3, r3, #4
 8000776:	60bb      	str	r3, [r7, #8]
 8000778:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800077a:	4b17      	ldr	r3, [pc, #92]	@ (80007d8 <MX_GPIO_Init+0x8c>)
 800077c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800077e:	4a16      	ldr	r2, [pc, #88]	@ (80007d8 <MX_GPIO_Init+0x8c>)
 8000780:	f043 0301 	orr.w	r3, r3, #1
 8000784:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000786:	4b14      	ldr	r3, [pc, #80]	@ (80007d8 <MX_GPIO_Init+0x8c>)
 8000788:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800078a:	f003 0301 	and.w	r3, r3, #1
 800078e:	607b      	str	r3, [r7, #4]
 8000790:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000792:	4b11      	ldr	r3, [pc, #68]	@ (80007d8 <MX_GPIO_Init+0x8c>)
 8000794:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000796:	4a10      	ldr	r2, [pc, #64]	@ (80007d8 <MX_GPIO_Init+0x8c>)
 8000798:	f043 0302 	orr.w	r3, r3, #2
 800079c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800079e:	4b0e      	ldr	r3, [pc, #56]	@ (80007d8 <MX_GPIO_Init+0x8c>)
 80007a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007a2:	f003 0302 	and.w	r3, r3, #2
 80007a6:	603b      	str	r3, [r7, #0]
 80007a8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 80007aa:	2200      	movs	r2, #0
 80007ac:	2108      	movs	r1, #8
 80007ae:	480b      	ldr	r0, [pc, #44]	@ (80007dc <MX_GPIO_Init+0x90>)
 80007b0:	f000 fcfa 	bl	80011a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 80007b4:	2308      	movs	r3, #8
 80007b6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007b8:	2301      	movs	r3, #1
 80007ba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007bc:	2300      	movs	r3, #0
 80007be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007c0:	2300      	movs	r3, #0
 80007c2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 80007c4:	f107 030c 	add.w	r3, r7, #12
 80007c8:	4619      	mov	r1, r3
 80007ca:	4804      	ldr	r0, [pc, #16]	@ (80007dc <MX_GPIO_Init+0x90>)
 80007cc:	f000 fb82 	bl	8000ed4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007d0:	bf00      	nop
 80007d2:	3720      	adds	r7, #32
 80007d4:	46bd      	mov	sp, r7
 80007d6:	bd80      	pop	{r7, pc}
 80007d8:	40021000 	.word	0x40021000
 80007dc:	48000400 	.word	0x48000400

080007e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007e0:	b480      	push	{r7}
 80007e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007e4:	b672      	cpsid	i
}
 80007e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007e8:	bf00      	nop
 80007ea:	e7fd      	b.n	80007e8 <Error_Handler+0x8>

080007ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007ec:	b480      	push	{r7}
 80007ee:	b083      	sub	sp, #12
 80007f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007f2:	4b0f      	ldr	r3, [pc, #60]	@ (8000830 <HAL_MspInit+0x44>)
 80007f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80007f6:	4a0e      	ldr	r2, [pc, #56]	@ (8000830 <HAL_MspInit+0x44>)
 80007f8:	f043 0301 	orr.w	r3, r3, #1
 80007fc:	6613      	str	r3, [r2, #96]	@ 0x60
 80007fe:	4b0c      	ldr	r3, [pc, #48]	@ (8000830 <HAL_MspInit+0x44>)
 8000800:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000802:	f003 0301 	and.w	r3, r3, #1
 8000806:	607b      	str	r3, [r7, #4]
 8000808:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800080a:	4b09      	ldr	r3, [pc, #36]	@ (8000830 <HAL_MspInit+0x44>)
 800080c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800080e:	4a08      	ldr	r2, [pc, #32]	@ (8000830 <HAL_MspInit+0x44>)
 8000810:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000814:	6593      	str	r3, [r2, #88]	@ 0x58
 8000816:	4b06      	ldr	r3, [pc, #24]	@ (8000830 <HAL_MspInit+0x44>)
 8000818:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800081a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800081e:	603b      	str	r3, [r7, #0]
 8000820:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000822:	bf00      	nop
 8000824:	370c      	adds	r7, #12
 8000826:	46bd      	mov	sp, r7
 8000828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082c:	4770      	bx	lr
 800082e:	bf00      	nop
 8000830:	40021000 	.word	0x40021000

08000834 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b0a0      	sub	sp, #128	@ 0x80
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800083c:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8000840:	2200      	movs	r2, #0
 8000842:	601a      	str	r2, [r3, #0]
 8000844:	605a      	str	r2, [r3, #4]
 8000846:	609a      	str	r2, [r3, #8]
 8000848:	60da      	str	r2, [r3, #12]
 800084a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800084c:	f107 0318 	add.w	r3, r7, #24
 8000850:	2254      	movs	r2, #84	@ 0x54
 8000852:	2100      	movs	r1, #0
 8000854:	4618      	mov	r0, r3
 8000856:	f003 f99f 	bl	8003b98 <memset>
  if(huart->Instance==USART1)
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	4a4b      	ldr	r2, [pc, #300]	@ (800098c <HAL_UART_MspInit+0x158>)
 8000860:	4293      	cmp	r3, r2
 8000862:	d140      	bne.n	80008e6 <HAL_UART_MspInit+0xb2>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000864:	2301      	movs	r3, #1
 8000866:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000868:	2300      	movs	r3, #0
 800086a:	63bb      	str	r3, [r7, #56]	@ 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800086c:	f107 0318 	add.w	r3, r7, #24
 8000870:	4618      	mov	r0, r3
 8000872:	f001 fb5d 	bl	8001f30 <HAL_RCCEx_PeriphCLKConfig>
 8000876:	4603      	mov	r3, r0
 8000878:	2b00      	cmp	r3, #0
 800087a:	d001      	beq.n	8000880 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800087c:	f7ff ffb0 	bl	80007e0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000880:	4b43      	ldr	r3, [pc, #268]	@ (8000990 <HAL_UART_MspInit+0x15c>)
 8000882:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000884:	4a42      	ldr	r2, [pc, #264]	@ (8000990 <HAL_UART_MspInit+0x15c>)
 8000886:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800088a:	6613      	str	r3, [r2, #96]	@ 0x60
 800088c:	4b40      	ldr	r3, [pc, #256]	@ (8000990 <HAL_UART_MspInit+0x15c>)
 800088e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000890:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000894:	617b      	str	r3, [r7, #20]
 8000896:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000898:	4b3d      	ldr	r3, [pc, #244]	@ (8000990 <HAL_UART_MspInit+0x15c>)
 800089a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800089c:	4a3c      	ldr	r2, [pc, #240]	@ (8000990 <HAL_UART_MspInit+0x15c>)
 800089e:	f043 0301 	orr.w	r3, r3, #1
 80008a2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008a4:	4b3a      	ldr	r3, [pc, #232]	@ (8000990 <HAL_UART_MspInit+0x15c>)
 80008a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008a8:	f003 0301 	and.w	r3, r3, #1
 80008ac:	613b      	str	r3, [r7, #16]
 80008ae:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80008b0:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80008b4:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008b6:	2302      	movs	r3, #2
 80008b8:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ba:	2300      	movs	r3, #0
 80008bc:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008be:	2303      	movs	r3, #3
 80008c0:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80008c2:	2307      	movs	r3, #7
 80008c4:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008c6:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80008ca:	4619      	mov	r1, r3
 80008cc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008d0:	f000 fb00 	bl	8000ed4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80008d4:	2200      	movs	r2, #0
 80008d6:	2100      	movs	r1, #0
 80008d8:	2025      	movs	r0, #37	@ 0x25
 80008da:	f000 fa46 	bl	8000d6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80008de:	2025      	movs	r0, #37	@ 0x25
 80008e0:	f000 fa5f 	bl	8000da2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80008e4:	e04d      	b.n	8000982 <HAL_UART_MspInit+0x14e>
  else if(huart->Instance==USART2)
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	4a2a      	ldr	r2, [pc, #168]	@ (8000994 <HAL_UART_MspInit+0x160>)
 80008ec:	4293      	cmp	r3, r2
 80008ee:	d148      	bne.n	8000982 <HAL_UART_MspInit+0x14e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80008f0:	2302      	movs	r3, #2
 80008f2:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80008f4:	2300      	movs	r3, #0
 80008f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008f8:	f107 0318 	add.w	r3, r7, #24
 80008fc:	4618      	mov	r0, r3
 80008fe:	f001 fb17 	bl	8001f30 <HAL_RCCEx_PeriphCLKConfig>
 8000902:	4603      	mov	r3, r0
 8000904:	2b00      	cmp	r3, #0
 8000906:	d001      	beq.n	800090c <HAL_UART_MspInit+0xd8>
      Error_Handler();
 8000908:	f7ff ff6a 	bl	80007e0 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 800090c:	4b20      	ldr	r3, [pc, #128]	@ (8000990 <HAL_UART_MspInit+0x15c>)
 800090e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000910:	4a1f      	ldr	r2, [pc, #124]	@ (8000990 <HAL_UART_MspInit+0x15c>)
 8000912:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000916:	6593      	str	r3, [r2, #88]	@ 0x58
 8000918:	4b1d      	ldr	r3, [pc, #116]	@ (8000990 <HAL_UART_MspInit+0x15c>)
 800091a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800091c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000920:	60fb      	str	r3, [r7, #12]
 8000922:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000924:	4b1a      	ldr	r3, [pc, #104]	@ (8000990 <HAL_UART_MspInit+0x15c>)
 8000926:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000928:	4a19      	ldr	r2, [pc, #100]	@ (8000990 <HAL_UART_MspInit+0x15c>)
 800092a:	f043 0301 	orr.w	r3, r3, #1
 800092e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000930:	4b17      	ldr	r3, [pc, #92]	@ (8000990 <HAL_UART_MspInit+0x15c>)
 8000932:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000934:	f003 0301 	and.w	r3, r3, #1
 8000938:	60bb      	str	r3, [r7, #8]
 800093a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 800093c:	2304      	movs	r3, #4
 800093e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000940:	2302      	movs	r3, #2
 8000942:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000944:	2300      	movs	r3, #0
 8000946:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000948:	2303      	movs	r3, #3
 800094a:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800094c:	2307      	movs	r3, #7
 800094e:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8000950:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8000954:	4619      	mov	r1, r3
 8000956:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800095a:	f000 fabb 	bl	8000ed4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 800095e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000962:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000964:	2302      	movs	r3, #2
 8000966:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000968:	2300      	movs	r3, #0
 800096a:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800096c:	2303      	movs	r3, #3
 800096e:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8000970:	2303      	movs	r3, #3
 8000972:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8000974:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8000978:	4619      	mov	r1, r3
 800097a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800097e:	f000 faa9 	bl	8000ed4 <HAL_GPIO_Init>
}
 8000982:	bf00      	nop
 8000984:	3780      	adds	r7, #128	@ 0x80
 8000986:	46bd      	mov	sp, r7
 8000988:	bd80      	pop	{r7, pc}
 800098a:	bf00      	nop
 800098c:	40013800 	.word	0x40013800
 8000990:	40021000 	.word	0x40021000
 8000994:	40004400 	.word	0x40004400

08000998 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000998:	b480      	push	{r7}
 800099a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800099c:	bf00      	nop
 800099e:	e7fd      	b.n	800099c <NMI_Handler+0x4>

080009a0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009a0:	b480      	push	{r7}
 80009a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009a4:	bf00      	nop
 80009a6:	e7fd      	b.n	80009a4 <HardFault_Handler+0x4>

080009a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009a8:	b480      	push	{r7}
 80009aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009ac:	bf00      	nop
 80009ae:	e7fd      	b.n	80009ac <MemManage_Handler+0x4>

080009b0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009b0:	b480      	push	{r7}
 80009b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009b4:	bf00      	nop
 80009b6:	e7fd      	b.n	80009b4 <BusFault_Handler+0x4>

080009b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009b8:	b480      	push	{r7}
 80009ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009bc:	bf00      	nop
 80009be:	e7fd      	b.n	80009bc <UsageFault_Handler+0x4>

080009c0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009c0:	b480      	push	{r7}
 80009c2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009c4:	bf00      	nop
 80009c6:	46bd      	mov	sp, r7
 80009c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009cc:	4770      	bx	lr

080009ce <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009ce:	b480      	push	{r7}
 80009d0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009d2:	bf00      	nop
 80009d4:	46bd      	mov	sp, r7
 80009d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009da:	4770      	bx	lr

080009dc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009dc:	b480      	push	{r7}
 80009de:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009e0:	bf00      	nop
 80009e2:	46bd      	mov	sp, r7
 80009e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e8:	4770      	bx	lr

080009ea <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009ea:	b580      	push	{r7, lr}
 80009ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009ee:	f000 f89d 	bl	8000b2c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009f2:	bf00      	nop
 80009f4:	bd80      	pop	{r7, pc}
	...

080009f8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80009fc:	4802      	ldr	r0, [pc, #8]	@ (8000a08 <USART1_IRQHandler+0x10>)
 80009fe:	f001 feb3 	bl	8002768 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000a02:	bf00      	nop
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	20000028 	.word	0x20000028

08000a0c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000a10:	4b06      	ldr	r3, [pc, #24]	@ (8000a2c <SystemInit+0x20>)
 8000a12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000a16:	4a05      	ldr	r2, [pc, #20]	@ (8000a2c <SystemInit+0x20>)
 8000a18:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000a1c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000a20:	bf00      	nop
 8000a22:	46bd      	mov	sp, r7
 8000a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a28:	4770      	bx	lr
 8000a2a:	bf00      	nop
 8000a2c:	e000ed00 	.word	0xe000ed00

08000a30 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000a30:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000a68 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000a34:	f7ff ffea 	bl	8000a0c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a38:	480c      	ldr	r0, [pc, #48]	@ (8000a6c <LoopForever+0x6>)
  ldr r1, =_edata
 8000a3a:	490d      	ldr	r1, [pc, #52]	@ (8000a70 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a3c:	4a0d      	ldr	r2, [pc, #52]	@ (8000a74 <LoopForever+0xe>)
  movs r3, #0
 8000a3e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a40:	e002      	b.n	8000a48 <LoopCopyDataInit>

08000a42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a46:	3304      	adds	r3, #4

08000a48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a4c:	d3f9      	bcc.n	8000a42 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a4e:	4a0a      	ldr	r2, [pc, #40]	@ (8000a78 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a50:	4c0a      	ldr	r4, [pc, #40]	@ (8000a7c <LoopForever+0x16>)
  movs r3, #0
 8000a52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a54:	e001      	b.n	8000a5a <LoopFillZerobss>

08000a56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a58:	3204      	adds	r2, #4

08000a5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a5c:	d3fb      	bcc.n	8000a56 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a5e:	f003 f8a3 	bl	8003ba8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000a62:	f7ff fd97 	bl	8000594 <main>

08000a66 <LoopForever>:

LoopForever:
    b LoopForever
 8000a66:	e7fe      	b.n	8000a66 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000a68:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000a6c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a70:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000a74:	08003c60 	.word	0x08003c60
  ldr r2, =_sbss
 8000a78:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000a7c:	2000016c 	.word	0x2000016c

08000a80 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000a80:	e7fe      	b.n	8000a80 <ADC1_IRQHandler>

08000a82 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a82:	b580      	push	{r7, lr}
 8000a84:	b082      	sub	sp, #8
 8000a86:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a8c:	2003      	movs	r0, #3
 8000a8e:	f000 f961 	bl	8000d54 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a92:	2000      	movs	r0, #0
 8000a94:	f000 f80e 	bl	8000ab4 <HAL_InitTick>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d002      	beq.n	8000aa4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000a9e:	2301      	movs	r3, #1
 8000aa0:	71fb      	strb	r3, [r7, #7]
 8000aa2:	e001      	b.n	8000aa8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000aa4:	f7ff fea2 	bl	80007ec <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000aa8:	79fb      	ldrb	r3, [r7, #7]
}
 8000aaa:	4618      	mov	r0, r3
 8000aac:	3708      	adds	r7, #8
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bd80      	pop	{r7, pc}
	...

08000ab4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b084      	sub	sp, #16
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000abc:	2300      	movs	r3, #0
 8000abe:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000ac0:	4b17      	ldr	r3, [pc, #92]	@ (8000b20 <HAL_InitTick+0x6c>)
 8000ac2:	781b      	ldrb	r3, [r3, #0]
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d023      	beq.n	8000b10 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000ac8:	4b16      	ldr	r3, [pc, #88]	@ (8000b24 <HAL_InitTick+0x70>)
 8000aca:	681a      	ldr	r2, [r3, #0]
 8000acc:	4b14      	ldr	r3, [pc, #80]	@ (8000b20 <HAL_InitTick+0x6c>)
 8000ace:	781b      	ldrb	r3, [r3, #0]
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ad6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ada:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ade:	4618      	mov	r0, r3
 8000ae0:	f000 f96d 	bl	8000dbe <HAL_SYSTICK_Config>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d10f      	bne.n	8000b0a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	2b0f      	cmp	r3, #15
 8000aee:	d809      	bhi.n	8000b04 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000af0:	2200      	movs	r2, #0
 8000af2:	6879      	ldr	r1, [r7, #4]
 8000af4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000af8:	f000 f937 	bl	8000d6a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000afc:	4a0a      	ldr	r2, [pc, #40]	@ (8000b28 <HAL_InitTick+0x74>)
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	6013      	str	r3, [r2, #0]
 8000b02:	e007      	b.n	8000b14 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000b04:	2301      	movs	r3, #1
 8000b06:	73fb      	strb	r3, [r7, #15]
 8000b08:	e004      	b.n	8000b14 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000b0a:	2301      	movs	r3, #1
 8000b0c:	73fb      	strb	r3, [r7, #15]
 8000b0e:	e001      	b.n	8000b14 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000b10:	2301      	movs	r3, #1
 8000b12:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000b14:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b16:	4618      	mov	r0, r3
 8000b18:	3710      	adds	r7, #16
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	bf00      	nop
 8000b20:	20000008 	.word	0x20000008
 8000b24:	20000000 	.word	0x20000000
 8000b28:	20000004 	.word	0x20000004

08000b2c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000b30:	4b06      	ldr	r3, [pc, #24]	@ (8000b4c <HAL_IncTick+0x20>)
 8000b32:	781b      	ldrb	r3, [r3, #0]
 8000b34:	461a      	mov	r2, r3
 8000b36:	4b06      	ldr	r3, [pc, #24]	@ (8000b50 <HAL_IncTick+0x24>)
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	4413      	add	r3, r2
 8000b3c:	4a04      	ldr	r2, [pc, #16]	@ (8000b50 <HAL_IncTick+0x24>)
 8000b3e:	6013      	str	r3, [r2, #0]
}
 8000b40:	bf00      	nop
 8000b42:	46bd      	mov	sp, r7
 8000b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b48:	4770      	bx	lr
 8000b4a:	bf00      	nop
 8000b4c:	20000008 	.word	0x20000008
 8000b50:	20000168 	.word	0x20000168

08000b54 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b54:	b480      	push	{r7}
 8000b56:	af00      	add	r7, sp, #0
  return uwTick;
 8000b58:	4b03      	ldr	r3, [pc, #12]	@ (8000b68 <HAL_GetTick+0x14>)
 8000b5a:	681b      	ldr	r3, [r3, #0]
}
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop
 8000b68:	20000168 	.word	0x20000168

08000b6c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b084      	sub	sp, #16
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b74:	f7ff ffee 	bl	8000b54 <HAL_GetTick>
 8000b78:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b7e:	68fb      	ldr	r3, [r7, #12]
 8000b80:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000b84:	d005      	beq.n	8000b92 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000b86:	4b0a      	ldr	r3, [pc, #40]	@ (8000bb0 <HAL_Delay+0x44>)
 8000b88:	781b      	ldrb	r3, [r3, #0]
 8000b8a:	461a      	mov	r2, r3
 8000b8c:	68fb      	ldr	r3, [r7, #12]
 8000b8e:	4413      	add	r3, r2
 8000b90:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000b92:	bf00      	nop
 8000b94:	f7ff ffde 	bl	8000b54 <HAL_GetTick>
 8000b98:	4602      	mov	r2, r0
 8000b9a:	68bb      	ldr	r3, [r7, #8]
 8000b9c:	1ad3      	subs	r3, r2, r3
 8000b9e:	68fa      	ldr	r2, [r7, #12]
 8000ba0:	429a      	cmp	r2, r3
 8000ba2:	d8f7      	bhi.n	8000b94 <HAL_Delay+0x28>
  {
  }
}
 8000ba4:	bf00      	nop
 8000ba6:	bf00      	nop
 8000ba8:	3710      	adds	r7, #16
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bd80      	pop	{r7, pc}
 8000bae:	bf00      	nop
 8000bb0:	20000008 	.word	0x20000008

08000bb4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	b085      	sub	sp, #20
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	f003 0307 	and.w	r3, r3, #7
 8000bc2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bc4:	4b0c      	ldr	r3, [pc, #48]	@ (8000bf8 <__NVIC_SetPriorityGrouping+0x44>)
 8000bc6:	68db      	ldr	r3, [r3, #12]
 8000bc8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bca:	68ba      	ldr	r2, [r7, #8]
 8000bcc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000bd0:	4013      	ands	r3, r2
 8000bd2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bd4:	68fb      	ldr	r3, [r7, #12]
 8000bd6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bd8:	68bb      	ldr	r3, [r7, #8]
 8000bda:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bdc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000be0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000be4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000be6:	4a04      	ldr	r2, [pc, #16]	@ (8000bf8 <__NVIC_SetPriorityGrouping+0x44>)
 8000be8:	68bb      	ldr	r3, [r7, #8]
 8000bea:	60d3      	str	r3, [r2, #12]
}
 8000bec:	bf00      	nop
 8000bee:	3714      	adds	r7, #20
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf6:	4770      	bx	lr
 8000bf8:	e000ed00 	.word	0xe000ed00

08000bfc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c00:	4b04      	ldr	r3, [pc, #16]	@ (8000c14 <__NVIC_GetPriorityGrouping+0x18>)
 8000c02:	68db      	ldr	r3, [r3, #12]
 8000c04:	0a1b      	lsrs	r3, r3, #8
 8000c06:	f003 0307 	and.w	r3, r3, #7
}
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c12:	4770      	bx	lr
 8000c14:	e000ed00 	.word	0xe000ed00

08000c18 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	b083      	sub	sp, #12
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	4603      	mov	r3, r0
 8000c20:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	db0b      	blt.n	8000c42 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c2a:	79fb      	ldrb	r3, [r7, #7]
 8000c2c:	f003 021f 	and.w	r2, r3, #31
 8000c30:	4907      	ldr	r1, [pc, #28]	@ (8000c50 <__NVIC_EnableIRQ+0x38>)
 8000c32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c36:	095b      	lsrs	r3, r3, #5
 8000c38:	2001      	movs	r0, #1
 8000c3a:	fa00 f202 	lsl.w	r2, r0, r2
 8000c3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000c42:	bf00      	nop
 8000c44:	370c      	adds	r7, #12
 8000c46:	46bd      	mov	sp, r7
 8000c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4c:	4770      	bx	lr
 8000c4e:	bf00      	nop
 8000c50:	e000e100 	.word	0xe000e100

08000c54 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c54:	b480      	push	{r7}
 8000c56:	b083      	sub	sp, #12
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	6039      	str	r1, [r7, #0]
 8000c5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	db0a      	blt.n	8000c7e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c68:	683b      	ldr	r3, [r7, #0]
 8000c6a:	b2da      	uxtb	r2, r3
 8000c6c:	490c      	ldr	r1, [pc, #48]	@ (8000ca0 <__NVIC_SetPriority+0x4c>)
 8000c6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c72:	0112      	lsls	r2, r2, #4
 8000c74:	b2d2      	uxtb	r2, r2
 8000c76:	440b      	add	r3, r1
 8000c78:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c7c:	e00a      	b.n	8000c94 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c7e:	683b      	ldr	r3, [r7, #0]
 8000c80:	b2da      	uxtb	r2, r3
 8000c82:	4908      	ldr	r1, [pc, #32]	@ (8000ca4 <__NVIC_SetPriority+0x50>)
 8000c84:	79fb      	ldrb	r3, [r7, #7]
 8000c86:	f003 030f 	and.w	r3, r3, #15
 8000c8a:	3b04      	subs	r3, #4
 8000c8c:	0112      	lsls	r2, r2, #4
 8000c8e:	b2d2      	uxtb	r2, r2
 8000c90:	440b      	add	r3, r1
 8000c92:	761a      	strb	r2, [r3, #24]
}
 8000c94:	bf00      	nop
 8000c96:	370c      	adds	r7, #12
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9e:	4770      	bx	lr
 8000ca0:	e000e100 	.word	0xe000e100
 8000ca4:	e000ed00 	.word	0xe000ed00

08000ca8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	b089      	sub	sp, #36	@ 0x24
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	60f8      	str	r0, [r7, #12]
 8000cb0:	60b9      	str	r1, [r7, #8]
 8000cb2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cb4:	68fb      	ldr	r3, [r7, #12]
 8000cb6:	f003 0307 	and.w	r3, r3, #7
 8000cba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cbc:	69fb      	ldr	r3, [r7, #28]
 8000cbe:	f1c3 0307 	rsb	r3, r3, #7
 8000cc2:	2b04      	cmp	r3, #4
 8000cc4:	bf28      	it	cs
 8000cc6:	2304      	movcs	r3, #4
 8000cc8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cca:	69fb      	ldr	r3, [r7, #28]
 8000ccc:	3304      	adds	r3, #4
 8000cce:	2b06      	cmp	r3, #6
 8000cd0:	d902      	bls.n	8000cd8 <NVIC_EncodePriority+0x30>
 8000cd2:	69fb      	ldr	r3, [r7, #28]
 8000cd4:	3b03      	subs	r3, #3
 8000cd6:	e000      	b.n	8000cda <NVIC_EncodePriority+0x32>
 8000cd8:	2300      	movs	r3, #0
 8000cda:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cdc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000ce0:	69bb      	ldr	r3, [r7, #24]
 8000ce2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce6:	43da      	mvns	r2, r3
 8000ce8:	68bb      	ldr	r3, [r7, #8]
 8000cea:	401a      	ands	r2, r3
 8000cec:	697b      	ldr	r3, [r7, #20]
 8000cee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cf0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000cf4:	697b      	ldr	r3, [r7, #20]
 8000cf6:	fa01 f303 	lsl.w	r3, r1, r3
 8000cfa:	43d9      	mvns	r1, r3
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d00:	4313      	orrs	r3, r2
         );
}
 8000d02:	4618      	mov	r0, r3
 8000d04:	3724      	adds	r7, #36	@ 0x24
 8000d06:	46bd      	mov	sp, r7
 8000d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0c:	4770      	bx	lr
	...

08000d10 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b082      	sub	sp, #8
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	3b01      	subs	r3, #1
 8000d1c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000d20:	d301      	bcc.n	8000d26 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d22:	2301      	movs	r3, #1
 8000d24:	e00f      	b.n	8000d46 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d26:	4a0a      	ldr	r2, [pc, #40]	@ (8000d50 <SysTick_Config+0x40>)
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	3b01      	subs	r3, #1
 8000d2c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d2e:	210f      	movs	r1, #15
 8000d30:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000d34:	f7ff ff8e 	bl	8000c54 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d38:	4b05      	ldr	r3, [pc, #20]	@ (8000d50 <SysTick_Config+0x40>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d3e:	4b04      	ldr	r3, [pc, #16]	@ (8000d50 <SysTick_Config+0x40>)
 8000d40:	2207      	movs	r2, #7
 8000d42:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d44:	2300      	movs	r3, #0
}
 8000d46:	4618      	mov	r0, r3
 8000d48:	3708      	adds	r7, #8
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd80      	pop	{r7, pc}
 8000d4e:	bf00      	nop
 8000d50:	e000e010 	.word	0xe000e010

08000d54 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b082      	sub	sp, #8
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d5c:	6878      	ldr	r0, [r7, #4]
 8000d5e:	f7ff ff29 	bl	8000bb4 <__NVIC_SetPriorityGrouping>
}
 8000d62:	bf00      	nop
 8000d64:	3708      	adds	r7, #8
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}

08000d6a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d6a:	b580      	push	{r7, lr}
 8000d6c:	b086      	sub	sp, #24
 8000d6e:	af00      	add	r7, sp, #0
 8000d70:	4603      	mov	r3, r0
 8000d72:	60b9      	str	r1, [r7, #8]
 8000d74:	607a      	str	r2, [r7, #4]
 8000d76:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000d7c:	f7ff ff3e 	bl	8000bfc <__NVIC_GetPriorityGrouping>
 8000d80:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d82:	687a      	ldr	r2, [r7, #4]
 8000d84:	68b9      	ldr	r1, [r7, #8]
 8000d86:	6978      	ldr	r0, [r7, #20]
 8000d88:	f7ff ff8e 	bl	8000ca8 <NVIC_EncodePriority>
 8000d8c:	4602      	mov	r2, r0
 8000d8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d92:	4611      	mov	r1, r2
 8000d94:	4618      	mov	r0, r3
 8000d96:	f7ff ff5d 	bl	8000c54 <__NVIC_SetPriority>
}
 8000d9a:	bf00      	nop
 8000d9c:	3718      	adds	r7, #24
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd80      	pop	{r7, pc}

08000da2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000da2:	b580      	push	{r7, lr}
 8000da4:	b082      	sub	sp, #8
 8000da6:	af00      	add	r7, sp, #0
 8000da8:	4603      	mov	r3, r0
 8000daa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000dac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000db0:	4618      	mov	r0, r3
 8000db2:	f7ff ff31 	bl	8000c18 <__NVIC_EnableIRQ>
}
 8000db6:	bf00      	nop
 8000db8:	3708      	adds	r7, #8
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}

08000dbe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000dbe:	b580      	push	{r7, lr}
 8000dc0:	b082      	sub	sp, #8
 8000dc2:	af00      	add	r7, sp, #0
 8000dc4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000dc6:	6878      	ldr	r0, [r7, #4]
 8000dc8:	f7ff ffa2 	bl	8000d10 <SysTick_Config>
 8000dcc:	4603      	mov	r3, r0
}
 8000dce:	4618      	mov	r0, r3
 8000dd0:	3708      	adds	r7, #8
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bd80      	pop	{r7, pc}

08000dd6 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000dd6:	b480      	push	{r7}
 8000dd8:	b085      	sub	sp, #20
 8000dda:	af00      	add	r7, sp, #0
 8000ddc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000dde:	2300      	movs	r3, #0
 8000de0:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8000de8:	b2db      	uxtb	r3, r3
 8000dea:	2b02      	cmp	r3, #2
 8000dec:	d008      	beq.n	8000e00 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	2204      	movs	r2, #4
 8000df2:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	2200      	movs	r2, #0
 8000df8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8000dfc:	2301      	movs	r3, #1
 8000dfe:	e022      	b.n	8000e46 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	681a      	ldr	r2, [r3, #0]
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	f022 020e 	bic.w	r2, r2, #14
 8000e0e:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	681a      	ldr	r2, [r3, #0]
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	f022 0201 	bic.w	r2, r2, #1
 8000e1e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e24:	f003 021c 	and.w	r2, r3, #28
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e2c:	2101      	movs	r1, #1
 8000e2e:	fa01 f202 	lsl.w	r2, r1, r2
 8000e32:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	2201      	movs	r2, #1
 8000e38:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	2200      	movs	r2, #0
 8000e40:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 8000e44:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8000e46:	4618      	mov	r0, r3
 8000e48:	3714      	adds	r7, #20
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e50:	4770      	bx	lr

08000e52 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000e52:	b580      	push	{r7, lr}
 8000e54:	b084      	sub	sp, #16
 8000e56:	af00      	add	r7, sp, #0
 8000e58:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8000e64:	b2db      	uxtb	r3, r3
 8000e66:	2b02      	cmp	r3, #2
 8000e68:	d005      	beq.n	8000e76 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	2204      	movs	r2, #4
 8000e6e:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8000e70:	2301      	movs	r3, #1
 8000e72:	73fb      	strb	r3, [r7, #15]
 8000e74:	e029      	b.n	8000eca <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	681a      	ldr	r2, [r3, #0]
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	f022 020e 	bic.w	r2, r2, #14
 8000e84:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	681a      	ldr	r2, [r3, #0]
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	f022 0201 	bic.w	r2, r2, #1
 8000e94:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e9a:	f003 021c 	and.w	r2, r3, #28
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ea2:	2101      	movs	r1, #1
 8000ea4:	fa01 f202 	lsl.w	r2, r1, r2
 8000ea8:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	2201      	movs	r2, #1
 8000eae:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d003      	beq.n	8000eca <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000ec6:	6878      	ldr	r0, [r7, #4]
 8000ec8:	4798      	blx	r3
    }
  }
  return status;
 8000eca:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ecc:	4618      	mov	r0, r3
 8000ece:	3710      	adds	r7, #16
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bd80      	pop	{r7, pc}

08000ed4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	b087      	sub	sp, #28
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
 8000edc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ee2:	e148      	b.n	8001176 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000ee4:	683b      	ldr	r3, [r7, #0]
 8000ee6:	681a      	ldr	r2, [r3, #0]
 8000ee8:	2101      	movs	r1, #1
 8000eea:	697b      	ldr	r3, [r7, #20]
 8000eec:	fa01 f303 	lsl.w	r3, r1, r3
 8000ef0:	4013      	ands	r3, r2
 8000ef2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	f000 813a 	beq.w	8001170 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	685b      	ldr	r3, [r3, #4]
 8000f00:	f003 0303 	and.w	r3, r3, #3
 8000f04:	2b01      	cmp	r3, #1
 8000f06:	d005      	beq.n	8000f14 <HAL_GPIO_Init+0x40>
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	685b      	ldr	r3, [r3, #4]
 8000f0c:	f003 0303 	and.w	r3, r3, #3
 8000f10:	2b02      	cmp	r3, #2
 8000f12:	d130      	bne.n	8000f76 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	689b      	ldr	r3, [r3, #8]
 8000f18:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000f1a:	697b      	ldr	r3, [r7, #20]
 8000f1c:	005b      	lsls	r3, r3, #1
 8000f1e:	2203      	movs	r2, #3
 8000f20:	fa02 f303 	lsl.w	r3, r2, r3
 8000f24:	43db      	mvns	r3, r3
 8000f26:	693a      	ldr	r2, [r7, #16]
 8000f28:	4013      	ands	r3, r2
 8000f2a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000f2c:	683b      	ldr	r3, [r7, #0]
 8000f2e:	68da      	ldr	r2, [r3, #12]
 8000f30:	697b      	ldr	r3, [r7, #20]
 8000f32:	005b      	lsls	r3, r3, #1
 8000f34:	fa02 f303 	lsl.w	r3, r2, r3
 8000f38:	693a      	ldr	r2, [r7, #16]
 8000f3a:	4313      	orrs	r3, r2
 8000f3c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	693a      	ldr	r2, [r7, #16]
 8000f42:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	685b      	ldr	r3, [r3, #4]
 8000f48:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000f4a:	2201      	movs	r2, #1
 8000f4c:	697b      	ldr	r3, [r7, #20]
 8000f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f52:	43db      	mvns	r3, r3
 8000f54:	693a      	ldr	r2, [r7, #16]
 8000f56:	4013      	ands	r3, r2
 8000f58:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f5a:	683b      	ldr	r3, [r7, #0]
 8000f5c:	685b      	ldr	r3, [r3, #4]
 8000f5e:	091b      	lsrs	r3, r3, #4
 8000f60:	f003 0201 	and.w	r2, r3, #1
 8000f64:	697b      	ldr	r3, [r7, #20]
 8000f66:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6a:	693a      	ldr	r2, [r7, #16]
 8000f6c:	4313      	orrs	r3, r2
 8000f6e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	693a      	ldr	r2, [r7, #16]
 8000f74:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f76:	683b      	ldr	r3, [r7, #0]
 8000f78:	685b      	ldr	r3, [r3, #4]
 8000f7a:	f003 0303 	and.w	r3, r3, #3
 8000f7e:	2b03      	cmp	r3, #3
 8000f80:	d017      	beq.n	8000fb2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	68db      	ldr	r3, [r3, #12]
 8000f86:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000f88:	697b      	ldr	r3, [r7, #20]
 8000f8a:	005b      	lsls	r3, r3, #1
 8000f8c:	2203      	movs	r2, #3
 8000f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f92:	43db      	mvns	r3, r3
 8000f94:	693a      	ldr	r2, [r7, #16]
 8000f96:	4013      	ands	r3, r2
 8000f98:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f9a:	683b      	ldr	r3, [r7, #0]
 8000f9c:	689a      	ldr	r2, [r3, #8]
 8000f9e:	697b      	ldr	r3, [r7, #20]
 8000fa0:	005b      	lsls	r3, r3, #1
 8000fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa6:	693a      	ldr	r2, [r7, #16]
 8000fa8:	4313      	orrs	r3, r2
 8000faa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	693a      	ldr	r2, [r7, #16]
 8000fb0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fb2:	683b      	ldr	r3, [r7, #0]
 8000fb4:	685b      	ldr	r3, [r3, #4]
 8000fb6:	f003 0303 	and.w	r3, r3, #3
 8000fba:	2b02      	cmp	r3, #2
 8000fbc:	d123      	bne.n	8001006 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000fbe:	697b      	ldr	r3, [r7, #20]
 8000fc0:	08da      	lsrs	r2, r3, #3
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	3208      	adds	r2, #8
 8000fc6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fca:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000fcc:	697b      	ldr	r3, [r7, #20]
 8000fce:	f003 0307 	and.w	r3, r3, #7
 8000fd2:	009b      	lsls	r3, r3, #2
 8000fd4:	220f      	movs	r2, #15
 8000fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fda:	43db      	mvns	r3, r3
 8000fdc:	693a      	ldr	r2, [r7, #16]
 8000fde:	4013      	ands	r3, r2
 8000fe0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000fe2:	683b      	ldr	r3, [r7, #0]
 8000fe4:	691a      	ldr	r2, [r3, #16]
 8000fe6:	697b      	ldr	r3, [r7, #20]
 8000fe8:	f003 0307 	and.w	r3, r3, #7
 8000fec:	009b      	lsls	r3, r3, #2
 8000fee:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff2:	693a      	ldr	r2, [r7, #16]
 8000ff4:	4313      	orrs	r3, r2
 8000ff6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000ff8:	697b      	ldr	r3, [r7, #20]
 8000ffa:	08da      	lsrs	r2, r3, #3
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	3208      	adds	r2, #8
 8001000:	6939      	ldr	r1, [r7, #16]
 8001002:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800100c:	697b      	ldr	r3, [r7, #20]
 800100e:	005b      	lsls	r3, r3, #1
 8001010:	2203      	movs	r2, #3
 8001012:	fa02 f303 	lsl.w	r3, r2, r3
 8001016:	43db      	mvns	r3, r3
 8001018:	693a      	ldr	r2, [r7, #16]
 800101a:	4013      	ands	r3, r2
 800101c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800101e:	683b      	ldr	r3, [r7, #0]
 8001020:	685b      	ldr	r3, [r3, #4]
 8001022:	f003 0203 	and.w	r2, r3, #3
 8001026:	697b      	ldr	r3, [r7, #20]
 8001028:	005b      	lsls	r3, r3, #1
 800102a:	fa02 f303 	lsl.w	r3, r2, r3
 800102e:	693a      	ldr	r2, [r7, #16]
 8001030:	4313      	orrs	r3, r2
 8001032:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	693a      	ldr	r2, [r7, #16]
 8001038:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	685b      	ldr	r3, [r3, #4]
 800103e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001042:	2b00      	cmp	r3, #0
 8001044:	f000 8094 	beq.w	8001170 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001048:	4b52      	ldr	r3, [pc, #328]	@ (8001194 <HAL_GPIO_Init+0x2c0>)
 800104a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800104c:	4a51      	ldr	r2, [pc, #324]	@ (8001194 <HAL_GPIO_Init+0x2c0>)
 800104e:	f043 0301 	orr.w	r3, r3, #1
 8001052:	6613      	str	r3, [r2, #96]	@ 0x60
 8001054:	4b4f      	ldr	r3, [pc, #316]	@ (8001194 <HAL_GPIO_Init+0x2c0>)
 8001056:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001058:	f003 0301 	and.w	r3, r3, #1
 800105c:	60bb      	str	r3, [r7, #8]
 800105e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001060:	4a4d      	ldr	r2, [pc, #308]	@ (8001198 <HAL_GPIO_Init+0x2c4>)
 8001062:	697b      	ldr	r3, [r7, #20]
 8001064:	089b      	lsrs	r3, r3, #2
 8001066:	3302      	adds	r3, #2
 8001068:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800106c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800106e:	697b      	ldr	r3, [r7, #20]
 8001070:	f003 0303 	and.w	r3, r3, #3
 8001074:	009b      	lsls	r3, r3, #2
 8001076:	220f      	movs	r2, #15
 8001078:	fa02 f303 	lsl.w	r3, r2, r3
 800107c:	43db      	mvns	r3, r3
 800107e:	693a      	ldr	r2, [r7, #16]
 8001080:	4013      	ands	r3, r2
 8001082:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800108a:	d00d      	beq.n	80010a8 <HAL_GPIO_Init+0x1d4>
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	4a43      	ldr	r2, [pc, #268]	@ (800119c <HAL_GPIO_Init+0x2c8>)
 8001090:	4293      	cmp	r3, r2
 8001092:	d007      	beq.n	80010a4 <HAL_GPIO_Init+0x1d0>
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	4a42      	ldr	r2, [pc, #264]	@ (80011a0 <HAL_GPIO_Init+0x2cc>)
 8001098:	4293      	cmp	r3, r2
 800109a:	d101      	bne.n	80010a0 <HAL_GPIO_Init+0x1cc>
 800109c:	2302      	movs	r3, #2
 800109e:	e004      	b.n	80010aa <HAL_GPIO_Init+0x1d6>
 80010a0:	2307      	movs	r3, #7
 80010a2:	e002      	b.n	80010aa <HAL_GPIO_Init+0x1d6>
 80010a4:	2301      	movs	r3, #1
 80010a6:	e000      	b.n	80010aa <HAL_GPIO_Init+0x1d6>
 80010a8:	2300      	movs	r3, #0
 80010aa:	697a      	ldr	r2, [r7, #20]
 80010ac:	f002 0203 	and.w	r2, r2, #3
 80010b0:	0092      	lsls	r2, r2, #2
 80010b2:	4093      	lsls	r3, r2
 80010b4:	693a      	ldr	r2, [r7, #16]
 80010b6:	4313      	orrs	r3, r2
 80010b8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80010ba:	4937      	ldr	r1, [pc, #220]	@ (8001198 <HAL_GPIO_Init+0x2c4>)
 80010bc:	697b      	ldr	r3, [r7, #20]
 80010be:	089b      	lsrs	r3, r3, #2
 80010c0:	3302      	adds	r3, #2
 80010c2:	693a      	ldr	r2, [r7, #16]
 80010c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80010c8:	4b36      	ldr	r3, [pc, #216]	@ (80011a4 <HAL_GPIO_Init+0x2d0>)
 80010ca:	689b      	ldr	r3, [r3, #8]
 80010cc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	43db      	mvns	r3, r3
 80010d2:	693a      	ldr	r2, [r7, #16]
 80010d4:	4013      	ands	r3, r2
 80010d6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	685b      	ldr	r3, [r3, #4]
 80010dc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d003      	beq.n	80010ec <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 80010e4:	693a      	ldr	r2, [r7, #16]
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	4313      	orrs	r3, r2
 80010ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80010ec:	4a2d      	ldr	r2, [pc, #180]	@ (80011a4 <HAL_GPIO_Init+0x2d0>)
 80010ee:	693b      	ldr	r3, [r7, #16]
 80010f0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80010f2:	4b2c      	ldr	r3, [pc, #176]	@ (80011a4 <HAL_GPIO_Init+0x2d0>)
 80010f4:	68db      	ldr	r3, [r3, #12]
 80010f6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	43db      	mvns	r3, r3
 80010fc:	693a      	ldr	r2, [r7, #16]
 80010fe:	4013      	ands	r3, r2
 8001100:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	685b      	ldr	r3, [r3, #4]
 8001106:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800110a:	2b00      	cmp	r3, #0
 800110c:	d003      	beq.n	8001116 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800110e:	693a      	ldr	r2, [r7, #16]
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	4313      	orrs	r3, r2
 8001114:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001116:	4a23      	ldr	r2, [pc, #140]	@ (80011a4 <HAL_GPIO_Init+0x2d0>)
 8001118:	693b      	ldr	r3, [r7, #16]
 800111a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800111c:	4b21      	ldr	r3, [pc, #132]	@ (80011a4 <HAL_GPIO_Init+0x2d0>)
 800111e:	685b      	ldr	r3, [r3, #4]
 8001120:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	43db      	mvns	r3, r3
 8001126:	693a      	ldr	r2, [r7, #16]
 8001128:	4013      	ands	r3, r2
 800112a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	685b      	ldr	r3, [r3, #4]
 8001130:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001134:	2b00      	cmp	r3, #0
 8001136:	d003      	beq.n	8001140 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8001138:	693a      	ldr	r2, [r7, #16]
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	4313      	orrs	r3, r2
 800113e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001140:	4a18      	ldr	r2, [pc, #96]	@ (80011a4 <HAL_GPIO_Init+0x2d0>)
 8001142:	693b      	ldr	r3, [r7, #16]
 8001144:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001146:	4b17      	ldr	r3, [pc, #92]	@ (80011a4 <HAL_GPIO_Init+0x2d0>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	43db      	mvns	r3, r3
 8001150:	693a      	ldr	r2, [r7, #16]
 8001152:	4013      	ands	r3, r2
 8001154:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001156:	683b      	ldr	r3, [r7, #0]
 8001158:	685b      	ldr	r3, [r3, #4]
 800115a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800115e:	2b00      	cmp	r3, #0
 8001160:	d003      	beq.n	800116a <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8001162:	693a      	ldr	r2, [r7, #16]
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	4313      	orrs	r3, r2
 8001168:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800116a:	4a0e      	ldr	r2, [pc, #56]	@ (80011a4 <HAL_GPIO_Init+0x2d0>)
 800116c:	693b      	ldr	r3, [r7, #16]
 800116e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001170:	697b      	ldr	r3, [r7, #20]
 8001172:	3301      	adds	r3, #1
 8001174:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001176:	683b      	ldr	r3, [r7, #0]
 8001178:	681a      	ldr	r2, [r3, #0]
 800117a:	697b      	ldr	r3, [r7, #20]
 800117c:	fa22 f303 	lsr.w	r3, r2, r3
 8001180:	2b00      	cmp	r3, #0
 8001182:	f47f aeaf 	bne.w	8000ee4 <HAL_GPIO_Init+0x10>
  }
}
 8001186:	bf00      	nop
 8001188:	bf00      	nop
 800118a:	371c      	adds	r7, #28
 800118c:	46bd      	mov	sp, r7
 800118e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001192:	4770      	bx	lr
 8001194:	40021000 	.word	0x40021000
 8001198:	40010000 	.word	0x40010000
 800119c:	48000400 	.word	0x48000400
 80011a0:	48000800 	.word	0x48000800
 80011a4:	40010400 	.word	0x40010400

080011a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011a8:	b480      	push	{r7}
 80011aa:	b083      	sub	sp, #12
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
 80011b0:	460b      	mov	r3, r1
 80011b2:	807b      	strh	r3, [r7, #2]
 80011b4:	4613      	mov	r3, r2
 80011b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80011b8:	787b      	ldrb	r3, [r7, #1]
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d003      	beq.n	80011c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80011be:	887a      	ldrh	r2, [r7, #2]
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80011c4:	e002      	b.n	80011cc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80011c6:	887a      	ldrh	r2, [r7, #2]
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80011cc:	bf00      	nop
 80011ce:	370c      	adds	r7, #12
 80011d0:	46bd      	mov	sp, r7
 80011d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d6:	4770      	bx	lr

080011d8 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80011d8:	b480      	push	{r7}
 80011da:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80011dc:	4b05      	ldr	r3, [pc, #20]	@ (80011f4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	4a04      	ldr	r2, [pc, #16]	@ (80011f4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80011e2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80011e6:	6013      	str	r3, [r2, #0]
}
 80011e8:	bf00      	nop
 80011ea:	46bd      	mov	sp, r7
 80011ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f0:	4770      	bx	lr
 80011f2:	bf00      	nop
 80011f4:	40007000 	.word	0x40007000

080011f8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80011f8:	b480      	push	{r7}
 80011fa:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80011fc:	4b04      	ldr	r3, [pc, #16]	@ (8001210 <HAL_PWREx_GetVoltageRange+0x18>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8001204:	4618      	mov	r0, r3
 8001206:	46bd      	mov	sp, r7
 8001208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120c:	4770      	bx	lr
 800120e:	bf00      	nop
 8001210:	40007000 	.word	0x40007000

08001214 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001214:	b480      	push	{r7}
 8001216:	b085      	sub	sp, #20
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001222:	d130      	bne.n	8001286 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001224:	4b23      	ldr	r3, [pc, #140]	@ (80012b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800122c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001230:	d038      	beq.n	80012a4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001232:	4b20      	ldr	r3, [pc, #128]	@ (80012b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800123a:	4a1e      	ldr	r2, [pc, #120]	@ (80012b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800123c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001240:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001242:	4b1d      	ldr	r3, [pc, #116]	@ (80012b8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	2232      	movs	r2, #50	@ 0x32
 8001248:	fb02 f303 	mul.w	r3, r2, r3
 800124c:	4a1b      	ldr	r2, [pc, #108]	@ (80012bc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800124e:	fba2 2303 	umull	r2, r3, r2, r3
 8001252:	0c9b      	lsrs	r3, r3, #18
 8001254:	3301      	adds	r3, #1
 8001256:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001258:	e002      	b.n	8001260 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	3b01      	subs	r3, #1
 800125e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001260:	4b14      	ldr	r3, [pc, #80]	@ (80012b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001262:	695b      	ldr	r3, [r3, #20]
 8001264:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001268:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800126c:	d102      	bne.n	8001274 <HAL_PWREx_ControlVoltageScaling+0x60>
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	2b00      	cmp	r3, #0
 8001272:	d1f2      	bne.n	800125a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001274:	4b0f      	ldr	r3, [pc, #60]	@ (80012b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001276:	695b      	ldr	r3, [r3, #20]
 8001278:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800127c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001280:	d110      	bne.n	80012a4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001282:	2303      	movs	r3, #3
 8001284:	e00f      	b.n	80012a6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001286:	4b0b      	ldr	r3, [pc, #44]	@ (80012b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800128e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001292:	d007      	beq.n	80012a4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001294:	4b07      	ldr	r3, [pc, #28]	@ (80012b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800129c:	4a05      	ldr	r2, [pc, #20]	@ (80012b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800129e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80012a2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80012a4:	2300      	movs	r3, #0
}
 80012a6:	4618      	mov	r0, r3
 80012a8:	3714      	adds	r7, #20
 80012aa:	46bd      	mov	sp, r7
 80012ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b0:	4770      	bx	lr
 80012b2:	bf00      	nop
 80012b4:	40007000 	.word	0x40007000
 80012b8:	20000000 	.word	0x20000000
 80012bc:	431bde83 	.word	0x431bde83

080012c0 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b088      	sub	sp, #32
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d102      	bne.n	80012d4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80012ce:	2301      	movs	r3, #1
 80012d0:	f000 bc02 	b.w	8001ad8 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80012d4:	4b96      	ldr	r3, [pc, #600]	@ (8001530 <HAL_RCC_OscConfig+0x270>)
 80012d6:	689b      	ldr	r3, [r3, #8]
 80012d8:	f003 030c 	and.w	r3, r3, #12
 80012dc:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80012de:	4b94      	ldr	r3, [pc, #592]	@ (8001530 <HAL_RCC_OscConfig+0x270>)
 80012e0:	68db      	ldr	r3, [r3, #12]
 80012e2:	f003 0303 	and.w	r3, r3, #3
 80012e6:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	f003 0310 	and.w	r3, r3, #16
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	f000 80e4 	beq.w	80014be <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80012f6:	69bb      	ldr	r3, [r7, #24]
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d007      	beq.n	800130c <HAL_RCC_OscConfig+0x4c>
 80012fc:	69bb      	ldr	r3, [r7, #24]
 80012fe:	2b0c      	cmp	r3, #12
 8001300:	f040 808b 	bne.w	800141a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001304:	697b      	ldr	r3, [r7, #20]
 8001306:	2b01      	cmp	r3, #1
 8001308:	f040 8087 	bne.w	800141a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800130c:	4b88      	ldr	r3, [pc, #544]	@ (8001530 <HAL_RCC_OscConfig+0x270>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	f003 0302 	and.w	r3, r3, #2
 8001314:	2b00      	cmp	r3, #0
 8001316:	d005      	beq.n	8001324 <HAL_RCC_OscConfig+0x64>
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	699b      	ldr	r3, [r3, #24]
 800131c:	2b00      	cmp	r3, #0
 800131e:	d101      	bne.n	8001324 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001320:	2301      	movs	r3, #1
 8001322:	e3d9      	b.n	8001ad8 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	6a1a      	ldr	r2, [r3, #32]
 8001328:	4b81      	ldr	r3, [pc, #516]	@ (8001530 <HAL_RCC_OscConfig+0x270>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	f003 0308 	and.w	r3, r3, #8
 8001330:	2b00      	cmp	r3, #0
 8001332:	d004      	beq.n	800133e <HAL_RCC_OscConfig+0x7e>
 8001334:	4b7e      	ldr	r3, [pc, #504]	@ (8001530 <HAL_RCC_OscConfig+0x270>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800133c:	e005      	b.n	800134a <HAL_RCC_OscConfig+0x8a>
 800133e:	4b7c      	ldr	r3, [pc, #496]	@ (8001530 <HAL_RCC_OscConfig+0x270>)
 8001340:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001344:	091b      	lsrs	r3, r3, #4
 8001346:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800134a:	4293      	cmp	r3, r2
 800134c:	d223      	bcs.n	8001396 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	6a1b      	ldr	r3, [r3, #32]
 8001352:	4618      	mov	r0, r3
 8001354:	f000 fd8c 	bl	8001e70 <RCC_SetFlashLatencyFromMSIRange>
 8001358:	4603      	mov	r3, r0
 800135a:	2b00      	cmp	r3, #0
 800135c:	d001      	beq.n	8001362 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800135e:	2301      	movs	r3, #1
 8001360:	e3ba      	b.n	8001ad8 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001362:	4b73      	ldr	r3, [pc, #460]	@ (8001530 <HAL_RCC_OscConfig+0x270>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	4a72      	ldr	r2, [pc, #456]	@ (8001530 <HAL_RCC_OscConfig+0x270>)
 8001368:	f043 0308 	orr.w	r3, r3, #8
 800136c:	6013      	str	r3, [r2, #0]
 800136e:	4b70      	ldr	r3, [pc, #448]	@ (8001530 <HAL_RCC_OscConfig+0x270>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	6a1b      	ldr	r3, [r3, #32]
 800137a:	496d      	ldr	r1, [pc, #436]	@ (8001530 <HAL_RCC_OscConfig+0x270>)
 800137c:	4313      	orrs	r3, r2
 800137e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001380:	4b6b      	ldr	r3, [pc, #428]	@ (8001530 <HAL_RCC_OscConfig+0x270>)
 8001382:	685b      	ldr	r3, [r3, #4]
 8001384:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	69db      	ldr	r3, [r3, #28]
 800138c:	021b      	lsls	r3, r3, #8
 800138e:	4968      	ldr	r1, [pc, #416]	@ (8001530 <HAL_RCC_OscConfig+0x270>)
 8001390:	4313      	orrs	r3, r2
 8001392:	604b      	str	r3, [r1, #4]
 8001394:	e025      	b.n	80013e2 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001396:	4b66      	ldr	r3, [pc, #408]	@ (8001530 <HAL_RCC_OscConfig+0x270>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	4a65      	ldr	r2, [pc, #404]	@ (8001530 <HAL_RCC_OscConfig+0x270>)
 800139c:	f043 0308 	orr.w	r3, r3, #8
 80013a0:	6013      	str	r3, [r2, #0]
 80013a2:	4b63      	ldr	r3, [pc, #396]	@ (8001530 <HAL_RCC_OscConfig+0x270>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	6a1b      	ldr	r3, [r3, #32]
 80013ae:	4960      	ldr	r1, [pc, #384]	@ (8001530 <HAL_RCC_OscConfig+0x270>)
 80013b0:	4313      	orrs	r3, r2
 80013b2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80013b4:	4b5e      	ldr	r3, [pc, #376]	@ (8001530 <HAL_RCC_OscConfig+0x270>)
 80013b6:	685b      	ldr	r3, [r3, #4]
 80013b8:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	69db      	ldr	r3, [r3, #28]
 80013c0:	021b      	lsls	r3, r3, #8
 80013c2:	495b      	ldr	r1, [pc, #364]	@ (8001530 <HAL_RCC_OscConfig+0x270>)
 80013c4:	4313      	orrs	r3, r2
 80013c6:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80013c8:	69bb      	ldr	r3, [r7, #24]
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d109      	bne.n	80013e2 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	6a1b      	ldr	r3, [r3, #32]
 80013d2:	4618      	mov	r0, r3
 80013d4:	f000 fd4c 	bl	8001e70 <RCC_SetFlashLatencyFromMSIRange>
 80013d8:	4603      	mov	r3, r0
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d001      	beq.n	80013e2 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80013de:	2301      	movs	r3, #1
 80013e0:	e37a      	b.n	8001ad8 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80013e2:	f000 fc81 	bl	8001ce8 <HAL_RCC_GetSysClockFreq>
 80013e6:	4602      	mov	r2, r0
 80013e8:	4b51      	ldr	r3, [pc, #324]	@ (8001530 <HAL_RCC_OscConfig+0x270>)
 80013ea:	689b      	ldr	r3, [r3, #8]
 80013ec:	091b      	lsrs	r3, r3, #4
 80013ee:	f003 030f 	and.w	r3, r3, #15
 80013f2:	4950      	ldr	r1, [pc, #320]	@ (8001534 <HAL_RCC_OscConfig+0x274>)
 80013f4:	5ccb      	ldrb	r3, [r1, r3]
 80013f6:	f003 031f 	and.w	r3, r3, #31
 80013fa:	fa22 f303 	lsr.w	r3, r2, r3
 80013fe:	4a4e      	ldr	r2, [pc, #312]	@ (8001538 <HAL_RCC_OscConfig+0x278>)
 8001400:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001402:	4b4e      	ldr	r3, [pc, #312]	@ (800153c <HAL_RCC_OscConfig+0x27c>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	4618      	mov	r0, r3
 8001408:	f7ff fb54 	bl	8000ab4 <HAL_InitTick>
 800140c:	4603      	mov	r3, r0
 800140e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001410:	7bfb      	ldrb	r3, [r7, #15]
 8001412:	2b00      	cmp	r3, #0
 8001414:	d052      	beq.n	80014bc <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8001416:	7bfb      	ldrb	r3, [r7, #15]
 8001418:	e35e      	b.n	8001ad8 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	699b      	ldr	r3, [r3, #24]
 800141e:	2b00      	cmp	r3, #0
 8001420:	d032      	beq.n	8001488 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001422:	4b43      	ldr	r3, [pc, #268]	@ (8001530 <HAL_RCC_OscConfig+0x270>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	4a42      	ldr	r2, [pc, #264]	@ (8001530 <HAL_RCC_OscConfig+0x270>)
 8001428:	f043 0301 	orr.w	r3, r3, #1
 800142c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800142e:	f7ff fb91 	bl	8000b54 <HAL_GetTick>
 8001432:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001434:	e008      	b.n	8001448 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001436:	f7ff fb8d 	bl	8000b54 <HAL_GetTick>
 800143a:	4602      	mov	r2, r0
 800143c:	693b      	ldr	r3, [r7, #16]
 800143e:	1ad3      	subs	r3, r2, r3
 8001440:	2b02      	cmp	r3, #2
 8001442:	d901      	bls.n	8001448 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001444:	2303      	movs	r3, #3
 8001446:	e347      	b.n	8001ad8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001448:	4b39      	ldr	r3, [pc, #228]	@ (8001530 <HAL_RCC_OscConfig+0x270>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	f003 0302 	and.w	r3, r3, #2
 8001450:	2b00      	cmp	r3, #0
 8001452:	d0f0      	beq.n	8001436 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001454:	4b36      	ldr	r3, [pc, #216]	@ (8001530 <HAL_RCC_OscConfig+0x270>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	4a35      	ldr	r2, [pc, #212]	@ (8001530 <HAL_RCC_OscConfig+0x270>)
 800145a:	f043 0308 	orr.w	r3, r3, #8
 800145e:	6013      	str	r3, [r2, #0]
 8001460:	4b33      	ldr	r3, [pc, #204]	@ (8001530 <HAL_RCC_OscConfig+0x270>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	6a1b      	ldr	r3, [r3, #32]
 800146c:	4930      	ldr	r1, [pc, #192]	@ (8001530 <HAL_RCC_OscConfig+0x270>)
 800146e:	4313      	orrs	r3, r2
 8001470:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001472:	4b2f      	ldr	r3, [pc, #188]	@ (8001530 <HAL_RCC_OscConfig+0x270>)
 8001474:	685b      	ldr	r3, [r3, #4]
 8001476:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	69db      	ldr	r3, [r3, #28]
 800147e:	021b      	lsls	r3, r3, #8
 8001480:	492b      	ldr	r1, [pc, #172]	@ (8001530 <HAL_RCC_OscConfig+0x270>)
 8001482:	4313      	orrs	r3, r2
 8001484:	604b      	str	r3, [r1, #4]
 8001486:	e01a      	b.n	80014be <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001488:	4b29      	ldr	r3, [pc, #164]	@ (8001530 <HAL_RCC_OscConfig+0x270>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	4a28      	ldr	r2, [pc, #160]	@ (8001530 <HAL_RCC_OscConfig+0x270>)
 800148e:	f023 0301 	bic.w	r3, r3, #1
 8001492:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001494:	f7ff fb5e 	bl	8000b54 <HAL_GetTick>
 8001498:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800149a:	e008      	b.n	80014ae <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800149c:	f7ff fb5a 	bl	8000b54 <HAL_GetTick>
 80014a0:	4602      	mov	r2, r0
 80014a2:	693b      	ldr	r3, [r7, #16]
 80014a4:	1ad3      	subs	r3, r2, r3
 80014a6:	2b02      	cmp	r3, #2
 80014a8:	d901      	bls.n	80014ae <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80014aa:	2303      	movs	r3, #3
 80014ac:	e314      	b.n	8001ad8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80014ae:	4b20      	ldr	r3, [pc, #128]	@ (8001530 <HAL_RCC_OscConfig+0x270>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f003 0302 	and.w	r3, r3, #2
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d1f0      	bne.n	800149c <HAL_RCC_OscConfig+0x1dc>
 80014ba:	e000      	b.n	80014be <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80014bc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f003 0301 	and.w	r3, r3, #1
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d073      	beq.n	80015b2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80014ca:	69bb      	ldr	r3, [r7, #24]
 80014cc:	2b08      	cmp	r3, #8
 80014ce:	d005      	beq.n	80014dc <HAL_RCC_OscConfig+0x21c>
 80014d0:	69bb      	ldr	r3, [r7, #24]
 80014d2:	2b0c      	cmp	r3, #12
 80014d4:	d10e      	bne.n	80014f4 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80014d6:	697b      	ldr	r3, [r7, #20]
 80014d8:	2b03      	cmp	r3, #3
 80014da:	d10b      	bne.n	80014f4 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014dc:	4b14      	ldr	r3, [pc, #80]	@ (8001530 <HAL_RCC_OscConfig+0x270>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d063      	beq.n	80015b0 <HAL_RCC_OscConfig+0x2f0>
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	685b      	ldr	r3, [r3, #4]
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d15f      	bne.n	80015b0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80014f0:	2301      	movs	r3, #1
 80014f2:	e2f1      	b.n	8001ad8 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	685b      	ldr	r3, [r3, #4]
 80014f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80014fc:	d106      	bne.n	800150c <HAL_RCC_OscConfig+0x24c>
 80014fe:	4b0c      	ldr	r3, [pc, #48]	@ (8001530 <HAL_RCC_OscConfig+0x270>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	4a0b      	ldr	r2, [pc, #44]	@ (8001530 <HAL_RCC_OscConfig+0x270>)
 8001504:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001508:	6013      	str	r3, [r2, #0]
 800150a:	e025      	b.n	8001558 <HAL_RCC_OscConfig+0x298>
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	685b      	ldr	r3, [r3, #4]
 8001510:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001514:	d114      	bne.n	8001540 <HAL_RCC_OscConfig+0x280>
 8001516:	4b06      	ldr	r3, [pc, #24]	@ (8001530 <HAL_RCC_OscConfig+0x270>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	4a05      	ldr	r2, [pc, #20]	@ (8001530 <HAL_RCC_OscConfig+0x270>)
 800151c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001520:	6013      	str	r3, [r2, #0]
 8001522:	4b03      	ldr	r3, [pc, #12]	@ (8001530 <HAL_RCC_OscConfig+0x270>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	4a02      	ldr	r2, [pc, #8]	@ (8001530 <HAL_RCC_OscConfig+0x270>)
 8001528:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800152c:	6013      	str	r3, [r2, #0]
 800152e:	e013      	b.n	8001558 <HAL_RCC_OscConfig+0x298>
 8001530:	40021000 	.word	0x40021000
 8001534:	08003c08 	.word	0x08003c08
 8001538:	20000000 	.word	0x20000000
 800153c:	20000004 	.word	0x20000004
 8001540:	4ba0      	ldr	r3, [pc, #640]	@ (80017c4 <HAL_RCC_OscConfig+0x504>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	4a9f      	ldr	r2, [pc, #636]	@ (80017c4 <HAL_RCC_OscConfig+0x504>)
 8001546:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800154a:	6013      	str	r3, [r2, #0]
 800154c:	4b9d      	ldr	r3, [pc, #628]	@ (80017c4 <HAL_RCC_OscConfig+0x504>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	4a9c      	ldr	r2, [pc, #624]	@ (80017c4 <HAL_RCC_OscConfig+0x504>)
 8001552:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001556:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	685b      	ldr	r3, [r3, #4]
 800155c:	2b00      	cmp	r3, #0
 800155e:	d013      	beq.n	8001588 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001560:	f7ff faf8 	bl	8000b54 <HAL_GetTick>
 8001564:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001566:	e008      	b.n	800157a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001568:	f7ff faf4 	bl	8000b54 <HAL_GetTick>
 800156c:	4602      	mov	r2, r0
 800156e:	693b      	ldr	r3, [r7, #16]
 8001570:	1ad3      	subs	r3, r2, r3
 8001572:	2b64      	cmp	r3, #100	@ 0x64
 8001574:	d901      	bls.n	800157a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001576:	2303      	movs	r3, #3
 8001578:	e2ae      	b.n	8001ad8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800157a:	4b92      	ldr	r3, [pc, #584]	@ (80017c4 <HAL_RCC_OscConfig+0x504>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001582:	2b00      	cmp	r3, #0
 8001584:	d0f0      	beq.n	8001568 <HAL_RCC_OscConfig+0x2a8>
 8001586:	e014      	b.n	80015b2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001588:	f7ff fae4 	bl	8000b54 <HAL_GetTick>
 800158c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800158e:	e008      	b.n	80015a2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001590:	f7ff fae0 	bl	8000b54 <HAL_GetTick>
 8001594:	4602      	mov	r2, r0
 8001596:	693b      	ldr	r3, [r7, #16]
 8001598:	1ad3      	subs	r3, r2, r3
 800159a:	2b64      	cmp	r3, #100	@ 0x64
 800159c:	d901      	bls.n	80015a2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800159e:	2303      	movs	r3, #3
 80015a0:	e29a      	b.n	8001ad8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80015a2:	4b88      	ldr	r3, [pc, #544]	@ (80017c4 <HAL_RCC_OscConfig+0x504>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d1f0      	bne.n	8001590 <HAL_RCC_OscConfig+0x2d0>
 80015ae:	e000      	b.n	80015b2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f003 0302 	and.w	r3, r3, #2
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d060      	beq.n	8001680 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80015be:	69bb      	ldr	r3, [r7, #24]
 80015c0:	2b04      	cmp	r3, #4
 80015c2:	d005      	beq.n	80015d0 <HAL_RCC_OscConfig+0x310>
 80015c4:	69bb      	ldr	r3, [r7, #24]
 80015c6:	2b0c      	cmp	r3, #12
 80015c8:	d119      	bne.n	80015fe <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80015ca:	697b      	ldr	r3, [r7, #20]
 80015cc:	2b02      	cmp	r3, #2
 80015ce:	d116      	bne.n	80015fe <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80015d0:	4b7c      	ldr	r3, [pc, #496]	@ (80017c4 <HAL_RCC_OscConfig+0x504>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d005      	beq.n	80015e8 <HAL_RCC_OscConfig+0x328>
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	68db      	ldr	r3, [r3, #12]
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d101      	bne.n	80015e8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80015e4:	2301      	movs	r3, #1
 80015e6:	e277      	b.n	8001ad8 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015e8:	4b76      	ldr	r3, [pc, #472]	@ (80017c4 <HAL_RCC_OscConfig+0x504>)
 80015ea:	685b      	ldr	r3, [r3, #4]
 80015ec:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	691b      	ldr	r3, [r3, #16]
 80015f4:	061b      	lsls	r3, r3, #24
 80015f6:	4973      	ldr	r1, [pc, #460]	@ (80017c4 <HAL_RCC_OscConfig+0x504>)
 80015f8:	4313      	orrs	r3, r2
 80015fa:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80015fc:	e040      	b.n	8001680 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	68db      	ldr	r3, [r3, #12]
 8001602:	2b00      	cmp	r3, #0
 8001604:	d023      	beq.n	800164e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001606:	4b6f      	ldr	r3, [pc, #444]	@ (80017c4 <HAL_RCC_OscConfig+0x504>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	4a6e      	ldr	r2, [pc, #440]	@ (80017c4 <HAL_RCC_OscConfig+0x504>)
 800160c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001610:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001612:	f7ff fa9f 	bl	8000b54 <HAL_GetTick>
 8001616:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001618:	e008      	b.n	800162c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800161a:	f7ff fa9b 	bl	8000b54 <HAL_GetTick>
 800161e:	4602      	mov	r2, r0
 8001620:	693b      	ldr	r3, [r7, #16]
 8001622:	1ad3      	subs	r3, r2, r3
 8001624:	2b02      	cmp	r3, #2
 8001626:	d901      	bls.n	800162c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001628:	2303      	movs	r3, #3
 800162a:	e255      	b.n	8001ad8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800162c:	4b65      	ldr	r3, [pc, #404]	@ (80017c4 <HAL_RCC_OscConfig+0x504>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001634:	2b00      	cmp	r3, #0
 8001636:	d0f0      	beq.n	800161a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001638:	4b62      	ldr	r3, [pc, #392]	@ (80017c4 <HAL_RCC_OscConfig+0x504>)
 800163a:	685b      	ldr	r3, [r3, #4]
 800163c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	691b      	ldr	r3, [r3, #16]
 8001644:	061b      	lsls	r3, r3, #24
 8001646:	495f      	ldr	r1, [pc, #380]	@ (80017c4 <HAL_RCC_OscConfig+0x504>)
 8001648:	4313      	orrs	r3, r2
 800164a:	604b      	str	r3, [r1, #4]
 800164c:	e018      	b.n	8001680 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800164e:	4b5d      	ldr	r3, [pc, #372]	@ (80017c4 <HAL_RCC_OscConfig+0x504>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	4a5c      	ldr	r2, [pc, #368]	@ (80017c4 <HAL_RCC_OscConfig+0x504>)
 8001654:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001658:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800165a:	f7ff fa7b 	bl	8000b54 <HAL_GetTick>
 800165e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001660:	e008      	b.n	8001674 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001662:	f7ff fa77 	bl	8000b54 <HAL_GetTick>
 8001666:	4602      	mov	r2, r0
 8001668:	693b      	ldr	r3, [r7, #16]
 800166a:	1ad3      	subs	r3, r2, r3
 800166c:	2b02      	cmp	r3, #2
 800166e:	d901      	bls.n	8001674 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001670:	2303      	movs	r3, #3
 8001672:	e231      	b.n	8001ad8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001674:	4b53      	ldr	r3, [pc, #332]	@ (80017c4 <HAL_RCC_OscConfig+0x504>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800167c:	2b00      	cmp	r3, #0
 800167e:	d1f0      	bne.n	8001662 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f003 0308 	and.w	r3, r3, #8
 8001688:	2b00      	cmp	r3, #0
 800168a:	d03c      	beq.n	8001706 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	695b      	ldr	r3, [r3, #20]
 8001690:	2b00      	cmp	r3, #0
 8001692:	d01c      	beq.n	80016ce <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001694:	4b4b      	ldr	r3, [pc, #300]	@ (80017c4 <HAL_RCC_OscConfig+0x504>)
 8001696:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800169a:	4a4a      	ldr	r2, [pc, #296]	@ (80017c4 <HAL_RCC_OscConfig+0x504>)
 800169c:	f043 0301 	orr.w	r3, r3, #1
 80016a0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016a4:	f7ff fa56 	bl	8000b54 <HAL_GetTick>
 80016a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80016aa:	e008      	b.n	80016be <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016ac:	f7ff fa52 	bl	8000b54 <HAL_GetTick>
 80016b0:	4602      	mov	r2, r0
 80016b2:	693b      	ldr	r3, [r7, #16]
 80016b4:	1ad3      	subs	r3, r2, r3
 80016b6:	2b02      	cmp	r3, #2
 80016b8:	d901      	bls.n	80016be <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80016ba:	2303      	movs	r3, #3
 80016bc:	e20c      	b.n	8001ad8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80016be:	4b41      	ldr	r3, [pc, #260]	@ (80017c4 <HAL_RCC_OscConfig+0x504>)
 80016c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80016c4:	f003 0302 	and.w	r3, r3, #2
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d0ef      	beq.n	80016ac <HAL_RCC_OscConfig+0x3ec>
 80016cc:	e01b      	b.n	8001706 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80016ce:	4b3d      	ldr	r3, [pc, #244]	@ (80017c4 <HAL_RCC_OscConfig+0x504>)
 80016d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80016d4:	4a3b      	ldr	r2, [pc, #236]	@ (80017c4 <HAL_RCC_OscConfig+0x504>)
 80016d6:	f023 0301 	bic.w	r3, r3, #1
 80016da:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016de:	f7ff fa39 	bl	8000b54 <HAL_GetTick>
 80016e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80016e4:	e008      	b.n	80016f8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016e6:	f7ff fa35 	bl	8000b54 <HAL_GetTick>
 80016ea:	4602      	mov	r2, r0
 80016ec:	693b      	ldr	r3, [r7, #16]
 80016ee:	1ad3      	subs	r3, r2, r3
 80016f0:	2b02      	cmp	r3, #2
 80016f2:	d901      	bls.n	80016f8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80016f4:	2303      	movs	r3, #3
 80016f6:	e1ef      	b.n	8001ad8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80016f8:	4b32      	ldr	r3, [pc, #200]	@ (80017c4 <HAL_RCC_OscConfig+0x504>)
 80016fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80016fe:	f003 0302 	and.w	r3, r3, #2
 8001702:	2b00      	cmp	r3, #0
 8001704:	d1ef      	bne.n	80016e6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f003 0304 	and.w	r3, r3, #4
 800170e:	2b00      	cmp	r3, #0
 8001710:	f000 80a6 	beq.w	8001860 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001714:	2300      	movs	r3, #0
 8001716:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001718:	4b2a      	ldr	r3, [pc, #168]	@ (80017c4 <HAL_RCC_OscConfig+0x504>)
 800171a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800171c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001720:	2b00      	cmp	r3, #0
 8001722:	d10d      	bne.n	8001740 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001724:	4b27      	ldr	r3, [pc, #156]	@ (80017c4 <HAL_RCC_OscConfig+0x504>)
 8001726:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001728:	4a26      	ldr	r2, [pc, #152]	@ (80017c4 <HAL_RCC_OscConfig+0x504>)
 800172a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800172e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001730:	4b24      	ldr	r3, [pc, #144]	@ (80017c4 <HAL_RCC_OscConfig+0x504>)
 8001732:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001734:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001738:	60bb      	str	r3, [r7, #8]
 800173a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800173c:	2301      	movs	r3, #1
 800173e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001740:	4b21      	ldr	r3, [pc, #132]	@ (80017c8 <HAL_RCC_OscConfig+0x508>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001748:	2b00      	cmp	r3, #0
 800174a:	d118      	bne.n	800177e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800174c:	4b1e      	ldr	r3, [pc, #120]	@ (80017c8 <HAL_RCC_OscConfig+0x508>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	4a1d      	ldr	r2, [pc, #116]	@ (80017c8 <HAL_RCC_OscConfig+0x508>)
 8001752:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001756:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001758:	f7ff f9fc 	bl	8000b54 <HAL_GetTick>
 800175c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800175e:	e008      	b.n	8001772 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001760:	f7ff f9f8 	bl	8000b54 <HAL_GetTick>
 8001764:	4602      	mov	r2, r0
 8001766:	693b      	ldr	r3, [r7, #16]
 8001768:	1ad3      	subs	r3, r2, r3
 800176a:	2b02      	cmp	r3, #2
 800176c:	d901      	bls.n	8001772 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800176e:	2303      	movs	r3, #3
 8001770:	e1b2      	b.n	8001ad8 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001772:	4b15      	ldr	r3, [pc, #84]	@ (80017c8 <HAL_RCC_OscConfig+0x508>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800177a:	2b00      	cmp	r3, #0
 800177c:	d0f0      	beq.n	8001760 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	689b      	ldr	r3, [r3, #8]
 8001782:	2b01      	cmp	r3, #1
 8001784:	d108      	bne.n	8001798 <HAL_RCC_OscConfig+0x4d8>
 8001786:	4b0f      	ldr	r3, [pc, #60]	@ (80017c4 <HAL_RCC_OscConfig+0x504>)
 8001788:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800178c:	4a0d      	ldr	r2, [pc, #52]	@ (80017c4 <HAL_RCC_OscConfig+0x504>)
 800178e:	f043 0301 	orr.w	r3, r3, #1
 8001792:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001796:	e029      	b.n	80017ec <HAL_RCC_OscConfig+0x52c>
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	689b      	ldr	r3, [r3, #8]
 800179c:	2b05      	cmp	r3, #5
 800179e:	d115      	bne.n	80017cc <HAL_RCC_OscConfig+0x50c>
 80017a0:	4b08      	ldr	r3, [pc, #32]	@ (80017c4 <HAL_RCC_OscConfig+0x504>)
 80017a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80017a6:	4a07      	ldr	r2, [pc, #28]	@ (80017c4 <HAL_RCC_OscConfig+0x504>)
 80017a8:	f043 0304 	orr.w	r3, r3, #4
 80017ac:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80017b0:	4b04      	ldr	r3, [pc, #16]	@ (80017c4 <HAL_RCC_OscConfig+0x504>)
 80017b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80017b6:	4a03      	ldr	r2, [pc, #12]	@ (80017c4 <HAL_RCC_OscConfig+0x504>)
 80017b8:	f043 0301 	orr.w	r3, r3, #1
 80017bc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80017c0:	e014      	b.n	80017ec <HAL_RCC_OscConfig+0x52c>
 80017c2:	bf00      	nop
 80017c4:	40021000 	.word	0x40021000
 80017c8:	40007000 	.word	0x40007000
 80017cc:	4b9a      	ldr	r3, [pc, #616]	@ (8001a38 <HAL_RCC_OscConfig+0x778>)
 80017ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80017d2:	4a99      	ldr	r2, [pc, #612]	@ (8001a38 <HAL_RCC_OscConfig+0x778>)
 80017d4:	f023 0301 	bic.w	r3, r3, #1
 80017d8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80017dc:	4b96      	ldr	r3, [pc, #600]	@ (8001a38 <HAL_RCC_OscConfig+0x778>)
 80017de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80017e2:	4a95      	ldr	r2, [pc, #596]	@ (8001a38 <HAL_RCC_OscConfig+0x778>)
 80017e4:	f023 0304 	bic.w	r3, r3, #4
 80017e8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	689b      	ldr	r3, [r3, #8]
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d016      	beq.n	8001822 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017f4:	f7ff f9ae 	bl	8000b54 <HAL_GetTick>
 80017f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80017fa:	e00a      	b.n	8001812 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017fc:	f7ff f9aa 	bl	8000b54 <HAL_GetTick>
 8001800:	4602      	mov	r2, r0
 8001802:	693b      	ldr	r3, [r7, #16]
 8001804:	1ad3      	subs	r3, r2, r3
 8001806:	f241 3288 	movw	r2, #5000	@ 0x1388
 800180a:	4293      	cmp	r3, r2
 800180c:	d901      	bls.n	8001812 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800180e:	2303      	movs	r3, #3
 8001810:	e162      	b.n	8001ad8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001812:	4b89      	ldr	r3, [pc, #548]	@ (8001a38 <HAL_RCC_OscConfig+0x778>)
 8001814:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001818:	f003 0302 	and.w	r3, r3, #2
 800181c:	2b00      	cmp	r3, #0
 800181e:	d0ed      	beq.n	80017fc <HAL_RCC_OscConfig+0x53c>
 8001820:	e015      	b.n	800184e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001822:	f7ff f997 	bl	8000b54 <HAL_GetTick>
 8001826:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001828:	e00a      	b.n	8001840 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800182a:	f7ff f993 	bl	8000b54 <HAL_GetTick>
 800182e:	4602      	mov	r2, r0
 8001830:	693b      	ldr	r3, [r7, #16]
 8001832:	1ad3      	subs	r3, r2, r3
 8001834:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001838:	4293      	cmp	r3, r2
 800183a:	d901      	bls.n	8001840 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800183c:	2303      	movs	r3, #3
 800183e:	e14b      	b.n	8001ad8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001840:	4b7d      	ldr	r3, [pc, #500]	@ (8001a38 <HAL_RCC_OscConfig+0x778>)
 8001842:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001846:	f003 0302 	and.w	r3, r3, #2
 800184a:	2b00      	cmp	r3, #0
 800184c:	d1ed      	bne.n	800182a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800184e:	7ffb      	ldrb	r3, [r7, #31]
 8001850:	2b01      	cmp	r3, #1
 8001852:	d105      	bne.n	8001860 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001854:	4b78      	ldr	r3, [pc, #480]	@ (8001a38 <HAL_RCC_OscConfig+0x778>)
 8001856:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001858:	4a77      	ldr	r2, [pc, #476]	@ (8001a38 <HAL_RCC_OscConfig+0x778>)
 800185a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800185e:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f003 0320 	and.w	r3, r3, #32
 8001868:	2b00      	cmp	r3, #0
 800186a:	d03c      	beq.n	80018e6 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001870:	2b00      	cmp	r3, #0
 8001872:	d01c      	beq.n	80018ae <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001874:	4b70      	ldr	r3, [pc, #448]	@ (8001a38 <HAL_RCC_OscConfig+0x778>)
 8001876:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800187a:	4a6f      	ldr	r2, [pc, #444]	@ (8001a38 <HAL_RCC_OscConfig+0x778>)
 800187c:	f043 0301 	orr.w	r3, r3, #1
 8001880:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001884:	f7ff f966 	bl	8000b54 <HAL_GetTick>
 8001888:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800188a:	e008      	b.n	800189e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800188c:	f7ff f962 	bl	8000b54 <HAL_GetTick>
 8001890:	4602      	mov	r2, r0
 8001892:	693b      	ldr	r3, [r7, #16]
 8001894:	1ad3      	subs	r3, r2, r3
 8001896:	2b02      	cmp	r3, #2
 8001898:	d901      	bls.n	800189e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800189a:	2303      	movs	r3, #3
 800189c:	e11c      	b.n	8001ad8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800189e:	4b66      	ldr	r3, [pc, #408]	@ (8001a38 <HAL_RCC_OscConfig+0x778>)
 80018a0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80018a4:	f003 0302 	and.w	r3, r3, #2
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d0ef      	beq.n	800188c <HAL_RCC_OscConfig+0x5cc>
 80018ac:	e01b      	b.n	80018e6 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80018ae:	4b62      	ldr	r3, [pc, #392]	@ (8001a38 <HAL_RCC_OscConfig+0x778>)
 80018b0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80018b4:	4a60      	ldr	r2, [pc, #384]	@ (8001a38 <HAL_RCC_OscConfig+0x778>)
 80018b6:	f023 0301 	bic.w	r3, r3, #1
 80018ba:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018be:	f7ff f949 	bl	8000b54 <HAL_GetTick>
 80018c2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80018c4:	e008      	b.n	80018d8 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80018c6:	f7ff f945 	bl	8000b54 <HAL_GetTick>
 80018ca:	4602      	mov	r2, r0
 80018cc:	693b      	ldr	r3, [r7, #16]
 80018ce:	1ad3      	subs	r3, r2, r3
 80018d0:	2b02      	cmp	r3, #2
 80018d2:	d901      	bls.n	80018d8 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80018d4:	2303      	movs	r3, #3
 80018d6:	e0ff      	b.n	8001ad8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80018d8:	4b57      	ldr	r3, [pc, #348]	@ (8001a38 <HAL_RCC_OscConfig+0x778>)
 80018da:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80018de:	f003 0302 	and.w	r3, r3, #2
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d1ef      	bne.n	80018c6 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	f000 80f3 	beq.w	8001ad6 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018f4:	2b02      	cmp	r3, #2
 80018f6:	f040 80c9 	bne.w	8001a8c <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80018fa:	4b4f      	ldr	r3, [pc, #316]	@ (8001a38 <HAL_RCC_OscConfig+0x778>)
 80018fc:	68db      	ldr	r3, [r3, #12]
 80018fe:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001900:	697b      	ldr	r3, [r7, #20]
 8001902:	f003 0203 	and.w	r2, r3, #3
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800190a:	429a      	cmp	r2, r3
 800190c:	d12c      	bne.n	8001968 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800190e:	697b      	ldr	r3, [r7, #20]
 8001910:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001918:	3b01      	subs	r3, #1
 800191a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800191c:	429a      	cmp	r2, r3
 800191e:	d123      	bne.n	8001968 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001920:	697b      	ldr	r3, [r7, #20]
 8001922:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800192a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800192c:	429a      	cmp	r2, r3
 800192e:	d11b      	bne.n	8001968 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001930:	697b      	ldr	r3, [r7, #20]
 8001932:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800193a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800193c:	429a      	cmp	r2, r3
 800193e:	d113      	bne.n	8001968 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001940:	697b      	ldr	r3, [r7, #20]
 8001942:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800194a:	085b      	lsrs	r3, r3, #1
 800194c:	3b01      	subs	r3, #1
 800194e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001950:	429a      	cmp	r2, r3
 8001952:	d109      	bne.n	8001968 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001954:	697b      	ldr	r3, [r7, #20]
 8001956:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800195e:	085b      	lsrs	r3, r3, #1
 8001960:	3b01      	subs	r3, #1
 8001962:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001964:	429a      	cmp	r2, r3
 8001966:	d06b      	beq.n	8001a40 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001968:	69bb      	ldr	r3, [r7, #24]
 800196a:	2b0c      	cmp	r3, #12
 800196c:	d062      	beq.n	8001a34 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800196e:	4b32      	ldr	r3, [pc, #200]	@ (8001a38 <HAL_RCC_OscConfig+0x778>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001976:	2b00      	cmp	r3, #0
 8001978:	d001      	beq.n	800197e <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 800197a:	2301      	movs	r3, #1
 800197c:	e0ac      	b.n	8001ad8 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800197e:	4b2e      	ldr	r3, [pc, #184]	@ (8001a38 <HAL_RCC_OscConfig+0x778>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	4a2d      	ldr	r2, [pc, #180]	@ (8001a38 <HAL_RCC_OscConfig+0x778>)
 8001984:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001988:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800198a:	f7ff f8e3 	bl	8000b54 <HAL_GetTick>
 800198e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001990:	e008      	b.n	80019a4 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001992:	f7ff f8df 	bl	8000b54 <HAL_GetTick>
 8001996:	4602      	mov	r2, r0
 8001998:	693b      	ldr	r3, [r7, #16]
 800199a:	1ad3      	subs	r3, r2, r3
 800199c:	2b02      	cmp	r3, #2
 800199e:	d901      	bls.n	80019a4 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80019a0:	2303      	movs	r3, #3
 80019a2:	e099      	b.n	8001ad8 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80019a4:	4b24      	ldr	r3, [pc, #144]	@ (8001a38 <HAL_RCC_OscConfig+0x778>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d1f0      	bne.n	8001992 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80019b0:	4b21      	ldr	r3, [pc, #132]	@ (8001a38 <HAL_RCC_OscConfig+0x778>)
 80019b2:	68da      	ldr	r2, [r3, #12]
 80019b4:	4b21      	ldr	r3, [pc, #132]	@ (8001a3c <HAL_RCC_OscConfig+0x77c>)
 80019b6:	4013      	ands	r3, r2
 80019b8:	687a      	ldr	r2, [r7, #4]
 80019ba:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80019bc:	687a      	ldr	r2, [r7, #4]
 80019be:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80019c0:	3a01      	subs	r2, #1
 80019c2:	0112      	lsls	r2, r2, #4
 80019c4:	4311      	orrs	r1, r2
 80019c6:	687a      	ldr	r2, [r7, #4]
 80019c8:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80019ca:	0212      	lsls	r2, r2, #8
 80019cc:	4311      	orrs	r1, r2
 80019ce:	687a      	ldr	r2, [r7, #4]
 80019d0:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80019d2:	0852      	lsrs	r2, r2, #1
 80019d4:	3a01      	subs	r2, #1
 80019d6:	0552      	lsls	r2, r2, #21
 80019d8:	4311      	orrs	r1, r2
 80019da:	687a      	ldr	r2, [r7, #4]
 80019dc:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80019de:	0852      	lsrs	r2, r2, #1
 80019e0:	3a01      	subs	r2, #1
 80019e2:	0652      	lsls	r2, r2, #25
 80019e4:	4311      	orrs	r1, r2
 80019e6:	687a      	ldr	r2, [r7, #4]
 80019e8:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80019ea:	06d2      	lsls	r2, r2, #27
 80019ec:	430a      	orrs	r2, r1
 80019ee:	4912      	ldr	r1, [pc, #72]	@ (8001a38 <HAL_RCC_OscConfig+0x778>)
 80019f0:	4313      	orrs	r3, r2
 80019f2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80019f4:	4b10      	ldr	r3, [pc, #64]	@ (8001a38 <HAL_RCC_OscConfig+0x778>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	4a0f      	ldr	r2, [pc, #60]	@ (8001a38 <HAL_RCC_OscConfig+0x778>)
 80019fa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80019fe:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001a00:	4b0d      	ldr	r3, [pc, #52]	@ (8001a38 <HAL_RCC_OscConfig+0x778>)
 8001a02:	68db      	ldr	r3, [r3, #12]
 8001a04:	4a0c      	ldr	r2, [pc, #48]	@ (8001a38 <HAL_RCC_OscConfig+0x778>)
 8001a06:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001a0a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001a0c:	f7ff f8a2 	bl	8000b54 <HAL_GetTick>
 8001a10:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a12:	e008      	b.n	8001a26 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a14:	f7ff f89e 	bl	8000b54 <HAL_GetTick>
 8001a18:	4602      	mov	r2, r0
 8001a1a:	693b      	ldr	r3, [r7, #16]
 8001a1c:	1ad3      	subs	r3, r2, r3
 8001a1e:	2b02      	cmp	r3, #2
 8001a20:	d901      	bls.n	8001a26 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8001a22:	2303      	movs	r3, #3
 8001a24:	e058      	b.n	8001ad8 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a26:	4b04      	ldr	r3, [pc, #16]	@ (8001a38 <HAL_RCC_OscConfig+0x778>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d0f0      	beq.n	8001a14 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001a32:	e050      	b.n	8001ad6 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001a34:	2301      	movs	r3, #1
 8001a36:	e04f      	b.n	8001ad8 <HAL_RCC_OscConfig+0x818>
 8001a38:	40021000 	.word	0x40021000
 8001a3c:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a40:	4b27      	ldr	r3, [pc, #156]	@ (8001ae0 <HAL_RCC_OscConfig+0x820>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d144      	bne.n	8001ad6 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001a4c:	4b24      	ldr	r3, [pc, #144]	@ (8001ae0 <HAL_RCC_OscConfig+0x820>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	4a23      	ldr	r2, [pc, #140]	@ (8001ae0 <HAL_RCC_OscConfig+0x820>)
 8001a52:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001a56:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001a58:	4b21      	ldr	r3, [pc, #132]	@ (8001ae0 <HAL_RCC_OscConfig+0x820>)
 8001a5a:	68db      	ldr	r3, [r3, #12]
 8001a5c:	4a20      	ldr	r2, [pc, #128]	@ (8001ae0 <HAL_RCC_OscConfig+0x820>)
 8001a5e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001a62:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001a64:	f7ff f876 	bl	8000b54 <HAL_GetTick>
 8001a68:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a6a:	e008      	b.n	8001a7e <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a6c:	f7ff f872 	bl	8000b54 <HAL_GetTick>
 8001a70:	4602      	mov	r2, r0
 8001a72:	693b      	ldr	r3, [r7, #16]
 8001a74:	1ad3      	subs	r3, r2, r3
 8001a76:	2b02      	cmp	r3, #2
 8001a78:	d901      	bls.n	8001a7e <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8001a7a:	2303      	movs	r3, #3
 8001a7c:	e02c      	b.n	8001ad8 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a7e:	4b18      	ldr	r3, [pc, #96]	@ (8001ae0 <HAL_RCC_OscConfig+0x820>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d0f0      	beq.n	8001a6c <HAL_RCC_OscConfig+0x7ac>
 8001a8a:	e024      	b.n	8001ad6 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001a8c:	69bb      	ldr	r3, [r7, #24]
 8001a8e:	2b0c      	cmp	r3, #12
 8001a90:	d01f      	beq.n	8001ad2 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a92:	4b13      	ldr	r3, [pc, #76]	@ (8001ae0 <HAL_RCC_OscConfig+0x820>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	4a12      	ldr	r2, [pc, #72]	@ (8001ae0 <HAL_RCC_OscConfig+0x820>)
 8001a98:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001a9c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a9e:	f7ff f859 	bl	8000b54 <HAL_GetTick>
 8001aa2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001aa4:	e008      	b.n	8001ab8 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001aa6:	f7ff f855 	bl	8000b54 <HAL_GetTick>
 8001aaa:	4602      	mov	r2, r0
 8001aac:	693b      	ldr	r3, [r7, #16]
 8001aae:	1ad3      	subs	r3, r2, r3
 8001ab0:	2b02      	cmp	r3, #2
 8001ab2:	d901      	bls.n	8001ab8 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8001ab4:	2303      	movs	r3, #3
 8001ab6:	e00f      	b.n	8001ad8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ab8:	4b09      	ldr	r3, [pc, #36]	@ (8001ae0 <HAL_RCC_OscConfig+0x820>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d1f0      	bne.n	8001aa6 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8001ac4:	4b06      	ldr	r3, [pc, #24]	@ (8001ae0 <HAL_RCC_OscConfig+0x820>)
 8001ac6:	68da      	ldr	r2, [r3, #12]
 8001ac8:	4905      	ldr	r1, [pc, #20]	@ (8001ae0 <HAL_RCC_OscConfig+0x820>)
 8001aca:	4b06      	ldr	r3, [pc, #24]	@ (8001ae4 <HAL_RCC_OscConfig+0x824>)
 8001acc:	4013      	ands	r3, r2
 8001ace:	60cb      	str	r3, [r1, #12]
 8001ad0:	e001      	b.n	8001ad6 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	e000      	b.n	8001ad8 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8001ad6:	2300      	movs	r3, #0
}
 8001ad8:	4618      	mov	r0, r3
 8001ada:	3720      	adds	r7, #32
 8001adc:	46bd      	mov	sp, r7
 8001ade:	bd80      	pop	{r7, pc}
 8001ae0:	40021000 	.word	0x40021000
 8001ae4:	feeefffc 	.word	0xfeeefffc

08001ae8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b084      	sub	sp, #16
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
 8001af0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d101      	bne.n	8001afc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001af8:	2301      	movs	r3, #1
 8001afa:	e0e7      	b.n	8001ccc <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001afc:	4b75      	ldr	r3, [pc, #468]	@ (8001cd4 <HAL_RCC_ClockConfig+0x1ec>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f003 0307 	and.w	r3, r3, #7
 8001b04:	683a      	ldr	r2, [r7, #0]
 8001b06:	429a      	cmp	r2, r3
 8001b08:	d910      	bls.n	8001b2c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b0a:	4b72      	ldr	r3, [pc, #456]	@ (8001cd4 <HAL_RCC_ClockConfig+0x1ec>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f023 0207 	bic.w	r2, r3, #7
 8001b12:	4970      	ldr	r1, [pc, #448]	@ (8001cd4 <HAL_RCC_ClockConfig+0x1ec>)
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	4313      	orrs	r3, r2
 8001b18:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b1a:	4b6e      	ldr	r3, [pc, #440]	@ (8001cd4 <HAL_RCC_ClockConfig+0x1ec>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f003 0307 	and.w	r3, r3, #7
 8001b22:	683a      	ldr	r2, [r7, #0]
 8001b24:	429a      	cmp	r2, r3
 8001b26:	d001      	beq.n	8001b2c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001b28:	2301      	movs	r3, #1
 8001b2a:	e0cf      	b.n	8001ccc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f003 0302 	and.w	r3, r3, #2
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d010      	beq.n	8001b5a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	689a      	ldr	r2, [r3, #8]
 8001b3c:	4b66      	ldr	r3, [pc, #408]	@ (8001cd8 <HAL_RCC_ClockConfig+0x1f0>)
 8001b3e:	689b      	ldr	r3, [r3, #8]
 8001b40:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001b44:	429a      	cmp	r2, r3
 8001b46:	d908      	bls.n	8001b5a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b48:	4b63      	ldr	r3, [pc, #396]	@ (8001cd8 <HAL_RCC_ClockConfig+0x1f0>)
 8001b4a:	689b      	ldr	r3, [r3, #8]
 8001b4c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	689b      	ldr	r3, [r3, #8]
 8001b54:	4960      	ldr	r1, [pc, #384]	@ (8001cd8 <HAL_RCC_ClockConfig+0x1f0>)
 8001b56:	4313      	orrs	r3, r2
 8001b58:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f003 0301 	and.w	r3, r3, #1
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d04c      	beq.n	8001c00 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	2b03      	cmp	r3, #3
 8001b6c:	d107      	bne.n	8001b7e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b6e:	4b5a      	ldr	r3, [pc, #360]	@ (8001cd8 <HAL_RCC_ClockConfig+0x1f0>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d121      	bne.n	8001bbe <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	e0a6      	b.n	8001ccc <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	2b02      	cmp	r3, #2
 8001b84:	d107      	bne.n	8001b96 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b86:	4b54      	ldr	r3, [pc, #336]	@ (8001cd8 <HAL_RCC_ClockConfig+0x1f0>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d115      	bne.n	8001bbe <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001b92:	2301      	movs	r3, #1
 8001b94:	e09a      	b.n	8001ccc <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	685b      	ldr	r3, [r3, #4]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d107      	bne.n	8001bae <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001b9e:	4b4e      	ldr	r3, [pc, #312]	@ (8001cd8 <HAL_RCC_ClockConfig+0x1f0>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f003 0302 	and.w	r3, r3, #2
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d109      	bne.n	8001bbe <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001baa:	2301      	movs	r3, #1
 8001bac:	e08e      	b.n	8001ccc <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001bae:	4b4a      	ldr	r3, [pc, #296]	@ (8001cd8 <HAL_RCC_ClockConfig+0x1f0>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d101      	bne.n	8001bbe <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001bba:	2301      	movs	r3, #1
 8001bbc:	e086      	b.n	8001ccc <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001bbe:	4b46      	ldr	r3, [pc, #280]	@ (8001cd8 <HAL_RCC_ClockConfig+0x1f0>)
 8001bc0:	689b      	ldr	r3, [r3, #8]
 8001bc2:	f023 0203 	bic.w	r2, r3, #3
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	685b      	ldr	r3, [r3, #4]
 8001bca:	4943      	ldr	r1, [pc, #268]	@ (8001cd8 <HAL_RCC_ClockConfig+0x1f0>)
 8001bcc:	4313      	orrs	r3, r2
 8001bce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001bd0:	f7fe ffc0 	bl	8000b54 <HAL_GetTick>
 8001bd4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bd6:	e00a      	b.n	8001bee <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bd8:	f7fe ffbc 	bl	8000b54 <HAL_GetTick>
 8001bdc:	4602      	mov	r2, r0
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	1ad3      	subs	r3, r2, r3
 8001be2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001be6:	4293      	cmp	r3, r2
 8001be8:	d901      	bls.n	8001bee <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001bea:	2303      	movs	r3, #3
 8001bec:	e06e      	b.n	8001ccc <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bee:	4b3a      	ldr	r3, [pc, #232]	@ (8001cd8 <HAL_RCC_ClockConfig+0x1f0>)
 8001bf0:	689b      	ldr	r3, [r3, #8]
 8001bf2:	f003 020c 	and.w	r2, r3, #12
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	685b      	ldr	r3, [r3, #4]
 8001bfa:	009b      	lsls	r3, r3, #2
 8001bfc:	429a      	cmp	r2, r3
 8001bfe:	d1eb      	bne.n	8001bd8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f003 0302 	and.w	r3, r3, #2
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d010      	beq.n	8001c2e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	689a      	ldr	r2, [r3, #8]
 8001c10:	4b31      	ldr	r3, [pc, #196]	@ (8001cd8 <HAL_RCC_ClockConfig+0x1f0>)
 8001c12:	689b      	ldr	r3, [r3, #8]
 8001c14:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001c18:	429a      	cmp	r2, r3
 8001c1a:	d208      	bcs.n	8001c2e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c1c:	4b2e      	ldr	r3, [pc, #184]	@ (8001cd8 <HAL_RCC_ClockConfig+0x1f0>)
 8001c1e:	689b      	ldr	r3, [r3, #8]
 8001c20:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	689b      	ldr	r3, [r3, #8]
 8001c28:	492b      	ldr	r1, [pc, #172]	@ (8001cd8 <HAL_RCC_ClockConfig+0x1f0>)
 8001c2a:	4313      	orrs	r3, r2
 8001c2c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001c2e:	4b29      	ldr	r3, [pc, #164]	@ (8001cd4 <HAL_RCC_ClockConfig+0x1ec>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f003 0307 	and.w	r3, r3, #7
 8001c36:	683a      	ldr	r2, [r7, #0]
 8001c38:	429a      	cmp	r2, r3
 8001c3a:	d210      	bcs.n	8001c5e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c3c:	4b25      	ldr	r3, [pc, #148]	@ (8001cd4 <HAL_RCC_ClockConfig+0x1ec>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f023 0207 	bic.w	r2, r3, #7
 8001c44:	4923      	ldr	r1, [pc, #140]	@ (8001cd4 <HAL_RCC_ClockConfig+0x1ec>)
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	4313      	orrs	r3, r2
 8001c4a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c4c:	4b21      	ldr	r3, [pc, #132]	@ (8001cd4 <HAL_RCC_ClockConfig+0x1ec>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f003 0307 	and.w	r3, r3, #7
 8001c54:	683a      	ldr	r2, [r7, #0]
 8001c56:	429a      	cmp	r2, r3
 8001c58:	d001      	beq.n	8001c5e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	e036      	b.n	8001ccc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f003 0304 	and.w	r3, r3, #4
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d008      	beq.n	8001c7c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c6a:	4b1b      	ldr	r3, [pc, #108]	@ (8001cd8 <HAL_RCC_ClockConfig+0x1f0>)
 8001c6c:	689b      	ldr	r3, [r3, #8]
 8001c6e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	68db      	ldr	r3, [r3, #12]
 8001c76:	4918      	ldr	r1, [pc, #96]	@ (8001cd8 <HAL_RCC_ClockConfig+0x1f0>)
 8001c78:	4313      	orrs	r3, r2
 8001c7a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f003 0308 	and.w	r3, r3, #8
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d009      	beq.n	8001c9c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001c88:	4b13      	ldr	r3, [pc, #76]	@ (8001cd8 <HAL_RCC_ClockConfig+0x1f0>)
 8001c8a:	689b      	ldr	r3, [r3, #8]
 8001c8c:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	691b      	ldr	r3, [r3, #16]
 8001c94:	00db      	lsls	r3, r3, #3
 8001c96:	4910      	ldr	r1, [pc, #64]	@ (8001cd8 <HAL_RCC_ClockConfig+0x1f0>)
 8001c98:	4313      	orrs	r3, r2
 8001c9a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001c9c:	f000 f824 	bl	8001ce8 <HAL_RCC_GetSysClockFreq>
 8001ca0:	4602      	mov	r2, r0
 8001ca2:	4b0d      	ldr	r3, [pc, #52]	@ (8001cd8 <HAL_RCC_ClockConfig+0x1f0>)
 8001ca4:	689b      	ldr	r3, [r3, #8]
 8001ca6:	091b      	lsrs	r3, r3, #4
 8001ca8:	f003 030f 	and.w	r3, r3, #15
 8001cac:	490b      	ldr	r1, [pc, #44]	@ (8001cdc <HAL_RCC_ClockConfig+0x1f4>)
 8001cae:	5ccb      	ldrb	r3, [r1, r3]
 8001cb0:	f003 031f 	and.w	r3, r3, #31
 8001cb4:	fa22 f303 	lsr.w	r3, r2, r3
 8001cb8:	4a09      	ldr	r2, [pc, #36]	@ (8001ce0 <HAL_RCC_ClockConfig+0x1f8>)
 8001cba:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001cbc:	4b09      	ldr	r3, [pc, #36]	@ (8001ce4 <HAL_RCC_ClockConfig+0x1fc>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	f7fe fef7 	bl	8000ab4 <HAL_InitTick>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	72fb      	strb	r3, [r7, #11]

  return status;
 8001cca:	7afb      	ldrb	r3, [r7, #11]
}
 8001ccc:	4618      	mov	r0, r3
 8001cce:	3710      	adds	r7, #16
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	bd80      	pop	{r7, pc}
 8001cd4:	40022000 	.word	0x40022000
 8001cd8:	40021000 	.word	0x40021000
 8001cdc:	08003c08 	.word	0x08003c08
 8001ce0:	20000000 	.word	0x20000000
 8001ce4:	20000004 	.word	0x20000004

08001ce8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	b089      	sub	sp, #36	@ 0x24
 8001cec:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	61fb      	str	r3, [r7, #28]
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001cf6:	4b3e      	ldr	r3, [pc, #248]	@ (8001df0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001cf8:	689b      	ldr	r3, [r3, #8]
 8001cfa:	f003 030c 	and.w	r3, r3, #12
 8001cfe:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001d00:	4b3b      	ldr	r3, [pc, #236]	@ (8001df0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d02:	68db      	ldr	r3, [r3, #12]
 8001d04:	f003 0303 	and.w	r3, r3, #3
 8001d08:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001d0a:	693b      	ldr	r3, [r7, #16]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d005      	beq.n	8001d1c <HAL_RCC_GetSysClockFreq+0x34>
 8001d10:	693b      	ldr	r3, [r7, #16]
 8001d12:	2b0c      	cmp	r3, #12
 8001d14:	d121      	bne.n	8001d5a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	2b01      	cmp	r3, #1
 8001d1a:	d11e      	bne.n	8001d5a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001d1c:	4b34      	ldr	r3, [pc, #208]	@ (8001df0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f003 0308 	and.w	r3, r3, #8
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d107      	bne.n	8001d38 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001d28:	4b31      	ldr	r3, [pc, #196]	@ (8001df0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001d2e:	0a1b      	lsrs	r3, r3, #8
 8001d30:	f003 030f 	and.w	r3, r3, #15
 8001d34:	61fb      	str	r3, [r7, #28]
 8001d36:	e005      	b.n	8001d44 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001d38:	4b2d      	ldr	r3, [pc, #180]	@ (8001df0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	091b      	lsrs	r3, r3, #4
 8001d3e:	f003 030f 	and.w	r3, r3, #15
 8001d42:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001d44:	4a2b      	ldr	r2, [pc, #172]	@ (8001df4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001d46:	69fb      	ldr	r3, [r7, #28]
 8001d48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d4c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001d4e:	693b      	ldr	r3, [r7, #16]
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d10d      	bne.n	8001d70 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001d54:	69fb      	ldr	r3, [r7, #28]
 8001d56:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001d58:	e00a      	b.n	8001d70 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001d5a:	693b      	ldr	r3, [r7, #16]
 8001d5c:	2b04      	cmp	r3, #4
 8001d5e:	d102      	bne.n	8001d66 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001d60:	4b25      	ldr	r3, [pc, #148]	@ (8001df8 <HAL_RCC_GetSysClockFreq+0x110>)
 8001d62:	61bb      	str	r3, [r7, #24]
 8001d64:	e004      	b.n	8001d70 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001d66:	693b      	ldr	r3, [r7, #16]
 8001d68:	2b08      	cmp	r3, #8
 8001d6a:	d101      	bne.n	8001d70 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001d6c:	4b23      	ldr	r3, [pc, #140]	@ (8001dfc <HAL_RCC_GetSysClockFreq+0x114>)
 8001d6e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001d70:	693b      	ldr	r3, [r7, #16]
 8001d72:	2b0c      	cmp	r3, #12
 8001d74:	d134      	bne.n	8001de0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001d76:	4b1e      	ldr	r3, [pc, #120]	@ (8001df0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d78:	68db      	ldr	r3, [r3, #12]
 8001d7a:	f003 0303 	and.w	r3, r3, #3
 8001d7e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001d80:	68bb      	ldr	r3, [r7, #8]
 8001d82:	2b02      	cmp	r3, #2
 8001d84:	d003      	beq.n	8001d8e <HAL_RCC_GetSysClockFreq+0xa6>
 8001d86:	68bb      	ldr	r3, [r7, #8]
 8001d88:	2b03      	cmp	r3, #3
 8001d8a:	d003      	beq.n	8001d94 <HAL_RCC_GetSysClockFreq+0xac>
 8001d8c:	e005      	b.n	8001d9a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001d8e:	4b1a      	ldr	r3, [pc, #104]	@ (8001df8 <HAL_RCC_GetSysClockFreq+0x110>)
 8001d90:	617b      	str	r3, [r7, #20]
      break;
 8001d92:	e005      	b.n	8001da0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001d94:	4b19      	ldr	r3, [pc, #100]	@ (8001dfc <HAL_RCC_GetSysClockFreq+0x114>)
 8001d96:	617b      	str	r3, [r7, #20]
      break;
 8001d98:	e002      	b.n	8001da0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001d9a:	69fb      	ldr	r3, [r7, #28]
 8001d9c:	617b      	str	r3, [r7, #20]
      break;
 8001d9e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001da0:	4b13      	ldr	r3, [pc, #76]	@ (8001df0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001da2:	68db      	ldr	r3, [r3, #12]
 8001da4:	091b      	lsrs	r3, r3, #4
 8001da6:	f003 0307 	and.w	r3, r3, #7
 8001daa:	3301      	adds	r3, #1
 8001dac:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001dae:	4b10      	ldr	r3, [pc, #64]	@ (8001df0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001db0:	68db      	ldr	r3, [r3, #12]
 8001db2:	0a1b      	lsrs	r3, r3, #8
 8001db4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001db8:	697a      	ldr	r2, [r7, #20]
 8001dba:	fb03 f202 	mul.w	r2, r3, r2
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dc4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001dc6:	4b0a      	ldr	r3, [pc, #40]	@ (8001df0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001dc8:	68db      	ldr	r3, [r3, #12]
 8001dca:	0e5b      	lsrs	r3, r3, #25
 8001dcc:	f003 0303 	and.w	r3, r3, #3
 8001dd0:	3301      	adds	r3, #1
 8001dd2:	005b      	lsls	r3, r3, #1
 8001dd4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001dd6:	697a      	ldr	r2, [r7, #20]
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dde:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001de0:	69bb      	ldr	r3, [r7, #24]
}
 8001de2:	4618      	mov	r0, r3
 8001de4:	3724      	adds	r7, #36	@ 0x24
 8001de6:	46bd      	mov	sp, r7
 8001de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dec:	4770      	bx	lr
 8001dee:	bf00      	nop
 8001df0:	40021000 	.word	0x40021000
 8001df4:	08003c20 	.word	0x08003c20
 8001df8:	00f42400 	.word	0x00f42400
 8001dfc:	007a1200 	.word	0x007a1200

08001e00 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e00:	b480      	push	{r7}
 8001e02:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e04:	4b03      	ldr	r3, [pc, #12]	@ (8001e14 <HAL_RCC_GetHCLKFreq+0x14>)
 8001e06:	681b      	ldr	r3, [r3, #0]
}
 8001e08:	4618      	mov	r0, r3
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e10:	4770      	bx	lr
 8001e12:	bf00      	nop
 8001e14:	20000000 	.word	0x20000000

08001e18 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001e1c:	f7ff fff0 	bl	8001e00 <HAL_RCC_GetHCLKFreq>
 8001e20:	4602      	mov	r2, r0
 8001e22:	4b06      	ldr	r3, [pc, #24]	@ (8001e3c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e24:	689b      	ldr	r3, [r3, #8]
 8001e26:	0a1b      	lsrs	r3, r3, #8
 8001e28:	f003 0307 	and.w	r3, r3, #7
 8001e2c:	4904      	ldr	r1, [pc, #16]	@ (8001e40 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001e2e:	5ccb      	ldrb	r3, [r1, r3]
 8001e30:	f003 031f 	and.w	r3, r3, #31
 8001e34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e38:	4618      	mov	r0, r3
 8001e3a:	bd80      	pop	{r7, pc}
 8001e3c:	40021000 	.word	0x40021000
 8001e40:	08003c18 	.word	0x08003c18

08001e44 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001e48:	f7ff ffda 	bl	8001e00 <HAL_RCC_GetHCLKFreq>
 8001e4c:	4602      	mov	r2, r0
 8001e4e:	4b06      	ldr	r3, [pc, #24]	@ (8001e68 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001e50:	689b      	ldr	r3, [r3, #8]
 8001e52:	0adb      	lsrs	r3, r3, #11
 8001e54:	f003 0307 	and.w	r3, r3, #7
 8001e58:	4904      	ldr	r1, [pc, #16]	@ (8001e6c <HAL_RCC_GetPCLK2Freq+0x28>)
 8001e5a:	5ccb      	ldrb	r3, [r1, r3]
 8001e5c:	f003 031f 	and.w	r3, r3, #31
 8001e60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e64:	4618      	mov	r0, r3
 8001e66:	bd80      	pop	{r7, pc}
 8001e68:	40021000 	.word	0x40021000
 8001e6c:	08003c18 	.word	0x08003c18

08001e70 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b086      	sub	sp, #24
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001e78:	2300      	movs	r3, #0
 8001e7a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001e7c:	4b2a      	ldr	r3, [pc, #168]	@ (8001f28 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e80:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d003      	beq.n	8001e90 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001e88:	f7ff f9b6 	bl	80011f8 <HAL_PWREx_GetVoltageRange>
 8001e8c:	6178      	str	r0, [r7, #20]
 8001e8e:	e014      	b.n	8001eba <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001e90:	4b25      	ldr	r3, [pc, #148]	@ (8001f28 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e92:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e94:	4a24      	ldr	r2, [pc, #144]	@ (8001f28 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e96:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e9a:	6593      	str	r3, [r2, #88]	@ 0x58
 8001e9c:	4b22      	ldr	r3, [pc, #136]	@ (8001f28 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ea0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ea4:	60fb      	str	r3, [r7, #12]
 8001ea6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001ea8:	f7ff f9a6 	bl	80011f8 <HAL_PWREx_GetVoltageRange>
 8001eac:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001eae:	4b1e      	ldr	r3, [pc, #120]	@ (8001f28 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001eb0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001eb2:	4a1d      	ldr	r2, [pc, #116]	@ (8001f28 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001eb4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001eb8:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001eba:	697b      	ldr	r3, [r7, #20]
 8001ebc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001ec0:	d10b      	bne.n	8001eda <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	2b80      	cmp	r3, #128	@ 0x80
 8001ec6:	d919      	bls.n	8001efc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	2ba0      	cmp	r3, #160	@ 0xa0
 8001ecc:	d902      	bls.n	8001ed4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001ece:	2302      	movs	r3, #2
 8001ed0:	613b      	str	r3, [r7, #16]
 8001ed2:	e013      	b.n	8001efc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001ed4:	2301      	movs	r3, #1
 8001ed6:	613b      	str	r3, [r7, #16]
 8001ed8:	e010      	b.n	8001efc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	2b80      	cmp	r3, #128	@ 0x80
 8001ede:	d902      	bls.n	8001ee6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001ee0:	2303      	movs	r3, #3
 8001ee2:	613b      	str	r3, [r7, #16]
 8001ee4:	e00a      	b.n	8001efc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	2b80      	cmp	r3, #128	@ 0x80
 8001eea:	d102      	bne.n	8001ef2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001eec:	2302      	movs	r3, #2
 8001eee:	613b      	str	r3, [r7, #16]
 8001ef0:	e004      	b.n	8001efc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	2b70      	cmp	r3, #112	@ 0x70
 8001ef6:	d101      	bne.n	8001efc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001ef8:	2301      	movs	r3, #1
 8001efa:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001efc:	4b0b      	ldr	r3, [pc, #44]	@ (8001f2c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f023 0207 	bic.w	r2, r3, #7
 8001f04:	4909      	ldr	r1, [pc, #36]	@ (8001f2c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001f06:	693b      	ldr	r3, [r7, #16]
 8001f08:	4313      	orrs	r3, r2
 8001f0a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001f0c:	4b07      	ldr	r3, [pc, #28]	@ (8001f2c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f003 0307 	and.w	r3, r3, #7
 8001f14:	693a      	ldr	r2, [r7, #16]
 8001f16:	429a      	cmp	r2, r3
 8001f18:	d001      	beq.n	8001f1e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	e000      	b.n	8001f20 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001f1e:	2300      	movs	r3, #0
}
 8001f20:	4618      	mov	r0, r3
 8001f22:	3718      	adds	r7, #24
 8001f24:	46bd      	mov	sp, r7
 8001f26:	bd80      	pop	{r7, pc}
 8001f28:	40021000 	.word	0x40021000
 8001f2c:	40022000 	.word	0x40022000

08001f30 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b086      	sub	sp, #24
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001f38:	2300      	movs	r3, #0
 8001f3a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d031      	beq.n	8001fb0 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f50:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8001f54:	d01a      	beq.n	8001f8c <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8001f56:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8001f5a:	d814      	bhi.n	8001f86 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d009      	beq.n	8001f74 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8001f60:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001f64:	d10f      	bne.n	8001f86 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8001f66:	4b5d      	ldr	r3, [pc, #372]	@ (80020dc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001f68:	68db      	ldr	r3, [r3, #12]
 8001f6a:	4a5c      	ldr	r2, [pc, #368]	@ (80020dc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001f6c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f70:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001f72:	e00c      	b.n	8001f8e <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	3304      	adds	r3, #4
 8001f78:	2100      	movs	r1, #0
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	f000 f9de 	bl	800233c <RCCEx_PLLSAI1_Config>
 8001f80:	4603      	mov	r3, r0
 8001f82:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001f84:	e003      	b.n	8001f8e <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001f86:	2301      	movs	r3, #1
 8001f88:	74fb      	strb	r3, [r7, #19]
      break;
 8001f8a:	e000      	b.n	8001f8e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8001f8c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001f8e:	7cfb      	ldrb	r3, [r7, #19]
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d10b      	bne.n	8001fac <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001f94:	4b51      	ldr	r3, [pc, #324]	@ (80020dc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001f96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f9a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001fa2:	494e      	ldr	r1, [pc, #312]	@ (80020dc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001fa4:	4313      	orrs	r3, r2
 8001fa6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8001faa:	e001      	b.n	8001fb0 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001fac:	7cfb      	ldrb	r3, [r7, #19]
 8001fae:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	f000 809e 	beq.w	80020fa <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001fc2:	4b46      	ldr	r3, [pc, #280]	@ (80020dc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001fc4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fc6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d101      	bne.n	8001fd2 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8001fce:	2301      	movs	r3, #1
 8001fd0:	e000      	b.n	8001fd4 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d00d      	beq.n	8001ff4 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001fd8:	4b40      	ldr	r3, [pc, #256]	@ (80020dc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001fda:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fdc:	4a3f      	ldr	r2, [pc, #252]	@ (80020dc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001fde:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001fe2:	6593      	str	r3, [r2, #88]	@ 0x58
 8001fe4:	4b3d      	ldr	r3, [pc, #244]	@ (80020dc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001fe6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fe8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001fec:	60bb      	str	r3, [r7, #8]
 8001fee:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ff0:	2301      	movs	r3, #1
 8001ff2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001ff4:	4b3a      	ldr	r3, [pc, #232]	@ (80020e0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4a39      	ldr	r2, [pc, #228]	@ (80020e0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8001ffa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ffe:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002000:	f7fe fda8 	bl	8000b54 <HAL_GetTick>
 8002004:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002006:	e009      	b.n	800201c <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002008:	f7fe fda4 	bl	8000b54 <HAL_GetTick>
 800200c:	4602      	mov	r2, r0
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	1ad3      	subs	r3, r2, r3
 8002012:	2b02      	cmp	r3, #2
 8002014:	d902      	bls.n	800201c <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8002016:	2303      	movs	r3, #3
 8002018:	74fb      	strb	r3, [r7, #19]
        break;
 800201a:	e005      	b.n	8002028 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800201c:	4b30      	ldr	r3, [pc, #192]	@ (80020e0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002024:	2b00      	cmp	r3, #0
 8002026:	d0ef      	beq.n	8002008 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8002028:	7cfb      	ldrb	r3, [r7, #19]
 800202a:	2b00      	cmp	r3, #0
 800202c:	d15a      	bne.n	80020e4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800202e:	4b2b      	ldr	r3, [pc, #172]	@ (80020dc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002030:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002034:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002038:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800203a:	697b      	ldr	r3, [r7, #20]
 800203c:	2b00      	cmp	r3, #0
 800203e:	d01e      	beq.n	800207e <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002044:	697a      	ldr	r2, [r7, #20]
 8002046:	429a      	cmp	r2, r3
 8002048:	d019      	beq.n	800207e <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800204a:	4b24      	ldr	r3, [pc, #144]	@ (80020dc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800204c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002050:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002054:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002056:	4b21      	ldr	r3, [pc, #132]	@ (80020dc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002058:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800205c:	4a1f      	ldr	r2, [pc, #124]	@ (80020dc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800205e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002062:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002066:	4b1d      	ldr	r3, [pc, #116]	@ (80020dc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002068:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800206c:	4a1b      	ldr	r2, [pc, #108]	@ (80020dc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800206e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002072:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002076:	4a19      	ldr	r2, [pc, #100]	@ (80020dc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002078:	697b      	ldr	r3, [r7, #20]
 800207a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800207e:	697b      	ldr	r3, [r7, #20]
 8002080:	f003 0301 	and.w	r3, r3, #1
 8002084:	2b00      	cmp	r3, #0
 8002086:	d016      	beq.n	80020b6 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002088:	f7fe fd64 	bl	8000b54 <HAL_GetTick>
 800208c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800208e:	e00b      	b.n	80020a8 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002090:	f7fe fd60 	bl	8000b54 <HAL_GetTick>
 8002094:	4602      	mov	r2, r0
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	1ad3      	subs	r3, r2, r3
 800209a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800209e:	4293      	cmp	r3, r2
 80020a0:	d902      	bls.n	80020a8 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 80020a2:	2303      	movs	r3, #3
 80020a4:	74fb      	strb	r3, [r7, #19]
            break;
 80020a6:	e006      	b.n	80020b6 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80020a8:	4b0c      	ldr	r3, [pc, #48]	@ (80020dc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80020aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020ae:	f003 0302 	and.w	r3, r3, #2
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d0ec      	beq.n	8002090 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 80020b6:	7cfb      	ldrb	r3, [r7, #19]
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d10b      	bne.n	80020d4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80020bc:	4b07      	ldr	r3, [pc, #28]	@ (80020dc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80020be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020c2:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80020ca:	4904      	ldr	r1, [pc, #16]	@ (80020dc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80020cc:	4313      	orrs	r3, r2
 80020ce:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80020d2:	e009      	b.n	80020e8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80020d4:	7cfb      	ldrb	r3, [r7, #19]
 80020d6:	74bb      	strb	r3, [r7, #18]
 80020d8:	e006      	b.n	80020e8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 80020da:	bf00      	nop
 80020dc:	40021000 	.word	0x40021000
 80020e0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80020e4:	7cfb      	ldrb	r3, [r7, #19]
 80020e6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80020e8:	7c7b      	ldrb	r3, [r7, #17]
 80020ea:	2b01      	cmp	r3, #1
 80020ec:	d105      	bne.n	80020fa <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020ee:	4b8a      	ldr	r3, [pc, #552]	@ (8002318 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80020f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020f2:	4a89      	ldr	r2, [pc, #548]	@ (8002318 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80020f4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80020f8:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f003 0301 	and.w	r3, r3, #1
 8002102:	2b00      	cmp	r3, #0
 8002104:	d00a      	beq.n	800211c <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002106:	4b84      	ldr	r3, [pc, #528]	@ (8002318 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002108:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800210c:	f023 0203 	bic.w	r2, r3, #3
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6a1b      	ldr	r3, [r3, #32]
 8002114:	4980      	ldr	r1, [pc, #512]	@ (8002318 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002116:	4313      	orrs	r3, r2
 8002118:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f003 0302 	and.w	r3, r3, #2
 8002124:	2b00      	cmp	r3, #0
 8002126:	d00a      	beq.n	800213e <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002128:	4b7b      	ldr	r3, [pc, #492]	@ (8002318 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800212a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800212e:	f023 020c 	bic.w	r2, r3, #12
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002136:	4978      	ldr	r1, [pc, #480]	@ (8002318 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002138:	4313      	orrs	r3, r2
 800213a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f003 0320 	and.w	r3, r3, #32
 8002146:	2b00      	cmp	r3, #0
 8002148:	d00a      	beq.n	8002160 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800214a:	4b73      	ldr	r3, [pc, #460]	@ (8002318 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800214c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002150:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002158:	496f      	ldr	r1, [pc, #444]	@ (8002318 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800215a:	4313      	orrs	r3, r2
 800215c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002168:	2b00      	cmp	r3, #0
 800216a:	d00a      	beq.n	8002182 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800216c:	4b6a      	ldr	r3, [pc, #424]	@ (8002318 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800216e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002172:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800217a:	4967      	ldr	r1, [pc, #412]	@ (8002318 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800217c:	4313      	orrs	r3, r2
 800217e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800218a:	2b00      	cmp	r3, #0
 800218c:	d00a      	beq.n	80021a4 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800218e:	4b62      	ldr	r3, [pc, #392]	@ (8002318 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002190:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002194:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800219c:	495e      	ldr	r1, [pc, #376]	@ (8002318 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800219e:	4313      	orrs	r3, r2
 80021a0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d00a      	beq.n	80021c6 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80021b0:	4b59      	ldr	r3, [pc, #356]	@ (8002318 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80021b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021b6:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021be:	4956      	ldr	r1, [pc, #344]	@ (8002318 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80021c0:	4313      	orrs	r3, r2
 80021c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d00a      	beq.n	80021e8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80021d2:	4b51      	ldr	r3, [pc, #324]	@ (8002318 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80021d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021d8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021e0:	494d      	ldr	r1, [pc, #308]	@ (8002318 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80021e2:	4313      	orrs	r3, r2
 80021e4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d028      	beq.n	8002246 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80021f4:	4b48      	ldr	r3, [pc, #288]	@ (8002318 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80021f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021fa:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002202:	4945      	ldr	r1, [pc, #276]	@ (8002318 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002204:	4313      	orrs	r3, r2
 8002206:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800220e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002212:	d106      	bne.n	8002222 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002214:	4b40      	ldr	r3, [pc, #256]	@ (8002318 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002216:	68db      	ldr	r3, [r3, #12]
 8002218:	4a3f      	ldr	r2, [pc, #252]	@ (8002318 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800221a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800221e:	60d3      	str	r3, [r2, #12]
 8002220:	e011      	b.n	8002246 <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002226:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800222a:	d10c      	bne.n	8002246 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	3304      	adds	r3, #4
 8002230:	2101      	movs	r1, #1
 8002232:	4618      	mov	r0, r3
 8002234:	f000 f882 	bl	800233c <RCCEx_PLLSAI1_Config>
 8002238:	4603      	mov	r3, r0
 800223a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800223c:	7cfb      	ldrb	r3, [r7, #19]
 800223e:	2b00      	cmp	r3, #0
 8002240:	d001      	beq.n	8002246 <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8002242:	7cfb      	ldrb	r3, [r7, #19]
 8002244:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800224e:	2b00      	cmp	r3, #0
 8002250:	d028      	beq.n	80022a4 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002252:	4b31      	ldr	r3, [pc, #196]	@ (8002318 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002254:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002258:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002260:	492d      	ldr	r1, [pc, #180]	@ (8002318 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002262:	4313      	orrs	r3, r2
 8002264:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800226c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002270:	d106      	bne.n	8002280 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002272:	4b29      	ldr	r3, [pc, #164]	@ (8002318 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002274:	68db      	ldr	r3, [r3, #12]
 8002276:	4a28      	ldr	r2, [pc, #160]	@ (8002318 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002278:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800227c:	60d3      	str	r3, [r2, #12]
 800227e:	e011      	b.n	80022a4 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002284:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002288:	d10c      	bne.n	80022a4 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	3304      	adds	r3, #4
 800228e:	2101      	movs	r1, #1
 8002290:	4618      	mov	r0, r3
 8002292:	f000 f853 	bl	800233c <RCCEx_PLLSAI1_Config>
 8002296:	4603      	mov	r3, r0
 8002298:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800229a:	7cfb      	ldrb	r3, [r7, #19]
 800229c:	2b00      	cmp	r3, #0
 800229e:	d001      	beq.n	80022a4 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 80022a0:	7cfb      	ldrb	r3, [r7, #19]
 80022a2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d01c      	beq.n	80022ea <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80022b0:	4b19      	ldr	r3, [pc, #100]	@ (8002318 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80022b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022b6:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80022be:	4916      	ldr	r1, [pc, #88]	@ (8002318 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80022c0:	4313      	orrs	r3, r2
 80022c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80022ca:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80022ce:	d10c      	bne.n	80022ea <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	3304      	adds	r3, #4
 80022d4:	2102      	movs	r1, #2
 80022d6:	4618      	mov	r0, r3
 80022d8:	f000 f830 	bl	800233c <RCCEx_PLLSAI1_Config>
 80022dc:	4603      	mov	r3, r0
 80022de:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80022e0:	7cfb      	ldrb	r3, [r7, #19]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d001      	beq.n	80022ea <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 80022e6:	7cfb      	ldrb	r3, [r7, #19]
 80022e8:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d00a      	beq.n	800230c <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80022f6:	4b08      	ldr	r3, [pc, #32]	@ (8002318 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80022f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022fc:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002304:	4904      	ldr	r1, [pc, #16]	@ (8002318 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002306:	4313      	orrs	r3, r2
 8002308:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800230c:	7cbb      	ldrb	r3, [r7, #18]
}
 800230e:	4618      	mov	r0, r3
 8002310:	3718      	adds	r7, #24
 8002312:	46bd      	mov	sp, r7
 8002314:	bd80      	pop	{r7, pc}
 8002316:	bf00      	nop
 8002318:	40021000 	.word	0x40021000

0800231c <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 800231c:	b480      	push	{r7}
 800231e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8002320:	4b05      	ldr	r3, [pc, #20]	@ (8002338 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4a04      	ldr	r2, [pc, #16]	@ (8002338 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8002326:	f043 0304 	orr.w	r3, r3, #4
 800232a:	6013      	str	r3, [r2, #0]
}
 800232c:	bf00      	nop
 800232e:	46bd      	mov	sp, r7
 8002330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002334:	4770      	bx	lr
 8002336:	bf00      	nop
 8002338:	40021000 	.word	0x40021000

0800233c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b084      	sub	sp, #16
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
 8002344:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002346:	2300      	movs	r3, #0
 8002348:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800234a:	4b74      	ldr	r3, [pc, #464]	@ (800251c <RCCEx_PLLSAI1_Config+0x1e0>)
 800234c:	68db      	ldr	r3, [r3, #12]
 800234e:	f003 0303 	and.w	r3, r3, #3
 8002352:	2b00      	cmp	r3, #0
 8002354:	d018      	beq.n	8002388 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002356:	4b71      	ldr	r3, [pc, #452]	@ (800251c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002358:	68db      	ldr	r3, [r3, #12]
 800235a:	f003 0203 	and.w	r2, r3, #3
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	429a      	cmp	r2, r3
 8002364:	d10d      	bne.n	8002382 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
       ||
 800236a:	2b00      	cmp	r3, #0
 800236c:	d009      	beq.n	8002382 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800236e:	4b6b      	ldr	r3, [pc, #428]	@ (800251c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002370:	68db      	ldr	r3, [r3, #12]
 8002372:	091b      	lsrs	r3, r3, #4
 8002374:	f003 0307 	and.w	r3, r3, #7
 8002378:	1c5a      	adds	r2, r3, #1
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	685b      	ldr	r3, [r3, #4]
       ||
 800237e:	429a      	cmp	r2, r3
 8002380:	d047      	beq.n	8002412 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002382:	2301      	movs	r3, #1
 8002384:	73fb      	strb	r3, [r7, #15]
 8002386:	e044      	b.n	8002412 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	2b03      	cmp	r3, #3
 800238e:	d018      	beq.n	80023c2 <RCCEx_PLLSAI1_Config+0x86>
 8002390:	2b03      	cmp	r3, #3
 8002392:	d825      	bhi.n	80023e0 <RCCEx_PLLSAI1_Config+0xa4>
 8002394:	2b01      	cmp	r3, #1
 8002396:	d002      	beq.n	800239e <RCCEx_PLLSAI1_Config+0x62>
 8002398:	2b02      	cmp	r3, #2
 800239a:	d009      	beq.n	80023b0 <RCCEx_PLLSAI1_Config+0x74>
 800239c:	e020      	b.n	80023e0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800239e:	4b5f      	ldr	r3, [pc, #380]	@ (800251c <RCCEx_PLLSAI1_Config+0x1e0>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f003 0302 	and.w	r3, r3, #2
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d11d      	bne.n	80023e6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80023aa:	2301      	movs	r3, #1
 80023ac:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80023ae:	e01a      	b.n	80023e6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80023b0:	4b5a      	ldr	r3, [pc, #360]	@ (800251c <RCCEx_PLLSAI1_Config+0x1e0>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d116      	bne.n	80023ea <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80023bc:	2301      	movs	r3, #1
 80023be:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80023c0:	e013      	b.n	80023ea <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80023c2:	4b56      	ldr	r3, [pc, #344]	@ (800251c <RCCEx_PLLSAI1_Config+0x1e0>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d10f      	bne.n	80023ee <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80023ce:	4b53      	ldr	r3, [pc, #332]	@ (800251c <RCCEx_PLLSAI1_Config+0x1e0>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d109      	bne.n	80023ee <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80023da:	2301      	movs	r3, #1
 80023dc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80023de:	e006      	b.n	80023ee <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80023e0:	2301      	movs	r3, #1
 80023e2:	73fb      	strb	r3, [r7, #15]
      break;
 80023e4:	e004      	b.n	80023f0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80023e6:	bf00      	nop
 80023e8:	e002      	b.n	80023f0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80023ea:	bf00      	nop
 80023ec:	e000      	b.n	80023f0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80023ee:	bf00      	nop
    }

    if(status == HAL_OK)
 80023f0:	7bfb      	ldrb	r3, [r7, #15]
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d10d      	bne.n	8002412 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80023f6:	4b49      	ldr	r3, [pc, #292]	@ (800251c <RCCEx_PLLSAI1_Config+0x1e0>)
 80023f8:	68db      	ldr	r3, [r3, #12]
 80023fa:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6819      	ldr	r1, [r3, #0]
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	685b      	ldr	r3, [r3, #4]
 8002406:	3b01      	subs	r3, #1
 8002408:	011b      	lsls	r3, r3, #4
 800240a:	430b      	orrs	r3, r1
 800240c:	4943      	ldr	r1, [pc, #268]	@ (800251c <RCCEx_PLLSAI1_Config+0x1e0>)
 800240e:	4313      	orrs	r3, r2
 8002410:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002412:	7bfb      	ldrb	r3, [r7, #15]
 8002414:	2b00      	cmp	r3, #0
 8002416:	d17c      	bne.n	8002512 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002418:	4b40      	ldr	r3, [pc, #256]	@ (800251c <RCCEx_PLLSAI1_Config+0x1e0>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	4a3f      	ldr	r2, [pc, #252]	@ (800251c <RCCEx_PLLSAI1_Config+0x1e0>)
 800241e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002422:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002424:	f7fe fb96 	bl	8000b54 <HAL_GetTick>
 8002428:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800242a:	e009      	b.n	8002440 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800242c:	f7fe fb92 	bl	8000b54 <HAL_GetTick>
 8002430:	4602      	mov	r2, r0
 8002432:	68bb      	ldr	r3, [r7, #8]
 8002434:	1ad3      	subs	r3, r2, r3
 8002436:	2b02      	cmp	r3, #2
 8002438:	d902      	bls.n	8002440 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800243a:	2303      	movs	r3, #3
 800243c:	73fb      	strb	r3, [r7, #15]
        break;
 800243e:	e005      	b.n	800244c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002440:	4b36      	ldr	r3, [pc, #216]	@ (800251c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002448:	2b00      	cmp	r3, #0
 800244a:	d1ef      	bne.n	800242c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800244c:	7bfb      	ldrb	r3, [r7, #15]
 800244e:	2b00      	cmp	r3, #0
 8002450:	d15f      	bne.n	8002512 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	2b00      	cmp	r3, #0
 8002456:	d110      	bne.n	800247a <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002458:	4b30      	ldr	r3, [pc, #192]	@ (800251c <RCCEx_PLLSAI1_Config+0x1e0>)
 800245a:	691b      	ldr	r3, [r3, #16]
 800245c:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8002460:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002464:	687a      	ldr	r2, [r7, #4]
 8002466:	6892      	ldr	r2, [r2, #8]
 8002468:	0211      	lsls	r1, r2, #8
 800246a:	687a      	ldr	r2, [r7, #4]
 800246c:	68d2      	ldr	r2, [r2, #12]
 800246e:	06d2      	lsls	r2, r2, #27
 8002470:	430a      	orrs	r2, r1
 8002472:	492a      	ldr	r1, [pc, #168]	@ (800251c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002474:	4313      	orrs	r3, r2
 8002476:	610b      	str	r3, [r1, #16]
 8002478:	e027      	b.n	80024ca <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	2b01      	cmp	r3, #1
 800247e:	d112      	bne.n	80024a6 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002480:	4b26      	ldr	r3, [pc, #152]	@ (800251c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002482:	691b      	ldr	r3, [r3, #16]
 8002484:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8002488:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800248c:	687a      	ldr	r2, [r7, #4]
 800248e:	6892      	ldr	r2, [r2, #8]
 8002490:	0211      	lsls	r1, r2, #8
 8002492:	687a      	ldr	r2, [r7, #4]
 8002494:	6912      	ldr	r2, [r2, #16]
 8002496:	0852      	lsrs	r2, r2, #1
 8002498:	3a01      	subs	r2, #1
 800249a:	0552      	lsls	r2, r2, #21
 800249c:	430a      	orrs	r2, r1
 800249e:	491f      	ldr	r1, [pc, #124]	@ (800251c <RCCEx_PLLSAI1_Config+0x1e0>)
 80024a0:	4313      	orrs	r3, r2
 80024a2:	610b      	str	r3, [r1, #16]
 80024a4:	e011      	b.n	80024ca <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80024a6:	4b1d      	ldr	r3, [pc, #116]	@ (800251c <RCCEx_PLLSAI1_Config+0x1e0>)
 80024a8:	691b      	ldr	r3, [r3, #16]
 80024aa:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80024ae:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80024b2:	687a      	ldr	r2, [r7, #4]
 80024b4:	6892      	ldr	r2, [r2, #8]
 80024b6:	0211      	lsls	r1, r2, #8
 80024b8:	687a      	ldr	r2, [r7, #4]
 80024ba:	6952      	ldr	r2, [r2, #20]
 80024bc:	0852      	lsrs	r2, r2, #1
 80024be:	3a01      	subs	r2, #1
 80024c0:	0652      	lsls	r2, r2, #25
 80024c2:	430a      	orrs	r2, r1
 80024c4:	4915      	ldr	r1, [pc, #84]	@ (800251c <RCCEx_PLLSAI1_Config+0x1e0>)
 80024c6:	4313      	orrs	r3, r2
 80024c8:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80024ca:	4b14      	ldr	r3, [pc, #80]	@ (800251c <RCCEx_PLLSAI1_Config+0x1e0>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	4a13      	ldr	r2, [pc, #76]	@ (800251c <RCCEx_PLLSAI1_Config+0x1e0>)
 80024d0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80024d4:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024d6:	f7fe fb3d 	bl	8000b54 <HAL_GetTick>
 80024da:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80024dc:	e009      	b.n	80024f2 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80024de:	f7fe fb39 	bl	8000b54 <HAL_GetTick>
 80024e2:	4602      	mov	r2, r0
 80024e4:	68bb      	ldr	r3, [r7, #8]
 80024e6:	1ad3      	subs	r3, r2, r3
 80024e8:	2b02      	cmp	r3, #2
 80024ea:	d902      	bls.n	80024f2 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80024ec:	2303      	movs	r3, #3
 80024ee:	73fb      	strb	r3, [r7, #15]
          break;
 80024f0:	e005      	b.n	80024fe <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80024f2:	4b0a      	ldr	r3, [pc, #40]	@ (800251c <RCCEx_PLLSAI1_Config+0x1e0>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d0ef      	beq.n	80024de <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80024fe:	7bfb      	ldrb	r3, [r7, #15]
 8002500:	2b00      	cmp	r3, #0
 8002502:	d106      	bne.n	8002512 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002504:	4b05      	ldr	r3, [pc, #20]	@ (800251c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002506:	691a      	ldr	r2, [r3, #16]
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	699b      	ldr	r3, [r3, #24]
 800250c:	4903      	ldr	r1, [pc, #12]	@ (800251c <RCCEx_PLLSAI1_Config+0x1e0>)
 800250e:	4313      	orrs	r3, r2
 8002510:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002512:	7bfb      	ldrb	r3, [r7, #15]
}
 8002514:	4618      	mov	r0, r3
 8002516:	3710      	adds	r7, #16
 8002518:	46bd      	mov	sp, r7
 800251a:	bd80      	pop	{r7, pc}
 800251c:	40021000 	.word	0x40021000

08002520 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b082      	sub	sp, #8
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2b00      	cmp	r3, #0
 800252c:	d101      	bne.n	8002532 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800252e:	2301      	movs	r3, #1
 8002530:	e040      	b.n	80025b4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002536:	2b00      	cmp	r3, #0
 8002538:	d106      	bne.n	8002548 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	2200      	movs	r2, #0
 800253e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002542:	6878      	ldr	r0, [r7, #4]
 8002544:	f7fe f976 	bl	8000834 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2224      	movs	r2, #36	@ 0x24
 800254c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	681a      	ldr	r2, [r3, #0]
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f022 0201 	bic.w	r2, r2, #1
 800255c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002562:	2b00      	cmp	r3, #0
 8002564:	d002      	beq.n	800256c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8002566:	6878      	ldr	r0, [r7, #4]
 8002568:	f000 fe34 	bl	80031d4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800256c:	6878      	ldr	r0, [r7, #4]
 800256e:	f000 fc05 	bl	8002d7c <UART_SetConfig>
 8002572:	4603      	mov	r3, r0
 8002574:	2b01      	cmp	r3, #1
 8002576:	d101      	bne.n	800257c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8002578:	2301      	movs	r3, #1
 800257a:	e01b      	b.n	80025b4 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	685a      	ldr	r2, [r3, #4]
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800258a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	689a      	ldr	r2, [r3, #8]
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800259a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	681a      	ldr	r2, [r3, #0]
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f042 0201 	orr.w	r2, r2, #1
 80025aa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80025ac:	6878      	ldr	r0, [r7, #4]
 80025ae:	f000 feb3 	bl	8003318 <UART_CheckIdleState>
 80025b2:	4603      	mov	r3, r0
}
 80025b4:	4618      	mov	r0, r3
 80025b6:	3708      	adds	r7, #8
 80025b8:	46bd      	mov	sp, r7
 80025ba:	bd80      	pop	{r7, pc}

080025bc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b08a      	sub	sp, #40	@ 0x28
 80025c0:	af02      	add	r7, sp, #8
 80025c2:	60f8      	str	r0, [r7, #12]
 80025c4:	60b9      	str	r1, [r7, #8]
 80025c6:	603b      	str	r3, [r7, #0]
 80025c8:	4613      	mov	r3, r2
 80025ca:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80025d0:	2b20      	cmp	r3, #32
 80025d2:	d177      	bne.n	80026c4 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80025d4:	68bb      	ldr	r3, [r7, #8]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d002      	beq.n	80025e0 <HAL_UART_Transmit+0x24>
 80025da:	88fb      	ldrh	r3, [r7, #6]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d101      	bne.n	80025e4 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80025e0:	2301      	movs	r3, #1
 80025e2:	e070      	b.n	80026c6 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	2200      	movs	r2, #0
 80025e8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	2221      	movs	r2, #33	@ 0x21
 80025f0:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80025f2:	f7fe faaf 	bl	8000b54 <HAL_GetTick>
 80025f6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	88fa      	ldrh	r2, [r7, #6]
 80025fc:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	88fa      	ldrh	r2, [r7, #6]
 8002604:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	689b      	ldr	r3, [r3, #8]
 800260c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002610:	d108      	bne.n	8002624 <HAL_UART_Transmit+0x68>
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	691b      	ldr	r3, [r3, #16]
 8002616:	2b00      	cmp	r3, #0
 8002618:	d104      	bne.n	8002624 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800261a:	2300      	movs	r3, #0
 800261c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800261e:	68bb      	ldr	r3, [r7, #8]
 8002620:	61bb      	str	r3, [r7, #24]
 8002622:	e003      	b.n	800262c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8002624:	68bb      	ldr	r3, [r7, #8]
 8002626:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002628:	2300      	movs	r3, #0
 800262a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800262c:	e02f      	b.n	800268e <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	9300      	str	r3, [sp, #0]
 8002632:	697b      	ldr	r3, [r7, #20]
 8002634:	2200      	movs	r2, #0
 8002636:	2180      	movs	r1, #128	@ 0x80
 8002638:	68f8      	ldr	r0, [r7, #12]
 800263a:	f000 ff15 	bl	8003468 <UART_WaitOnFlagUntilTimeout>
 800263e:	4603      	mov	r3, r0
 8002640:	2b00      	cmp	r3, #0
 8002642:	d004      	beq.n	800264e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	2220      	movs	r2, #32
 8002648:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800264a:	2303      	movs	r3, #3
 800264c:	e03b      	b.n	80026c6 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800264e:	69fb      	ldr	r3, [r7, #28]
 8002650:	2b00      	cmp	r3, #0
 8002652:	d10b      	bne.n	800266c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002654:	69bb      	ldr	r3, [r7, #24]
 8002656:	881a      	ldrh	r2, [r3, #0]
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002660:	b292      	uxth	r2, r2
 8002662:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8002664:	69bb      	ldr	r3, [r7, #24]
 8002666:	3302      	adds	r3, #2
 8002668:	61bb      	str	r3, [r7, #24]
 800266a:	e007      	b.n	800267c <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800266c:	69fb      	ldr	r3, [r7, #28]
 800266e:	781a      	ldrb	r2, [r3, #0]
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8002676:	69fb      	ldr	r3, [r7, #28]
 8002678:	3301      	adds	r3, #1
 800267a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8002682:	b29b      	uxth	r3, r3
 8002684:	3b01      	subs	r3, #1
 8002686:	b29a      	uxth	r2, r3
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8002694:	b29b      	uxth	r3, r3
 8002696:	2b00      	cmp	r3, #0
 8002698:	d1c9      	bne.n	800262e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	9300      	str	r3, [sp, #0]
 800269e:	697b      	ldr	r3, [r7, #20]
 80026a0:	2200      	movs	r2, #0
 80026a2:	2140      	movs	r1, #64	@ 0x40
 80026a4:	68f8      	ldr	r0, [r7, #12]
 80026a6:	f000 fedf 	bl	8003468 <UART_WaitOnFlagUntilTimeout>
 80026aa:	4603      	mov	r3, r0
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d004      	beq.n	80026ba <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	2220      	movs	r2, #32
 80026b4:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80026b6:	2303      	movs	r3, #3
 80026b8:	e005      	b.n	80026c6 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	2220      	movs	r2, #32
 80026be:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80026c0:	2300      	movs	r3, #0
 80026c2:	e000      	b.n	80026c6 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 80026c4:	2302      	movs	r3, #2
  }
}
 80026c6:	4618      	mov	r0, r3
 80026c8:	3720      	adds	r7, #32
 80026ca:	46bd      	mov	sp, r7
 80026cc:	bd80      	pop	{r7, pc}
	...

080026d0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b08a      	sub	sp, #40	@ 0x28
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	60f8      	str	r0, [r7, #12]
 80026d8:	60b9      	str	r1, [r7, #8]
 80026da:	4613      	mov	r3, r2
 80026dc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80026e4:	2b20      	cmp	r3, #32
 80026e6:	d137      	bne.n	8002758 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80026e8:	68bb      	ldr	r3, [r7, #8]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d002      	beq.n	80026f4 <HAL_UART_Receive_IT+0x24>
 80026ee:	88fb      	ldrh	r3, [r7, #6]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d101      	bne.n	80026f8 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80026f4:	2301      	movs	r3, #1
 80026f6:	e030      	b.n	800275a <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	2200      	movs	r2, #0
 80026fc:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	4a18      	ldr	r2, [pc, #96]	@ (8002764 <HAL_UART_Receive_IT+0x94>)
 8002704:	4293      	cmp	r3, r2
 8002706:	d01f      	beq.n	8002748 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	685b      	ldr	r3, [r3, #4]
 800270e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002712:	2b00      	cmp	r3, #0
 8002714:	d018      	beq.n	8002748 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800271c:	697b      	ldr	r3, [r7, #20]
 800271e:	e853 3f00 	ldrex	r3, [r3]
 8002722:	613b      	str	r3, [r7, #16]
   return(result);
 8002724:	693b      	ldr	r3, [r7, #16]
 8002726:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800272a:	627b      	str	r3, [r7, #36]	@ 0x24
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	461a      	mov	r2, r3
 8002732:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002734:	623b      	str	r3, [r7, #32]
 8002736:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002738:	69f9      	ldr	r1, [r7, #28]
 800273a:	6a3a      	ldr	r2, [r7, #32]
 800273c:	e841 2300 	strex	r3, r2, [r1]
 8002740:	61bb      	str	r3, [r7, #24]
   return(result);
 8002742:	69bb      	ldr	r3, [r7, #24]
 8002744:	2b00      	cmp	r3, #0
 8002746:	d1e6      	bne.n	8002716 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002748:	88fb      	ldrh	r3, [r7, #6]
 800274a:	461a      	mov	r2, r3
 800274c:	68b9      	ldr	r1, [r7, #8]
 800274e:	68f8      	ldr	r0, [r7, #12]
 8002750:	f000 fef2 	bl	8003538 <UART_Start_Receive_IT>
 8002754:	4603      	mov	r3, r0
 8002756:	e000      	b.n	800275a <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002758:	2302      	movs	r3, #2
  }
}
 800275a:	4618      	mov	r0, r3
 800275c:	3728      	adds	r7, #40	@ 0x28
 800275e:	46bd      	mov	sp, r7
 8002760:	bd80      	pop	{r7, pc}
 8002762:	bf00      	nop
 8002764:	40008000 	.word	0x40008000

08002768 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b0ba      	sub	sp, #232	@ 0xe8
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	69db      	ldr	r3, [r3, #28]
 8002776:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	689b      	ldr	r3, [r3, #8]
 800278a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800278e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8002792:	f640 030f 	movw	r3, #2063	@ 0x80f
 8002796:	4013      	ands	r3, r2
 8002798:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800279c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d115      	bne.n	80027d0 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80027a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80027a8:	f003 0320 	and.w	r3, r3, #32
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d00f      	beq.n	80027d0 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80027b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80027b4:	f003 0320 	and.w	r3, r3, #32
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d009      	beq.n	80027d0 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	f000 82ae 	beq.w	8002d22 <HAL_UART_IRQHandler+0x5ba>
      {
        huart->RxISR(huart);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80027ca:	6878      	ldr	r0, [r7, #4]
 80027cc:	4798      	blx	r3
      }
      return;
 80027ce:	e2a8      	b.n	8002d22 <HAL_UART_IRQHandler+0x5ba>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 80027d0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	f000 8117 	beq.w	8002a08 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80027da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80027de:	f003 0301 	and.w	r3, r3, #1
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d106      	bne.n	80027f4 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80027e6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80027ea:	4b85      	ldr	r3, [pc, #532]	@ (8002a00 <HAL_UART_IRQHandler+0x298>)
 80027ec:	4013      	ands	r3, r2
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	f000 810a 	beq.w	8002a08 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80027f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80027f8:	f003 0301 	and.w	r3, r3, #1
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d011      	beq.n	8002824 <HAL_UART_IRQHandler+0xbc>
 8002800:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002804:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002808:	2b00      	cmp	r3, #0
 800280a:	d00b      	beq.n	8002824 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	2201      	movs	r2, #1
 8002812:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800281a:	f043 0201 	orr.w	r2, r3, #1
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002824:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002828:	f003 0302 	and.w	r3, r3, #2
 800282c:	2b00      	cmp	r3, #0
 800282e:	d011      	beq.n	8002854 <HAL_UART_IRQHandler+0xec>
 8002830:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002834:	f003 0301 	and.w	r3, r3, #1
 8002838:	2b00      	cmp	r3, #0
 800283a:	d00b      	beq.n	8002854 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	2202      	movs	r2, #2
 8002842:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800284a:	f043 0204 	orr.w	r2, r3, #4
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002854:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002858:	f003 0304 	and.w	r3, r3, #4
 800285c:	2b00      	cmp	r3, #0
 800285e:	d011      	beq.n	8002884 <HAL_UART_IRQHandler+0x11c>
 8002860:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002864:	f003 0301 	and.w	r3, r3, #1
 8002868:	2b00      	cmp	r3, #0
 800286a:	d00b      	beq.n	8002884 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	2204      	movs	r2, #4
 8002872:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800287a:	f043 0202 	orr.w	r2, r3, #2
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002884:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002888:	f003 0308 	and.w	r3, r3, #8
 800288c:	2b00      	cmp	r3, #0
 800288e:	d017      	beq.n	80028c0 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002890:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002894:	f003 0320 	and.w	r3, r3, #32
 8002898:	2b00      	cmp	r3, #0
 800289a:	d105      	bne.n	80028a8 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800289c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80028a0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d00b      	beq.n	80028c0 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	2208      	movs	r2, #8
 80028ae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80028b6:	f043 0208 	orr.w	r2, r3, #8
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80028c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80028c4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d012      	beq.n	80028f2 <HAL_UART_IRQHandler+0x18a>
 80028cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80028d0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d00c      	beq.n	80028f2 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80028e0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80028e8:	f043 0220 	orr.w	r2, r3, #32
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	f000 8214 	beq.w	8002d26 <HAL_UART_IRQHandler+0x5be>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80028fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002902:	f003 0320 	and.w	r3, r3, #32
 8002906:	2b00      	cmp	r3, #0
 8002908:	d00d      	beq.n	8002926 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800290a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800290e:	f003 0320 	and.w	r3, r3, #32
 8002912:	2b00      	cmp	r3, #0
 8002914:	d007      	beq.n	8002926 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800291a:	2b00      	cmp	r3, #0
 800291c:	d003      	beq.n	8002926 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002922:	6878      	ldr	r0, [r7, #4]
 8002924:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800292c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	689b      	ldr	r3, [r3, #8]
 8002936:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800293a:	2b40      	cmp	r3, #64	@ 0x40
 800293c:	d005      	beq.n	800294a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800293e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002942:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002946:	2b00      	cmp	r3, #0
 8002948:	d04f      	beq.n	80029ea <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800294a:	6878      	ldr	r0, [r7, #4]
 800294c:	f000 feba 	bl	80036c4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	689b      	ldr	r3, [r3, #8]
 8002956:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800295a:	2b40      	cmp	r3, #64	@ 0x40
 800295c:	d141      	bne.n	80029e2 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	3308      	adds	r3, #8
 8002964:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002968:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800296c:	e853 3f00 	ldrex	r3, [r3]
 8002970:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8002974:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002978:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800297c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	3308      	adds	r3, #8
 8002986:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800298a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800298e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002992:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8002996:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800299a:	e841 2300 	strex	r3, r2, [r1]
 800299e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80029a2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d1d9      	bne.n	800295e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d013      	beq.n	80029da <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80029b6:	4a13      	ldr	r2, [pc, #76]	@ (8002a04 <HAL_UART_IRQHandler+0x29c>)
 80029b8:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80029be:	4618      	mov	r0, r3
 80029c0:	f7fe fa47 	bl	8000e52 <HAL_DMA_Abort_IT>
 80029c4:	4603      	mov	r3, r0
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d017      	beq.n	80029fa <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80029ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029d0:	687a      	ldr	r2, [r7, #4]
 80029d2:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80029d4:	4610      	mov	r0, r2
 80029d6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80029d8:	e00f      	b.n	80029fa <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80029da:	6878      	ldr	r0, [r7, #4]
 80029dc:	f000 f9b8 	bl	8002d50 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80029e0:	e00b      	b.n	80029fa <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80029e2:	6878      	ldr	r0, [r7, #4]
 80029e4:	f000 f9b4 	bl	8002d50 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80029e8:	e007      	b.n	80029fa <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80029ea:	6878      	ldr	r0, [r7, #4]
 80029ec:	f000 f9b0 	bl	8002d50 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2200      	movs	r2, #0
 80029f4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 80029f8:	e195      	b.n	8002d26 <HAL_UART_IRQHandler+0x5be>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80029fa:	bf00      	nop
    return;
 80029fc:	e193      	b.n	8002d26 <HAL_UART_IRQHandler+0x5be>
 80029fe:	bf00      	nop
 8002a00:	04000120 	.word	0x04000120
 8002a04:	0800378d 	.word	0x0800378d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a0c:	2b01      	cmp	r3, #1
 8002a0e:	f040 814e 	bne.w	8002cae <HAL_UART_IRQHandler+0x546>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002a12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002a16:	f003 0310 	and.w	r3, r3, #16
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	f000 8147 	beq.w	8002cae <HAL_UART_IRQHandler+0x546>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002a20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002a24:	f003 0310 	and.w	r3, r3, #16
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	f000 8140 	beq.w	8002cae <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	2210      	movs	r2, #16
 8002a34:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	689b      	ldr	r3, [r3, #8]
 8002a3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a40:	2b40      	cmp	r3, #64	@ 0x40
 8002a42:	f040 80b8 	bne.w	8002bb6 <HAL_UART_IRQHandler+0x44e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	685b      	ldr	r3, [r3, #4]
 8002a4e:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002a52:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	f000 8167 	beq.w	8002d2a <HAL_UART_IRQHandler+0x5c2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8002a62:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002a66:	429a      	cmp	r2, r3
 8002a68:	f080 815f 	bcs.w	8002d2a <HAL_UART_IRQHandler+0x5c2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002a72:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f003 0320 	and.w	r3, r3, #32
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	f040 8086 	bne.w	8002b94 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a90:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002a94:	e853 3f00 	ldrex	r3, [r3]
 8002a98:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8002a9c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002aa0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002aa4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	461a      	mov	r2, r3
 8002aae:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002ab2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002ab6:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002aba:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8002abe:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002ac2:	e841 2300 	strex	r3, r2, [r1]
 8002ac6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8002aca:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d1da      	bne.n	8002a88 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	3308      	adds	r3, #8
 8002ad8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ada:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002adc:	e853 3f00 	ldrex	r3, [r3]
 8002ae0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8002ae2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002ae4:	f023 0301 	bic.w	r3, r3, #1
 8002ae8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	3308      	adds	r3, #8
 8002af2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002af6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8002afa:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002afc:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8002afe:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8002b02:	e841 2300 	strex	r3, r2, [r1]
 8002b06:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8002b08:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d1e1      	bne.n	8002ad2 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	3308      	adds	r3, #8
 8002b14:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b16:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002b18:	e853 3f00 	ldrex	r3, [r3]
 8002b1c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8002b1e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002b20:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002b24:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	3308      	adds	r3, #8
 8002b2e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8002b32:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002b34:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b36:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8002b38:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002b3a:	e841 2300 	strex	r3, r2, [r1]
 8002b3e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8002b40:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d1e3      	bne.n	8002b0e <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	2220      	movs	r2, #32
 8002b4a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	2200      	movs	r2, #0
 8002b52:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b5a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002b5c:	e853 3f00 	ldrex	r3, [r3]
 8002b60:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8002b62:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002b64:	f023 0310 	bic.w	r3, r3, #16
 8002b68:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	461a      	mov	r2, r3
 8002b72:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002b76:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002b78:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b7a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002b7c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002b7e:	e841 2300 	strex	r3, r2, [r1]
 8002b82:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8002b84:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d1e4      	bne.n	8002b54 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002b8e:	4618      	mov	r0, r3
 8002b90:	f7fe f921 	bl	8000dd6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2202      	movs	r2, #2
 8002b98:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8002ba6:	b29b      	uxth	r3, r3
 8002ba8:	1ad3      	subs	r3, r2, r3
 8002baa:	b29b      	uxth	r3, r3
 8002bac:	4619      	mov	r1, r3
 8002bae:	6878      	ldr	r0, [r7, #4]
 8002bb0:	f000 f8d8 	bl	8002d64 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002bb4:	e0b9      	b.n	8002d2a <HAL_UART_IRQHandler+0x5c2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8002bc2:	b29b      	uxth	r3, r3
 8002bc4:	1ad3      	subs	r3, r2, r3
 8002bc6:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8002bd0:	b29b      	uxth	r3, r3
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	f000 80ab 	beq.w	8002d2e <HAL_UART_IRQHandler+0x5c6>
          && (nb_rx_data > 0U))
 8002bd8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	f000 80a6 	beq.w	8002d2e <HAL_UART_IRQHandler+0x5c6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002be8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002bea:	e853 3f00 	ldrex	r3, [r3]
 8002bee:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002bf0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002bf2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002bf6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	461a      	mov	r2, r3
 8002c00:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002c04:	647b      	str	r3, [r7, #68]	@ 0x44
 8002c06:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c08:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002c0a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002c0c:	e841 2300 	strex	r3, r2, [r1]
 8002c10:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002c12:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d1e4      	bne.n	8002be2 <HAL_UART_IRQHandler+0x47a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	3308      	adds	r3, #8
 8002c1e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c22:	e853 3f00 	ldrex	r3, [r3]
 8002c26:	623b      	str	r3, [r7, #32]
   return(result);
 8002c28:	6a3b      	ldr	r3, [r7, #32]
 8002c2a:	f023 0301 	bic.w	r3, r3, #1
 8002c2e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	3308      	adds	r3, #8
 8002c38:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8002c3c:	633a      	str	r2, [r7, #48]	@ 0x30
 8002c3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c40:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002c42:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002c44:	e841 2300 	strex	r3, r2, [r1]
 8002c48:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002c4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d1e3      	bne.n	8002c18 <HAL_UART_IRQHandler+0x4b0>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2220      	movs	r2, #32
 8002c54:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2200      	movs	r2, #0
 8002c62:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c6a:	693b      	ldr	r3, [r7, #16]
 8002c6c:	e853 3f00 	ldrex	r3, [r3]
 8002c70:	60fb      	str	r3, [r7, #12]
   return(result);
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	f023 0310 	bic.w	r3, r3, #16
 8002c78:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	461a      	mov	r2, r3
 8002c82:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002c86:	61fb      	str	r3, [r7, #28]
 8002c88:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c8a:	69b9      	ldr	r1, [r7, #24]
 8002c8c:	69fa      	ldr	r2, [r7, #28]
 8002c8e:	e841 2300 	strex	r3, r2, [r1]
 8002c92:	617b      	str	r3, [r7, #20]
   return(result);
 8002c94:	697b      	ldr	r3, [r7, #20]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d1e4      	bne.n	8002c64 <HAL_UART_IRQHandler+0x4fc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	2202      	movs	r2, #2
 8002c9e:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002ca0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002ca4:	4619      	mov	r1, r3
 8002ca6:	6878      	ldr	r0, [r7, #4]
 8002ca8:	f000 f85c 	bl	8002d64 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002cac:	e03f      	b.n	8002d2e <HAL_UART_IRQHandler+0x5c6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002cae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002cb2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d00e      	beq.n	8002cd8 <HAL_UART_IRQHandler+0x570>
 8002cba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002cbe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d008      	beq.n	8002cd8 <HAL_UART_IRQHandler+0x570>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8002cce:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002cd0:	6878      	ldr	r0, [r7, #4]
 8002cd2:	f000 ff57 	bl	8003b84 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002cd6:	e02d      	b.n	8002d34 <HAL_UART_IRQHandler+0x5cc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8002cd8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002cdc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d00e      	beq.n	8002d02 <HAL_UART_IRQHandler+0x59a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8002ce4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002ce8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d008      	beq.n	8002d02 <HAL_UART_IRQHandler+0x59a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d01c      	beq.n	8002d32 <HAL_UART_IRQHandler+0x5ca>
    {
      huart->TxISR(huart);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002cfc:	6878      	ldr	r0, [r7, #4]
 8002cfe:	4798      	blx	r3
    }
    return;
 8002d00:	e017      	b.n	8002d32 <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002d02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002d06:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d012      	beq.n	8002d34 <HAL_UART_IRQHandler+0x5cc>
 8002d0e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002d12:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d00c      	beq.n	8002d34 <HAL_UART_IRQHandler+0x5cc>
  {
    UART_EndTransmit_IT(huart);
 8002d1a:	6878      	ldr	r0, [r7, #4]
 8002d1c:	f000 fd4c 	bl	80037b8 <UART_EndTransmit_IT>
    return;
 8002d20:	e008      	b.n	8002d34 <HAL_UART_IRQHandler+0x5cc>
      return;
 8002d22:	bf00      	nop
 8002d24:	e006      	b.n	8002d34 <HAL_UART_IRQHandler+0x5cc>
    return;
 8002d26:	bf00      	nop
 8002d28:	e004      	b.n	8002d34 <HAL_UART_IRQHandler+0x5cc>
      return;
 8002d2a:	bf00      	nop
 8002d2c:	e002      	b.n	8002d34 <HAL_UART_IRQHandler+0x5cc>
      return;
 8002d2e:	bf00      	nop
 8002d30:	e000      	b.n	8002d34 <HAL_UART_IRQHandler+0x5cc>
    return;
 8002d32:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8002d34:	37e8      	adds	r7, #232	@ 0xe8
 8002d36:	46bd      	mov	sp, r7
 8002d38:	bd80      	pop	{r7, pc}
 8002d3a:	bf00      	nop

08002d3c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002d3c:	b480      	push	{r7}
 8002d3e:	b083      	sub	sp, #12
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002d44:	bf00      	nop
 8002d46:	370c      	adds	r7, #12
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4e:	4770      	bx	lr

08002d50 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002d50:	b480      	push	{r7}
 8002d52:	b083      	sub	sp, #12
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002d58:	bf00      	nop
 8002d5a:	370c      	adds	r7, #12
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d62:	4770      	bx	lr

08002d64 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002d64:	b480      	push	{r7}
 8002d66:	b083      	sub	sp, #12
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
 8002d6c:	460b      	mov	r3, r1
 8002d6e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002d70:	bf00      	nop
 8002d72:	370c      	adds	r7, #12
 8002d74:	46bd      	mov	sp, r7
 8002d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7a:	4770      	bx	lr

08002d7c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002d7c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002d80:	b08a      	sub	sp, #40	@ 0x28
 8002d82:	af00      	add	r7, sp, #0
 8002d84:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002d86:	2300      	movs	r3, #0
 8002d88:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	689a      	ldr	r2, [r3, #8]
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	691b      	ldr	r3, [r3, #16]
 8002d94:	431a      	orrs	r2, r3
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	695b      	ldr	r3, [r3, #20]
 8002d9a:	431a      	orrs	r2, r3
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	69db      	ldr	r3, [r3, #28]
 8002da0:	4313      	orrs	r3, r2
 8002da2:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	681a      	ldr	r2, [r3, #0]
 8002daa:	4bb4      	ldr	r3, [pc, #720]	@ (800307c <UART_SetConfig+0x300>)
 8002dac:	4013      	ands	r3, r2
 8002dae:	68fa      	ldr	r2, [r7, #12]
 8002db0:	6812      	ldr	r2, [r2, #0]
 8002db2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002db4:	430b      	orrs	r3, r1
 8002db6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	685b      	ldr	r3, [r3, #4]
 8002dbe:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	68da      	ldr	r2, [r3, #12]
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	430a      	orrs	r2, r1
 8002dcc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	699b      	ldr	r3, [r3, #24]
 8002dd2:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	4aa9      	ldr	r2, [pc, #676]	@ (8003080 <UART_SetConfig+0x304>)
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d004      	beq.n	8002de8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	6a1b      	ldr	r3, [r3, #32]
 8002de2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002de4:	4313      	orrs	r3, r2
 8002de6:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	689b      	ldr	r3, [r3, #8]
 8002dee:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002df8:	430a      	orrs	r2, r1
 8002dfa:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	4aa0      	ldr	r2, [pc, #640]	@ (8003084 <UART_SetConfig+0x308>)
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d126      	bne.n	8002e54 <UART_SetConfig+0xd8>
 8002e06:	4ba0      	ldr	r3, [pc, #640]	@ (8003088 <UART_SetConfig+0x30c>)
 8002e08:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e0c:	f003 0303 	and.w	r3, r3, #3
 8002e10:	2b03      	cmp	r3, #3
 8002e12:	d81b      	bhi.n	8002e4c <UART_SetConfig+0xd0>
 8002e14:	a201      	add	r2, pc, #4	@ (adr r2, 8002e1c <UART_SetConfig+0xa0>)
 8002e16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e1a:	bf00      	nop
 8002e1c:	08002e2d 	.word	0x08002e2d
 8002e20:	08002e3d 	.word	0x08002e3d
 8002e24:	08002e35 	.word	0x08002e35
 8002e28:	08002e45 	.word	0x08002e45
 8002e2c:	2301      	movs	r3, #1
 8002e2e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002e32:	e080      	b.n	8002f36 <UART_SetConfig+0x1ba>
 8002e34:	2302      	movs	r3, #2
 8002e36:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002e3a:	e07c      	b.n	8002f36 <UART_SetConfig+0x1ba>
 8002e3c:	2304      	movs	r3, #4
 8002e3e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002e42:	e078      	b.n	8002f36 <UART_SetConfig+0x1ba>
 8002e44:	2308      	movs	r3, #8
 8002e46:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002e4a:	e074      	b.n	8002f36 <UART_SetConfig+0x1ba>
 8002e4c:	2310      	movs	r3, #16
 8002e4e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002e52:	e070      	b.n	8002f36 <UART_SetConfig+0x1ba>
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4a8c      	ldr	r2, [pc, #560]	@ (800308c <UART_SetConfig+0x310>)
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d138      	bne.n	8002ed0 <UART_SetConfig+0x154>
 8002e5e:	4b8a      	ldr	r3, [pc, #552]	@ (8003088 <UART_SetConfig+0x30c>)
 8002e60:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e64:	f003 030c 	and.w	r3, r3, #12
 8002e68:	2b0c      	cmp	r3, #12
 8002e6a:	d82d      	bhi.n	8002ec8 <UART_SetConfig+0x14c>
 8002e6c:	a201      	add	r2, pc, #4	@ (adr r2, 8002e74 <UART_SetConfig+0xf8>)
 8002e6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e72:	bf00      	nop
 8002e74:	08002ea9 	.word	0x08002ea9
 8002e78:	08002ec9 	.word	0x08002ec9
 8002e7c:	08002ec9 	.word	0x08002ec9
 8002e80:	08002ec9 	.word	0x08002ec9
 8002e84:	08002eb9 	.word	0x08002eb9
 8002e88:	08002ec9 	.word	0x08002ec9
 8002e8c:	08002ec9 	.word	0x08002ec9
 8002e90:	08002ec9 	.word	0x08002ec9
 8002e94:	08002eb1 	.word	0x08002eb1
 8002e98:	08002ec9 	.word	0x08002ec9
 8002e9c:	08002ec9 	.word	0x08002ec9
 8002ea0:	08002ec9 	.word	0x08002ec9
 8002ea4:	08002ec1 	.word	0x08002ec1
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002eae:	e042      	b.n	8002f36 <UART_SetConfig+0x1ba>
 8002eb0:	2302      	movs	r3, #2
 8002eb2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002eb6:	e03e      	b.n	8002f36 <UART_SetConfig+0x1ba>
 8002eb8:	2304      	movs	r3, #4
 8002eba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002ebe:	e03a      	b.n	8002f36 <UART_SetConfig+0x1ba>
 8002ec0:	2308      	movs	r3, #8
 8002ec2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002ec6:	e036      	b.n	8002f36 <UART_SetConfig+0x1ba>
 8002ec8:	2310      	movs	r3, #16
 8002eca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002ece:	e032      	b.n	8002f36 <UART_SetConfig+0x1ba>
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	4a6a      	ldr	r2, [pc, #424]	@ (8003080 <UART_SetConfig+0x304>)
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	d12a      	bne.n	8002f30 <UART_SetConfig+0x1b4>
 8002eda:	4b6b      	ldr	r3, [pc, #428]	@ (8003088 <UART_SetConfig+0x30c>)
 8002edc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ee0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002ee4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002ee8:	d01a      	beq.n	8002f20 <UART_SetConfig+0x1a4>
 8002eea:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002eee:	d81b      	bhi.n	8002f28 <UART_SetConfig+0x1ac>
 8002ef0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002ef4:	d00c      	beq.n	8002f10 <UART_SetConfig+0x194>
 8002ef6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002efa:	d815      	bhi.n	8002f28 <UART_SetConfig+0x1ac>
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d003      	beq.n	8002f08 <UART_SetConfig+0x18c>
 8002f00:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002f04:	d008      	beq.n	8002f18 <UART_SetConfig+0x19c>
 8002f06:	e00f      	b.n	8002f28 <UART_SetConfig+0x1ac>
 8002f08:	2300      	movs	r3, #0
 8002f0a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002f0e:	e012      	b.n	8002f36 <UART_SetConfig+0x1ba>
 8002f10:	2302      	movs	r3, #2
 8002f12:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002f16:	e00e      	b.n	8002f36 <UART_SetConfig+0x1ba>
 8002f18:	2304      	movs	r3, #4
 8002f1a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002f1e:	e00a      	b.n	8002f36 <UART_SetConfig+0x1ba>
 8002f20:	2308      	movs	r3, #8
 8002f22:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002f26:	e006      	b.n	8002f36 <UART_SetConfig+0x1ba>
 8002f28:	2310      	movs	r3, #16
 8002f2a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002f2e:	e002      	b.n	8002f36 <UART_SetConfig+0x1ba>
 8002f30:	2310      	movs	r3, #16
 8002f32:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	4a51      	ldr	r2, [pc, #324]	@ (8003080 <UART_SetConfig+0x304>)
 8002f3c:	4293      	cmp	r3, r2
 8002f3e:	d17a      	bne.n	8003036 <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002f40:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002f44:	2b08      	cmp	r3, #8
 8002f46:	d824      	bhi.n	8002f92 <UART_SetConfig+0x216>
 8002f48:	a201      	add	r2, pc, #4	@ (adr r2, 8002f50 <UART_SetConfig+0x1d4>)
 8002f4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f4e:	bf00      	nop
 8002f50:	08002f75 	.word	0x08002f75
 8002f54:	08002f93 	.word	0x08002f93
 8002f58:	08002f7d 	.word	0x08002f7d
 8002f5c:	08002f93 	.word	0x08002f93
 8002f60:	08002f83 	.word	0x08002f83
 8002f64:	08002f93 	.word	0x08002f93
 8002f68:	08002f93 	.word	0x08002f93
 8002f6c:	08002f93 	.word	0x08002f93
 8002f70:	08002f8b 	.word	0x08002f8b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002f74:	f7fe ff50 	bl	8001e18 <HAL_RCC_GetPCLK1Freq>
 8002f78:	61f8      	str	r0, [r7, #28]
        break;
 8002f7a:	e010      	b.n	8002f9e <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002f7c:	4b44      	ldr	r3, [pc, #272]	@ (8003090 <UART_SetConfig+0x314>)
 8002f7e:	61fb      	str	r3, [r7, #28]
        break;
 8002f80:	e00d      	b.n	8002f9e <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002f82:	f7fe feb1 	bl	8001ce8 <HAL_RCC_GetSysClockFreq>
 8002f86:	61f8      	str	r0, [r7, #28]
        break;
 8002f88:	e009      	b.n	8002f9e <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002f8a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002f8e:	61fb      	str	r3, [r7, #28]
        break;
 8002f90:	e005      	b.n	8002f9e <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 8002f92:	2300      	movs	r3, #0
 8002f94:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8002f96:	2301      	movs	r3, #1
 8002f98:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8002f9c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002f9e:	69fb      	ldr	r3, [r7, #28]
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	f000 8107 	beq.w	80031b4 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	685a      	ldr	r2, [r3, #4]
 8002faa:	4613      	mov	r3, r2
 8002fac:	005b      	lsls	r3, r3, #1
 8002fae:	4413      	add	r3, r2
 8002fb0:	69fa      	ldr	r2, [r7, #28]
 8002fb2:	429a      	cmp	r2, r3
 8002fb4:	d305      	bcc.n	8002fc2 <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	685b      	ldr	r3, [r3, #4]
 8002fba:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002fbc:	69fa      	ldr	r2, [r7, #28]
 8002fbe:	429a      	cmp	r2, r3
 8002fc0:	d903      	bls.n	8002fca <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8002fc8:	e0f4      	b.n	80031b4 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8002fca:	69fb      	ldr	r3, [r7, #28]
 8002fcc:	2200      	movs	r2, #0
 8002fce:	461c      	mov	r4, r3
 8002fd0:	4615      	mov	r5, r2
 8002fd2:	f04f 0200 	mov.w	r2, #0
 8002fd6:	f04f 0300 	mov.w	r3, #0
 8002fda:	022b      	lsls	r3, r5, #8
 8002fdc:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8002fe0:	0222      	lsls	r2, r4, #8
 8002fe2:	68f9      	ldr	r1, [r7, #12]
 8002fe4:	6849      	ldr	r1, [r1, #4]
 8002fe6:	0849      	lsrs	r1, r1, #1
 8002fe8:	2000      	movs	r0, #0
 8002fea:	4688      	mov	r8, r1
 8002fec:	4681      	mov	r9, r0
 8002fee:	eb12 0a08 	adds.w	sl, r2, r8
 8002ff2:	eb43 0b09 	adc.w	fp, r3, r9
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	685b      	ldr	r3, [r3, #4]
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	603b      	str	r3, [r7, #0]
 8002ffe:	607a      	str	r2, [r7, #4]
 8003000:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003004:	4650      	mov	r0, sl
 8003006:	4659      	mov	r1, fp
 8003008:	f7fd f8e0 	bl	80001cc <__aeabi_uldivmod>
 800300c:	4602      	mov	r2, r0
 800300e:	460b      	mov	r3, r1
 8003010:	4613      	mov	r3, r2
 8003012:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003014:	69bb      	ldr	r3, [r7, #24]
 8003016:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800301a:	d308      	bcc.n	800302e <UART_SetConfig+0x2b2>
 800301c:	69bb      	ldr	r3, [r7, #24]
 800301e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003022:	d204      	bcs.n	800302e <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	69ba      	ldr	r2, [r7, #24]
 800302a:	60da      	str	r2, [r3, #12]
 800302c:	e0c2      	b.n	80031b4 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 800302e:	2301      	movs	r3, #1
 8003030:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003034:	e0be      	b.n	80031b4 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	69db      	ldr	r3, [r3, #28]
 800303a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800303e:	d16a      	bne.n	8003116 <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8003040:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003044:	2b08      	cmp	r3, #8
 8003046:	d834      	bhi.n	80030b2 <UART_SetConfig+0x336>
 8003048:	a201      	add	r2, pc, #4	@ (adr r2, 8003050 <UART_SetConfig+0x2d4>)
 800304a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800304e:	bf00      	nop
 8003050:	08003075 	.word	0x08003075
 8003054:	08003095 	.word	0x08003095
 8003058:	0800309d 	.word	0x0800309d
 800305c:	080030b3 	.word	0x080030b3
 8003060:	080030a3 	.word	0x080030a3
 8003064:	080030b3 	.word	0x080030b3
 8003068:	080030b3 	.word	0x080030b3
 800306c:	080030b3 	.word	0x080030b3
 8003070:	080030ab 	.word	0x080030ab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003074:	f7fe fed0 	bl	8001e18 <HAL_RCC_GetPCLK1Freq>
 8003078:	61f8      	str	r0, [r7, #28]
        break;
 800307a:	e020      	b.n	80030be <UART_SetConfig+0x342>
 800307c:	efff69f3 	.word	0xefff69f3
 8003080:	40008000 	.word	0x40008000
 8003084:	40013800 	.word	0x40013800
 8003088:	40021000 	.word	0x40021000
 800308c:	40004400 	.word	0x40004400
 8003090:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003094:	f7fe fed6 	bl	8001e44 <HAL_RCC_GetPCLK2Freq>
 8003098:	61f8      	str	r0, [r7, #28]
        break;
 800309a:	e010      	b.n	80030be <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800309c:	4b4c      	ldr	r3, [pc, #304]	@ (80031d0 <UART_SetConfig+0x454>)
 800309e:	61fb      	str	r3, [r7, #28]
        break;
 80030a0:	e00d      	b.n	80030be <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80030a2:	f7fe fe21 	bl	8001ce8 <HAL_RCC_GetSysClockFreq>
 80030a6:	61f8      	str	r0, [r7, #28]
        break;
 80030a8:	e009      	b.n	80030be <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80030aa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80030ae:	61fb      	str	r3, [r7, #28]
        break;
 80030b0:	e005      	b.n	80030be <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 80030b2:	2300      	movs	r3, #0
 80030b4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80030b6:	2301      	movs	r3, #1
 80030b8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80030bc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80030be:	69fb      	ldr	r3, [r7, #28]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d077      	beq.n	80031b4 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80030c4:	69fb      	ldr	r3, [r7, #28]
 80030c6:	005a      	lsls	r2, r3, #1
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	685b      	ldr	r3, [r3, #4]
 80030cc:	085b      	lsrs	r3, r3, #1
 80030ce:	441a      	add	r2, r3
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	685b      	ldr	r3, [r3, #4]
 80030d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80030d8:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80030da:	69bb      	ldr	r3, [r7, #24]
 80030dc:	2b0f      	cmp	r3, #15
 80030de:	d916      	bls.n	800310e <UART_SetConfig+0x392>
 80030e0:	69bb      	ldr	r3, [r7, #24]
 80030e2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80030e6:	d212      	bcs.n	800310e <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80030e8:	69bb      	ldr	r3, [r7, #24]
 80030ea:	b29b      	uxth	r3, r3
 80030ec:	f023 030f 	bic.w	r3, r3, #15
 80030f0:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80030f2:	69bb      	ldr	r3, [r7, #24]
 80030f4:	085b      	lsrs	r3, r3, #1
 80030f6:	b29b      	uxth	r3, r3
 80030f8:	f003 0307 	and.w	r3, r3, #7
 80030fc:	b29a      	uxth	r2, r3
 80030fe:	8afb      	ldrh	r3, [r7, #22]
 8003100:	4313      	orrs	r3, r2
 8003102:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	8afa      	ldrh	r2, [r7, #22]
 800310a:	60da      	str	r2, [r3, #12]
 800310c:	e052      	b.n	80031b4 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 800310e:	2301      	movs	r3, #1
 8003110:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003114:	e04e      	b.n	80031b4 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003116:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800311a:	2b08      	cmp	r3, #8
 800311c:	d827      	bhi.n	800316e <UART_SetConfig+0x3f2>
 800311e:	a201      	add	r2, pc, #4	@ (adr r2, 8003124 <UART_SetConfig+0x3a8>)
 8003120:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003124:	08003149 	.word	0x08003149
 8003128:	08003151 	.word	0x08003151
 800312c:	08003159 	.word	0x08003159
 8003130:	0800316f 	.word	0x0800316f
 8003134:	0800315f 	.word	0x0800315f
 8003138:	0800316f 	.word	0x0800316f
 800313c:	0800316f 	.word	0x0800316f
 8003140:	0800316f 	.word	0x0800316f
 8003144:	08003167 	.word	0x08003167
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003148:	f7fe fe66 	bl	8001e18 <HAL_RCC_GetPCLK1Freq>
 800314c:	61f8      	str	r0, [r7, #28]
        break;
 800314e:	e014      	b.n	800317a <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003150:	f7fe fe78 	bl	8001e44 <HAL_RCC_GetPCLK2Freq>
 8003154:	61f8      	str	r0, [r7, #28]
        break;
 8003156:	e010      	b.n	800317a <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003158:	4b1d      	ldr	r3, [pc, #116]	@ (80031d0 <UART_SetConfig+0x454>)
 800315a:	61fb      	str	r3, [r7, #28]
        break;
 800315c:	e00d      	b.n	800317a <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800315e:	f7fe fdc3 	bl	8001ce8 <HAL_RCC_GetSysClockFreq>
 8003162:	61f8      	str	r0, [r7, #28]
        break;
 8003164:	e009      	b.n	800317a <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003166:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800316a:	61fb      	str	r3, [r7, #28]
        break;
 800316c:	e005      	b.n	800317a <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 800316e:	2300      	movs	r3, #0
 8003170:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003172:	2301      	movs	r3, #1
 8003174:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003178:	bf00      	nop
    }

    if (pclk != 0U)
 800317a:	69fb      	ldr	r3, [r7, #28]
 800317c:	2b00      	cmp	r3, #0
 800317e:	d019      	beq.n	80031b4 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	685b      	ldr	r3, [r3, #4]
 8003184:	085a      	lsrs	r2, r3, #1
 8003186:	69fb      	ldr	r3, [r7, #28]
 8003188:	441a      	add	r2, r3
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	685b      	ldr	r3, [r3, #4]
 800318e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003192:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003194:	69bb      	ldr	r3, [r7, #24]
 8003196:	2b0f      	cmp	r3, #15
 8003198:	d909      	bls.n	80031ae <UART_SetConfig+0x432>
 800319a:	69bb      	ldr	r3, [r7, #24]
 800319c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80031a0:	d205      	bcs.n	80031ae <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80031a2:	69bb      	ldr	r3, [r7, #24]
 80031a4:	b29a      	uxth	r2, r3
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	60da      	str	r2, [r3, #12]
 80031ac:	e002      	b.n	80031b4 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 80031ae:	2301      	movs	r3, #1
 80031b0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	2200      	movs	r2, #0
 80031b8:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	2200      	movs	r2, #0
 80031be:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80031c0:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 80031c4:	4618      	mov	r0, r3
 80031c6:	3728      	adds	r7, #40	@ 0x28
 80031c8:	46bd      	mov	sp, r7
 80031ca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80031ce:	bf00      	nop
 80031d0:	00f42400 	.word	0x00f42400

080031d4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80031d4:	b480      	push	{r7}
 80031d6:	b083      	sub	sp, #12
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031e0:	f003 0308 	and.w	r3, r3, #8
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d00a      	beq.n	80031fe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	685b      	ldr	r3, [r3, #4]
 80031ee:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	430a      	orrs	r2, r1
 80031fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003202:	f003 0301 	and.w	r3, r3, #1
 8003206:	2b00      	cmp	r3, #0
 8003208:	d00a      	beq.n	8003220 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	685b      	ldr	r3, [r3, #4]
 8003210:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	430a      	orrs	r2, r1
 800321e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003224:	f003 0302 	and.w	r3, r3, #2
 8003228:	2b00      	cmp	r3, #0
 800322a:	d00a      	beq.n	8003242 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	685b      	ldr	r3, [r3, #4]
 8003232:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	430a      	orrs	r2, r1
 8003240:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003246:	f003 0304 	and.w	r3, r3, #4
 800324a:	2b00      	cmp	r3, #0
 800324c:	d00a      	beq.n	8003264 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	685b      	ldr	r3, [r3, #4]
 8003254:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	430a      	orrs	r2, r1
 8003262:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003268:	f003 0310 	and.w	r3, r3, #16
 800326c:	2b00      	cmp	r3, #0
 800326e:	d00a      	beq.n	8003286 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	689b      	ldr	r3, [r3, #8]
 8003276:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	430a      	orrs	r2, r1
 8003284:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800328a:	f003 0320 	and.w	r3, r3, #32
 800328e:	2b00      	cmp	r3, #0
 8003290:	d00a      	beq.n	80032a8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	689b      	ldr	r3, [r3, #8]
 8003298:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	430a      	orrs	r2, r1
 80032a6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d01a      	beq.n	80032ea <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	685b      	ldr	r3, [r3, #4]
 80032ba:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	430a      	orrs	r2, r1
 80032c8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032ce:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80032d2:	d10a      	bne.n	80032ea <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	685b      	ldr	r3, [r3, #4]
 80032da:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	430a      	orrs	r2, r1
 80032e8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d00a      	beq.n	800330c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	430a      	orrs	r2, r1
 800330a:	605a      	str	r2, [r3, #4]
  }
}
 800330c:	bf00      	nop
 800330e:	370c      	adds	r7, #12
 8003310:	46bd      	mov	sp, r7
 8003312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003316:	4770      	bx	lr

08003318 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	b098      	sub	sp, #96	@ 0x60
 800331c:	af02      	add	r7, sp, #8
 800331e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2200      	movs	r2, #0
 8003324:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003328:	f7fd fc14 	bl	8000b54 <HAL_GetTick>
 800332c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f003 0308 	and.w	r3, r3, #8
 8003338:	2b08      	cmp	r3, #8
 800333a:	d12e      	bne.n	800339a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800333c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003340:	9300      	str	r3, [sp, #0]
 8003342:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003344:	2200      	movs	r2, #0
 8003346:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800334a:	6878      	ldr	r0, [r7, #4]
 800334c:	f000 f88c 	bl	8003468 <UART_WaitOnFlagUntilTimeout>
 8003350:	4603      	mov	r3, r0
 8003352:	2b00      	cmp	r3, #0
 8003354:	d021      	beq.n	800339a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800335c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800335e:	e853 3f00 	ldrex	r3, [r3]
 8003362:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003364:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003366:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800336a:	653b      	str	r3, [r7, #80]	@ 0x50
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	461a      	mov	r2, r3
 8003372:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003374:	647b      	str	r3, [r7, #68]	@ 0x44
 8003376:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003378:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800337a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800337c:	e841 2300 	strex	r3, r2, [r1]
 8003380:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003382:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003384:	2b00      	cmp	r3, #0
 8003386:	d1e6      	bne.n	8003356 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2220      	movs	r2, #32
 800338c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	2200      	movs	r2, #0
 8003392:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003396:	2303      	movs	r3, #3
 8003398:	e062      	b.n	8003460 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f003 0304 	and.w	r3, r3, #4
 80033a4:	2b04      	cmp	r3, #4
 80033a6:	d149      	bne.n	800343c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80033a8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80033ac:	9300      	str	r3, [sp, #0]
 80033ae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80033b0:	2200      	movs	r2, #0
 80033b2:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80033b6:	6878      	ldr	r0, [r7, #4]
 80033b8:	f000 f856 	bl	8003468 <UART_WaitOnFlagUntilTimeout>
 80033bc:	4603      	mov	r3, r0
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d03c      	beq.n	800343c <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033ca:	e853 3f00 	ldrex	r3, [r3]
 80033ce:	623b      	str	r3, [r7, #32]
   return(result);
 80033d0:	6a3b      	ldr	r3, [r7, #32]
 80033d2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80033d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	461a      	mov	r2, r3
 80033de:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80033e0:	633b      	str	r3, [r7, #48]	@ 0x30
 80033e2:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033e4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80033e6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80033e8:	e841 2300 	strex	r3, r2, [r1]
 80033ec:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80033ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d1e6      	bne.n	80033c2 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	3308      	adds	r3, #8
 80033fa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033fc:	693b      	ldr	r3, [r7, #16]
 80033fe:	e853 3f00 	ldrex	r3, [r3]
 8003402:	60fb      	str	r3, [r7, #12]
   return(result);
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	f023 0301 	bic.w	r3, r3, #1
 800340a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	3308      	adds	r3, #8
 8003412:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003414:	61fa      	str	r2, [r7, #28]
 8003416:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003418:	69b9      	ldr	r1, [r7, #24]
 800341a:	69fa      	ldr	r2, [r7, #28]
 800341c:	e841 2300 	strex	r3, r2, [r1]
 8003420:	617b      	str	r3, [r7, #20]
   return(result);
 8003422:	697b      	ldr	r3, [r7, #20]
 8003424:	2b00      	cmp	r3, #0
 8003426:	d1e5      	bne.n	80033f4 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2220      	movs	r2, #32
 800342c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2200      	movs	r2, #0
 8003434:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003438:	2303      	movs	r3, #3
 800343a:	e011      	b.n	8003460 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2220      	movs	r2, #32
 8003440:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2220      	movs	r2, #32
 8003446:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	2200      	movs	r2, #0
 800344e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2200      	movs	r2, #0
 8003454:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2200      	movs	r2, #0
 800345a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800345e:	2300      	movs	r3, #0
}
 8003460:	4618      	mov	r0, r3
 8003462:	3758      	adds	r7, #88	@ 0x58
 8003464:	46bd      	mov	sp, r7
 8003466:	bd80      	pop	{r7, pc}

08003468 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	b084      	sub	sp, #16
 800346c:	af00      	add	r7, sp, #0
 800346e:	60f8      	str	r0, [r7, #12]
 8003470:	60b9      	str	r1, [r7, #8]
 8003472:	603b      	str	r3, [r7, #0]
 8003474:	4613      	mov	r3, r2
 8003476:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003478:	e049      	b.n	800350e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800347a:	69bb      	ldr	r3, [r7, #24]
 800347c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003480:	d045      	beq.n	800350e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003482:	f7fd fb67 	bl	8000b54 <HAL_GetTick>
 8003486:	4602      	mov	r2, r0
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	1ad3      	subs	r3, r2, r3
 800348c:	69ba      	ldr	r2, [r7, #24]
 800348e:	429a      	cmp	r2, r3
 8003490:	d302      	bcc.n	8003498 <UART_WaitOnFlagUntilTimeout+0x30>
 8003492:	69bb      	ldr	r3, [r7, #24]
 8003494:	2b00      	cmp	r3, #0
 8003496:	d101      	bne.n	800349c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003498:	2303      	movs	r3, #3
 800349a:	e048      	b.n	800352e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f003 0304 	and.w	r3, r3, #4
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d031      	beq.n	800350e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	69db      	ldr	r3, [r3, #28]
 80034b0:	f003 0308 	and.w	r3, r3, #8
 80034b4:	2b08      	cmp	r3, #8
 80034b6:	d110      	bne.n	80034da <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	2208      	movs	r2, #8
 80034be:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80034c0:	68f8      	ldr	r0, [r7, #12]
 80034c2:	f000 f8ff 	bl	80036c4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	2208      	movs	r2, #8
 80034ca:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	2200      	movs	r2, #0
 80034d2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80034d6:	2301      	movs	r3, #1
 80034d8:	e029      	b.n	800352e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	69db      	ldr	r3, [r3, #28]
 80034e0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80034e4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80034e8:	d111      	bne.n	800350e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80034f2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80034f4:	68f8      	ldr	r0, [r7, #12]
 80034f6:	f000 f8e5 	bl	80036c4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	2220      	movs	r2, #32
 80034fe:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	2200      	movs	r2, #0
 8003506:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800350a:	2303      	movs	r3, #3
 800350c:	e00f      	b.n	800352e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	69da      	ldr	r2, [r3, #28]
 8003514:	68bb      	ldr	r3, [r7, #8]
 8003516:	4013      	ands	r3, r2
 8003518:	68ba      	ldr	r2, [r7, #8]
 800351a:	429a      	cmp	r2, r3
 800351c:	bf0c      	ite	eq
 800351e:	2301      	moveq	r3, #1
 8003520:	2300      	movne	r3, #0
 8003522:	b2db      	uxtb	r3, r3
 8003524:	461a      	mov	r2, r3
 8003526:	79fb      	ldrb	r3, [r7, #7]
 8003528:	429a      	cmp	r2, r3
 800352a:	d0a6      	beq.n	800347a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800352c:	2300      	movs	r3, #0
}
 800352e:	4618      	mov	r0, r3
 8003530:	3710      	adds	r7, #16
 8003532:	46bd      	mov	sp, r7
 8003534:	bd80      	pop	{r7, pc}
	...

08003538 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003538:	b480      	push	{r7}
 800353a:	b097      	sub	sp, #92	@ 0x5c
 800353c:	af00      	add	r7, sp, #0
 800353e:	60f8      	str	r0, [r7, #12]
 8003540:	60b9      	str	r1, [r7, #8]
 8003542:	4613      	mov	r3, r2
 8003544:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	68ba      	ldr	r2, [r7, #8]
 800354a:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	88fa      	ldrh	r2, [r7, #6]
 8003550:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	88fa      	ldrh	r2, [r7, #6]
 8003558:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	2200      	movs	r2, #0
 8003560:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	689b      	ldr	r3, [r3, #8]
 8003566:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800356a:	d10e      	bne.n	800358a <UART_Start_Receive_IT+0x52>
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	691b      	ldr	r3, [r3, #16]
 8003570:	2b00      	cmp	r3, #0
 8003572:	d105      	bne.n	8003580 <UART_Start_Receive_IT+0x48>
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800357a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800357e:	e02d      	b.n	80035dc <UART_Start_Receive_IT+0xa4>
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	22ff      	movs	r2, #255	@ 0xff
 8003584:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003588:	e028      	b.n	80035dc <UART_Start_Receive_IT+0xa4>
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	689b      	ldr	r3, [r3, #8]
 800358e:	2b00      	cmp	r3, #0
 8003590:	d10d      	bne.n	80035ae <UART_Start_Receive_IT+0x76>
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	691b      	ldr	r3, [r3, #16]
 8003596:	2b00      	cmp	r3, #0
 8003598:	d104      	bne.n	80035a4 <UART_Start_Receive_IT+0x6c>
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	22ff      	movs	r2, #255	@ 0xff
 800359e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80035a2:	e01b      	b.n	80035dc <UART_Start_Receive_IT+0xa4>
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	227f      	movs	r2, #127	@ 0x7f
 80035a8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80035ac:	e016      	b.n	80035dc <UART_Start_Receive_IT+0xa4>
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	689b      	ldr	r3, [r3, #8]
 80035b2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80035b6:	d10d      	bne.n	80035d4 <UART_Start_Receive_IT+0x9c>
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	691b      	ldr	r3, [r3, #16]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d104      	bne.n	80035ca <UART_Start_Receive_IT+0x92>
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	227f      	movs	r2, #127	@ 0x7f
 80035c4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80035c8:	e008      	b.n	80035dc <UART_Start_Receive_IT+0xa4>
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	223f      	movs	r2, #63	@ 0x3f
 80035ce:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80035d2:	e003      	b.n	80035dc <UART_Start_Receive_IT+0xa4>
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	2200      	movs	r2, #0
 80035d8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	2200      	movs	r2, #0
 80035e0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	2222      	movs	r2, #34	@ 0x22
 80035e8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	3308      	adds	r3, #8
 80035f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80035f6:	e853 3f00 	ldrex	r3, [r3]
 80035fa:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80035fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80035fe:	f043 0301 	orr.w	r3, r3, #1
 8003602:	657b      	str	r3, [r7, #84]	@ 0x54
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	3308      	adds	r3, #8
 800360a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800360c:	64ba      	str	r2, [r7, #72]	@ 0x48
 800360e:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003610:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8003612:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003614:	e841 2300 	strex	r3, r2, [r1]
 8003618:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800361a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800361c:	2b00      	cmp	r3, #0
 800361e:	d1e5      	bne.n	80035ec <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	689b      	ldr	r3, [r3, #8]
 8003624:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003628:	d107      	bne.n	800363a <UART_Start_Receive_IT+0x102>
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	691b      	ldr	r3, [r3, #16]
 800362e:	2b00      	cmp	r3, #0
 8003630:	d103      	bne.n	800363a <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	4a21      	ldr	r2, [pc, #132]	@ (80036bc <UART_Start_Receive_IT+0x184>)
 8003636:	669a      	str	r2, [r3, #104]	@ 0x68
 8003638:	e002      	b.n	8003640 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	4a20      	ldr	r2, [pc, #128]	@ (80036c0 <UART_Start_Receive_IT+0x188>)
 800363e:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	691b      	ldr	r3, [r3, #16]
 8003644:	2b00      	cmp	r3, #0
 8003646:	d019      	beq.n	800367c <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800364e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003650:	e853 3f00 	ldrex	r3, [r3]
 8003654:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003656:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003658:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800365c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	461a      	mov	r2, r3
 8003664:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003666:	637b      	str	r3, [r7, #52]	@ 0x34
 8003668:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800366a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800366c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800366e:	e841 2300 	strex	r3, r2, [r1]
 8003672:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8003674:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003676:	2b00      	cmp	r3, #0
 8003678:	d1e6      	bne.n	8003648 <UART_Start_Receive_IT+0x110>
 800367a:	e018      	b.n	80036ae <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003682:	697b      	ldr	r3, [r7, #20]
 8003684:	e853 3f00 	ldrex	r3, [r3]
 8003688:	613b      	str	r3, [r7, #16]
   return(result);
 800368a:	693b      	ldr	r3, [r7, #16]
 800368c:	f043 0320 	orr.w	r3, r3, #32
 8003690:	653b      	str	r3, [r7, #80]	@ 0x50
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	461a      	mov	r2, r3
 8003698:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800369a:	623b      	str	r3, [r7, #32]
 800369c:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800369e:	69f9      	ldr	r1, [r7, #28]
 80036a0:	6a3a      	ldr	r2, [r7, #32]
 80036a2:	e841 2300 	strex	r3, r2, [r1]
 80036a6:	61bb      	str	r3, [r7, #24]
   return(result);
 80036a8:	69bb      	ldr	r3, [r7, #24]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d1e6      	bne.n	800367c <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 80036ae:	2300      	movs	r3, #0
}
 80036b0:	4618      	mov	r0, r3
 80036b2:	375c      	adds	r7, #92	@ 0x5c
 80036b4:	46bd      	mov	sp, r7
 80036b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ba:	4770      	bx	lr
 80036bc:	080039c9 	.word	0x080039c9
 80036c0:	0800380d 	.word	0x0800380d

080036c4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80036c4:	b480      	push	{r7}
 80036c6:	b095      	sub	sp, #84	@ 0x54
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80036d4:	e853 3f00 	ldrex	r3, [r3]
 80036d8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80036da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036dc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80036e0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	461a      	mov	r2, r3
 80036e8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80036ea:	643b      	str	r3, [r7, #64]	@ 0x40
 80036ec:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036ee:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80036f0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80036f2:	e841 2300 	strex	r3, r2, [r1]
 80036f6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80036f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d1e6      	bne.n	80036cc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	3308      	adds	r3, #8
 8003704:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003706:	6a3b      	ldr	r3, [r7, #32]
 8003708:	e853 3f00 	ldrex	r3, [r3]
 800370c:	61fb      	str	r3, [r7, #28]
   return(result);
 800370e:	69fb      	ldr	r3, [r7, #28]
 8003710:	f023 0301 	bic.w	r3, r3, #1
 8003714:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	3308      	adds	r3, #8
 800371c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800371e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003720:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003722:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003724:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003726:	e841 2300 	strex	r3, r2, [r1]
 800372a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800372c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800372e:	2b00      	cmp	r3, #0
 8003730:	d1e5      	bne.n	80036fe <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003736:	2b01      	cmp	r3, #1
 8003738:	d118      	bne.n	800376c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	e853 3f00 	ldrex	r3, [r3]
 8003746:	60bb      	str	r3, [r7, #8]
   return(result);
 8003748:	68bb      	ldr	r3, [r7, #8]
 800374a:	f023 0310 	bic.w	r3, r3, #16
 800374e:	647b      	str	r3, [r7, #68]	@ 0x44
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	461a      	mov	r2, r3
 8003756:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003758:	61bb      	str	r3, [r7, #24]
 800375a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800375c:	6979      	ldr	r1, [r7, #20]
 800375e:	69ba      	ldr	r2, [r7, #24]
 8003760:	e841 2300 	strex	r3, r2, [r1]
 8003764:	613b      	str	r3, [r7, #16]
   return(result);
 8003766:	693b      	ldr	r3, [r7, #16]
 8003768:	2b00      	cmp	r3, #0
 800376a:	d1e6      	bne.n	800373a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2220      	movs	r2, #32
 8003770:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2200      	movs	r2, #0
 8003778:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	2200      	movs	r2, #0
 800377e:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003780:	bf00      	nop
 8003782:	3754      	adds	r7, #84	@ 0x54
 8003784:	46bd      	mov	sp, r7
 8003786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378a:	4770      	bx	lr

0800378c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800378c:	b580      	push	{r7, lr}
 800378e:	b084      	sub	sp, #16
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003798:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	2200      	movs	r2, #0
 800379e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	2200      	movs	r2, #0
 80037a6:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80037aa:	68f8      	ldr	r0, [r7, #12]
 80037ac:	f7ff fad0 	bl	8002d50 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80037b0:	bf00      	nop
 80037b2:	3710      	adds	r7, #16
 80037b4:	46bd      	mov	sp, r7
 80037b6:	bd80      	pop	{r7, pc}

080037b8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b088      	sub	sp, #32
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	e853 3f00 	ldrex	r3, [r3]
 80037cc:	60bb      	str	r3, [r7, #8]
   return(result);
 80037ce:	68bb      	ldr	r3, [r7, #8]
 80037d0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80037d4:	61fb      	str	r3, [r7, #28]
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	461a      	mov	r2, r3
 80037dc:	69fb      	ldr	r3, [r7, #28]
 80037de:	61bb      	str	r3, [r7, #24]
 80037e0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037e2:	6979      	ldr	r1, [r7, #20]
 80037e4:	69ba      	ldr	r2, [r7, #24]
 80037e6:	e841 2300 	strex	r3, r2, [r1]
 80037ea:	613b      	str	r3, [r7, #16]
   return(result);
 80037ec:	693b      	ldr	r3, [r7, #16]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d1e6      	bne.n	80037c0 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	2220      	movs	r2, #32
 80037f6:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2200      	movs	r2, #0
 80037fc:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80037fe:	6878      	ldr	r0, [r7, #4]
 8003800:	f7ff fa9c 	bl	8002d3c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003804:	bf00      	nop
 8003806:	3720      	adds	r7, #32
 8003808:	46bd      	mov	sp, r7
 800380a:	bd80      	pop	{r7, pc}

0800380c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800380c:	b580      	push	{r7, lr}
 800380e:	b09c      	sub	sp, #112	@ 0x70
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800381a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003824:	2b22      	cmp	r3, #34	@ 0x22
 8003826:	f040 80be 	bne.w	80039a6 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8003830:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003834:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8003838:	b2d9      	uxtb	r1, r3
 800383a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800383e:	b2da      	uxtb	r2, r3
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003844:	400a      	ands	r2, r1
 8003846:	b2d2      	uxtb	r2, r2
 8003848:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800384e:	1c5a      	adds	r2, r3, #1
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800385a:	b29b      	uxth	r3, r3
 800385c:	3b01      	subs	r3, #1
 800385e:	b29a      	uxth	r2, r3
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800386c:	b29b      	uxth	r3, r3
 800386e:	2b00      	cmp	r3, #0
 8003870:	f040 80a3 	bne.w	80039ba <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800387a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800387c:	e853 3f00 	ldrex	r3, [r3]
 8003880:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003882:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003884:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003888:	66bb      	str	r3, [r7, #104]	@ 0x68
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	461a      	mov	r2, r3
 8003890:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003892:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003894:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003896:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003898:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800389a:	e841 2300 	strex	r3, r2, [r1]
 800389e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80038a0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d1e6      	bne.n	8003874 <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	3308      	adds	r3, #8
 80038ac:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80038b0:	e853 3f00 	ldrex	r3, [r3]
 80038b4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80038b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80038b8:	f023 0301 	bic.w	r3, r3, #1
 80038bc:	667b      	str	r3, [r7, #100]	@ 0x64
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	3308      	adds	r3, #8
 80038c4:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80038c6:	647a      	str	r2, [r7, #68]	@ 0x44
 80038c8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038ca:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80038cc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80038ce:	e841 2300 	strex	r3, r2, [r1]
 80038d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80038d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d1e5      	bne.n	80038a6 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	2220      	movs	r2, #32
 80038de:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	2200      	movs	r2, #0
 80038e6:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2200      	movs	r2, #0
 80038ec:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	4a34      	ldr	r2, [pc, #208]	@ (80039c4 <UART_RxISR_8BIT+0x1b8>)
 80038f4:	4293      	cmp	r3, r2
 80038f6:	d01f      	beq.n	8003938 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	685b      	ldr	r3, [r3, #4]
 80038fe:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003902:	2b00      	cmp	r3, #0
 8003904:	d018      	beq.n	8003938 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800390c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800390e:	e853 3f00 	ldrex	r3, [r3]
 8003912:	623b      	str	r3, [r7, #32]
   return(result);
 8003914:	6a3b      	ldr	r3, [r7, #32]
 8003916:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800391a:	663b      	str	r3, [r7, #96]	@ 0x60
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	461a      	mov	r2, r3
 8003922:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003924:	633b      	str	r3, [r7, #48]	@ 0x30
 8003926:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003928:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800392a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800392c:	e841 2300 	strex	r3, r2, [r1]
 8003930:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003932:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003934:	2b00      	cmp	r3, #0
 8003936:	d1e6      	bne.n	8003906 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800393c:	2b01      	cmp	r3, #1
 800393e:	d12e      	bne.n	800399e <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2200      	movs	r2, #0
 8003944:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800394c:	693b      	ldr	r3, [r7, #16]
 800394e:	e853 3f00 	ldrex	r3, [r3]
 8003952:	60fb      	str	r3, [r7, #12]
   return(result);
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	f023 0310 	bic.w	r3, r3, #16
 800395a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	461a      	mov	r2, r3
 8003962:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003964:	61fb      	str	r3, [r7, #28]
 8003966:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003968:	69b9      	ldr	r1, [r7, #24]
 800396a:	69fa      	ldr	r2, [r7, #28]
 800396c:	e841 2300 	strex	r3, r2, [r1]
 8003970:	617b      	str	r3, [r7, #20]
   return(result);
 8003972:	697b      	ldr	r3, [r7, #20]
 8003974:	2b00      	cmp	r3, #0
 8003976:	d1e6      	bne.n	8003946 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	69db      	ldr	r3, [r3, #28]
 800397e:	f003 0310 	and.w	r3, r3, #16
 8003982:	2b10      	cmp	r3, #16
 8003984:	d103      	bne.n	800398e <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	2210      	movs	r2, #16
 800398c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8003994:	4619      	mov	r1, r3
 8003996:	6878      	ldr	r0, [r7, #4]
 8003998:	f7ff f9e4 	bl	8002d64 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800399c:	e00d      	b.n	80039ba <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 800399e:	6878      	ldr	r0, [r7, #4]
 80039a0:	f7fc fd8c 	bl	80004bc <HAL_UART_RxCpltCallback>
}
 80039a4:	e009      	b.n	80039ba <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	8b1b      	ldrh	r3, [r3, #24]
 80039ac:	b29a      	uxth	r2, r3
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f042 0208 	orr.w	r2, r2, #8
 80039b6:	b292      	uxth	r2, r2
 80039b8:	831a      	strh	r2, [r3, #24]
}
 80039ba:	bf00      	nop
 80039bc:	3770      	adds	r7, #112	@ 0x70
 80039be:	46bd      	mov	sp, r7
 80039c0:	bd80      	pop	{r7, pc}
 80039c2:	bf00      	nop
 80039c4:	40008000 	.word	0x40008000

080039c8 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b09c      	sub	sp, #112	@ 0x70
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80039d6:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80039e0:	2b22      	cmp	r3, #34	@ 0x22
 80039e2:	f040 80be 	bne.w	8003b62 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80039ec:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039f4:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 80039f6:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 80039fa:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80039fe:	4013      	ands	r3, r2
 8003a00:	b29a      	uxth	r2, r3
 8003a02:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003a04:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a0a:	1c9a      	adds	r2, r3, #2
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003a16:	b29b      	uxth	r3, r3
 8003a18:	3b01      	subs	r3, #1
 8003a1a:	b29a      	uxth	r2, r3
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003a28:	b29b      	uxth	r3, r3
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	f040 80a3 	bne.w	8003b76 <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a36:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003a38:	e853 3f00 	ldrex	r3, [r3]
 8003a3c:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8003a3e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003a40:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003a44:	667b      	str	r3, [r7, #100]	@ 0x64
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	461a      	mov	r2, r3
 8003a4c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003a4e:	657b      	str	r3, [r7, #84]	@ 0x54
 8003a50:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a52:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8003a54:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8003a56:	e841 2300 	strex	r3, r2, [r1]
 8003a5a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8003a5c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d1e6      	bne.n	8003a30 <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	3308      	adds	r3, #8
 8003a68:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a6a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a6c:	e853 3f00 	ldrex	r3, [r3]
 8003a70:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003a72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a74:	f023 0301 	bic.w	r3, r3, #1
 8003a78:	663b      	str	r3, [r7, #96]	@ 0x60
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	3308      	adds	r3, #8
 8003a80:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8003a82:	643a      	str	r2, [r7, #64]	@ 0x40
 8003a84:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a86:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003a88:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003a8a:	e841 2300 	strex	r3, r2, [r1]
 8003a8e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003a90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d1e5      	bne.n	8003a62 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	2220      	movs	r2, #32
 8003a9a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4a34      	ldr	r2, [pc, #208]	@ (8003b80 <UART_RxISR_16BIT+0x1b8>)
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	d01f      	beq.n	8003af4 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	685b      	ldr	r3, [r3, #4]
 8003aba:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d018      	beq.n	8003af4 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ac8:	6a3b      	ldr	r3, [r7, #32]
 8003aca:	e853 3f00 	ldrex	r3, [r3]
 8003ace:	61fb      	str	r3, [r7, #28]
   return(result);
 8003ad0:	69fb      	ldr	r3, [r7, #28]
 8003ad2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003ad6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	461a      	mov	r2, r3
 8003ade:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003ae0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003ae2:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ae4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003ae6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003ae8:	e841 2300 	strex	r3, r2, [r1]
 8003aec:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003aee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d1e6      	bne.n	8003ac2 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003af8:	2b01      	cmp	r3, #1
 8003afa:	d12e      	bne.n	8003b5a <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2200      	movs	r2, #0
 8003b00:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	e853 3f00 	ldrex	r3, [r3]
 8003b0e:	60bb      	str	r3, [r7, #8]
   return(result);
 8003b10:	68bb      	ldr	r3, [r7, #8]
 8003b12:	f023 0310 	bic.w	r3, r3, #16
 8003b16:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	461a      	mov	r2, r3
 8003b1e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003b20:	61bb      	str	r3, [r7, #24]
 8003b22:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b24:	6979      	ldr	r1, [r7, #20]
 8003b26:	69ba      	ldr	r2, [r7, #24]
 8003b28:	e841 2300 	strex	r3, r2, [r1]
 8003b2c:	613b      	str	r3, [r7, #16]
   return(result);
 8003b2e:	693b      	ldr	r3, [r7, #16]
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d1e6      	bne.n	8003b02 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	69db      	ldr	r3, [r3, #28]
 8003b3a:	f003 0310 	and.w	r3, r3, #16
 8003b3e:	2b10      	cmp	r3, #16
 8003b40:	d103      	bne.n	8003b4a <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	2210      	movs	r2, #16
 8003b48:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8003b50:	4619      	mov	r1, r3
 8003b52:	6878      	ldr	r0, [r7, #4]
 8003b54:	f7ff f906 	bl	8002d64 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003b58:	e00d      	b.n	8003b76 <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8003b5a:	6878      	ldr	r0, [r7, #4]
 8003b5c:	f7fc fcae 	bl	80004bc <HAL_UART_RxCpltCallback>
}
 8003b60:	e009      	b.n	8003b76 <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	8b1b      	ldrh	r3, [r3, #24]
 8003b68:	b29a      	uxth	r2, r3
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f042 0208 	orr.w	r2, r2, #8
 8003b72:	b292      	uxth	r2, r2
 8003b74:	831a      	strh	r2, [r3, #24]
}
 8003b76:	bf00      	nop
 8003b78:	3770      	adds	r7, #112	@ 0x70
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	bd80      	pop	{r7, pc}
 8003b7e:	bf00      	nop
 8003b80:	40008000 	.word	0x40008000

08003b84 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003b84:	b480      	push	{r7}
 8003b86:	b083      	sub	sp, #12
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003b8c:	bf00      	nop
 8003b8e:	370c      	adds	r7, #12
 8003b90:	46bd      	mov	sp, r7
 8003b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b96:	4770      	bx	lr

08003b98 <memset>:
 8003b98:	4402      	add	r2, r0
 8003b9a:	4603      	mov	r3, r0
 8003b9c:	4293      	cmp	r3, r2
 8003b9e:	d100      	bne.n	8003ba2 <memset+0xa>
 8003ba0:	4770      	bx	lr
 8003ba2:	f803 1b01 	strb.w	r1, [r3], #1
 8003ba6:	e7f9      	b.n	8003b9c <memset+0x4>

08003ba8 <__libc_init_array>:
 8003ba8:	b570      	push	{r4, r5, r6, lr}
 8003baa:	4d0d      	ldr	r5, [pc, #52]	@ (8003be0 <__libc_init_array+0x38>)
 8003bac:	4c0d      	ldr	r4, [pc, #52]	@ (8003be4 <__libc_init_array+0x3c>)
 8003bae:	1b64      	subs	r4, r4, r5
 8003bb0:	10a4      	asrs	r4, r4, #2
 8003bb2:	2600      	movs	r6, #0
 8003bb4:	42a6      	cmp	r6, r4
 8003bb6:	d109      	bne.n	8003bcc <__libc_init_array+0x24>
 8003bb8:	4d0b      	ldr	r5, [pc, #44]	@ (8003be8 <__libc_init_array+0x40>)
 8003bba:	4c0c      	ldr	r4, [pc, #48]	@ (8003bec <__libc_init_array+0x44>)
 8003bbc:	f000 f818 	bl	8003bf0 <_init>
 8003bc0:	1b64      	subs	r4, r4, r5
 8003bc2:	10a4      	asrs	r4, r4, #2
 8003bc4:	2600      	movs	r6, #0
 8003bc6:	42a6      	cmp	r6, r4
 8003bc8:	d105      	bne.n	8003bd6 <__libc_init_array+0x2e>
 8003bca:	bd70      	pop	{r4, r5, r6, pc}
 8003bcc:	f855 3b04 	ldr.w	r3, [r5], #4
 8003bd0:	4798      	blx	r3
 8003bd2:	3601      	adds	r6, #1
 8003bd4:	e7ee      	b.n	8003bb4 <__libc_init_array+0xc>
 8003bd6:	f855 3b04 	ldr.w	r3, [r5], #4
 8003bda:	4798      	blx	r3
 8003bdc:	3601      	adds	r6, #1
 8003bde:	e7f2      	b.n	8003bc6 <__libc_init_array+0x1e>
 8003be0:	08003c58 	.word	0x08003c58
 8003be4:	08003c58 	.word	0x08003c58
 8003be8:	08003c58 	.word	0x08003c58
 8003bec:	08003c5c 	.word	0x08003c5c

08003bf0 <_init>:
 8003bf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bf2:	bf00      	nop
 8003bf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003bf6:	bc08      	pop	{r3}
 8003bf8:	469e      	mov	lr, r3
 8003bfa:	4770      	bx	lr

08003bfc <_fini>:
 8003bfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bfe:	bf00      	nop
 8003c00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c02:	bc08      	pop	{r3}
 8003c04:	469e      	mov	lr, r3
 8003c06:	4770      	bx	lr
