
weather_node_L4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000747c  0800018c  0800018c  0000118c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08007608  08007608  00008608  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007650  08007650  0000900c  2**0
                  CONTENTS
  4 .ARM          00000008  08007650  08007650  00008650  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007658  08007658  0000900c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007658  08007658  00008658  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800765c  0800765c  0000865c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08007660  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000290  2000000c  0800766c  0000900c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000029c  0800766c  0000929c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000900c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000186ce  00000000  00000000  0000903c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000301b  00000000  00000000  0002170a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001688  00000000  00000000  00024728  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000011ac  00000000  00000000  00025db0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002381d  00000000  00000000  00026f5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019c33  00000000  00000000  0004a779  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000df423  00000000  00000000  000643ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001437cf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006224  00000000  00000000  00143814  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  00149a38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	@ (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	2000000c 	.word	0x2000000c
 80001a8:	00000000 	.word	0x00000000
 80001ac:	080075f0 	.word	0x080075f0

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	@ (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	@ (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	@ (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000010 	.word	0x20000010
 80001c8:	080075f0 	.word	0x080075f0

080001cc <__aeabi_drsub>:
 80001cc:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001d0:	e002      	b.n	80001d8 <__adddf3>
 80001d2:	bf00      	nop

080001d4 <__aeabi_dsub>:
 80001d4:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001d8 <__adddf3>:
 80001d8:	b530      	push	{r4, r5, lr}
 80001da:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001de:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001e2:	ea94 0f05 	teq	r4, r5
 80001e6:	bf08      	it	eq
 80001e8:	ea90 0f02 	teqeq	r0, r2
 80001ec:	bf1f      	itttt	ne
 80001ee:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001f2:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001fa:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fe:	f000 80e2 	beq.w	80003c6 <__adddf3+0x1ee>
 8000202:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000206:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800020a:	bfb8      	it	lt
 800020c:	426d      	neglt	r5, r5
 800020e:	dd0c      	ble.n	800022a <__adddf3+0x52>
 8000210:	442c      	add	r4, r5
 8000212:	ea80 0202 	eor.w	r2, r0, r2
 8000216:	ea81 0303 	eor.w	r3, r1, r3
 800021a:	ea82 0000 	eor.w	r0, r2, r0
 800021e:	ea83 0101 	eor.w	r1, r3, r1
 8000222:	ea80 0202 	eor.w	r2, r0, r2
 8000226:	ea81 0303 	eor.w	r3, r1, r3
 800022a:	2d36      	cmp	r5, #54	@ 0x36
 800022c:	bf88      	it	hi
 800022e:	bd30      	pophi	{r4, r5, pc}
 8000230:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000234:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000238:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 800023c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000240:	d002      	beq.n	8000248 <__adddf3+0x70>
 8000242:	4240      	negs	r0, r0
 8000244:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000248:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 800024c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000250:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000254:	d002      	beq.n	800025c <__adddf3+0x84>
 8000256:	4252      	negs	r2, r2
 8000258:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800025c:	ea94 0f05 	teq	r4, r5
 8000260:	f000 80a7 	beq.w	80003b2 <__adddf3+0x1da>
 8000264:	f1a4 0401 	sub.w	r4, r4, #1
 8000268:	f1d5 0e20 	rsbs	lr, r5, #32
 800026c:	db0d      	blt.n	800028a <__adddf3+0xb2>
 800026e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000272:	fa22 f205 	lsr.w	r2, r2, r5
 8000276:	1880      	adds	r0, r0, r2
 8000278:	f141 0100 	adc.w	r1, r1, #0
 800027c:	fa03 f20e 	lsl.w	r2, r3, lr
 8000280:	1880      	adds	r0, r0, r2
 8000282:	fa43 f305 	asr.w	r3, r3, r5
 8000286:	4159      	adcs	r1, r3
 8000288:	e00e      	b.n	80002a8 <__adddf3+0xd0>
 800028a:	f1a5 0520 	sub.w	r5, r5, #32
 800028e:	f10e 0e20 	add.w	lr, lr, #32
 8000292:	2a01      	cmp	r2, #1
 8000294:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000298:	bf28      	it	cs
 800029a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029e:	fa43 f305 	asr.w	r3, r3, r5
 80002a2:	18c0      	adds	r0, r0, r3
 80002a4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002ac:	d507      	bpl.n	80002be <__adddf3+0xe6>
 80002ae:	f04f 0e00 	mov.w	lr, #0
 80002b2:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b6:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002ba:	eb6e 0101 	sbc.w	r1, lr, r1
 80002be:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002c2:	d31b      	bcc.n	80002fc <__adddf3+0x124>
 80002c4:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002c8:	d30c      	bcc.n	80002e4 <__adddf3+0x10c>
 80002ca:	0849      	lsrs	r1, r1, #1
 80002cc:	ea5f 0030 	movs.w	r0, r0, rrx
 80002d0:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d4:	f104 0401 	add.w	r4, r4, #1
 80002d8:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002dc:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002e0:	f080 809a 	bcs.w	8000418 <__adddf3+0x240>
 80002e4:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002e8:	bf08      	it	eq
 80002ea:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ee:	f150 0000 	adcs.w	r0, r0, #0
 80002f2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f6:	ea41 0105 	orr.w	r1, r1, r5
 80002fa:	bd30      	pop	{r4, r5, pc}
 80002fc:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000300:	4140      	adcs	r0, r0
 8000302:	eb41 0101 	adc.w	r1, r1, r1
 8000306:	3c01      	subs	r4, #1
 8000308:	bf28      	it	cs
 800030a:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800030e:	d2e9      	bcs.n	80002e4 <__adddf3+0x10c>
 8000310:	f091 0f00 	teq	r1, #0
 8000314:	bf04      	itt	eq
 8000316:	4601      	moveq	r1, r0
 8000318:	2000      	moveq	r0, #0
 800031a:	fab1 f381 	clz	r3, r1
 800031e:	bf08      	it	eq
 8000320:	3320      	addeq	r3, #32
 8000322:	f1a3 030b 	sub.w	r3, r3, #11
 8000326:	f1b3 0220 	subs.w	r2, r3, #32
 800032a:	da0c      	bge.n	8000346 <__adddf3+0x16e>
 800032c:	320c      	adds	r2, #12
 800032e:	dd08      	ble.n	8000342 <__adddf3+0x16a>
 8000330:	f102 0c14 	add.w	ip, r2, #20
 8000334:	f1c2 020c 	rsb	r2, r2, #12
 8000338:	fa01 f00c 	lsl.w	r0, r1, ip
 800033c:	fa21 f102 	lsr.w	r1, r1, r2
 8000340:	e00c      	b.n	800035c <__adddf3+0x184>
 8000342:	f102 0214 	add.w	r2, r2, #20
 8000346:	bfd8      	it	le
 8000348:	f1c2 0c20 	rsble	ip, r2, #32
 800034c:	fa01 f102 	lsl.w	r1, r1, r2
 8000350:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000354:	bfdc      	itt	le
 8000356:	ea41 010c 	orrle.w	r1, r1, ip
 800035a:	4090      	lslle	r0, r2
 800035c:	1ae4      	subs	r4, r4, r3
 800035e:	bfa2      	ittt	ge
 8000360:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000364:	4329      	orrge	r1, r5
 8000366:	bd30      	popge	{r4, r5, pc}
 8000368:	ea6f 0404 	mvn.w	r4, r4
 800036c:	3c1f      	subs	r4, #31
 800036e:	da1c      	bge.n	80003aa <__adddf3+0x1d2>
 8000370:	340c      	adds	r4, #12
 8000372:	dc0e      	bgt.n	8000392 <__adddf3+0x1ba>
 8000374:	f104 0414 	add.w	r4, r4, #20
 8000378:	f1c4 0220 	rsb	r2, r4, #32
 800037c:	fa20 f004 	lsr.w	r0, r0, r4
 8000380:	fa01 f302 	lsl.w	r3, r1, r2
 8000384:	ea40 0003 	orr.w	r0, r0, r3
 8000388:	fa21 f304 	lsr.w	r3, r1, r4
 800038c:	ea45 0103 	orr.w	r1, r5, r3
 8000390:	bd30      	pop	{r4, r5, pc}
 8000392:	f1c4 040c 	rsb	r4, r4, #12
 8000396:	f1c4 0220 	rsb	r2, r4, #32
 800039a:	fa20 f002 	lsr.w	r0, r0, r2
 800039e:	fa01 f304 	lsl.w	r3, r1, r4
 80003a2:	ea40 0003 	orr.w	r0, r0, r3
 80003a6:	4629      	mov	r1, r5
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	fa21 f004 	lsr.w	r0, r1, r4
 80003ae:	4629      	mov	r1, r5
 80003b0:	bd30      	pop	{r4, r5, pc}
 80003b2:	f094 0f00 	teq	r4, #0
 80003b6:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003ba:	bf06      	itte	eq
 80003bc:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003c0:	3401      	addeq	r4, #1
 80003c2:	3d01      	subne	r5, #1
 80003c4:	e74e      	b.n	8000264 <__adddf3+0x8c>
 80003c6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ca:	bf18      	it	ne
 80003cc:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d0:	d029      	beq.n	8000426 <__adddf3+0x24e>
 80003d2:	ea94 0f05 	teq	r4, r5
 80003d6:	bf08      	it	eq
 80003d8:	ea90 0f02 	teqeq	r0, r2
 80003dc:	d005      	beq.n	80003ea <__adddf3+0x212>
 80003de:	ea54 0c00 	orrs.w	ip, r4, r0
 80003e2:	bf04      	itt	eq
 80003e4:	4619      	moveq	r1, r3
 80003e6:	4610      	moveq	r0, r2
 80003e8:	bd30      	pop	{r4, r5, pc}
 80003ea:	ea91 0f03 	teq	r1, r3
 80003ee:	bf1e      	ittt	ne
 80003f0:	2100      	movne	r1, #0
 80003f2:	2000      	movne	r0, #0
 80003f4:	bd30      	popne	{r4, r5, pc}
 80003f6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003fa:	d105      	bne.n	8000408 <__adddf3+0x230>
 80003fc:	0040      	lsls	r0, r0, #1
 80003fe:	4149      	adcs	r1, r1
 8000400:	bf28      	it	cs
 8000402:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000406:	bd30      	pop	{r4, r5, pc}
 8000408:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 800040c:	bf3c      	itt	cc
 800040e:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000412:	bd30      	popcc	{r4, r5, pc}
 8000414:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000418:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 800041c:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000420:	f04f 0000 	mov.w	r0, #0
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042a:	bf1a      	itte	ne
 800042c:	4619      	movne	r1, r3
 800042e:	4610      	movne	r0, r2
 8000430:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000434:	bf1c      	itt	ne
 8000436:	460b      	movne	r3, r1
 8000438:	4602      	movne	r2, r0
 800043a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043e:	bf06      	itte	eq
 8000440:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000444:	ea91 0f03 	teqeq	r1, r3
 8000448:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	bf00      	nop

08000450 <__aeabi_ui2d>:
 8000450:	f090 0f00 	teq	r0, #0
 8000454:	bf04      	itt	eq
 8000456:	2100      	moveq	r1, #0
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000460:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000464:	f04f 0500 	mov.w	r5, #0
 8000468:	f04f 0100 	mov.w	r1, #0
 800046c:	e750      	b.n	8000310 <__adddf3+0x138>
 800046e:	bf00      	nop

08000470 <__aeabi_i2d>:
 8000470:	f090 0f00 	teq	r0, #0
 8000474:	bf04      	itt	eq
 8000476:	2100      	moveq	r1, #0
 8000478:	4770      	bxeq	lr
 800047a:	b530      	push	{r4, r5, lr}
 800047c:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000480:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000484:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000488:	bf48      	it	mi
 800048a:	4240      	negmi	r0, r0
 800048c:	f04f 0100 	mov.w	r1, #0
 8000490:	e73e      	b.n	8000310 <__adddf3+0x138>
 8000492:	bf00      	nop

08000494 <__aeabi_f2d>:
 8000494:	0042      	lsls	r2, r0, #1
 8000496:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800049a:	ea4f 0131 	mov.w	r1, r1, rrx
 800049e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004a2:	bf1f      	itttt	ne
 80004a4:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004a8:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004ac:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004b0:	4770      	bxne	lr
 80004b2:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004b6:	bf08      	it	eq
 80004b8:	4770      	bxeq	lr
 80004ba:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004be:	bf04      	itt	eq
 80004c0:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004cc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004d0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004d4:	e71c      	b.n	8000310 <__adddf3+0x138>
 80004d6:	bf00      	nop

080004d8 <__aeabi_ul2d>:
 80004d8:	ea50 0201 	orrs.w	r2, r0, r1
 80004dc:	bf08      	it	eq
 80004de:	4770      	bxeq	lr
 80004e0:	b530      	push	{r4, r5, lr}
 80004e2:	f04f 0500 	mov.w	r5, #0
 80004e6:	e00a      	b.n	80004fe <__aeabi_l2d+0x16>

080004e8 <__aeabi_l2d>:
 80004e8:	ea50 0201 	orrs.w	r2, r0, r1
 80004ec:	bf08      	it	eq
 80004ee:	4770      	bxeq	lr
 80004f0:	b530      	push	{r4, r5, lr}
 80004f2:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80004f6:	d502      	bpl.n	80004fe <__aeabi_l2d+0x16>
 80004f8:	4240      	negs	r0, r0
 80004fa:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fe:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000502:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000506:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800050a:	f43f aed8 	beq.w	80002be <__adddf3+0xe6>
 800050e:	f04f 0203 	mov.w	r2, #3
 8000512:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000516:	bf18      	it	ne
 8000518:	3203      	addne	r2, #3
 800051a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051e:	bf18      	it	ne
 8000520:	3203      	addne	r2, #3
 8000522:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000526:	f1c2 0320 	rsb	r3, r2, #32
 800052a:	fa00 fc03 	lsl.w	ip, r0, r3
 800052e:	fa20 f002 	lsr.w	r0, r0, r2
 8000532:	fa01 fe03 	lsl.w	lr, r1, r3
 8000536:	ea40 000e 	orr.w	r0, r0, lr
 800053a:	fa21 f102 	lsr.w	r1, r1, r2
 800053e:	4414      	add	r4, r2
 8000540:	e6bd      	b.n	80002be <__adddf3+0xe6>
 8000542:	bf00      	nop

08000544 <__aeabi_dmul>:
 8000544:	b570      	push	{r4, r5, r6, lr}
 8000546:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800054a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800054e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000552:	bf1d      	ittte	ne
 8000554:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000558:	ea94 0f0c 	teqne	r4, ip
 800055c:	ea95 0f0c 	teqne	r5, ip
 8000560:	f000 f8de 	bleq	8000720 <__aeabi_dmul+0x1dc>
 8000564:	442c      	add	r4, r5
 8000566:	ea81 0603 	eor.w	r6, r1, r3
 800056a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000572:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000576:	bf18      	it	ne
 8000578:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 800057c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000580:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000584:	d038      	beq.n	80005f8 <__aeabi_dmul+0xb4>
 8000586:	fba0 ce02 	umull	ip, lr, r0, r2
 800058a:	f04f 0500 	mov.w	r5, #0
 800058e:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000592:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000596:	fbe0 e503 	umlal	lr, r5, r0, r3
 800059a:	f04f 0600 	mov.w	r6, #0
 800059e:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005a2:	f09c 0f00 	teq	ip, #0
 80005a6:	bf18      	it	ne
 80005a8:	f04e 0e01 	orrne.w	lr, lr, #1
 80005ac:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005b0:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005b4:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005b8:	d204      	bcs.n	80005c4 <__aeabi_dmul+0x80>
 80005ba:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005be:	416d      	adcs	r5, r5
 80005c0:	eb46 0606 	adc.w	r6, r6, r6
 80005c4:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c8:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005cc:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005d0:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d4:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d8:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005dc:	bf88      	it	hi
 80005de:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005e2:	d81e      	bhi.n	8000622 <__aeabi_dmul+0xde>
 80005e4:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005e8:	bf08      	it	eq
 80005ea:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ee:	f150 0000 	adcs.w	r0, r0, #0
 80005f2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f6:	bd70      	pop	{r4, r5, r6, pc}
 80005f8:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80005fc:	ea46 0101 	orr.w	r1, r6, r1
 8000600:	ea40 0002 	orr.w	r0, r0, r2
 8000604:	ea81 0103 	eor.w	r1, r1, r3
 8000608:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800060c:	bfc2      	ittt	gt
 800060e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000612:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000616:	bd70      	popgt	{r4, r5, r6, pc}
 8000618:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800061c:	f04f 0e00 	mov.w	lr, #0
 8000620:	3c01      	subs	r4, #1
 8000622:	f300 80ab 	bgt.w	800077c <__aeabi_dmul+0x238>
 8000626:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800062a:	bfde      	ittt	le
 800062c:	2000      	movle	r0, #0
 800062e:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000632:	bd70      	pople	{r4, r5, r6, pc}
 8000634:	f1c4 0400 	rsb	r4, r4, #0
 8000638:	3c20      	subs	r4, #32
 800063a:	da35      	bge.n	80006a8 <__aeabi_dmul+0x164>
 800063c:	340c      	adds	r4, #12
 800063e:	dc1b      	bgt.n	8000678 <__aeabi_dmul+0x134>
 8000640:	f104 0414 	add.w	r4, r4, #20
 8000644:	f1c4 0520 	rsb	r5, r4, #32
 8000648:	fa00 f305 	lsl.w	r3, r0, r5
 800064c:	fa20 f004 	lsr.w	r0, r0, r4
 8000650:	fa01 f205 	lsl.w	r2, r1, r5
 8000654:	ea40 0002 	orr.w	r0, r0, r2
 8000658:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 800065c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000660:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000664:	fa21 f604 	lsr.w	r6, r1, r4
 8000668:	eb42 0106 	adc.w	r1, r2, r6
 800066c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000670:	bf08      	it	eq
 8000672:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000676:	bd70      	pop	{r4, r5, r6, pc}
 8000678:	f1c4 040c 	rsb	r4, r4, #12
 800067c:	f1c4 0520 	rsb	r5, r4, #32
 8000680:	fa00 f304 	lsl.w	r3, r0, r4
 8000684:	fa20 f005 	lsr.w	r0, r0, r5
 8000688:	fa01 f204 	lsl.w	r2, r1, r4
 800068c:	ea40 0002 	orr.w	r0, r0, r2
 8000690:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000694:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000698:	f141 0100 	adc.w	r1, r1, #0
 800069c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a0:	bf08      	it	eq
 80006a2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a6:	bd70      	pop	{r4, r5, r6, pc}
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f205 	lsl.w	r2, r0, r5
 80006b0:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b4:	fa20 f304 	lsr.w	r3, r0, r4
 80006b8:	fa01 f205 	lsl.w	r2, r1, r5
 80006bc:	ea43 0302 	orr.w	r3, r3, r2
 80006c0:	fa21 f004 	lsr.w	r0, r1, r4
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c8:	fa21 f204 	lsr.w	r2, r1, r4
 80006cc:	ea20 0002 	bic.w	r0, r0, r2
 80006d0:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d8:	bf08      	it	eq
 80006da:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006de:	bd70      	pop	{r4, r5, r6, pc}
 80006e0:	f094 0f00 	teq	r4, #0
 80006e4:	d10f      	bne.n	8000706 <__aeabi_dmul+0x1c2>
 80006e6:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006ea:	0040      	lsls	r0, r0, #1
 80006ec:	eb41 0101 	adc.w	r1, r1, r1
 80006f0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80006f4:	bf08      	it	eq
 80006f6:	3c01      	subeq	r4, #1
 80006f8:	d0f7      	beq.n	80006ea <__aeabi_dmul+0x1a6>
 80006fa:	ea41 0106 	orr.w	r1, r1, r6
 80006fe:	f095 0f00 	teq	r5, #0
 8000702:	bf18      	it	ne
 8000704:	4770      	bxne	lr
 8000706:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800070a:	0052      	lsls	r2, r2, #1
 800070c:	eb43 0303 	adc.w	r3, r3, r3
 8000710:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000714:	bf08      	it	eq
 8000716:	3d01      	subeq	r5, #1
 8000718:	d0f7      	beq.n	800070a <__aeabi_dmul+0x1c6>
 800071a:	ea43 0306 	orr.w	r3, r3, r6
 800071e:	4770      	bx	lr
 8000720:	ea94 0f0c 	teq	r4, ip
 8000724:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000728:	bf18      	it	ne
 800072a:	ea95 0f0c 	teqne	r5, ip
 800072e:	d00c      	beq.n	800074a <__aeabi_dmul+0x206>
 8000730:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000734:	bf18      	it	ne
 8000736:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800073a:	d1d1      	bne.n	80006e0 <__aeabi_dmul+0x19c>
 800073c:	ea81 0103 	eor.w	r1, r1, r3
 8000740:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000744:	f04f 0000 	mov.w	r0, #0
 8000748:	bd70      	pop	{r4, r5, r6, pc}
 800074a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074e:	bf06      	itte	eq
 8000750:	4610      	moveq	r0, r2
 8000752:	4619      	moveq	r1, r3
 8000754:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000758:	d019      	beq.n	800078e <__aeabi_dmul+0x24a>
 800075a:	ea94 0f0c 	teq	r4, ip
 800075e:	d102      	bne.n	8000766 <__aeabi_dmul+0x222>
 8000760:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000764:	d113      	bne.n	800078e <__aeabi_dmul+0x24a>
 8000766:	ea95 0f0c 	teq	r5, ip
 800076a:	d105      	bne.n	8000778 <__aeabi_dmul+0x234>
 800076c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000770:	bf1c      	itt	ne
 8000772:	4610      	movne	r0, r2
 8000774:	4619      	movne	r1, r3
 8000776:	d10a      	bne.n	800078e <__aeabi_dmul+0x24a>
 8000778:	ea81 0103 	eor.w	r1, r1, r3
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000780:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000784:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000788:	f04f 0000 	mov.w	r0, #0
 800078c:	bd70      	pop	{r4, r5, r6, pc}
 800078e:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000792:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000796:	bd70      	pop	{r4, r5, r6, pc}

08000798 <__aeabi_ddiv>:
 8000798:	b570      	push	{r4, r5, r6, lr}
 800079a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800079e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007a2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a6:	bf1d      	ittte	ne
 80007a8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007ac:	ea94 0f0c 	teqne	r4, ip
 80007b0:	ea95 0f0c 	teqne	r5, ip
 80007b4:	f000 f8a7 	bleq	8000906 <__aeabi_ddiv+0x16e>
 80007b8:	eba4 0405 	sub.w	r4, r4, r5
 80007bc:	ea81 0e03 	eor.w	lr, r1, r3
 80007c0:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c8:	f000 8088 	beq.w	80008dc <__aeabi_ddiv+0x144>
 80007cc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007d0:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007d4:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d8:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007dc:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007e0:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e4:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e8:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007ec:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007f0:	429d      	cmp	r5, r3
 80007f2:	bf08      	it	eq
 80007f4:	4296      	cmpeq	r6, r2
 80007f6:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007fa:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80007fe:	d202      	bcs.n	8000806 <__aeabi_ddiv+0x6e>
 8000800:	085b      	lsrs	r3, r3, #1
 8000802:	ea4f 0232 	mov.w	r2, r2, rrx
 8000806:	1ab6      	subs	r6, r6, r2
 8000808:	eb65 0503 	sbc.w	r5, r5, r3
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000816:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800081a:	ebb6 0e02 	subs.w	lr, r6, r2
 800081e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000822:	bf22      	ittt	cs
 8000824:	1ab6      	subcs	r6, r6, r2
 8000826:	4675      	movcs	r5, lr
 8000828:	ea40 000c 	orrcs.w	r0, r0, ip
 800082c:	085b      	lsrs	r3, r3, #1
 800082e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000832:	ebb6 0e02 	subs.w	lr, r6, r2
 8000836:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083a:	bf22      	ittt	cs
 800083c:	1ab6      	subcs	r6, r6, r2
 800083e:	4675      	movcs	r5, lr
 8000840:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000844:	085b      	lsrs	r3, r3, #1
 8000846:	ea4f 0232 	mov.w	r2, r2, rrx
 800084a:	ebb6 0e02 	subs.w	lr, r6, r2
 800084e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000852:	bf22      	ittt	cs
 8000854:	1ab6      	subcs	r6, r6, r2
 8000856:	4675      	movcs	r5, lr
 8000858:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800085c:	085b      	lsrs	r3, r3, #1
 800085e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000862:	ebb6 0e02 	subs.w	lr, r6, r2
 8000866:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086a:	bf22      	ittt	cs
 800086c:	1ab6      	subcs	r6, r6, r2
 800086e:	4675      	movcs	r5, lr
 8000870:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000874:	ea55 0e06 	orrs.w	lr, r5, r6
 8000878:	d018      	beq.n	80008ac <__aeabi_ddiv+0x114>
 800087a:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000882:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000886:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800088a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000892:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000896:	d1c0      	bne.n	800081a <__aeabi_ddiv+0x82>
 8000898:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800089c:	d10b      	bne.n	80008b6 <__aeabi_ddiv+0x11e>
 800089e:	ea41 0100 	orr.w	r1, r1, r0
 80008a2:	f04f 0000 	mov.w	r0, #0
 80008a6:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008aa:	e7b6      	b.n	800081a <__aeabi_ddiv+0x82>
 80008ac:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008b0:	bf04      	itt	eq
 80008b2:	4301      	orreq	r1, r0
 80008b4:	2000      	moveq	r0, #0
 80008b6:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008ba:	bf88      	it	hi
 80008bc:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008c0:	f63f aeaf 	bhi.w	8000622 <__aeabi_dmul+0xde>
 80008c4:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c8:	bf04      	itt	eq
 80008ca:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008d2:	f150 0000 	adcs.w	r0, r0, #0
 80008d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008da:	bd70      	pop	{r4, r5, r6, pc}
 80008dc:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008e0:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e4:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e8:	bfc2      	ittt	gt
 80008ea:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ee:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008f2:	bd70      	popgt	{r4, r5, r6, pc}
 80008f4:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008f8:	f04f 0e00 	mov.w	lr, #0
 80008fc:	3c01      	subs	r4, #1
 80008fe:	e690      	b.n	8000622 <__aeabi_dmul+0xde>
 8000900:	ea45 0e06 	orr.w	lr, r5, r6
 8000904:	e68d      	b.n	8000622 <__aeabi_dmul+0xde>
 8000906:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800090a:	ea94 0f0c 	teq	r4, ip
 800090e:	bf08      	it	eq
 8000910:	ea95 0f0c 	teqeq	r5, ip
 8000914:	f43f af3b 	beq.w	800078e <__aeabi_dmul+0x24a>
 8000918:	ea94 0f0c 	teq	r4, ip
 800091c:	d10a      	bne.n	8000934 <__aeabi_ddiv+0x19c>
 800091e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000922:	f47f af34 	bne.w	800078e <__aeabi_dmul+0x24a>
 8000926:	ea95 0f0c 	teq	r5, ip
 800092a:	f47f af25 	bne.w	8000778 <__aeabi_dmul+0x234>
 800092e:	4610      	mov	r0, r2
 8000930:	4619      	mov	r1, r3
 8000932:	e72c      	b.n	800078e <__aeabi_dmul+0x24a>
 8000934:	ea95 0f0c 	teq	r5, ip
 8000938:	d106      	bne.n	8000948 <__aeabi_ddiv+0x1b0>
 800093a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093e:	f43f aefd 	beq.w	800073c <__aeabi_dmul+0x1f8>
 8000942:	4610      	mov	r0, r2
 8000944:	4619      	mov	r1, r3
 8000946:	e722      	b.n	800078e <__aeabi_dmul+0x24a>
 8000948:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800094c:	bf18      	it	ne
 800094e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000952:	f47f aec5 	bne.w	80006e0 <__aeabi_dmul+0x19c>
 8000956:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800095a:	f47f af0d 	bne.w	8000778 <__aeabi_dmul+0x234>
 800095e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000962:	f47f aeeb 	bne.w	800073c <__aeabi_dmul+0x1f8>
 8000966:	e712      	b.n	800078e <__aeabi_dmul+0x24a>

08000968 <__aeabi_d2iz>:
 8000968:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800096c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000970:	d215      	bcs.n	800099e <__aeabi_d2iz+0x36>
 8000972:	d511      	bpl.n	8000998 <__aeabi_d2iz+0x30>
 8000974:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000978:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 800097c:	d912      	bls.n	80009a4 <__aeabi_d2iz+0x3c>
 800097e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000982:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000986:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800098a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800098e:	fa23 f002 	lsr.w	r0, r3, r2
 8000992:	bf18      	it	ne
 8000994:	4240      	negne	r0, r0
 8000996:	4770      	bx	lr
 8000998:	f04f 0000 	mov.w	r0, #0
 800099c:	4770      	bx	lr
 800099e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009a2:	d105      	bne.n	80009b0 <__aeabi_d2iz+0x48>
 80009a4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 80009a8:	bf08      	it	eq
 80009aa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 80009ae:	4770      	bx	lr
 80009b0:	f04f 0000 	mov.w	r0, #0
 80009b4:	4770      	bx	lr
 80009b6:	bf00      	nop

080009b8 <__aeabi_d2uiz>:
 80009b8:	004a      	lsls	r2, r1, #1
 80009ba:	d211      	bcs.n	80009e0 <__aeabi_d2uiz+0x28>
 80009bc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80009c0:	d211      	bcs.n	80009e6 <__aeabi_d2uiz+0x2e>
 80009c2:	d50d      	bpl.n	80009e0 <__aeabi_d2uiz+0x28>
 80009c4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80009c8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009cc:	d40e      	bmi.n	80009ec <__aeabi_d2uiz+0x34>
 80009ce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009d2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80009d6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009da:	fa23 f002 	lsr.w	r0, r3, r2
 80009de:	4770      	bx	lr
 80009e0:	f04f 0000 	mov.w	r0, #0
 80009e4:	4770      	bx	lr
 80009e6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009ea:	d102      	bne.n	80009f2 <__aeabi_d2uiz+0x3a>
 80009ec:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80009f0:	4770      	bx	lr
 80009f2:	f04f 0000 	mov.w	r0, #0
 80009f6:	4770      	bx	lr

080009f8 <__aeabi_d2f>:
 80009f8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009fc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a00:	bf24      	itt	cs
 8000a02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a0a:	d90d      	bls.n	8000a28 <__aeabi_d2f+0x30>
 8000a0c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a18:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000a1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a20:	bf08      	it	eq
 8000a22:	f020 0001 	biceq.w	r0, r0, #1
 8000a26:	4770      	bx	lr
 8000a28:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000a2c:	d121      	bne.n	8000a72 <__aeabi_d2f+0x7a>
 8000a2e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000a32:	bfbc      	itt	lt
 8000a34:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000a38:	4770      	bxlt	lr
 8000a3a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a42:	f1c2 0218 	rsb	r2, r2, #24
 8000a46:	f1c2 0c20 	rsb	ip, r2, #32
 8000a4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000a52:	bf18      	it	ne
 8000a54:	f040 0001 	orrne.w	r0, r0, #1
 8000a58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a64:	ea40 000c 	orr.w	r0, r0, ip
 8000a68:	fa23 f302 	lsr.w	r3, r3, r2
 8000a6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a70:	e7cc      	b.n	8000a0c <__aeabi_d2f+0x14>
 8000a72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a76:	d107      	bne.n	8000a88 <__aeabi_d2f+0x90>
 8000a78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a7c:	bf1e      	ittt	ne
 8000a7e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000a82:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000a86:	4770      	bxne	lr
 8000a88:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000a8c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000a90:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <__aeabi_uldivmod>:
 8000a98:	b953      	cbnz	r3, 8000ab0 <__aeabi_uldivmod+0x18>
 8000a9a:	b94a      	cbnz	r2, 8000ab0 <__aeabi_uldivmod+0x18>
 8000a9c:	2900      	cmp	r1, #0
 8000a9e:	bf08      	it	eq
 8000aa0:	2800      	cmpeq	r0, #0
 8000aa2:	bf1c      	itt	ne
 8000aa4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000aa8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000aac:	f000 b96a 	b.w	8000d84 <__aeabi_idiv0>
 8000ab0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ab4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ab8:	f000 f806 	bl	8000ac8 <__udivmoddi4>
 8000abc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ac0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ac4:	b004      	add	sp, #16
 8000ac6:	4770      	bx	lr

08000ac8 <__udivmoddi4>:
 8000ac8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000acc:	9d08      	ldr	r5, [sp, #32]
 8000ace:	460c      	mov	r4, r1
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d14e      	bne.n	8000b72 <__udivmoddi4+0xaa>
 8000ad4:	4694      	mov	ip, r2
 8000ad6:	458c      	cmp	ip, r1
 8000ad8:	4686      	mov	lr, r0
 8000ada:	fab2 f282 	clz	r2, r2
 8000ade:	d962      	bls.n	8000ba6 <__udivmoddi4+0xde>
 8000ae0:	b14a      	cbz	r2, 8000af6 <__udivmoddi4+0x2e>
 8000ae2:	f1c2 0320 	rsb	r3, r2, #32
 8000ae6:	4091      	lsls	r1, r2
 8000ae8:	fa20 f303 	lsr.w	r3, r0, r3
 8000aec:	fa0c fc02 	lsl.w	ip, ip, r2
 8000af0:	4319      	orrs	r1, r3
 8000af2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000af6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000afa:	fa1f f68c 	uxth.w	r6, ip
 8000afe:	fbb1 f4f7 	udiv	r4, r1, r7
 8000b02:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b06:	fb07 1114 	mls	r1, r7, r4, r1
 8000b0a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b0e:	fb04 f106 	mul.w	r1, r4, r6
 8000b12:	4299      	cmp	r1, r3
 8000b14:	d90a      	bls.n	8000b2c <__udivmoddi4+0x64>
 8000b16:	eb1c 0303 	adds.w	r3, ip, r3
 8000b1a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000b1e:	f080 8112 	bcs.w	8000d46 <__udivmoddi4+0x27e>
 8000b22:	4299      	cmp	r1, r3
 8000b24:	f240 810f 	bls.w	8000d46 <__udivmoddi4+0x27e>
 8000b28:	3c02      	subs	r4, #2
 8000b2a:	4463      	add	r3, ip
 8000b2c:	1a59      	subs	r1, r3, r1
 8000b2e:	fa1f f38e 	uxth.w	r3, lr
 8000b32:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b36:	fb07 1110 	mls	r1, r7, r0, r1
 8000b3a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b3e:	fb00 f606 	mul.w	r6, r0, r6
 8000b42:	429e      	cmp	r6, r3
 8000b44:	d90a      	bls.n	8000b5c <__udivmoddi4+0x94>
 8000b46:	eb1c 0303 	adds.w	r3, ip, r3
 8000b4a:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000b4e:	f080 80fc 	bcs.w	8000d4a <__udivmoddi4+0x282>
 8000b52:	429e      	cmp	r6, r3
 8000b54:	f240 80f9 	bls.w	8000d4a <__udivmoddi4+0x282>
 8000b58:	4463      	add	r3, ip
 8000b5a:	3802      	subs	r0, #2
 8000b5c:	1b9b      	subs	r3, r3, r6
 8000b5e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000b62:	2100      	movs	r1, #0
 8000b64:	b11d      	cbz	r5, 8000b6e <__udivmoddi4+0xa6>
 8000b66:	40d3      	lsrs	r3, r2
 8000b68:	2200      	movs	r2, #0
 8000b6a:	e9c5 3200 	strd	r3, r2, [r5]
 8000b6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b72:	428b      	cmp	r3, r1
 8000b74:	d905      	bls.n	8000b82 <__udivmoddi4+0xba>
 8000b76:	b10d      	cbz	r5, 8000b7c <__udivmoddi4+0xb4>
 8000b78:	e9c5 0100 	strd	r0, r1, [r5]
 8000b7c:	2100      	movs	r1, #0
 8000b7e:	4608      	mov	r0, r1
 8000b80:	e7f5      	b.n	8000b6e <__udivmoddi4+0xa6>
 8000b82:	fab3 f183 	clz	r1, r3
 8000b86:	2900      	cmp	r1, #0
 8000b88:	d146      	bne.n	8000c18 <__udivmoddi4+0x150>
 8000b8a:	42a3      	cmp	r3, r4
 8000b8c:	d302      	bcc.n	8000b94 <__udivmoddi4+0xcc>
 8000b8e:	4290      	cmp	r0, r2
 8000b90:	f0c0 80f0 	bcc.w	8000d74 <__udivmoddi4+0x2ac>
 8000b94:	1a86      	subs	r6, r0, r2
 8000b96:	eb64 0303 	sbc.w	r3, r4, r3
 8000b9a:	2001      	movs	r0, #1
 8000b9c:	2d00      	cmp	r5, #0
 8000b9e:	d0e6      	beq.n	8000b6e <__udivmoddi4+0xa6>
 8000ba0:	e9c5 6300 	strd	r6, r3, [r5]
 8000ba4:	e7e3      	b.n	8000b6e <__udivmoddi4+0xa6>
 8000ba6:	2a00      	cmp	r2, #0
 8000ba8:	f040 8090 	bne.w	8000ccc <__udivmoddi4+0x204>
 8000bac:	eba1 040c 	sub.w	r4, r1, ip
 8000bb0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000bb4:	fa1f f78c 	uxth.w	r7, ip
 8000bb8:	2101      	movs	r1, #1
 8000bba:	fbb4 f6f8 	udiv	r6, r4, r8
 8000bbe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000bc2:	fb08 4416 	mls	r4, r8, r6, r4
 8000bc6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000bca:	fb07 f006 	mul.w	r0, r7, r6
 8000bce:	4298      	cmp	r0, r3
 8000bd0:	d908      	bls.n	8000be4 <__udivmoddi4+0x11c>
 8000bd2:	eb1c 0303 	adds.w	r3, ip, r3
 8000bd6:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000bda:	d202      	bcs.n	8000be2 <__udivmoddi4+0x11a>
 8000bdc:	4298      	cmp	r0, r3
 8000bde:	f200 80cd 	bhi.w	8000d7c <__udivmoddi4+0x2b4>
 8000be2:	4626      	mov	r6, r4
 8000be4:	1a1c      	subs	r4, r3, r0
 8000be6:	fa1f f38e 	uxth.w	r3, lr
 8000bea:	fbb4 f0f8 	udiv	r0, r4, r8
 8000bee:	fb08 4410 	mls	r4, r8, r0, r4
 8000bf2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000bf6:	fb00 f707 	mul.w	r7, r0, r7
 8000bfa:	429f      	cmp	r7, r3
 8000bfc:	d908      	bls.n	8000c10 <__udivmoddi4+0x148>
 8000bfe:	eb1c 0303 	adds.w	r3, ip, r3
 8000c02:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000c06:	d202      	bcs.n	8000c0e <__udivmoddi4+0x146>
 8000c08:	429f      	cmp	r7, r3
 8000c0a:	f200 80b0 	bhi.w	8000d6e <__udivmoddi4+0x2a6>
 8000c0e:	4620      	mov	r0, r4
 8000c10:	1bdb      	subs	r3, r3, r7
 8000c12:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c16:	e7a5      	b.n	8000b64 <__udivmoddi4+0x9c>
 8000c18:	f1c1 0620 	rsb	r6, r1, #32
 8000c1c:	408b      	lsls	r3, r1
 8000c1e:	fa22 f706 	lsr.w	r7, r2, r6
 8000c22:	431f      	orrs	r7, r3
 8000c24:	fa20 fc06 	lsr.w	ip, r0, r6
 8000c28:	fa04 f301 	lsl.w	r3, r4, r1
 8000c2c:	ea43 030c 	orr.w	r3, r3, ip
 8000c30:	40f4      	lsrs	r4, r6
 8000c32:	fa00 f801 	lsl.w	r8, r0, r1
 8000c36:	0c38      	lsrs	r0, r7, #16
 8000c38:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000c3c:	fbb4 fef0 	udiv	lr, r4, r0
 8000c40:	fa1f fc87 	uxth.w	ip, r7
 8000c44:	fb00 441e 	mls	r4, r0, lr, r4
 8000c48:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c4c:	fb0e f90c 	mul.w	r9, lr, ip
 8000c50:	45a1      	cmp	r9, r4
 8000c52:	fa02 f201 	lsl.w	r2, r2, r1
 8000c56:	d90a      	bls.n	8000c6e <__udivmoddi4+0x1a6>
 8000c58:	193c      	adds	r4, r7, r4
 8000c5a:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000c5e:	f080 8084 	bcs.w	8000d6a <__udivmoddi4+0x2a2>
 8000c62:	45a1      	cmp	r9, r4
 8000c64:	f240 8081 	bls.w	8000d6a <__udivmoddi4+0x2a2>
 8000c68:	f1ae 0e02 	sub.w	lr, lr, #2
 8000c6c:	443c      	add	r4, r7
 8000c6e:	eba4 0409 	sub.w	r4, r4, r9
 8000c72:	fa1f f983 	uxth.w	r9, r3
 8000c76:	fbb4 f3f0 	udiv	r3, r4, r0
 8000c7a:	fb00 4413 	mls	r4, r0, r3, r4
 8000c7e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c82:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c86:	45a4      	cmp	ip, r4
 8000c88:	d907      	bls.n	8000c9a <__udivmoddi4+0x1d2>
 8000c8a:	193c      	adds	r4, r7, r4
 8000c8c:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000c90:	d267      	bcs.n	8000d62 <__udivmoddi4+0x29a>
 8000c92:	45a4      	cmp	ip, r4
 8000c94:	d965      	bls.n	8000d62 <__udivmoddi4+0x29a>
 8000c96:	3b02      	subs	r3, #2
 8000c98:	443c      	add	r4, r7
 8000c9a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000c9e:	fba0 9302 	umull	r9, r3, r0, r2
 8000ca2:	eba4 040c 	sub.w	r4, r4, ip
 8000ca6:	429c      	cmp	r4, r3
 8000ca8:	46ce      	mov	lr, r9
 8000caa:	469c      	mov	ip, r3
 8000cac:	d351      	bcc.n	8000d52 <__udivmoddi4+0x28a>
 8000cae:	d04e      	beq.n	8000d4e <__udivmoddi4+0x286>
 8000cb0:	b155      	cbz	r5, 8000cc8 <__udivmoddi4+0x200>
 8000cb2:	ebb8 030e 	subs.w	r3, r8, lr
 8000cb6:	eb64 040c 	sbc.w	r4, r4, ip
 8000cba:	fa04 f606 	lsl.w	r6, r4, r6
 8000cbe:	40cb      	lsrs	r3, r1
 8000cc0:	431e      	orrs	r6, r3
 8000cc2:	40cc      	lsrs	r4, r1
 8000cc4:	e9c5 6400 	strd	r6, r4, [r5]
 8000cc8:	2100      	movs	r1, #0
 8000cca:	e750      	b.n	8000b6e <__udivmoddi4+0xa6>
 8000ccc:	f1c2 0320 	rsb	r3, r2, #32
 8000cd0:	fa20 f103 	lsr.w	r1, r0, r3
 8000cd4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cd8:	fa24 f303 	lsr.w	r3, r4, r3
 8000cdc:	4094      	lsls	r4, r2
 8000cde:	430c      	orrs	r4, r1
 8000ce0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ce4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ce8:	fa1f f78c 	uxth.w	r7, ip
 8000cec:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cf0:	fb08 3110 	mls	r1, r8, r0, r3
 8000cf4:	0c23      	lsrs	r3, r4, #16
 8000cf6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cfa:	fb00 f107 	mul.w	r1, r0, r7
 8000cfe:	4299      	cmp	r1, r3
 8000d00:	d908      	bls.n	8000d14 <__udivmoddi4+0x24c>
 8000d02:	eb1c 0303 	adds.w	r3, ip, r3
 8000d06:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000d0a:	d22c      	bcs.n	8000d66 <__udivmoddi4+0x29e>
 8000d0c:	4299      	cmp	r1, r3
 8000d0e:	d92a      	bls.n	8000d66 <__udivmoddi4+0x29e>
 8000d10:	3802      	subs	r0, #2
 8000d12:	4463      	add	r3, ip
 8000d14:	1a5b      	subs	r3, r3, r1
 8000d16:	b2a4      	uxth	r4, r4
 8000d18:	fbb3 f1f8 	udiv	r1, r3, r8
 8000d1c:	fb08 3311 	mls	r3, r8, r1, r3
 8000d20:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d24:	fb01 f307 	mul.w	r3, r1, r7
 8000d28:	42a3      	cmp	r3, r4
 8000d2a:	d908      	bls.n	8000d3e <__udivmoddi4+0x276>
 8000d2c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d30:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000d34:	d213      	bcs.n	8000d5e <__udivmoddi4+0x296>
 8000d36:	42a3      	cmp	r3, r4
 8000d38:	d911      	bls.n	8000d5e <__udivmoddi4+0x296>
 8000d3a:	3902      	subs	r1, #2
 8000d3c:	4464      	add	r4, ip
 8000d3e:	1ae4      	subs	r4, r4, r3
 8000d40:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000d44:	e739      	b.n	8000bba <__udivmoddi4+0xf2>
 8000d46:	4604      	mov	r4, r0
 8000d48:	e6f0      	b.n	8000b2c <__udivmoddi4+0x64>
 8000d4a:	4608      	mov	r0, r1
 8000d4c:	e706      	b.n	8000b5c <__udivmoddi4+0x94>
 8000d4e:	45c8      	cmp	r8, r9
 8000d50:	d2ae      	bcs.n	8000cb0 <__udivmoddi4+0x1e8>
 8000d52:	ebb9 0e02 	subs.w	lr, r9, r2
 8000d56:	eb63 0c07 	sbc.w	ip, r3, r7
 8000d5a:	3801      	subs	r0, #1
 8000d5c:	e7a8      	b.n	8000cb0 <__udivmoddi4+0x1e8>
 8000d5e:	4631      	mov	r1, r6
 8000d60:	e7ed      	b.n	8000d3e <__udivmoddi4+0x276>
 8000d62:	4603      	mov	r3, r0
 8000d64:	e799      	b.n	8000c9a <__udivmoddi4+0x1d2>
 8000d66:	4630      	mov	r0, r6
 8000d68:	e7d4      	b.n	8000d14 <__udivmoddi4+0x24c>
 8000d6a:	46d6      	mov	lr, sl
 8000d6c:	e77f      	b.n	8000c6e <__udivmoddi4+0x1a6>
 8000d6e:	4463      	add	r3, ip
 8000d70:	3802      	subs	r0, #2
 8000d72:	e74d      	b.n	8000c10 <__udivmoddi4+0x148>
 8000d74:	4606      	mov	r6, r0
 8000d76:	4623      	mov	r3, r4
 8000d78:	4608      	mov	r0, r1
 8000d7a:	e70f      	b.n	8000b9c <__udivmoddi4+0xd4>
 8000d7c:	3e02      	subs	r6, #2
 8000d7e:	4463      	add	r3, ip
 8000d80:	e730      	b.n	8000be4 <__udivmoddi4+0x11c>
 8000d82:	bf00      	nop

08000d84 <__aeabi_idiv0>:
 8000d84:	4770      	bx	lr
 8000d86:	bf00      	nop

08000d88 <read_calibration_data>:
 *      Author: bala
 */
#include "bmp.h"

void read_calibration_data(I2C_HandleTypeDef *hi2c, bmp_calib_t *bmp_calib_data)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b08c      	sub	sp, #48	@ 0x30
 8000d8c:	af04      	add	r7, sp, #16
 8000d8e:	6078      	str	r0, [r7, #4]
 8000d90:	6039      	str	r1, [r7, #0]
	uint8_t calib_data[22];

	HAL_I2C_Mem_Read(hi2c,BMP_ADDR,(uint16_t) CALIB_START_ADDR,1,calib_data,22,1000);
 8000d92:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d96:	9302      	str	r3, [sp, #8]
 8000d98:	2316      	movs	r3, #22
 8000d9a:	9301      	str	r3, [sp, #4]
 8000d9c:	f107 0308 	add.w	r3, r7, #8
 8000da0:	9300      	str	r3, [sp, #0]
 8000da2:	2301      	movs	r3, #1
 8000da4:	22aa      	movs	r2, #170	@ 0xaa
 8000da6:	21ee      	movs	r1, #238	@ 0xee
 8000da8:	6878      	ldr	r0, [r7, #4]
 8000daa:	f003 fa7f 	bl	80042ac <HAL_I2C_Mem_Read>

	bmp_calib_data->AC1 = (uint16_t) (calib_data[0] << 8) | (calib_data[1]);
 8000dae:	7a3b      	ldrb	r3, [r7, #8]
 8000db0:	021b      	lsls	r3, r3, #8
 8000db2:	b29b      	uxth	r3, r3
 8000db4:	7a7a      	ldrb	r2, [r7, #9]
 8000db6:	4313      	orrs	r3, r2
 8000db8:	b29a      	uxth	r2, r3
 8000dba:	683b      	ldr	r3, [r7, #0]
 8000dbc:	801a      	strh	r2, [r3, #0]
	bmp_calib_data->AC2 = (uint16_t) (calib_data[2] << 8) | (calib_data[3]);
 8000dbe:	7abb      	ldrb	r3, [r7, #10]
 8000dc0:	021b      	lsls	r3, r3, #8
 8000dc2:	b29b      	uxth	r3, r3
 8000dc4:	7afa      	ldrb	r2, [r7, #11]
 8000dc6:	4313      	orrs	r3, r2
 8000dc8:	b29a      	uxth	r2, r3
 8000dca:	683b      	ldr	r3, [r7, #0]
 8000dcc:	805a      	strh	r2, [r3, #2]
	bmp_calib_data->AC3 = (uint16_t) (calib_data[4] << 8) | (calib_data[5]);
 8000dce:	7b3b      	ldrb	r3, [r7, #12]
 8000dd0:	021b      	lsls	r3, r3, #8
 8000dd2:	b29b      	uxth	r3, r3
 8000dd4:	7b7a      	ldrb	r2, [r7, #13]
 8000dd6:	4313      	orrs	r3, r2
 8000dd8:	b29a      	uxth	r2, r3
 8000dda:	683b      	ldr	r3, [r7, #0]
 8000ddc:	809a      	strh	r2, [r3, #4]
	bmp_calib_data->AC4 = (uint16_t) (calib_data[6] << 8) | (calib_data[7]);
 8000dde:	7bbb      	ldrb	r3, [r7, #14]
 8000de0:	021b      	lsls	r3, r3, #8
 8000de2:	b29b      	uxth	r3, r3
 8000de4:	7bfa      	ldrb	r2, [r7, #15]
 8000de6:	4313      	orrs	r3, r2
 8000de8:	b29a      	uxth	r2, r3
 8000dea:	683b      	ldr	r3, [r7, #0]
 8000dec:	80da      	strh	r2, [r3, #6]
	bmp_calib_data->AC5 = (uint16_t) (calib_data[8] << 8) | (calib_data[9]);
 8000dee:	7c3b      	ldrb	r3, [r7, #16]
 8000df0:	021b      	lsls	r3, r3, #8
 8000df2:	b29b      	uxth	r3, r3
 8000df4:	7c7a      	ldrb	r2, [r7, #17]
 8000df6:	4313      	orrs	r3, r2
 8000df8:	b29a      	uxth	r2, r3
 8000dfa:	683b      	ldr	r3, [r7, #0]
 8000dfc:	811a      	strh	r2, [r3, #8]
	bmp_calib_data->AC6 = (uint16_t) (calib_data[10] << 8) | (calib_data[11]);
 8000dfe:	7cbb      	ldrb	r3, [r7, #18]
 8000e00:	021b      	lsls	r3, r3, #8
 8000e02:	b29b      	uxth	r3, r3
 8000e04:	7cfa      	ldrb	r2, [r7, #19]
 8000e06:	4313      	orrs	r3, r2
 8000e08:	b29a      	uxth	r2, r3
 8000e0a:	683b      	ldr	r3, [r7, #0]
 8000e0c:	815a      	strh	r2, [r3, #10]

	bmp_calib_data->B1 = (uint16_t) (calib_data[12] << 8) | (calib_data[13]);
 8000e0e:	7d3b      	ldrb	r3, [r7, #20]
 8000e10:	021b      	lsls	r3, r3, #8
 8000e12:	b29b      	uxth	r3, r3
 8000e14:	7d7a      	ldrb	r2, [r7, #21]
 8000e16:	4313      	orrs	r3, r2
 8000e18:	b29a      	uxth	r2, r3
 8000e1a:	683b      	ldr	r3, [r7, #0]
 8000e1c:	819a      	strh	r2, [r3, #12]
	bmp_calib_data->B2 = (uint16_t) (calib_data[14] << 8) | (calib_data[15]);
 8000e1e:	7dbb      	ldrb	r3, [r7, #22]
 8000e20:	021b      	lsls	r3, r3, #8
 8000e22:	b29b      	uxth	r3, r3
 8000e24:	7dfa      	ldrb	r2, [r7, #23]
 8000e26:	4313      	orrs	r3, r2
 8000e28:	b29a      	uxth	r2, r3
 8000e2a:	683b      	ldr	r3, [r7, #0]
 8000e2c:	81da      	strh	r2, [r3, #14]

	bmp_calib_data->MB = (uint16_t) (calib_data[16] << 8) | (calib_data[17]);
 8000e2e:	7e3b      	ldrb	r3, [r7, #24]
 8000e30:	021b      	lsls	r3, r3, #8
 8000e32:	b29b      	uxth	r3, r3
 8000e34:	7e7a      	ldrb	r2, [r7, #25]
 8000e36:	4313      	orrs	r3, r2
 8000e38:	b29a      	uxth	r2, r3
 8000e3a:	683b      	ldr	r3, [r7, #0]
 8000e3c:	821a      	strh	r2, [r3, #16]
	bmp_calib_data->MC = (uint16_t) (calib_data[18] << 8) | (calib_data[19]);
 8000e3e:	7ebb      	ldrb	r3, [r7, #26]
 8000e40:	021b      	lsls	r3, r3, #8
 8000e42:	b29b      	uxth	r3, r3
 8000e44:	7efa      	ldrb	r2, [r7, #27]
 8000e46:	4313      	orrs	r3, r2
 8000e48:	b29a      	uxth	r2, r3
 8000e4a:	683b      	ldr	r3, [r7, #0]
 8000e4c:	825a      	strh	r2, [r3, #18]
	bmp_calib_data->MD = (uint16_t) (calib_data[20] << 8) | (calib_data[21]);
 8000e4e:	7f3b      	ldrb	r3, [r7, #28]
 8000e50:	021b      	lsls	r3, r3, #8
 8000e52:	b29b      	uxth	r3, r3
 8000e54:	7f7a      	ldrb	r2, [r7, #29]
 8000e56:	4313      	orrs	r3, r2
 8000e58:	b29a      	uxth	r2, r3
 8000e5a:	683b      	ldr	r3, [r7, #0]
 8000e5c:	829a      	strh	r2, [r3, #20]
}
 8000e5e:	bf00      	nop
 8000e60:	3720      	adds	r7, #32
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bd80      	pop	{r7, pc}
	...

08000e68 <get_uncomp_temp>:

uint16_t get_uncomp_temp(I2C_HandleTypeDef *hi2c, bmp_calib_t *bmp_calib_data)
{
 8000e68:	b5b0      	push	{r4, r5, r7, lr}
 8000e6a:	b08e      	sub	sp, #56	@ 0x38
 8000e6c:	af04      	add	r7, sp, #16
 8000e6e:	6078      	str	r0, [r7, #4]
 8000e70:	6039      	str	r1, [r7, #0]
	uint8_t raw_temp_data[2];
	uint8_t temp_write_val = TEMP_WRITE_VAL;
 8000e72:	232e      	movs	r3, #46	@ 0x2e
 8000e74:	73fb      	strb	r3, [r7, #15]

	HAL_I2C_Mem_Write(hi2c,BMP_ADDR,(uint16_t) TEMP_REG_ADDR,1,&temp_write_val,1,1000);
 8000e76:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e7a:	9302      	str	r3, [sp, #8]
 8000e7c:	2301      	movs	r3, #1
 8000e7e:	9301      	str	r3, [sp, #4]
 8000e80:	f107 030f 	add.w	r3, r7, #15
 8000e84:	9300      	str	r3, [sp, #0]
 8000e86:	2301      	movs	r3, #1
 8000e88:	22f4      	movs	r2, #244	@ 0xf4
 8000e8a:	21ee      	movs	r1, #238	@ 0xee
 8000e8c:	6878      	ldr	r0, [r7, #4]
 8000e8e:	f003 f8f9 	bl	8004084 <HAL_I2C_Mem_Write>
	HAL_Delay(5);
 8000e92:	2005      	movs	r0, #5
 8000e94:	f001 faba 	bl	800240c <HAL_Delay>
	HAL_I2C_Mem_Read(hi2c,BMP_ADDR,(uint16_t) TEMP_REG_ADDR,1,raw_temp_data,2,1000);
 8000e98:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e9c:	9302      	str	r3, [sp, #8]
 8000e9e:	2302      	movs	r3, #2
 8000ea0:	9301      	str	r3, [sp, #4]
 8000ea2:	f107 0310 	add.w	r3, r7, #16
 8000ea6:	9300      	str	r3, [sp, #0]
 8000ea8:	2301      	movs	r3, #1
 8000eaa:	22f4      	movs	r2, #244	@ 0xf4
 8000eac:	21ee      	movs	r1, #238	@ 0xee
 8000eae:	6878      	ldr	r0, [r7, #4]
 8000eb0:	f003 f9fc 	bl	80042ac <HAL_I2C_Mem_Read>

	uint16_t uncomp_temp = (uint16_t) (raw_temp_data[0] << 8) | raw_temp_data[1];
 8000eb4:	7c3b      	ldrb	r3, [r7, #16]
 8000eb6:	021b      	lsls	r3, r3, #8
 8000eb8:	b29b      	uxth	r3, r3
 8000eba:	7c7a      	ldrb	r2, [r7, #17]
 8000ebc:	4313      	orrs	r3, r2
 8000ebe:	84fb      	strh	r3, [r7, #38]	@ 0x26


	float X1 = ((uncomp_temp-bmp_calib_data->AC6) * (bmp_calib_data->AC5/(pow(2,15))));
 8000ec0:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8000ec2:	683a      	ldr	r2, [r7, #0]
 8000ec4:	8952      	ldrh	r2, [r2, #10]
 8000ec6:	1a9b      	subs	r3, r3, r2
 8000ec8:	4618      	mov	r0, r3
 8000eca:	f7ff fad1 	bl	8000470 <__aeabi_i2d>
 8000ece:	4604      	mov	r4, r0
 8000ed0:	460d      	mov	r5, r1
 8000ed2:	683b      	ldr	r3, [r7, #0]
 8000ed4:	891b      	ldrh	r3, [r3, #8]
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	f7ff faca 	bl	8000470 <__aeabi_i2d>
 8000edc:	f04f 0200 	mov.w	r2, #0
 8000ee0:	4b36      	ldr	r3, [pc, #216]	@ (8000fbc <get_uncomp_temp+0x154>)
 8000ee2:	f7ff fc59 	bl	8000798 <__aeabi_ddiv>
 8000ee6:	4602      	mov	r2, r0
 8000ee8:	460b      	mov	r3, r1
 8000eea:	4620      	mov	r0, r4
 8000eec:	4629      	mov	r1, r5
 8000eee:	f7ff fb29 	bl	8000544 <__aeabi_dmul>
 8000ef2:	4602      	mov	r2, r0
 8000ef4:	460b      	mov	r3, r1
 8000ef6:	4610      	mov	r0, r2
 8000ef8:	4619      	mov	r1, r3
 8000efa:	f7ff fd7d 	bl	80009f8 <__aeabi_d2f>
 8000efe:	4603      	mov	r3, r0
 8000f00:	623b      	str	r3, [r7, #32]
	float X2 = ((bmp_calib_data->MC*(pow(2,11))) / (X1+bmp_calib_data->MD));
 8000f02:	683b      	ldr	r3, [r7, #0]
 8000f04:	8a5b      	ldrh	r3, [r3, #18]
 8000f06:	4618      	mov	r0, r3
 8000f08:	f7ff fab2 	bl	8000470 <__aeabi_i2d>
 8000f0c:	f04f 0200 	mov.w	r2, #0
 8000f10:	4b2b      	ldr	r3, [pc, #172]	@ (8000fc0 <get_uncomp_temp+0x158>)
 8000f12:	f7ff fb17 	bl	8000544 <__aeabi_dmul>
 8000f16:	4602      	mov	r2, r0
 8000f18:	460b      	mov	r3, r1
 8000f1a:	4614      	mov	r4, r2
 8000f1c:	461d      	mov	r5, r3
 8000f1e:	683b      	ldr	r3, [r7, #0]
 8000f20:	8a9b      	ldrh	r3, [r3, #20]
 8000f22:	ee07 3a90 	vmov	s15, r3
 8000f26:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000f2a:	edd7 7a08 	vldr	s15, [r7, #32]
 8000f2e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f32:	ee17 0a90 	vmov	r0, s15
 8000f36:	f7ff faad 	bl	8000494 <__aeabi_f2d>
 8000f3a:	4602      	mov	r2, r0
 8000f3c:	460b      	mov	r3, r1
 8000f3e:	4620      	mov	r0, r4
 8000f40:	4629      	mov	r1, r5
 8000f42:	f7ff fc29 	bl	8000798 <__aeabi_ddiv>
 8000f46:	4602      	mov	r2, r0
 8000f48:	460b      	mov	r3, r1
 8000f4a:	4610      	mov	r0, r2
 8000f4c:	4619      	mov	r1, r3
 8000f4e:	f7ff fd53 	bl	80009f8 <__aeabi_d2f>
 8000f52:	4603      	mov	r3, r0
 8000f54:	61fb      	str	r3, [r7, #28]
	float B5 = X1+X2;
 8000f56:	ed97 7a08 	vldr	s14, [r7, #32]
 8000f5a:	edd7 7a07 	vldr	s15, [r7, #28]
 8000f5e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f62:	edc7 7a06 	vstr	s15, [r7, #24]
	float comp_temp = ((B5+8)/(pow(2,4)))/10.0;
 8000f66:	edd7 7a06 	vldr	s15, [r7, #24]
 8000f6a:	eeb2 7a00 	vmov.f32	s14, #32	@ 0x41000000  8.0
 8000f6e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000f72:	ee17 0a90 	vmov	r0, s15
 8000f76:	f7ff fa8d 	bl	8000494 <__aeabi_f2d>
 8000f7a:	f04f 0200 	mov.w	r2, #0
 8000f7e:	4b11      	ldr	r3, [pc, #68]	@ (8000fc4 <get_uncomp_temp+0x15c>)
 8000f80:	f7ff fc0a 	bl	8000798 <__aeabi_ddiv>
 8000f84:	4602      	mov	r2, r0
 8000f86:	460b      	mov	r3, r1
 8000f88:	4610      	mov	r0, r2
 8000f8a:	4619      	mov	r1, r3
 8000f8c:	f04f 0200 	mov.w	r2, #0
 8000f90:	4b0d      	ldr	r3, [pc, #52]	@ (8000fc8 <get_uncomp_temp+0x160>)
 8000f92:	f7ff fc01 	bl	8000798 <__aeabi_ddiv>
 8000f96:	4602      	mov	r2, r0
 8000f98:	460b      	mov	r3, r1
 8000f9a:	4610      	mov	r0, r2
 8000f9c:	4619      	mov	r1, r3
 8000f9e:	f7ff fd2b 	bl	80009f8 <__aeabi_d2f>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	617b      	str	r3, [r7, #20]
	return comp_temp;
 8000fa6:	edd7 7a05 	vldr	s15, [r7, #20]
 8000faa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000fae:	ee17 3a90 	vmov	r3, s15
 8000fb2:	b29b      	uxth	r3, r3
}
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	3728      	adds	r7, #40	@ 0x28
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bdb0      	pop	{r4, r5, r7, pc}
 8000fbc:	40e00000 	.word	0x40e00000
 8000fc0:	40a00000 	.word	0x40a00000
 8000fc4:	40300000 	.word	0x40300000
 8000fc8:	40240000 	.word	0x40240000

08000fcc <get_uncomp_press>:

uint32_t get_uncomp_press(I2C_HandleTypeDef *hi2c, bmp_calib_t *bmp_calib_data)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b08a      	sub	sp, #40	@ 0x28
 8000fd0:	af04      	add	r7, sp, #16
 8000fd2:	6078      	str	r0, [r7, #4]
 8000fd4:	6039      	str	r1, [r7, #0]
	uint8_t raw_comp_press_data[3];
	uint8_t comp_press_write_data = TEMP_WRITE_VAL + (OSS << 6);
 8000fd6:	232e      	movs	r3, #46	@ 0x2e
 8000fd8:	73fb      	strb	r3, [r7, #15]

	HAL_I2C_Mem_Write(hi2c,BMP_ADDR,(uint16_t) TEMP_REG_ADDR,1,&comp_press_write_data,1,1000);
 8000fda:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000fde:	9302      	str	r3, [sp, #8]
 8000fe0:	2301      	movs	r3, #1
 8000fe2:	9301      	str	r3, [sp, #4]
 8000fe4:	f107 030f 	add.w	r3, r7, #15
 8000fe8:	9300      	str	r3, [sp, #0]
 8000fea:	2301      	movs	r3, #1
 8000fec:	22f4      	movs	r2, #244	@ 0xf4
 8000fee:	21ee      	movs	r1, #238	@ 0xee
 8000ff0:	6878      	ldr	r0, [r7, #4]
 8000ff2:	f003 f847 	bl	8004084 <HAL_I2C_Mem_Write>

	switch (OSS)
	{
		case (0):
			HAL_Delay (5);
 8000ff6:	2005      	movs	r0, #5
 8000ff8:	f001 fa08 	bl	800240c <HAL_Delay>
			break;
 8000ffc:	bf00      	nop
		case (3):
			HAL_Delay (26);
			break;
	}

	HAL_I2C_Mem_Read(hi2c,BMP_ADDR,(uint16_t) PRESS_REG_ADDR,1,raw_comp_press_data,3,1000);
 8000ffe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001002:	9302      	str	r3, [sp, #8]
 8001004:	2303      	movs	r3, #3
 8001006:	9301      	str	r3, [sp, #4]
 8001008:	f107 0310 	add.w	r3, r7, #16
 800100c:	9300      	str	r3, [sp, #0]
 800100e:	2301      	movs	r3, #1
 8001010:	22f6      	movs	r2, #246	@ 0xf6
 8001012:	21ee      	movs	r1, #238	@ 0xee
 8001014:	6878      	ldr	r0, [r7, #4]
 8001016:	f003 f949 	bl	80042ac <HAL_I2C_Mem_Read>

	uint32_t uncomp_press = (((raw_comp_press_data[0]<<16)+(raw_comp_press_data[1]<<8)+raw_comp_press_data[2]) >> (8-OSS));
 800101a:	7c3b      	ldrb	r3, [r7, #16]
 800101c:	041a      	lsls	r2, r3, #16
 800101e:	7c7b      	ldrb	r3, [r7, #17]
 8001020:	021b      	lsls	r3, r3, #8
 8001022:	4413      	add	r3, r2
 8001024:	7cba      	ldrb	r2, [r7, #18]
 8001026:	4413      	add	r3, r2
 8001028:	121b      	asrs	r3, r3, #8
 800102a:	617b      	str	r3, [r7, #20]
	return uncomp_press;
 800102c:	697b      	ldr	r3, [r7, #20]

}
 800102e:	4618      	mov	r0, r3
 8001030:	3718      	adds	r7, #24
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}
	...

08001038 <get_comp_temp>:

float get_comp_temp(uint16_t uncomp_temp, bmp_calib_t *bmp_calib_data)
{
 8001038:	b5b0      	push	{r4, r5, r7, lr}
 800103a:	b086      	sub	sp, #24
 800103c:	af00      	add	r7, sp, #0
 800103e:	4603      	mov	r3, r0
 8001040:	6039      	str	r1, [r7, #0]
 8001042:	80fb      	strh	r3, [r7, #6]
	int32_t X1 = ((uncomp_temp-bmp_calib_data->AC6) * (bmp_calib_data->AC5/(pow(2,15))));
 8001044:	88fb      	ldrh	r3, [r7, #6]
 8001046:	683a      	ldr	r2, [r7, #0]
 8001048:	8952      	ldrh	r2, [r2, #10]
 800104a:	1a9b      	subs	r3, r3, r2
 800104c:	4618      	mov	r0, r3
 800104e:	f7ff fa0f 	bl	8000470 <__aeabi_i2d>
 8001052:	4604      	mov	r4, r0
 8001054:	460d      	mov	r5, r1
 8001056:	683b      	ldr	r3, [r7, #0]
 8001058:	891b      	ldrh	r3, [r3, #8]
 800105a:	4618      	mov	r0, r3
 800105c:	f7ff fa08 	bl	8000470 <__aeabi_i2d>
 8001060:	f04f 0200 	mov.w	r2, #0
 8001064:	4b2d      	ldr	r3, [pc, #180]	@ (800111c <get_comp_temp+0xe4>)
 8001066:	f7ff fb97 	bl	8000798 <__aeabi_ddiv>
 800106a:	4602      	mov	r2, r0
 800106c:	460b      	mov	r3, r1
 800106e:	4620      	mov	r0, r4
 8001070:	4629      	mov	r1, r5
 8001072:	f7ff fa67 	bl	8000544 <__aeabi_dmul>
 8001076:	4602      	mov	r2, r0
 8001078:	460b      	mov	r3, r1
 800107a:	4610      	mov	r0, r2
 800107c:	4619      	mov	r1, r3
 800107e:	f7ff fc73 	bl	8000968 <__aeabi_d2iz>
 8001082:	4603      	mov	r3, r0
 8001084:	617b      	str	r3, [r7, #20]
	int32_t X2 = ((bmp_calib_data->MC*(pow(2,11))) / (X1+bmp_calib_data->MD));
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	8a5b      	ldrh	r3, [r3, #18]
 800108a:	4618      	mov	r0, r3
 800108c:	f7ff f9f0 	bl	8000470 <__aeabi_i2d>
 8001090:	f04f 0200 	mov.w	r2, #0
 8001094:	4b22      	ldr	r3, [pc, #136]	@ (8001120 <get_comp_temp+0xe8>)
 8001096:	f7ff fa55 	bl	8000544 <__aeabi_dmul>
 800109a:	4602      	mov	r2, r0
 800109c:	460b      	mov	r3, r1
 800109e:	4614      	mov	r4, r2
 80010a0:	461d      	mov	r5, r3
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	8a9b      	ldrh	r3, [r3, #20]
 80010a6:	461a      	mov	r2, r3
 80010a8:	697b      	ldr	r3, [r7, #20]
 80010aa:	4413      	add	r3, r2
 80010ac:	4618      	mov	r0, r3
 80010ae:	f7ff f9df 	bl	8000470 <__aeabi_i2d>
 80010b2:	4602      	mov	r2, r0
 80010b4:	460b      	mov	r3, r1
 80010b6:	4620      	mov	r0, r4
 80010b8:	4629      	mov	r1, r5
 80010ba:	f7ff fb6d 	bl	8000798 <__aeabi_ddiv>
 80010be:	4602      	mov	r2, r0
 80010c0:	460b      	mov	r3, r1
 80010c2:	4610      	mov	r0, r2
 80010c4:	4619      	mov	r1, r3
 80010c6:	f7ff fc4f 	bl	8000968 <__aeabi_d2iz>
 80010ca:	4603      	mov	r3, r0
 80010cc:	613b      	str	r3, [r7, #16]
	int32_t B5 = X1+X2;
 80010ce:	697a      	ldr	r2, [r7, #20]
 80010d0:	693b      	ldr	r3, [r7, #16]
 80010d2:	4413      	add	r3, r2
 80010d4:	60fb      	str	r3, [r7, #12]
	float comp_temp = ((B5+8)/(pow(2,4)))/10.0;
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	3308      	adds	r3, #8
 80010da:	4618      	mov	r0, r3
 80010dc:	f7ff f9c8 	bl	8000470 <__aeabi_i2d>
 80010e0:	f04f 0200 	mov.w	r2, #0
 80010e4:	4b0f      	ldr	r3, [pc, #60]	@ (8001124 <get_comp_temp+0xec>)
 80010e6:	f7ff fb57 	bl	8000798 <__aeabi_ddiv>
 80010ea:	4602      	mov	r2, r0
 80010ec:	460b      	mov	r3, r1
 80010ee:	4610      	mov	r0, r2
 80010f0:	4619      	mov	r1, r3
 80010f2:	f04f 0200 	mov.w	r2, #0
 80010f6:	4b0c      	ldr	r3, [pc, #48]	@ (8001128 <get_comp_temp+0xf0>)
 80010f8:	f7ff fb4e 	bl	8000798 <__aeabi_ddiv>
 80010fc:	4602      	mov	r2, r0
 80010fe:	460b      	mov	r3, r1
 8001100:	4610      	mov	r0, r2
 8001102:	4619      	mov	r1, r3
 8001104:	f7ff fc78 	bl	80009f8 <__aeabi_d2f>
 8001108:	4603      	mov	r3, r0
 800110a:	60bb      	str	r3, [r7, #8]
	return comp_temp;
 800110c:	68bb      	ldr	r3, [r7, #8]
 800110e:	ee07 3a90 	vmov	s15, r3
}
 8001112:	eeb0 0a67 	vmov.f32	s0, s15
 8001116:	3718      	adds	r7, #24
 8001118:	46bd      	mov	sp, r7
 800111a:	bdb0      	pop	{r4, r5, r7, pc}
 800111c:	40e00000 	.word	0x40e00000
 8001120:	40a00000 	.word	0x40a00000
 8001124:	40300000 	.word	0x40300000
 8001128:	40240000 	.word	0x40240000

0800112c <get_comp_press>:

float get_comp_press(uint16_t uncomp_press, uint16_t uncomp_temp, bmp_calib_t *bmp_calib_data)
{
 800112c:	b5b0      	push	{r4, r5, r7, lr}
 800112e:	b08c      	sub	sp, #48	@ 0x30
 8001130:	af00      	add	r7, sp, #0
 8001132:	4603      	mov	r3, r0
 8001134:	603a      	str	r2, [r7, #0]
 8001136:	80fb      	strh	r3, [r7, #6]
 8001138:	460b      	mov	r3, r1
 800113a:	80bb      	strh	r3, [r7, #4]
	float comp_press = 0.0;
 800113c:	f04f 0300 	mov.w	r3, #0
 8001140:	62fb      	str	r3, [r7, #44]	@ 0x2c
	int32_t X1 = ((uncomp_temp-bmp_calib_data->AC6) * (bmp_calib_data->AC5/(pow(2,15))));
 8001142:	88bb      	ldrh	r3, [r7, #4]
 8001144:	683a      	ldr	r2, [r7, #0]
 8001146:	8952      	ldrh	r2, [r2, #10]
 8001148:	1a9b      	subs	r3, r3, r2
 800114a:	4618      	mov	r0, r3
 800114c:	f7ff f990 	bl	8000470 <__aeabi_i2d>
 8001150:	4604      	mov	r4, r0
 8001152:	460d      	mov	r5, r1
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	891b      	ldrh	r3, [r3, #8]
 8001158:	4618      	mov	r0, r3
 800115a:	f7ff f989 	bl	8000470 <__aeabi_i2d>
 800115e:	f04f 0200 	mov.w	r2, #0
 8001162:	4bc7      	ldr	r3, [pc, #796]	@ (8001480 <get_comp_press+0x354>)
 8001164:	f7ff fb18 	bl	8000798 <__aeabi_ddiv>
 8001168:	4602      	mov	r2, r0
 800116a:	460b      	mov	r3, r1
 800116c:	4620      	mov	r0, r4
 800116e:	4629      	mov	r1, r5
 8001170:	f7ff f9e8 	bl	8000544 <__aeabi_dmul>
 8001174:	4602      	mov	r2, r0
 8001176:	460b      	mov	r3, r1
 8001178:	4610      	mov	r0, r2
 800117a:	4619      	mov	r1, r3
 800117c:	f7ff fbf4 	bl	8000968 <__aeabi_d2iz>
 8001180:	4603      	mov	r3, r0
 8001182:	62bb      	str	r3, [r7, #40]	@ 0x28
	int32_t X2 = ((bmp_calib_data->MC*(pow(2,11))) / (X1+bmp_calib_data->MD));
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	8a5b      	ldrh	r3, [r3, #18]
 8001188:	4618      	mov	r0, r3
 800118a:	f7ff f971 	bl	8000470 <__aeabi_i2d>
 800118e:	f04f 0200 	mov.w	r2, #0
 8001192:	4bbc      	ldr	r3, [pc, #752]	@ (8001484 <get_comp_press+0x358>)
 8001194:	f7ff f9d6 	bl	8000544 <__aeabi_dmul>
 8001198:	4602      	mov	r2, r0
 800119a:	460b      	mov	r3, r1
 800119c:	4614      	mov	r4, r2
 800119e:	461d      	mov	r5, r3
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	8a9b      	ldrh	r3, [r3, #20]
 80011a4:	461a      	mov	r2, r3
 80011a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80011a8:	4413      	add	r3, r2
 80011aa:	4618      	mov	r0, r3
 80011ac:	f7ff f960 	bl	8000470 <__aeabi_i2d>
 80011b0:	4602      	mov	r2, r0
 80011b2:	460b      	mov	r3, r1
 80011b4:	4620      	mov	r0, r4
 80011b6:	4629      	mov	r1, r5
 80011b8:	f7ff faee 	bl	8000798 <__aeabi_ddiv>
 80011bc:	4602      	mov	r2, r0
 80011be:	460b      	mov	r3, r1
 80011c0:	4610      	mov	r0, r2
 80011c2:	4619      	mov	r1, r3
 80011c4:	f7ff fbd0 	bl	8000968 <__aeabi_d2iz>
 80011c8:	4603      	mov	r3, r0
 80011ca:	627b      	str	r3, [r7, #36]	@ 0x24
	int32_t B5 = X1+X2;
 80011cc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80011ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011d0:	4413      	add	r3, r2
 80011d2:	623b      	str	r3, [r7, #32]
	int32_t B6 = B5-4000;
 80011d4:	6a3b      	ldr	r3, [r7, #32]
 80011d6:	f5a3 637a 	sub.w	r3, r3, #4000	@ 0xfa0
 80011da:	61fb      	str	r3, [r7, #28]
	X1 = (bmp_calib_data->B2 * (B6*B6/(pow(2,12))))/(pow(2,11));
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	89db      	ldrh	r3, [r3, #14]
 80011e0:	4618      	mov	r0, r3
 80011e2:	f7ff f945 	bl	8000470 <__aeabi_i2d>
 80011e6:	4604      	mov	r4, r0
 80011e8:	460d      	mov	r5, r1
 80011ea:	69fb      	ldr	r3, [r7, #28]
 80011ec:	fb03 f303 	mul.w	r3, r3, r3
 80011f0:	4618      	mov	r0, r3
 80011f2:	f7ff f93d 	bl	8000470 <__aeabi_i2d>
 80011f6:	f04f 0200 	mov.w	r2, #0
 80011fa:	4ba3      	ldr	r3, [pc, #652]	@ (8001488 <get_comp_press+0x35c>)
 80011fc:	f7ff facc 	bl	8000798 <__aeabi_ddiv>
 8001200:	4602      	mov	r2, r0
 8001202:	460b      	mov	r3, r1
 8001204:	4620      	mov	r0, r4
 8001206:	4629      	mov	r1, r5
 8001208:	f7ff f99c 	bl	8000544 <__aeabi_dmul>
 800120c:	4602      	mov	r2, r0
 800120e:	460b      	mov	r3, r1
 8001210:	4610      	mov	r0, r2
 8001212:	4619      	mov	r1, r3
 8001214:	f04f 0200 	mov.w	r2, #0
 8001218:	4b9a      	ldr	r3, [pc, #616]	@ (8001484 <get_comp_press+0x358>)
 800121a:	f7ff fabd 	bl	8000798 <__aeabi_ddiv>
 800121e:	4602      	mov	r2, r0
 8001220:	460b      	mov	r3, r1
 8001222:	4610      	mov	r0, r2
 8001224:	4619      	mov	r1, r3
 8001226:	f7ff fb9f 	bl	8000968 <__aeabi_d2iz>
 800122a:	4603      	mov	r3, r0
 800122c:	62bb      	str	r3, [r7, #40]	@ 0x28
	X2 = bmp_calib_data->AC2*B6/(pow(2,11));
 800122e:	683b      	ldr	r3, [r7, #0]
 8001230:	885b      	ldrh	r3, [r3, #2]
 8001232:	461a      	mov	r2, r3
 8001234:	69fb      	ldr	r3, [r7, #28]
 8001236:	fb02 f303 	mul.w	r3, r2, r3
 800123a:	4618      	mov	r0, r3
 800123c:	f7ff f918 	bl	8000470 <__aeabi_i2d>
 8001240:	f04f 0200 	mov.w	r2, #0
 8001244:	4b8f      	ldr	r3, [pc, #572]	@ (8001484 <get_comp_press+0x358>)
 8001246:	f7ff faa7 	bl	8000798 <__aeabi_ddiv>
 800124a:	4602      	mov	r2, r0
 800124c:	460b      	mov	r3, r1
 800124e:	4610      	mov	r0, r2
 8001250:	4619      	mov	r1, r3
 8001252:	f7ff fb89 	bl	8000968 <__aeabi_d2iz>
 8001256:	4603      	mov	r3, r0
 8001258:	627b      	str	r3, [r7, #36]	@ 0x24
	int32_t X3 = X1+X2;
 800125a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800125c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800125e:	4413      	add	r3, r2
 8001260:	61bb      	str	r3, [r7, #24]
	int32_t B3 = (((bmp_calib_data->AC1*4+X3)<<OSS)+2)/4;
 8001262:	683b      	ldr	r3, [r7, #0]
 8001264:	881b      	ldrh	r3, [r3, #0]
 8001266:	009a      	lsls	r2, r3, #2
 8001268:	69bb      	ldr	r3, [r7, #24]
 800126a:	4413      	add	r3, r2
 800126c:	3302      	adds	r3, #2
 800126e:	2b00      	cmp	r3, #0
 8001270:	da00      	bge.n	8001274 <get_comp_press+0x148>
 8001272:	3303      	adds	r3, #3
 8001274:	109b      	asrs	r3, r3, #2
 8001276:	617b      	str	r3, [r7, #20]
	X1 = bmp_calib_data->AC3*B6/pow(2,13);
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	889b      	ldrh	r3, [r3, #4]
 800127c:	461a      	mov	r2, r3
 800127e:	69fb      	ldr	r3, [r7, #28]
 8001280:	fb02 f303 	mul.w	r3, r2, r3
 8001284:	4618      	mov	r0, r3
 8001286:	f7ff f8f3 	bl	8000470 <__aeabi_i2d>
 800128a:	f04f 0200 	mov.w	r2, #0
 800128e:	4b7f      	ldr	r3, [pc, #508]	@ (800148c <get_comp_press+0x360>)
 8001290:	f7ff fa82 	bl	8000798 <__aeabi_ddiv>
 8001294:	4602      	mov	r2, r0
 8001296:	460b      	mov	r3, r1
 8001298:	4610      	mov	r0, r2
 800129a:	4619      	mov	r1, r3
 800129c:	f7ff fb64 	bl	8000968 <__aeabi_d2iz>
 80012a0:	4603      	mov	r3, r0
 80012a2:	62bb      	str	r3, [r7, #40]	@ 0x28
	X2 = (bmp_calib_data->B1 * (B6*B6/(pow(2,12))))/(pow(2,16));
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	899b      	ldrh	r3, [r3, #12]
 80012a8:	4618      	mov	r0, r3
 80012aa:	f7ff f8e1 	bl	8000470 <__aeabi_i2d>
 80012ae:	4604      	mov	r4, r0
 80012b0:	460d      	mov	r5, r1
 80012b2:	69fb      	ldr	r3, [r7, #28]
 80012b4:	fb03 f303 	mul.w	r3, r3, r3
 80012b8:	4618      	mov	r0, r3
 80012ba:	f7ff f8d9 	bl	8000470 <__aeabi_i2d>
 80012be:	f04f 0200 	mov.w	r2, #0
 80012c2:	4b71      	ldr	r3, [pc, #452]	@ (8001488 <get_comp_press+0x35c>)
 80012c4:	f7ff fa68 	bl	8000798 <__aeabi_ddiv>
 80012c8:	4602      	mov	r2, r0
 80012ca:	460b      	mov	r3, r1
 80012cc:	4620      	mov	r0, r4
 80012ce:	4629      	mov	r1, r5
 80012d0:	f7ff f938 	bl	8000544 <__aeabi_dmul>
 80012d4:	4602      	mov	r2, r0
 80012d6:	460b      	mov	r3, r1
 80012d8:	4610      	mov	r0, r2
 80012da:	4619      	mov	r1, r3
 80012dc:	f04f 0200 	mov.w	r2, #0
 80012e0:	4b6b      	ldr	r3, [pc, #428]	@ (8001490 <get_comp_press+0x364>)
 80012e2:	f7ff fa59 	bl	8000798 <__aeabi_ddiv>
 80012e6:	4602      	mov	r2, r0
 80012e8:	460b      	mov	r3, r1
 80012ea:	4610      	mov	r0, r2
 80012ec:	4619      	mov	r1, r3
 80012ee:	f7ff fb3b 	bl	8000968 <__aeabi_d2iz>
 80012f2:	4603      	mov	r3, r0
 80012f4:	627b      	str	r3, [r7, #36]	@ 0x24
	X3 = ((X1+X2)+2)/pow(2,2);
 80012f6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80012f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012fa:	4413      	add	r3, r2
 80012fc:	3302      	adds	r3, #2
 80012fe:	4618      	mov	r0, r3
 8001300:	f7ff f8b6 	bl	8000470 <__aeabi_i2d>
 8001304:	f04f 0200 	mov.w	r2, #0
 8001308:	4b62      	ldr	r3, [pc, #392]	@ (8001494 <get_comp_press+0x368>)
 800130a:	f7ff fa45 	bl	8000798 <__aeabi_ddiv>
 800130e:	4602      	mov	r2, r0
 8001310:	460b      	mov	r3, r1
 8001312:	4610      	mov	r0, r2
 8001314:	4619      	mov	r1, r3
 8001316:	f7ff fb27 	bl	8000968 <__aeabi_d2iz>
 800131a:	4603      	mov	r3, r0
 800131c:	61bb      	str	r3, [r7, #24]
	uint32_t B4 = bmp_calib_data->AC4*(uint32_t)(X3+32768)/(pow(2,15));
 800131e:	683b      	ldr	r3, [r7, #0]
 8001320:	88db      	ldrh	r3, [r3, #6]
 8001322:	461a      	mov	r2, r3
 8001324:	69bb      	ldr	r3, [r7, #24]
 8001326:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 800132a:	fb02 f303 	mul.w	r3, r2, r3
 800132e:	4618      	mov	r0, r3
 8001330:	f7ff f88e 	bl	8000450 <__aeabi_ui2d>
 8001334:	f04f 0200 	mov.w	r2, #0
 8001338:	4b51      	ldr	r3, [pc, #324]	@ (8001480 <get_comp_press+0x354>)
 800133a:	f7ff fa2d 	bl	8000798 <__aeabi_ddiv>
 800133e:	4602      	mov	r2, r0
 8001340:	460b      	mov	r3, r1
 8001342:	4610      	mov	r0, r2
 8001344:	4619      	mov	r1, r3
 8001346:	f7ff fb37 	bl	80009b8 <__aeabi_d2uiz>
 800134a:	4603      	mov	r3, r0
 800134c:	613b      	str	r3, [r7, #16]
	int32_t B7 = ((uint32_t)uncomp_press-B3)*(50000>>OSS);
 800134e:	88fa      	ldrh	r2, [r7, #6]
 8001350:	697b      	ldr	r3, [r7, #20]
 8001352:	1ad3      	subs	r3, r2, r3
 8001354:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8001358:	fb02 f303 	mul.w	r3, r2, r3
 800135c:	60fb      	str	r3, [r7, #12]

	if (B7<0x80000000)
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	2b00      	cmp	r3, #0
 8001362:	db0c      	blt.n	800137e <get_comp_press+0x252>
		comp_press = (B7*2)/B4;
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	005b      	lsls	r3, r3, #1
 8001368:	461a      	mov	r2, r3
 800136a:	693b      	ldr	r3, [r7, #16]
 800136c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001370:	ee07 3a90 	vmov	s15, r3
 8001374:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001378:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
 800137c:	e00a      	b.n	8001394 <get_comp_press+0x268>
	else
		comp_press = (B7/B4)*2;
 800137e:	68fa      	ldr	r2, [r7, #12]
 8001380:	693b      	ldr	r3, [r7, #16]
 8001382:	fbb2 f3f3 	udiv	r3, r2, r3
 8001386:	005b      	lsls	r3, r3, #1
 8001388:	ee07 3a90 	vmov	s15, r3
 800138c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001390:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c

	X1 = (comp_press/(pow(2,8)))*(comp_press/(pow(2,8)));
 8001394:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8001396:	f7ff f87d 	bl	8000494 <__aeabi_f2d>
 800139a:	f04f 0200 	mov.w	r2, #0
 800139e:	4b3e      	ldr	r3, [pc, #248]	@ (8001498 <get_comp_press+0x36c>)
 80013a0:	f7ff f9fa 	bl	8000798 <__aeabi_ddiv>
 80013a4:	4602      	mov	r2, r0
 80013a6:	460b      	mov	r3, r1
 80013a8:	4614      	mov	r4, r2
 80013aa:	461d      	mov	r5, r3
 80013ac:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80013ae:	f7ff f871 	bl	8000494 <__aeabi_f2d>
 80013b2:	f04f 0200 	mov.w	r2, #0
 80013b6:	4b38      	ldr	r3, [pc, #224]	@ (8001498 <get_comp_press+0x36c>)
 80013b8:	f7ff f9ee 	bl	8000798 <__aeabi_ddiv>
 80013bc:	4602      	mov	r2, r0
 80013be:	460b      	mov	r3, r1
 80013c0:	4620      	mov	r0, r4
 80013c2:	4629      	mov	r1, r5
 80013c4:	f7ff f8be 	bl	8000544 <__aeabi_dmul>
 80013c8:	4602      	mov	r2, r0
 80013ca:	460b      	mov	r3, r1
 80013cc:	4610      	mov	r0, r2
 80013ce:	4619      	mov	r1, r3
 80013d0:	f7ff faca 	bl	8000968 <__aeabi_d2iz>
 80013d4:	4603      	mov	r3, r0
 80013d6:	62bb      	str	r3, [r7, #40]	@ 0x28
	X1 = (X1*3038)/(pow(2,16));
 80013d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80013da:	f640 32de 	movw	r2, #3038	@ 0xbde
 80013de:	fb02 f303 	mul.w	r3, r2, r3
 80013e2:	4618      	mov	r0, r3
 80013e4:	f7ff f844 	bl	8000470 <__aeabi_i2d>
 80013e8:	f04f 0200 	mov.w	r2, #0
 80013ec:	4b28      	ldr	r3, [pc, #160]	@ (8001490 <get_comp_press+0x364>)
 80013ee:	f7ff f9d3 	bl	8000798 <__aeabi_ddiv>
 80013f2:	4602      	mov	r2, r0
 80013f4:	460b      	mov	r3, r1
 80013f6:	4610      	mov	r0, r2
 80013f8:	4619      	mov	r1, r3
 80013fa:	f7ff fab5 	bl	8000968 <__aeabi_d2iz>
 80013fe:	4603      	mov	r3, r0
 8001400:	62bb      	str	r3, [r7, #40]	@ 0x28
	X2 = (-7357*comp_press)/(pow(2,16));
 8001402:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001406:	ed9f 7a25 	vldr	s14, [pc, #148]	@ 800149c <get_comp_press+0x370>
 800140a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800140e:	ee17 0a90 	vmov	r0, s15
 8001412:	f7ff f83f 	bl	8000494 <__aeabi_f2d>
 8001416:	f04f 0200 	mov.w	r2, #0
 800141a:	4b1d      	ldr	r3, [pc, #116]	@ (8001490 <get_comp_press+0x364>)
 800141c:	f7ff f9bc 	bl	8000798 <__aeabi_ddiv>
 8001420:	4602      	mov	r2, r0
 8001422:	460b      	mov	r3, r1
 8001424:	4610      	mov	r0, r2
 8001426:	4619      	mov	r1, r3
 8001428:	f7ff fa9e 	bl	8000968 <__aeabi_d2iz>
 800142c:	4603      	mov	r3, r0
 800142e:	627b      	str	r3, [r7, #36]	@ 0x24
	comp_press = comp_press + (X1+X2+3791)/(pow(2,4));
 8001430:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8001432:	f7ff f82f 	bl	8000494 <__aeabi_f2d>
 8001436:	4604      	mov	r4, r0
 8001438:	460d      	mov	r5, r1
 800143a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800143c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800143e:	4413      	add	r3, r2
 8001440:	f603 63cf 	addw	r3, r3, #3791	@ 0xecf
 8001444:	4618      	mov	r0, r3
 8001446:	f7ff f813 	bl	8000470 <__aeabi_i2d>
 800144a:	f04f 0200 	mov.w	r2, #0
 800144e:	4b14      	ldr	r3, [pc, #80]	@ (80014a0 <get_comp_press+0x374>)
 8001450:	f7ff f9a2 	bl	8000798 <__aeabi_ddiv>
 8001454:	4602      	mov	r2, r0
 8001456:	460b      	mov	r3, r1
 8001458:	4620      	mov	r0, r4
 800145a:	4629      	mov	r1, r5
 800145c:	f7fe febc 	bl	80001d8 <__adddf3>
 8001460:	4602      	mov	r2, r0
 8001462:	460b      	mov	r3, r1
 8001464:	4610      	mov	r0, r2
 8001466:	4619      	mov	r1, r3
 8001468:	f7ff fac6 	bl	80009f8 <__aeabi_d2f>
 800146c:	4603      	mov	r3, r0
 800146e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	return comp_press;
 8001470:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001472:	ee07 3a90 	vmov	s15, r3
}
 8001476:	eeb0 0a67 	vmov.f32	s0, s15
 800147a:	3730      	adds	r7, #48	@ 0x30
 800147c:	46bd      	mov	sp, r7
 800147e:	bdb0      	pop	{r4, r5, r7, pc}
 8001480:	40e00000 	.word	0x40e00000
 8001484:	40a00000 	.word	0x40a00000
 8001488:	40b00000 	.word	0x40b00000
 800148c:	40c00000 	.word	0x40c00000
 8001490:	40f00000 	.word	0x40f00000
 8001494:	40100000 	.word	0x40100000
 8001498:	40700000 	.word	0x40700000
 800149c:	c5e5e800 	.word	0xc5e5e800
 80014a0:	40300000 	.word	0x40300000

080014a4 <HAL_DelayUs>:
		"TIMEOUT",
		"ERROR",
		"CHECKSUM MISMATCH"
};

static void HAL_DelayUs(TIM_HandleTypeDef *tim, uint16_t us) {
 80014a4:	b480      	push	{r7}
 80014a6:	b083      	sub	sp, #12
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
 80014ac:	460b      	mov	r3, r1
 80014ae:	807b      	strh	r3, [r7, #2]
	__HAL_TIM_SET_COUNTER(tim, 0);
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	2200      	movs	r2, #0
 80014b6:	625a      	str	r2, [r3, #36]	@ 0x24
	while(__HAL_TIM_GET_COUNTER(tim) < us);
 80014b8:	bf00      	nop
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80014c0:	887b      	ldrh	r3, [r7, #2]
 80014c2:	429a      	cmp	r2, r3
 80014c4:	d3f9      	bcc.n	80014ba <HAL_DelayUs+0x16>
}
 80014c6:	bf00      	nop
 80014c8:	bf00      	nop
 80014ca:	370c      	adds	r7, #12
 80014cc:	46bd      	mov	sp, r7
 80014ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d2:	4770      	bx	lr

080014d4 <DHT11_ObserveState>:

static bool DHT11_ObserveState(DHT11_InitTypeDef *DHT11, uint8_t FinalState) {
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b082      	sub	sp, #8
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
 80014dc:	460b      	mov	r3, r1
 80014de:	70fb      	strb	r3, [r7, #3]
	__HAL_TIM_SET_COUNTER(DHT11->_Tim, 0);
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	691b      	ldr	r3, [r3, #16]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	2200      	movs	r2, #0
 80014e8:	625a      	str	r2, [r3, #36]	@ 0x24
	while(__HAL_TIM_GET_COUNTER(DHT11->_Tim) < DHT11_MAX_TIMEOUT) {
 80014ea:	e00e      	b.n	800150a <DHT11_ObserveState+0x36>
		if(HAL_GPIO_ReadPin(DHT11->_GPIOx, DHT11->_Pin) == FinalState) return true;
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	68da      	ldr	r2, [r3, #12]
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	895b      	ldrh	r3, [r3, #10]
 80014f4:	4619      	mov	r1, r3
 80014f6:	4610      	mov	r0, r2
 80014f8:	f002 fcde 	bl	8003eb8 <HAL_GPIO_ReadPin>
 80014fc:	4603      	mov	r3, r0
 80014fe:	461a      	mov	r2, r3
 8001500:	78fb      	ldrb	r3, [r7, #3]
 8001502:	4293      	cmp	r3, r2
 8001504:	d101      	bne.n	800150a <DHT11_ObserveState+0x36>
 8001506:	2301      	movs	r3, #1
 8001508:	e006      	b.n	8001518 <DHT11_ObserveState+0x44>
	while(__HAL_TIM_GET_COUNTER(DHT11->_Tim) < DHT11_MAX_TIMEOUT) {
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	691b      	ldr	r3, [r3, #16]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001512:	2b63      	cmp	r3, #99	@ 0x63
 8001514:	d9ea      	bls.n	80014ec <DHT11_ObserveState+0x18>
	}

	return false;
 8001516:	2300      	movs	r3, #0
}
 8001518:	4618      	mov	r0, r3
 800151a:	3708      	adds	r7, #8
 800151c:	46bd      	mov	sp, r7
 800151e:	bd80      	pop	{r7, pc}

08001520 <DHT11_SetPinMode>:

static void DHT11_SetPinMode(DHT11_InitTypeDef *DHT11, uint8_t MODE) {
 8001520:	b580      	push	{r7, lr}
 8001522:	b088      	sub	sp, #32
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
 8001528:	460b      	mov	r3, r1
 800152a:	70fb      	strb	r3, [r7, #3]
	GPIO_InitTypeDef GPIO_CFG = {
 800152c:	f107 030c 	add.w	r3, r7, #12
 8001530:	2200      	movs	r2, #0
 8001532:	601a      	str	r2, [r3, #0]
 8001534:	605a      	str	r2, [r3, #4]
 8001536:	609a      	str	r2, [r3, #8]
 8001538:	60da      	str	r2, [r3, #12]
 800153a:	611a      	str	r2, [r3, #16]
			.Mode = MODE?GPIO_MODE_INPUT:GPIO_MODE_OUTPUT_PP,
			.Pin = DHT11->_Pin,
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	895b      	ldrh	r3, [r3, #10]
	GPIO_InitTypeDef GPIO_CFG = {
 8001540:	60fb      	str	r3, [r7, #12]
			.Mode = MODE?GPIO_MODE_INPUT:GPIO_MODE_OUTPUT_PP,
 8001542:	78fb      	ldrb	r3, [r7, #3]
 8001544:	2b00      	cmp	r3, #0
 8001546:	bf0c      	ite	eq
 8001548:	2301      	moveq	r3, #1
 800154a:	2300      	movne	r3, #0
 800154c:	b2db      	uxtb	r3, r3
	GPIO_InitTypeDef GPIO_CFG = {
 800154e:	613b      	str	r3, [r7, #16]
			.Pull = GPIO_NOPULL,
			.Speed = GPIO_SPEED_FREQ_LOW
	};

	HAL_GPIO_Init(DHT11->_GPIOx, &GPIO_CFG);
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	68db      	ldr	r3, [r3, #12]
 8001554:	f107 020c 	add.w	r2, r7, #12
 8001558:	4611      	mov	r1, r2
 800155a:	4618      	mov	r0, r3
 800155c:	f002 fb42 	bl	8003be4 <HAL_GPIO_Init>
}
 8001560:	bf00      	nop
 8001562:	3720      	adds	r7, #32
 8001564:	46bd      	mov	sp, r7
 8001566:	bd80      	pop	{r7, pc}

08001568 <HAL_DHT11_Init>:
void HAL_DHT11_Init(
		DHT11_InitTypeDef *DHT11,
		GPIO_TypeDef *GPIOx,
		uint16_t GPIO_Pin,
		TIM_HandleTypeDef *TIM
) {
 8001568:	b580      	push	{r7, lr}
 800156a:	b084      	sub	sp, #16
 800156c:	af00      	add	r7, sp, #0
 800156e:	60f8      	str	r0, [r7, #12]
 8001570:	60b9      	str	r1, [r7, #8]
 8001572:	603b      	str	r3, [r7, #0]
 8001574:	4613      	mov	r3, r2
 8001576:	80fb      	strh	r3, [r7, #6]
	DHT11->_GPIOx = GPIOx;
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	68ba      	ldr	r2, [r7, #8]
 800157c:	60da      	str	r2, [r3, #12]
	DHT11->_Pin = GPIO_Pin;
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	88fa      	ldrh	r2, [r7, #6]
 8001582:	815a      	strh	r2, [r3, #10]
	DHT11->_Tim = TIM;
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	683a      	ldr	r2, [r7, #0]
 8001588:	611a      	str	r2, [r3, #16]
	DHT11->Temperature = 0.0f;
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	f04f 0200 	mov.w	r2, #0
 8001590:	601a      	str	r2, [r3, #0]
	DHT11->Humidity = 0.0f;
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	f04f 0200 	mov.w	r2, #0
 8001598:	605a      	str	r2, [r3, #4]

	HAL_TIM_Base_Start(DHT11->_Tim);
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	691b      	ldr	r3, [r3, #16]
 800159e:	4618      	mov	r0, r3
 80015a0:	f005 f854 	bl	800664c <HAL_TIM_Base_Start>
}
 80015a4:	bf00      	nop
 80015a6:	3710      	adds	r7, #16
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bd80      	pop	{r7, pc}

080015ac <DHT11_ReadData>:

const char* const HAL_DHT11_GetErrorMsg(DHT11_StatusTypeDef Status) {
	return ErrorMsg[Status];
}

static DHT11_StatusTypeDef DHT11_ReadData(DHT11_InitTypeDef *DHT11) {
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b084      	sub	sp, #16
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
	uint8_t Bits = 0;
 80015b4:	2300      	movs	r3, #0
 80015b6:	73fb      	strb	r3, [r7, #15]
	uint8_t Packets[DHT11_MAX_BYTE_PACKETS] = {0};
 80015b8:	2300      	movs	r3, #0
 80015ba:	60bb      	str	r3, [r7, #8]
 80015bc:	2300      	movs	r3, #0
 80015be:	733b      	strb	r3, [r7, #12]
	uint8_t PacketIndex = 0;
 80015c0:	2300      	movs	r3, #0
 80015c2:	73bb      	strb	r3, [r7, #14]

	DHT11_SetPinMode(DHT11, DHT11_PIN_OUTPUT);
 80015c4:	2100      	movs	r1, #0
 80015c6:	6878      	ldr	r0, [r7, #4]
 80015c8:	f7ff ffaa 	bl	8001520 <DHT11_SetPinMode>
	// PULLING the Line to Low and waits for 20ms
	HAL_GPIO_WritePin(DHT11->_GPIOx, DHT11->_Pin, GPIO_PIN_RESET);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	68d8      	ldr	r0, [r3, #12]
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	895b      	ldrh	r3, [r3, #10]
 80015d4:	2200      	movs	r2, #0
 80015d6:	4619      	mov	r1, r3
 80015d8:	f002 fc86 	bl	8003ee8 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 80015dc:	2014      	movs	r0, #20
 80015de:	f000 ff15 	bl	800240c <HAL_Delay>
	// PULLING the Line to HIGH and waits for 40us
	HAL_GPIO_WritePin(DHT11->_GPIOx, DHT11->_Pin, GPIO_PIN_SET);
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	68d8      	ldr	r0, [r3, #12]
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	895b      	ldrh	r3, [r3, #10]
 80015ea:	2201      	movs	r2, #1
 80015ec:	4619      	mov	r1, r3
 80015ee:	f002 fc7b 	bl	8003ee8 <HAL_GPIO_WritePin>
	HAL_DelayUs(DHT11->_Tim, 40);
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	691b      	ldr	r3, [r3, #16]
 80015f6:	2128      	movs	r1, #40	@ 0x28
 80015f8:	4618      	mov	r0, r3
 80015fa:	f7ff ff53 	bl	80014a4 <HAL_DelayUs>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015fe:	b672      	cpsid	i
}
 8001600:	bf00      	nop

	__disable_irq();
	DHT11_SetPinMode(DHT11, DHT11_PIN_INPUT);
 8001602:	2101      	movs	r1, #1
 8001604:	6878      	ldr	r0, [r7, #4]
 8001606:	f7ff ff8b 	bl	8001520 <DHT11_SetPinMode>

	// If the Line is still HIGH, that means DHT11 is not responding
	if(HAL_GPIO_ReadPin(DHT11->_GPIOx, DHT11->_Pin) == GPIO_PIN_SET) {
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	68da      	ldr	r2, [r3, #12]
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	895b      	ldrh	r3, [r3, #10]
 8001612:	4619      	mov	r1, r3
 8001614:	4610      	mov	r0, r2
 8001616:	f002 fc4f 	bl	8003eb8 <HAL_GPIO_ReadPin>
 800161a:	4603      	mov	r3, r0
 800161c:	2b01      	cmp	r3, #1
 800161e:	d103      	bne.n	8001628 <DHT11_ReadData+0x7c>
  __ASM volatile ("cpsie i" : : : "memory");
 8001620:	b662      	cpsie	i
}
 8001622:	bf00      	nop
		__enable_irq();
		return DHT11_ERROR;
 8001624:	2302      	movs	r3, #2
 8001626:	e0ad      	b.n	8001784 <DHT11_ReadData+0x1d8>
	}

	// Now DHT11 have pulled the Line to LOW, we will wait till it PULLS is HIGH
	if(!DHT11_ObserveState(DHT11, GPIO_PIN_SET)) {
 8001628:	2101      	movs	r1, #1
 800162a:	6878      	ldr	r0, [r7, #4]
 800162c:	f7ff ff52 	bl	80014d4 <DHT11_ObserveState>
 8001630:	4603      	mov	r3, r0
 8001632:	f083 0301 	eor.w	r3, r3, #1
 8001636:	b2db      	uxtb	r3, r3
 8001638:	2b00      	cmp	r3, #0
 800163a:	d003      	beq.n	8001644 <DHT11_ReadData+0x98>
  __ASM volatile ("cpsie i" : : : "memory");
 800163c:	b662      	cpsie	i
}
 800163e:	bf00      	nop
		__enable_irq();
		return DHT11_TIMEOUT;
 8001640:	2301      	movs	r3, #1
 8001642:	e09f      	b.n	8001784 <DHT11_ReadData+0x1d8>
	}

	// Now DHT11 have pulled the Line to HIGH, we will wait till it PULLS is to LOW
	// which means the handshake is done
	if(!DHT11_ObserveState(DHT11, GPIO_PIN_RESET)) {
 8001644:	2100      	movs	r1, #0
 8001646:	6878      	ldr	r0, [r7, #4]
 8001648:	f7ff ff44 	bl	80014d4 <DHT11_ObserveState>
 800164c:	4603      	mov	r3, r0
 800164e:	f083 0301 	eor.w	r3, r3, #1
 8001652:	b2db      	uxtb	r3, r3
 8001654:	2b00      	cmp	r3, #0
 8001656:	d05b      	beq.n	8001710 <DHT11_ReadData+0x164>
  __ASM volatile ("cpsie i" : : : "memory");
 8001658:	b662      	cpsie	i
}
 800165a:	bf00      	nop
			__enable_irq();
			return DHT11_TIMEOUT;
 800165c:	2301      	movs	r3, #1
 800165e:	e091      	b.n	8001784 <DHT11_ReadData+0x1d8>
	}

	while(Bits < 40) {
			// DHT11 is now starting to transmit One Bit
			// We will wait till it PULL the Line to HIGH
			if(!DHT11_ObserveState(DHT11, GPIO_PIN_SET)) {
 8001660:	2101      	movs	r1, #1
 8001662:	6878      	ldr	r0, [r7, #4]
 8001664:	f7ff ff36 	bl	80014d4 <DHT11_ObserveState>
 8001668:	4603      	mov	r3, r0
 800166a:	f083 0301 	eor.w	r3, r3, #1
 800166e:	b2db      	uxtb	r3, r3
 8001670:	2b00      	cmp	r3, #0
 8001672:	d003      	beq.n	800167c <DHT11_ReadData+0xd0>
  __ASM volatile ("cpsie i" : : : "memory");
 8001674:	b662      	cpsie	i
}
 8001676:	bf00      	nop
				__enable_irq();
				return DHT11_TIMEOUT;
 8001678:	2301      	movs	r3, #1
 800167a:	e083      	b.n	8001784 <DHT11_ReadData+0x1d8>
			}

			// Now we will just count the us it stays HIGH
			// 28us means 0
			// 70us means 1
			__HAL_TIM_SET_COUNTER(DHT11->_Tim, 0);
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	691b      	ldr	r3, [r3, #16]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	2200      	movs	r2, #0
 8001684:	625a      	str	r2, [r3, #36]	@ 0x24
			while(HAL_GPIO_ReadPin(DHT11->_GPIOx, DHT11->_Pin) == GPIO_PIN_SET) {
 8001686:	e007      	b.n	8001698 <DHT11_ReadData+0xec>
				if(__HAL_TIM_GET_COUNTER(DHT11->_Tim) > DHT11_MAX_TIMEOUT) {
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	691b      	ldr	r3, [r3, #16]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001690:	2b64      	cmp	r3, #100	@ 0x64
 8001692:	d901      	bls.n	8001698 <DHT11_ReadData+0xec>
					return DHT11_TIMEOUT;
 8001694:	2301      	movs	r3, #1
 8001696:	e075      	b.n	8001784 <DHT11_ReadData+0x1d8>
			while(HAL_GPIO_ReadPin(DHT11->_GPIOx, DHT11->_Pin) == GPIO_PIN_SET) {
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	68da      	ldr	r2, [r3, #12]
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	895b      	ldrh	r3, [r3, #10]
 80016a0:	4619      	mov	r1, r3
 80016a2:	4610      	mov	r0, r2
 80016a4:	f002 fc08 	bl	8003eb8 <HAL_GPIO_ReadPin>
 80016a8:	4603      	mov	r3, r0
 80016aa:	2b01      	cmp	r3, #1
 80016ac:	d0ec      	beq.n	8001688 <DHT11_ReadData+0xdc>
				}
			}

			Packets[PacketIndex] = Packets[PacketIndex] << 1;
 80016ae:	7bbb      	ldrb	r3, [r7, #14]
 80016b0:	3310      	adds	r3, #16
 80016b2:	443b      	add	r3, r7
 80016b4:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 80016b8:	7bbb      	ldrb	r3, [r7, #14]
 80016ba:	0052      	lsls	r2, r2, #1
 80016bc:	b2d2      	uxtb	r2, r2
 80016be:	3310      	adds	r3, #16
 80016c0:	443b      	add	r3, r7
 80016c2:	f803 2c08 	strb.w	r2, [r3, #-8]
			Packets[PacketIndex] |= (__HAL_TIM_GET_COUNTER(DHT11->_Tim) > 50); // 50us is good in between
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	691b      	ldr	r3, [r3, #16]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016ce:	2b32      	cmp	r3, #50	@ 0x32
 80016d0:	bf8c      	ite	hi
 80016d2:	2301      	movhi	r3, #1
 80016d4:	2300      	movls	r3, #0
 80016d6:	b2db      	uxtb	r3, r3
 80016d8:	4619      	mov	r1, r3
 80016da:	7bbb      	ldrb	r3, [r7, #14]
 80016dc:	3310      	adds	r3, #16
 80016de:	443b      	add	r3, r7
 80016e0:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 80016e4:	b25a      	sxtb	r2, r3
 80016e6:	b24b      	sxtb	r3, r1
 80016e8:	4313      	orrs	r3, r2
 80016ea:	b25a      	sxtb	r2, r3
 80016ec:	7bbb      	ldrb	r3, [r7, #14]
 80016ee:	b2d2      	uxtb	r2, r2
 80016f0:	3310      	adds	r3, #16
 80016f2:	443b      	add	r3, r7
 80016f4:	f803 2c08 	strb.w	r2, [r3, #-8]
			Bits++;
 80016f8:	7bfb      	ldrb	r3, [r7, #15]
 80016fa:	3301      	adds	r3, #1
 80016fc:	73fb      	strb	r3, [r7, #15]
			if(!(Bits % 8)) PacketIndex++;
 80016fe:	7bfb      	ldrb	r3, [r7, #15]
 8001700:	f003 0307 	and.w	r3, r3, #7
 8001704:	b2db      	uxtb	r3, r3
 8001706:	2b00      	cmp	r3, #0
 8001708:	d102      	bne.n	8001710 <DHT11_ReadData+0x164>
 800170a:	7bbb      	ldrb	r3, [r7, #14]
 800170c:	3301      	adds	r3, #1
 800170e:	73bb      	strb	r3, [r7, #14]
	while(Bits < 40) {
 8001710:	7bfb      	ldrb	r3, [r7, #15]
 8001712:	2b27      	cmp	r3, #39	@ 0x27
 8001714:	d9a4      	bls.n	8001660 <DHT11_ReadData+0xb4>
  __ASM volatile ("cpsie i" : : : "memory");
 8001716:	b662      	cpsie	i
}
 8001718:	bf00      	nop
	}

	__enable_irq();

	// Last 8 bits are Checksum, which is the sum of all the previously transmitted 4 bytes
	if(Packets[4] != (Packets[0] + Packets[1] + Packets[2] + Packets[3])) {
 800171a:	7b3b      	ldrb	r3, [r7, #12]
 800171c:	461a      	mov	r2, r3
 800171e:	7a3b      	ldrb	r3, [r7, #8]
 8001720:	4619      	mov	r1, r3
 8001722:	7a7b      	ldrb	r3, [r7, #9]
 8001724:	440b      	add	r3, r1
 8001726:	7ab9      	ldrb	r1, [r7, #10]
 8001728:	440b      	add	r3, r1
 800172a:	7af9      	ldrb	r1, [r7, #11]
 800172c:	440b      	add	r3, r1
 800172e:	429a      	cmp	r2, r3
 8001730:	d001      	beq.n	8001736 <DHT11_ReadData+0x18a>
		return DHT11_CHECKSUM_MISMATCH;
 8001732:	2303      	movs	r3, #3
 8001734:	e026      	b.n	8001784 <DHT11_ReadData+0x1d8>
	}

	DHT11->Humidity = Packets[0] + (Packets[1] * 0.1f);
 8001736:	7a3b      	ldrb	r3, [r7, #8]
 8001738:	ee07 3a90 	vmov	s15, r3
 800173c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001740:	7a7b      	ldrb	r3, [r7, #9]
 8001742:	ee07 3a90 	vmov	s15, r3
 8001746:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800174a:	eddf 6a10 	vldr	s13, [pc, #64]	@ 800178c <DHT11_ReadData+0x1e0>
 800174e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001752:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	edc3 7a01 	vstr	s15, [r3, #4]
	DHT11->Temperature = Packets[2] + (Packets[3] * 0.1f);
 800175c:	7abb      	ldrb	r3, [r7, #10]
 800175e:	ee07 3a90 	vmov	s15, r3
 8001762:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001766:	7afb      	ldrb	r3, [r7, #11]
 8001768:	ee07 3a90 	vmov	s15, r3
 800176c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001770:	eddf 6a06 	vldr	s13, [pc, #24]	@ 800178c <DHT11_ReadData+0x1e0>
 8001774:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001778:	ee77 7a27 	vadd.f32	s15, s14, s15
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	edc3 7a00 	vstr	s15, [r3]

	return DHT11_OK;
 8001782:	2300      	movs	r3, #0
}
 8001784:	4618      	mov	r0, r3
 8001786:	3710      	adds	r7, #16
 8001788:	46bd      	mov	sp, r7
 800178a:	bd80      	pop	{r7, pc}
 800178c:	3dcccccd 	.word	0x3dcccccd

08001790 <HAL_DHT11_ReadData>:

DHT11_StatusTypeDef HAL_DHT11_ReadData(DHT11_InitTypeDef *DHT11) {
 8001790:	b580      	push	{r7, lr}
 8001792:	b082      	sub	sp, #8
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
	return DHT11->Status = DHT11_ReadData(DHT11);
 8001798:	6878      	ldr	r0, [r7, #4]
 800179a:	f7ff ff07 	bl	80015ac <DHT11_ReadData>
 800179e:	4603      	mov	r3, r0
 80017a0:	461a      	mov	r2, r3
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	721a      	strb	r2, [r3, #8]
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	7a1b      	ldrb	r3, [r3, #8]
}
 80017aa:	4618      	mov	r0, r3
 80017ac:	3708      	adds	r7, #8
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}
	...

080017b4 <HAL_ADC_ConvCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80017b4:	b480      	push	{r7}
 80017b6:	b083      	sub	sp, #12
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
	ldr_voltage = (uint16_t) analog_vals[0];
 80017bc:	4b07      	ldr	r3, [pc, #28]	@ (80017dc <HAL_ADC_ConvCpltCallback+0x28>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	b29a      	uxth	r2, r3
 80017c2:	4b07      	ldr	r3, [pc, #28]	@ (80017e0 <HAL_ADC_ConvCpltCallback+0x2c>)
 80017c4:	801a      	strh	r2, [r3, #0]
	raindrops_voltage = (uint16_t) analog_vals[1];
 80017c6:	4b05      	ldr	r3, [pc, #20]	@ (80017dc <HAL_ADC_ConvCpltCallback+0x28>)
 80017c8:	685b      	ldr	r3, [r3, #4]
 80017ca:	b29a      	uxth	r2, r3
 80017cc:	4b05      	ldr	r3, [pc, #20]	@ (80017e4 <HAL_ADC_ConvCpltCallback+0x30>)
 80017ce:	801a      	strh	r2, [r3, #0]
}
 80017d0:	bf00      	nop
 80017d2:	370c      	adds	r7, #12
 80017d4:	46bd      	mov	sp, r7
 80017d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017da:	4770      	bx	lr
 80017dc:	20000234 	.word	0x20000234
 80017e0:	2000023c 	.word	0x2000023c
 80017e4:	2000023e 	.word	0x2000023e

080017e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b082      	sub	sp, #8
 80017ec:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80017ee:	f000 fd98 	bl	8002322 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80017f2:	f000 f8c9 	bl	8001988 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80017f6:	f000 faa9 	bl	8001d4c <MX_GPIO_Init>
  MX_DMA_Init();
 80017fa:	f000 fa89 	bl	8001d10 <MX_DMA_Init>
  MX_ADC1_Init();
 80017fe:	f000 f927 	bl	8001a50 <MX_ADC1_Init>
  MX_I2C1_Init();
 8001802:	f000 f999 	bl	8001b38 <MX_I2C1_Init>
  MX_TIM2_Init();
 8001806:	f000 fa05 	bl	8001c14 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 800180a:	f000 fa51 	bl	8001cb0 <MX_USART1_UART_Init>
  MX_LPTIM2_Init();
 800180e:	f000 f9d3 	bl	8001bb8 <MX_LPTIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_LPTIM_TimeOut_Start_IT(&hlptim2,65535,19999);
 8001812:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8001816:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800181a:	484a      	ldr	r0, [pc, #296]	@ (8001944 <main+0x15c>)
 800181c:	f003 fa5c 	bl	8004cd8 <HAL_LPTIM_TimeOut_Start_IT>
  HAL_DHT11_Init(&dht, GPIOA, GPIO_PIN_2, &htim2);
 8001820:	4b49      	ldr	r3, [pc, #292]	@ (8001948 <main+0x160>)
 8001822:	2204      	movs	r2, #4
 8001824:	f04f 4190 	mov.w	r1, #1207959552	@ 0x48000000
 8001828:	4848      	ldr	r0, [pc, #288]	@ (800194c <main+0x164>)
 800182a:	f7ff fe9d 	bl	8001568 <HAL_DHT11_Init>
  read_calibration_data(&hi2c1,&bmp_calib_data);
 800182e:	4948      	ldr	r1, [pc, #288]	@ (8001950 <main+0x168>)
 8001830:	4848      	ldr	r0, [pc, #288]	@ (8001954 <main+0x16c>)
 8001832:	f7ff faa9 	bl	8000d88 <read_calibration_data>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	u_temp = get_uncomp_temp(&hi2c1,&bmp_calib_data);
 8001836:	4946      	ldr	r1, [pc, #280]	@ (8001950 <main+0x168>)
 8001838:	4846      	ldr	r0, [pc, #280]	@ (8001954 <main+0x16c>)
 800183a:	f7ff fb15 	bl	8000e68 <get_uncomp_temp>
 800183e:	4603      	mov	r3, r0
 8001840:	461a      	mov	r2, r3
 8001842:	4b45      	ldr	r3, [pc, #276]	@ (8001958 <main+0x170>)
 8001844:	801a      	strh	r2, [r3, #0]
	u_press = get_uncomp_press(&hi2c1,&bmp_calib_data);
 8001846:	4942      	ldr	r1, [pc, #264]	@ (8001950 <main+0x168>)
 8001848:	4842      	ldr	r0, [pc, #264]	@ (8001954 <main+0x16c>)
 800184a:	f7ff fbbf 	bl	8000fcc <get_uncomp_press>
 800184e:	4603      	mov	r3, r0
 8001850:	4a42      	ldr	r2, [pc, #264]	@ (800195c <main+0x174>)
 8001852:	6013      	str	r3, [r2, #0]

	// Read LDR and Raindrop sensor analog voltages
	HAL_ADC_Start_DMA(&hadc1,analog_vals,2);
 8001854:	2202      	movs	r2, #2
 8001856:	4942      	ldr	r1, [pc, #264]	@ (8001960 <main+0x178>)
 8001858:	4842      	ldr	r0, [pc, #264]	@ (8001964 <main+0x17c>)
 800185a:	f001 f925 	bl	8002aa8 <HAL_ADC_Start_DMA>

	// Read float values
	temp_buffer.f_val = get_comp_temp(u_temp,&bmp_calib_data);
 800185e:	4b3e      	ldr	r3, [pc, #248]	@ (8001958 <main+0x170>)
 8001860:	881b      	ldrh	r3, [r3, #0]
 8001862:	493b      	ldr	r1, [pc, #236]	@ (8001950 <main+0x168>)
 8001864:	4618      	mov	r0, r3
 8001866:	f7ff fbe7 	bl	8001038 <get_comp_temp>
 800186a:	eef0 7a40 	vmov.f32	s15, s0
 800186e:	4b3e      	ldr	r3, [pc, #248]	@ (8001968 <main+0x180>)
 8001870:	edc3 7a00 	vstr	s15, [r3]
	press_buffer.f_val = get_comp_press(u_temp,u_press,&bmp_calib_data);
 8001874:	4b38      	ldr	r3, [pc, #224]	@ (8001958 <main+0x170>)
 8001876:	881b      	ldrh	r3, [r3, #0]
 8001878:	4a38      	ldr	r2, [pc, #224]	@ (800195c <main+0x174>)
 800187a:	6812      	ldr	r2, [r2, #0]
 800187c:	b291      	uxth	r1, r2
 800187e:	4a34      	ldr	r2, [pc, #208]	@ (8001950 <main+0x168>)
 8001880:	4618      	mov	r0, r3
 8001882:	f7ff fc53 	bl	800112c <get_comp_press>
 8001886:	eef0 7a40 	vmov.f32	s15, s0
 800188a:	4b38      	ldr	r3, [pc, #224]	@ (800196c <main+0x184>)
 800188c:	edc3 7a00 	vstr	s15, [r3]
	HAL_DHT11_ReadData(&dht);
 8001890:	482e      	ldr	r0, [pc, #184]	@ (800194c <main+0x164>)
 8001892:	f7ff ff7d 	bl	8001790 <HAL_DHT11_ReadData>
	dht_temp_buffer.f_val = dht.Temperature;
 8001896:	4b2d      	ldr	r3, [pc, #180]	@ (800194c <main+0x164>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	4a35      	ldr	r2, [pc, #212]	@ (8001970 <main+0x188>)
 800189c:	6013      	str	r3, [r2, #0]
	dht_hum_buffer.f_val = dht.Humidity;
 800189e:	4b2b      	ldr	r3, [pc, #172]	@ (800194c <main+0x164>)
 80018a0:	685b      	ldr	r3, [r3, #4]
 80018a2:	4a34      	ldr	r2, [pc, #208]	@ (8001974 <main+0x18c>)
 80018a4:	6013      	str	r3, [r2, #0]

	// First 16 bytes for float readings
	for(int i=0;i<4;i++)
 80018a6:	2300      	movs	r3, #0
 80018a8:	607b      	str	r3, [r7, #4]
 80018aa:	e023      	b.n	80018f4 <main+0x10c>
	{
		transmit_buffer[i] = temp_buffer.f_val_buffer[i];
 80018ac:	4a2e      	ldr	r2, [pc, #184]	@ (8001968 <main+0x180>)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	4413      	add	r3, r2
 80018b2:	7819      	ldrb	r1, [r3, #0]
 80018b4:	4a30      	ldr	r2, [pc, #192]	@ (8001978 <main+0x190>)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	4413      	add	r3, r2
 80018ba:	460a      	mov	r2, r1
 80018bc:	701a      	strb	r2, [r3, #0]
		transmit_buffer[i+4] = press_buffer.f_val_buffer[i];
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	3304      	adds	r3, #4
 80018c2:	492a      	ldr	r1, [pc, #168]	@ (800196c <main+0x184>)
 80018c4:	687a      	ldr	r2, [r7, #4]
 80018c6:	440a      	add	r2, r1
 80018c8:	7811      	ldrb	r1, [r2, #0]
 80018ca:	4a2b      	ldr	r2, [pc, #172]	@ (8001978 <main+0x190>)
 80018cc:	54d1      	strb	r1, [r2, r3]
		transmit_buffer[i+8] = dht_temp_buffer.f_val_buffer[i];
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	3308      	adds	r3, #8
 80018d2:	4927      	ldr	r1, [pc, #156]	@ (8001970 <main+0x188>)
 80018d4:	687a      	ldr	r2, [r7, #4]
 80018d6:	440a      	add	r2, r1
 80018d8:	7811      	ldrb	r1, [r2, #0]
 80018da:	4a27      	ldr	r2, [pc, #156]	@ (8001978 <main+0x190>)
 80018dc:	54d1      	strb	r1, [r2, r3]
		transmit_buffer[i+12] = dht_hum_buffer.f_val_buffer[i];
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	330c      	adds	r3, #12
 80018e2:	4924      	ldr	r1, [pc, #144]	@ (8001974 <main+0x18c>)
 80018e4:	687a      	ldr	r2, [r7, #4]
 80018e6:	440a      	add	r2, r1
 80018e8:	7811      	ldrb	r1, [r2, #0]
 80018ea:	4a23      	ldr	r2, [pc, #140]	@ (8001978 <main+0x190>)
 80018ec:	54d1      	strb	r1, [r2, r3]
	for(int i=0;i<4;i++)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	3301      	adds	r3, #1
 80018f2:	607b      	str	r3, [r7, #4]
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	2b03      	cmp	r3, #3
 80018f8:	ddd8      	ble.n	80018ac <main+0xc4>
	}

	transmit_buffer[16] = (uint8_t) (ldr_voltage & 0x00FF);
 80018fa:	4b20      	ldr	r3, [pc, #128]	@ (800197c <main+0x194>)
 80018fc:	881b      	ldrh	r3, [r3, #0]
 80018fe:	b2da      	uxtb	r2, r3
 8001900:	4b1d      	ldr	r3, [pc, #116]	@ (8001978 <main+0x190>)
 8001902:	741a      	strb	r2, [r3, #16]
	transmit_buffer[17] = (uint8_t) ((ldr_voltage & 0xFF00)>>8);
 8001904:	4b1d      	ldr	r3, [pc, #116]	@ (800197c <main+0x194>)
 8001906:	881b      	ldrh	r3, [r3, #0]
 8001908:	0a1b      	lsrs	r3, r3, #8
 800190a:	b29b      	uxth	r3, r3
 800190c:	b2da      	uxtb	r2, r3
 800190e:	4b1a      	ldr	r3, [pc, #104]	@ (8001978 <main+0x190>)
 8001910:	745a      	strb	r2, [r3, #17]

	transmit_buffer[18] = (uint8_t) (raindrops_voltage & 0x00FF);
 8001912:	4b1b      	ldr	r3, [pc, #108]	@ (8001980 <main+0x198>)
 8001914:	881b      	ldrh	r3, [r3, #0]
 8001916:	b2da      	uxtb	r2, r3
 8001918:	4b17      	ldr	r3, [pc, #92]	@ (8001978 <main+0x190>)
 800191a:	749a      	strb	r2, [r3, #18]
	transmit_buffer[19] = (uint8_t) ((raindrops_voltage & 0xFF00)>>8);
 800191c:	4b18      	ldr	r3, [pc, #96]	@ (8001980 <main+0x198>)
 800191e:	881b      	ldrh	r3, [r3, #0]
 8001920:	0a1b      	lsrs	r3, r3, #8
 8001922:	b29b      	uxth	r3, r3
 8001924:	b2da      	uxtb	r2, r3
 8001926:	4b14      	ldr	r3, [pc, #80]	@ (8001978 <main+0x190>)
 8001928:	74da      	strb	r2, [r3, #19]

	HAL_UART_Transmit(&huart1,transmit_buffer,20,1000);
 800192a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800192e:	2214      	movs	r2, #20
 8001930:	4911      	ldr	r1, [pc, #68]	@ (8001978 <main+0x190>)
 8001932:	4814      	ldr	r0, [pc, #80]	@ (8001984 <main+0x19c>)
 8001934:	f005 f95e 	bl	8006bf4 <HAL_UART_Transmit>

	// Not needed due to sleep
	//HAL_Delay(500);
	HAL_SuspendTick();
 8001938:	f000 fd8c 	bl	8002454 <HAL_SuspendTick>
	//HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
	//HAL_PWR_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
	HAL_PWREx_EnterSTOP0Mode(PWR_SLEEPENTRY_WFI);
 800193c:	2001      	movs	r0, #1
 800193e:	f003 fcd3 	bl	80052e8 <HAL_PWREx_EnterSTOP0Mode>
	u_temp = get_uncomp_temp(&hi2c1,&bmp_calib_data);
 8001942:	e778      	b.n	8001836 <main+0x4e>
 8001944:	20000128 	.word	0x20000128
 8001948:	20000160 	.word	0x20000160
 800194c:	2000025c 	.word	0x2000025c
 8001950:	20000270 	.word	0x20000270
 8001954:	200000d4 	.word	0x200000d4
 8001958:	20000254 	.word	0x20000254
 800195c:	20000258 	.word	0x20000258
 8001960:	20000234 	.word	0x20000234
 8001964:	20000028 	.word	0x20000028
 8001968:	20000288 	.word	0x20000288
 800196c:	2000028c 	.word	0x2000028c
 8001970:	20000290 	.word	0x20000290
 8001974:	20000294 	.word	0x20000294
 8001978:	20000240 	.word	0x20000240
 800197c:	2000023c 	.word	0x2000023c
 8001980:	2000023e 	.word	0x2000023e
 8001984:	200001ac 	.word	0x200001ac

08001988 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b096      	sub	sp, #88	@ 0x58
 800198c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800198e:	f107 0314 	add.w	r3, r7, #20
 8001992:	2244      	movs	r2, #68	@ 0x44
 8001994:	2100      	movs	r1, #0
 8001996:	4618      	mov	r0, r3
 8001998:	f005 fdfd 	bl	8007596 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800199c:	463b      	mov	r3, r7
 800199e:	2200      	movs	r2, #0
 80019a0:	601a      	str	r2, [r3, #0]
 80019a2:	605a      	str	r2, [r3, #4]
 80019a4:	609a      	str	r2, [r3, #8]
 80019a6:	60da      	str	r2, [r3, #12]
 80019a8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80019aa:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80019ae:	f003 fc45 	bl	800523c <HAL_PWREx_ControlVoltageScaling>
 80019b2:	4603      	mov	r3, r0
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d001      	beq.n	80019bc <SystemClock_Config+0x34>
  {
    Error_Handler();
 80019b8:	f000 fa6c 	bl	8001e94 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80019bc:	f003 fc20 	bl	8005200 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80019c0:	4b22      	ldr	r3, [pc, #136]	@ (8001a4c <SystemClock_Config+0xc4>)
 80019c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80019c6:	4a21      	ldr	r2, [pc, #132]	@ (8001a4c <SystemClock_Config+0xc4>)
 80019c8:	f023 0318 	bic.w	r3, r3, #24
 80019cc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_LSE
 80019d0:	231c      	movs	r3, #28
 80019d2:	617b      	str	r3, [r7, #20]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80019d4:	2301      	movs	r3, #1
 80019d6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80019d8:	2301      	movs	r3, #1
 80019da:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80019dc:	2301      	movs	r3, #1
 80019de:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80019e0:	2300      	movs	r3, #0
 80019e2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80019e4:	2360      	movs	r3, #96	@ 0x60
 80019e6:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80019e8:	2302      	movs	r3, #2
 80019ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80019ec:	2301      	movs	r3, #1
 80019ee:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80019f0:	2301      	movs	r3, #1
 80019f2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 80019f4:	2310      	movs	r3, #16
 80019f6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80019f8:	2307      	movs	r3, #7
 80019fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80019fc:	2302      	movs	r3, #2
 80019fe:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001a00:	2302      	movs	r3, #2
 8001a02:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a04:	f107 0314 	add.w	r3, r7, #20
 8001a08:	4618      	mov	r0, r3
 8001a0a:	f003 fc97 	bl	800533c <HAL_RCC_OscConfig>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d001      	beq.n	8001a18 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8001a14:	f000 fa3e 	bl	8001e94 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a18:	230f      	movs	r3, #15
 8001a1a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a1c:	2303      	movs	r3, #3
 8001a1e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a20:	2300      	movs	r3, #0
 8001a22:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001a24:	2300      	movs	r3, #0
 8001a26:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001a2c:	463b      	mov	r3, r7
 8001a2e:	2101      	movs	r1, #1
 8001a30:	4618      	mov	r0, r3
 8001a32:	f004 f897 	bl	8005b64 <HAL_RCC_ClockConfig>
 8001a36:	4603      	mov	r3, r0
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d001      	beq.n	8001a40 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8001a3c:	f000 fa2a 	bl	8001e94 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8001a40:	f004 fcaa 	bl	8006398 <HAL_RCCEx_EnableMSIPLLMode>
}
 8001a44:	bf00      	nop
 8001a46:	3758      	adds	r7, #88	@ 0x58
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	bd80      	pop	{r7, pc}
 8001a4c:	40021000 	.word	0x40021000

08001a50 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b086      	sub	sp, #24
 8001a54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001a56:	463b      	mov	r3, r7
 8001a58:	2200      	movs	r2, #0
 8001a5a:	601a      	str	r2, [r3, #0]
 8001a5c:	605a      	str	r2, [r3, #4]
 8001a5e:	609a      	str	r2, [r3, #8]
 8001a60:	60da      	str	r2, [r3, #12]
 8001a62:	611a      	str	r2, [r3, #16]
 8001a64:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001a66:	4b30      	ldr	r3, [pc, #192]	@ (8001b28 <MX_ADC1_Init+0xd8>)
 8001a68:	4a30      	ldr	r2, [pc, #192]	@ (8001b2c <MX_ADC1_Init+0xdc>)
 8001a6a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001a6c:	4b2e      	ldr	r3, [pc, #184]	@ (8001b28 <MX_ADC1_Init+0xd8>)
 8001a6e:	2200      	movs	r2, #0
 8001a70:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001a72:	4b2d      	ldr	r3, [pc, #180]	@ (8001b28 <MX_ADC1_Init+0xd8>)
 8001a74:	2200      	movs	r2, #0
 8001a76:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001a78:	4b2b      	ldr	r3, [pc, #172]	@ (8001b28 <MX_ADC1_Init+0xd8>)
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001a7e:	4b2a      	ldr	r3, [pc, #168]	@ (8001b28 <MX_ADC1_Init+0xd8>)
 8001a80:	2201      	movs	r2, #1
 8001a82:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001a84:	4b28      	ldr	r3, [pc, #160]	@ (8001b28 <MX_ADC1_Init+0xd8>)
 8001a86:	2204      	movs	r2, #4
 8001a88:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001a8a:	4b27      	ldr	r3, [pc, #156]	@ (8001b28 <MX_ADC1_Init+0xd8>)
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001a90:	4b25      	ldr	r3, [pc, #148]	@ (8001b28 <MX_ADC1_Init+0xd8>)
 8001a92:	2200      	movs	r2, #0
 8001a94:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 2;
 8001a96:	4b24      	ldr	r3, [pc, #144]	@ (8001b28 <MX_ADC1_Init+0xd8>)
 8001a98:	2202      	movs	r2, #2
 8001a9a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001a9c:	4b22      	ldr	r3, [pc, #136]	@ (8001b28 <MX_ADC1_Init+0xd8>)
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001aa4:	4b20      	ldr	r3, [pc, #128]	@ (8001b28 <MX_ADC1_Init+0xd8>)
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001aaa:	4b1f      	ldr	r3, [pc, #124]	@ (8001b28 <MX_ADC1_Init+0xd8>)
 8001aac:	2200      	movs	r2, #0
 8001aae:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001ab0:	4b1d      	ldr	r3, [pc, #116]	@ (8001b28 <MX_ADC1_Init+0xd8>)
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001ab8:	4b1b      	ldr	r3, [pc, #108]	@ (8001b28 <MX_ADC1_Init+0xd8>)
 8001aba:	2200      	movs	r2, #0
 8001abc:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001abe:	4b1a      	ldr	r3, [pc, #104]	@ (8001b28 <MX_ADC1_Init+0xd8>)
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001ac6:	4818      	ldr	r0, [pc, #96]	@ (8001b28 <MX_ADC1_Init+0xd8>)
 8001ac8:	f000 feac 	bl	8002824 <HAL_ADC_Init>
 8001acc:	4603      	mov	r3, r0
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d001      	beq.n	8001ad6 <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 8001ad2:	f000 f9df 	bl	8001e94 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001ad6:	4b16      	ldr	r3, [pc, #88]	@ (8001b30 <MX_ADC1_Init+0xe0>)
 8001ad8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001ada:	2306      	movs	r3, #6
 8001adc:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001ae2:	237f      	movs	r3, #127	@ 0x7f
 8001ae4:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001ae6:	2304      	movs	r3, #4
 8001ae8:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001aea:	2300      	movs	r3, #0
 8001aec:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001aee:	463b      	mov	r3, r7
 8001af0:	4619      	mov	r1, r3
 8001af2:	480d      	ldr	r0, [pc, #52]	@ (8001b28 <MX_ADC1_Init+0xd8>)
 8001af4:	f001 f870 	bl	8002bd8 <HAL_ADC_ConfigChannel>
 8001af8:	4603      	mov	r3, r0
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d001      	beq.n	8001b02 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8001afe:	f000 f9c9 	bl	8001e94 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001b02:	4b0c      	ldr	r3, [pc, #48]	@ (8001b34 <MX_ADC1_Init+0xe4>)
 8001b04:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001b06:	230c      	movs	r3, #12
 8001b08:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001b0a:	463b      	mov	r3, r7
 8001b0c:	4619      	mov	r1, r3
 8001b0e:	4806      	ldr	r0, [pc, #24]	@ (8001b28 <MX_ADC1_Init+0xd8>)
 8001b10:	f001 f862 	bl	8002bd8 <HAL_ADC_ConfigChannel>
 8001b14:	4603      	mov	r3, r0
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d001      	beq.n	8001b1e <MX_ADC1_Init+0xce>
  {
    Error_Handler();
 8001b1a:	f000 f9bb 	bl	8001e94 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001b1e:	bf00      	nop
 8001b20:	3718      	adds	r7, #24
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bd80      	pop	{r7, pc}
 8001b26:	bf00      	nop
 8001b28:	20000028 	.word	0x20000028
 8001b2c:	50040000 	.word	0x50040000
 8001b30:	14f00020 	.word	0x14f00020
 8001b34:	19200040 	.word	0x19200040

08001b38 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001b3c:	4b1b      	ldr	r3, [pc, #108]	@ (8001bac <MX_I2C1_Init+0x74>)
 8001b3e:	4a1c      	ldr	r2, [pc, #112]	@ (8001bb0 <MX_I2C1_Init+0x78>)
 8001b40:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 8001b42:	4b1a      	ldr	r3, [pc, #104]	@ (8001bac <MX_I2C1_Init+0x74>)
 8001b44:	4a1b      	ldr	r2, [pc, #108]	@ (8001bb4 <MX_I2C1_Init+0x7c>)
 8001b46:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001b48:	4b18      	ldr	r3, [pc, #96]	@ (8001bac <MX_I2C1_Init+0x74>)
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001b4e:	4b17      	ldr	r3, [pc, #92]	@ (8001bac <MX_I2C1_Init+0x74>)
 8001b50:	2201      	movs	r2, #1
 8001b52:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001b54:	4b15      	ldr	r3, [pc, #84]	@ (8001bac <MX_I2C1_Init+0x74>)
 8001b56:	2200      	movs	r2, #0
 8001b58:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001b5a:	4b14      	ldr	r3, [pc, #80]	@ (8001bac <MX_I2C1_Init+0x74>)
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001b60:	4b12      	ldr	r3, [pc, #72]	@ (8001bac <MX_I2C1_Init+0x74>)
 8001b62:	2200      	movs	r2, #0
 8001b64:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001b66:	4b11      	ldr	r3, [pc, #68]	@ (8001bac <MX_I2C1_Init+0x74>)
 8001b68:	2200      	movs	r2, #0
 8001b6a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001b6c:	4b0f      	ldr	r3, [pc, #60]	@ (8001bac <MX_I2C1_Init+0x74>)
 8001b6e:	2200      	movs	r2, #0
 8001b70:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001b72:	480e      	ldr	r0, [pc, #56]	@ (8001bac <MX_I2C1_Init+0x74>)
 8001b74:	f002 f9ea 	bl	8003f4c <HAL_I2C_Init>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d001      	beq.n	8001b82 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001b7e:	f000 f989 	bl	8001e94 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001b82:	2100      	movs	r1, #0
 8001b84:	4809      	ldr	r0, [pc, #36]	@ (8001bac <MX_I2C1_Init+0x74>)
 8001b86:	f002 ff6d 	bl	8004a64 <HAL_I2CEx_ConfigAnalogFilter>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d001      	beq.n	8001b94 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001b90:	f000 f980 	bl	8001e94 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001b94:	2100      	movs	r1, #0
 8001b96:	4805      	ldr	r0, [pc, #20]	@ (8001bac <MX_I2C1_Init+0x74>)
 8001b98:	f002 ffaf 	bl	8004afa <HAL_I2CEx_ConfigDigitalFilter>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d001      	beq.n	8001ba6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001ba2:	f000 f977 	bl	8001e94 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001ba6:	bf00      	nop
 8001ba8:	bd80      	pop	{r7, pc}
 8001baa:	bf00      	nop
 8001bac:	200000d4 	.word	0x200000d4
 8001bb0:	40005400 	.word	0x40005400
 8001bb4:	00707cbb 	.word	0x00707cbb

08001bb8 <MX_LPTIM2_Init>:
  * @brief LPTIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPTIM2_Init(void)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	af00      	add	r7, sp, #0
  /* USER CODE END LPTIM2_Init 0 */

  /* USER CODE BEGIN LPTIM2_Init 1 */

  /* USER CODE END LPTIM2_Init 1 */
  hlptim2.Instance = LPTIM2;
 8001bbc:	4b13      	ldr	r3, [pc, #76]	@ (8001c0c <MX_LPTIM2_Init+0x54>)
 8001bbe:	4a14      	ldr	r2, [pc, #80]	@ (8001c10 <MX_LPTIM2_Init+0x58>)
 8001bc0:	601a      	str	r2, [r3, #0]
  hlptim2.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 8001bc2:	4b12      	ldr	r3, [pc, #72]	@ (8001c0c <MX_LPTIM2_Init+0x54>)
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	605a      	str	r2, [r3, #4]
  hlptim2.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV8;
 8001bc8:	4b10      	ldr	r3, [pc, #64]	@ (8001c0c <MX_LPTIM2_Init+0x54>)
 8001bca:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 8001bce:	609a      	str	r2, [r3, #8]
  hlptim2.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 8001bd0:	4b0e      	ldr	r3, [pc, #56]	@ (8001c0c <MX_LPTIM2_Init+0x54>)
 8001bd2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001bd6:	615a      	str	r2, [r3, #20]
  hlptim2.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 8001bd8:	4b0c      	ldr	r3, [pc, #48]	@ (8001c0c <MX_LPTIM2_Init+0x54>)
 8001bda:	2200      	movs	r2, #0
 8001bdc:	621a      	str	r2, [r3, #32]
  hlptim2.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 8001bde:	4b0b      	ldr	r3, [pc, #44]	@ (8001c0c <MX_LPTIM2_Init+0x54>)
 8001be0:	2200      	movs	r2, #0
 8001be2:	625a      	str	r2, [r3, #36]	@ 0x24
  hlptim2.Init.CounterSource = LPTIM_COUNTERSOURCE_INTERNAL;
 8001be4:	4b09      	ldr	r3, [pc, #36]	@ (8001c0c <MX_LPTIM2_Init+0x54>)
 8001be6:	2200      	movs	r2, #0
 8001be8:	629a      	str	r2, [r3, #40]	@ 0x28
  hlptim2.Init.Input1Source = LPTIM_INPUT1SOURCE_GPIO;
 8001bea:	4b08      	ldr	r3, [pc, #32]	@ (8001c0c <MX_LPTIM2_Init+0x54>)
 8001bec:	2200      	movs	r2, #0
 8001bee:	62da      	str	r2, [r3, #44]	@ 0x2c
  hlptim2.Init.Input2Source = LPTIM_INPUT2SOURCE_GPIO;
 8001bf0:	4b06      	ldr	r3, [pc, #24]	@ (8001c0c <MX_LPTIM2_Init+0x54>)
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_LPTIM_Init(&hlptim2) != HAL_OK)
 8001bf6:	4805      	ldr	r0, [pc, #20]	@ (8001c0c <MX_LPTIM2_Init+0x54>)
 8001bf8:	f002 ffcc 	bl	8004b94 <HAL_LPTIM_Init>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d001      	beq.n	8001c06 <MX_LPTIM2_Init+0x4e>
  {
    Error_Handler();
 8001c02:	f000 f947 	bl	8001e94 <Error_Handler>
  }
  /* USER CODE BEGIN LPTIM2_Init 2 */

  /* USER CODE END LPTIM2_Init 2 */

}
 8001c06:	bf00      	nop
 8001c08:	bd80      	pop	{r7, pc}
 8001c0a:	bf00      	nop
 8001c0c:	20000128 	.word	0x20000128
 8001c10:	40009400 	.word	0x40009400

08001c14 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b088      	sub	sp, #32
 8001c18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c1a:	f107 0310 	add.w	r3, r7, #16
 8001c1e:	2200      	movs	r2, #0
 8001c20:	601a      	str	r2, [r3, #0]
 8001c22:	605a      	str	r2, [r3, #4]
 8001c24:	609a      	str	r2, [r3, #8]
 8001c26:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c28:	1d3b      	adds	r3, r7, #4
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	601a      	str	r2, [r3, #0]
 8001c2e:	605a      	str	r2, [r3, #4]
 8001c30:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001c32:	4b1e      	ldr	r3, [pc, #120]	@ (8001cac <MX_TIM2_Init+0x98>)
 8001c34:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001c38:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 32;
 8001c3a:	4b1c      	ldr	r3, [pc, #112]	@ (8001cac <MX_TIM2_Init+0x98>)
 8001c3c:	2220      	movs	r2, #32
 8001c3e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c40:	4b1a      	ldr	r3, [pc, #104]	@ (8001cac <MX_TIM2_Init+0x98>)
 8001c42:	2200      	movs	r2, #0
 8001c44:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001c46:	4b19      	ldr	r3, [pc, #100]	@ (8001cac <MX_TIM2_Init+0x98>)
 8001c48:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001c4c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c4e:	4b17      	ldr	r3, [pc, #92]	@ (8001cac <MX_TIM2_Init+0x98>)
 8001c50:	2200      	movs	r2, #0
 8001c52:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c54:	4b15      	ldr	r3, [pc, #84]	@ (8001cac <MX_TIM2_Init+0x98>)
 8001c56:	2200      	movs	r2, #0
 8001c58:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001c5a:	4814      	ldr	r0, [pc, #80]	@ (8001cac <MX_TIM2_Init+0x98>)
 8001c5c:	f004 fc9e 	bl	800659c <HAL_TIM_Base_Init>
 8001c60:	4603      	mov	r3, r0
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d001      	beq.n	8001c6a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001c66:	f000 f915 	bl	8001e94 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c6a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001c6e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001c70:	f107 0310 	add.w	r3, r7, #16
 8001c74:	4619      	mov	r1, r3
 8001c76:	480d      	ldr	r0, [pc, #52]	@ (8001cac <MX_TIM2_Init+0x98>)
 8001c78:	f004 fd34 	bl	80066e4 <HAL_TIM_ConfigClockSource>
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d001      	beq.n	8001c86 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001c82:	f000 f907 	bl	8001e94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c86:	2300      	movs	r3, #0
 8001c88:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001c8e:	1d3b      	adds	r3, r7, #4
 8001c90:	4619      	mov	r1, r3
 8001c92:	4806      	ldr	r0, [pc, #24]	@ (8001cac <MX_TIM2_Init+0x98>)
 8001c94:	f004 fefa 	bl	8006a8c <HAL_TIMEx_MasterConfigSynchronization>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d001      	beq.n	8001ca2 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001c9e:	f000 f8f9 	bl	8001e94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001ca2:	bf00      	nop
 8001ca4:	3720      	adds	r7, #32
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}
 8001caa:	bf00      	nop
 8001cac:	20000160 	.word	0x20000160

08001cb0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001cb4:	4b14      	ldr	r3, [pc, #80]	@ (8001d08 <MX_USART1_UART_Init+0x58>)
 8001cb6:	4a15      	ldr	r2, [pc, #84]	@ (8001d0c <MX_USART1_UART_Init+0x5c>)
 8001cb8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001cba:	4b13      	ldr	r3, [pc, #76]	@ (8001d08 <MX_USART1_UART_Init+0x58>)
 8001cbc:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001cc0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001cc2:	4b11      	ldr	r3, [pc, #68]	@ (8001d08 <MX_USART1_UART_Init+0x58>)
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001cc8:	4b0f      	ldr	r3, [pc, #60]	@ (8001d08 <MX_USART1_UART_Init+0x58>)
 8001cca:	2200      	movs	r2, #0
 8001ccc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001cce:	4b0e      	ldr	r3, [pc, #56]	@ (8001d08 <MX_USART1_UART_Init+0x58>)
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX;
 8001cd4:	4b0c      	ldr	r3, [pc, #48]	@ (8001d08 <MX_USART1_UART_Init+0x58>)
 8001cd6:	2208      	movs	r2, #8
 8001cd8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001cda:	4b0b      	ldr	r3, [pc, #44]	@ (8001d08 <MX_USART1_UART_Init+0x58>)
 8001cdc:	2200      	movs	r2, #0
 8001cde:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ce0:	4b09      	ldr	r3, [pc, #36]	@ (8001d08 <MX_USART1_UART_Init+0x58>)
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001ce6:	4b08      	ldr	r3, [pc, #32]	@ (8001d08 <MX_USART1_UART_Init+0x58>)
 8001ce8:	2200      	movs	r2, #0
 8001cea:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001cec:	4b06      	ldr	r3, [pc, #24]	@ (8001d08 <MX_USART1_UART_Init+0x58>)
 8001cee:	2200      	movs	r2, #0
 8001cf0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001cf2:	4805      	ldr	r0, [pc, #20]	@ (8001d08 <MX_USART1_UART_Init+0x58>)
 8001cf4:	f004 ff30 	bl	8006b58 <HAL_UART_Init>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d001      	beq.n	8001d02 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001cfe:	f000 f8c9 	bl	8001e94 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001d02:	bf00      	nop
 8001d04:	bd80      	pop	{r7, pc}
 8001d06:	bf00      	nop
 8001d08:	200001ac 	.word	0x200001ac
 8001d0c:	40013800 	.word	0x40013800

08001d10 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b082      	sub	sp, #8
 8001d14:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001d16:	4b0c      	ldr	r3, [pc, #48]	@ (8001d48 <MX_DMA_Init+0x38>)
 8001d18:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001d1a:	4a0b      	ldr	r2, [pc, #44]	@ (8001d48 <MX_DMA_Init+0x38>)
 8001d1c:	f043 0301 	orr.w	r3, r3, #1
 8001d20:	6493      	str	r3, [r2, #72]	@ 0x48
 8001d22:	4b09      	ldr	r3, [pc, #36]	@ (8001d48 <MX_DMA_Init+0x38>)
 8001d24:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001d26:	f003 0301 	and.w	r3, r3, #1
 8001d2a:	607b      	str	r3, [r7, #4]
 8001d2c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001d2e:	2200      	movs	r2, #0
 8001d30:	2100      	movs	r1, #0
 8001d32:	200b      	movs	r0, #11
 8001d34:	f001 fd27 	bl	8003786 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001d38:	200b      	movs	r0, #11
 8001d3a:	f001 fd40 	bl	80037be <HAL_NVIC_EnableIRQ>

}
 8001d3e:	bf00      	nop
 8001d40:	3708      	adds	r7, #8
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}
 8001d46:	bf00      	nop
 8001d48:	40021000 	.word	0x40021000

08001d4c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b08a      	sub	sp, #40	@ 0x28
 8001d50:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d52:	f107 0314 	add.w	r3, r7, #20
 8001d56:	2200      	movs	r2, #0
 8001d58:	601a      	str	r2, [r3, #0]
 8001d5a:	605a      	str	r2, [r3, #4]
 8001d5c:	609a      	str	r2, [r3, #8]
 8001d5e:	60da      	str	r2, [r3, #12]
 8001d60:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d62:	4b41      	ldr	r3, [pc, #260]	@ (8001e68 <MX_GPIO_Init+0x11c>)
 8001d64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d66:	4a40      	ldr	r2, [pc, #256]	@ (8001e68 <MX_GPIO_Init+0x11c>)
 8001d68:	f043 0304 	orr.w	r3, r3, #4
 8001d6c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001d6e:	4b3e      	ldr	r3, [pc, #248]	@ (8001e68 <MX_GPIO_Init+0x11c>)
 8001d70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d72:	f003 0304 	and.w	r3, r3, #4
 8001d76:	613b      	str	r3, [r7, #16]
 8001d78:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d7a:	4b3b      	ldr	r3, [pc, #236]	@ (8001e68 <MX_GPIO_Init+0x11c>)
 8001d7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d7e:	4a3a      	ldr	r2, [pc, #232]	@ (8001e68 <MX_GPIO_Init+0x11c>)
 8001d80:	f043 0301 	orr.w	r3, r3, #1
 8001d84:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001d86:	4b38      	ldr	r3, [pc, #224]	@ (8001e68 <MX_GPIO_Init+0x11c>)
 8001d88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d8a:	f003 0301 	and.w	r3, r3, #1
 8001d8e:	60fb      	str	r3, [r7, #12]
 8001d90:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d92:	4b35      	ldr	r3, [pc, #212]	@ (8001e68 <MX_GPIO_Init+0x11c>)
 8001d94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d96:	4a34      	ldr	r2, [pc, #208]	@ (8001e68 <MX_GPIO_Init+0x11c>)
 8001d98:	f043 0302 	orr.w	r3, r3, #2
 8001d9c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001d9e:	4b32      	ldr	r3, [pc, #200]	@ (8001e68 <MX_GPIO_Init+0x11c>)
 8001da0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001da2:	f003 0302 	and.w	r3, r3, #2
 8001da6:	60bb      	str	r3, [r7, #8]
 8001da8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001daa:	4b2f      	ldr	r3, [pc, #188]	@ (8001e68 <MX_GPIO_Init+0x11c>)
 8001dac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001dae:	4a2e      	ldr	r2, [pc, #184]	@ (8001e68 <MX_GPIO_Init+0x11c>)
 8001db0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001db4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001db6:	4b2c      	ldr	r3, [pc, #176]	@ (8001e68 <MX_GPIO_Init+0x11c>)
 8001db8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001dba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001dbe:	607b      	str	r3, [r7, #4]
 8001dc0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	2104      	movs	r1, #4
 8001dc6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001dca:	f002 f88d 	bl	8003ee8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 8001dce:	2200      	movs	r2, #0
 8001dd0:	2108      	movs	r1, #8
 8001dd2:	4826      	ldr	r0, [pc, #152]	@ (8001e6c <MX_GPIO_Init+0x120>)
 8001dd4:	f002 f888 	bl	8003ee8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001dd8:	2304      	movs	r3, #4
 8001dda:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ddc:	2301      	movs	r3, #1
 8001dde:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001de0:	2300      	movs	r3, #0
 8001de2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001de4:	2300      	movs	r3, #0
 8001de6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001de8:	f107 0314 	add.w	r3, r7, #20
 8001dec:	4619      	mov	r1, r3
 8001dee:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001df2:	f001 fef7 	bl	8003be4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA3 PA4 PA5 PA6
                           PA7 PA8 PA11 PA12
                           PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 8001df6:	f649 13f8 	movw	r3, #39416	@ 0x99f8
 8001dfa:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001dfc:	2303      	movs	r3, #3
 8001dfe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e00:	2300      	movs	r3, #0
 8001e02:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e04:	f107 0314 	add.w	r3, r7, #20
 8001e08:	4619      	mov	r1, r3
 8001e0a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001e0e:	f001 fee9 	bl	8003be4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8001e12:	2333      	movs	r3, #51	@ 0x33
 8001e14:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e16:	2303      	movs	r3, #3
 8001e18:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e1e:	f107 0314 	add.w	r3, r7, #20
 8001e22:	4619      	mov	r1, r3
 8001e24:	4811      	ldr	r0, [pc, #68]	@ (8001e6c <MX_GPIO_Init+0x120>)
 8001e26:	f001 fedd 	bl	8003be4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001e2a:	2308      	movs	r3, #8
 8001e2c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e2e:	2301      	movs	r3, #1
 8001e30:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e32:	2300      	movs	r3, #0
 8001e34:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e36:	2300      	movs	r3, #0
 8001e38:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e3a:	f107 0314 	add.w	r3, r7, #20
 8001e3e:	4619      	mov	r1, r3
 8001e40:	480a      	ldr	r0, [pc, #40]	@ (8001e6c <MX_GPIO_Init+0x120>)
 8001e42:	f001 fecf 	bl	8003be4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PH3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001e46:	2308      	movs	r3, #8
 8001e48:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e4a:	2303      	movs	r3, #3
 8001e4c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001e52:	f107 0314 	add.w	r3, r7, #20
 8001e56:	4619      	mov	r1, r3
 8001e58:	4805      	ldr	r0, [pc, #20]	@ (8001e70 <MX_GPIO_Init+0x124>)
 8001e5a:	f001 fec3 	bl	8003be4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001e5e:	bf00      	nop
 8001e60:	3728      	adds	r7, #40	@ 0x28
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd80      	pop	{r7, pc}
 8001e66:	bf00      	nop
 8001e68:	40021000 	.word	0x40021000
 8001e6c:	48000400 	.word	0x48000400
 8001e70:	48001c00 	.word	0x48001c00

08001e74 <HAL_LPTIM_CompareMatchCallback>:

/* USER CODE BEGIN 4 */
void HAL_LPTIM_CompareMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b082      	sub	sp, #8
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
  /* Timeout was reached, turn on LED3 */
  HAL_ResumeTick();
 8001e7c:	f000 fafa 	bl	8002474 <HAL_ResumeTick>
  HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_3);
 8001e80:	2108      	movs	r1, #8
 8001e82:	4803      	ldr	r0, [pc, #12]	@ (8001e90 <HAL_LPTIM_CompareMatchCallback+0x1c>)
 8001e84:	f002 f848 	bl	8003f18 <HAL_GPIO_TogglePin>
}
 8001e88:	bf00      	nop
 8001e8a:	3708      	adds	r7, #8
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	bd80      	pop	{r7, pc}
 8001e90:	48000400 	.word	0x48000400

08001e94 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e94:	b480      	push	{r7}
 8001e96:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001e98:	b672      	cpsid	i
}
 8001e9a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001e9c:	bf00      	nop
 8001e9e:	e7fd      	b.n	8001e9c <Error_Handler+0x8>

08001ea0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	b083      	sub	sp, #12
 8001ea4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ea6:	4b0f      	ldr	r3, [pc, #60]	@ (8001ee4 <HAL_MspInit+0x44>)
 8001ea8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001eaa:	4a0e      	ldr	r2, [pc, #56]	@ (8001ee4 <HAL_MspInit+0x44>)
 8001eac:	f043 0301 	orr.w	r3, r3, #1
 8001eb0:	6613      	str	r3, [r2, #96]	@ 0x60
 8001eb2:	4b0c      	ldr	r3, [pc, #48]	@ (8001ee4 <HAL_MspInit+0x44>)
 8001eb4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001eb6:	f003 0301 	and.w	r3, r3, #1
 8001eba:	607b      	str	r3, [r7, #4]
 8001ebc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ebe:	4b09      	ldr	r3, [pc, #36]	@ (8001ee4 <HAL_MspInit+0x44>)
 8001ec0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ec2:	4a08      	ldr	r2, [pc, #32]	@ (8001ee4 <HAL_MspInit+0x44>)
 8001ec4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ec8:	6593      	str	r3, [r2, #88]	@ 0x58
 8001eca:	4b06      	ldr	r3, [pc, #24]	@ (8001ee4 <HAL_MspInit+0x44>)
 8001ecc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ece:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ed2:	603b      	str	r3, [r7, #0]
 8001ed4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ed6:	bf00      	nop
 8001ed8:	370c      	adds	r7, #12
 8001eda:	46bd      	mov	sp, r7
 8001edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee0:	4770      	bx	lr
 8001ee2:	bf00      	nop
 8001ee4:	40021000 	.word	0x40021000

08001ee8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b09e      	sub	sp, #120	@ 0x78
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ef0:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	601a      	str	r2, [r3, #0]
 8001ef8:	605a      	str	r2, [r3, #4]
 8001efa:	609a      	str	r2, [r3, #8]
 8001efc:	60da      	str	r2, [r3, #12]
 8001efe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001f00:	f107 0310 	add.w	r3, r7, #16
 8001f04:	2254      	movs	r2, #84	@ 0x54
 8001f06:	2100      	movs	r1, #0
 8001f08:	4618      	mov	r0, r3
 8001f0a:	f005 fb44 	bl	8007596 <memset>
  if(hadc->Instance==ADC1)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	4a3b      	ldr	r2, [pc, #236]	@ (8002000 <HAL_ADC_MspInit+0x118>)
 8001f14:	4293      	cmp	r3, r2
 8001f16:	d16e      	bne.n	8001ff6 <HAL_ADC_MspInit+0x10e>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001f18:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001f1c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001f1e:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8001f22:	65bb      	str	r3, [r7, #88]	@ 0x58
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8001f24:	2301      	movs	r3, #1
 8001f26:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001f28:	2301      	movs	r3, #1
 8001f2a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 8001f2c:	2310      	movs	r3, #16
 8001f2e:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001f30:	2307      	movs	r3, #7
 8001f32:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001f34:	2302      	movs	r3, #2
 8001f36:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001f38:	2302      	movs	r3, #2
 8001f3a:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8001f3c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001f40:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001f42:	f107 0310 	add.w	r3, r7, #16
 8001f46:	4618      	mov	r0, r3
 8001f48:	f004 f830 	bl	8005fac <HAL_RCCEx_PeriphCLKConfig>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d001      	beq.n	8001f56 <HAL_ADC_MspInit+0x6e>
    {
      Error_Handler();
 8001f52:	f7ff ff9f 	bl	8001e94 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001f56:	4b2b      	ldr	r3, [pc, #172]	@ (8002004 <HAL_ADC_MspInit+0x11c>)
 8001f58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f5a:	4a2a      	ldr	r2, [pc, #168]	@ (8002004 <HAL_ADC_MspInit+0x11c>)
 8001f5c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001f60:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001f62:	4b28      	ldr	r3, [pc, #160]	@ (8002004 <HAL_ADC_MspInit+0x11c>)
 8001f64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f66:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001f6a:	60fb      	str	r3, [r7, #12]
 8001f6c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f6e:	4b25      	ldr	r3, [pc, #148]	@ (8002004 <HAL_ADC_MspInit+0x11c>)
 8001f70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f72:	4a24      	ldr	r2, [pc, #144]	@ (8002004 <HAL_ADC_MspInit+0x11c>)
 8001f74:	f043 0301 	orr.w	r3, r3, #1
 8001f78:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001f7a:	4b22      	ldr	r3, [pc, #136]	@ (8002004 <HAL_ADC_MspInit+0x11c>)
 8001f7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f7e:	f003 0301 	and.w	r3, r3, #1
 8001f82:	60bb      	str	r3, [r7, #8]
 8001f84:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    PA1     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001f86:	2303      	movs	r3, #3
 8001f88:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001f8a:	230b      	movs	r3, #11
 8001f8c:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f8e:	2300      	movs	r3, #0
 8001f90:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f92:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001f96:	4619      	mov	r1, r3
 8001f98:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001f9c:	f001 fe22 	bl	8003be4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001fa0:	4b19      	ldr	r3, [pc, #100]	@ (8002008 <HAL_ADC_MspInit+0x120>)
 8001fa2:	4a1a      	ldr	r2, [pc, #104]	@ (800200c <HAL_ADC_MspInit+0x124>)
 8001fa4:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8001fa6:	4b18      	ldr	r3, [pc, #96]	@ (8002008 <HAL_ADC_MspInit+0x120>)
 8001fa8:	2200      	movs	r2, #0
 8001faa:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001fac:	4b16      	ldr	r3, [pc, #88]	@ (8002008 <HAL_ADC_MspInit+0x120>)
 8001fae:	2200      	movs	r2, #0
 8001fb0:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001fb2:	4b15      	ldr	r3, [pc, #84]	@ (8002008 <HAL_ADC_MspInit+0x120>)
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001fb8:	4b13      	ldr	r3, [pc, #76]	@ (8002008 <HAL_ADC_MspInit+0x120>)
 8001fba:	2280      	movs	r2, #128	@ 0x80
 8001fbc:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001fbe:	4b12      	ldr	r3, [pc, #72]	@ (8002008 <HAL_ADC_MspInit+0x120>)
 8001fc0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001fc4:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001fc6:	4b10      	ldr	r3, [pc, #64]	@ (8002008 <HAL_ADC_MspInit+0x120>)
 8001fc8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001fcc:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001fce:	4b0e      	ldr	r3, [pc, #56]	@ (8002008 <HAL_ADC_MspInit+0x120>)
 8001fd0:	2220      	movs	r2, #32
 8001fd2:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001fd4:	4b0c      	ldr	r3, [pc, #48]	@ (8002008 <HAL_ADC_MspInit+0x120>)
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001fda:	480b      	ldr	r0, [pc, #44]	@ (8002008 <HAL_ADC_MspInit+0x120>)
 8001fdc:	f001 fc0a 	bl	80037f4 <HAL_DMA_Init>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d001      	beq.n	8001fea <HAL_ADC_MspInit+0x102>
    {
      Error_Handler();
 8001fe6:	f7ff ff55 	bl	8001e94 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	4a06      	ldr	r2, [pc, #24]	@ (8002008 <HAL_ADC_MspInit+0x120>)
 8001fee:	64da      	str	r2, [r3, #76]	@ 0x4c
 8001ff0:	4a05      	ldr	r2, [pc, #20]	@ (8002008 <HAL_ADC_MspInit+0x120>)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6293      	str	r3, [r2, #40]	@ 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001ff6:	bf00      	nop
 8001ff8:	3778      	adds	r7, #120	@ 0x78
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bd80      	pop	{r7, pc}
 8001ffe:	bf00      	nop
 8002000:	50040000 	.word	0x50040000
 8002004:	40021000 	.word	0x40021000
 8002008:	2000008c 	.word	0x2000008c
 800200c:	40020008 	.word	0x40020008

08002010 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b09e      	sub	sp, #120	@ 0x78
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002018:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800201c:	2200      	movs	r2, #0
 800201e:	601a      	str	r2, [r3, #0]
 8002020:	605a      	str	r2, [r3, #4]
 8002022:	609a      	str	r2, [r3, #8]
 8002024:	60da      	str	r2, [r3, #12]
 8002026:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002028:	f107 0310 	add.w	r3, r7, #16
 800202c:	2254      	movs	r2, #84	@ 0x54
 800202e:	2100      	movs	r1, #0
 8002030:	4618      	mov	r0, r3
 8002032:	f005 fab0 	bl	8007596 <memset>
  if(hi2c->Instance==I2C1)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	4a1f      	ldr	r2, [pc, #124]	@ (80020b8 <HAL_I2C_MspInit+0xa8>)
 800203c:	4293      	cmp	r3, r2
 800203e:	d137      	bne.n	80020b0 <HAL_I2C_MspInit+0xa0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002040:	2340      	movs	r3, #64	@ 0x40
 8002042:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002044:	2300      	movs	r3, #0
 8002046:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002048:	f107 0310 	add.w	r3, r7, #16
 800204c:	4618      	mov	r0, r3
 800204e:	f003 ffad 	bl	8005fac <HAL_RCCEx_PeriphCLKConfig>
 8002052:	4603      	mov	r3, r0
 8002054:	2b00      	cmp	r3, #0
 8002056:	d001      	beq.n	800205c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8002058:	f7ff ff1c 	bl	8001e94 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800205c:	4b17      	ldr	r3, [pc, #92]	@ (80020bc <HAL_I2C_MspInit+0xac>)
 800205e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002060:	4a16      	ldr	r2, [pc, #88]	@ (80020bc <HAL_I2C_MspInit+0xac>)
 8002062:	f043 0301 	orr.w	r3, r3, #1
 8002066:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002068:	4b14      	ldr	r3, [pc, #80]	@ (80020bc <HAL_I2C_MspInit+0xac>)
 800206a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800206c:	f003 0301 	and.w	r3, r3, #1
 8002070:	60fb      	str	r3, [r7, #12]
 8002072:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002074:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8002078:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800207a:	2312      	movs	r3, #18
 800207c:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800207e:	2300      	movs	r3, #0
 8002080:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002082:	2303      	movs	r3, #3
 8002084:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002086:	2304      	movs	r3, #4
 8002088:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800208a:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800208e:	4619      	mov	r1, r3
 8002090:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002094:	f001 fda6 	bl	8003be4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002098:	4b08      	ldr	r3, [pc, #32]	@ (80020bc <HAL_I2C_MspInit+0xac>)
 800209a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800209c:	4a07      	ldr	r2, [pc, #28]	@ (80020bc <HAL_I2C_MspInit+0xac>)
 800209e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80020a2:	6593      	str	r3, [r2, #88]	@ 0x58
 80020a4:	4b05      	ldr	r3, [pc, #20]	@ (80020bc <HAL_I2C_MspInit+0xac>)
 80020a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020a8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80020ac:	60bb      	str	r3, [r7, #8]
 80020ae:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80020b0:	bf00      	nop
 80020b2:	3778      	adds	r7, #120	@ 0x78
 80020b4:	46bd      	mov	sp, r7
 80020b6:	bd80      	pop	{r7, pc}
 80020b8:	40005400 	.word	0x40005400
 80020bc:	40021000 	.word	0x40021000

080020c0 <HAL_LPTIM_MspInit>:
* This function configures the hardware resources used in this example
* @param hlptim: LPTIM handle pointer
* @retval None
*/
void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* hlptim)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b098      	sub	sp, #96	@ 0x60
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80020c8:	f107 030c 	add.w	r3, r7, #12
 80020cc:	2254      	movs	r2, #84	@ 0x54
 80020ce:	2100      	movs	r1, #0
 80020d0:	4618      	mov	r0, r3
 80020d2:	f005 fa60 	bl	8007596 <memset>
  if(hlptim->Instance==LPTIM2)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	4a15      	ldr	r2, [pc, #84]	@ (8002130 <HAL_LPTIM_MspInit+0x70>)
 80020dc:	4293      	cmp	r3, r2
 80020de:	d123      	bne.n	8002128 <HAL_LPTIM_MspInit+0x68>

  /* USER CODE END LPTIM2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPTIM2;
 80020e0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80020e4:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.Lptim2ClockSelection = RCC_LPTIM2CLKSOURCE_LSI;
 80020e6:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80020ea:	647b      	str	r3, [r7, #68]	@ 0x44
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80020ec:	f107 030c 	add.w	r3, r7, #12
 80020f0:	4618      	mov	r0, r3
 80020f2:	f003 ff5b 	bl	8005fac <HAL_RCCEx_PeriphCLKConfig>
 80020f6:	4603      	mov	r3, r0
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d001      	beq.n	8002100 <HAL_LPTIM_MspInit+0x40>
    {
      Error_Handler();
 80020fc:	f7ff feca 	bl	8001e94 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPTIM2_CLK_ENABLE();
 8002100:	4b0c      	ldr	r3, [pc, #48]	@ (8002134 <HAL_LPTIM_MspInit+0x74>)
 8002102:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002104:	4a0b      	ldr	r2, [pc, #44]	@ (8002134 <HAL_LPTIM_MspInit+0x74>)
 8002106:	f043 0320 	orr.w	r3, r3, #32
 800210a:	65d3      	str	r3, [r2, #92]	@ 0x5c
 800210c:	4b09      	ldr	r3, [pc, #36]	@ (8002134 <HAL_LPTIM_MspInit+0x74>)
 800210e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002110:	f003 0320 	and.w	r3, r3, #32
 8002114:	60bb      	str	r3, [r7, #8]
 8002116:	68bb      	ldr	r3, [r7, #8]
    /* LPTIM2 interrupt Init */
    HAL_NVIC_SetPriority(LPTIM2_IRQn, 0, 0);
 8002118:	2200      	movs	r2, #0
 800211a:	2100      	movs	r1, #0
 800211c:	2042      	movs	r0, #66	@ 0x42
 800211e:	f001 fb32 	bl	8003786 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPTIM2_IRQn);
 8002122:	2042      	movs	r0, #66	@ 0x42
 8002124:	f001 fb4b 	bl	80037be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPTIM2_MspInit 1 */

  /* USER CODE END LPTIM2_MspInit 1 */
  }

}
 8002128:	bf00      	nop
 800212a:	3760      	adds	r7, #96	@ 0x60
 800212c:	46bd      	mov	sp, r7
 800212e:	bd80      	pop	{r7, pc}
 8002130:	40009400 	.word	0x40009400
 8002134:	40021000 	.word	0x40021000

08002138 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002138:	b480      	push	{r7}
 800213a:	b085      	sub	sp, #20
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002148:	d10b      	bne.n	8002162 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800214a:	4b09      	ldr	r3, [pc, #36]	@ (8002170 <HAL_TIM_Base_MspInit+0x38>)
 800214c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800214e:	4a08      	ldr	r2, [pc, #32]	@ (8002170 <HAL_TIM_Base_MspInit+0x38>)
 8002150:	f043 0301 	orr.w	r3, r3, #1
 8002154:	6593      	str	r3, [r2, #88]	@ 0x58
 8002156:	4b06      	ldr	r3, [pc, #24]	@ (8002170 <HAL_TIM_Base_MspInit+0x38>)
 8002158:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800215a:	f003 0301 	and.w	r3, r3, #1
 800215e:	60fb      	str	r3, [r7, #12]
 8002160:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002162:	bf00      	nop
 8002164:	3714      	adds	r7, #20
 8002166:	46bd      	mov	sp, r7
 8002168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216c:	4770      	bx	lr
 800216e:	bf00      	nop
 8002170:	40021000 	.word	0x40021000

08002174 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b09e      	sub	sp, #120	@ 0x78
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800217c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002180:	2200      	movs	r2, #0
 8002182:	601a      	str	r2, [r3, #0]
 8002184:	605a      	str	r2, [r3, #4]
 8002186:	609a      	str	r2, [r3, #8]
 8002188:	60da      	str	r2, [r3, #12]
 800218a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800218c:	f107 0310 	add.w	r3, r7, #16
 8002190:	2254      	movs	r2, #84	@ 0x54
 8002192:	2100      	movs	r1, #0
 8002194:	4618      	mov	r0, r3
 8002196:	f005 f9fe 	bl	8007596 <memset>
  if(huart->Instance==USART1)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	4a1e      	ldr	r2, [pc, #120]	@ (8002218 <HAL_UART_MspInit+0xa4>)
 80021a0:	4293      	cmp	r3, r2
 80021a2:	d135      	bne.n	8002210 <HAL_UART_MspInit+0x9c>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80021a4:	2301      	movs	r3, #1
 80021a6:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80021a8:	2300      	movs	r3, #0
 80021aa:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80021ac:	f107 0310 	add.w	r3, r7, #16
 80021b0:	4618      	mov	r0, r3
 80021b2:	f003 fefb 	bl	8005fac <HAL_RCCEx_PeriphCLKConfig>
 80021b6:	4603      	mov	r3, r0
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d001      	beq.n	80021c0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80021bc:	f7ff fe6a 	bl	8001e94 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80021c0:	4b16      	ldr	r3, [pc, #88]	@ (800221c <HAL_UART_MspInit+0xa8>)
 80021c2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80021c4:	4a15      	ldr	r2, [pc, #84]	@ (800221c <HAL_UART_MspInit+0xa8>)
 80021c6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80021ca:	6613      	str	r3, [r2, #96]	@ 0x60
 80021cc:	4b13      	ldr	r3, [pc, #76]	@ (800221c <HAL_UART_MspInit+0xa8>)
 80021ce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80021d0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80021d4:	60fb      	str	r3, [r7, #12]
 80021d6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021d8:	4b10      	ldr	r3, [pc, #64]	@ (800221c <HAL_UART_MspInit+0xa8>)
 80021da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021dc:	4a0f      	ldr	r2, [pc, #60]	@ (800221c <HAL_UART_MspInit+0xa8>)
 80021de:	f043 0302 	orr.w	r3, r3, #2
 80021e2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80021e4:	4b0d      	ldr	r3, [pc, #52]	@ (800221c <HAL_UART_MspInit+0xa8>)
 80021e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021e8:	f003 0302 	and.w	r3, r3, #2
 80021ec:	60bb      	str	r3, [r7, #8]
 80021ee:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80021f0:	23c0      	movs	r3, #192	@ 0xc0
 80021f2:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021f4:	2302      	movs	r3, #2
 80021f6:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021f8:	2300      	movs	r3, #0
 80021fa:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021fc:	2303      	movs	r3, #3
 80021fe:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002200:	2307      	movs	r3, #7
 8002202:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002204:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002208:	4619      	mov	r1, r3
 800220a:	4805      	ldr	r0, [pc, #20]	@ (8002220 <HAL_UART_MspInit+0xac>)
 800220c:	f001 fcea 	bl	8003be4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002210:	bf00      	nop
 8002212:	3778      	adds	r7, #120	@ 0x78
 8002214:	46bd      	mov	sp, r7
 8002216:	bd80      	pop	{r7, pc}
 8002218:	40013800 	.word	0x40013800
 800221c:	40021000 	.word	0x40021000
 8002220:	48000400 	.word	0x48000400

08002224 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002224:	b480      	push	{r7}
 8002226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002228:	bf00      	nop
 800222a:	e7fd      	b.n	8002228 <NMI_Handler+0x4>

0800222c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800222c:	b480      	push	{r7}
 800222e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002230:	bf00      	nop
 8002232:	e7fd      	b.n	8002230 <HardFault_Handler+0x4>

08002234 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002234:	b480      	push	{r7}
 8002236:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002238:	bf00      	nop
 800223a:	e7fd      	b.n	8002238 <MemManage_Handler+0x4>

0800223c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800223c:	b480      	push	{r7}
 800223e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002240:	bf00      	nop
 8002242:	e7fd      	b.n	8002240 <BusFault_Handler+0x4>

08002244 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002244:	b480      	push	{r7}
 8002246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002248:	bf00      	nop
 800224a:	e7fd      	b.n	8002248 <UsageFault_Handler+0x4>

0800224c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800224c:	b480      	push	{r7}
 800224e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002250:	bf00      	nop
 8002252:	46bd      	mov	sp, r7
 8002254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002258:	4770      	bx	lr

0800225a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800225a:	b480      	push	{r7}
 800225c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800225e:	bf00      	nop
 8002260:	46bd      	mov	sp, r7
 8002262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002266:	4770      	bx	lr

08002268 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002268:	b480      	push	{r7}
 800226a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800226c:	bf00      	nop
 800226e:	46bd      	mov	sp, r7
 8002270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002274:	4770      	bx	lr

08002276 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002276:	b580      	push	{r7, lr}
 8002278:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800227a:	f000 f8a7 	bl	80023cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800227e:	bf00      	nop
 8002280:	bd80      	pop	{r7, pc}
	...

08002284 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002288:	4802      	ldr	r0, [pc, #8]	@ (8002294 <DMA1_Channel1_IRQHandler+0x10>)
 800228a:	f001 fbcb 	bl	8003a24 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800228e:	bf00      	nop
 8002290:	bd80      	pop	{r7, pc}
 8002292:	bf00      	nop
 8002294:	2000008c 	.word	0x2000008c

08002298 <LPTIM2_IRQHandler>:

/**
  * @brief This function handles LPTIM2 global interrupt.
  */
void LPTIM2_IRQHandler(void)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPTIM2_IRQn 0 */

  /* USER CODE END LPTIM2_IRQn 0 */
  HAL_LPTIM_IRQHandler(&hlptim2);
 800229c:	4802      	ldr	r0, [pc, #8]	@ (80022a8 <LPTIM2_IRQHandler+0x10>)
 800229e:	f002 fd99 	bl	8004dd4 <HAL_LPTIM_IRQHandler>
  /* USER CODE BEGIN LPTIM2_IRQn 1 */

  /* USER CODE END LPTIM2_IRQn 1 */
}
 80022a2:	bf00      	nop
 80022a4:	bd80      	pop	{r7, pc}
 80022a6:	bf00      	nop
 80022a8:	20000128 	.word	0x20000128

080022ac <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80022ac:	b480      	push	{r7}
 80022ae:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80022b0:	4b06      	ldr	r3, [pc, #24]	@ (80022cc <SystemInit+0x20>)
 80022b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022b6:	4a05      	ldr	r2, [pc, #20]	@ (80022cc <SystemInit+0x20>)
 80022b8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80022bc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80022c0:	bf00      	nop
 80022c2:	46bd      	mov	sp, r7
 80022c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c8:	4770      	bx	lr
 80022ca:	bf00      	nop
 80022cc:	e000ed00 	.word	0xe000ed00

080022d0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80022d0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002308 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80022d4:	f7ff ffea 	bl	80022ac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80022d8:	480c      	ldr	r0, [pc, #48]	@ (800230c <LoopForever+0x6>)
  ldr r1, =_edata
 80022da:	490d      	ldr	r1, [pc, #52]	@ (8002310 <LoopForever+0xa>)
  ldr r2, =_sidata
 80022dc:	4a0d      	ldr	r2, [pc, #52]	@ (8002314 <LoopForever+0xe>)
  movs r3, #0
 80022de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80022e0:	e002      	b.n	80022e8 <LoopCopyDataInit>

080022e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80022e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80022e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80022e6:	3304      	adds	r3, #4

080022e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80022e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80022ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80022ec:	d3f9      	bcc.n	80022e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80022ee:	4a0a      	ldr	r2, [pc, #40]	@ (8002318 <LoopForever+0x12>)
  ldr r4, =_ebss
 80022f0:	4c0a      	ldr	r4, [pc, #40]	@ (800231c <LoopForever+0x16>)
  movs r3, #0
 80022f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80022f4:	e001      	b.n	80022fa <LoopFillZerobss>

080022f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80022f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80022f8:	3204      	adds	r2, #4

080022fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80022fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80022fc:	d3fb      	bcc.n	80022f6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80022fe:	f005 f953 	bl	80075a8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002302:	f7ff fa71 	bl	80017e8 <main>

08002306 <LoopForever>:

LoopForever:
    b LoopForever
 8002306:	e7fe      	b.n	8002306 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002308:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800230c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002310:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8002314:	08007660 	.word	0x08007660
  ldr r2, =_sbss
 8002318:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800231c:	2000029c 	.word	0x2000029c

08002320 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002320:	e7fe      	b.n	8002320 <ADC1_IRQHandler>

08002322 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002322:	b580      	push	{r7, lr}
 8002324:	b082      	sub	sp, #8
 8002326:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002328:	2300      	movs	r3, #0
 800232a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800232c:	2003      	movs	r0, #3
 800232e:	f001 fa1f 	bl	8003770 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002332:	2000      	movs	r0, #0
 8002334:	f000 f80e 	bl	8002354 <HAL_InitTick>
 8002338:	4603      	mov	r3, r0
 800233a:	2b00      	cmp	r3, #0
 800233c:	d002      	beq.n	8002344 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800233e:	2301      	movs	r3, #1
 8002340:	71fb      	strb	r3, [r7, #7]
 8002342:	e001      	b.n	8002348 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002344:	f7ff fdac 	bl	8001ea0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002348:	79fb      	ldrb	r3, [r7, #7]
}
 800234a:	4618      	mov	r0, r3
 800234c:	3708      	adds	r7, #8
 800234e:	46bd      	mov	sp, r7
 8002350:	bd80      	pop	{r7, pc}
	...

08002354 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b084      	sub	sp, #16
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800235c:	2300      	movs	r3, #0
 800235e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002360:	4b17      	ldr	r3, [pc, #92]	@ (80023c0 <HAL_InitTick+0x6c>)
 8002362:	781b      	ldrb	r3, [r3, #0]
 8002364:	2b00      	cmp	r3, #0
 8002366:	d023      	beq.n	80023b0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002368:	4b16      	ldr	r3, [pc, #88]	@ (80023c4 <HAL_InitTick+0x70>)
 800236a:	681a      	ldr	r2, [r3, #0]
 800236c:	4b14      	ldr	r3, [pc, #80]	@ (80023c0 <HAL_InitTick+0x6c>)
 800236e:	781b      	ldrb	r3, [r3, #0]
 8002370:	4619      	mov	r1, r3
 8002372:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002376:	fbb3 f3f1 	udiv	r3, r3, r1
 800237a:	fbb2 f3f3 	udiv	r3, r2, r3
 800237e:	4618      	mov	r0, r3
 8002380:	f001 fa2b 	bl	80037da <HAL_SYSTICK_Config>
 8002384:	4603      	mov	r3, r0
 8002386:	2b00      	cmp	r3, #0
 8002388:	d10f      	bne.n	80023aa <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	2b0f      	cmp	r3, #15
 800238e:	d809      	bhi.n	80023a4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002390:	2200      	movs	r2, #0
 8002392:	6879      	ldr	r1, [r7, #4]
 8002394:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002398:	f001 f9f5 	bl	8003786 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800239c:	4a0a      	ldr	r2, [pc, #40]	@ (80023c8 <HAL_InitTick+0x74>)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6013      	str	r3, [r2, #0]
 80023a2:	e007      	b.n	80023b4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80023a4:	2301      	movs	r3, #1
 80023a6:	73fb      	strb	r3, [r7, #15]
 80023a8:	e004      	b.n	80023b4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80023aa:	2301      	movs	r3, #1
 80023ac:	73fb      	strb	r3, [r7, #15]
 80023ae:	e001      	b.n	80023b4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80023b0:	2301      	movs	r3, #1
 80023b2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80023b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80023b6:	4618      	mov	r0, r3
 80023b8:	3710      	adds	r7, #16
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bd80      	pop	{r7, pc}
 80023be:	bf00      	nop
 80023c0:	20000008 	.word	0x20000008
 80023c4:	20000000 	.word	0x20000000
 80023c8:	20000004 	.word	0x20000004

080023cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80023cc:	b480      	push	{r7}
 80023ce:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80023d0:	4b06      	ldr	r3, [pc, #24]	@ (80023ec <HAL_IncTick+0x20>)
 80023d2:	781b      	ldrb	r3, [r3, #0]
 80023d4:	461a      	mov	r2, r3
 80023d6:	4b06      	ldr	r3, [pc, #24]	@ (80023f0 <HAL_IncTick+0x24>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	4413      	add	r3, r2
 80023dc:	4a04      	ldr	r2, [pc, #16]	@ (80023f0 <HAL_IncTick+0x24>)
 80023de:	6013      	str	r3, [r2, #0]
}
 80023e0:	bf00      	nop
 80023e2:	46bd      	mov	sp, r7
 80023e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e8:	4770      	bx	lr
 80023ea:	bf00      	nop
 80023ec:	20000008 	.word	0x20000008
 80023f0:	20000298 	.word	0x20000298

080023f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80023f4:	b480      	push	{r7}
 80023f6:	af00      	add	r7, sp, #0
  return uwTick;
 80023f8:	4b03      	ldr	r3, [pc, #12]	@ (8002408 <HAL_GetTick+0x14>)
 80023fa:	681b      	ldr	r3, [r3, #0]
}
 80023fc:	4618      	mov	r0, r3
 80023fe:	46bd      	mov	sp, r7
 8002400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002404:	4770      	bx	lr
 8002406:	bf00      	nop
 8002408:	20000298 	.word	0x20000298

0800240c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b084      	sub	sp, #16
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002414:	f7ff ffee 	bl	80023f4 <HAL_GetTick>
 8002418:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002424:	d005      	beq.n	8002432 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002426:	4b0a      	ldr	r3, [pc, #40]	@ (8002450 <HAL_Delay+0x44>)
 8002428:	781b      	ldrb	r3, [r3, #0]
 800242a:	461a      	mov	r2, r3
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	4413      	add	r3, r2
 8002430:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002432:	bf00      	nop
 8002434:	f7ff ffde 	bl	80023f4 <HAL_GetTick>
 8002438:	4602      	mov	r2, r0
 800243a:	68bb      	ldr	r3, [r7, #8]
 800243c:	1ad3      	subs	r3, r2, r3
 800243e:	68fa      	ldr	r2, [r7, #12]
 8002440:	429a      	cmp	r2, r3
 8002442:	d8f7      	bhi.n	8002434 <HAL_Delay+0x28>
  {
  }
}
 8002444:	bf00      	nop
 8002446:	bf00      	nop
 8002448:	3710      	adds	r7, #16
 800244a:	46bd      	mov	sp, r7
 800244c:	bd80      	pop	{r7, pc}
 800244e:	bf00      	nop
 8002450:	20000008 	.word	0x20000008

08002454 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8002454:	b480      	push	{r7}
 8002456:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 8002458:	4b05      	ldr	r3, [pc, #20]	@ (8002470 <HAL_SuspendTick+0x1c>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4a04      	ldr	r2, [pc, #16]	@ (8002470 <HAL_SuspendTick+0x1c>)
 800245e:	f023 0302 	bic.w	r3, r3, #2
 8002462:	6013      	str	r3, [r2, #0]
}
 8002464:	bf00      	nop
 8002466:	46bd      	mov	sp, r7
 8002468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246c:	4770      	bx	lr
 800246e:	bf00      	nop
 8002470:	e000e010 	.word	0xe000e010

08002474 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8002474:	b480      	push	{r7}
 8002476:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 8002478:	4b05      	ldr	r3, [pc, #20]	@ (8002490 <HAL_ResumeTick+0x1c>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4a04      	ldr	r2, [pc, #16]	@ (8002490 <HAL_ResumeTick+0x1c>)
 800247e:	f043 0302 	orr.w	r3, r3, #2
 8002482:	6013      	str	r3, [r2, #0]
}
 8002484:	bf00      	nop
 8002486:	46bd      	mov	sp, r7
 8002488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248c:	4770      	bx	lr
 800248e:	bf00      	nop
 8002490:	e000e010 	.word	0xe000e010

08002494 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002494:	b480      	push	{r7}
 8002496:	b083      	sub	sp, #12
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
 800249c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	689b      	ldr	r3, [r3, #8]
 80024a2:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	431a      	orrs	r2, r3
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	609a      	str	r2, [r3, #8]
}
 80024ae:	bf00      	nop
 80024b0:	370c      	adds	r7, #12
 80024b2:	46bd      	mov	sp, r7
 80024b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b8:	4770      	bx	lr

080024ba <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80024ba:	b480      	push	{r7}
 80024bc:	b083      	sub	sp, #12
 80024be:	af00      	add	r7, sp, #0
 80024c0:	6078      	str	r0, [r7, #4]
 80024c2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	689b      	ldr	r3, [r3, #8]
 80024c8:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	431a      	orrs	r2, r3
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	609a      	str	r2, [r3, #8]
}
 80024d4:	bf00      	nop
 80024d6:	370c      	adds	r7, #12
 80024d8:	46bd      	mov	sp, r7
 80024da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024de:	4770      	bx	lr

080024e0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80024e0:	b480      	push	{r7}
 80024e2:	b083      	sub	sp, #12
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	689b      	ldr	r3, [r3, #8]
 80024ec:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80024f0:	4618      	mov	r0, r3
 80024f2:	370c      	adds	r7, #12
 80024f4:	46bd      	mov	sp, r7
 80024f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fa:	4770      	bx	lr

080024fc <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80024fc:	b480      	push	{r7}
 80024fe:	b087      	sub	sp, #28
 8002500:	af00      	add	r7, sp, #0
 8002502:	60f8      	str	r0, [r7, #12]
 8002504:	60b9      	str	r1, [r7, #8]
 8002506:	607a      	str	r2, [r7, #4]
 8002508:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	3360      	adds	r3, #96	@ 0x60
 800250e:	461a      	mov	r2, r3
 8002510:	68bb      	ldr	r3, [r7, #8]
 8002512:	009b      	lsls	r3, r3, #2
 8002514:	4413      	add	r3, r2
 8002516:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002518:	697b      	ldr	r3, [r7, #20]
 800251a:	681a      	ldr	r2, [r3, #0]
 800251c:	4b08      	ldr	r3, [pc, #32]	@ (8002540 <LL_ADC_SetOffset+0x44>)
 800251e:	4013      	ands	r3, r2
 8002520:	687a      	ldr	r2, [r7, #4]
 8002522:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8002526:	683a      	ldr	r2, [r7, #0]
 8002528:	430a      	orrs	r2, r1
 800252a:	4313      	orrs	r3, r2
 800252c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002530:	697b      	ldr	r3, [r7, #20]
 8002532:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002534:	bf00      	nop
 8002536:	371c      	adds	r7, #28
 8002538:	46bd      	mov	sp, r7
 800253a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253e:	4770      	bx	lr
 8002540:	03fff000 	.word	0x03fff000

08002544 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002544:	b480      	push	{r7}
 8002546:	b085      	sub	sp, #20
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
 800254c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	3360      	adds	r3, #96	@ 0x60
 8002552:	461a      	mov	r2, r3
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	009b      	lsls	r3, r3, #2
 8002558:	4413      	add	r3, r2
 800255a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8002564:	4618      	mov	r0, r3
 8002566:	3714      	adds	r7, #20
 8002568:	46bd      	mov	sp, r7
 800256a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256e:	4770      	bx	lr

08002570 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002570:	b480      	push	{r7}
 8002572:	b087      	sub	sp, #28
 8002574:	af00      	add	r7, sp, #0
 8002576:	60f8      	str	r0, [r7, #12]
 8002578:	60b9      	str	r1, [r7, #8]
 800257a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	3360      	adds	r3, #96	@ 0x60
 8002580:	461a      	mov	r2, r3
 8002582:	68bb      	ldr	r3, [r7, #8]
 8002584:	009b      	lsls	r3, r3, #2
 8002586:	4413      	add	r3, r2
 8002588:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800258a:	697b      	ldr	r3, [r7, #20]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	431a      	orrs	r2, r3
 8002596:	697b      	ldr	r3, [r7, #20]
 8002598:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800259a:	bf00      	nop
 800259c:	371c      	adds	r7, #28
 800259e:	46bd      	mov	sp, r7
 80025a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a4:	4770      	bx	lr

080025a6 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80025a6:	b480      	push	{r7}
 80025a8:	b083      	sub	sp, #12
 80025aa:	af00      	add	r7, sp, #0
 80025ac:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	68db      	ldr	r3, [r3, #12]
 80025b2:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d101      	bne.n	80025be <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80025ba:	2301      	movs	r3, #1
 80025bc:	e000      	b.n	80025c0 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80025be:	2300      	movs	r3, #0
}
 80025c0:	4618      	mov	r0, r3
 80025c2:	370c      	adds	r7, #12
 80025c4:	46bd      	mov	sp, r7
 80025c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ca:	4770      	bx	lr

080025cc <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80025cc:	b480      	push	{r7}
 80025ce:	b087      	sub	sp, #28
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	60f8      	str	r0, [r7, #12]
 80025d4:	60b9      	str	r1, [r7, #8]
 80025d6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	3330      	adds	r3, #48	@ 0x30
 80025dc:	461a      	mov	r2, r3
 80025de:	68bb      	ldr	r3, [r7, #8]
 80025e0:	0a1b      	lsrs	r3, r3, #8
 80025e2:	009b      	lsls	r3, r3, #2
 80025e4:	f003 030c 	and.w	r3, r3, #12
 80025e8:	4413      	add	r3, r2
 80025ea:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80025ec:	697b      	ldr	r3, [r7, #20]
 80025ee:	681a      	ldr	r2, [r3, #0]
 80025f0:	68bb      	ldr	r3, [r7, #8]
 80025f2:	f003 031f 	and.w	r3, r3, #31
 80025f6:	211f      	movs	r1, #31
 80025f8:	fa01 f303 	lsl.w	r3, r1, r3
 80025fc:	43db      	mvns	r3, r3
 80025fe:	401a      	ands	r2, r3
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	0e9b      	lsrs	r3, r3, #26
 8002604:	f003 011f 	and.w	r1, r3, #31
 8002608:	68bb      	ldr	r3, [r7, #8]
 800260a:	f003 031f 	and.w	r3, r3, #31
 800260e:	fa01 f303 	lsl.w	r3, r1, r3
 8002612:	431a      	orrs	r2, r3
 8002614:	697b      	ldr	r3, [r7, #20]
 8002616:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002618:	bf00      	nop
 800261a:	371c      	adds	r7, #28
 800261c:	46bd      	mov	sp, r7
 800261e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002622:	4770      	bx	lr

08002624 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002624:	b480      	push	{r7}
 8002626:	b087      	sub	sp, #28
 8002628:	af00      	add	r7, sp, #0
 800262a:	60f8      	str	r0, [r7, #12]
 800262c:	60b9      	str	r1, [r7, #8]
 800262e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	3314      	adds	r3, #20
 8002634:	461a      	mov	r2, r3
 8002636:	68bb      	ldr	r3, [r7, #8]
 8002638:	0e5b      	lsrs	r3, r3, #25
 800263a:	009b      	lsls	r3, r3, #2
 800263c:	f003 0304 	and.w	r3, r3, #4
 8002640:	4413      	add	r3, r2
 8002642:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002644:	697b      	ldr	r3, [r7, #20]
 8002646:	681a      	ldr	r2, [r3, #0]
 8002648:	68bb      	ldr	r3, [r7, #8]
 800264a:	0d1b      	lsrs	r3, r3, #20
 800264c:	f003 031f 	and.w	r3, r3, #31
 8002650:	2107      	movs	r1, #7
 8002652:	fa01 f303 	lsl.w	r3, r1, r3
 8002656:	43db      	mvns	r3, r3
 8002658:	401a      	ands	r2, r3
 800265a:	68bb      	ldr	r3, [r7, #8]
 800265c:	0d1b      	lsrs	r3, r3, #20
 800265e:	f003 031f 	and.w	r3, r3, #31
 8002662:	6879      	ldr	r1, [r7, #4]
 8002664:	fa01 f303 	lsl.w	r3, r1, r3
 8002668:	431a      	orrs	r2, r3
 800266a:	697b      	ldr	r3, [r7, #20]
 800266c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800266e:	bf00      	nop
 8002670:	371c      	adds	r7, #28
 8002672:	46bd      	mov	sp, r7
 8002674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002678:	4770      	bx	lr
	...

0800267c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800267c:	b480      	push	{r7}
 800267e:	b085      	sub	sp, #20
 8002680:	af00      	add	r7, sp, #0
 8002682:	60f8      	str	r0, [r7, #12]
 8002684:	60b9      	str	r1, [r7, #8]
 8002686:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800268e:	68bb      	ldr	r3, [r7, #8]
 8002690:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002694:	43db      	mvns	r3, r3
 8002696:	401a      	ands	r2, r3
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	f003 0318 	and.w	r3, r3, #24
 800269e:	4908      	ldr	r1, [pc, #32]	@ (80026c0 <LL_ADC_SetChannelSingleDiff+0x44>)
 80026a0:	40d9      	lsrs	r1, r3
 80026a2:	68bb      	ldr	r3, [r7, #8]
 80026a4:	400b      	ands	r3, r1
 80026a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026aa:	431a      	orrs	r2, r3
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80026b2:	bf00      	nop
 80026b4:	3714      	adds	r7, #20
 80026b6:	46bd      	mov	sp, r7
 80026b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026bc:	4770      	bx	lr
 80026be:	bf00      	nop
 80026c0:	0007ffff 	.word	0x0007ffff

080026c4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80026c4:	b480      	push	{r7}
 80026c6:	b083      	sub	sp, #12
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	689b      	ldr	r3, [r3, #8]
 80026d0:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 80026d4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80026d8:	687a      	ldr	r2, [r7, #4]
 80026da:	6093      	str	r3, [r2, #8]
}
 80026dc:	bf00      	nop
 80026de:	370c      	adds	r7, #12
 80026e0:	46bd      	mov	sp, r7
 80026e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e6:	4770      	bx	lr

080026e8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80026e8:	b480      	push	{r7}
 80026ea:	b083      	sub	sp, #12
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	689b      	ldr	r3, [r3, #8]
 80026f4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80026f8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80026fc:	d101      	bne.n	8002702 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80026fe:	2301      	movs	r3, #1
 8002700:	e000      	b.n	8002704 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002702:	2300      	movs	r3, #0
}
 8002704:	4618      	mov	r0, r3
 8002706:	370c      	adds	r7, #12
 8002708:	46bd      	mov	sp, r7
 800270a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270e:	4770      	bx	lr

08002710 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002710:	b480      	push	{r7}
 8002712:	b083      	sub	sp, #12
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	689b      	ldr	r3, [r3, #8]
 800271c:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8002720:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002724:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800272c:	bf00      	nop
 800272e:	370c      	adds	r7, #12
 8002730:	46bd      	mov	sp, r7
 8002732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002736:	4770      	bx	lr

08002738 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002738:	b480      	push	{r7}
 800273a:	b083      	sub	sp, #12
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	689b      	ldr	r3, [r3, #8]
 8002744:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002748:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800274c:	d101      	bne.n	8002752 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800274e:	2301      	movs	r3, #1
 8002750:	e000      	b.n	8002754 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002752:	2300      	movs	r3, #0
}
 8002754:	4618      	mov	r0, r3
 8002756:	370c      	adds	r7, #12
 8002758:	46bd      	mov	sp, r7
 800275a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275e:	4770      	bx	lr

08002760 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002760:	b480      	push	{r7}
 8002762:	b083      	sub	sp, #12
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	689b      	ldr	r3, [r3, #8]
 800276c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002770:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002774:	f043 0201 	orr.w	r2, r3, #1
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800277c:	bf00      	nop
 800277e:	370c      	adds	r7, #12
 8002780:	46bd      	mov	sp, r7
 8002782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002786:	4770      	bx	lr

08002788 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002788:	b480      	push	{r7}
 800278a:	b083      	sub	sp, #12
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	689b      	ldr	r3, [r3, #8]
 8002794:	f003 0301 	and.w	r3, r3, #1
 8002798:	2b01      	cmp	r3, #1
 800279a:	d101      	bne.n	80027a0 <LL_ADC_IsEnabled+0x18>
 800279c:	2301      	movs	r3, #1
 800279e:	e000      	b.n	80027a2 <LL_ADC_IsEnabled+0x1a>
 80027a0:	2300      	movs	r3, #0
}
 80027a2:	4618      	mov	r0, r3
 80027a4:	370c      	adds	r7, #12
 80027a6:	46bd      	mov	sp, r7
 80027a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ac:	4770      	bx	lr

080027ae <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80027ae:	b480      	push	{r7}
 80027b0:	b083      	sub	sp, #12
 80027b2:	af00      	add	r7, sp, #0
 80027b4:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	689b      	ldr	r3, [r3, #8]
 80027ba:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80027be:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80027c2:	f043 0204 	orr.w	r2, r3, #4
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80027ca:	bf00      	nop
 80027cc:	370c      	adds	r7, #12
 80027ce:	46bd      	mov	sp, r7
 80027d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d4:	4770      	bx	lr

080027d6 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80027d6:	b480      	push	{r7}
 80027d8:	b083      	sub	sp, #12
 80027da:	af00      	add	r7, sp, #0
 80027dc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	689b      	ldr	r3, [r3, #8]
 80027e2:	f003 0304 	and.w	r3, r3, #4
 80027e6:	2b04      	cmp	r3, #4
 80027e8:	d101      	bne.n	80027ee <LL_ADC_REG_IsConversionOngoing+0x18>
 80027ea:	2301      	movs	r3, #1
 80027ec:	e000      	b.n	80027f0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80027ee:	2300      	movs	r3, #0
}
 80027f0:	4618      	mov	r0, r3
 80027f2:	370c      	adds	r7, #12
 80027f4:	46bd      	mov	sp, r7
 80027f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fa:	4770      	bx	lr

080027fc <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80027fc:	b480      	push	{r7}
 80027fe:	b083      	sub	sp, #12
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	689b      	ldr	r3, [r3, #8]
 8002808:	f003 0308 	and.w	r3, r3, #8
 800280c:	2b08      	cmp	r3, #8
 800280e:	d101      	bne.n	8002814 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002810:	2301      	movs	r3, #1
 8002812:	e000      	b.n	8002816 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002814:	2300      	movs	r3, #0
}
 8002816:	4618      	mov	r0, r3
 8002818:	370c      	adds	r7, #12
 800281a:	46bd      	mov	sp, r7
 800281c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002820:	4770      	bx	lr
	...

08002824 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b088      	sub	sp, #32
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800282c:	2300      	movs	r3, #0
 800282e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8002830:	2300      	movs	r3, #0
 8002832:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2b00      	cmp	r3, #0
 8002838:	d101      	bne.n	800283e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800283a:	2301      	movs	r3, #1
 800283c:	e126      	b.n	8002a8c <HAL_ADC_Init+0x268>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	691b      	ldr	r3, [r3, #16]
 8002842:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002848:	2b00      	cmp	r3, #0
 800284a:	d109      	bne.n	8002860 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800284c:	6878      	ldr	r0, [r7, #4]
 800284e:	f7ff fb4b 	bl	8001ee8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	2200      	movs	r2, #0
 8002856:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2200      	movs	r2, #0
 800285c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	4618      	mov	r0, r3
 8002866:	f7ff ff3f 	bl	80026e8 <LL_ADC_IsDeepPowerDownEnabled>
 800286a:	4603      	mov	r3, r0
 800286c:	2b00      	cmp	r3, #0
 800286e:	d004      	beq.n	800287a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	4618      	mov	r0, r3
 8002876:	f7ff ff25 	bl	80026c4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	4618      	mov	r0, r3
 8002880:	f7ff ff5a 	bl	8002738 <LL_ADC_IsInternalRegulatorEnabled>
 8002884:	4603      	mov	r3, r0
 8002886:	2b00      	cmp	r3, #0
 8002888:	d115      	bne.n	80028b6 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	4618      	mov	r0, r3
 8002890:	f7ff ff3e 	bl	8002710 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002894:	4b7f      	ldr	r3, [pc, #508]	@ (8002a94 <HAL_ADC_Init+0x270>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	099b      	lsrs	r3, r3, #6
 800289a:	4a7f      	ldr	r2, [pc, #508]	@ (8002a98 <HAL_ADC_Init+0x274>)
 800289c:	fba2 2303 	umull	r2, r3, r2, r3
 80028a0:	099b      	lsrs	r3, r3, #6
 80028a2:	3301      	adds	r3, #1
 80028a4:	005b      	lsls	r3, r3, #1
 80028a6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80028a8:	e002      	b.n	80028b0 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	3b01      	subs	r3, #1
 80028ae:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d1f9      	bne.n	80028aa <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	4618      	mov	r0, r3
 80028bc:	f7ff ff3c 	bl	8002738 <LL_ADC_IsInternalRegulatorEnabled>
 80028c0:	4603      	mov	r3, r0
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d10d      	bne.n	80028e2 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028ca:	f043 0210 	orr.w	r2, r3, #16
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028d6:	f043 0201 	orr.w	r2, r3, #1
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80028de:	2301      	movs	r3, #1
 80028e0:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	4618      	mov	r0, r3
 80028e8:	f7ff ff75 	bl	80027d6 <LL_ADC_REG_IsConversionOngoing>
 80028ec:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028f2:	f003 0310 	and.w	r3, r3, #16
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	f040 80bf 	bne.w	8002a7a <HAL_ADC_Init+0x256>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80028fc:	697b      	ldr	r3, [r7, #20]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	f040 80bb 	bne.w	8002a7a <HAL_ADC_Init+0x256>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002908:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 800290c:	f043 0202 	orr.w	r2, r3, #2
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	4618      	mov	r0, r3
 800291a:	f7ff ff35 	bl	8002788 <LL_ADC_IsEnabled>
 800291e:	4603      	mov	r3, r0
 8002920:	2b00      	cmp	r3, #0
 8002922:	d10b      	bne.n	800293c <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002924:	485d      	ldr	r0, [pc, #372]	@ (8002a9c <HAL_ADC_Init+0x278>)
 8002926:	f7ff ff2f 	bl	8002788 <LL_ADC_IsEnabled>
 800292a:	4603      	mov	r3, r0
 800292c:	2b00      	cmp	r3, #0
 800292e:	d105      	bne.n	800293c <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	4619      	mov	r1, r3
 8002936:	485a      	ldr	r0, [pc, #360]	@ (8002aa0 <HAL_ADC_Init+0x27c>)
 8002938:	f7ff fdac 	bl	8002494 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	7e5b      	ldrb	r3, [r3, #25]
 8002940:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002946:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 800294c:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8002952:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	f893 3020 	ldrb.w	r3, [r3, #32]
 800295a:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800295c:	4313      	orrs	r3, r2
 800295e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002966:	2b01      	cmp	r3, #1
 8002968:	d106      	bne.n	8002978 <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800296e:	3b01      	subs	r3, #1
 8002970:	045b      	lsls	r3, r3, #17
 8002972:	69ba      	ldr	r2, [r7, #24]
 8002974:	4313      	orrs	r3, r2
 8002976:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800297c:	2b00      	cmp	r3, #0
 800297e:	d009      	beq.n	8002994 <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002984:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800298c:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800298e:	69ba      	ldr	r2, [r7, #24]
 8002990:	4313      	orrs	r3, r2
 8002992:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	68da      	ldr	r2, [r3, #12]
 800299a:	4b42      	ldr	r3, [pc, #264]	@ (8002aa4 <HAL_ADC_Init+0x280>)
 800299c:	4013      	ands	r3, r2
 800299e:	687a      	ldr	r2, [r7, #4]
 80029a0:	6812      	ldr	r2, [r2, #0]
 80029a2:	69b9      	ldr	r1, [r7, #24]
 80029a4:	430b      	orrs	r3, r1
 80029a6:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4618      	mov	r0, r3
 80029ae:	f7ff ff25 	bl	80027fc <LL_ADC_INJ_IsConversionOngoing>
 80029b2:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80029b4:	697b      	ldr	r3, [r7, #20]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d13d      	bne.n	8002a36 <HAL_ADC_Init+0x212>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80029ba:	693b      	ldr	r3, [r7, #16]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d13a      	bne.n	8002a36 <HAL_ADC_Init+0x212>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80029c4:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80029cc:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80029ce:	4313      	orrs	r3, r2
 80029d0:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	68db      	ldr	r3, [r3, #12]
 80029d8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80029dc:	f023 0302 	bic.w	r3, r3, #2
 80029e0:	687a      	ldr	r2, [r7, #4]
 80029e2:	6812      	ldr	r2, [r2, #0]
 80029e4:	69b9      	ldr	r1, [r7, #24]
 80029e6:	430b      	orrs	r3, r1
 80029e8:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80029f0:	2b01      	cmp	r3, #1
 80029f2:	d118      	bne.n	8002a26 <HAL_ADC_Init+0x202>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	691b      	ldr	r3, [r3, #16]
 80029fa:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80029fe:	f023 0304 	bic.w	r3, r3, #4
 8002a02:	687a      	ldr	r2, [r7, #4]
 8002a04:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8002a06:	687a      	ldr	r2, [r7, #4]
 8002a08:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002a0a:	4311      	orrs	r1, r2
 8002a0c:	687a      	ldr	r2, [r7, #4]
 8002a0e:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8002a10:	4311      	orrs	r1, r2
 8002a12:	687a      	ldr	r2, [r7, #4]
 8002a14:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002a16:	430a      	orrs	r2, r1
 8002a18:	431a      	orrs	r2, r3
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f042 0201 	orr.w	r2, r2, #1
 8002a22:	611a      	str	r2, [r3, #16]
 8002a24:	e007      	b.n	8002a36 <HAL_ADC_Init+0x212>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	691a      	ldr	r2, [r3, #16]
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f022 0201 	bic.w	r2, r2, #1
 8002a34:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	691b      	ldr	r3, [r3, #16]
 8002a3a:	2b01      	cmp	r3, #1
 8002a3c:	d10c      	bne.n	8002a58 <HAL_ADC_Init+0x234>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a44:	f023 010f 	bic.w	r1, r3, #15
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	69db      	ldr	r3, [r3, #28]
 8002a4c:	1e5a      	subs	r2, r3, #1
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	430a      	orrs	r2, r1
 8002a54:	631a      	str	r2, [r3, #48]	@ 0x30
 8002a56:	e007      	b.n	8002a68 <HAL_ADC_Init+0x244>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f022 020f 	bic.w	r2, r2, #15
 8002a66:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a6c:	f023 0303 	bic.w	r3, r3, #3
 8002a70:	f043 0201 	orr.w	r2, r3, #1
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	655a      	str	r2, [r3, #84]	@ 0x54
 8002a78:	e007      	b.n	8002a8a <HAL_ADC_Init+0x266>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a7e:	f043 0210 	orr.w	r2, r3, #16
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002a86:	2301      	movs	r3, #1
 8002a88:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002a8a:	7ffb      	ldrb	r3, [r7, #31]
}
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	3720      	adds	r7, #32
 8002a90:	46bd      	mov	sp, r7
 8002a92:	bd80      	pop	{r7, pc}
 8002a94:	20000000 	.word	0x20000000
 8002a98:	053e2d63 	.word	0x053e2d63
 8002a9c:	50040000 	.word	0x50040000
 8002aa0:	50040300 	.word	0x50040300
 8002aa4:	fff0c007 	.word	0xfff0c007

08002aa8 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b086      	sub	sp, #24
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	60f8      	str	r0, [r7, #12]
 8002ab0:	60b9      	str	r1, [r7, #8]
 8002ab2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4618      	mov	r0, r3
 8002aba:	f7ff fe8c 	bl	80027d6 <LL_ADC_REG_IsConversionOngoing>
 8002abe:	4603      	mov	r3, r0
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d167      	bne.n	8002b94 <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002aca:	2b01      	cmp	r3, #1
 8002acc:	d101      	bne.n	8002ad2 <HAL_ADC_Start_DMA+0x2a>
 8002ace:	2302      	movs	r3, #2
 8002ad0:	e063      	b.n	8002b9a <HAL_ADC_Start_DMA+0xf2>
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	2201      	movs	r2, #1
 8002ad6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002ada:	68f8      	ldr	r0, [r7, #12]
 8002adc:	f000 fc5e 	bl	800339c <ADC_Enable>
 8002ae0:	4603      	mov	r3, r0
 8002ae2:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002ae4:	7dfb      	ldrb	r3, [r7, #23]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d14f      	bne.n	8002b8a <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002aee:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002af2:	f023 0301 	bic.w	r3, r3, #1
 8002af6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	655a      	str	r2, [r3, #84]	@ 0x54
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b02:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d006      	beq.n	8002b18 <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b0e:	f023 0206 	bic.w	r2, r3, #6
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	659a      	str	r2, [r3, #88]	@ 0x58
 8002b16:	e002      	b.n	8002b1e <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	659a      	str	r2, [r3, #88]	@ 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b22:	4a20      	ldr	r2, [pc, #128]	@ (8002ba4 <HAL_ADC_Start_DMA+0xfc>)
 8002b24:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b2a:	4a1f      	ldr	r2, [pc, #124]	@ (8002ba8 <HAL_ADC_Start_DMA+0x100>)
 8002b2c:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b32:	4a1e      	ldr	r2, [pc, #120]	@ (8002bac <HAL_ADC_Start_DMA+0x104>)
 8002b34:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	221c      	movs	r2, #28
 8002b3c:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	2200      	movs	r2, #0
 8002b42:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	685a      	ldr	r2, [r3, #4]
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f042 0210 	orr.w	r2, r2, #16
 8002b54:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	68da      	ldr	r2, [r3, #12]
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f042 0201 	orr.w	r2, r2, #1
 8002b64:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	3340      	adds	r3, #64	@ 0x40
 8002b70:	4619      	mov	r1, r3
 8002b72:	68ba      	ldr	r2, [r7, #8]
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	f000 fef5 	bl	8003964 <HAL_DMA_Start_IT>
 8002b7a:	4603      	mov	r3, r0
 8002b7c:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	4618      	mov	r0, r3
 8002b84:	f7ff fe13 	bl	80027ae <LL_ADC_REG_StartConversion>
 8002b88:	e006      	b.n	8002b98 <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8002b92:	e001      	b.n	8002b98 <HAL_ADC_Start_DMA+0xf0>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002b94:	2302      	movs	r3, #2
 8002b96:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002b98:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	3718      	adds	r7, #24
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	bd80      	pop	{r7, pc}
 8002ba2:	bf00      	nop
 8002ba4:	080034a9 	.word	0x080034a9
 8002ba8:	08003581 	.word	0x08003581
 8002bac:	0800359d 	.word	0x0800359d

08002bb0 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002bb0:	b480      	push	{r7}
 8002bb2:	b083      	sub	sp, #12
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002bb8:	bf00      	nop
 8002bba:	370c      	adds	r7, #12
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc2:	4770      	bx	lr

08002bc4 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	b083      	sub	sp, #12
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002bcc:	bf00      	nop
 8002bce:	370c      	adds	r7, #12
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd6:	4770      	bx	lr

08002bd8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b0b6      	sub	sp, #216	@ 0xd8
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
 8002be0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002be2:	2300      	movs	r3, #0
 8002be4:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002be8:	2300      	movs	r3, #0
 8002bea:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002bf2:	2b01      	cmp	r3, #1
 8002bf4:	d101      	bne.n	8002bfa <HAL_ADC_ConfigChannel+0x22>
 8002bf6:	2302      	movs	r3, #2
 8002bf8:	e3bb      	b.n	8003372 <HAL_ADC_ConfigChannel+0x79a>
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	2201      	movs	r2, #1
 8002bfe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	4618      	mov	r0, r3
 8002c08:	f7ff fde5 	bl	80027d6 <LL_ADC_REG_IsConversionOngoing>
 8002c0c:	4603      	mov	r3, r0
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	f040 83a0 	bne.w	8003354 <HAL_ADC_ConfigChannel+0x77c>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	685b      	ldr	r3, [r3, #4]
 8002c18:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	685b      	ldr	r3, [r3, #4]
 8002c20:	2b05      	cmp	r3, #5
 8002c22:	d824      	bhi.n	8002c6e <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	685b      	ldr	r3, [r3, #4]
 8002c28:	3b02      	subs	r3, #2
 8002c2a:	2b03      	cmp	r3, #3
 8002c2c:	d81b      	bhi.n	8002c66 <HAL_ADC_ConfigChannel+0x8e>
 8002c2e:	a201      	add	r2, pc, #4	@ (adr r2, 8002c34 <HAL_ADC_ConfigChannel+0x5c>)
 8002c30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c34:	08002c45 	.word	0x08002c45
 8002c38:	08002c4d 	.word	0x08002c4d
 8002c3c:	08002c55 	.word	0x08002c55
 8002c40:	08002c5d 	.word	0x08002c5d
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8002c44:	230c      	movs	r3, #12
 8002c46:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002c4a:	e010      	b.n	8002c6e <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8002c4c:	2312      	movs	r3, #18
 8002c4e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002c52:	e00c      	b.n	8002c6e <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8002c54:	2318      	movs	r3, #24
 8002c56:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002c5a:	e008      	b.n	8002c6e <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8002c5c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002c60:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002c64:	e003      	b.n	8002c6e <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8002c66:	2306      	movs	r3, #6
 8002c68:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002c6c:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6818      	ldr	r0, [r3, #0]
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	461a      	mov	r2, r3
 8002c78:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8002c7c:	f7ff fca6 	bl	80025cc <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	4618      	mov	r0, r3
 8002c86:	f7ff fda6 	bl	80027d6 <LL_ADC_REG_IsConversionOngoing>
 8002c8a:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	4618      	mov	r0, r3
 8002c94:	f7ff fdb2 	bl	80027fc <LL_ADC_INJ_IsConversionOngoing>
 8002c98:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002c9c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	f040 81a4 	bne.w	8002fee <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002ca6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	f040 819f 	bne.w	8002fee <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6818      	ldr	r0, [r3, #0]
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	6819      	ldr	r1, [r3, #0]
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	689b      	ldr	r3, [r3, #8]
 8002cbc:	461a      	mov	r2, r3
 8002cbe:	f7ff fcb1 	bl	8002624 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	695a      	ldr	r2, [r3, #20]
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	68db      	ldr	r3, [r3, #12]
 8002ccc:	08db      	lsrs	r3, r3, #3
 8002cce:	f003 0303 	and.w	r3, r3, #3
 8002cd2:	005b      	lsls	r3, r3, #1
 8002cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8002cd8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	691b      	ldr	r3, [r3, #16]
 8002ce0:	2b04      	cmp	r3, #4
 8002ce2:	d00a      	beq.n	8002cfa <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6818      	ldr	r0, [r3, #0]
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	6919      	ldr	r1, [r3, #16]
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	681a      	ldr	r2, [r3, #0]
 8002cf0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002cf4:	f7ff fc02 	bl	80024fc <LL_ADC_SetOffset>
 8002cf8:	e179      	b.n	8002fee <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	2100      	movs	r1, #0
 8002d00:	4618      	mov	r0, r3
 8002d02:	f7ff fc1f 	bl	8002544 <LL_ADC_GetOffsetChannel>
 8002d06:	4603      	mov	r3, r0
 8002d08:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d10a      	bne.n	8002d26 <HAL_ADC_ConfigChannel+0x14e>
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	2100      	movs	r1, #0
 8002d16:	4618      	mov	r0, r3
 8002d18:	f7ff fc14 	bl	8002544 <LL_ADC_GetOffsetChannel>
 8002d1c:	4603      	mov	r3, r0
 8002d1e:	0e9b      	lsrs	r3, r3, #26
 8002d20:	f003 021f 	and.w	r2, r3, #31
 8002d24:	e01e      	b.n	8002d64 <HAL_ADC_ConfigChannel+0x18c>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	2100      	movs	r1, #0
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	f7ff fc09 	bl	8002544 <LL_ADC_GetOffsetChannel>
 8002d32:	4603      	mov	r3, r0
 8002d34:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d38:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002d3c:	fa93 f3a3 	rbit	r3, r3
 8002d40:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002d44:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002d48:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002d4c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d101      	bne.n	8002d58 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 8002d54:	2320      	movs	r3, #32
 8002d56:	e004      	b.n	8002d62 <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 8002d58:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002d5c:	fab3 f383 	clz	r3, r3
 8002d60:	b2db      	uxtb	r3, r3
 8002d62:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d105      	bne.n	8002d7c <HAL_ADC_ConfigChannel+0x1a4>
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	0e9b      	lsrs	r3, r3, #26
 8002d76:	f003 031f 	and.w	r3, r3, #31
 8002d7a:	e018      	b.n	8002dae <HAL_ADC_ConfigChannel+0x1d6>
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d84:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002d88:	fa93 f3a3 	rbit	r3, r3
 8002d8c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8002d90:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002d94:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8002d98:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d101      	bne.n	8002da4 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 8002da0:	2320      	movs	r3, #32
 8002da2:	e004      	b.n	8002dae <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8002da4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002da8:	fab3 f383 	clz	r3, r3
 8002dac:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002dae:	429a      	cmp	r2, r3
 8002db0:	d106      	bne.n	8002dc0 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	2200      	movs	r2, #0
 8002db8:	2100      	movs	r1, #0
 8002dba:	4618      	mov	r0, r3
 8002dbc:	f7ff fbd8 	bl	8002570 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	2101      	movs	r1, #1
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	f7ff fbbc 	bl	8002544 <LL_ADC_GetOffsetChannel>
 8002dcc:	4603      	mov	r3, r0
 8002dce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d10a      	bne.n	8002dec <HAL_ADC_ConfigChannel+0x214>
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	2101      	movs	r1, #1
 8002ddc:	4618      	mov	r0, r3
 8002dde:	f7ff fbb1 	bl	8002544 <LL_ADC_GetOffsetChannel>
 8002de2:	4603      	mov	r3, r0
 8002de4:	0e9b      	lsrs	r3, r3, #26
 8002de6:	f003 021f 	and.w	r2, r3, #31
 8002dea:	e01e      	b.n	8002e2a <HAL_ADC_ConfigChannel+0x252>
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	2101      	movs	r1, #1
 8002df2:	4618      	mov	r0, r3
 8002df4:	f7ff fba6 	bl	8002544 <LL_ADC_GetOffsetChannel>
 8002df8:	4603      	mov	r3, r0
 8002dfa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dfe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002e02:	fa93 f3a3 	rbit	r3, r3
 8002e06:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8002e0a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002e0e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8002e12:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d101      	bne.n	8002e1e <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 8002e1a:	2320      	movs	r3, #32
 8002e1c:	e004      	b.n	8002e28 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 8002e1e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002e22:	fab3 f383 	clz	r3, r3
 8002e26:	b2db      	uxtb	r3, r3
 8002e28:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d105      	bne.n	8002e42 <HAL_ADC_ConfigChannel+0x26a>
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	0e9b      	lsrs	r3, r3, #26
 8002e3c:	f003 031f 	and.w	r3, r3, #31
 8002e40:	e018      	b.n	8002e74 <HAL_ADC_ConfigChannel+0x29c>
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e4a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002e4e:	fa93 f3a3 	rbit	r3, r3
 8002e52:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8002e56:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002e5a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8002e5e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d101      	bne.n	8002e6a <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 8002e66:	2320      	movs	r3, #32
 8002e68:	e004      	b.n	8002e74 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 8002e6a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002e6e:	fab3 f383 	clz	r3, r3
 8002e72:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002e74:	429a      	cmp	r2, r3
 8002e76:	d106      	bne.n	8002e86 <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	2101      	movs	r1, #1
 8002e80:	4618      	mov	r0, r3
 8002e82:	f7ff fb75 	bl	8002570 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	2102      	movs	r1, #2
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	f7ff fb59 	bl	8002544 <LL_ADC_GetOffsetChannel>
 8002e92:	4603      	mov	r3, r0
 8002e94:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d10a      	bne.n	8002eb2 <HAL_ADC_ConfigChannel+0x2da>
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	2102      	movs	r1, #2
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	f7ff fb4e 	bl	8002544 <LL_ADC_GetOffsetChannel>
 8002ea8:	4603      	mov	r3, r0
 8002eaa:	0e9b      	lsrs	r3, r3, #26
 8002eac:	f003 021f 	and.w	r2, r3, #31
 8002eb0:	e01e      	b.n	8002ef0 <HAL_ADC_ConfigChannel+0x318>
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	2102      	movs	r1, #2
 8002eb8:	4618      	mov	r0, r3
 8002eba:	f7ff fb43 	bl	8002544 <LL_ADC_GetOffsetChannel>
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ec4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002ec8:	fa93 f3a3 	rbit	r3, r3
 8002ecc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8002ed0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002ed4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8002ed8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d101      	bne.n	8002ee4 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 8002ee0:	2320      	movs	r3, #32
 8002ee2:	e004      	b.n	8002eee <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 8002ee4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002ee8:	fab3 f383 	clz	r3, r3
 8002eec:	b2db      	uxtb	r3, r3
 8002eee:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d105      	bne.n	8002f08 <HAL_ADC_ConfigChannel+0x330>
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	0e9b      	lsrs	r3, r3, #26
 8002f02:	f003 031f 	and.w	r3, r3, #31
 8002f06:	e014      	b.n	8002f32 <HAL_ADC_ConfigChannel+0x35a>
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f0e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002f10:	fa93 f3a3 	rbit	r3, r3
 8002f14:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8002f16:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002f18:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8002f1c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d101      	bne.n	8002f28 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 8002f24:	2320      	movs	r3, #32
 8002f26:	e004      	b.n	8002f32 <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8002f28:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002f2c:	fab3 f383 	clz	r3, r3
 8002f30:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002f32:	429a      	cmp	r2, r3
 8002f34:	d106      	bne.n	8002f44 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	2102      	movs	r1, #2
 8002f3e:	4618      	mov	r0, r3
 8002f40:	f7ff fb16 	bl	8002570 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	2103      	movs	r1, #3
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	f7ff fafa 	bl	8002544 <LL_ADC_GetOffsetChannel>
 8002f50:	4603      	mov	r3, r0
 8002f52:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d10a      	bne.n	8002f70 <HAL_ADC_ConfigChannel+0x398>
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	2103      	movs	r1, #3
 8002f60:	4618      	mov	r0, r3
 8002f62:	f7ff faef 	bl	8002544 <LL_ADC_GetOffsetChannel>
 8002f66:	4603      	mov	r3, r0
 8002f68:	0e9b      	lsrs	r3, r3, #26
 8002f6a:	f003 021f 	and.w	r2, r3, #31
 8002f6e:	e017      	b.n	8002fa0 <HAL_ADC_ConfigChannel+0x3c8>
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	2103      	movs	r1, #3
 8002f76:	4618      	mov	r0, r3
 8002f78:	f7ff fae4 	bl	8002544 <LL_ADC_GetOffsetChannel>
 8002f7c:	4603      	mov	r3, r0
 8002f7e:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f80:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002f82:	fa93 f3a3 	rbit	r3, r3
 8002f86:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8002f88:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002f8a:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8002f8c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d101      	bne.n	8002f96 <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 8002f92:	2320      	movs	r3, #32
 8002f94:	e003      	b.n	8002f9e <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 8002f96:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002f98:	fab3 f383 	clz	r3, r3
 8002f9c:	b2db      	uxtb	r3, r3
 8002f9e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d105      	bne.n	8002fb8 <HAL_ADC_ConfigChannel+0x3e0>
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	0e9b      	lsrs	r3, r3, #26
 8002fb2:	f003 031f 	and.w	r3, r3, #31
 8002fb6:	e011      	b.n	8002fdc <HAL_ADC_ConfigChannel+0x404>
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fbe:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002fc0:	fa93 f3a3 	rbit	r3, r3
 8002fc4:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8002fc6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002fc8:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8002fca:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d101      	bne.n	8002fd4 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8002fd0:	2320      	movs	r3, #32
 8002fd2:	e003      	b.n	8002fdc <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8002fd4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002fd6:	fab3 f383 	clz	r3, r3
 8002fda:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002fdc:	429a      	cmp	r2, r3
 8002fde:	d106      	bne.n	8002fee <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	2103      	movs	r1, #3
 8002fe8:	4618      	mov	r0, r3
 8002fea:	f7ff fac1 	bl	8002570 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	f7ff fbc8 	bl	8002788 <LL_ADC_IsEnabled>
 8002ff8:	4603      	mov	r3, r0
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	f040 8140 	bne.w	8003280 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6818      	ldr	r0, [r3, #0]
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	6819      	ldr	r1, [r3, #0]
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	68db      	ldr	r3, [r3, #12]
 800300c:	461a      	mov	r2, r3
 800300e:	f7ff fb35 	bl	800267c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	68db      	ldr	r3, [r3, #12]
 8003016:	4a8f      	ldr	r2, [pc, #572]	@ (8003254 <HAL_ADC_ConfigChannel+0x67c>)
 8003018:	4293      	cmp	r3, r2
 800301a:	f040 8131 	bne.w	8003280 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800302a:	2b00      	cmp	r3, #0
 800302c:	d10b      	bne.n	8003046 <HAL_ADC_ConfigChannel+0x46e>
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	0e9b      	lsrs	r3, r3, #26
 8003034:	3301      	adds	r3, #1
 8003036:	f003 031f 	and.w	r3, r3, #31
 800303a:	2b09      	cmp	r3, #9
 800303c:	bf94      	ite	ls
 800303e:	2301      	movls	r3, #1
 8003040:	2300      	movhi	r3, #0
 8003042:	b2db      	uxtb	r3, r3
 8003044:	e019      	b.n	800307a <HAL_ADC_ConfigChannel+0x4a2>
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800304c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800304e:	fa93 f3a3 	rbit	r3, r3
 8003052:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8003054:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003056:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8003058:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800305a:	2b00      	cmp	r3, #0
 800305c:	d101      	bne.n	8003062 <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 800305e:	2320      	movs	r3, #32
 8003060:	e003      	b.n	800306a <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8003062:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003064:	fab3 f383 	clz	r3, r3
 8003068:	b2db      	uxtb	r3, r3
 800306a:	3301      	adds	r3, #1
 800306c:	f003 031f 	and.w	r3, r3, #31
 8003070:	2b09      	cmp	r3, #9
 8003072:	bf94      	ite	ls
 8003074:	2301      	movls	r3, #1
 8003076:	2300      	movhi	r3, #0
 8003078:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800307a:	2b00      	cmp	r3, #0
 800307c:	d079      	beq.n	8003172 <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003086:	2b00      	cmp	r3, #0
 8003088:	d107      	bne.n	800309a <HAL_ADC_ConfigChannel+0x4c2>
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	0e9b      	lsrs	r3, r3, #26
 8003090:	3301      	adds	r3, #1
 8003092:	069b      	lsls	r3, r3, #26
 8003094:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003098:	e015      	b.n	80030c6 <HAL_ADC_ConfigChannel+0x4ee>
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030a0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80030a2:	fa93 f3a3 	rbit	r3, r3
 80030a6:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 80030a8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80030aa:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 80030ac:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d101      	bne.n	80030b6 <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 80030b2:	2320      	movs	r3, #32
 80030b4:	e003      	b.n	80030be <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 80030b6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80030b8:	fab3 f383 	clz	r3, r3
 80030bc:	b2db      	uxtb	r3, r3
 80030be:	3301      	adds	r3, #1
 80030c0:	069b      	lsls	r3, r3, #26
 80030c2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d109      	bne.n	80030e6 <HAL_ADC_ConfigChannel+0x50e>
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	0e9b      	lsrs	r3, r3, #26
 80030d8:	3301      	adds	r3, #1
 80030da:	f003 031f 	and.w	r3, r3, #31
 80030de:	2101      	movs	r1, #1
 80030e0:	fa01 f303 	lsl.w	r3, r1, r3
 80030e4:	e017      	b.n	8003116 <HAL_ADC_ConfigChannel+0x53e>
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030ec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80030ee:	fa93 f3a3 	rbit	r3, r3
 80030f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 80030f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80030f6:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 80030f8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d101      	bne.n	8003102 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 80030fe:	2320      	movs	r3, #32
 8003100:	e003      	b.n	800310a <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8003102:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003104:	fab3 f383 	clz	r3, r3
 8003108:	b2db      	uxtb	r3, r3
 800310a:	3301      	adds	r3, #1
 800310c:	f003 031f 	and.w	r3, r3, #31
 8003110:	2101      	movs	r1, #1
 8003112:	fa01 f303 	lsl.w	r3, r1, r3
 8003116:	ea42 0103 	orr.w	r1, r2, r3
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003122:	2b00      	cmp	r3, #0
 8003124:	d10a      	bne.n	800313c <HAL_ADC_ConfigChannel+0x564>
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	0e9b      	lsrs	r3, r3, #26
 800312c:	3301      	adds	r3, #1
 800312e:	f003 021f 	and.w	r2, r3, #31
 8003132:	4613      	mov	r3, r2
 8003134:	005b      	lsls	r3, r3, #1
 8003136:	4413      	add	r3, r2
 8003138:	051b      	lsls	r3, r3, #20
 800313a:	e018      	b.n	800316e <HAL_ADC_ConfigChannel+0x596>
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003142:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003144:	fa93 f3a3 	rbit	r3, r3
 8003148:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 800314a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800314c:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 800314e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003150:	2b00      	cmp	r3, #0
 8003152:	d101      	bne.n	8003158 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 8003154:	2320      	movs	r3, #32
 8003156:	e003      	b.n	8003160 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 8003158:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800315a:	fab3 f383 	clz	r3, r3
 800315e:	b2db      	uxtb	r3, r3
 8003160:	3301      	adds	r3, #1
 8003162:	f003 021f 	and.w	r2, r3, #31
 8003166:	4613      	mov	r3, r2
 8003168:	005b      	lsls	r3, r3, #1
 800316a:	4413      	add	r3, r2
 800316c:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800316e:	430b      	orrs	r3, r1
 8003170:	e081      	b.n	8003276 <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800317a:	2b00      	cmp	r3, #0
 800317c:	d107      	bne.n	800318e <HAL_ADC_ConfigChannel+0x5b6>
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	0e9b      	lsrs	r3, r3, #26
 8003184:	3301      	adds	r3, #1
 8003186:	069b      	lsls	r3, r3, #26
 8003188:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800318c:	e015      	b.n	80031ba <HAL_ADC_ConfigChannel+0x5e2>
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003194:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003196:	fa93 f3a3 	rbit	r3, r3
 800319a:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 800319c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800319e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 80031a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d101      	bne.n	80031aa <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 80031a6:	2320      	movs	r3, #32
 80031a8:	e003      	b.n	80031b2 <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 80031aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80031ac:	fab3 f383 	clz	r3, r3
 80031b0:	b2db      	uxtb	r3, r3
 80031b2:	3301      	adds	r3, #1
 80031b4:	069b      	lsls	r3, r3, #26
 80031b6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d109      	bne.n	80031da <HAL_ADC_ConfigChannel+0x602>
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	0e9b      	lsrs	r3, r3, #26
 80031cc:	3301      	adds	r3, #1
 80031ce:	f003 031f 	and.w	r3, r3, #31
 80031d2:	2101      	movs	r1, #1
 80031d4:	fa01 f303 	lsl.w	r3, r1, r3
 80031d8:	e017      	b.n	800320a <HAL_ADC_ConfigChannel+0x632>
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031e0:	69fb      	ldr	r3, [r7, #28]
 80031e2:	fa93 f3a3 	rbit	r3, r3
 80031e6:	61bb      	str	r3, [r7, #24]
  return result;
 80031e8:	69bb      	ldr	r3, [r7, #24]
 80031ea:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80031ec:	6a3b      	ldr	r3, [r7, #32]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d101      	bne.n	80031f6 <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 80031f2:	2320      	movs	r3, #32
 80031f4:	e003      	b.n	80031fe <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 80031f6:	6a3b      	ldr	r3, [r7, #32]
 80031f8:	fab3 f383 	clz	r3, r3
 80031fc:	b2db      	uxtb	r3, r3
 80031fe:	3301      	adds	r3, #1
 8003200:	f003 031f 	and.w	r3, r3, #31
 8003204:	2101      	movs	r1, #1
 8003206:	fa01 f303 	lsl.w	r3, r1, r3
 800320a:	ea42 0103 	orr.w	r1, r2, r3
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003216:	2b00      	cmp	r3, #0
 8003218:	d10d      	bne.n	8003236 <HAL_ADC_ConfigChannel+0x65e>
 800321a:	683b      	ldr	r3, [r7, #0]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	0e9b      	lsrs	r3, r3, #26
 8003220:	3301      	adds	r3, #1
 8003222:	f003 021f 	and.w	r2, r3, #31
 8003226:	4613      	mov	r3, r2
 8003228:	005b      	lsls	r3, r3, #1
 800322a:	4413      	add	r3, r2
 800322c:	3b1e      	subs	r3, #30
 800322e:	051b      	lsls	r3, r3, #20
 8003230:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003234:	e01e      	b.n	8003274 <HAL_ADC_ConfigChannel+0x69c>
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800323c:	693b      	ldr	r3, [r7, #16]
 800323e:	fa93 f3a3 	rbit	r3, r3
 8003242:	60fb      	str	r3, [r7, #12]
  return result;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8003248:	697b      	ldr	r3, [r7, #20]
 800324a:	2b00      	cmp	r3, #0
 800324c:	d104      	bne.n	8003258 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 800324e:	2320      	movs	r3, #32
 8003250:	e006      	b.n	8003260 <HAL_ADC_ConfigChannel+0x688>
 8003252:	bf00      	nop
 8003254:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8003258:	697b      	ldr	r3, [r7, #20]
 800325a:	fab3 f383 	clz	r3, r3
 800325e:	b2db      	uxtb	r3, r3
 8003260:	3301      	adds	r3, #1
 8003262:	f003 021f 	and.w	r2, r3, #31
 8003266:	4613      	mov	r3, r2
 8003268:	005b      	lsls	r3, r3, #1
 800326a:	4413      	add	r3, r2
 800326c:	3b1e      	subs	r3, #30
 800326e:	051b      	lsls	r3, r3, #20
 8003270:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003274:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8003276:	683a      	ldr	r2, [r7, #0]
 8003278:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800327a:	4619      	mov	r1, r3
 800327c:	f7ff f9d2 	bl	8002624 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	681a      	ldr	r2, [r3, #0]
 8003284:	4b3d      	ldr	r3, [pc, #244]	@ (800337c <HAL_ADC_ConfigChannel+0x7a4>)
 8003286:	4013      	ands	r3, r2
 8003288:	2b00      	cmp	r3, #0
 800328a:	d06c      	beq.n	8003366 <HAL_ADC_ConfigChannel+0x78e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800328c:	483c      	ldr	r0, [pc, #240]	@ (8003380 <HAL_ADC_ConfigChannel+0x7a8>)
 800328e:	f7ff f927 	bl	80024e0 <LL_ADC_GetCommonPathInternalCh>
 8003292:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	4a3a      	ldr	r2, [pc, #232]	@ (8003384 <HAL_ADC_ConfigChannel+0x7ac>)
 800329c:	4293      	cmp	r3, r2
 800329e:	d127      	bne.n	80032f0 <HAL_ADC_ConfigChannel+0x718>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80032a0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80032a4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d121      	bne.n	80032f0 <HAL_ADC_ConfigChannel+0x718>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	4a35      	ldr	r2, [pc, #212]	@ (8003388 <HAL_ADC_ConfigChannel+0x7b0>)
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d157      	bne.n	8003366 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80032b6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80032ba:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80032be:	4619      	mov	r1, r3
 80032c0:	482f      	ldr	r0, [pc, #188]	@ (8003380 <HAL_ADC_ConfigChannel+0x7a8>)
 80032c2:	f7ff f8fa 	bl	80024ba <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80032c6:	4b31      	ldr	r3, [pc, #196]	@ (800338c <HAL_ADC_ConfigChannel+0x7b4>)
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	099b      	lsrs	r3, r3, #6
 80032cc:	4a30      	ldr	r2, [pc, #192]	@ (8003390 <HAL_ADC_ConfigChannel+0x7b8>)
 80032ce:	fba2 2303 	umull	r2, r3, r2, r3
 80032d2:	099b      	lsrs	r3, r3, #6
 80032d4:	1c5a      	adds	r2, r3, #1
 80032d6:	4613      	mov	r3, r2
 80032d8:	005b      	lsls	r3, r3, #1
 80032da:	4413      	add	r3, r2
 80032dc:	009b      	lsls	r3, r3, #2
 80032de:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80032e0:	e002      	b.n	80032e8 <HAL_ADC_ConfigChannel+0x710>
          {
            wait_loop_index--;
 80032e2:	68bb      	ldr	r3, [r7, #8]
 80032e4:	3b01      	subs	r3, #1
 80032e6:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80032e8:	68bb      	ldr	r3, [r7, #8]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d1f9      	bne.n	80032e2 <HAL_ADC_ConfigChannel+0x70a>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80032ee:	e03a      	b.n	8003366 <HAL_ADC_ConfigChannel+0x78e>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4a27      	ldr	r2, [pc, #156]	@ (8003394 <HAL_ADC_ConfigChannel+0x7bc>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d113      	bne.n	8003322 <HAL_ADC_ConfigChannel+0x74a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80032fa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80032fe:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003302:	2b00      	cmp	r3, #0
 8003304:	d10d      	bne.n	8003322 <HAL_ADC_ConfigChannel+0x74a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	4a1f      	ldr	r2, [pc, #124]	@ (8003388 <HAL_ADC_ConfigChannel+0x7b0>)
 800330c:	4293      	cmp	r3, r2
 800330e:	d12a      	bne.n	8003366 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003310:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003314:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003318:	4619      	mov	r1, r3
 800331a:	4819      	ldr	r0, [pc, #100]	@ (8003380 <HAL_ADC_ConfigChannel+0x7a8>)
 800331c:	f7ff f8cd 	bl	80024ba <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003320:	e021      	b.n	8003366 <HAL_ADC_ConfigChannel+0x78e>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	4a1c      	ldr	r2, [pc, #112]	@ (8003398 <HAL_ADC_ConfigChannel+0x7c0>)
 8003328:	4293      	cmp	r3, r2
 800332a:	d11c      	bne.n	8003366 <HAL_ADC_ConfigChannel+0x78e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800332c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003330:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003334:	2b00      	cmp	r3, #0
 8003336:	d116      	bne.n	8003366 <HAL_ADC_ConfigChannel+0x78e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	4a12      	ldr	r2, [pc, #72]	@ (8003388 <HAL_ADC_ConfigChannel+0x7b0>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d111      	bne.n	8003366 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003342:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003346:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800334a:	4619      	mov	r1, r3
 800334c:	480c      	ldr	r0, [pc, #48]	@ (8003380 <HAL_ADC_ConfigChannel+0x7a8>)
 800334e:	f7ff f8b4 	bl	80024ba <LL_ADC_SetCommonPathInternalCh>
 8003352:	e008      	b.n	8003366 <HAL_ADC_ConfigChannel+0x78e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003358:	f043 0220 	orr.w	r2, r3, #32
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8003360:	2301      	movs	r3, #1
 8003362:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	2200      	movs	r2, #0
 800336a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 800336e:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8003372:	4618      	mov	r0, r3
 8003374:	37d8      	adds	r7, #216	@ 0xd8
 8003376:	46bd      	mov	sp, r7
 8003378:	bd80      	pop	{r7, pc}
 800337a:	bf00      	nop
 800337c:	80080000 	.word	0x80080000
 8003380:	50040300 	.word	0x50040300
 8003384:	c7520000 	.word	0xc7520000
 8003388:	50040000 	.word	0x50040000
 800338c:	20000000 	.word	0x20000000
 8003390:	053e2d63 	.word	0x053e2d63
 8003394:	cb840000 	.word	0xcb840000
 8003398:	80000001 	.word	0x80000001

0800339c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b084      	sub	sp, #16
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80033a4:	2300      	movs	r3, #0
 80033a6:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	4618      	mov	r0, r3
 80033ae:	f7ff f9eb 	bl	8002788 <LL_ADC_IsEnabled>
 80033b2:	4603      	mov	r3, r0
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d169      	bne.n	800348c <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	689a      	ldr	r2, [r3, #8]
 80033be:	4b36      	ldr	r3, [pc, #216]	@ (8003498 <ADC_Enable+0xfc>)
 80033c0:	4013      	ands	r3, r2
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d00d      	beq.n	80033e2 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033ca:	f043 0210 	orr.w	r2, r3, #16
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033d6:	f043 0201 	orr.w	r2, r3, #1
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 80033de:	2301      	movs	r3, #1
 80033e0:	e055      	b.n	800348e <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	4618      	mov	r0, r3
 80033e8:	f7ff f9ba 	bl	8002760 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80033ec:	482b      	ldr	r0, [pc, #172]	@ (800349c <ADC_Enable+0x100>)
 80033ee:	f7ff f877 	bl	80024e0 <LL_ADC_GetCommonPathInternalCh>
 80033f2:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80033f4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d013      	beq.n	8003424 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80033fc:	4b28      	ldr	r3, [pc, #160]	@ (80034a0 <ADC_Enable+0x104>)
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	099b      	lsrs	r3, r3, #6
 8003402:	4a28      	ldr	r2, [pc, #160]	@ (80034a4 <ADC_Enable+0x108>)
 8003404:	fba2 2303 	umull	r2, r3, r2, r3
 8003408:	099b      	lsrs	r3, r3, #6
 800340a:	1c5a      	adds	r2, r3, #1
 800340c:	4613      	mov	r3, r2
 800340e:	005b      	lsls	r3, r3, #1
 8003410:	4413      	add	r3, r2
 8003412:	009b      	lsls	r3, r3, #2
 8003414:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003416:	e002      	b.n	800341e <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8003418:	68bb      	ldr	r3, [r7, #8]
 800341a:	3b01      	subs	r3, #1
 800341c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800341e:	68bb      	ldr	r3, [r7, #8]
 8003420:	2b00      	cmp	r3, #0
 8003422:	d1f9      	bne.n	8003418 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003424:	f7fe ffe6 	bl	80023f4 <HAL_GetTick>
 8003428:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800342a:	e028      	b.n	800347e <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	4618      	mov	r0, r3
 8003432:	f7ff f9a9 	bl	8002788 <LL_ADC_IsEnabled>
 8003436:	4603      	mov	r3, r0
 8003438:	2b00      	cmp	r3, #0
 800343a:	d104      	bne.n	8003446 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	4618      	mov	r0, r3
 8003442:	f7ff f98d 	bl	8002760 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003446:	f7fe ffd5 	bl	80023f4 <HAL_GetTick>
 800344a:	4602      	mov	r2, r0
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	1ad3      	subs	r3, r2, r3
 8003450:	2b02      	cmp	r3, #2
 8003452:	d914      	bls.n	800347e <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f003 0301 	and.w	r3, r3, #1
 800345e:	2b01      	cmp	r3, #1
 8003460:	d00d      	beq.n	800347e <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003466:	f043 0210 	orr.w	r2, r3, #16
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003472:	f043 0201 	orr.w	r2, r3, #1
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 800347a:	2301      	movs	r3, #1
 800347c:	e007      	b.n	800348e <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f003 0301 	and.w	r3, r3, #1
 8003488:	2b01      	cmp	r3, #1
 800348a:	d1cf      	bne.n	800342c <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800348c:	2300      	movs	r3, #0
}
 800348e:	4618      	mov	r0, r3
 8003490:	3710      	adds	r7, #16
 8003492:	46bd      	mov	sp, r7
 8003494:	bd80      	pop	{r7, pc}
 8003496:	bf00      	nop
 8003498:	8000003f 	.word	0x8000003f
 800349c:	50040300 	.word	0x50040300
 80034a0:	20000000 	.word	0x20000000
 80034a4:	053e2d63 	.word	0x053e2d63

080034a8 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b084      	sub	sp, #16
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034b4:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034ba:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d14b      	bne.n	800355a <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034c6:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f003 0308 	and.w	r3, r3, #8
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d021      	beq.n	8003520 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	4618      	mov	r0, r3
 80034e2:	f7ff f860 	bl	80025a6 <LL_ADC_REG_IsTriggerSourceSWStart>
 80034e6:	4603      	mov	r3, r0
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d032      	beq.n	8003552 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	68db      	ldr	r3, [r3, #12]
 80034f2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d12b      	bne.n	8003552 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034fe:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	655a      	str	r2, [r3, #84]	@ 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800350a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800350e:	2b00      	cmp	r3, #0
 8003510:	d11f      	bne.n	8003552 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003516:	f043 0201 	orr.w	r2, r3, #1
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	655a      	str	r2, [r3, #84]	@ 0x54
 800351e:	e018      	b.n	8003552 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	68db      	ldr	r3, [r3, #12]
 8003526:	f003 0302 	and.w	r3, r3, #2
 800352a:	2b00      	cmp	r3, #0
 800352c:	d111      	bne.n	8003552 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003532:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	655a      	str	r2, [r3, #84]	@ 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800353e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003542:	2b00      	cmp	r3, #0
 8003544:	d105      	bne.n	8003552 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800354a:	f043 0201 	orr.w	r2, r3, #1
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003552:	68f8      	ldr	r0, [r7, #12]
 8003554:	f7fe f92e 	bl	80017b4 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003558:	e00e      	b.n	8003578 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800355e:	f003 0310 	and.w	r3, r3, #16
 8003562:	2b00      	cmp	r3, #0
 8003564:	d003      	beq.n	800356e <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8003566:	68f8      	ldr	r0, [r7, #12]
 8003568:	f7ff fb2c 	bl	8002bc4 <HAL_ADC_ErrorCallback>
}
 800356c:	e004      	b.n	8003578 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003572:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003574:	6878      	ldr	r0, [r7, #4]
 8003576:	4798      	blx	r3
}
 8003578:	bf00      	nop
 800357a:	3710      	adds	r7, #16
 800357c:	46bd      	mov	sp, r7
 800357e:	bd80      	pop	{r7, pc}

08003580 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b084      	sub	sp, #16
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800358c:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800358e:	68f8      	ldr	r0, [r7, #12]
 8003590:	f7ff fb0e 	bl	8002bb0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003594:	bf00      	nop
 8003596:	3710      	adds	r7, #16
 8003598:	46bd      	mov	sp, r7
 800359a:	bd80      	pop	{r7, pc}

0800359c <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	b084      	sub	sp, #16
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035a8:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035ae:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035ba:	f043 0204 	orr.w	r2, r3, #4
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80035c2:	68f8      	ldr	r0, [r7, #12]
 80035c4:	f7ff fafe 	bl	8002bc4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80035c8:	bf00      	nop
 80035ca:	3710      	adds	r7, #16
 80035cc:	46bd      	mov	sp, r7
 80035ce:	bd80      	pop	{r7, pc}

080035d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80035d0:	b480      	push	{r7}
 80035d2:	b085      	sub	sp, #20
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	f003 0307 	and.w	r3, r3, #7
 80035de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80035e0:	4b0c      	ldr	r3, [pc, #48]	@ (8003614 <__NVIC_SetPriorityGrouping+0x44>)
 80035e2:	68db      	ldr	r3, [r3, #12]
 80035e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80035e6:	68ba      	ldr	r2, [r7, #8]
 80035e8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80035ec:	4013      	ands	r3, r2
 80035ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80035f4:	68bb      	ldr	r3, [r7, #8]
 80035f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80035f8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80035fc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003600:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003602:	4a04      	ldr	r2, [pc, #16]	@ (8003614 <__NVIC_SetPriorityGrouping+0x44>)
 8003604:	68bb      	ldr	r3, [r7, #8]
 8003606:	60d3      	str	r3, [r2, #12]
}
 8003608:	bf00      	nop
 800360a:	3714      	adds	r7, #20
 800360c:	46bd      	mov	sp, r7
 800360e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003612:	4770      	bx	lr
 8003614:	e000ed00 	.word	0xe000ed00

08003618 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003618:	b480      	push	{r7}
 800361a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800361c:	4b04      	ldr	r3, [pc, #16]	@ (8003630 <__NVIC_GetPriorityGrouping+0x18>)
 800361e:	68db      	ldr	r3, [r3, #12]
 8003620:	0a1b      	lsrs	r3, r3, #8
 8003622:	f003 0307 	and.w	r3, r3, #7
}
 8003626:	4618      	mov	r0, r3
 8003628:	46bd      	mov	sp, r7
 800362a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362e:	4770      	bx	lr
 8003630:	e000ed00 	.word	0xe000ed00

08003634 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003634:	b480      	push	{r7}
 8003636:	b083      	sub	sp, #12
 8003638:	af00      	add	r7, sp, #0
 800363a:	4603      	mov	r3, r0
 800363c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800363e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003642:	2b00      	cmp	r3, #0
 8003644:	db0b      	blt.n	800365e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003646:	79fb      	ldrb	r3, [r7, #7]
 8003648:	f003 021f 	and.w	r2, r3, #31
 800364c:	4907      	ldr	r1, [pc, #28]	@ (800366c <__NVIC_EnableIRQ+0x38>)
 800364e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003652:	095b      	lsrs	r3, r3, #5
 8003654:	2001      	movs	r0, #1
 8003656:	fa00 f202 	lsl.w	r2, r0, r2
 800365a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800365e:	bf00      	nop
 8003660:	370c      	adds	r7, #12
 8003662:	46bd      	mov	sp, r7
 8003664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003668:	4770      	bx	lr
 800366a:	bf00      	nop
 800366c:	e000e100 	.word	0xe000e100

08003670 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003670:	b480      	push	{r7}
 8003672:	b083      	sub	sp, #12
 8003674:	af00      	add	r7, sp, #0
 8003676:	4603      	mov	r3, r0
 8003678:	6039      	str	r1, [r7, #0]
 800367a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800367c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003680:	2b00      	cmp	r3, #0
 8003682:	db0a      	blt.n	800369a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	b2da      	uxtb	r2, r3
 8003688:	490c      	ldr	r1, [pc, #48]	@ (80036bc <__NVIC_SetPriority+0x4c>)
 800368a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800368e:	0112      	lsls	r2, r2, #4
 8003690:	b2d2      	uxtb	r2, r2
 8003692:	440b      	add	r3, r1
 8003694:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003698:	e00a      	b.n	80036b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	b2da      	uxtb	r2, r3
 800369e:	4908      	ldr	r1, [pc, #32]	@ (80036c0 <__NVIC_SetPriority+0x50>)
 80036a0:	79fb      	ldrb	r3, [r7, #7]
 80036a2:	f003 030f 	and.w	r3, r3, #15
 80036a6:	3b04      	subs	r3, #4
 80036a8:	0112      	lsls	r2, r2, #4
 80036aa:	b2d2      	uxtb	r2, r2
 80036ac:	440b      	add	r3, r1
 80036ae:	761a      	strb	r2, [r3, #24]
}
 80036b0:	bf00      	nop
 80036b2:	370c      	adds	r7, #12
 80036b4:	46bd      	mov	sp, r7
 80036b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ba:	4770      	bx	lr
 80036bc:	e000e100 	.word	0xe000e100
 80036c0:	e000ed00 	.word	0xe000ed00

080036c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80036c4:	b480      	push	{r7}
 80036c6:	b089      	sub	sp, #36	@ 0x24
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	60f8      	str	r0, [r7, #12]
 80036cc:	60b9      	str	r1, [r7, #8]
 80036ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	f003 0307 	and.w	r3, r3, #7
 80036d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80036d8:	69fb      	ldr	r3, [r7, #28]
 80036da:	f1c3 0307 	rsb	r3, r3, #7
 80036de:	2b04      	cmp	r3, #4
 80036e0:	bf28      	it	cs
 80036e2:	2304      	movcs	r3, #4
 80036e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80036e6:	69fb      	ldr	r3, [r7, #28]
 80036e8:	3304      	adds	r3, #4
 80036ea:	2b06      	cmp	r3, #6
 80036ec:	d902      	bls.n	80036f4 <NVIC_EncodePriority+0x30>
 80036ee:	69fb      	ldr	r3, [r7, #28]
 80036f0:	3b03      	subs	r3, #3
 80036f2:	e000      	b.n	80036f6 <NVIC_EncodePriority+0x32>
 80036f4:	2300      	movs	r3, #0
 80036f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80036f8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80036fc:	69bb      	ldr	r3, [r7, #24]
 80036fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003702:	43da      	mvns	r2, r3
 8003704:	68bb      	ldr	r3, [r7, #8]
 8003706:	401a      	ands	r2, r3
 8003708:	697b      	ldr	r3, [r7, #20]
 800370a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800370c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003710:	697b      	ldr	r3, [r7, #20]
 8003712:	fa01 f303 	lsl.w	r3, r1, r3
 8003716:	43d9      	mvns	r1, r3
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800371c:	4313      	orrs	r3, r2
         );
}
 800371e:	4618      	mov	r0, r3
 8003720:	3724      	adds	r7, #36	@ 0x24
 8003722:	46bd      	mov	sp, r7
 8003724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003728:	4770      	bx	lr
	...

0800372c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b082      	sub	sp, #8
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	3b01      	subs	r3, #1
 8003738:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800373c:	d301      	bcc.n	8003742 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800373e:	2301      	movs	r3, #1
 8003740:	e00f      	b.n	8003762 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003742:	4a0a      	ldr	r2, [pc, #40]	@ (800376c <SysTick_Config+0x40>)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	3b01      	subs	r3, #1
 8003748:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800374a:	210f      	movs	r1, #15
 800374c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003750:	f7ff ff8e 	bl	8003670 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003754:	4b05      	ldr	r3, [pc, #20]	@ (800376c <SysTick_Config+0x40>)
 8003756:	2200      	movs	r2, #0
 8003758:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800375a:	4b04      	ldr	r3, [pc, #16]	@ (800376c <SysTick_Config+0x40>)
 800375c:	2207      	movs	r2, #7
 800375e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003760:	2300      	movs	r3, #0
}
 8003762:	4618      	mov	r0, r3
 8003764:	3708      	adds	r7, #8
 8003766:	46bd      	mov	sp, r7
 8003768:	bd80      	pop	{r7, pc}
 800376a:	bf00      	nop
 800376c:	e000e010 	.word	0xe000e010

08003770 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	b082      	sub	sp, #8
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003778:	6878      	ldr	r0, [r7, #4]
 800377a:	f7ff ff29 	bl	80035d0 <__NVIC_SetPriorityGrouping>
}
 800377e:	bf00      	nop
 8003780:	3708      	adds	r7, #8
 8003782:	46bd      	mov	sp, r7
 8003784:	bd80      	pop	{r7, pc}

08003786 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003786:	b580      	push	{r7, lr}
 8003788:	b086      	sub	sp, #24
 800378a:	af00      	add	r7, sp, #0
 800378c:	4603      	mov	r3, r0
 800378e:	60b9      	str	r1, [r7, #8]
 8003790:	607a      	str	r2, [r7, #4]
 8003792:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003794:	2300      	movs	r3, #0
 8003796:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003798:	f7ff ff3e 	bl	8003618 <__NVIC_GetPriorityGrouping>
 800379c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800379e:	687a      	ldr	r2, [r7, #4]
 80037a0:	68b9      	ldr	r1, [r7, #8]
 80037a2:	6978      	ldr	r0, [r7, #20]
 80037a4:	f7ff ff8e 	bl	80036c4 <NVIC_EncodePriority>
 80037a8:	4602      	mov	r2, r0
 80037aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80037ae:	4611      	mov	r1, r2
 80037b0:	4618      	mov	r0, r3
 80037b2:	f7ff ff5d 	bl	8003670 <__NVIC_SetPriority>
}
 80037b6:	bf00      	nop
 80037b8:	3718      	adds	r7, #24
 80037ba:	46bd      	mov	sp, r7
 80037bc:	bd80      	pop	{r7, pc}

080037be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80037be:	b580      	push	{r7, lr}
 80037c0:	b082      	sub	sp, #8
 80037c2:	af00      	add	r7, sp, #0
 80037c4:	4603      	mov	r3, r0
 80037c6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80037c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037cc:	4618      	mov	r0, r3
 80037ce:	f7ff ff31 	bl	8003634 <__NVIC_EnableIRQ>
}
 80037d2:	bf00      	nop
 80037d4:	3708      	adds	r7, #8
 80037d6:	46bd      	mov	sp, r7
 80037d8:	bd80      	pop	{r7, pc}

080037da <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80037da:	b580      	push	{r7, lr}
 80037dc:	b082      	sub	sp, #8
 80037de:	af00      	add	r7, sp, #0
 80037e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80037e2:	6878      	ldr	r0, [r7, #4]
 80037e4:	f7ff ffa2 	bl	800372c <SysTick_Config>
 80037e8:	4603      	mov	r3, r0
}
 80037ea:	4618      	mov	r0, r3
 80037ec:	3708      	adds	r7, #8
 80037ee:	46bd      	mov	sp, r7
 80037f0:	bd80      	pop	{r7, pc}
	...

080037f4 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80037f4:	b480      	push	{r7}
 80037f6:	b085      	sub	sp, #20
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d101      	bne.n	8003806 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003802:	2301      	movs	r3, #1
 8003804:	e098      	b.n	8003938 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	461a      	mov	r2, r3
 800380c:	4b4d      	ldr	r3, [pc, #308]	@ (8003944 <HAL_DMA_Init+0x150>)
 800380e:	429a      	cmp	r2, r3
 8003810:	d80f      	bhi.n	8003832 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	461a      	mov	r2, r3
 8003818:	4b4b      	ldr	r3, [pc, #300]	@ (8003948 <HAL_DMA_Init+0x154>)
 800381a:	4413      	add	r3, r2
 800381c:	4a4b      	ldr	r2, [pc, #300]	@ (800394c <HAL_DMA_Init+0x158>)
 800381e:	fba2 2303 	umull	r2, r3, r2, r3
 8003822:	091b      	lsrs	r3, r3, #4
 8003824:	009a      	lsls	r2, r3, #2
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	4a48      	ldr	r2, [pc, #288]	@ (8003950 <HAL_DMA_Init+0x15c>)
 800382e:	641a      	str	r2, [r3, #64]	@ 0x40
 8003830:	e00e      	b.n	8003850 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	461a      	mov	r2, r3
 8003838:	4b46      	ldr	r3, [pc, #280]	@ (8003954 <HAL_DMA_Init+0x160>)
 800383a:	4413      	add	r3, r2
 800383c:	4a43      	ldr	r2, [pc, #268]	@ (800394c <HAL_DMA_Init+0x158>)
 800383e:	fba2 2303 	umull	r2, r3, r2, r3
 8003842:	091b      	lsrs	r3, r3, #4
 8003844:	009a      	lsls	r2, r3, #2
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	4a42      	ldr	r2, [pc, #264]	@ (8003958 <HAL_DMA_Init+0x164>)
 800384e:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2202      	movs	r2, #2
 8003854:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8003866:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800386a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003874:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	691b      	ldr	r3, [r3, #16]
 800387a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003880:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	699b      	ldr	r3, [r3, #24]
 8003886:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800388c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6a1b      	ldr	r3, [r3, #32]
 8003892:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003894:	68fa      	ldr	r2, [r7, #12]
 8003896:	4313      	orrs	r3, r2
 8003898:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	68fa      	ldr	r2, [r7, #12]
 80038a0:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	689b      	ldr	r3, [r3, #8]
 80038a6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80038aa:	d039      	beq.n	8003920 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038b0:	4a27      	ldr	r2, [pc, #156]	@ (8003950 <HAL_DMA_Init+0x15c>)
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d11a      	bne.n	80038ec <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80038b6:	4b29      	ldr	r3, [pc, #164]	@ (800395c <HAL_DMA_Init+0x168>)
 80038b8:	681a      	ldr	r2, [r3, #0]
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038be:	f003 031c 	and.w	r3, r3, #28
 80038c2:	210f      	movs	r1, #15
 80038c4:	fa01 f303 	lsl.w	r3, r1, r3
 80038c8:	43db      	mvns	r3, r3
 80038ca:	4924      	ldr	r1, [pc, #144]	@ (800395c <HAL_DMA_Init+0x168>)
 80038cc:	4013      	ands	r3, r2
 80038ce:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80038d0:	4b22      	ldr	r3, [pc, #136]	@ (800395c <HAL_DMA_Init+0x168>)
 80038d2:	681a      	ldr	r2, [r3, #0]
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6859      	ldr	r1, [r3, #4]
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038dc:	f003 031c 	and.w	r3, r3, #28
 80038e0:	fa01 f303 	lsl.w	r3, r1, r3
 80038e4:	491d      	ldr	r1, [pc, #116]	@ (800395c <HAL_DMA_Init+0x168>)
 80038e6:	4313      	orrs	r3, r2
 80038e8:	600b      	str	r3, [r1, #0]
 80038ea:	e019      	b.n	8003920 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80038ec:	4b1c      	ldr	r3, [pc, #112]	@ (8003960 <HAL_DMA_Init+0x16c>)
 80038ee:	681a      	ldr	r2, [r3, #0]
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038f4:	f003 031c 	and.w	r3, r3, #28
 80038f8:	210f      	movs	r1, #15
 80038fa:	fa01 f303 	lsl.w	r3, r1, r3
 80038fe:	43db      	mvns	r3, r3
 8003900:	4917      	ldr	r1, [pc, #92]	@ (8003960 <HAL_DMA_Init+0x16c>)
 8003902:	4013      	ands	r3, r2
 8003904:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003906:	4b16      	ldr	r3, [pc, #88]	@ (8003960 <HAL_DMA_Init+0x16c>)
 8003908:	681a      	ldr	r2, [r3, #0]
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6859      	ldr	r1, [r3, #4]
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003912:	f003 031c 	and.w	r3, r3, #28
 8003916:	fa01 f303 	lsl.w	r3, r1, r3
 800391a:	4911      	ldr	r1, [pc, #68]	@ (8003960 <HAL_DMA_Init+0x16c>)
 800391c:	4313      	orrs	r3, r2
 800391e:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2200      	movs	r2, #0
 8003924:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	2201      	movs	r2, #1
 800392a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	2200      	movs	r2, #0
 8003932:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8003936:	2300      	movs	r3, #0
}
 8003938:	4618      	mov	r0, r3
 800393a:	3714      	adds	r7, #20
 800393c:	46bd      	mov	sp, r7
 800393e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003942:	4770      	bx	lr
 8003944:	40020407 	.word	0x40020407
 8003948:	bffdfff8 	.word	0xbffdfff8
 800394c:	cccccccd 	.word	0xcccccccd
 8003950:	40020000 	.word	0x40020000
 8003954:	bffdfbf8 	.word	0xbffdfbf8
 8003958:	40020400 	.word	0x40020400
 800395c:	400200a8 	.word	0x400200a8
 8003960:	400204a8 	.word	0x400204a8

08003964 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	b086      	sub	sp, #24
 8003968:	af00      	add	r7, sp, #0
 800396a:	60f8      	str	r0, [r7, #12]
 800396c:	60b9      	str	r1, [r7, #8]
 800396e:	607a      	str	r2, [r7, #4]
 8003970:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003972:	2300      	movs	r3, #0
 8003974:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800397c:	2b01      	cmp	r3, #1
 800397e:	d101      	bne.n	8003984 <HAL_DMA_Start_IT+0x20>
 8003980:	2302      	movs	r3, #2
 8003982:	e04b      	b.n	8003a1c <HAL_DMA_Start_IT+0xb8>
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	2201      	movs	r2, #1
 8003988:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003992:	b2db      	uxtb	r3, r3
 8003994:	2b01      	cmp	r3, #1
 8003996:	d13a      	bne.n	8003a0e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	2202      	movs	r2, #2
 800399c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	2200      	movs	r2, #0
 80039a4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	681a      	ldr	r2, [r3, #0]
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f022 0201 	bic.w	r2, r2, #1
 80039b4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	687a      	ldr	r2, [r7, #4]
 80039ba:	68b9      	ldr	r1, [r7, #8]
 80039bc:	68f8      	ldr	r0, [r7, #12]
 80039be:	f000 f8e0 	bl	8003b82 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d008      	beq.n	80039dc <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	681a      	ldr	r2, [r3, #0]
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f042 020e 	orr.w	r2, r2, #14
 80039d8:	601a      	str	r2, [r3, #0]
 80039da:	e00f      	b.n	80039fc <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	681a      	ldr	r2, [r3, #0]
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f022 0204 	bic.w	r2, r2, #4
 80039ea:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	681a      	ldr	r2, [r3, #0]
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f042 020a 	orr.w	r2, r2, #10
 80039fa:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	681a      	ldr	r2, [r3, #0]
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f042 0201 	orr.w	r2, r2, #1
 8003a0a:	601a      	str	r2, [r3, #0]
 8003a0c:	e005      	b.n	8003a1a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	2200      	movs	r2, #0
 8003a12:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003a16:	2302      	movs	r3, #2
 8003a18:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003a1a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	3718      	adds	r7, #24
 8003a20:	46bd      	mov	sp, r7
 8003a22:	bd80      	pop	{r7, pc}

08003a24 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b084      	sub	sp, #16
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a40:	f003 031c 	and.w	r3, r3, #28
 8003a44:	2204      	movs	r2, #4
 8003a46:	409a      	lsls	r2, r3
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	4013      	ands	r3, r2
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d026      	beq.n	8003a9e <HAL_DMA_IRQHandler+0x7a>
 8003a50:	68bb      	ldr	r3, [r7, #8]
 8003a52:	f003 0304 	and.w	r3, r3, #4
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d021      	beq.n	8003a9e <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f003 0320 	and.w	r3, r3, #32
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d107      	bne.n	8003a78 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	681a      	ldr	r2, [r3, #0]
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f022 0204 	bic.w	r2, r2, #4
 8003a76:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a7c:	f003 021c 	and.w	r2, r3, #28
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a84:	2104      	movs	r1, #4
 8003a86:	fa01 f202 	lsl.w	r2, r1, r2
 8003a8a:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d071      	beq.n	8003b78 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a98:	6878      	ldr	r0, [r7, #4]
 8003a9a:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003a9c:	e06c      	b.n	8003b78 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003aa2:	f003 031c 	and.w	r3, r3, #28
 8003aa6:	2202      	movs	r2, #2
 8003aa8:	409a      	lsls	r2, r3
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	4013      	ands	r3, r2
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d02e      	beq.n	8003b10 <HAL_DMA_IRQHandler+0xec>
 8003ab2:	68bb      	ldr	r3, [r7, #8]
 8003ab4:	f003 0302 	and.w	r3, r3, #2
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d029      	beq.n	8003b10 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f003 0320 	and.w	r3, r3, #32
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d10b      	bne.n	8003ae2 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	681a      	ldr	r2, [r3, #0]
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f022 020a 	bic.w	r2, r2, #10
 8003ad8:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	2201      	movs	r2, #1
 8003ade:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ae6:	f003 021c 	and.w	r2, r3, #28
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003aee:	2102      	movs	r1, #2
 8003af0:	fa01 f202 	lsl.w	r2, r1, r2
 8003af4:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	2200      	movs	r2, #0
 8003afa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d038      	beq.n	8003b78 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b0a:	6878      	ldr	r0, [r7, #4]
 8003b0c:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003b0e:	e033      	b.n	8003b78 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b14:	f003 031c 	and.w	r3, r3, #28
 8003b18:	2208      	movs	r2, #8
 8003b1a:	409a      	lsls	r2, r3
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	4013      	ands	r3, r2
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d02a      	beq.n	8003b7a <HAL_DMA_IRQHandler+0x156>
 8003b24:	68bb      	ldr	r3, [r7, #8]
 8003b26:	f003 0308 	and.w	r3, r3, #8
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d025      	beq.n	8003b7a <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	681a      	ldr	r2, [r3, #0]
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f022 020e 	bic.w	r2, r2, #14
 8003b3c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b42:	f003 021c 	and.w	r2, r3, #28
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b4a:	2101      	movs	r1, #1
 8003b4c:	fa01 f202 	lsl.w	r2, r1, r2
 8003b50:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	2201      	movs	r2, #1
 8003b56:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2201      	movs	r2, #1
 8003b5c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2200      	movs	r2, #0
 8003b64:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d004      	beq.n	8003b7a <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b74:	6878      	ldr	r0, [r7, #4]
 8003b76:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003b78:	bf00      	nop
 8003b7a:	bf00      	nop
}
 8003b7c:	3710      	adds	r7, #16
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	bd80      	pop	{r7, pc}

08003b82 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003b82:	b480      	push	{r7}
 8003b84:	b085      	sub	sp, #20
 8003b86:	af00      	add	r7, sp, #0
 8003b88:	60f8      	str	r0, [r7, #12]
 8003b8a:	60b9      	str	r1, [r7, #8]
 8003b8c:	607a      	str	r2, [r7, #4]
 8003b8e:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b94:	f003 021c 	and.w	r2, r3, #28
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b9c:	2101      	movs	r1, #1
 8003b9e:	fa01 f202 	lsl.w	r2, r1, r2
 8003ba2:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	683a      	ldr	r2, [r7, #0]
 8003baa:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	689b      	ldr	r3, [r3, #8]
 8003bb0:	2b10      	cmp	r3, #16
 8003bb2:	d108      	bne.n	8003bc6 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	687a      	ldr	r2, [r7, #4]
 8003bba:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	68ba      	ldr	r2, [r7, #8]
 8003bc2:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003bc4:	e007      	b.n	8003bd6 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	68ba      	ldr	r2, [r7, #8]
 8003bcc:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	687a      	ldr	r2, [r7, #4]
 8003bd4:	60da      	str	r2, [r3, #12]
}
 8003bd6:	bf00      	nop
 8003bd8:	3714      	adds	r7, #20
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be0:	4770      	bx	lr
	...

08003be4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003be4:	b480      	push	{r7}
 8003be6:	b087      	sub	sp, #28
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
 8003bec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003bee:	2300      	movs	r3, #0
 8003bf0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003bf2:	e148      	b.n	8003e86 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	681a      	ldr	r2, [r3, #0]
 8003bf8:	2101      	movs	r1, #1
 8003bfa:	697b      	ldr	r3, [r7, #20]
 8003bfc:	fa01 f303 	lsl.w	r3, r1, r3
 8003c00:	4013      	ands	r3, r2
 8003c02:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	f000 813a 	beq.w	8003e80 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	685b      	ldr	r3, [r3, #4]
 8003c10:	f003 0303 	and.w	r3, r3, #3
 8003c14:	2b01      	cmp	r3, #1
 8003c16:	d005      	beq.n	8003c24 <HAL_GPIO_Init+0x40>
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	685b      	ldr	r3, [r3, #4]
 8003c1c:	f003 0303 	and.w	r3, r3, #3
 8003c20:	2b02      	cmp	r3, #2
 8003c22:	d130      	bne.n	8003c86 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	689b      	ldr	r3, [r3, #8]
 8003c28:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003c2a:	697b      	ldr	r3, [r7, #20]
 8003c2c:	005b      	lsls	r3, r3, #1
 8003c2e:	2203      	movs	r2, #3
 8003c30:	fa02 f303 	lsl.w	r3, r2, r3
 8003c34:	43db      	mvns	r3, r3
 8003c36:	693a      	ldr	r2, [r7, #16]
 8003c38:	4013      	ands	r3, r2
 8003c3a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	68da      	ldr	r2, [r3, #12]
 8003c40:	697b      	ldr	r3, [r7, #20]
 8003c42:	005b      	lsls	r3, r3, #1
 8003c44:	fa02 f303 	lsl.w	r3, r2, r3
 8003c48:	693a      	ldr	r2, [r7, #16]
 8003c4a:	4313      	orrs	r3, r2
 8003c4c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	693a      	ldr	r2, [r7, #16]
 8003c52:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	685b      	ldr	r3, [r3, #4]
 8003c58:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003c5a:	2201      	movs	r2, #1
 8003c5c:	697b      	ldr	r3, [r7, #20]
 8003c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c62:	43db      	mvns	r3, r3
 8003c64:	693a      	ldr	r2, [r7, #16]
 8003c66:	4013      	ands	r3, r2
 8003c68:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	685b      	ldr	r3, [r3, #4]
 8003c6e:	091b      	lsrs	r3, r3, #4
 8003c70:	f003 0201 	and.w	r2, r3, #1
 8003c74:	697b      	ldr	r3, [r7, #20]
 8003c76:	fa02 f303 	lsl.w	r3, r2, r3
 8003c7a:	693a      	ldr	r2, [r7, #16]
 8003c7c:	4313      	orrs	r3, r2
 8003c7e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	693a      	ldr	r2, [r7, #16]
 8003c84:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	685b      	ldr	r3, [r3, #4]
 8003c8a:	f003 0303 	and.w	r3, r3, #3
 8003c8e:	2b03      	cmp	r3, #3
 8003c90:	d017      	beq.n	8003cc2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	68db      	ldr	r3, [r3, #12]
 8003c96:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003c98:	697b      	ldr	r3, [r7, #20]
 8003c9a:	005b      	lsls	r3, r3, #1
 8003c9c:	2203      	movs	r2, #3
 8003c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8003ca2:	43db      	mvns	r3, r3
 8003ca4:	693a      	ldr	r2, [r7, #16]
 8003ca6:	4013      	ands	r3, r2
 8003ca8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	689a      	ldr	r2, [r3, #8]
 8003cae:	697b      	ldr	r3, [r7, #20]
 8003cb0:	005b      	lsls	r3, r3, #1
 8003cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8003cb6:	693a      	ldr	r2, [r7, #16]
 8003cb8:	4313      	orrs	r3, r2
 8003cba:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	693a      	ldr	r2, [r7, #16]
 8003cc0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003cc2:	683b      	ldr	r3, [r7, #0]
 8003cc4:	685b      	ldr	r3, [r3, #4]
 8003cc6:	f003 0303 	and.w	r3, r3, #3
 8003cca:	2b02      	cmp	r3, #2
 8003ccc:	d123      	bne.n	8003d16 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003cce:	697b      	ldr	r3, [r7, #20]
 8003cd0:	08da      	lsrs	r2, r3, #3
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	3208      	adds	r2, #8
 8003cd6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003cda:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003cdc:	697b      	ldr	r3, [r7, #20]
 8003cde:	f003 0307 	and.w	r3, r3, #7
 8003ce2:	009b      	lsls	r3, r3, #2
 8003ce4:	220f      	movs	r2, #15
 8003ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8003cea:	43db      	mvns	r3, r3
 8003cec:	693a      	ldr	r2, [r7, #16]
 8003cee:	4013      	ands	r3, r2
 8003cf0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	691a      	ldr	r2, [r3, #16]
 8003cf6:	697b      	ldr	r3, [r7, #20]
 8003cf8:	f003 0307 	and.w	r3, r3, #7
 8003cfc:	009b      	lsls	r3, r3, #2
 8003cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8003d02:	693a      	ldr	r2, [r7, #16]
 8003d04:	4313      	orrs	r3, r2
 8003d06:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003d08:	697b      	ldr	r3, [r7, #20]
 8003d0a:	08da      	lsrs	r2, r3, #3
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	3208      	adds	r2, #8
 8003d10:	6939      	ldr	r1, [r7, #16]
 8003d12:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003d1c:	697b      	ldr	r3, [r7, #20]
 8003d1e:	005b      	lsls	r3, r3, #1
 8003d20:	2203      	movs	r2, #3
 8003d22:	fa02 f303 	lsl.w	r3, r2, r3
 8003d26:	43db      	mvns	r3, r3
 8003d28:	693a      	ldr	r2, [r7, #16]
 8003d2a:	4013      	ands	r3, r2
 8003d2c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003d2e:	683b      	ldr	r3, [r7, #0]
 8003d30:	685b      	ldr	r3, [r3, #4]
 8003d32:	f003 0203 	and.w	r2, r3, #3
 8003d36:	697b      	ldr	r3, [r7, #20]
 8003d38:	005b      	lsls	r3, r3, #1
 8003d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d3e:	693a      	ldr	r2, [r7, #16]
 8003d40:	4313      	orrs	r3, r2
 8003d42:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	693a      	ldr	r2, [r7, #16]
 8003d48:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003d4a:	683b      	ldr	r3, [r7, #0]
 8003d4c:	685b      	ldr	r3, [r3, #4]
 8003d4e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	f000 8094 	beq.w	8003e80 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d58:	4b52      	ldr	r3, [pc, #328]	@ (8003ea4 <HAL_GPIO_Init+0x2c0>)
 8003d5a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d5c:	4a51      	ldr	r2, [pc, #324]	@ (8003ea4 <HAL_GPIO_Init+0x2c0>)
 8003d5e:	f043 0301 	orr.w	r3, r3, #1
 8003d62:	6613      	str	r3, [r2, #96]	@ 0x60
 8003d64:	4b4f      	ldr	r3, [pc, #316]	@ (8003ea4 <HAL_GPIO_Init+0x2c0>)
 8003d66:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d68:	f003 0301 	and.w	r3, r3, #1
 8003d6c:	60bb      	str	r3, [r7, #8]
 8003d6e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003d70:	4a4d      	ldr	r2, [pc, #308]	@ (8003ea8 <HAL_GPIO_Init+0x2c4>)
 8003d72:	697b      	ldr	r3, [r7, #20]
 8003d74:	089b      	lsrs	r3, r3, #2
 8003d76:	3302      	adds	r3, #2
 8003d78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d7c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003d7e:	697b      	ldr	r3, [r7, #20]
 8003d80:	f003 0303 	and.w	r3, r3, #3
 8003d84:	009b      	lsls	r3, r3, #2
 8003d86:	220f      	movs	r2, #15
 8003d88:	fa02 f303 	lsl.w	r3, r2, r3
 8003d8c:	43db      	mvns	r3, r3
 8003d8e:	693a      	ldr	r2, [r7, #16]
 8003d90:	4013      	ands	r3, r2
 8003d92:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003d9a:	d00d      	beq.n	8003db8 <HAL_GPIO_Init+0x1d4>
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	4a43      	ldr	r2, [pc, #268]	@ (8003eac <HAL_GPIO_Init+0x2c8>)
 8003da0:	4293      	cmp	r3, r2
 8003da2:	d007      	beq.n	8003db4 <HAL_GPIO_Init+0x1d0>
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	4a42      	ldr	r2, [pc, #264]	@ (8003eb0 <HAL_GPIO_Init+0x2cc>)
 8003da8:	4293      	cmp	r3, r2
 8003daa:	d101      	bne.n	8003db0 <HAL_GPIO_Init+0x1cc>
 8003dac:	2302      	movs	r3, #2
 8003dae:	e004      	b.n	8003dba <HAL_GPIO_Init+0x1d6>
 8003db0:	2307      	movs	r3, #7
 8003db2:	e002      	b.n	8003dba <HAL_GPIO_Init+0x1d6>
 8003db4:	2301      	movs	r3, #1
 8003db6:	e000      	b.n	8003dba <HAL_GPIO_Init+0x1d6>
 8003db8:	2300      	movs	r3, #0
 8003dba:	697a      	ldr	r2, [r7, #20]
 8003dbc:	f002 0203 	and.w	r2, r2, #3
 8003dc0:	0092      	lsls	r2, r2, #2
 8003dc2:	4093      	lsls	r3, r2
 8003dc4:	693a      	ldr	r2, [r7, #16]
 8003dc6:	4313      	orrs	r3, r2
 8003dc8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003dca:	4937      	ldr	r1, [pc, #220]	@ (8003ea8 <HAL_GPIO_Init+0x2c4>)
 8003dcc:	697b      	ldr	r3, [r7, #20]
 8003dce:	089b      	lsrs	r3, r3, #2
 8003dd0:	3302      	adds	r3, #2
 8003dd2:	693a      	ldr	r2, [r7, #16]
 8003dd4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003dd8:	4b36      	ldr	r3, [pc, #216]	@ (8003eb4 <HAL_GPIO_Init+0x2d0>)
 8003dda:	689b      	ldr	r3, [r3, #8]
 8003ddc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	43db      	mvns	r3, r3
 8003de2:	693a      	ldr	r2, [r7, #16]
 8003de4:	4013      	ands	r3, r2
 8003de6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	685b      	ldr	r3, [r3, #4]
 8003dec:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d003      	beq.n	8003dfc <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8003df4:	693a      	ldr	r2, [r7, #16]
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	4313      	orrs	r3, r2
 8003dfa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003dfc:	4a2d      	ldr	r2, [pc, #180]	@ (8003eb4 <HAL_GPIO_Init+0x2d0>)
 8003dfe:	693b      	ldr	r3, [r7, #16]
 8003e00:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003e02:	4b2c      	ldr	r3, [pc, #176]	@ (8003eb4 <HAL_GPIO_Init+0x2d0>)
 8003e04:	68db      	ldr	r3, [r3, #12]
 8003e06:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	43db      	mvns	r3, r3
 8003e0c:	693a      	ldr	r2, [r7, #16]
 8003e0e:	4013      	ands	r3, r2
 8003e10:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003e12:	683b      	ldr	r3, [r7, #0]
 8003e14:	685b      	ldr	r3, [r3, #4]
 8003e16:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d003      	beq.n	8003e26 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8003e1e:	693a      	ldr	r2, [r7, #16]
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	4313      	orrs	r3, r2
 8003e24:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003e26:	4a23      	ldr	r2, [pc, #140]	@ (8003eb4 <HAL_GPIO_Init+0x2d0>)
 8003e28:	693b      	ldr	r3, [r7, #16]
 8003e2a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003e2c:	4b21      	ldr	r3, [pc, #132]	@ (8003eb4 <HAL_GPIO_Init+0x2d0>)
 8003e2e:	685b      	ldr	r3, [r3, #4]
 8003e30:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	43db      	mvns	r3, r3
 8003e36:	693a      	ldr	r2, [r7, #16]
 8003e38:	4013      	ands	r3, r2
 8003e3a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	685b      	ldr	r3, [r3, #4]
 8003e40:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d003      	beq.n	8003e50 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8003e48:	693a      	ldr	r2, [r7, #16]
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	4313      	orrs	r3, r2
 8003e4e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003e50:	4a18      	ldr	r2, [pc, #96]	@ (8003eb4 <HAL_GPIO_Init+0x2d0>)
 8003e52:	693b      	ldr	r3, [r7, #16]
 8003e54:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003e56:	4b17      	ldr	r3, [pc, #92]	@ (8003eb4 <HAL_GPIO_Init+0x2d0>)
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	43db      	mvns	r3, r3
 8003e60:	693a      	ldr	r2, [r7, #16]
 8003e62:	4013      	ands	r3, r2
 8003e64:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003e66:	683b      	ldr	r3, [r7, #0]
 8003e68:	685b      	ldr	r3, [r3, #4]
 8003e6a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d003      	beq.n	8003e7a <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8003e72:	693a      	ldr	r2, [r7, #16]
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	4313      	orrs	r3, r2
 8003e78:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003e7a:	4a0e      	ldr	r2, [pc, #56]	@ (8003eb4 <HAL_GPIO_Init+0x2d0>)
 8003e7c:	693b      	ldr	r3, [r7, #16]
 8003e7e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003e80:	697b      	ldr	r3, [r7, #20]
 8003e82:	3301      	adds	r3, #1
 8003e84:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	681a      	ldr	r2, [r3, #0]
 8003e8a:	697b      	ldr	r3, [r7, #20]
 8003e8c:	fa22 f303 	lsr.w	r3, r2, r3
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	f47f aeaf 	bne.w	8003bf4 <HAL_GPIO_Init+0x10>
  }
}
 8003e96:	bf00      	nop
 8003e98:	bf00      	nop
 8003e9a:	371c      	adds	r7, #28
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea2:	4770      	bx	lr
 8003ea4:	40021000 	.word	0x40021000
 8003ea8:	40010000 	.word	0x40010000
 8003eac:	48000400 	.word	0x48000400
 8003eb0:	48000800 	.word	0x48000800
 8003eb4:	40010400 	.word	0x40010400

08003eb8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003eb8:	b480      	push	{r7}
 8003eba:	b085      	sub	sp, #20
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
 8003ec0:	460b      	mov	r3, r1
 8003ec2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	691a      	ldr	r2, [r3, #16]
 8003ec8:	887b      	ldrh	r3, [r7, #2]
 8003eca:	4013      	ands	r3, r2
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d002      	beq.n	8003ed6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003ed0:	2301      	movs	r3, #1
 8003ed2:	73fb      	strb	r3, [r7, #15]
 8003ed4:	e001      	b.n	8003eda <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003eda:	7bfb      	ldrb	r3, [r7, #15]
}
 8003edc:	4618      	mov	r0, r3
 8003ede:	3714      	adds	r7, #20
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee6:	4770      	bx	lr

08003ee8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003ee8:	b480      	push	{r7}
 8003eea:	b083      	sub	sp, #12
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
 8003ef0:	460b      	mov	r3, r1
 8003ef2:	807b      	strh	r3, [r7, #2]
 8003ef4:	4613      	mov	r3, r2
 8003ef6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003ef8:	787b      	ldrb	r3, [r7, #1]
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d003      	beq.n	8003f06 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003efe:	887a      	ldrh	r2, [r7, #2]
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003f04:	e002      	b.n	8003f0c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003f06:	887a      	ldrh	r2, [r7, #2]
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003f0c:	bf00      	nop
 8003f0e:	370c      	adds	r7, #12
 8003f10:	46bd      	mov	sp, r7
 8003f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f16:	4770      	bx	lr

08003f18 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003f18:	b480      	push	{r7}
 8003f1a:	b085      	sub	sp, #20
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
 8003f20:	460b      	mov	r3, r1
 8003f22:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	695b      	ldr	r3, [r3, #20]
 8003f28:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003f2a:	887a      	ldrh	r2, [r7, #2]
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	4013      	ands	r3, r2
 8003f30:	041a      	lsls	r2, r3, #16
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	43d9      	mvns	r1, r3
 8003f36:	887b      	ldrh	r3, [r7, #2]
 8003f38:	400b      	ands	r3, r1
 8003f3a:	431a      	orrs	r2, r3
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	619a      	str	r2, [r3, #24]
}
 8003f40:	bf00      	nop
 8003f42:	3714      	adds	r7, #20
 8003f44:	46bd      	mov	sp, r7
 8003f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4a:	4770      	bx	lr

08003f4c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	b082      	sub	sp, #8
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d101      	bne.n	8003f5e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003f5a:	2301      	movs	r3, #1
 8003f5c:	e08d      	b.n	800407a <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003f64:	b2db      	uxtb	r3, r3
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d106      	bne.n	8003f78 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003f72:	6878      	ldr	r0, [r7, #4]
 8003f74:	f7fe f84c 	bl	8002010 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2224      	movs	r2, #36	@ 0x24
 8003f7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	681a      	ldr	r2, [r3, #0]
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f022 0201 	bic.w	r2, r2, #1
 8003f8e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	685a      	ldr	r2, [r3, #4]
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003f9c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	689a      	ldr	r2, [r3, #8]
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003fac:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	68db      	ldr	r3, [r3, #12]
 8003fb2:	2b01      	cmp	r3, #1
 8003fb4:	d107      	bne.n	8003fc6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	689a      	ldr	r2, [r3, #8]
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003fc2:	609a      	str	r2, [r3, #8]
 8003fc4:	e006      	b.n	8003fd4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	689a      	ldr	r2, [r3, #8]
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8003fd2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	68db      	ldr	r3, [r3, #12]
 8003fd8:	2b02      	cmp	r3, #2
 8003fda:	d108      	bne.n	8003fee <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	685a      	ldr	r2, [r3, #4]
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003fea:	605a      	str	r2, [r3, #4]
 8003fec:	e007      	b.n	8003ffe <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	685a      	ldr	r2, [r3, #4]
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003ffc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	685b      	ldr	r3, [r3, #4]
 8004004:	687a      	ldr	r2, [r7, #4]
 8004006:	6812      	ldr	r2, [r2, #0]
 8004008:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800400c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004010:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	68da      	ldr	r2, [r3, #12]
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004020:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	691a      	ldr	r2, [r3, #16]
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	695b      	ldr	r3, [r3, #20]
 800402a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	699b      	ldr	r3, [r3, #24]
 8004032:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	430a      	orrs	r2, r1
 800403a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	69d9      	ldr	r1, [r3, #28]
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6a1a      	ldr	r2, [r3, #32]
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	430a      	orrs	r2, r1
 800404a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	681a      	ldr	r2, [r3, #0]
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f042 0201 	orr.w	r2, r2, #1
 800405a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2200      	movs	r2, #0
 8004060:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	2220      	movs	r2, #32
 8004066:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	2200      	movs	r2, #0
 800406e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2200      	movs	r2, #0
 8004074:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8004078:	2300      	movs	r3, #0
}
 800407a:	4618      	mov	r0, r3
 800407c:	3708      	adds	r7, #8
 800407e:	46bd      	mov	sp, r7
 8004080:	bd80      	pop	{r7, pc}
	...

08004084 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004084:	b580      	push	{r7, lr}
 8004086:	b088      	sub	sp, #32
 8004088:	af02      	add	r7, sp, #8
 800408a:	60f8      	str	r0, [r7, #12]
 800408c:	4608      	mov	r0, r1
 800408e:	4611      	mov	r1, r2
 8004090:	461a      	mov	r2, r3
 8004092:	4603      	mov	r3, r0
 8004094:	817b      	strh	r3, [r7, #10]
 8004096:	460b      	mov	r3, r1
 8004098:	813b      	strh	r3, [r7, #8]
 800409a:	4613      	mov	r3, r2
 800409c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80040a4:	b2db      	uxtb	r3, r3
 80040a6:	2b20      	cmp	r3, #32
 80040a8:	f040 80f9 	bne.w	800429e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80040ac:	6a3b      	ldr	r3, [r7, #32]
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d002      	beq.n	80040b8 <HAL_I2C_Mem_Write+0x34>
 80040b2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d105      	bne.n	80040c4 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80040be:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80040c0:	2301      	movs	r3, #1
 80040c2:	e0ed      	b.n	80042a0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80040ca:	2b01      	cmp	r3, #1
 80040cc:	d101      	bne.n	80040d2 <HAL_I2C_Mem_Write+0x4e>
 80040ce:	2302      	movs	r3, #2
 80040d0:	e0e6      	b.n	80042a0 <HAL_I2C_Mem_Write+0x21c>
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	2201      	movs	r2, #1
 80040d6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80040da:	f7fe f98b 	bl	80023f4 <HAL_GetTick>
 80040de:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80040e0:	697b      	ldr	r3, [r7, #20]
 80040e2:	9300      	str	r3, [sp, #0]
 80040e4:	2319      	movs	r3, #25
 80040e6:	2201      	movs	r2, #1
 80040e8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80040ec:	68f8      	ldr	r0, [r7, #12]
 80040ee:	f000 fac3 	bl	8004678 <I2C_WaitOnFlagUntilTimeout>
 80040f2:	4603      	mov	r3, r0
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d001      	beq.n	80040fc <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80040f8:	2301      	movs	r3, #1
 80040fa:	e0d1      	b.n	80042a0 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	2221      	movs	r2, #33	@ 0x21
 8004100:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	2240      	movs	r2, #64	@ 0x40
 8004108:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	2200      	movs	r2, #0
 8004110:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	6a3a      	ldr	r2, [r7, #32]
 8004116:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800411c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	2200      	movs	r2, #0
 8004122:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004124:	88f8      	ldrh	r0, [r7, #6]
 8004126:	893a      	ldrh	r2, [r7, #8]
 8004128:	8979      	ldrh	r1, [r7, #10]
 800412a:	697b      	ldr	r3, [r7, #20]
 800412c:	9301      	str	r3, [sp, #4]
 800412e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004130:	9300      	str	r3, [sp, #0]
 8004132:	4603      	mov	r3, r0
 8004134:	68f8      	ldr	r0, [r7, #12]
 8004136:	f000 f9d3 	bl	80044e0 <I2C_RequestMemoryWrite>
 800413a:	4603      	mov	r3, r0
 800413c:	2b00      	cmp	r3, #0
 800413e:	d005      	beq.n	800414c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	2200      	movs	r2, #0
 8004144:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8004148:	2301      	movs	r3, #1
 800414a:	e0a9      	b.n	80042a0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004150:	b29b      	uxth	r3, r3
 8004152:	2bff      	cmp	r3, #255	@ 0xff
 8004154:	d90e      	bls.n	8004174 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	22ff      	movs	r2, #255	@ 0xff
 800415a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004160:	b2da      	uxtb	r2, r3
 8004162:	8979      	ldrh	r1, [r7, #10]
 8004164:	2300      	movs	r3, #0
 8004166:	9300      	str	r3, [sp, #0]
 8004168:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800416c:	68f8      	ldr	r0, [r7, #12]
 800416e:	f000 fc47 	bl	8004a00 <I2C_TransferConfig>
 8004172:	e00f      	b.n	8004194 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004178:	b29a      	uxth	r2, r3
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004182:	b2da      	uxtb	r2, r3
 8004184:	8979      	ldrh	r1, [r7, #10]
 8004186:	2300      	movs	r3, #0
 8004188:	9300      	str	r3, [sp, #0]
 800418a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800418e:	68f8      	ldr	r0, [r7, #12]
 8004190:	f000 fc36 	bl	8004a00 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004194:	697a      	ldr	r2, [r7, #20]
 8004196:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004198:	68f8      	ldr	r0, [r7, #12]
 800419a:	f000 fac6 	bl	800472a <I2C_WaitOnTXISFlagUntilTimeout>
 800419e:	4603      	mov	r3, r0
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d001      	beq.n	80041a8 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80041a4:	2301      	movs	r3, #1
 80041a6:	e07b      	b.n	80042a0 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041ac:	781a      	ldrb	r2, [r3, #0]
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041b8:	1c5a      	adds	r2, r3, #1
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041c2:	b29b      	uxth	r3, r3
 80041c4:	3b01      	subs	r3, #1
 80041c6:	b29a      	uxth	r2, r3
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041d0:	3b01      	subs	r3, #1
 80041d2:	b29a      	uxth	r2, r3
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041dc:	b29b      	uxth	r3, r3
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d034      	beq.n	800424c <HAL_I2C_Mem_Write+0x1c8>
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d130      	bne.n	800424c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80041ea:	697b      	ldr	r3, [r7, #20]
 80041ec:	9300      	str	r3, [sp, #0]
 80041ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041f0:	2200      	movs	r2, #0
 80041f2:	2180      	movs	r1, #128	@ 0x80
 80041f4:	68f8      	ldr	r0, [r7, #12]
 80041f6:	f000 fa3f 	bl	8004678 <I2C_WaitOnFlagUntilTimeout>
 80041fa:	4603      	mov	r3, r0
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d001      	beq.n	8004204 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8004200:	2301      	movs	r3, #1
 8004202:	e04d      	b.n	80042a0 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004208:	b29b      	uxth	r3, r3
 800420a:	2bff      	cmp	r3, #255	@ 0xff
 800420c:	d90e      	bls.n	800422c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	22ff      	movs	r2, #255	@ 0xff
 8004212:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004218:	b2da      	uxtb	r2, r3
 800421a:	8979      	ldrh	r1, [r7, #10]
 800421c:	2300      	movs	r3, #0
 800421e:	9300      	str	r3, [sp, #0]
 8004220:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004224:	68f8      	ldr	r0, [r7, #12]
 8004226:	f000 fbeb 	bl	8004a00 <I2C_TransferConfig>
 800422a:	e00f      	b.n	800424c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004230:	b29a      	uxth	r2, r3
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800423a:	b2da      	uxtb	r2, r3
 800423c:	8979      	ldrh	r1, [r7, #10]
 800423e:	2300      	movs	r3, #0
 8004240:	9300      	str	r3, [sp, #0]
 8004242:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004246:	68f8      	ldr	r0, [r7, #12]
 8004248:	f000 fbda 	bl	8004a00 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004250:	b29b      	uxth	r3, r3
 8004252:	2b00      	cmp	r3, #0
 8004254:	d19e      	bne.n	8004194 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004256:	697a      	ldr	r2, [r7, #20]
 8004258:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800425a:	68f8      	ldr	r0, [r7, #12]
 800425c:	f000 faac 	bl	80047b8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004260:	4603      	mov	r3, r0
 8004262:	2b00      	cmp	r3, #0
 8004264:	d001      	beq.n	800426a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8004266:	2301      	movs	r3, #1
 8004268:	e01a      	b.n	80042a0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	2220      	movs	r2, #32
 8004270:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	6859      	ldr	r1, [r3, #4]
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	681a      	ldr	r2, [r3, #0]
 800427c:	4b0a      	ldr	r3, [pc, #40]	@ (80042a8 <HAL_I2C_Mem_Write+0x224>)
 800427e:	400b      	ands	r3, r1
 8004280:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	2220      	movs	r2, #32
 8004286:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	2200      	movs	r2, #0
 800428e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	2200      	movs	r2, #0
 8004296:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800429a:	2300      	movs	r3, #0
 800429c:	e000      	b.n	80042a0 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800429e:	2302      	movs	r3, #2
  }
}
 80042a0:	4618      	mov	r0, r3
 80042a2:	3718      	adds	r7, #24
 80042a4:	46bd      	mov	sp, r7
 80042a6:	bd80      	pop	{r7, pc}
 80042a8:	fe00e800 	.word	0xfe00e800

080042ac <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80042ac:	b580      	push	{r7, lr}
 80042ae:	b088      	sub	sp, #32
 80042b0:	af02      	add	r7, sp, #8
 80042b2:	60f8      	str	r0, [r7, #12]
 80042b4:	4608      	mov	r0, r1
 80042b6:	4611      	mov	r1, r2
 80042b8:	461a      	mov	r2, r3
 80042ba:	4603      	mov	r3, r0
 80042bc:	817b      	strh	r3, [r7, #10]
 80042be:	460b      	mov	r3, r1
 80042c0:	813b      	strh	r3, [r7, #8]
 80042c2:	4613      	mov	r3, r2
 80042c4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80042cc:	b2db      	uxtb	r3, r3
 80042ce:	2b20      	cmp	r3, #32
 80042d0:	f040 80fd 	bne.w	80044ce <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80042d4:	6a3b      	ldr	r3, [r7, #32]
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d002      	beq.n	80042e0 <HAL_I2C_Mem_Read+0x34>
 80042da:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d105      	bne.n	80042ec <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80042e6:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80042e8:	2301      	movs	r3, #1
 80042ea:	e0f1      	b.n	80044d0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80042f2:	2b01      	cmp	r3, #1
 80042f4:	d101      	bne.n	80042fa <HAL_I2C_Mem_Read+0x4e>
 80042f6:	2302      	movs	r3, #2
 80042f8:	e0ea      	b.n	80044d0 <HAL_I2C_Mem_Read+0x224>
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	2201      	movs	r2, #1
 80042fe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004302:	f7fe f877 	bl	80023f4 <HAL_GetTick>
 8004306:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004308:	697b      	ldr	r3, [r7, #20]
 800430a:	9300      	str	r3, [sp, #0]
 800430c:	2319      	movs	r3, #25
 800430e:	2201      	movs	r2, #1
 8004310:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004314:	68f8      	ldr	r0, [r7, #12]
 8004316:	f000 f9af 	bl	8004678 <I2C_WaitOnFlagUntilTimeout>
 800431a:	4603      	mov	r3, r0
 800431c:	2b00      	cmp	r3, #0
 800431e:	d001      	beq.n	8004324 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8004320:	2301      	movs	r3, #1
 8004322:	e0d5      	b.n	80044d0 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	2222      	movs	r2, #34	@ 0x22
 8004328:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	2240      	movs	r2, #64	@ 0x40
 8004330:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	2200      	movs	r2, #0
 8004338:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	6a3a      	ldr	r2, [r7, #32]
 800433e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004344:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	2200      	movs	r2, #0
 800434a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800434c:	88f8      	ldrh	r0, [r7, #6]
 800434e:	893a      	ldrh	r2, [r7, #8]
 8004350:	8979      	ldrh	r1, [r7, #10]
 8004352:	697b      	ldr	r3, [r7, #20]
 8004354:	9301      	str	r3, [sp, #4]
 8004356:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004358:	9300      	str	r3, [sp, #0]
 800435a:	4603      	mov	r3, r0
 800435c:	68f8      	ldr	r0, [r7, #12]
 800435e:	f000 f913 	bl	8004588 <I2C_RequestMemoryRead>
 8004362:	4603      	mov	r3, r0
 8004364:	2b00      	cmp	r3, #0
 8004366:	d005      	beq.n	8004374 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	2200      	movs	r2, #0
 800436c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8004370:	2301      	movs	r3, #1
 8004372:	e0ad      	b.n	80044d0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004378:	b29b      	uxth	r3, r3
 800437a:	2bff      	cmp	r3, #255	@ 0xff
 800437c:	d90e      	bls.n	800439c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	2201      	movs	r2, #1
 8004382:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004388:	b2da      	uxtb	r2, r3
 800438a:	8979      	ldrh	r1, [r7, #10]
 800438c:	4b52      	ldr	r3, [pc, #328]	@ (80044d8 <HAL_I2C_Mem_Read+0x22c>)
 800438e:	9300      	str	r3, [sp, #0]
 8004390:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004394:	68f8      	ldr	r0, [r7, #12]
 8004396:	f000 fb33 	bl	8004a00 <I2C_TransferConfig>
 800439a:	e00f      	b.n	80043bc <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043a0:	b29a      	uxth	r2, r3
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80043aa:	b2da      	uxtb	r2, r3
 80043ac:	8979      	ldrh	r1, [r7, #10]
 80043ae:	4b4a      	ldr	r3, [pc, #296]	@ (80044d8 <HAL_I2C_Mem_Read+0x22c>)
 80043b0:	9300      	str	r3, [sp, #0]
 80043b2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80043b6:	68f8      	ldr	r0, [r7, #12]
 80043b8:	f000 fb22 	bl	8004a00 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80043bc:	697b      	ldr	r3, [r7, #20]
 80043be:	9300      	str	r3, [sp, #0]
 80043c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043c2:	2200      	movs	r2, #0
 80043c4:	2104      	movs	r1, #4
 80043c6:	68f8      	ldr	r0, [r7, #12]
 80043c8:	f000 f956 	bl	8004678 <I2C_WaitOnFlagUntilTimeout>
 80043cc:	4603      	mov	r3, r0
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d001      	beq.n	80043d6 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80043d2:	2301      	movs	r3, #1
 80043d4:	e07c      	b.n	80044d0 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043e0:	b2d2      	uxtb	r2, r2
 80043e2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043e8:	1c5a      	adds	r2, r3, #1
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80043f2:	3b01      	subs	r3, #1
 80043f4:	b29a      	uxth	r2, r3
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043fe:	b29b      	uxth	r3, r3
 8004400:	3b01      	subs	r3, #1
 8004402:	b29a      	uxth	r2, r3
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800440c:	b29b      	uxth	r3, r3
 800440e:	2b00      	cmp	r3, #0
 8004410:	d034      	beq.n	800447c <HAL_I2C_Mem_Read+0x1d0>
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004416:	2b00      	cmp	r3, #0
 8004418:	d130      	bne.n	800447c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800441a:	697b      	ldr	r3, [r7, #20]
 800441c:	9300      	str	r3, [sp, #0]
 800441e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004420:	2200      	movs	r2, #0
 8004422:	2180      	movs	r1, #128	@ 0x80
 8004424:	68f8      	ldr	r0, [r7, #12]
 8004426:	f000 f927 	bl	8004678 <I2C_WaitOnFlagUntilTimeout>
 800442a:	4603      	mov	r3, r0
 800442c:	2b00      	cmp	r3, #0
 800442e:	d001      	beq.n	8004434 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8004430:	2301      	movs	r3, #1
 8004432:	e04d      	b.n	80044d0 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004438:	b29b      	uxth	r3, r3
 800443a:	2bff      	cmp	r3, #255	@ 0xff
 800443c:	d90e      	bls.n	800445c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	2201      	movs	r2, #1
 8004442:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004448:	b2da      	uxtb	r2, r3
 800444a:	8979      	ldrh	r1, [r7, #10]
 800444c:	2300      	movs	r3, #0
 800444e:	9300      	str	r3, [sp, #0]
 8004450:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004454:	68f8      	ldr	r0, [r7, #12]
 8004456:	f000 fad3 	bl	8004a00 <I2C_TransferConfig>
 800445a:	e00f      	b.n	800447c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004460:	b29a      	uxth	r2, r3
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800446a:	b2da      	uxtb	r2, r3
 800446c:	8979      	ldrh	r1, [r7, #10]
 800446e:	2300      	movs	r3, #0
 8004470:	9300      	str	r3, [sp, #0]
 8004472:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004476:	68f8      	ldr	r0, [r7, #12]
 8004478:	f000 fac2 	bl	8004a00 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004480:	b29b      	uxth	r3, r3
 8004482:	2b00      	cmp	r3, #0
 8004484:	d19a      	bne.n	80043bc <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004486:	697a      	ldr	r2, [r7, #20]
 8004488:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800448a:	68f8      	ldr	r0, [r7, #12]
 800448c:	f000 f994 	bl	80047b8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004490:	4603      	mov	r3, r0
 8004492:	2b00      	cmp	r3, #0
 8004494:	d001      	beq.n	800449a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8004496:	2301      	movs	r3, #1
 8004498:	e01a      	b.n	80044d0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	2220      	movs	r2, #32
 80044a0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	6859      	ldr	r1, [r3, #4]
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	681a      	ldr	r2, [r3, #0]
 80044ac:	4b0b      	ldr	r3, [pc, #44]	@ (80044dc <HAL_I2C_Mem_Read+0x230>)
 80044ae:	400b      	ands	r3, r1
 80044b0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	2220      	movs	r2, #32
 80044b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	2200      	movs	r2, #0
 80044be:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	2200      	movs	r2, #0
 80044c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80044ca:	2300      	movs	r3, #0
 80044cc:	e000      	b.n	80044d0 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80044ce:	2302      	movs	r3, #2
  }
}
 80044d0:	4618      	mov	r0, r3
 80044d2:	3718      	adds	r7, #24
 80044d4:	46bd      	mov	sp, r7
 80044d6:	bd80      	pop	{r7, pc}
 80044d8:	80002400 	.word	0x80002400
 80044dc:	fe00e800 	.word	0xfe00e800

080044e0 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b086      	sub	sp, #24
 80044e4:	af02      	add	r7, sp, #8
 80044e6:	60f8      	str	r0, [r7, #12]
 80044e8:	4608      	mov	r0, r1
 80044ea:	4611      	mov	r1, r2
 80044ec:	461a      	mov	r2, r3
 80044ee:	4603      	mov	r3, r0
 80044f0:	817b      	strh	r3, [r7, #10]
 80044f2:	460b      	mov	r3, r1
 80044f4:	813b      	strh	r3, [r7, #8]
 80044f6:	4613      	mov	r3, r2
 80044f8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80044fa:	88fb      	ldrh	r3, [r7, #6]
 80044fc:	b2da      	uxtb	r2, r3
 80044fe:	8979      	ldrh	r1, [r7, #10]
 8004500:	4b20      	ldr	r3, [pc, #128]	@ (8004584 <I2C_RequestMemoryWrite+0xa4>)
 8004502:	9300      	str	r3, [sp, #0]
 8004504:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004508:	68f8      	ldr	r0, [r7, #12]
 800450a:	f000 fa79 	bl	8004a00 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800450e:	69fa      	ldr	r2, [r7, #28]
 8004510:	69b9      	ldr	r1, [r7, #24]
 8004512:	68f8      	ldr	r0, [r7, #12]
 8004514:	f000 f909 	bl	800472a <I2C_WaitOnTXISFlagUntilTimeout>
 8004518:	4603      	mov	r3, r0
 800451a:	2b00      	cmp	r3, #0
 800451c:	d001      	beq.n	8004522 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800451e:	2301      	movs	r3, #1
 8004520:	e02c      	b.n	800457c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004522:	88fb      	ldrh	r3, [r7, #6]
 8004524:	2b01      	cmp	r3, #1
 8004526:	d105      	bne.n	8004534 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004528:	893b      	ldrh	r3, [r7, #8]
 800452a:	b2da      	uxtb	r2, r3
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	629a      	str	r2, [r3, #40]	@ 0x28
 8004532:	e015      	b.n	8004560 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004534:	893b      	ldrh	r3, [r7, #8]
 8004536:	0a1b      	lsrs	r3, r3, #8
 8004538:	b29b      	uxth	r3, r3
 800453a:	b2da      	uxtb	r2, r3
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004542:	69fa      	ldr	r2, [r7, #28]
 8004544:	69b9      	ldr	r1, [r7, #24]
 8004546:	68f8      	ldr	r0, [r7, #12]
 8004548:	f000 f8ef 	bl	800472a <I2C_WaitOnTXISFlagUntilTimeout>
 800454c:	4603      	mov	r3, r0
 800454e:	2b00      	cmp	r3, #0
 8004550:	d001      	beq.n	8004556 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8004552:	2301      	movs	r3, #1
 8004554:	e012      	b.n	800457c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004556:	893b      	ldrh	r3, [r7, #8]
 8004558:	b2da      	uxtb	r2, r3
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8004560:	69fb      	ldr	r3, [r7, #28]
 8004562:	9300      	str	r3, [sp, #0]
 8004564:	69bb      	ldr	r3, [r7, #24]
 8004566:	2200      	movs	r2, #0
 8004568:	2180      	movs	r1, #128	@ 0x80
 800456a:	68f8      	ldr	r0, [r7, #12]
 800456c:	f000 f884 	bl	8004678 <I2C_WaitOnFlagUntilTimeout>
 8004570:	4603      	mov	r3, r0
 8004572:	2b00      	cmp	r3, #0
 8004574:	d001      	beq.n	800457a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8004576:	2301      	movs	r3, #1
 8004578:	e000      	b.n	800457c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800457a:	2300      	movs	r3, #0
}
 800457c:	4618      	mov	r0, r3
 800457e:	3710      	adds	r7, #16
 8004580:	46bd      	mov	sp, r7
 8004582:	bd80      	pop	{r7, pc}
 8004584:	80002000 	.word	0x80002000

08004588 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8004588:	b580      	push	{r7, lr}
 800458a:	b086      	sub	sp, #24
 800458c:	af02      	add	r7, sp, #8
 800458e:	60f8      	str	r0, [r7, #12]
 8004590:	4608      	mov	r0, r1
 8004592:	4611      	mov	r1, r2
 8004594:	461a      	mov	r2, r3
 8004596:	4603      	mov	r3, r0
 8004598:	817b      	strh	r3, [r7, #10]
 800459a:	460b      	mov	r3, r1
 800459c:	813b      	strh	r3, [r7, #8]
 800459e:	4613      	mov	r3, r2
 80045a0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80045a2:	88fb      	ldrh	r3, [r7, #6]
 80045a4:	b2da      	uxtb	r2, r3
 80045a6:	8979      	ldrh	r1, [r7, #10]
 80045a8:	4b20      	ldr	r3, [pc, #128]	@ (800462c <I2C_RequestMemoryRead+0xa4>)
 80045aa:	9300      	str	r3, [sp, #0]
 80045ac:	2300      	movs	r3, #0
 80045ae:	68f8      	ldr	r0, [r7, #12]
 80045b0:	f000 fa26 	bl	8004a00 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80045b4:	69fa      	ldr	r2, [r7, #28]
 80045b6:	69b9      	ldr	r1, [r7, #24]
 80045b8:	68f8      	ldr	r0, [r7, #12]
 80045ba:	f000 f8b6 	bl	800472a <I2C_WaitOnTXISFlagUntilTimeout>
 80045be:	4603      	mov	r3, r0
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d001      	beq.n	80045c8 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80045c4:	2301      	movs	r3, #1
 80045c6:	e02c      	b.n	8004622 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80045c8:	88fb      	ldrh	r3, [r7, #6]
 80045ca:	2b01      	cmp	r3, #1
 80045cc:	d105      	bne.n	80045da <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80045ce:	893b      	ldrh	r3, [r7, #8]
 80045d0:	b2da      	uxtb	r2, r3
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	629a      	str	r2, [r3, #40]	@ 0x28
 80045d8:	e015      	b.n	8004606 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80045da:	893b      	ldrh	r3, [r7, #8]
 80045dc:	0a1b      	lsrs	r3, r3, #8
 80045de:	b29b      	uxth	r3, r3
 80045e0:	b2da      	uxtb	r2, r3
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80045e8:	69fa      	ldr	r2, [r7, #28]
 80045ea:	69b9      	ldr	r1, [r7, #24]
 80045ec:	68f8      	ldr	r0, [r7, #12]
 80045ee:	f000 f89c 	bl	800472a <I2C_WaitOnTXISFlagUntilTimeout>
 80045f2:	4603      	mov	r3, r0
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d001      	beq.n	80045fc <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80045f8:	2301      	movs	r3, #1
 80045fa:	e012      	b.n	8004622 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80045fc:	893b      	ldrh	r3, [r7, #8]
 80045fe:	b2da      	uxtb	r2, r3
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8004606:	69fb      	ldr	r3, [r7, #28]
 8004608:	9300      	str	r3, [sp, #0]
 800460a:	69bb      	ldr	r3, [r7, #24]
 800460c:	2200      	movs	r2, #0
 800460e:	2140      	movs	r1, #64	@ 0x40
 8004610:	68f8      	ldr	r0, [r7, #12]
 8004612:	f000 f831 	bl	8004678 <I2C_WaitOnFlagUntilTimeout>
 8004616:	4603      	mov	r3, r0
 8004618:	2b00      	cmp	r3, #0
 800461a:	d001      	beq.n	8004620 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800461c:	2301      	movs	r3, #1
 800461e:	e000      	b.n	8004622 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8004620:	2300      	movs	r3, #0
}
 8004622:	4618      	mov	r0, r3
 8004624:	3710      	adds	r7, #16
 8004626:	46bd      	mov	sp, r7
 8004628:	bd80      	pop	{r7, pc}
 800462a:	bf00      	nop
 800462c:	80002000 	.word	0x80002000

08004630 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004630:	b480      	push	{r7}
 8004632:	b083      	sub	sp, #12
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	699b      	ldr	r3, [r3, #24]
 800463e:	f003 0302 	and.w	r3, r3, #2
 8004642:	2b02      	cmp	r3, #2
 8004644:	d103      	bne.n	800464e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	2200      	movs	r2, #0
 800464c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	699b      	ldr	r3, [r3, #24]
 8004654:	f003 0301 	and.w	r3, r3, #1
 8004658:	2b01      	cmp	r3, #1
 800465a:	d007      	beq.n	800466c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	699a      	ldr	r2, [r3, #24]
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f042 0201 	orr.w	r2, r2, #1
 800466a:	619a      	str	r2, [r3, #24]
  }
}
 800466c:	bf00      	nop
 800466e:	370c      	adds	r7, #12
 8004670:	46bd      	mov	sp, r7
 8004672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004676:	4770      	bx	lr

08004678 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004678:	b580      	push	{r7, lr}
 800467a:	b084      	sub	sp, #16
 800467c:	af00      	add	r7, sp, #0
 800467e:	60f8      	str	r0, [r7, #12]
 8004680:	60b9      	str	r1, [r7, #8]
 8004682:	603b      	str	r3, [r7, #0]
 8004684:	4613      	mov	r3, r2
 8004686:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004688:	e03b      	b.n	8004702 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800468a:	69ba      	ldr	r2, [r7, #24]
 800468c:	6839      	ldr	r1, [r7, #0]
 800468e:	68f8      	ldr	r0, [r7, #12]
 8004690:	f000 f8d6 	bl	8004840 <I2C_IsErrorOccurred>
 8004694:	4603      	mov	r3, r0
 8004696:	2b00      	cmp	r3, #0
 8004698:	d001      	beq.n	800469e <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800469a:	2301      	movs	r3, #1
 800469c:	e041      	b.n	8004722 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80046a4:	d02d      	beq.n	8004702 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046a6:	f7fd fea5 	bl	80023f4 <HAL_GetTick>
 80046aa:	4602      	mov	r2, r0
 80046ac:	69bb      	ldr	r3, [r7, #24]
 80046ae:	1ad3      	subs	r3, r2, r3
 80046b0:	683a      	ldr	r2, [r7, #0]
 80046b2:	429a      	cmp	r2, r3
 80046b4:	d302      	bcc.n	80046bc <I2C_WaitOnFlagUntilTimeout+0x44>
 80046b6:	683b      	ldr	r3, [r7, #0]
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d122      	bne.n	8004702 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	699a      	ldr	r2, [r3, #24]
 80046c2:	68bb      	ldr	r3, [r7, #8]
 80046c4:	4013      	ands	r3, r2
 80046c6:	68ba      	ldr	r2, [r7, #8]
 80046c8:	429a      	cmp	r2, r3
 80046ca:	bf0c      	ite	eq
 80046cc:	2301      	moveq	r3, #1
 80046ce:	2300      	movne	r3, #0
 80046d0:	b2db      	uxtb	r3, r3
 80046d2:	461a      	mov	r2, r3
 80046d4:	79fb      	ldrb	r3, [r7, #7]
 80046d6:	429a      	cmp	r2, r3
 80046d8:	d113      	bne.n	8004702 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046de:	f043 0220 	orr.w	r2, r3, #32
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	2220      	movs	r2, #32
 80046ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	2200      	movs	r2, #0
 80046f2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	2200      	movs	r2, #0
 80046fa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80046fe:	2301      	movs	r3, #1
 8004700:	e00f      	b.n	8004722 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	699a      	ldr	r2, [r3, #24]
 8004708:	68bb      	ldr	r3, [r7, #8]
 800470a:	4013      	ands	r3, r2
 800470c:	68ba      	ldr	r2, [r7, #8]
 800470e:	429a      	cmp	r2, r3
 8004710:	bf0c      	ite	eq
 8004712:	2301      	moveq	r3, #1
 8004714:	2300      	movne	r3, #0
 8004716:	b2db      	uxtb	r3, r3
 8004718:	461a      	mov	r2, r3
 800471a:	79fb      	ldrb	r3, [r7, #7]
 800471c:	429a      	cmp	r2, r3
 800471e:	d0b4      	beq.n	800468a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004720:	2300      	movs	r3, #0
}
 8004722:	4618      	mov	r0, r3
 8004724:	3710      	adds	r7, #16
 8004726:	46bd      	mov	sp, r7
 8004728:	bd80      	pop	{r7, pc}

0800472a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800472a:	b580      	push	{r7, lr}
 800472c:	b084      	sub	sp, #16
 800472e:	af00      	add	r7, sp, #0
 8004730:	60f8      	str	r0, [r7, #12]
 8004732:	60b9      	str	r1, [r7, #8]
 8004734:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004736:	e033      	b.n	80047a0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004738:	687a      	ldr	r2, [r7, #4]
 800473a:	68b9      	ldr	r1, [r7, #8]
 800473c:	68f8      	ldr	r0, [r7, #12]
 800473e:	f000 f87f 	bl	8004840 <I2C_IsErrorOccurred>
 8004742:	4603      	mov	r3, r0
 8004744:	2b00      	cmp	r3, #0
 8004746:	d001      	beq.n	800474c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004748:	2301      	movs	r3, #1
 800474a:	e031      	b.n	80047b0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800474c:	68bb      	ldr	r3, [r7, #8]
 800474e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004752:	d025      	beq.n	80047a0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004754:	f7fd fe4e 	bl	80023f4 <HAL_GetTick>
 8004758:	4602      	mov	r2, r0
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	1ad3      	subs	r3, r2, r3
 800475e:	68ba      	ldr	r2, [r7, #8]
 8004760:	429a      	cmp	r2, r3
 8004762:	d302      	bcc.n	800476a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004764:	68bb      	ldr	r3, [r7, #8]
 8004766:	2b00      	cmp	r3, #0
 8004768:	d11a      	bne.n	80047a0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	699b      	ldr	r3, [r3, #24]
 8004770:	f003 0302 	and.w	r3, r3, #2
 8004774:	2b02      	cmp	r3, #2
 8004776:	d013      	beq.n	80047a0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800477c:	f043 0220 	orr.w	r2, r3, #32
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	2220      	movs	r2, #32
 8004788:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	2200      	movs	r2, #0
 8004790:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	2200      	movs	r2, #0
 8004798:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800479c:	2301      	movs	r3, #1
 800479e:	e007      	b.n	80047b0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	699b      	ldr	r3, [r3, #24]
 80047a6:	f003 0302 	and.w	r3, r3, #2
 80047aa:	2b02      	cmp	r3, #2
 80047ac:	d1c4      	bne.n	8004738 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80047ae:	2300      	movs	r3, #0
}
 80047b0:	4618      	mov	r0, r3
 80047b2:	3710      	adds	r7, #16
 80047b4:	46bd      	mov	sp, r7
 80047b6:	bd80      	pop	{r7, pc}

080047b8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80047b8:	b580      	push	{r7, lr}
 80047ba:	b084      	sub	sp, #16
 80047bc:	af00      	add	r7, sp, #0
 80047be:	60f8      	str	r0, [r7, #12]
 80047c0:	60b9      	str	r1, [r7, #8]
 80047c2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80047c4:	e02f      	b.n	8004826 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80047c6:	687a      	ldr	r2, [r7, #4]
 80047c8:	68b9      	ldr	r1, [r7, #8]
 80047ca:	68f8      	ldr	r0, [r7, #12]
 80047cc:	f000 f838 	bl	8004840 <I2C_IsErrorOccurred>
 80047d0:	4603      	mov	r3, r0
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d001      	beq.n	80047da <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80047d6:	2301      	movs	r3, #1
 80047d8:	e02d      	b.n	8004836 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047da:	f7fd fe0b 	bl	80023f4 <HAL_GetTick>
 80047de:	4602      	mov	r2, r0
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	1ad3      	subs	r3, r2, r3
 80047e4:	68ba      	ldr	r2, [r7, #8]
 80047e6:	429a      	cmp	r2, r3
 80047e8:	d302      	bcc.n	80047f0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80047ea:	68bb      	ldr	r3, [r7, #8]
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d11a      	bne.n	8004826 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	699b      	ldr	r3, [r3, #24]
 80047f6:	f003 0320 	and.w	r3, r3, #32
 80047fa:	2b20      	cmp	r3, #32
 80047fc:	d013      	beq.n	8004826 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004802:	f043 0220 	orr.w	r2, r3, #32
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	2220      	movs	r2, #32
 800480e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	2200      	movs	r2, #0
 8004816:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	2200      	movs	r2, #0
 800481e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8004822:	2301      	movs	r3, #1
 8004824:	e007      	b.n	8004836 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	699b      	ldr	r3, [r3, #24]
 800482c:	f003 0320 	and.w	r3, r3, #32
 8004830:	2b20      	cmp	r3, #32
 8004832:	d1c8      	bne.n	80047c6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004834:	2300      	movs	r3, #0
}
 8004836:	4618      	mov	r0, r3
 8004838:	3710      	adds	r7, #16
 800483a:	46bd      	mov	sp, r7
 800483c:	bd80      	pop	{r7, pc}
	...

08004840 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004840:	b580      	push	{r7, lr}
 8004842:	b08a      	sub	sp, #40	@ 0x28
 8004844:	af00      	add	r7, sp, #0
 8004846:	60f8      	str	r0, [r7, #12]
 8004848:	60b9      	str	r1, [r7, #8]
 800484a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800484c:	2300      	movs	r3, #0
 800484e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	699b      	ldr	r3, [r3, #24]
 8004858:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800485a:	2300      	movs	r3, #0
 800485c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004862:	69bb      	ldr	r3, [r7, #24]
 8004864:	f003 0310 	and.w	r3, r3, #16
 8004868:	2b00      	cmp	r3, #0
 800486a:	d068      	beq.n	800493e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	2210      	movs	r2, #16
 8004872:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004874:	e049      	b.n	800490a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004876:	68bb      	ldr	r3, [r7, #8]
 8004878:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800487c:	d045      	beq.n	800490a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800487e:	f7fd fdb9 	bl	80023f4 <HAL_GetTick>
 8004882:	4602      	mov	r2, r0
 8004884:	69fb      	ldr	r3, [r7, #28]
 8004886:	1ad3      	subs	r3, r2, r3
 8004888:	68ba      	ldr	r2, [r7, #8]
 800488a:	429a      	cmp	r2, r3
 800488c:	d302      	bcc.n	8004894 <I2C_IsErrorOccurred+0x54>
 800488e:	68bb      	ldr	r3, [r7, #8]
 8004890:	2b00      	cmp	r3, #0
 8004892:	d13a      	bne.n	800490a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	685b      	ldr	r3, [r3, #4]
 800489a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800489e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80048a6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	699b      	ldr	r3, [r3, #24]
 80048ae:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80048b2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80048b6:	d121      	bne.n	80048fc <I2C_IsErrorOccurred+0xbc>
 80048b8:	697b      	ldr	r3, [r7, #20]
 80048ba:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80048be:	d01d      	beq.n	80048fc <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80048c0:	7cfb      	ldrb	r3, [r7, #19]
 80048c2:	2b20      	cmp	r3, #32
 80048c4:	d01a      	beq.n	80048fc <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	685a      	ldr	r2, [r3, #4]
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80048d4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80048d6:	f7fd fd8d 	bl	80023f4 <HAL_GetTick>
 80048da:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80048dc:	e00e      	b.n	80048fc <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80048de:	f7fd fd89 	bl	80023f4 <HAL_GetTick>
 80048e2:	4602      	mov	r2, r0
 80048e4:	69fb      	ldr	r3, [r7, #28]
 80048e6:	1ad3      	subs	r3, r2, r3
 80048e8:	2b19      	cmp	r3, #25
 80048ea:	d907      	bls.n	80048fc <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80048ec:	6a3b      	ldr	r3, [r7, #32]
 80048ee:	f043 0320 	orr.w	r3, r3, #32
 80048f2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80048f4:	2301      	movs	r3, #1
 80048f6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80048fa:	e006      	b.n	800490a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	699b      	ldr	r3, [r3, #24]
 8004902:	f003 0320 	and.w	r3, r3, #32
 8004906:	2b20      	cmp	r3, #32
 8004908:	d1e9      	bne.n	80048de <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	699b      	ldr	r3, [r3, #24]
 8004910:	f003 0320 	and.w	r3, r3, #32
 8004914:	2b20      	cmp	r3, #32
 8004916:	d003      	beq.n	8004920 <I2C_IsErrorOccurred+0xe0>
 8004918:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800491c:	2b00      	cmp	r3, #0
 800491e:	d0aa      	beq.n	8004876 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004920:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004924:	2b00      	cmp	r3, #0
 8004926:	d103      	bne.n	8004930 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	2220      	movs	r2, #32
 800492e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004930:	6a3b      	ldr	r3, [r7, #32]
 8004932:	f043 0304 	orr.w	r3, r3, #4
 8004936:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004938:	2301      	movs	r3, #1
 800493a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	699b      	ldr	r3, [r3, #24]
 8004944:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004946:	69bb      	ldr	r3, [r7, #24]
 8004948:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800494c:	2b00      	cmp	r3, #0
 800494e:	d00b      	beq.n	8004968 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004950:	6a3b      	ldr	r3, [r7, #32]
 8004952:	f043 0301 	orr.w	r3, r3, #1
 8004956:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004960:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004962:	2301      	movs	r3, #1
 8004964:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004968:	69bb      	ldr	r3, [r7, #24]
 800496a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800496e:	2b00      	cmp	r3, #0
 8004970:	d00b      	beq.n	800498a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004972:	6a3b      	ldr	r3, [r7, #32]
 8004974:	f043 0308 	orr.w	r3, r3, #8
 8004978:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004982:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004984:	2301      	movs	r3, #1
 8004986:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800498a:	69bb      	ldr	r3, [r7, #24]
 800498c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004990:	2b00      	cmp	r3, #0
 8004992:	d00b      	beq.n	80049ac <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004994:	6a3b      	ldr	r3, [r7, #32]
 8004996:	f043 0302 	orr.w	r3, r3, #2
 800499a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80049a4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80049a6:	2301      	movs	r3, #1
 80049a8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80049ac:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d01c      	beq.n	80049ee <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80049b4:	68f8      	ldr	r0, [r7, #12]
 80049b6:	f7ff fe3b 	bl	8004630 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	6859      	ldr	r1, [r3, #4]
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	681a      	ldr	r2, [r3, #0]
 80049c4:	4b0d      	ldr	r3, [pc, #52]	@ (80049fc <I2C_IsErrorOccurred+0x1bc>)
 80049c6:	400b      	ands	r3, r1
 80049c8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80049ce:	6a3b      	ldr	r3, [r7, #32]
 80049d0:	431a      	orrs	r2, r3
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	2220      	movs	r2, #32
 80049da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	2200      	movs	r2, #0
 80049e2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	2200      	movs	r2, #0
 80049ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80049ee:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80049f2:	4618      	mov	r0, r3
 80049f4:	3728      	adds	r7, #40	@ 0x28
 80049f6:	46bd      	mov	sp, r7
 80049f8:	bd80      	pop	{r7, pc}
 80049fa:	bf00      	nop
 80049fc:	fe00e800 	.word	0xfe00e800

08004a00 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004a00:	b480      	push	{r7}
 8004a02:	b087      	sub	sp, #28
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	60f8      	str	r0, [r7, #12]
 8004a08:	607b      	str	r3, [r7, #4]
 8004a0a:	460b      	mov	r3, r1
 8004a0c:	817b      	strh	r3, [r7, #10]
 8004a0e:	4613      	mov	r3, r2
 8004a10:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004a12:	897b      	ldrh	r3, [r7, #10]
 8004a14:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004a18:	7a7b      	ldrb	r3, [r7, #9]
 8004a1a:	041b      	lsls	r3, r3, #16
 8004a1c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004a20:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004a26:	6a3b      	ldr	r3, [r7, #32]
 8004a28:	4313      	orrs	r3, r2
 8004a2a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004a2e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	685a      	ldr	r2, [r3, #4]
 8004a36:	6a3b      	ldr	r3, [r7, #32]
 8004a38:	0d5b      	lsrs	r3, r3, #21
 8004a3a:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8004a3e:	4b08      	ldr	r3, [pc, #32]	@ (8004a60 <I2C_TransferConfig+0x60>)
 8004a40:	430b      	orrs	r3, r1
 8004a42:	43db      	mvns	r3, r3
 8004a44:	ea02 0103 	and.w	r1, r2, r3
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	697a      	ldr	r2, [r7, #20]
 8004a4e:	430a      	orrs	r2, r1
 8004a50:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004a52:	bf00      	nop
 8004a54:	371c      	adds	r7, #28
 8004a56:	46bd      	mov	sp, r7
 8004a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5c:	4770      	bx	lr
 8004a5e:	bf00      	nop
 8004a60:	03ff63ff 	.word	0x03ff63ff

08004a64 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004a64:	b480      	push	{r7}
 8004a66:	b083      	sub	sp, #12
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]
 8004a6c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004a74:	b2db      	uxtb	r3, r3
 8004a76:	2b20      	cmp	r3, #32
 8004a78:	d138      	bne.n	8004aec <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004a80:	2b01      	cmp	r3, #1
 8004a82:	d101      	bne.n	8004a88 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004a84:	2302      	movs	r3, #2
 8004a86:	e032      	b.n	8004aee <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2201      	movs	r2, #1
 8004a8c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2224      	movs	r2, #36	@ 0x24
 8004a94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	681a      	ldr	r2, [r3, #0]
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f022 0201 	bic.w	r2, r2, #1
 8004aa6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	681a      	ldr	r2, [r3, #0]
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004ab6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	6819      	ldr	r1, [r3, #0]
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	683a      	ldr	r2, [r7, #0]
 8004ac4:	430a      	orrs	r2, r1
 8004ac6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	681a      	ldr	r2, [r3, #0]
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f042 0201 	orr.w	r2, r2, #1
 8004ad6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2220      	movs	r2, #32
 8004adc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004ae8:	2300      	movs	r3, #0
 8004aea:	e000      	b.n	8004aee <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004aec:	2302      	movs	r3, #2
  }
}
 8004aee:	4618      	mov	r0, r3
 8004af0:	370c      	adds	r7, #12
 8004af2:	46bd      	mov	sp, r7
 8004af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af8:	4770      	bx	lr

08004afa <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004afa:	b480      	push	{r7}
 8004afc:	b085      	sub	sp, #20
 8004afe:	af00      	add	r7, sp, #0
 8004b00:	6078      	str	r0, [r7, #4]
 8004b02:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004b0a:	b2db      	uxtb	r3, r3
 8004b0c:	2b20      	cmp	r3, #32
 8004b0e:	d139      	bne.n	8004b84 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004b16:	2b01      	cmp	r3, #1
 8004b18:	d101      	bne.n	8004b1e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004b1a:	2302      	movs	r3, #2
 8004b1c:	e033      	b.n	8004b86 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	2201      	movs	r2, #1
 8004b22:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	2224      	movs	r2, #36	@ 0x24
 8004b2a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	681a      	ldr	r2, [r3, #0]
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f022 0201 	bic.w	r2, r2, #1
 8004b3c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004b4c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004b4e:	683b      	ldr	r3, [r7, #0]
 8004b50:	021b      	lsls	r3, r3, #8
 8004b52:	68fa      	ldr	r2, [r7, #12]
 8004b54:	4313      	orrs	r3, r2
 8004b56:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	68fa      	ldr	r2, [r7, #12]
 8004b5e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	681a      	ldr	r2, [r3, #0]
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f042 0201 	orr.w	r2, r2, #1
 8004b6e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2220      	movs	r2, #32
 8004b74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004b80:	2300      	movs	r3, #0
 8004b82:	e000      	b.n	8004b86 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004b84:	2302      	movs	r3, #2
  }
}
 8004b86:	4618      	mov	r0, r3
 8004b88:	3714      	adds	r7, #20
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b90:	4770      	bx	lr
	...

08004b94 <HAL_LPTIM_Init>:
  *         LPTIM_InitTypeDef and initialize the associated handle.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
 8004b94:	b580      	push	{r7, lr}
 8004b96:	b084      	sub	sp, #16
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
  uint32_t tmpcfgr;

  /* Check the LPTIM handle allocation */
  if (hlptim == NULL)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d101      	bne.n	8004ba6 <HAL_LPTIM_Init+0x12>
  {
    return HAL_ERROR;
 8004ba2:	2301      	movs	r3, #1
 8004ba4:	e08f      	b.n	8004cc6 <HAL_LPTIM_Init+0x132>
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));

  assert_param(IS_LPTIM_CLOCK_SOURCE(hlptim->Init.Clock.Source));
  assert_param(IS_LPTIM_CLOCK_PRESCALER(hlptim->Init.Clock.Prescaler));
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	685b      	ldr	r3, [r3, #4]
 8004baa:	2b01      	cmp	r3, #1
  assert_param(IS_LPTIM_COUNTER_SOURCE(hlptim->Init.CounterSource));
#if defined(LPTIM_RCR_REP)
  assert_param(IS_LPTIM_REPETITION(hlptim->Init.RepetitionCounter));
#endif

  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8004bb2:	b2db      	uxtb	r3, r3
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d106      	bne.n	8004bc6 <HAL_LPTIM_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hlptim->Lock = HAL_UNLOCKED;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2200      	movs	r2, #0
 8004bbc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hlptim->MspInitCallback(hlptim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_LPTIM_MspInit(hlptim);
 8004bc0:	6878      	ldr	r0, [r7, #4]
 8004bc2:	f7fd fa7d 	bl	80020c0 <HAL_LPTIM_MspInit>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	2202      	movs	r2, #2
 8004bca:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  }

#endif

  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	68db      	ldr	r3, [r3, #12]
 8004bd4:	60fb      	str	r3, [r7, #12]

  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	685b      	ldr	r3, [r3, #4]
 8004bda:	2b01      	cmp	r3, #1
 8004bdc:	d004      	beq.n	8004be8 <HAL_LPTIM_Init+0x54>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004be2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004be6:	d103      	bne.n	8004bf0 <HAL_LPTIM_Init+0x5c>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	f023 031e 	bic.w	r3, r3, #30
 8004bee:	60fb      	str	r3, [r7, #12]
  }
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	695b      	ldr	r3, [r3, #20]
 8004bf4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004bf8:	4293      	cmp	r3, r2
 8004bfa:	d005      	beq.n	8004c08 <HAL_LPTIM_Init+0x74>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 8004c02:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8004c06:	60fb      	str	r3, [r7, #12]
  }

  /* Clear CKSEL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 8004c08:	68fa      	ldr	r2, [r7, #12]
 8004c0a:	4b31      	ldr	r3, [pc, #196]	@ (8004cd0 <HAL_LPTIM_Init+0x13c>)
 8004c0c:	4013      	ands	r3, r2
 8004c0e:	60fb      	str	r3, [r7, #12]
                          LPTIM_CFGR_WAVPOL | LPTIM_CFGR_PRESC | LPTIM_CFGR_COUNTMODE));

  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	685a      	ldr	r2, [r3, #4]
              hlptim->Init.Clock.Prescaler |
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	689b      	ldr	r3, [r3, #8]
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8004c18:	431a      	orrs	r2, r3
              hlptim->Init.OutputPolarity  |
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	6a1b      	ldr	r3, [r3, #32]
              hlptim->Init.Clock.Prescaler |
 8004c1e:	431a      	orrs	r2, r3
              hlptim->Init.UpdateMode      |
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
              hlptim->Init.OutputPolarity  |
 8004c24:	431a      	orrs	r2, r3
              hlptim->Init.CounterSource);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
              hlptim->Init.UpdateMode      |
 8004c2a:	4313      	orrs	r3, r2
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8004c2c:	68fa      	ldr	r2, [r7, #12]
 8004c2e:	4313      	orrs	r3, r2
 8004c30:	60fb      	str	r3, [r7, #12]

  /* Glitch filters for internal triggers and  external inputs are configured
   * only if an internal clock source is provided to the LPTIM
   */
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC)
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	685b      	ldr	r3, [r3, #4]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d107      	bne.n	8004c4a <HAL_LPTIM_Init+0xb6>
  {
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	69da      	ldr	r2, [r3, #28]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 8004c42:	4313      	orrs	r3, r2
 8004c44:	68fa      	ldr	r2, [r7, #12]
 8004c46:	4313      	orrs	r3, r2
 8004c48:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external clock polarity and digital filter */
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	685b      	ldr	r3, [r3, #4]
 8004c4e:	2b01      	cmp	r3, #1
 8004c50:	d004      	beq.n	8004c5c <HAL_LPTIM_Init+0xc8>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c56:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004c5a:	d107      	bne.n	8004c6c <HAL_LPTIM_Init+0xd8>
  {
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	68da      	ldr	r2, [r3, #12]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8004c64:	4313      	orrs	r3, r2
 8004c66:	68fa      	ldr	r2, [r7, #12]
 8004c68:	4313      	orrs	r3, r2
 8004c6a:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external trigger */
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	695b      	ldr	r3, [r3, #20]
 8004c70:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004c74:	4293      	cmp	r3, r2
 8004c76:	d00a      	beq.n	8004c8e <HAL_LPTIM_Init+0xfa>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	695a      	ldr	r2, [r3, #20]
                hlptim->Init.Trigger.ActiveEdge |
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	699b      	ldr	r3, [r3, #24]
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8004c80:	431a      	orrs	r2, r3
                hlptim->Init.Trigger.SampleTime);
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	69db      	ldr	r3, [r3, #28]
                hlptim->Init.Trigger.ActiveEdge |
 8004c86:	4313      	orrs	r3, r2
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8004c88:	68fa      	ldr	r2, [r7, #12]
 8004c8a:	4313      	orrs	r3, r2
 8004c8c:	60fb      	str	r3, [r7, #12]
  }

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	68fa      	ldr	r2, [r7, #12]
 8004c94:	60da      	str	r2, [r3, #12]

  /* Configure LPTIM input sources */
  if (hlptim->Instance == LPTIM1)
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	4a0e      	ldr	r2, [pc, #56]	@ (8004cd4 <HAL_LPTIM_Init+0x140>)
 8004c9c:	4293      	cmp	r3, r2
 8004c9e:	d108      	bne.n	8004cb2 <HAL_LPTIM_Init+0x11e>
    /* Check LPTIM Input1 and Input2 sources */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));
    assert_param(IS_LPTIM_INPUT2_SOURCE(hlptim->Instance, hlptim->Init.Input2Source));

    /* Configure LPTIM Input1 and Input2 sources */
    hlptim->Instance->OR = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	430a      	orrs	r2, r1
 8004cae:	621a      	str	r2, [r3, #32]
 8004cb0:	e004      	b.n	8004cbc <HAL_LPTIM_Init+0x128>
  {
    /* Check LPTIM Input1 source */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));

    /* Configure LPTIM Input1 source */
    hlptim->Instance->OR = hlptim->Init.Input1Source;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	687a      	ldr	r2, [r7, #4]
 8004cb8:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004cba:	621a      	str	r2, [r3, #32]
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2201      	movs	r2, #1
 8004cc0:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36

  /* Return function status */
  return HAL_OK;
 8004cc4:	2300      	movs	r3, #0
}
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	3710      	adds	r7, #16
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	bd80      	pop	{r7, pc}
 8004cce:	bf00      	nop
 8004cd0:	ff19f1fe 	.word	0xff19f1fe
 8004cd4:	40007c00 	.word	0x40007c00

08004cd8 <HAL_LPTIM_TimeOut_Start_IT>:
  * @param  Timeout Specifies the TimeOut value to reset the counter.
  *         This parameter must be a value between 0x0000 and 0xFFFF.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_TimeOut_Start_IT(LPTIM_HandleTypeDef *hlptim, uint32_t Period, uint32_t Timeout)
{
 8004cd8:	b580      	push	{r7, lr}
 8004cda:	b084      	sub	sp, #16
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	60f8      	str	r0, [r7, #12]
 8004ce0:	60b9      	str	r1, [r7, #8]
 8004ce2:	607a      	str	r2, [r7, #4]
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));
  assert_param(IS_LPTIM_PERIOD(Period));
  assert_param(IS_LPTIM_PULSE(Timeout));

  /* Set the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	2202      	movs	r2, #2
 8004ce8:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36

  /* Enable EXTI Line interrupt on the LPTIM Wake-up Timer */
  __HAL_LPTIM_WAKEUPTIMER_EXTI_ENABLE_IT(hlptim->Instance);
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	4a36      	ldr	r2, [pc, #216]	@ (8004dcc <HAL_LPTIM_TimeOut_Start_IT+0xf4>)
 8004cf2:	4293      	cmp	r3, r2
 8004cf4:	d106      	bne.n	8004d04 <HAL_LPTIM_TimeOut_Start_IT+0x2c>
 8004cf6:	4b36      	ldr	r3, [pc, #216]	@ (8004dd0 <HAL_LPTIM_TimeOut_Start_IT+0xf8>)
 8004cf8:	6a1b      	ldr	r3, [r3, #32]
 8004cfa:	4a35      	ldr	r2, [pc, #212]	@ (8004dd0 <HAL_LPTIM_TimeOut_Start_IT+0xf8>)
 8004cfc:	f043 0301 	orr.w	r3, r3, #1
 8004d00:	6213      	str	r3, [r2, #32]
 8004d02:	e005      	b.n	8004d10 <HAL_LPTIM_TimeOut_Start_IT+0x38>
 8004d04:	4b32      	ldr	r3, [pc, #200]	@ (8004dd0 <HAL_LPTIM_TimeOut_Start_IT+0xf8>)
 8004d06:	6a1b      	ldr	r3, [r3, #32]
 8004d08:	4a31      	ldr	r2, [pc, #196]	@ (8004dd0 <HAL_LPTIM_TimeOut_Start_IT+0xf8>)
 8004d0a:	f043 0302 	orr.w	r3, r3, #2
 8004d0e:	6213      	str	r3, [r2, #32]

  /* Set TIMOUT bit to enable the timeout function */
  hlptim->Instance->CFGR |= LPTIM_CFGR_TIMOUT;
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	68da      	ldr	r2, [r3, #12]
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f442 2200 	orr.w	r2, r2, #524288	@ 0x80000
 8004d1e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	691a      	ldr	r2, [r3, #16]
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f042 0201 	orr.w	r2, r2, #1
 8004d2e:	611a      	str	r2, [r3, #16]

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	2210      	movs	r2, #16
 8004d36:	605a      	str	r2, [r3, #4]

  /* Load the period value in the autoreload register */
  __HAL_LPTIM_AUTORELOAD_SET(hlptim, Period);
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	68ba      	ldr	r2, [r7, #8]
 8004d3e:	619a      	str	r2, [r3, #24]

  /* Wait for the completion of the write operation to the LPTIM_ARR register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 8004d40:	2110      	movs	r1, #16
 8004d42:	68f8      	ldr	r0, [r7, #12]
 8004d44:	f000 f92c 	bl	8004fa0 <LPTIM_WaitForFlag>
 8004d48:	4603      	mov	r3, r0
 8004d4a:	2b03      	cmp	r3, #3
 8004d4c:	d101      	bne.n	8004d52 <HAL_LPTIM_TimeOut_Start_IT+0x7a>
  {
    return HAL_TIMEOUT;
 8004d4e:	2303      	movs	r3, #3
 8004d50:	e038      	b.n	8004dc4 <HAL_LPTIM_TimeOut_Start_IT+0xec>
  }

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	2208      	movs	r2, #8
 8004d58:	605a      	str	r2, [r3, #4]

  /* Load the Timeout value in the compare register */
  __HAL_LPTIM_COMPARE_SET(hlptim, Timeout);
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	687a      	ldr	r2, [r7, #4]
 8004d60:	615a      	str	r2, [r3, #20]

  /* Wait for the completion of the write operation to the LPTIM_CMP register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_CMPOK) == HAL_TIMEOUT)
 8004d62:	2108      	movs	r1, #8
 8004d64:	68f8      	ldr	r0, [r7, #12]
 8004d66:	f000 f91b 	bl	8004fa0 <LPTIM_WaitForFlag>
 8004d6a:	4603      	mov	r3, r0
 8004d6c:	2b03      	cmp	r3, #3
 8004d6e:	d101      	bne.n	8004d74 <HAL_LPTIM_TimeOut_Start_IT+0x9c>
  {
    return HAL_TIMEOUT;
 8004d70:	2303      	movs	r3, #3
 8004d72:	e027      	b.n	8004dc4 <HAL_LPTIM_TimeOut_Start_IT+0xec>
  }

  /* Disable the Peripheral */
  __HAL_LPTIM_DISABLE(hlptim);
 8004d74:	68f8      	ldr	r0, [r7, #12]
 8004d76:	f000 f943 	bl	8005000 <LPTIM_Disable>

  if (HAL_LPTIM_GetState(hlptim) == HAL_LPTIM_STATE_TIMEOUT)
 8004d7a:	68f8      	ldr	r0, [r7, #12]
 8004d7c:	f000 f901 	bl	8004f82 <HAL_LPTIM_GetState>
 8004d80:	4603      	mov	r3, r0
 8004d82:	2b03      	cmp	r3, #3
 8004d84:	d101      	bne.n	8004d8a <HAL_LPTIM_TimeOut_Start_IT+0xb2>
  {
    return HAL_TIMEOUT;
 8004d86:	2303      	movs	r3, #3
 8004d88:	e01c      	b.n	8004dc4 <HAL_LPTIM_TimeOut_Start_IT+0xec>
  }

  /* Enable Compare match interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_CMPM);
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	689a      	ldr	r2, [r3, #8]
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f042 0201 	orr.w	r2, r2, #1
 8004d98:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	691a      	ldr	r2, [r3, #16]
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f042 0201 	orr.w	r2, r2, #1
 8004da8:	611a      	str	r2, [r3, #16]

  /* Start timer in continuous mode */
  __HAL_LPTIM_START_CONTINUOUS(hlptim);
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	691a      	ldr	r2, [r3, #16]
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f042 0204 	orr.w	r2, r2, #4
 8004db8:	611a      	str	r2, [r3, #16]

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	2201      	movs	r2, #1
 8004dbe:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36

  /* Return function status */
  return HAL_OK;
 8004dc2:	2300      	movs	r3, #0
}
 8004dc4:	4618      	mov	r0, r3
 8004dc6:	3710      	adds	r7, #16
 8004dc8:	46bd      	mov	sp, r7
 8004dca:	bd80      	pop	{r7, pc}
 8004dcc:	40007c00 	.word	0x40007c00
 8004dd0:	40010400 	.word	0x40010400

08004dd4 <HAL_LPTIM_IRQHandler>:
  * @brief  Handle LPTIM interrupt request.
  * @param  hlptim LPTIM handle
  * @retval None
  */
void HAL_LPTIM_IRQHandler(LPTIM_HandleTypeDef *hlptim)
{
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	b082      	sub	sp, #8
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	6078      	str	r0, [r7, #4]
  /* Compare match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPM) != RESET)
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f003 0301 	and.w	r3, r3, #1
 8004de6:	2b01      	cmp	r3, #1
 8004de8:	d10d      	bne.n	8004e06 <HAL_LPTIM_IRQHandler+0x32>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPM) != RESET)
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	689b      	ldr	r3, [r3, #8]
 8004df0:	f003 0301 	and.w	r3, r3, #1
 8004df4:	2b01      	cmp	r3, #1
 8004df6:	d106      	bne.n	8004e06 <HAL_LPTIM_IRQHandler+0x32>
    {
      /* Clear Compare match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPM);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	2201      	movs	r2, #1
 8004dfe:	605a      	str	r2, [r3, #4]

      /* Compare match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareMatchCallback(hlptim);
#else
      HAL_LPTIM_CompareMatchCallback(hlptim);
 8004e00:	6878      	ldr	r0, [r7, #4]
 8004e02:	f7fd f837 	bl	8001e74 <HAL_LPTIM_CompareMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARRM) != RESET)
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f003 0302 	and.w	r3, r3, #2
 8004e10:	2b02      	cmp	r3, #2
 8004e12:	d10d      	bne.n	8004e30 <HAL_LPTIM_IRQHandler+0x5c>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARRM) != RESET)
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	689b      	ldr	r3, [r3, #8]
 8004e1a:	f003 0302 	and.w	r3, r3, #2
 8004e1e:	2b02      	cmp	r3, #2
 8004e20:	d106      	bne.n	8004e30 <HAL_LPTIM_IRQHandler+0x5c>
    {
      /* Clear Autoreload match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARRM);
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	2202      	movs	r2, #2
 8004e28:	605a      	str	r2, [r3, #4]

      /* Autoreload match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadMatchCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadMatchCallback(hlptim);
 8004e2a:	6878      	ldr	r0, [r7, #4]
 8004e2c:	f000 f86d 	bl	8004f0a <HAL_LPTIM_AutoReloadMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Trigger detected interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_EXTTRIG) != RESET)
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f003 0304 	and.w	r3, r3, #4
 8004e3a:	2b04      	cmp	r3, #4
 8004e3c:	d10d      	bne.n	8004e5a <HAL_LPTIM_IRQHandler+0x86>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_EXTTRIG) != RESET)
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	689b      	ldr	r3, [r3, #8]
 8004e44:	f003 0304 	and.w	r3, r3, #4
 8004e48:	2b04      	cmp	r3, #4
 8004e4a:	d106      	bne.n	8004e5a <HAL_LPTIM_IRQHandler+0x86>
    {
      /* Clear Trigger detected flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_EXTTRIG);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	2204      	movs	r2, #4
 8004e52:	605a      	str	r2, [r3, #4]

      /* Trigger detected callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->TriggerCallback(hlptim);
#else
      HAL_LPTIM_TriggerCallback(hlptim);
 8004e54:	6878      	ldr	r0, [r7, #4]
 8004e56:	f000 f862 	bl	8004f1e <HAL_LPTIM_TriggerCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Compare write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPOK) != RESET)
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f003 0308 	and.w	r3, r3, #8
 8004e64:	2b08      	cmp	r3, #8
 8004e66:	d10d      	bne.n	8004e84 <HAL_LPTIM_IRQHandler+0xb0>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPOK) != RESET)
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	689b      	ldr	r3, [r3, #8]
 8004e6e:	f003 0308 	and.w	r3, r3, #8
 8004e72:	2b08      	cmp	r3, #8
 8004e74:	d106      	bne.n	8004e84 <HAL_LPTIM_IRQHandler+0xb0>
    {
      /* Clear Compare write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	2208      	movs	r2, #8
 8004e7c:	605a      	str	r2, [r3, #4]

      /* Compare write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareWriteCallback(hlptim);
#else
      HAL_LPTIM_CompareWriteCallback(hlptim);
 8004e7e:	6878      	ldr	r0, [r7, #4]
 8004e80:	f000 f857 	bl	8004f32 <HAL_LPTIM_CompareWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARROK) != RESET)
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f003 0310 	and.w	r3, r3, #16
 8004e8e:	2b10      	cmp	r3, #16
 8004e90:	d10d      	bne.n	8004eae <HAL_LPTIM_IRQHandler+0xda>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARROK) != RESET)
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	689b      	ldr	r3, [r3, #8]
 8004e98:	f003 0310 	and.w	r3, r3, #16
 8004e9c:	2b10      	cmp	r3, #16
 8004e9e:	d106      	bne.n	8004eae <HAL_LPTIM_IRQHandler+0xda>
    {
      /* Clear Autoreload write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	2210      	movs	r2, #16
 8004ea6:	605a      	str	r2, [r3, #4]

      /* Autoreload write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadWriteCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadWriteCallback(hlptim);
 8004ea8:	6878      	ldr	r0, [r7, #4]
 8004eaa:	f000 f84c 	bl	8004f46 <HAL_LPTIM_AutoReloadWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Down to Up interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_UP) != RESET)
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f003 0320 	and.w	r3, r3, #32
 8004eb8:	2b20      	cmp	r3, #32
 8004eba:	d10d      	bne.n	8004ed8 <HAL_LPTIM_IRQHandler+0x104>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_UP) != RESET)
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	689b      	ldr	r3, [r3, #8]
 8004ec2:	f003 0320 	and.w	r3, r3, #32
 8004ec6:	2b20      	cmp	r3, #32
 8004ec8:	d106      	bne.n	8004ed8 <HAL_LPTIM_IRQHandler+0x104>
    {
      /* Clear Direction counter changed from Down to Up flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_UP);
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	2220      	movs	r2, #32
 8004ed0:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Down to Up Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionUpCallback(hlptim);
#else
      HAL_LPTIM_DirectionUpCallback(hlptim);
 8004ed2:	6878      	ldr	r0, [r7, #4]
 8004ed4:	f000 f841 	bl	8004f5a <HAL_LPTIM_DirectionUpCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Up to Down interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_DOWN) != RESET)
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ee2:	2b40      	cmp	r3, #64	@ 0x40
 8004ee4:	d10d      	bne.n	8004f02 <HAL_LPTIM_IRQHandler+0x12e>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_DOWN) != RESET)
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	689b      	ldr	r3, [r3, #8]
 8004eec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ef0:	2b40      	cmp	r3, #64	@ 0x40
 8004ef2:	d106      	bne.n	8004f02 <HAL_LPTIM_IRQHandler+0x12e>
    {
      /* Clear Direction counter changed from Up to Down flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_DOWN);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	2240      	movs	r2, #64	@ 0x40
 8004efa:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Up to Down Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionDownCallback(hlptim);
#else
      HAL_LPTIM_DirectionDownCallback(hlptim);
 8004efc:	6878      	ldr	r0, [r7, #4]
 8004efe:	f000 f836 	bl	8004f6e <HAL_LPTIM_DirectionDownCallback>
      HAL_LPTIM_RepCounterWriteCallback(hlptim);
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }
#endif
}
 8004f02:	bf00      	nop
 8004f04:	3708      	adds	r7, #8
 8004f06:	46bd      	mov	sp, r7
 8004f08:	bd80      	pop	{r7, pc}

08004f0a <HAL_LPTIM_AutoReloadMatchCallback>:
  * @brief  Autoreload match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 8004f0a:	b480      	push	{r7}
 8004f0c:	b083      	sub	sp, #12
 8004f0e:	af00      	add	r7, sp, #0
 8004f10:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadMatchCallback could be implemented in the user file
   */
}
 8004f12:	bf00      	nop
 8004f14:	370c      	adds	r7, #12
 8004f16:	46bd      	mov	sp, r7
 8004f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1c:	4770      	bx	lr

08004f1e <HAL_LPTIM_TriggerCallback>:
  * @brief  Trigger detected callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_TriggerCallback(LPTIM_HandleTypeDef *hlptim)
{
 8004f1e:	b480      	push	{r7}
 8004f20:	b083      	sub	sp, #12
 8004f22:	af00      	add	r7, sp, #0
 8004f24:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_TriggerCallback could be implemented in the user file
   */
}
 8004f26:	bf00      	nop
 8004f28:	370c      	adds	r7, #12
 8004f2a:	46bd      	mov	sp, r7
 8004f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f30:	4770      	bx	lr

08004f32 <HAL_LPTIM_CompareWriteCallback>:
  * @brief  Compare write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 8004f32:	b480      	push	{r7}
 8004f34:	b083      	sub	sp, #12
 8004f36:	af00      	add	r7, sp, #0
 8004f38:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareWriteCallback could be implemented in the user file
   */
}
 8004f3a:	bf00      	nop
 8004f3c:	370c      	adds	r7, #12
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f44:	4770      	bx	lr

08004f46 <HAL_LPTIM_AutoReloadWriteCallback>:
  * @brief  Autoreload write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 8004f46:	b480      	push	{r7}
 8004f48:	b083      	sub	sp, #12
 8004f4a:	af00      	add	r7, sp, #0
 8004f4c:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadWriteCallback could be implemented in the user file
   */
}
 8004f4e:	bf00      	nop
 8004f50:	370c      	adds	r7, #12
 8004f52:	46bd      	mov	sp, r7
 8004f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f58:	4770      	bx	lr

08004f5a <HAL_LPTIM_DirectionUpCallback>:
  * @brief  Direction counter changed from Down to Up callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionUpCallback(LPTIM_HandleTypeDef *hlptim)
{
 8004f5a:	b480      	push	{r7}
 8004f5c:	b083      	sub	sp, #12
 8004f5e:	af00      	add	r7, sp, #0
 8004f60:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionUpCallback could be implemented in the user file
   */
}
 8004f62:	bf00      	nop
 8004f64:	370c      	adds	r7, #12
 8004f66:	46bd      	mov	sp, r7
 8004f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6c:	4770      	bx	lr

08004f6e <HAL_LPTIM_DirectionDownCallback>:
  * @brief  Direction counter changed from Up to Down callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionDownCallback(LPTIM_HandleTypeDef *hlptim)
{
 8004f6e:	b480      	push	{r7}
 8004f70:	b083      	sub	sp, #12
 8004f72:	af00      	add	r7, sp, #0
 8004f74:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionDownCallback could be implemented in the user file
   */
}
 8004f76:	bf00      	nop
 8004f78:	370c      	adds	r7, #12
 8004f7a:	46bd      	mov	sp, r7
 8004f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f80:	4770      	bx	lr

08004f82 <HAL_LPTIM_GetState>:
  * @brief  Return the LPTIM handle state.
  * @param  hlptim LPTIM handle
  * @retval HAL state
  */
HAL_LPTIM_StateTypeDef HAL_LPTIM_GetState(const LPTIM_HandleTypeDef *hlptim)
{
 8004f82:	b480      	push	{r7}
 8004f84:	b083      	sub	sp, #12
 8004f86:	af00      	add	r7, sp, #0
 8004f88:	6078      	str	r0, [r7, #4]
  /* Return LPTIM handle state */
  return hlptim->State;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8004f90:	b2db      	uxtb	r3, r3
}
 8004f92:	4618      	mov	r0, r3
 8004f94:	370c      	adds	r7, #12
 8004f96:	46bd      	mov	sp, r7
 8004f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9c:	4770      	bx	lr
	...

08004fa0 <LPTIM_WaitForFlag>:
  *                the configuration information for LPTIM module.
  * @param  flag   The lptim flag
  * @retval HAL status
  */
static HAL_StatusTypeDef LPTIM_WaitForFlag(const LPTIM_HandleTypeDef *hlptim, uint32_t flag)
{
 8004fa0:	b480      	push	{r7}
 8004fa2:	b085      	sub	sp, #20
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	6078      	str	r0, [r7, #4]
 8004fa8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef result = HAL_OK;
 8004faa:	2300      	movs	r3, #0
 8004fac:	73fb      	strb	r3, [r7, #15]
  uint32_t count = TIMEOUT * (SystemCoreClock / 20UL / 1000UL);
 8004fae:	4b12      	ldr	r3, [pc, #72]	@ (8004ff8 <LPTIM_WaitForFlag+0x58>)
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	4a12      	ldr	r2, [pc, #72]	@ (8004ffc <LPTIM_WaitForFlag+0x5c>)
 8004fb4:	fba2 2303 	umull	r2, r3, r2, r3
 8004fb8:	0b9b      	lsrs	r3, r3, #14
 8004fba:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004fbe:	fb02 f303 	mul.w	r3, r2, r3
 8004fc2:	60bb      	str	r3, [r7, #8]
  do
  {
    count--;
 8004fc4:	68bb      	ldr	r3, [r7, #8]
 8004fc6:	3b01      	subs	r3, #1
 8004fc8:	60bb      	str	r3, [r7, #8]
    if (count == 0UL)
 8004fca:	68bb      	ldr	r3, [r7, #8]
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d101      	bne.n	8004fd4 <LPTIM_WaitForFlag+0x34>
    {
      result = HAL_TIMEOUT;
 8004fd0:	2303      	movs	r3, #3
 8004fd2:	73fb      	strb	r3, [r7, #15]
    }
  } while ((!(__HAL_LPTIM_GET_FLAG((hlptim), (flag)))) && (count != 0UL));
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	681a      	ldr	r2, [r3, #0]
 8004fda:	683b      	ldr	r3, [r7, #0]
 8004fdc:	4013      	ands	r3, r2
 8004fde:	683a      	ldr	r2, [r7, #0]
 8004fe0:	429a      	cmp	r2, r3
 8004fe2:	d002      	beq.n	8004fea <LPTIM_WaitForFlag+0x4a>
 8004fe4:	68bb      	ldr	r3, [r7, #8]
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d1ec      	bne.n	8004fc4 <LPTIM_WaitForFlag+0x24>

  return result;
 8004fea:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fec:	4618      	mov	r0, r3
 8004fee:	3714      	adds	r7, #20
 8004ff0:	46bd      	mov	sp, r7
 8004ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff6:	4770      	bx	lr
 8004ff8:	20000000 	.word	0x20000000
 8004ffc:	d1b71759 	.word	0xd1b71759

08005000 <LPTIM_Disable>:
  *         Please check Errata Sheet ES0335 for more details under "MCU may remain
  *         stuck in LPTIM interrupt when entering Stop mode" section.
  * @retval None
  */
void LPTIM_Disable(LPTIM_HandleTypeDef *hlptim)
{
 8005000:	b580      	push	{r7, lr}
 8005002:	b08c      	sub	sp, #48	@ 0x30
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]
  uint32_t tmpclksource = 0;
 8005008:	2300      	movs	r3, #0
 800500a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800500c:	f3ef 8310 	mrs	r3, PRIMASK
 8005010:	60fb      	str	r3, [r7, #12]
  return(result);
 8005012:	68fb      	ldr	r3, [r7, #12]
#if defined(LPTIM_RCR_REP)
  uint32_t tmpRCR;
#endif

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 8005014:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005016:	2301      	movs	r3, #1
 8005018:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800501a:	693b      	ldr	r3, [r7, #16]
 800501c:	f383 8810 	msr	PRIMASK, r3
}
 8005020:	bf00      	nop
  __set_PRIMASK(1) ;

  /*********** Save LPTIM Config ***********/
  /* Save LPTIM source clock */
  switch ((uint32_t)hlptim->Instance)
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	4a73      	ldr	r2, [pc, #460]	@ (80051f4 <LPTIM_Disable+0x1f4>)
 8005028:	4293      	cmp	r3, r2
 800502a:	d003      	beq.n	8005034 <LPTIM_Disable+0x34>
 800502c:	4a72      	ldr	r2, [pc, #456]	@ (80051f8 <LPTIM_Disable+0x1f8>)
 800502e:	4293      	cmp	r3, r2
 8005030:	d007      	beq.n	8005042 <LPTIM_Disable+0x42>
    case LPTIM2_BASE:
      tmpclksource = __HAL_RCC_GET_LPTIM2_SOURCE();
      break;
#endif /* LPTIM2 */
    default:
      break;
 8005032:	e00d      	b.n	8005050 <LPTIM_Disable+0x50>
      tmpclksource = __HAL_RCC_GET_LPTIM1_SOURCE();
 8005034:	4b71      	ldr	r3, [pc, #452]	@ (80051fc <LPTIM_Disable+0x1fc>)
 8005036:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800503a:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 800503e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      break;
 8005040:	e006      	b.n	8005050 <LPTIM_Disable+0x50>
      tmpclksource = __HAL_RCC_GET_LPTIM2_SOURCE();
 8005042:	4b6e      	ldr	r3, [pc, #440]	@ (80051fc <LPTIM_Disable+0x1fc>)
 8005044:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005048:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800504c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      break;
 800504e:	bf00      	nop
  }

  /* Save LPTIM configuration registers */
  tmpIER = hlptim->Instance->IER;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	689b      	ldr	r3, [r3, #8]
 8005056:	627b      	str	r3, [r7, #36]	@ 0x24
  tmpCFGR = hlptim->Instance->CFGR;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	68db      	ldr	r3, [r3, #12]
 800505e:	623b      	str	r3, [r7, #32]
  tmpCMP = hlptim->Instance->CMP;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	695b      	ldr	r3, [r3, #20]
 8005066:	61fb      	str	r3, [r7, #28]
  tmpARR = hlptim->Instance->ARR;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	699b      	ldr	r3, [r3, #24]
 800506e:	61bb      	str	r3, [r7, #24]
  tmpOR = hlptim->Instance->OR;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	6a1b      	ldr	r3, [r3, #32]
 8005076:	617b      	str	r3, [r7, #20]
#if defined(LPTIM_RCR_REP)
  tmpRCR = hlptim->Instance->RCR;
#endif

  /*********** Reset LPTIM ***********/
  switch ((uint32_t)hlptim->Instance)
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	4a5d      	ldr	r2, [pc, #372]	@ (80051f4 <LPTIM_Disable+0x1f4>)
 800507e:	4293      	cmp	r3, r2
 8005080:	d003      	beq.n	800508a <LPTIM_Disable+0x8a>
 8005082:	4a5d      	ldr	r2, [pc, #372]	@ (80051f8 <LPTIM_Disable+0x1f8>)
 8005084:	4293      	cmp	r3, r2
 8005086:	d00d      	beq.n	80050a4 <LPTIM_Disable+0xa4>
      __HAL_RCC_LPTIM2_FORCE_RESET();
      __HAL_RCC_LPTIM2_RELEASE_RESET();
      break;
#endif /* LPTIM2 */
    default:
      break;
 8005088:	e019      	b.n	80050be <LPTIM_Disable+0xbe>
      __HAL_RCC_LPTIM1_FORCE_RESET();
 800508a:	4b5c      	ldr	r3, [pc, #368]	@ (80051fc <LPTIM_Disable+0x1fc>)
 800508c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800508e:	4a5b      	ldr	r2, [pc, #364]	@ (80051fc <LPTIM_Disable+0x1fc>)
 8005090:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005094:	6393      	str	r3, [r2, #56]	@ 0x38
      __HAL_RCC_LPTIM1_RELEASE_RESET();
 8005096:	4b59      	ldr	r3, [pc, #356]	@ (80051fc <LPTIM_Disable+0x1fc>)
 8005098:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800509a:	4a58      	ldr	r2, [pc, #352]	@ (80051fc <LPTIM_Disable+0x1fc>)
 800509c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80050a0:	6393      	str	r3, [r2, #56]	@ 0x38
      break;
 80050a2:	e00c      	b.n	80050be <LPTIM_Disable+0xbe>
      __HAL_RCC_LPTIM2_FORCE_RESET();
 80050a4:	4b55      	ldr	r3, [pc, #340]	@ (80051fc <LPTIM_Disable+0x1fc>)
 80050a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80050a8:	4a54      	ldr	r2, [pc, #336]	@ (80051fc <LPTIM_Disable+0x1fc>)
 80050aa:	f043 0320 	orr.w	r3, r3, #32
 80050ae:	63d3      	str	r3, [r2, #60]	@ 0x3c
      __HAL_RCC_LPTIM2_RELEASE_RESET();
 80050b0:	4b52      	ldr	r3, [pc, #328]	@ (80051fc <LPTIM_Disable+0x1fc>)
 80050b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80050b4:	4a51      	ldr	r2, [pc, #324]	@ (80051fc <LPTIM_Disable+0x1fc>)
 80050b6:	f023 0320 	bic.w	r3, r3, #32
 80050ba:	63d3      	str	r3, [r2, #60]	@ 0x3c
      break;
 80050bc:	bf00      	nop

  /*********** Restore LPTIM Config ***********/
#if defined(LPTIM_RCR_REP)
  if ((tmpCMP != 0UL) || (tmpARR != 0UL) || (tmpRCR != 0UL))
#else
  if ((tmpCMP != 0UL) || (tmpARR != 0UL))
 80050be:	69fb      	ldr	r3, [r7, #28]
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d102      	bne.n	80050ca <LPTIM_Disable+0xca>
 80050c4:	69bb      	ldr	r3, [r7, #24]
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d075      	beq.n	80051b6 <LPTIM_Disable+0x1b6>
#endif
  {
    /* Force LPTIM source kernel clock from APB */
    switch ((uint32_t)hlptim->Instance)
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	4a49      	ldr	r2, [pc, #292]	@ (80051f4 <LPTIM_Disable+0x1f4>)
 80050d0:	4293      	cmp	r3, r2
 80050d2:	d003      	beq.n	80050dc <LPTIM_Disable+0xdc>
 80050d4:	4a48      	ldr	r2, [pc, #288]	@ (80051f8 <LPTIM_Disable+0x1f8>)
 80050d6:	4293      	cmp	r3, r2
 80050d8:	d009      	beq.n	80050ee <LPTIM_Disable+0xee>
      case LPTIM2_BASE:
        __HAL_RCC_LPTIM2_CONFIG(RCC_LPTIM2CLKSOURCE_PCLK1);
        break;
#endif /* LPTIM2 */
      default:
        break;
 80050da:	e011      	b.n	8005100 <LPTIM_Disable+0x100>
        __HAL_RCC_LPTIM1_CONFIG(RCC_LPTIM1CLKSOURCE_PCLK1);
 80050dc:	4b47      	ldr	r3, [pc, #284]	@ (80051fc <LPTIM_Disable+0x1fc>)
 80050de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80050e2:	4a46      	ldr	r2, [pc, #280]	@ (80051fc <LPTIM_Disable+0x1fc>)
 80050e4:	f423 2340 	bic.w	r3, r3, #786432	@ 0xc0000
 80050e8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
        break;
 80050ec:	e008      	b.n	8005100 <LPTIM_Disable+0x100>
        __HAL_RCC_LPTIM2_CONFIG(RCC_LPTIM2CLKSOURCE_PCLK1);
 80050ee:	4b43      	ldr	r3, [pc, #268]	@ (80051fc <LPTIM_Disable+0x1fc>)
 80050f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80050f4:	4a41      	ldr	r2, [pc, #260]	@ (80051fc <LPTIM_Disable+0x1fc>)
 80050f6:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 80050fa:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
        break;
 80050fe:	bf00      	nop
    }

    if (tmpCMP != 0UL)
 8005100:	69fb      	ldr	r3, [r7, #28]
 8005102:	2b00      	cmp	r3, #0
 8005104:	d01a      	beq.n	800513c <LPTIM_Disable+0x13c>
    {
      /* Restore CMP register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	691a      	ldr	r2, [r3, #16]
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	f042 0201 	orr.w	r2, r2, #1
 8005114:	611a      	str	r2, [r3, #16]
      hlptim->Instance->CMP = tmpCMP;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	69fa      	ldr	r2, [r7, #28]
 800511c:	615a      	str	r2, [r3, #20]

      /* Wait for the completion of the write operation to the LPTIM_CMP register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_CMPOK) == HAL_TIMEOUT)
 800511e:	2108      	movs	r1, #8
 8005120:	6878      	ldr	r0, [r7, #4]
 8005122:	f7ff ff3d 	bl	8004fa0 <LPTIM_WaitForFlag>
 8005126:	4603      	mov	r3, r0
 8005128:	2b03      	cmp	r3, #3
 800512a:	d103      	bne.n	8005134 <LPTIM_Disable+0x134>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2203      	movs	r2, #3
 8005130:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
      }
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	2208      	movs	r2, #8
 800513a:	605a      	str	r2, [r3, #4]
    }

    if (tmpARR != 0UL)
 800513c:	69bb      	ldr	r3, [r7, #24]
 800513e:	2b00      	cmp	r3, #0
 8005140:	d01a      	beq.n	8005178 <LPTIM_Disable+0x178>
    {
      /* Restore ARR register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	691a      	ldr	r2, [r3, #16]
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f042 0201 	orr.w	r2, r2, #1
 8005150:	611a      	str	r2, [r3, #16]
      hlptim->Instance->ARR = tmpARR;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	69ba      	ldr	r2, [r7, #24]
 8005158:	619a      	str	r2, [r3, #24]

      /* Wait for the completion of the write operation to the LPTIM_ARR register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 800515a:	2110      	movs	r1, #16
 800515c:	6878      	ldr	r0, [r7, #4]
 800515e:	f7ff ff1f 	bl	8004fa0 <LPTIM_WaitForFlag>
 8005162:	4603      	mov	r3, r0
 8005164:	2b03      	cmp	r3, #3
 8005166:	d103      	bne.n	8005170 <LPTIM_Disable+0x170>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	2203      	movs	r2, #3
 800516c:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
      }

      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	2210      	movs	r2, #16
 8005176:	605a      	str	r2, [r3, #4]
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_REPOK);
    }
#endif

    /* Restore LPTIM source kernel clock */
    switch ((uint32_t)hlptim->Instance)
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	4a1d      	ldr	r2, [pc, #116]	@ (80051f4 <LPTIM_Disable+0x1f4>)
 800517e:	4293      	cmp	r3, r2
 8005180:	d003      	beq.n	800518a <LPTIM_Disable+0x18a>
 8005182:	4a1d      	ldr	r2, [pc, #116]	@ (80051f8 <LPTIM_Disable+0x1f8>)
 8005184:	4293      	cmp	r3, r2
 8005186:	d00b      	beq.n	80051a0 <LPTIM_Disable+0x1a0>
      case LPTIM2_BASE:
        __HAL_RCC_LPTIM2_CONFIG(tmpclksource);
        break;
#endif /* LPTIM2 */
      default:
        break;
 8005188:	e015      	b.n	80051b6 <LPTIM_Disable+0x1b6>
        __HAL_RCC_LPTIM1_CONFIG(tmpclksource);
 800518a:	4b1c      	ldr	r3, [pc, #112]	@ (80051fc <LPTIM_Disable+0x1fc>)
 800518c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005190:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005194:	4919      	ldr	r1, [pc, #100]	@ (80051fc <LPTIM_Disable+0x1fc>)
 8005196:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005198:	4313      	orrs	r3, r2
 800519a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
        break;
 800519e:	e00a      	b.n	80051b6 <LPTIM_Disable+0x1b6>
        __HAL_RCC_LPTIM2_CONFIG(tmpclksource);
 80051a0:	4b16      	ldr	r3, [pc, #88]	@ (80051fc <LPTIM_Disable+0x1fc>)
 80051a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051a6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80051aa:	4914      	ldr	r1, [pc, #80]	@ (80051fc <LPTIM_Disable+0x1fc>)
 80051ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80051ae:	4313      	orrs	r3, r2
 80051b0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
        break;
 80051b4:	bf00      	nop
    }
  }

  /* Restore configuration registers (LPTIM should be disabled first) */
  hlptim->Instance->CR &= ~(LPTIM_CR_ENABLE);
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	691a      	ldr	r2, [r3, #16]
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f022 0201 	bic.w	r2, r2, #1
 80051c4:	611a      	str	r2, [r3, #16]
  hlptim->Instance->IER = tmpIER;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80051cc:	609a      	str	r2, [r3, #8]
  hlptim->Instance->CFGR = tmpCFGR;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	6a3a      	ldr	r2, [r7, #32]
 80051d4:	60da      	str	r2, [r3, #12]
  hlptim->Instance->OR = tmpOR;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	697a      	ldr	r2, [r7, #20]
 80051dc:	621a      	str	r2, [r3, #32]
 80051de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051e0:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80051e2:	68bb      	ldr	r3, [r7, #8]
 80051e4:	f383 8810 	msr	PRIMASK, r3
}
 80051e8:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 80051ea:	bf00      	nop
 80051ec:	3730      	adds	r7, #48	@ 0x30
 80051ee:	46bd      	mov	sp, r7
 80051f0:	bd80      	pop	{r7, pc}
 80051f2:	bf00      	nop
 80051f4:	40007c00 	.word	0x40007c00
 80051f8:	40009400 	.word	0x40009400
 80051fc:	40021000 	.word	0x40021000

08005200 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8005200:	b480      	push	{r7}
 8005202:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005204:	4b05      	ldr	r3, [pc, #20]	@ (800521c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	4a04      	ldr	r2, [pc, #16]	@ (800521c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800520a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800520e:	6013      	str	r3, [r2, #0]
}
 8005210:	bf00      	nop
 8005212:	46bd      	mov	sp, r7
 8005214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005218:	4770      	bx	lr
 800521a:	bf00      	nop
 800521c:	40007000 	.word	0x40007000

08005220 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8005220:	b480      	push	{r7}
 8005222:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8005224:	4b04      	ldr	r3, [pc, #16]	@ (8005238 <HAL_PWREx_GetVoltageRange+0x18>)
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 800522c:	4618      	mov	r0, r3
 800522e:	46bd      	mov	sp, r7
 8005230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005234:	4770      	bx	lr
 8005236:	bf00      	nop
 8005238:	40007000 	.word	0x40007000

0800523c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800523c:	b480      	push	{r7}
 800523e:	b085      	sub	sp, #20
 8005240:	af00      	add	r7, sp, #0
 8005242:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800524a:	d130      	bne.n	80052ae <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800524c:	4b23      	ldr	r3, [pc, #140]	@ (80052dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005254:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005258:	d038      	beq.n	80052cc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800525a:	4b20      	ldr	r3, [pc, #128]	@ (80052dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005262:	4a1e      	ldr	r2, [pc, #120]	@ (80052dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005264:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005268:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800526a:	4b1d      	ldr	r3, [pc, #116]	@ (80052e0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	2232      	movs	r2, #50	@ 0x32
 8005270:	fb02 f303 	mul.w	r3, r2, r3
 8005274:	4a1b      	ldr	r2, [pc, #108]	@ (80052e4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8005276:	fba2 2303 	umull	r2, r3, r2, r3
 800527a:	0c9b      	lsrs	r3, r3, #18
 800527c:	3301      	adds	r3, #1
 800527e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005280:	e002      	b.n	8005288 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	3b01      	subs	r3, #1
 8005286:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005288:	4b14      	ldr	r3, [pc, #80]	@ (80052dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800528a:	695b      	ldr	r3, [r3, #20]
 800528c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005290:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005294:	d102      	bne.n	800529c <HAL_PWREx_ControlVoltageScaling+0x60>
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	2b00      	cmp	r3, #0
 800529a:	d1f2      	bne.n	8005282 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800529c:	4b0f      	ldr	r3, [pc, #60]	@ (80052dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800529e:	695b      	ldr	r3, [r3, #20]
 80052a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80052a4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80052a8:	d110      	bne.n	80052cc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80052aa:	2303      	movs	r3, #3
 80052ac:	e00f      	b.n	80052ce <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80052ae:	4b0b      	ldr	r3, [pc, #44]	@ (80052dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80052b6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80052ba:	d007      	beq.n	80052cc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80052bc:	4b07      	ldr	r3, [pc, #28]	@ (80052dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80052c4:	4a05      	ldr	r2, [pc, #20]	@ (80052dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80052c6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80052ca:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80052cc:	2300      	movs	r3, #0
}
 80052ce:	4618      	mov	r0, r3
 80052d0:	3714      	adds	r7, #20
 80052d2:	46bd      	mov	sp, r7
 80052d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d8:	4770      	bx	lr
 80052da:	bf00      	nop
 80052dc:	40007000 	.word	0x40007000
 80052e0:	20000000 	.word	0x20000000
 80052e4:	431bde83 	.word	0x431bde83

080052e8 <HAL_PWREx_EnterSTOP0Mode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop mode with WFI instruction
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWREx_EnterSTOP0Mode(uint8_t STOPEntry)
{
 80052e8:	b480      	push	{r7}
 80052ea:	b083      	sub	sp, #12
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	4603      	mov	r3, r0
 80052f0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* Stop 0 mode with Main Regulator */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_CR1_LPMS_STOP0);
 80052f2:	4b10      	ldr	r3, [pc, #64]	@ (8005334 <HAL_PWREx_EnterSTOP0Mode+0x4c>)
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	4a0f      	ldr	r2, [pc, #60]	@ (8005334 <HAL_PWREx_EnterSTOP0Mode+0x4c>)
 80052f8:	f023 0307 	bic.w	r3, r3, #7
 80052fc:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80052fe:	4b0e      	ldr	r3, [pc, #56]	@ (8005338 <HAL_PWREx_EnterSTOP0Mode+0x50>)
 8005300:	691b      	ldr	r3, [r3, #16]
 8005302:	4a0d      	ldr	r2, [pc, #52]	@ (8005338 <HAL_PWREx_EnterSTOP0Mode+0x50>)
 8005304:	f043 0304 	orr.w	r3, r3, #4
 8005308:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 800530a:	79fb      	ldrb	r3, [r7, #7]
 800530c:	2b01      	cmp	r3, #1
 800530e:	d101      	bne.n	8005314 <HAL_PWREx_EnterSTOP0Mode+0x2c>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8005310:	bf30      	wfi
 8005312:	e002      	b.n	800531a <HAL_PWREx_EnterSTOP0Mode+0x32>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8005314:	bf40      	sev
    __WFE();
 8005316:	bf20      	wfe
    __WFE();
 8005318:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800531a:	4b07      	ldr	r3, [pc, #28]	@ (8005338 <HAL_PWREx_EnterSTOP0Mode+0x50>)
 800531c:	691b      	ldr	r3, [r3, #16]
 800531e:	4a06      	ldr	r2, [pc, #24]	@ (8005338 <HAL_PWREx_EnterSTOP0Mode+0x50>)
 8005320:	f023 0304 	bic.w	r3, r3, #4
 8005324:	6113      	str	r3, [r2, #16]
}
 8005326:	bf00      	nop
 8005328:	370c      	adds	r7, #12
 800532a:	46bd      	mov	sp, r7
 800532c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005330:	4770      	bx	lr
 8005332:	bf00      	nop
 8005334:	40007000 	.word	0x40007000
 8005338:	e000ed00 	.word	0xe000ed00

0800533c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800533c:	b580      	push	{r7, lr}
 800533e:	b088      	sub	sp, #32
 8005340:	af00      	add	r7, sp, #0
 8005342:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	2b00      	cmp	r3, #0
 8005348:	d102      	bne.n	8005350 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800534a:	2301      	movs	r3, #1
 800534c:	f000 bc02 	b.w	8005b54 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005350:	4b96      	ldr	r3, [pc, #600]	@ (80055ac <HAL_RCC_OscConfig+0x270>)
 8005352:	689b      	ldr	r3, [r3, #8]
 8005354:	f003 030c 	and.w	r3, r3, #12
 8005358:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800535a:	4b94      	ldr	r3, [pc, #592]	@ (80055ac <HAL_RCC_OscConfig+0x270>)
 800535c:	68db      	ldr	r3, [r3, #12]
 800535e:	f003 0303 	and.w	r3, r3, #3
 8005362:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f003 0310 	and.w	r3, r3, #16
 800536c:	2b00      	cmp	r3, #0
 800536e:	f000 80e4 	beq.w	800553a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005372:	69bb      	ldr	r3, [r7, #24]
 8005374:	2b00      	cmp	r3, #0
 8005376:	d007      	beq.n	8005388 <HAL_RCC_OscConfig+0x4c>
 8005378:	69bb      	ldr	r3, [r7, #24]
 800537a:	2b0c      	cmp	r3, #12
 800537c:	f040 808b 	bne.w	8005496 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8005380:	697b      	ldr	r3, [r7, #20]
 8005382:	2b01      	cmp	r3, #1
 8005384:	f040 8087 	bne.w	8005496 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005388:	4b88      	ldr	r3, [pc, #544]	@ (80055ac <HAL_RCC_OscConfig+0x270>)
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f003 0302 	and.w	r3, r3, #2
 8005390:	2b00      	cmp	r3, #0
 8005392:	d005      	beq.n	80053a0 <HAL_RCC_OscConfig+0x64>
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	699b      	ldr	r3, [r3, #24]
 8005398:	2b00      	cmp	r3, #0
 800539a:	d101      	bne.n	80053a0 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800539c:	2301      	movs	r3, #1
 800539e:	e3d9      	b.n	8005b54 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	6a1a      	ldr	r2, [r3, #32]
 80053a4:	4b81      	ldr	r3, [pc, #516]	@ (80055ac <HAL_RCC_OscConfig+0x270>)
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f003 0308 	and.w	r3, r3, #8
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d004      	beq.n	80053ba <HAL_RCC_OscConfig+0x7e>
 80053b0:	4b7e      	ldr	r3, [pc, #504]	@ (80055ac <HAL_RCC_OscConfig+0x270>)
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80053b8:	e005      	b.n	80053c6 <HAL_RCC_OscConfig+0x8a>
 80053ba:	4b7c      	ldr	r3, [pc, #496]	@ (80055ac <HAL_RCC_OscConfig+0x270>)
 80053bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80053c0:	091b      	lsrs	r3, r3, #4
 80053c2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80053c6:	4293      	cmp	r3, r2
 80053c8:	d223      	bcs.n	8005412 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	6a1b      	ldr	r3, [r3, #32]
 80053ce:	4618      	mov	r0, r3
 80053d0:	f000 fd8c 	bl	8005eec <RCC_SetFlashLatencyFromMSIRange>
 80053d4:	4603      	mov	r3, r0
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d001      	beq.n	80053de <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80053da:	2301      	movs	r3, #1
 80053dc:	e3ba      	b.n	8005b54 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80053de:	4b73      	ldr	r3, [pc, #460]	@ (80055ac <HAL_RCC_OscConfig+0x270>)
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	4a72      	ldr	r2, [pc, #456]	@ (80055ac <HAL_RCC_OscConfig+0x270>)
 80053e4:	f043 0308 	orr.w	r3, r3, #8
 80053e8:	6013      	str	r3, [r2, #0]
 80053ea:	4b70      	ldr	r3, [pc, #448]	@ (80055ac <HAL_RCC_OscConfig+0x270>)
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	6a1b      	ldr	r3, [r3, #32]
 80053f6:	496d      	ldr	r1, [pc, #436]	@ (80055ac <HAL_RCC_OscConfig+0x270>)
 80053f8:	4313      	orrs	r3, r2
 80053fa:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80053fc:	4b6b      	ldr	r3, [pc, #428]	@ (80055ac <HAL_RCC_OscConfig+0x270>)
 80053fe:	685b      	ldr	r3, [r3, #4]
 8005400:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	69db      	ldr	r3, [r3, #28]
 8005408:	021b      	lsls	r3, r3, #8
 800540a:	4968      	ldr	r1, [pc, #416]	@ (80055ac <HAL_RCC_OscConfig+0x270>)
 800540c:	4313      	orrs	r3, r2
 800540e:	604b      	str	r3, [r1, #4]
 8005410:	e025      	b.n	800545e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005412:	4b66      	ldr	r3, [pc, #408]	@ (80055ac <HAL_RCC_OscConfig+0x270>)
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	4a65      	ldr	r2, [pc, #404]	@ (80055ac <HAL_RCC_OscConfig+0x270>)
 8005418:	f043 0308 	orr.w	r3, r3, #8
 800541c:	6013      	str	r3, [r2, #0]
 800541e:	4b63      	ldr	r3, [pc, #396]	@ (80055ac <HAL_RCC_OscConfig+0x270>)
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	6a1b      	ldr	r3, [r3, #32]
 800542a:	4960      	ldr	r1, [pc, #384]	@ (80055ac <HAL_RCC_OscConfig+0x270>)
 800542c:	4313      	orrs	r3, r2
 800542e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005430:	4b5e      	ldr	r3, [pc, #376]	@ (80055ac <HAL_RCC_OscConfig+0x270>)
 8005432:	685b      	ldr	r3, [r3, #4]
 8005434:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	69db      	ldr	r3, [r3, #28]
 800543c:	021b      	lsls	r3, r3, #8
 800543e:	495b      	ldr	r1, [pc, #364]	@ (80055ac <HAL_RCC_OscConfig+0x270>)
 8005440:	4313      	orrs	r3, r2
 8005442:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005444:	69bb      	ldr	r3, [r7, #24]
 8005446:	2b00      	cmp	r3, #0
 8005448:	d109      	bne.n	800545e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	6a1b      	ldr	r3, [r3, #32]
 800544e:	4618      	mov	r0, r3
 8005450:	f000 fd4c 	bl	8005eec <RCC_SetFlashLatencyFromMSIRange>
 8005454:	4603      	mov	r3, r0
 8005456:	2b00      	cmp	r3, #0
 8005458:	d001      	beq.n	800545e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800545a:	2301      	movs	r3, #1
 800545c:	e37a      	b.n	8005b54 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800545e:	f000 fc81 	bl	8005d64 <HAL_RCC_GetSysClockFreq>
 8005462:	4602      	mov	r2, r0
 8005464:	4b51      	ldr	r3, [pc, #324]	@ (80055ac <HAL_RCC_OscConfig+0x270>)
 8005466:	689b      	ldr	r3, [r3, #8]
 8005468:	091b      	lsrs	r3, r3, #4
 800546a:	f003 030f 	and.w	r3, r3, #15
 800546e:	4950      	ldr	r1, [pc, #320]	@ (80055b0 <HAL_RCC_OscConfig+0x274>)
 8005470:	5ccb      	ldrb	r3, [r1, r3]
 8005472:	f003 031f 	and.w	r3, r3, #31
 8005476:	fa22 f303 	lsr.w	r3, r2, r3
 800547a:	4a4e      	ldr	r2, [pc, #312]	@ (80055b4 <HAL_RCC_OscConfig+0x278>)
 800547c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800547e:	4b4e      	ldr	r3, [pc, #312]	@ (80055b8 <HAL_RCC_OscConfig+0x27c>)
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	4618      	mov	r0, r3
 8005484:	f7fc ff66 	bl	8002354 <HAL_InitTick>
 8005488:	4603      	mov	r3, r0
 800548a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800548c:	7bfb      	ldrb	r3, [r7, #15]
 800548e:	2b00      	cmp	r3, #0
 8005490:	d052      	beq.n	8005538 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8005492:	7bfb      	ldrb	r3, [r7, #15]
 8005494:	e35e      	b.n	8005b54 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	699b      	ldr	r3, [r3, #24]
 800549a:	2b00      	cmp	r3, #0
 800549c:	d032      	beq.n	8005504 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800549e:	4b43      	ldr	r3, [pc, #268]	@ (80055ac <HAL_RCC_OscConfig+0x270>)
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	4a42      	ldr	r2, [pc, #264]	@ (80055ac <HAL_RCC_OscConfig+0x270>)
 80054a4:	f043 0301 	orr.w	r3, r3, #1
 80054a8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80054aa:	f7fc ffa3 	bl	80023f4 <HAL_GetTick>
 80054ae:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80054b0:	e008      	b.n	80054c4 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80054b2:	f7fc ff9f 	bl	80023f4 <HAL_GetTick>
 80054b6:	4602      	mov	r2, r0
 80054b8:	693b      	ldr	r3, [r7, #16]
 80054ba:	1ad3      	subs	r3, r2, r3
 80054bc:	2b02      	cmp	r3, #2
 80054be:	d901      	bls.n	80054c4 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80054c0:	2303      	movs	r3, #3
 80054c2:	e347      	b.n	8005b54 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80054c4:	4b39      	ldr	r3, [pc, #228]	@ (80055ac <HAL_RCC_OscConfig+0x270>)
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f003 0302 	and.w	r3, r3, #2
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d0f0      	beq.n	80054b2 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80054d0:	4b36      	ldr	r3, [pc, #216]	@ (80055ac <HAL_RCC_OscConfig+0x270>)
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	4a35      	ldr	r2, [pc, #212]	@ (80055ac <HAL_RCC_OscConfig+0x270>)
 80054d6:	f043 0308 	orr.w	r3, r3, #8
 80054da:	6013      	str	r3, [r2, #0]
 80054dc:	4b33      	ldr	r3, [pc, #204]	@ (80055ac <HAL_RCC_OscConfig+0x270>)
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	6a1b      	ldr	r3, [r3, #32]
 80054e8:	4930      	ldr	r1, [pc, #192]	@ (80055ac <HAL_RCC_OscConfig+0x270>)
 80054ea:	4313      	orrs	r3, r2
 80054ec:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80054ee:	4b2f      	ldr	r3, [pc, #188]	@ (80055ac <HAL_RCC_OscConfig+0x270>)
 80054f0:	685b      	ldr	r3, [r3, #4]
 80054f2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	69db      	ldr	r3, [r3, #28]
 80054fa:	021b      	lsls	r3, r3, #8
 80054fc:	492b      	ldr	r1, [pc, #172]	@ (80055ac <HAL_RCC_OscConfig+0x270>)
 80054fe:	4313      	orrs	r3, r2
 8005500:	604b      	str	r3, [r1, #4]
 8005502:	e01a      	b.n	800553a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005504:	4b29      	ldr	r3, [pc, #164]	@ (80055ac <HAL_RCC_OscConfig+0x270>)
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	4a28      	ldr	r2, [pc, #160]	@ (80055ac <HAL_RCC_OscConfig+0x270>)
 800550a:	f023 0301 	bic.w	r3, r3, #1
 800550e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005510:	f7fc ff70 	bl	80023f4 <HAL_GetTick>
 8005514:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005516:	e008      	b.n	800552a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005518:	f7fc ff6c 	bl	80023f4 <HAL_GetTick>
 800551c:	4602      	mov	r2, r0
 800551e:	693b      	ldr	r3, [r7, #16]
 8005520:	1ad3      	subs	r3, r2, r3
 8005522:	2b02      	cmp	r3, #2
 8005524:	d901      	bls.n	800552a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8005526:	2303      	movs	r3, #3
 8005528:	e314      	b.n	8005b54 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800552a:	4b20      	ldr	r3, [pc, #128]	@ (80055ac <HAL_RCC_OscConfig+0x270>)
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	f003 0302 	and.w	r3, r3, #2
 8005532:	2b00      	cmp	r3, #0
 8005534:	d1f0      	bne.n	8005518 <HAL_RCC_OscConfig+0x1dc>
 8005536:	e000      	b.n	800553a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005538:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f003 0301 	and.w	r3, r3, #1
 8005542:	2b00      	cmp	r3, #0
 8005544:	d073      	beq.n	800562e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8005546:	69bb      	ldr	r3, [r7, #24]
 8005548:	2b08      	cmp	r3, #8
 800554a:	d005      	beq.n	8005558 <HAL_RCC_OscConfig+0x21c>
 800554c:	69bb      	ldr	r3, [r7, #24]
 800554e:	2b0c      	cmp	r3, #12
 8005550:	d10e      	bne.n	8005570 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005552:	697b      	ldr	r3, [r7, #20]
 8005554:	2b03      	cmp	r3, #3
 8005556:	d10b      	bne.n	8005570 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005558:	4b14      	ldr	r3, [pc, #80]	@ (80055ac <HAL_RCC_OscConfig+0x270>)
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005560:	2b00      	cmp	r3, #0
 8005562:	d063      	beq.n	800562c <HAL_RCC_OscConfig+0x2f0>
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	685b      	ldr	r3, [r3, #4]
 8005568:	2b00      	cmp	r3, #0
 800556a:	d15f      	bne.n	800562c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800556c:	2301      	movs	r3, #1
 800556e:	e2f1      	b.n	8005b54 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	685b      	ldr	r3, [r3, #4]
 8005574:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005578:	d106      	bne.n	8005588 <HAL_RCC_OscConfig+0x24c>
 800557a:	4b0c      	ldr	r3, [pc, #48]	@ (80055ac <HAL_RCC_OscConfig+0x270>)
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	4a0b      	ldr	r2, [pc, #44]	@ (80055ac <HAL_RCC_OscConfig+0x270>)
 8005580:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005584:	6013      	str	r3, [r2, #0]
 8005586:	e025      	b.n	80055d4 <HAL_RCC_OscConfig+0x298>
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	685b      	ldr	r3, [r3, #4]
 800558c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005590:	d114      	bne.n	80055bc <HAL_RCC_OscConfig+0x280>
 8005592:	4b06      	ldr	r3, [pc, #24]	@ (80055ac <HAL_RCC_OscConfig+0x270>)
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	4a05      	ldr	r2, [pc, #20]	@ (80055ac <HAL_RCC_OscConfig+0x270>)
 8005598:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800559c:	6013      	str	r3, [r2, #0]
 800559e:	4b03      	ldr	r3, [pc, #12]	@ (80055ac <HAL_RCC_OscConfig+0x270>)
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	4a02      	ldr	r2, [pc, #8]	@ (80055ac <HAL_RCC_OscConfig+0x270>)
 80055a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80055a8:	6013      	str	r3, [r2, #0]
 80055aa:	e013      	b.n	80055d4 <HAL_RCC_OscConfig+0x298>
 80055ac:	40021000 	.word	0x40021000
 80055b0:	08007608 	.word	0x08007608
 80055b4:	20000000 	.word	0x20000000
 80055b8:	20000004 	.word	0x20000004
 80055bc:	4ba0      	ldr	r3, [pc, #640]	@ (8005840 <HAL_RCC_OscConfig+0x504>)
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	4a9f      	ldr	r2, [pc, #636]	@ (8005840 <HAL_RCC_OscConfig+0x504>)
 80055c2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80055c6:	6013      	str	r3, [r2, #0]
 80055c8:	4b9d      	ldr	r3, [pc, #628]	@ (8005840 <HAL_RCC_OscConfig+0x504>)
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	4a9c      	ldr	r2, [pc, #624]	@ (8005840 <HAL_RCC_OscConfig+0x504>)
 80055ce:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80055d2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	685b      	ldr	r3, [r3, #4]
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d013      	beq.n	8005604 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055dc:	f7fc ff0a 	bl	80023f4 <HAL_GetTick>
 80055e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80055e2:	e008      	b.n	80055f6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80055e4:	f7fc ff06 	bl	80023f4 <HAL_GetTick>
 80055e8:	4602      	mov	r2, r0
 80055ea:	693b      	ldr	r3, [r7, #16]
 80055ec:	1ad3      	subs	r3, r2, r3
 80055ee:	2b64      	cmp	r3, #100	@ 0x64
 80055f0:	d901      	bls.n	80055f6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80055f2:	2303      	movs	r3, #3
 80055f4:	e2ae      	b.n	8005b54 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80055f6:	4b92      	ldr	r3, [pc, #584]	@ (8005840 <HAL_RCC_OscConfig+0x504>)
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d0f0      	beq.n	80055e4 <HAL_RCC_OscConfig+0x2a8>
 8005602:	e014      	b.n	800562e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005604:	f7fc fef6 	bl	80023f4 <HAL_GetTick>
 8005608:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800560a:	e008      	b.n	800561e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800560c:	f7fc fef2 	bl	80023f4 <HAL_GetTick>
 8005610:	4602      	mov	r2, r0
 8005612:	693b      	ldr	r3, [r7, #16]
 8005614:	1ad3      	subs	r3, r2, r3
 8005616:	2b64      	cmp	r3, #100	@ 0x64
 8005618:	d901      	bls.n	800561e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800561a:	2303      	movs	r3, #3
 800561c:	e29a      	b.n	8005b54 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800561e:	4b88      	ldr	r3, [pc, #544]	@ (8005840 <HAL_RCC_OscConfig+0x504>)
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005626:	2b00      	cmp	r3, #0
 8005628:	d1f0      	bne.n	800560c <HAL_RCC_OscConfig+0x2d0>
 800562a:	e000      	b.n	800562e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800562c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	f003 0302 	and.w	r3, r3, #2
 8005636:	2b00      	cmp	r3, #0
 8005638:	d060      	beq.n	80056fc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800563a:	69bb      	ldr	r3, [r7, #24]
 800563c:	2b04      	cmp	r3, #4
 800563e:	d005      	beq.n	800564c <HAL_RCC_OscConfig+0x310>
 8005640:	69bb      	ldr	r3, [r7, #24]
 8005642:	2b0c      	cmp	r3, #12
 8005644:	d119      	bne.n	800567a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005646:	697b      	ldr	r3, [r7, #20]
 8005648:	2b02      	cmp	r3, #2
 800564a:	d116      	bne.n	800567a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800564c:	4b7c      	ldr	r3, [pc, #496]	@ (8005840 <HAL_RCC_OscConfig+0x504>)
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005654:	2b00      	cmp	r3, #0
 8005656:	d005      	beq.n	8005664 <HAL_RCC_OscConfig+0x328>
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	68db      	ldr	r3, [r3, #12]
 800565c:	2b00      	cmp	r3, #0
 800565e:	d101      	bne.n	8005664 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8005660:	2301      	movs	r3, #1
 8005662:	e277      	b.n	8005b54 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005664:	4b76      	ldr	r3, [pc, #472]	@ (8005840 <HAL_RCC_OscConfig+0x504>)
 8005666:	685b      	ldr	r3, [r3, #4]
 8005668:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	691b      	ldr	r3, [r3, #16]
 8005670:	061b      	lsls	r3, r3, #24
 8005672:	4973      	ldr	r1, [pc, #460]	@ (8005840 <HAL_RCC_OscConfig+0x504>)
 8005674:	4313      	orrs	r3, r2
 8005676:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005678:	e040      	b.n	80056fc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	68db      	ldr	r3, [r3, #12]
 800567e:	2b00      	cmp	r3, #0
 8005680:	d023      	beq.n	80056ca <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005682:	4b6f      	ldr	r3, [pc, #444]	@ (8005840 <HAL_RCC_OscConfig+0x504>)
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	4a6e      	ldr	r2, [pc, #440]	@ (8005840 <HAL_RCC_OscConfig+0x504>)
 8005688:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800568c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800568e:	f7fc feb1 	bl	80023f4 <HAL_GetTick>
 8005692:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005694:	e008      	b.n	80056a8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005696:	f7fc fead 	bl	80023f4 <HAL_GetTick>
 800569a:	4602      	mov	r2, r0
 800569c:	693b      	ldr	r3, [r7, #16]
 800569e:	1ad3      	subs	r3, r2, r3
 80056a0:	2b02      	cmp	r3, #2
 80056a2:	d901      	bls.n	80056a8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80056a4:	2303      	movs	r3, #3
 80056a6:	e255      	b.n	8005b54 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80056a8:	4b65      	ldr	r3, [pc, #404]	@ (8005840 <HAL_RCC_OscConfig+0x504>)
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d0f0      	beq.n	8005696 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80056b4:	4b62      	ldr	r3, [pc, #392]	@ (8005840 <HAL_RCC_OscConfig+0x504>)
 80056b6:	685b      	ldr	r3, [r3, #4]
 80056b8:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	691b      	ldr	r3, [r3, #16]
 80056c0:	061b      	lsls	r3, r3, #24
 80056c2:	495f      	ldr	r1, [pc, #380]	@ (8005840 <HAL_RCC_OscConfig+0x504>)
 80056c4:	4313      	orrs	r3, r2
 80056c6:	604b      	str	r3, [r1, #4]
 80056c8:	e018      	b.n	80056fc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80056ca:	4b5d      	ldr	r3, [pc, #372]	@ (8005840 <HAL_RCC_OscConfig+0x504>)
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	4a5c      	ldr	r2, [pc, #368]	@ (8005840 <HAL_RCC_OscConfig+0x504>)
 80056d0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80056d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056d6:	f7fc fe8d 	bl	80023f4 <HAL_GetTick>
 80056da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80056dc:	e008      	b.n	80056f0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80056de:	f7fc fe89 	bl	80023f4 <HAL_GetTick>
 80056e2:	4602      	mov	r2, r0
 80056e4:	693b      	ldr	r3, [r7, #16]
 80056e6:	1ad3      	subs	r3, r2, r3
 80056e8:	2b02      	cmp	r3, #2
 80056ea:	d901      	bls.n	80056f0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80056ec:	2303      	movs	r3, #3
 80056ee:	e231      	b.n	8005b54 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80056f0:	4b53      	ldr	r3, [pc, #332]	@ (8005840 <HAL_RCC_OscConfig+0x504>)
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d1f0      	bne.n	80056de <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	f003 0308 	and.w	r3, r3, #8
 8005704:	2b00      	cmp	r3, #0
 8005706:	d03c      	beq.n	8005782 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	695b      	ldr	r3, [r3, #20]
 800570c:	2b00      	cmp	r3, #0
 800570e:	d01c      	beq.n	800574a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005710:	4b4b      	ldr	r3, [pc, #300]	@ (8005840 <HAL_RCC_OscConfig+0x504>)
 8005712:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005716:	4a4a      	ldr	r2, [pc, #296]	@ (8005840 <HAL_RCC_OscConfig+0x504>)
 8005718:	f043 0301 	orr.w	r3, r3, #1
 800571c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005720:	f7fc fe68 	bl	80023f4 <HAL_GetTick>
 8005724:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005726:	e008      	b.n	800573a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005728:	f7fc fe64 	bl	80023f4 <HAL_GetTick>
 800572c:	4602      	mov	r2, r0
 800572e:	693b      	ldr	r3, [r7, #16]
 8005730:	1ad3      	subs	r3, r2, r3
 8005732:	2b02      	cmp	r3, #2
 8005734:	d901      	bls.n	800573a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8005736:	2303      	movs	r3, #3
 8005738:	e20c      	b.n	8005b54 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800573a:	4b41      	ldr	r3, [pc, #260]	@ (8005840 <HAL_RCC_OscConfig+0x504>)
 800573c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005740:	f003 0302 	and.w	r3, r3, #2
 8005744:	2b00      	cmp	r3, #0
 8005746:	d0ef      	beq.n	8005728 <HAL_RCC_OscConfig+0x3ec>
 8005748:	e01b      	b.n	8005782 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800574a:	4b3d      	ldr	r3, [pc, #244]	@ (8005840 <HAL_RCC_OscConfig+0x504>)
 800574c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005750:	4a3b      	ldr	r2, [pc, #236]	@ (8005840 <HAL_RCC_OscConfig+0x504>)
 8005752:	f023 0301 	bic.w	r3, r3, #1
 8005756:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800575a:	f7fc fe4b 	bl	80023f4 <HAL_GetTick>
 800575e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005760:	e008      	b.n	8005774 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005762:	f7fc fe47 	bl	80023f4 <HAL_GetTick>
 8005766:	4602      	mov	r2, r0
 8005768:	693b      	ldr	r3, [r7, #16]
 800576a:	1ad3      	subs	r3, r2, r3
 800576c:	2b02      	cmp	r3, #2
 800576e:	d901      	bls.n	8005774 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8005770:	2303      	movs	r3, #3
 8005772:	e1ef      	b.n	8005b54 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005774:	4b32      	ldr	r3, [pc, #200]	@ (8005840 <HAL_RCC_OscConfig+0x504>)
 8005776:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800577a:	f003 0302 	and.w	r3, r3, #2
 800577e:	2b00      	cmp	r3, #0
 8005780:	d1ef      	bne.n	8005762 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	f003 0304 	and.w	r3, r3, #4
 800578a:	2b00      	cmp	r3, #0
 800578c:	f000 80a6 	beq.w	80058dc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005790:	2300      	movs	r3, #0
 8005792:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8005794:	4b2a      	ldr	r3, [pc, #168]	@ (8005840 <HAL_RCC_OscConfig+0x504>)
 8005796:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005798:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800579c:	2b00      	cmp	r3, #0
 800579e:	d10d      	bne.n	80057bc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80057a0:	4b27      	ldr	r3, [pc, #156]	@ (8005840 <HAL_RCC_OscConfig+0x504>)
 80057a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80057a4:	4a26      	ldr	r2, [pc, #152]	@ (8005840 <HAL_RCC_OscConfig+0x504>)
 80057a6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80057aa:	6593      	str	r3, [r2, #88]	@ 0x58
 80057ac:	4b24      	ldr	r3, [pc, #144]	@ (8005840 <HAL_RCC_OscConfig+0x504>)
 80057ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80057b0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80057b4:	60bb      	str	r3, [r7, #8]
 80057b6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80057b8:	2301      	movs	r3, #1
 80057ba:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80057bc:	4b21      	ldr	r3, [pc, #132]	@ (8005844 <HAL_RCC_OscConfig+0x508>)
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d118      	bne.n	80057fa <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80057c8:	4b1e      	ldr	r3, [pc, #120]	@ (8005844 <HAL_RCC_OscConfig+0x508>)
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	4a1d      	ldr	r2, [pc, #116]	@ (8005844 <HAL_RCC_OscConfig+0x508>)
 80057ce:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80057d2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80057d4:	f7fc fe0e 	bl	80023f4 <HAL_GetTick>
 80057d8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80057da:	e008      	b.n	80057ee <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80057dc:	f7fc fe0a 	bl	80023f4 <HAL_GetTick>
 80057e0:	4602      	mov	r2, r0
 80057e2:	693b      	ldr	r3, [r7, #16]
 80057e4:	1ad3      	subs	r3, r2, r3
 80057e6:	2b02      	cmp	r3, #2
 80057e8:	d901      	bls.n	80057ee <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80057ea:	2303      	movs	r3, #3
 80057ec:	e1b2      	b.n	8005b54 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80057ee:	4b15      	ldr	r3, [pc, #84]	@ (8005844 <HAL_RCC_OscConfig+0x508>)
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d0f0      	beq.n	80057dc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	689b      	ldr	r3, [r3, #8]
 80057fe:	2b01      	cmp	r3, #1
 8005800:	d108      	bne.n	8005814 <HAL_RCC_OscConfig+0x4d8>
 8005802:	4b0f      	ldr	r3, [pc, #60]	@ (8005840 <HAL_RCC_OscConfig+0x504>)
 8005804:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005808:	4a0d      	ldr	r2, [pc, #52]	@ (8005840 <HAL_RCC_OscConfig+0x504>)
 800580a:	f043 0301 	orr.w	r3, r3, #1
 800580e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005812:	e029      	b.n	8005868 <HAL_RCC_OscConfig+0x52c>
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	689b      	ldr	r3, [r3, #8]
 8005818:	2b05      	cmp	r3, #5
 800581a:	d115      	bne.n	8005848 <HAL_RCC_OscConfig+0x50c>
 800581c:	4b08      	ldr	r3, [pc, #32]	@ (8005840 <HAL_RCC_OscConfig+0x504>)
 800581e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005822:	4a07      	ldr	r2, [pc, #28]	@ (8005840 <HAL_RCC_OscConfig+0x504>)
 8005824:	f043 0304 	orr.w	r3, r3, #4
 8005828:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800582c:	4b04      	ldr	r3, [pc, #16]	@ (8005840 <HAL_RCC_OscConfig+0x504>)
 800582e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005832:	4a03      	ldr	r2, [pc, #12]	@ (8005840 <HAL_RCC_OscConfig+0x504>)
 8005834:	f043 0301 	orr.w	r3, r3, #1
 8005838:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800583c:	e014      	b.n	8005868 <HAL_RCC_OscConfig+0x52c>
 800583e:	bf00      	nop
 8005840:	40021000 	.word	0x40021000
 8005844:	40007000 	.word	0x40007000
 8005848:	4b9a      	ldr	r3, [pc, #616]	@ (8005ab4 <HAL_RCC_OscConfig+0x778>)
 800584a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800584e:	4a99      	ldr	r2, [pc, #612]	@ (8005ab4 <HAL_RCC_OscConfig+0x778>)
 8005850:	f023 0301 	bic.w	r3, r3, #1
 8005854:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005858:	4b96      	ldr	r3, [pc, #600]	@ (8005ab4 <HAL_RCC_OscConfig+0x778>)
 800585a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800585e:	4a95      	ldr	r2, [pc, #596]	@ (8005ab4 <HAL_RCC_OscConfig+0x778>)
 8005860:	f023 0304 	bic.w	r3, r3, #4
 8005864:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	689b      	ldr	r3, [r3, #8]
 800586c:	2b00      	cmp	r3, #0
 800586e:	d016      	beq.n	800589e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005870:	f7fc fdc0 	bl	80023f4 <HAL_GetTick>
 8005874:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005876:	e00a      	b.n	800588e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005878:	f7fc fdbc 	bl	80023f4 <HAL_GetTick>
 800587c:	4602      	mov	r2, r0
 800587e:	693b      	ldr	r3, [r7, #16]
 8005880:	1ad3      	subs	r3, r2, r3
 8005882:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005886:	4293      	cmp	r3, r2
 8005888:	d901      	bls.n	800588e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800588a:	2303      	movs	r3, #3
 800588c:	e162      	b.n	8005b54 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800588e:	4b89      	ldr	r3, [pc, #548]	@ (8005ab4 <HAL_RCC_OscConfig+0x778>)
 8005890:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005894:	f003 0302 	and.w	r3, r3, #2
 8005898:	2b00      	cmp	r3, #0
 800589a:	d0ed      	beq.n	8005878 <HAL_RCC_OscConfig+0x53c>
 800589c:	e015      	b.n	80058ca <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800589e:	f7fc fda9 	bl	80023f4 <HAL_GetTick>
 80058a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80058a4:	e00a      	b.n	80058bc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80058a6:	f7fc fda5 	bl	80023f4 <HAL_GetTick>
 80058aa:	4602      	mov	r2, r0
 80058ac:	693b      	ldr	r3, [r7, #16]
 80058ae:	1ad3      	subs	r3, r2, r3
 80058b0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80058b4:	4293      	cmp	r3, r2
 80058b6:	d901      	bls.n	80058bc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80058b8:	2303      	movs	r3, #3
 80058ba:	e14b      	b.n	8005b54 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80058bc:	4b7d      	ldr	r3, [pc, #500]	@ (8005ab4 <HAL_RCC_OscConfig+0x778>)
 80058be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80058c2:	f003 0302 	and.w	r3, r3, #2
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d1ed      	bne.n	80058a6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80058ca:	7ffb      	ldrb	r3, [r7, #31]
 80058cc:	2b01      	cmp	r3, #1
 80058ce:	d105      	bne.n	80058dc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80058d0:	4b78      	ldr	r3, [pc, #480]	@ (8005ab4 <HAL_RCC_OscConfig+0x778>)
 80058d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80058d4:	4a77      	ldr	r2, [pc, #476]	@ (8005ab4 <HAL_RCC_OscConfig+0x778>)
 80058d6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80058da:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f003 0320 	and.w	r3, r3, #32
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d03c      	beq.n	8005962 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d01c      	beq.n	800592a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80058f0:	4b70      	ldr	r3, [pc, #448]	@ (8005ab4 <HAL_RCC_OscConfig+0x778>)
 80058f2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80058f6:	4a6f      	ldr	r2, [pc, #444]	@ (8005ab4 <HAL_RCC_OscConfig+0x778>)
 80058f8:	f043 0301 	orr.w	r3, r3, #1
 80058fc:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005900:	f7fc fd78 	bl	80023f4 <HAL_GetTick>
 8005904:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005906:	e008      	b.n	800591a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005908:	f7fc fd74 	bl	80023f4 <HAL_GetTick>
 800590c:	4602      	mov	r2, r0
 800590e:	693b      	ldr	r3, [r7, #16]
 8005910:	1ad3      	subs	r3, r2, r3
 8005912:	2b02      	cmp	r3, #2
 8005914:	d901      	bls.n	800591a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8005916:	2303      	movs	r3, #3
 8005918:	e11c      	b.n	8005b54 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800591a:	4b66      	ldr	r3, [pc, #408]	@ (8005ab4 <HAL_RCC_OscConfig+0x778>)
 800591c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005920:	f003 0302 	and.w	r3, r3, #2
 8005924:	2b00      	cmp	r3, #0
 8005926:	d0ef      	beq.n	8005908 <HAL_RCC_OscConfig+0x5cc>
 8005928:	e01b      	b.n	8005962 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800592a:	4b62      	ldr	r3, [pc, #392]	@ (8005ab4 <HAL_RCC_OscConfig+0x778>)
 800592c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005930:	4a60      	ldr	r2, [pc, #384]	@ (8005ab4 <HAL_RCC_OscConfig+0x778>)
 8005932:	f023 0301 	bic.w	r3, r3, #1
 8005936:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800593a:	f7fc fd5b 	bl	80023f4 <HAL_GetTick>
 800593e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005940:	e008      	b.n	8005954 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005942:	f7fc fd57 	bl	80023f4 <HAL_GetTick>
 8005946:	4602      	mov	r2, r0
 8005948:	693b      	ldr	r3, [r7, #16]
 800594a:	1ad3      	subs	r3, r2, r3
 800594c:	2b02      	cmp	r3, #2
 800594e:	d901      	bls.n	8005954 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8005950:	2303      	movs	r3, #3
 8005952:	e0ff      	b.n	8005b54 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005954:	4b57      	ldr	r3, [pc, #348]	@ (8005ab4 <HAL_RCC_OscConfig+0x778>)
 8005956:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800595a:	f003 0302 	and.w	r3, r3, #2
 800595e:	2b00      	cmp	r3, #0
 8005960:	d1ef      	bne.n	8005942 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005966:	2b00      	cmp	r3, #0
 8005968:	f000 80f3 	beq.w	8005b52 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005970:	2b02      	cmp	r3, #2
 8005972:	f040 80c9 	bne.w	8005b08 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8005976:	4b4f      	ldr	r3, [pc, #316]	@ (8005ab4 <HAL_RCC_OscConfig+0x778>)
 8005978:	68db      	ldr	r3, [r3, #12]
 800597a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800597c:	697b      	ldr	r3, [r7, #20]
 800597e:	f003 0203 	and.w	r2, r3, #3
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005986:	429a      	cmp	r2, r3
 8005988:	d12c      	bne.n	80059e4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800598a:	697b      	ldr	r3, [r7, #20]
 800598c:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005994:	3b01      	subs	r3, #1
 8005996:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005998:	429a      	cmp	r2, r3
 800599a:	d123      	bne.n	80059e4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800599c:	697b      	ldr	r3, [r7, #20]
 800599e:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80059a6:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80059a8:	429a      	cmp	r2, r3
 80059aa:	d11b      	bne.n	80059e4 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80059ac:	697b      	ldr	r3, [r7, #20]
 80059ae:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059b6:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80059b8:	429a      	cmp	r2, r3
 80059ba:	d113      	bne.n	80059e4 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80059bc:	697b      	ldr	r3, [r7, #20]
 80059be:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80059c6:	085b      	lsrs	r3, r3, #1
 80059c8:	3b01      	subs	r3, #1
 80059ca:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80059cc:	429a      	cmp	r2, r3
 80059ce:	d109      	bne.n	80059e4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80059d0:	697b      	ldr	r3, [r7, #20]
 80059d2:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059da:	085b      	lsrs	r3, r3, #1
 80059dc:	3b01      	subs	r3, #1
 80059de:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80059e0:	429a      	cmp	r2, r3
 80059e2:	d06b      	beq.n	8005abc <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80059e4:	69bb      	ldr	r3, [r7, #24]
 80059e6:	2b0c      	cmp	r3, #12
 80059e8:	d062      	beq.n	8005ab0 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80059ea:	4b32      	ldr	r3, [pc, #200]	@ (8005ab4 <HAL_RCC_OscConfig+0x778>)
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d001      	beq.n	80059fa <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80059f6:	2301      	movs	r3, #1
 80059f8:	e0ac      	b.n	8005b54 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80059fa:	4b2e      	ldr	r3, [pc, #184]	@ (8005ab4 <HAL_RCC_OscConfig+0x778>)
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	4a2d      	ldr	r2, [pc, #180]	@ (8005ab4 <HAL_RCC_OscConfig+0x778>)
 8005a00:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005a04:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005a06:	f7fc fcf5 	bl	80023f4 <HAL_GetTick>
 8005a0a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005a0c:	e008      	b.n	8005a20 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a0e:	f7fc fcf1 	bl	80023f4 <HAL_GetTick>
 8005a12:	4602      	mov	r2, r0
 8005a14:	693b      	ldr	r3, [r7, #16]
 8005a16:	1ad3      	subs	r3, r2, r3
 8005a18:	2b02      	cmp	r3, #2
 8005a1a:	d901      	bls.n	8005a20 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8005a1c:	2303      	movs	r3, #3
 8005a1e:	e099      	b.n	8005b54 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005a20:	4b24      	ldr	r3, [pc, #144]	@ (8005ab4 <HAL_RCC_OscConfig+0x778>)
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d1f0      	bne.n	8005a0e <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005a2c:	4b21      	ldr	r3, [pc, #132]	@ (8005ab4 <HAL_RCC_OscConfig+0x778>)
 8005a2e:	68da      	ldr	r2, [r3, #12]
 8005a30:	4b21      	ldr	r3, [pc, #132]	@ (8005ab8 <HAL_RCC_OscConfig+0x77c>)
 8005a32:	4013      	ands	r3, r2
 8005a34:	687a      	ldr	r2, [r7, #4]
 8005a36:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8005a38:	687a      	ldr	r2, [r7, #4]
 8005a3a:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8005a3c:	3a01      	subs	r2, #1
 8005a3e:	0112      	lsls	r2, r2, #4
 8005a40:	4311      	orrs	r1, r2
 8005a42:	687a      	ldr	r2, [r7, #4]
 8005a44:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8005a46:	0212      	lsls	r2, r2, #8
 8005a48:	4311      	orrs	r1, r2
 8005a4a:	687a      	ldr	r2, [r7, #4]
 8005a4c:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005a4e:	0852      	lsrs	r2, r2, #1
 8005a50:	3a01      	subs	r2, #1
 8005a52:	0552      	lsls	r2, r2, #21
 8005a54:	4311      	orrs	r1, r2
 8005a56:	687a      	ldr	r2, [r7, #4]
 8005a58:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8005a5a:	0852      	lsrs	r2, r2, #1
 8005a5c:	3a01      	subs	r2, #1
 8005a5e:	0652      	lsls	r2, r2, #25
 8005a60:	4311      	orrs	r1, r2
 8005a62:	687a      	ldr	r2, [r7, #4]
 8005a64:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8005a66:	06d2      	lsls	r2, r2, #27
 8005a68:	430a      	orrs	r2, r1
 8005a6a:	4912      	ldr	r1, [pc, #72]	@ (8005ab4 <HAL_RCC_OscConfig+0x778>)
 8005a6c:	4313      	orrs	r3, r2
 8005a6e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005a70:	4b10      	ldr	r3, [pc, #64]	@ (8005ab4 <HAL_RCC_OscConfig+0x778>)
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	4a0f      	ldr	r2, [pc, #60]	@ (8005ab4 <HAL_RCC_OscConfig+0x778>)
 8005a76:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005a7a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005a7c:	4b0d      	ldr	r3, [pc, #52]	@ (8005ab4 <HAL_RCC_OscConfig+0x778>)
 8005a7e:	68db      	ldr	r3, [r3, #12]
 8005a80:	4a0c      	ldr	r2, [pc, #48]	@ (8005ab4 <HAL_RCC_OscConfig+0x778>)
 8005a82:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005a86:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005a88:	f7fc fcb4 	bl	80023f4 <HAL_GetTick>
 8005a8c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005a8e:	e008      	b.n	8005aa2 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a90:	f7fc fcb0 	bl	80023f4 <HAL_GetTick>
 8005a94:	4602      	mov	r2, r0
 8005a96:	693b      	ldr	r3, [r7, #16]
 8005a98:	1ad3      	subs	r3, r2, r3
 8005a9a:	2b02      	cmp	r3, #2
 8005a9c:	d901      	bls.n	8005aa2 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8005a9e:	2303      	movs	r3, #3
 8005aa0:	e058      	b.n	8005b54 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005aa2:	4b04      	ldr	r3, [pc, #16]	@ (8005ab4 <HAL_RCC_OscConfig+0x778>)
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d0f0      	beq.n	8005a90 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005aae:	e050      	b.n	8005b52 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005ab0:	2301      	movs	r3, #1
 8005ab2:	e04f      	b.n	8005b54 <HAL_RCC_OscConfig+0x818>
 8005ab4:	40021000 	.word	0x40021000
 8005ab8:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005abc:	4b27      	ldr	r3, [pc, #156]	@ (8005b5c <HAL_RCC_OscConfig+0x820>)
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d144      	bne.n	8005b52 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005ac8:	4b24      	ldr	r3, [pc, #144]	@ (8005b5c <HAL_RCC_OscConfig+0x820>)
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	4a23      	ldr	r2, [pc, #140]	@ (8005b5c <HAL_RCC_OscConfig+0x820>)
 8005ace:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005ad2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005ad4:	4b21      	ldr	r3, [pc, #132]	@ (8005b5c <HAL_RCC_OscConfig+0x820>)
 8005ad6:	68db      	ldr	r3, [r3, #12]
 8005ad8:	4a20      	ldr	r2, [pc, #128]	@ (8005b5c <HAL_RCC_OscConfig+0x820>)
 8005ada:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005ade:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005ae0:	f7fc fc88 	bl	80023f4 <HAL_GetTick>
 8005ae4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005ae6:	e008      	b.n	8005afa <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005ae8:	f7fc fc84 	bl	80023f4 <HAL_GetTick>
 8005aec:	4602      	mov	r2, r0
 8005aee:	693b      	ldr	r3, [r7, #16]
 8005af0:	1ad3      	subs	r3, r2, r3
 8005af2:	2b02      	cmp	r3, #2
 8005af4:	d901      	bls.n	8005afa <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8005af6:	2303      	movs	r3, #3
 8005af8:	e02c      	b.n	8005b54 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005afa:	4b18      	ldr	r3, [pc, #96]	@ (8005b5c <HAL_RCC_OscConfig+0x820>)
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d0f0      	beq.n	8005ae8 <HAL_RCC_OscConfig+0x7ac>
 8005b06:	e024      	b.n	8005b52 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005b08:	69bb      	ldr	r3, [r7, #24]
 8005b0a:	2b0c      	cmp	r3, #12
 8005b0c:	d01f      	beq.n	8005b4e <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005b0e:	4b13      	ldr	r3, [pc, #76]	@ (8005b5c <HAL_RCC_OscConfig+0x820>)
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	4a12      	ldr	r2, [pc, #72]	@ (8005b5c <HAL_RCC_OscConfig+0x820>)
 8005b14:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005b18:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b1a:	f7fc fc6b 	bl	80023f4 <HAL_GetTick>
 8005b1e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005b20:	e008      	b.n	8005b34 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b22:	f7fc fc67 	bl	80023f4 <HAL_GetTick>
 8005b26:	4602      	mov	r2, r0
 8005b28:	693b      	ldr	r3, [r7, #16]
 8005b2a:	1ad3      	subs	r3, r2, r3
 8005b2c:	2b02      	cmp	r3, #2
 8005b2e:	d901      	bls.n	8005b34 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8005b30:	2303      	movs	r3, #3
 8005b32:	e00f      	b.n	8005b54 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005b34:	4b09      	ldr	r3, [pc, #36]	@ (8005b5c <HAL_RCC_OscConfig+0x820>)
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d1f0      	bne.n	8005b22 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8005b40:	4b06      	ldr	r3, [pc, #24]	@ (8005b5c <HAL_RCC_OscConfig+0x820>)
 8005b42:	68da      	ldr	r2, [r3, #12]
 8005b44:	4905      	ldr	r1, [pc, #20]	@ (8005b5c <HAL_RCC_OscConfig+0x820>)
 8005b46:	4b06      	ldr	r3, [pc, #24]	@ (8005b60 <HAL_RCC_OscConfig+0x824>)
 8005b48:	4013      	ands	r3, r2
 8005b4a:	60cb      	str	r3, [r1, #12]
 8005b4c:	e001      	b.n	8005b52 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005b4e:	2301      	movs	r3, #1
 8005b50:	e000      	b.n	8005b54 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8005b52:	2300      	movs	r3, #0
}
 8005b54:	4618      	mov	r0, r3
 8005b56:	3720      	adds	r7, #32
 8005b58:	46bd      	mov	sp, r7
 8005b5a:	bd80      	pop	{r7, pc}
 8005b5c:	40021000 	.word	0x40021000
 8005b60:	feeefffc 	.word	0xfeeefffc

08005b64 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005b64:	b580      	push	{r7, lr}
 8005b66:	b084      	sub	sp, #16
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	6078      	str	r0, [r7, #4]
 8005b6c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d101      	bne.n	8005b78 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005b74:	2301      	movs	r3, #1
 8005b76:	e0e7      	b.n	8005d48 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005b78:	4b75      	ldr	r3, [pc, #468]	@ (8005d50 <HAL_RCC_ClockConfig+0x1ec>)
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	f003 0307 	and.w	r3, r3, #7
 8005b80:	683a      	ldr	r2, [r7, #0]
 8005b82:	429a      	cmp	r2, r3
 8005b84:	d910      	bls.n	8005ba8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b86:	4b72      	ldr	r3, [pc, #456]	@ (8005d50 <HAL_RCC_ClockConfig+0x1ec>)
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	f023 0207 	bic.w	r2, r3, #7
 8005b8e:	4970      	ldr	r1, [pc, #448]	@ (8005d50 <HAL_RCC_ClockConfig+0x1ec>)
 8005b90:	683b      	ldr	r3, [r7, #0]
 8005b92:	4313      	orrs	r3, r2
 8005b94:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b96:	4b6e      	ldr	r3, [pc, #440]	@ (8005d50 <HAL_RCC_ClockConfig+0x1ec>)
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	f003 0307 	and.w	r3, r3, #7
 8005b9e:	683a      	ldr	r2, [r7, #0]
 8005ba0:	429a      	cmp	r2, r3
 8005ba2:	d001      	beq.n	8005ba8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005ba4:	2301      	movs	r3, #1
 8005ba6:	e0cf      	b.n	8005d48 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	f003 0302 	and.w	r3, r3, #2
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d010      	beq.n	8005bd6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	689a      	ldr	r2, [r3, #8]
 8005bb8:	4b66      	ldr	r3, [pc, #408]	@ (8005d54 <HAL_RCC_ClockConfig+0x1f0>)
 8005bba:	689b      	ldr	r3, [r3, #8]
 8005bbc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005bc0:	429a      	cmp	r2, r3
 8005bc2:	d908      	bls.n	8005bd6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005bc4:	4b63      	ldr	r3, [pc, #396]	@ (8005d54 <HAL_RCC_ClockConfig+0x1f0>)
 8005bc6:	689b      	ldr	r3, [r3, #8]
 8005bc8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	689b      	ldr	r3, [r3, #8]
 8005bd0:	4960      	ldr	r1, [pc, #384]	@ (8005d54 <HAL_RCC_ClockConfig+0x1f0>)
 8005bd2:	4313      	orrs	r3, r2
 8005bd4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	f003 0301 	and.w	r3, r3, #1
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d04c      	beq.n	8005c7c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	685b      	ldr	r3, [r3, #4]
 8005be6:	2b03      	cmp	r3, #3
 8005be8:	d107      	bne.n	8005bfa <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005bea:	4b5a      	ldr	r3, [pc, #360]	@ (8005d54 <HAL_RCC_ClockConfig+0x1f0>)
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d121      	bne.n	8005c3a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8005bf6:	2301      	movs	r3, #1
 8005bf8:	e0a6      	b.n	8005d48 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	685b      	ldr	r3, [r3, #4]
 8005bfe:	2b02      	cmp	r3, #2
 8005c00:	d107      	bne.n	8005c12 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005c02:	4b54      	ldr	r3, [pc, #336]	@ (8005d54 <HAL_RCC_ClockConfig+0x1f0>)
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d115      	bne.n	8005c3a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005c0e:	2301      	movs	r3, #1
 8005c10:	e09a      	b.n	8005d48 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	685b      	ldr	r3, [r3, #4]
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d107      	bne.n	8005c2a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005c1a:	4b4e      	ldr	r3, [pc, #312]	@ (8005d54 <HAL_RCC_ClockConfig+0x1f0>)
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	f003 0302 	and.w	r3, r3, #2
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d109      	bne.n	8005c3a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005c26:	2301      	movs	r3, #1
 8005c28:	e08e      	b.n	8005d48 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005c2a:	4b4a      	ldr	r3, [pc, #296]	@ (8005d54 <HAL_RCC_ClockConfig+0x1f0>)
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d101      	bne.n	8005c3a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005c36:	2301      	movs	r3, #1
 8005c38:	e086      	b.n	8005d48 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005c3a:	4b46      	ldr	r3, [pc, #280]	@ (8005d54 <HAL_RCC_ClockConfig+0x1f0>)
 8005c3c:	689b      	ldr	r3, [r3, #8]
 8005c3e:	f023 0203 	bic.w	r2, r3, #3
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	685b      	ldr	r3, [r3, #4]
 8005c46:	4943      	ldr	r1, [pc, #268]	@ (8005d54 <HAL_RCC_ClockConfig+0x1f0>)
 8005c48:	4313      	orrs	r3, r2
 8005c4a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005c4c:	f7fc fbd2 	bl	80023f4 <HAL_GetTick>
 8005c50:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c52:	e00a      	b.n	8005c6a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005c54:	f7fc fbce 	bl	80023f4 <HAL_GetTick>
 8005c58:	4602      	mov	r2, r0
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	1ad3      	subs	r3, r2, r3
 8005c5e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005c62:	4293      	cmp	r3, r2
 8005c64:	d901      	bls.n	8005c6a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8005c66:	2303      	movs	r3, #3
 8005c68:	e06e      	b.n	8005d48 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c6a:	4b3a      	ldr	r3, [pc, #232]	@ (8005d54 <HAL_RCC_ClockConfig+0x1f0>)
 8005c6c:	689b      	ldr	r3, [r3, #8]
 8005c6e:	f003 020c 	and.w	r2, r3, #12
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	685b      	ldr	r3, [r3, #4]
 8005c76:	009b      	lsls	r3, r3, #2
 8005c78:	429a      	cmp	r2, r3
 8005c7a:	d1eb      	bne.n	8005c54 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	f003 0302 	and.w	r3, r3, #2
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d010      	beq.n	8005caa <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	689a      	ldr	r2, [r3, #8]
 8005c8c:	4b31      	ldr	r3, [pc, #196]	@ (8005d54 <HAL_RCC_ClockConfig+0x1f0>)
 8005c8e:	689b      	ldr	r3, [r3, #8]
 8005c90:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005c94:	429a      	cmp	r2, r3
 8005c96:	d208      	bcs.n	8005caa <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005c98:	4b2e      	ldr	r3, [pc, #184]	@ (8005d54 <HAL_RCC_ClockConfig+0x1f0>)
 8005c9a:	689b      	ldr	r3, [r3, #8]
 8005c9c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	689b      	ldr	r3, [r3, #8]
 8005ca4:	492b      	ldr	r1, [pc, #172]	@ (8005d54 <HAL_RCC_ClockConfig+0x1f0>)
 8005ca6:	4313      	orrs	r3, r2
 8005ca8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005caa:	4b29      	ldr	r3, [pc, #164]	@ (8005d50 <HAL_RCC_ClockConfig+0x1ec>)
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	f003 0307 	and.w	r3, r3, #7
 8005cb2:	683a      	ldr	r2, [r7, #0]
 8005cb4:	429a      	cmp	r2, r3
 8005cb6:	d210      	bcs.n	8005cda <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005cb8:	4b25      	ldr	r3, [pc, #148]	@ (8005d50 <HAL_RCC_ClockConfig+0x1ec>)
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	f023 0207 	bic.w	r2, r3, #7
 8005cc0:	4923      	ldr	r1, [pc, #140]	@ (8005d50 <HAL_RCC_ClockConfig+0x1ec>)
 8005cc2:	683b      	ldr	r3, [r7, #0]
 8005cc4:	4313      	orrs	r3, r2
 8005cc6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005cc8:	4b21      	ldr	r3, [pc, #132]	@ (8005d50 <HAL_RCC_ClockConfig+0x1ec>)
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	f003 0307 	and.w	r3, r3, #7
 8005cd0:	683a      	ldr	r2, [r7, #0]
 8005cd2:	429a      	cmp	r2, r3
 8005cd4:	d001      	beq.n	8005cda <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8005cd6:	2301      	movs	r3, #1
 8005cd8:	e036      	b.n	8005d48 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	f003 0304 	and.w	r3, r3, #4
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d008      	beq.n	8005cf8 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005ce6:	4b1b      	ldr	r3, [pc, #108]	@ (8005d54 <HAL_RCC_ClockConfig+0x1f0>)
 8005ce8:	689b      	ldr	r3, [r3, #8]
 8005cea:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	68db      	ldr	r3, [r3, #12]
 8005cf2:	4918      	ldr	r1, [pc, #96]	@ (8005d54 <HAL_RCC_ClockConfig+0x1f0>)
 8005cf4:	4313      	orrs	r3, r2
 8005cf6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	f003 0308 	and.w	r3, r3, #8
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d009      	beq.n	8005d18 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005d04:	4b13      	ldr	r3, [pc, #76]	@ (8005d54 <HAL_RCC_ClockConfig+0x1f0>)
 8005d06:	689b      	ldr	r3, [r3, #8]
 8005d08:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	691b      	ldr	r3, [r3, #16]
 8005d10:	00db      	lsls	r3, r3, #3
 8005d12:	4910      	ldr	r1, [pc, #64]	@ (8005d54 <HAL_RCC_ClockConfig+0x1f0>)
 8005d14:	4313      	orrs	r3, r2
 8005d16:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005d18:	f000 f824 	bl	8005d64 <HAL_RCC_GetSysClockFreq>
 8005d1c:	4602      	mov	r2, r0
 8005d1e:	4b0d      	ldr	r3, [pc, #52]	@ (8005d54 <HAL_RCC_ClockConfig+0x1f0>)
 8005d20:	689b      	ldr	r3, [r3, #8]
 8005d22:	091b      	lsrs	r3, r3, #4
 8005d24:	f003 030f 	and.w	r3, r3, #15
 8005d28:	490b      	ldr	r1, [pc, #44]	@ (8005d58 <HAL_RCC_ClockConfig+0x1f4>)
 8005d2a:	5ccb      	ldrb	r3, [r1, r3]
 8005d2c:	f003 031f 	and.w	r3, r3, #31
 8005d30:	fa22 f303 	lsr.w	r3, r2, r3
 8005d34:	4a09      	ldr	r2, [pc, #36]	@ (8005d5c <HAL_RCC_ClockConfig+0x1f8>)
 8005d36:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005d38:	4b09      	ldr	r3, [pc, #36]	@ (8005d60 <HAL_RCC_ClockConfig+0x1fc>)
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	4618      	mov	r0, r3
 8005d3e:	f7fc fb09 	bl	8002354 <HAL_InitTick>
 8005d42:	4603      	mov	r3, r0
 8005d44:	72fb      	strb	r3, [r7, #11]

  return status;
 8005d46:	7afb      	ldrb	r3, [r7, #11]
}
 8005d48:	4618      	mov	r0, r3
 8005d4a:	3710      	adds	r7, #16
 8005d4c:	46bd      	mov	sp, r7
 8005d4e:	bd80      	pop	{r7, pc}
 8005d50:	40022000 	.word	0x40022000
 8005d54:	40021000 	.word	0x40021000
 8005d58:	08007608 	.word	0x08007608
 8005d5c:	20000000 	.word	0x20000000
 8005d60:	20000004 	.word	0x20000004

08005d64 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005d64:	b480      	push	{r7}
 8005d66:	b089      	sub	sp, #36	@ 0x24
 8005d68:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005d6a:	2300      	movs	r3, #0
 8005d6c:	61fb      	str	r3, [r7, #28]
 8005d6e:	2300      	movs	r3, #0
 8005d70:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005d72:	4b3e      	ldr	r3, [pc, #248]	@ (8005e6c <HAL_RCC_GetSysClockFreq+0x108>)
 8005d74:	689b      	ldr	r3, [r3, #8]
 8005d76:	f003 030c 	and.w	r3, r3, #12
 8005d7a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005d7c:	4b3b      	ldr	r3, [pc, #236]	@ (8005e6c <HAL_RCC_GetSysClockFreq+0x108>)
 8005d7e:	68db      	ldr	r3, [r3, #12]
 8005d80:	f003 0303 	and.w	r3, r3, #3
 8005d84:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005d86:	693b      	ldr	r3, [r7, #16]
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d005      	beq.n	8005d98 <HAL_RCC_GetSysClockFreq+0x34>
 8005d8c:	693b      	ldr	r3, [r7, #16]
 8005d8e:	2b0c      	cmp	r3, #12
 8005d90:	d121      	bne.n	8005dd6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	2b01      	cmp	r3, #1
 8005d96:	d11e      	bne.n	8005dd6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005d98:	4b34      	ldr	r3, [pc, #208]	@ (8005e6c <HAL_RCC_GetSysClockFreq+0x108>)
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	f003 0308 	and.w	r3, r3, #8
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d107      	bne.n	8005db4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005da4:	4b31      	ldr	r3, [pc, #196]	@ (8005e6c <HAL_RCC_GetSysClockFreq+0x108>)
 8005da6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005daa:	0a1b      	lsrs	r3, r3, #8
 8005dac:	f003 030f 	and.w	r3, r3, #15
 8005db0:	61fb      	str	r3, [r7, #28]
 8005db2:	e005      	b.n	8005dc0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005db4:	4b2d      	ldr	r3, [pc, #180]	@ (8005e6c <HAL_RCC_GetSysClockFreq+0x108>)
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	091b      	lsrs	r3, r3, #4
 8005dba:	f003 030f 	and.w	r3, r3, #15
 8005dbe:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005dc0:	4a2b      	ldr	r2, [pc, #172]	@ (8005e70 <HAL_RCC_GetSysClockFreq+0x10c>)
 8005dc2:	69fb      	ldr	r3, [r7, #28]
 8005dc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005dc8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005dca:	693b      	ldr	r3, [r7, #16]
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d10d      	bne.n	8005dec <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005dd0:	69fb      	ldr	r3, [r7, #28]
 8005dd2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005dd4:	e00a      	b.n	8005dec <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8005dd6:	693b      	ldr	r3, [r7, #16]
 8005dd8:	2b04      	cmp	r3, #4
 8005dda:	d102      	bne.n	8005de2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005ddc:	4b25      	ldr	r3, [pc, #148]	@ (8005e74 <HAL_RCC_GetSysClockFreq+0x110>)
 8005dde:	61bb      	str	r3, [r7, #24]
 8005de0:	e004      	b.n	8005dec <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8005de2:	693b      	ldr	r3, [r7, #16]
 8005de4:	2b08      	cmp	r3, #8
 8005de6:	d101      	bne.n	8005dec <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005de8:	4b23      	ldr	r3, [pc, #140]	@ (8005e78 <HAL_RCC_GetSysClockFreq+0x114>)
 8005dea:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005dec:	693b      	ldr	r3, [r7, #16]
 8005dee:	2b0c      	cmp	r3, #12
 8005df0:	d134      	bne.n	8005e5c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005df2:	4b1e      	ldr	r3, [pc, #120]	@ (8005e6c <HAL_RCC_GetSysClockFreq+0x108>)
 8005df4:	68db      	ldr	r3, [r3, #12]
 8005df6:	f003 0303 	and.w	r3, r3, #3
 8005dfa:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005dfc:	68bb      	ldr	r3, [r7, #8]
 8005dfe:	2b02      	cmp	r3, #2
 8005e00:	d003      	beq.n	8005e0a <HAL_RCC_GetSysClockFreq+0xa6>
 8005e02:	68bb      	ldr	r3, [r7, #8]
 8005e04:	2b03      	cmp	r3, #3
 8005e06:	d003      	beq.n	8005e10 <HAL_RCC_GetSysClockFreq+0xac>
 8005e08:	e005      	b.n	8005e16 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8005e0a:	4b1a      	ldr	r3, [pc, #104]	@ (8005e74 <HAL_RCC_GetSysClockFreq+0x110>)
 8005e0c:	617b      	str	r3, [r7, #20]
      break;
 8005e0e:	e005      	b.n	8005e1c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005e10:	4b19      	ldr	r3, [pc, #100]	@ (8005e78 <HAL_RCC_GetSysClockFreq+0x114>)
 8005e12:	617b      	str	r3, [r7, #20]
      break;
 8005e14:	e002      	b.n	8005e1c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8005e16:	69fb      	ldr	r3, [r7, #28]
 8005e18:	617b      	str	r3, [r7, #20]
      break;
 8005e1a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005e1c:	4b13      	ldr	r3, [pc, #76]	@ (8005e6c <HAL_RCC_GetSysClockFreq+0x108>)
 8005e1e:	68db      	ldr	r3, [r3, #12]
 8005e20:	091b      	lsrs	r3, r3, #4
 8005e22:	f003 0307 	and.w	r3, r3, #7
 8005e26:	3301      	adds	r3, #1
 8005e28:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005e2a:	4b10      	ldr	r3, [pc, #64]	@ (8005e6c <HAL_RCC_GetSysClockFreq+0x108>)
 8005e2c:	68db      	ldr	r3, [r3, #12]
 8005e2e:	0a1b      	lsrs	r3, r3, #8
 8005e30:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005e34:	697a      	ldr	r2, [r7, #20]
 8005e36:	fb03 f202 	mul.w	r2, r3, r2
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e40:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005e42:	4b0a      	ldr	r3, [pc, #40]	@ (8005e6c <HAL_RCC_GetSysClockFreq+0x108>)
 8005e44:	68db      	ldr	r3, [r3, #12]
 8005e46:	0e5b      	lsrs	r3, r3, #25
 8005e48:	f003 0303 	and.w	r3, r3, #3
 8005e4c:	3301      	adds	r3, #1
 8005e4e:	005b      	lsls	r3, r3, #1
 8005e50:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005e52:	697a      	ldr	r2, [r7, #20]
 8005e54:	683b      	ldr	r3, [r7, #0]
 8005e56:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e5a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005e5c:	69bb      	ldr	r3, [r7, #24]
}
 8005e5e:	4618      	mov	r0, r3
 8005e60:	3724      	adds	r7, #36	@ 0x24
 8005e62:	46bd      	mov	sp, r7
 8005e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e68:	4770      	bx	lr
 8005e6a:	bf00      	nop
 8005e6c:	40021000 	.word	0x40021000
 8005e70:	08007620 	.word	0x08007620
 8005e74:	00f42400 	.word	0x00f42400
 8005e78:	007a1200 	.word	0x007a1200

08005e7c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005e7c:	b480      	push	{r7}
 8005e7e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005e80:	4b03      	ldr	r3, [pc, #12]	@ (8005e90 <HAL_RCC_GetHCLKFreq+0x14>)
 8005e82:	681b      	ldr	r3, [r3, #0]
}
 8005e84:	4618      	mov	r0, r3
 8005e86:	46bd      	mov	sp, r7
 8005e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8c:	4770      	bx	lr
 8005e8e:	bf00      	nop
 8005e90:	20000000 	.word	0x20000000

08005e94 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005e94:	b580      	push	{r7, lr}
 8005e96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005e98:	f7ff fff0 	bl	8005e7c <HAL_RCC_GetHCLKFreq>
 8005e9c:	4602      	mov	r2, r0
 8005e9e:	4b06      	ldr	r3, [pc, #24]	@ (8005eb8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005ea0:	689b      	ldr	r3, [r3, #8]
 8005ea2:	0a1b      	lsrs	r3, r3, #8
 8005ea4:	f003 0307 	and.w	r3, r3, #7
 8005ea8:	4904      	ldr	r1, [pc, #16]	@ (8005ebc <HAL_RCC_GetPCLK1Freq+0x28>)
 8005eaa:	5ccb      	ldrb	r3, [r1, r3]
 8005eac:	f003 031f 	and.w	r3, r3, #31
 8005eb0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005eb4:	4618      	mov	r0, r3
 8005eb6:	bd80      	pop	{r7, pc}
 8005eb8:	40021000 	.word	0x40021000
 8005ebc:	08007618 	.word	0x08007618

08005ec0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005ec0:	b580      	push	{r7, lr}
 8005ec2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005ec4:	f7ff ffda 	bl	8005e7c <HAL_RCC_GetHCLKFreq>
 8005ec8:	4602      	mov	r2, r0
 8005eca:	4b06      	ldr	r3, [pc, #24]	@ (8005ee4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005ecc:	689b      	ldr	r3, [r3, #8]
 8005ece:	0adb      	lsrs	r3, r3, #11
 8005ed0:	f003 0307 	and.w	r3, r3, #7
 8005ed4:	4904      	ldr	r1, [pc, #16]	@ (8005ee8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005ed6:	5ccb      	ldrb	r3, [r1, r3]
 8005ed8:	f003 031f 	and.w	r3, r3, #31
 8005edc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005ee0:	4618      	mov	r0, r3
 8005ee2:	bd80      	pop	{r7, pc}
 8005ee4:	40021000 	.word	0x40021000
 8005ee8:	08007618 	.word	0x08007618

08005eec <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005eec:	b580      	push	{r7, lr}
 8005eee:	b086      	sub	sp, #24
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005ef4:	2300      	movs	r3, #0
 8005ef6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005ef8:	4b2a      	ldr	r3, [pc, #168]	@ (8005fa4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005efa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005efc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d003      	beq.n	8005f0c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005f04:	f7ff f98c 	bl	8005220 <HAL_PWREx_GetVoltageRange>
 8005f08:	6178      	str	r0, [r7, #20]
 8005f0a:	e014      	b.n	8005f36 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005f0c:	4b25      	ldr	r3, [pc, #148]	@ (8005fa4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005f0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f10:	4a24      	ldr	r2, [pc, #144]	@ (8005fa4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005f12:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005f16:	6593      	str	r3, [r2, #88]	@ 0x58
 8005f18:	4b22      	ldr	r3, [pc, #136]	@ (8005fa4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005f1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f1c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005f20:	60fb      	str	r3, [r7, #12]
 8005f22:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005f24:	f7ff f97c 	bl	8005220 <HAL_PWREx_GetVoltageRange>
 8005f28:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005f2a:	4b1e      	ldr	r3, [pc, #120]	@ (8005fa4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005f2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f2e:	4a1d      	ldr	r2, [pc, #116]	@ (8005fa4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005f30:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005f34:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005f36:	697b      	ldr	r3, [r7, #20]
 8005f38:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005f3c:	d10b      	bne.n	8005f56 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	2b80      	cmp	r3, #128	@ 0x80
 8005f42:	d919      	bls.n	8005f78 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	2ba0      	cmp	r3, #160	@ 0xa0
 8005f48:	d902      	bls.n	8005f50 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005f4a:	2302      	movs	r3, #2
 8005f4c:	613b      	str	r3, [r7, #16]
 8005f4e:	e013      	b.n	8005f78 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005f50:	2301      	movs	r3, #1
 8005f52:	613b      	str	r3, [r7, #16]
 8005f54:	e010      	b.n	8005f78 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	2b80      	cmp	r3, #128	@ 0x80
 8005f5a:	d902      	bls.n	8005f62 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8005f5c:	2303      	movs	r3, #3
 8005f5e:	613b      	str	r3, [r7, #16]
 8005f60:	e00a      	b.n	8005f78 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	2b80      	cmp	r3, #128	@ 0x80
 8005f66:	d102      	bne.n	8005f6e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005f68:	2302      	movs	r3, #2
 8005f6a:	613b      	str	r3, [r7, #16]
 8005f6c:	e004      	b.n	8005f78 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	2b70      	cmp	r3, #112	@ 0x70
 8005f72:	d101      	bne.n	8005f78 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005f74:	2301      	movs	r3, #1
 8005f76:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005f78:	4b0b      	ldr	r3, [pc, #44]	@ (8005fa8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	f023 0207 	bic.w	r2, r3, #7
 8005f80:	4909      	ldr	r1, [pc, #36]	@ (8005fa8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005f82:	693b      	ldr	r3, [r7, #16]
 8005f84:	4313      	orrs	r3, r2
 8005f86:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005f88:	4b07      	ldr	r3, [pc, #28]	@ (8005fa8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	f003 0307 	and.w	r3, r3, #7
 8005f90:	693a      	ldr	r2, [r7, #16]
 8005f92:	429a      	cmp	r2, r3
 8005f94:	d001      	beq.n	8005f9a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8005f96:	2301      	movs	r3, #1
 8005f98:	e000      	b.n	8005f9c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8005f9a:	2300      	movs	r3, #0
}
 8005f9c:	4618      	mov	r0, r3
 8005f9e:	3718      	adds	r7, #24
 8005fa0:	46bd      	mov	sp, r7
 8005fa2:	bd80      	pop	{r7, pc}
 8005fa4:	40021000 	.word	0x40021000
 8005fa8:	40022000 	.word	0x40022000

08005fac <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005fac:	b580      	push	{r7, lr}
 8005fae:	b086      	sub	sp, #24
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005fb4:	2300      	movs	r3, #0
 8005fb6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005fb8:	2300      	movs	r3, #0
 8005fba:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d031      	beq.n	800602c <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005fcc:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8005fd0:	d01a      	beq.n	8006008 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8005fd2:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8005fd6:	d814      	bhi.n	8006002 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d009      	beq.n	8005ff0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8005fdc:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005fe0:	d10f      	bne.n	8006002 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8005fe2:	4b5d      	ldr	r3, [pc, #372]	@ (8006158 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005fe4:	68db      	ldr	r3, [r3, #12]
 8005fe6:	4a5c      	ldr	r2, [pc, #368]	@ (8006158 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005fe8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005fec:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005fee:	e00c      	b.n	800600a <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	3304      	adds	r3, #4
 8005ff4:	2100      	movs	r1, #0
 8005ff6:	4618      	mov	r0, r3
 8005ff8:	f000 f9de 	bl	80063b8 <RCCEx_PLLSAI1_Config>
 8005ffc:	4603      	mov	r3, r0
 8005ffe:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006000:	e003      	b.n	800600a <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006002:	2301      	movs	r3, #1
 8006004:	74fb      	strb	r3, [r7, #19]
      break;
 8006006:	e000      	b.n	800600a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8006008:	bf00      	nop
    }

    if(ret == HAL_OK)
 800600a:	7cfb      	ldrb	r3, [r7, #19]
 800600c:	2b00      	cmp	r3, #0
 800600e:	d10b      	bne.n	8006028 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006010:	4b51      	ldr	r3, [pc, #324]	@ (8006158 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006012:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006016:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800601e:	494e      	ldr	r1, [pc, #312]	@ (8006158 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006020:	4313      	orrs	r3, r2
 8006022:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8006026:	e001      	b.n	800602c <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006028:	7cfb      	ldrb	r3, [r7, #19]
 800602a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006034:	2b00      	cmp	r3, #0
 8006036:	f000 809e 	beq.w	8006176 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 800603a:	2300      	movs	r3, #0
 800603c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800603e:	4b46      	ldr	r3, [pc, #280]	@ (8006158 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006040:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006042:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006046:	2b00      	cmp	r3, #0
 8006048:	d101      	bne.n	800604e <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800604a:	2301      	movs	r3, #1
 800604c:	e000      	b.n	8006050 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 800604e:	2300      	movs	r3, #0
 8006050:	2b00      	cmp	r3, #0
 8006052:	d00d      	beq.n	8006070 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006054:	4b40      	ldr	r3, [pc, #256]	@ (8006158 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006056:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006058:	4a3f      	ldr	r2, [pc, #252]	@ (8006158 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800605a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800605e:	6593      	str	r3, [r2, #88]	@ 0x58
 8006060:	4b3d      	ldr	r3, [pc, #244]	@ (8006158 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006062:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006064:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006068:	60bb      	str	r3, [r7, #8]
 800606a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800606c:	2301      	movs	r3, #1
 800606e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006070:	4b3a      	ldr	r3, [pc, #232]	@ (800615c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	4a39      	ldr	r2, [pc, #228]	@ (800615c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8006076:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800607a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800607c:	f7fc f9ba 	bl	80023f4 <HAL_GetTick>
 8006080:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006082:	e009      	b.n	8006098 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006084:	f7fc f9b6 	bl	80023f4 <HAL_GetTick>
 8006088:	4602      	mov	r2, r0
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	1ad3      	subs	r3, r2, r3
 800608e:	2b02      	cmp	r3, #2
 8006090:	d902      	bls.n	8006098 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8006092:	2303      	movs	r3, #3
 8006094:	74fb      	strb	r3, [r7, #19]
        break;
 8006096:	e005      	b.n	80060a4 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006098:	4b30      	ldr	r3, [pc, #192]	@ (800615c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d0ef      	beq.n	8006084 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 80060a4:	7cfb      	ldrb	r3, [r7, #19]
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d15a      	bne.n	8006160 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80060aa:	4b2b      	ldr	r3, [pc, #172]	@ (8006158 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80060ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80060b0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80060b4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80060b6:	697b      	ldr	r3, [r7, #20]
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d01e      	beq.n	80060fa <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80060c0:	697a      	ldr	r2, [r7, #20]
 80060c2:	429a      	cmp	r2, r3
 80060c4:	d019      	beq.n	80060fa <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80060c6:	4b24      	ldr	r3, [pc, #144]	@ (8006158 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80060c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80060cc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80060d0:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80060d2:	4b21      	ldr	r3, [pc, #132]	@ (8006158 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80060d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80060d8:	4a1f      	ldr	r2, [pc, #124]	@ (8006158 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80060da:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80060de:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80060e2:	4b1d      	ldr	r3, [pc, #116]	@ (8006158 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80060e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80060e8:	4a1b      	ldr	r2, [pc, #108]	@ (8006158 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80060ea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80060ee:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80060f2:	4a19      	ldr	r2, [pc, #100]	@ (8006158 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80060f4:	697b      	ldr	r3, [r7, #20]
 80060f6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80060fa:	697b      	ldr	r3, [r7, #20]
 80060fc:	f003 0301 	and.w	r3, r3, #1
 8006100:	2b00      	cmp	r3, #0
 8006102:	d016      	beq.n	8006132 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006104:	f7fc f976 	bl	80023f4 <HAL_GetTick>
 8006108:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800610a:	e00b      	b.n	8006124 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800610c:	f7fc f972 	bl	80023f4 <HAL_GetTick>
 8006110:	4602      	mov	r2, r0
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	1ad3      	subs	r3, r2, r3
 8006116:	f241 3288 	movw	r2, #5000	@ 0x1388
 800611a:	4293      	cmp	r3, r2
 800611c:	d902      	bls.n	8006124 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 800611e:	2303      	movs	r3, #3
 8006120:	74fb      	strb	r3, [r7, #19]
            break;
 8006122:	e006      	b.n	8006132 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006124:	4b0c      	ldr	r3, [pc, #48]	@ (8006158 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006126:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800612a:	f003 0302 	and.w	r3, r3, #2
 800612e:	2b00      	cmp	r3, #0
 8006130:	d0ec      	beq.n	800610c <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8006132:	7cfb      	ldrb	r3, [r7, #19]
 8006134:	2b00      	cmp	r3, #0
 8006136:	d10b      	bne.n	8006150 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006138:	4b07      	ldr	r3, [pc, #28]	@ (8006158 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800613a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800613e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006146:	4904      	ldr	r1, [pc, #16]	@ (8006158 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006148:	4313      	orrs	r3, r2
 800614a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800614e:	e009      	b.n	8006164 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006150:	7cfb      	ldrb	r3, [r7, #19]
 8006152:	74bb      	strb	r3, [r7, #18]
 8006154:	e006      	b.n	8006164 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8006156:	bf00      	nop
 8006158:	40021000 	.word	0x40021000
 800615c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006160:	7cfb      	ldrb	r3, [r7, #19]
 8006162:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006164:	7c7b      	ldrb	r3, [r7, #17]
 8006166:	2b01      	cmp	r3, #1
 8006168:	d105      	bne.n	8006176 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800616a:	4b8a      	ldr	r3, [pc, #552]	@ (8006394 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800616c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800616e:	4a89      	ldr	r2, [pc, #548]	@ (8006394 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006170:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006174:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	f003 0301 	and.w	r3, r3, #1
 800617e:	2b00      	cmp	r3, #0
 8006180:	d00a      	beq.n	8006198 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006182:	4b84      	ldr	r3, [pc, #528]	@ (8006394 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006184:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006188:	f023 0203 	bic.w	r2, r3, #3
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	6a1b      	ldr	r3, [r3, #32]
 8006190:	4980      	ldr	r1, [pc, #512]	@ (8006394 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006192:	4313      	orrs	r3, r2
 8006194:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	f003 0302 	and.w	r3, r3, #2
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d00a      	beq.n	80061ba <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80061a4:	4b7b      	ldr	r3, [pc, #492]	@ (8006394 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80061a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80061aa:	f023 020c 	bic.w	r2, r3, #12
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061b2:	4978      	ldr	r1, [pc, #480]	@ (8006394 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80061b4:	4313      	orrs	r3, r2
 80061b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	f003 0320 	and.w	r3, r3, #32
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d00a      	beq.n	80061dc <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80061c6:	4b73      	ldr	r3, [pc, #460]	@ (8006394 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80061c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80061cc:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061d4:	496f      	ldr	r1, [pc, #444]	@ (8006394 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80061d6:	4313      	orrs	r3, r2
 80061d8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d00a      	beq.n	80061fe <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80061e8:	4b6a      	ldr	r3, [pc, #424]	@ (8006394 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80061ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80061ee:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80061f6:	4967      	ldr	r1, [pc, #412]	@ (8006394 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80061f8:	4313      	orrs	r3, r2
 80061fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006206:	2b00      	cmp	r3, #0
 8006208:	d00a      	beq.n	8006220 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800620a:	4b62      	ldr	r3, [pc, #392]	@ (8006394 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800620c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006210:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006218:	495e      	ldr	r1, [pc, #376]	@ (8006394 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800621a:	4313      	orrs	r3, r2
 800621c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006228:	2b00      	cmp	r3, #0
 800622a:	d00a      	beq.n	8006242 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800622c:	4b59      	ldr	r3, [pc, #356]	@ (8006394 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800622e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006232:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800623a:	4956      	ldr	r1, [pc, #344]	@ (8006394 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800623c:	4313      	orrs	r3, r2
 800623e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800624a:	2b00      	cmp	r3, #0
 800624c:	d00a      	beq.n	8006264 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800624e:	4b51      	ldr	r3, [pc, #324]	@ (8006394 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006250:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006254:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800625c:	494d      	ldr	r1, [pc, #308]	@ (8006394 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800625e:	4313      	orrs	r3, r2
 8006260:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800626c:	2b00      	cmp	r3, #0
 800626e:	d028      	beq.n	80062c2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006270:	4b48      	ldr	r3, [pc, #288]	@ (8006394 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006272:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006276:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800627e:	4945      	ldr	r1, [pc, #276]	@ (8006394 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006280:	4313      	orrs	r3, r2
 8006282:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800628a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800628e:	d106      	bne.n	800629e <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006290:	4b40      	ldr	r3, [pc, #256]	@ (8006394 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006292:	68db      	ldr	r3, [r3, #12]
 8006294:	4a3f      	ldr	r2, [pc, #252]	@ (8006394 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006296:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800629a:	60d3      	str	r3, [r2, #12]
 800629c:	e011      	b.n	80062c2 <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062a2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80062a6:	d10c      	bne.n	80062c2 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	3304      	adds	r3, #4
 80062ac:	2101      	movs	r1, #1
 80062ae:	4618      	mov	r0, r3
 80062b0:	f000 f882 	bl	80063b8 <RCCEx_PLLSAI1_Config>
 80062b4:	4603      	mov	r3, r0
 80062b6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80062b8:	7cfb      	ldrb	r3, [r7, #19]
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d001      	beq.n	80062c2 <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 80062be:	7cfb      	ldrb	r3, [r7, #19]
 80062c0:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d028      	beq.n	8006320 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80062ce:	4b31      	ldr	r3, [pc, #196]	@ (8006394 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80062d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80062d4:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80062dc:	492d      	ldr	r1, [pc, #180]	@ (8006394 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80062de:	4313      	orrs	r3, r2
 80062e0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80062e8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80062ec:	d106      	bne.n	80062fc <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80062ee:	4b29      	ldr	r3, [pc, #164]	@ (8006394 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80062f0:	68db      	ldr	r3, [r3, #12]
 80062f2:	4a28      	ldr	r2, [pc, #160]	@ (8006394 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80062f4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80062f8:	60d3      	str	r3, [r2, #12]
 80062fa:	e011      	b.n	8006320 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006300:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006304:	d10c      	bne.n	8006320 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	3304      	adds	r3, #4
 800630a:	2101      	movs	r1, #1
 800630c:	4618      	mov	r0, r3
 800630e:	f000 f853 	bl	80063b8 <RCCEx_PLLSAI1_Config>
 8006312:	4603      	mov	r3, r0
 8006314:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006316:	7cfb      	ldrb	r3, [r7, #19]
 8006318:	2b00      	cmp	r3, #0
 800631a:	d001      	beq.n	8006320 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 800631c:	7cfb      	ldrb	r3, [r7, #19]
 800631e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006328:	2b00      	cmp	r3, #0
 800632a:	d01c      	beq.n	8006366 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800632c:	4b19      	ldr	r3, [pc, #100]	@ (8006394 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800632e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006332:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800633a:	4916      	ldr	r1, [pc, #88]	@ (8006394 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800633c:	4313      	orrs	r3, r2
 800633e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006346:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800634a:	d10c      	bne.n	8006366 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	3304      	adds	r3, #4
 8006350:	2102      	movs	r1, #2
 8006352:	4618      	mov	r0, r3
 8006354:	f000 f830 	bl	80063b8 <RCCEx_PLLSAI1_Config>
 8006358:	4603      	mov	r3, r0
 800635a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800635c:	7cfb      	ldrb	r3, [r7, #19]
 800635e:	2b00      	cmp	r3, #0
 8006360:	d001      	beq.n	8006366 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8006362:	7cfb      	ldrb	r3, [r7, #19]
 8006364:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800636e:	2b00      	cmp	r3, #0
 8006370:	d00a      	beq.n	8006388 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006372:	4b08      	ldr	r3, [pc, #32]	@ (8006394 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006374:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006378:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006380:	4904      	ldr	r1, [pc, #16]	@ (8006394 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006382:	4313      	orrs	r3, r2
 8006384:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8006388:	7cbb      	ldrb	r3, [r7, #18]
}
 800638a:	4618      	mov	r0, r3
 800638c:	3718      	adds	r7, #24
 800638e:	46bd      	mov	sp, r7
 8006390:	bd80      	pop	{r7, pc}
 8006392:	bf00      	nop
 8006394:	40021000 	.word	0x40021000

08006398 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8006398:	b480      	push	{r7}
 800639a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 800639c:	4b05      	ldr	r3, [pc, #20]	@ (80063b4 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	4a04      	ldr	r2, [pc, #16]	@ (80063b4 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80063a2:	f043 0304 	orr.w	r3, r3, #4
 80063a6:	6013      	str	r3, [r2, #0]
}
 80063a8:	bf00      	nop
 80063aa:	46bd      	mov	sp, r7
 80063ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b0:	4770      	bx	lr
 80063b2:	bf00      	nop
 80063b4:	40021000 	.word	0x40021000

080063b8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80063b8:	b580      	push	{r7, lr}
 80063ba:	b084      	sub	sp, #16
 80063bc:	af00      	add	r7, sp, #0
 80063be:	6078      	str	r0, [r7, #4]
 80063c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80063c2:	2300      	movs	r3, #0
 80063c4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80063c6:	4b74      	ldr	r3, [pc, #464]	@ (8006598 <RCCEx_PLLSAI1_Config+0x1e0>)
 80063c8:	68db      	ldr	r3, [r3, #12]
 80063ca:	f003 0303 	and.w	r3, r3, #3
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d018      	beq.n	8006404 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80063d2:	4b71      	ldr	r3, [pc, #452]	@ (8006598 <RCCEx_PLLSAI1_Config+0x1e0>)
 80063d4:	68db      	ldr	r3, [r3, #12]
 80063d6:	f003 0203 	and.w	r2, r3, #3
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	429a      	cmp	r2, r3
 80063e0:	d10d      	bne.n	80063fe <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
       ||
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d009      	beq.n	80063fe <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80063ea:	4b6b      	ldr	r3, [pc, #428]	@ (8006598 <RCCEx_PLLSAI1_Config+0x1e0>)
 80063ec:	68db      	ldr	r3, [r3, #12]
 80063ee:	091b      	lsrs	r3, r3, #4
 80063f0:	f003 0307 	and.w	r3, r3, #7
 80063f4:	1c5a      	adds	r2, r3, #1
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	685b      	ldr	r3, [r3, #4]
       ||
 80063fa:	429a      	cmp	r2, r3
 80063fc:	d047      	beq.n	800648e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80063fe:	2301      	movs	r3, #1
 8006400:	73fb      	strb	r3, [r7, #15]
 8006402:	e044      	b.n	800648e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	2b03      	cmp	r3, #3
 800640a:	d018      	beq.n	800643e <RCCEx_PLLSAI1_Config+0x86>
 800640c:	2b03      	cmp	r3, #3
 800640e:	d825      	bhi.n	800645c <RCCEx_PLLSAI1_Config+0xa4>
 8006410:	2b01      	cmp	r3, #1
 8006412:	d002      	beq.n	800641a <RCCEx_PLLSAI1_Config+0x62>
 8006414:	2b02      	cmp	r3, #2
 8006416:	d009      	beq.n	800642c <RCCEx_PLLSAI1_Config+0x74>
 8006418:	e020      	b.n	800645c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800641a:	4b5f      	ldr	r3, [pc, #380]	@ (8006598 <RCCEx_PLLSAI1_Config+0x1e0>)
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	f003 0302 	and.w	r3, r3, #2
 8006422:	2b00      	cmp	r3, #0
 8006424:	d11d      	bne.n	8006462 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8006426:	2301      	movs	r3, #1
 8006428:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800642a:	e01a      	b.n	8006462 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800642c:	4b5a      	ldr	r3, [pc, #360]	@ (8006598 <RCCEx_PLLSAI1_Config+0x1e0>)
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006434:	2b00      	cmp	r3, #0
 8006436:	d116      	bne.n	8006466 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8006438:	2301      	movs	r3, #1
 800643a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800643c:	e013      	b.n	8006466 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800643e:	4b56      	ldr	r3, [pc, #344]	@ (8006598 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006446:	2b00      	cmp	r3, #0
 8006448:	d10f      	bne.n	800646a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800644a:	4b53      	ldr	r3, [pc, #332]	@ (8006598 <RCCEx_PLLSAI1_Config+0x1e0>)
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006452:	2b00      	cmp	r3, #0
 8006454:	d109      	bne.n	800646a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8006456:	2301      	movs	r3, #1
 8006458:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800645a:	e006      	b.n	800646a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800645c:	2301      	movs	r3, #1
 800645e:	73fb      	strb	r3, [r7, #15]
      break;
 8006460:	e004      	b.n	800646c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006462:	bf00      	nop
 8006464:	e002      	b.n	800646c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006466:	bf00      	nop
 8006468:	e000      	b.n	800646c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800646a:	bf00      	nop
    }

    if(status == HAL_OK)
 800646c:	7bfb      	ldrb	r3, [r7, #15]
 800646e:	2b00      	cmp	r3, #0
 8006470:	d10d      	bne.n	800648e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8006472:	4b49      	ldr	r3, [pc, #292]	@ (8006598 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006474:	68db      	ldr	r3, [r3, #12]
 8006476:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	6819      	ldr	r1, [r3, #0]
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	685b      	ldr	r3, [r3, #4]
 8006482:	3b01      	subs	r3, #1
 8006484:	011b      	lsls	r3, r3, #4
 8006486:	430b      	orrs	r3, r1
 8006488:	4943      	ldr	r1, [pc, #268]	@ (8006598 <RCCEx_PLLSAI1_Config+0x1e0>)
 800648a:	4313      	orrs	r3, r2
 800648c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800648e:	7bfb      	ldrb	r3, [r7, #15]
 8006490:	2b00      	cmp	r3, #0
 8006492:	d17c      	bne.n	800658e <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8006494:	4b40      	ldr	r3, [pc, #256]	@ (8006598 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	4a3f      	ldr	r2, [pc, #252]	@ (8006598 <RCCEx_PLLSAI1_Config+0x1e0>)
 800649a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800649e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80064a0:	f7fb ffa8 	bl	80023f4 <HAL_GetTick>
 80064a4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80064a6:	e009      	b.n	80064bc <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80064a8:	f7fb ffa4 	bl	80023f4 <HAL_GetTick>
 80064ac:	4602      	mov	r2, r0
 80064ae:	68bb      	ldr	r3, [r7, #8]
 80064b0:	1ad3      	subs	r3, r2, r3
 80064b2:	2b02      	cmp	r3, #2
 80064b4:	d902      	bls.n	80064bc <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80064b6:	2303      	movs	r3, #3
 80064b8:	73fb      	strb	r3, [r7, #15]
        break;
 80064ba:	e005      	b.n	80064c8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80064bc:	4b36      	ldr	r3, [pc, #216]	@ (8006598 <RCCEx_PLLSAI1_Config+0x1e0>)
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d1ef      	bne.n	80064a8 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80064c8:	7bfb      	ldrb	r3, [r7, #15]
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d15f      	bne.n	800658e <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80064ce:	683b      	ldr	r3, [r7, #0]
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d110      	bne.n	80064f6 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80064d4:	4b30      	ldr	r3, [pc, #192]	@ (8006598 <RCCEx_PLLSAI1_Config+0x1e0>)
 80064d6:	691b      	ldr	r3, [r3, #16]
 80064d8:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 80064dc:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80064e0:	687a      	ldr	r2, [r7, #4]
 80064e2:	6892      	ldr	r2, [r2, #8]
 80064e4:	0211      	lsls	r1, r2, #8
 80064e6:	687a      	ldr	r2, [r7, #4]
 80064e8:	68d2      	ldr	r2, [r2, #12]
 80064ea:	06d2      	lsls	r2, r2, #27
 80064ec:	430a      	orrs	r2, r1
 80064ee:	492a      	ldr	r1, [pc, #168]	@ (8006598 <RCCEx_PLLSAI1_Config+0x1e0>)
 80064f0:	4313      	orrs	r3, r2
 80064f2:	610b      	str	r3, [r1, #16]
 80064f4:	e027      	b.n	8006546 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80064f6:	683b      	ldr	r3, [r7, #0]
 80064f8:	2b01      	cmp	r3, #1
 80064fa:	d112      	bne.n	8006522 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80064fc:	4b26      	ldr	r3, [pc, #152]	@ (8006598 <RCCEx_PLLSAI1_Config+0x1e0>)
 80064fe:	691b      	ldr	r3, [r3, #16]
 8006500:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8006504:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8006508:	687a      	ldr	r2, [r7, #4]
 800650a:	6892      	ldr	r2, [r2, #8]
 800650c:	0211      	lsls	r1, r2, #8
 800650e:	687a      	ldr	r2, [r7, #4]
 8006510:	6912      	ldr	r2, [r2, #16]
 8006512:	0852      	lsrs	r2, r2, #1
 8006514:	3a01      	subs	r2, #1
 8006516:	0552      	lsls	r2, r2, #21
 8006518:	430a      	orrs	r2, r1
 800651a:	491f      	ldr	r1, [pc, #124]	@ (8006598 <RCCEx_PLLSAI1_Config+0x1e0>)
 800651c:	4313      	orrs	r3, r2
 800651e:	610b      	str	r3, [r1, #16]
 8006520:	e011      	b.n	8006546 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006522:	4b1d      	ldr	r3, [pc, #116]	@ (8006598 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006524:	691b      	ldr	r3, [r3, #16]
 8006526:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800652a:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800652e:	687a      	ldr	r2, [r7, #4]
 8006530:	6892      	ldr	r2, [r2, #8]
 8006532:	0211      	lsls	r1, r2, #8
 8006534:	687a      	ldr	r2, [r7, #4]
 8006536:	6952      	ldr	r2, [r2, #20]
 8006538:	0852      	lsrs	r2, r2, #1
 800653a:	3a01      	subs	r2, #1
 800653c:	0652      	lsls	r2, r2, #25
 800653e:	430a      	orrs	r2, r1
 8006540:	4915      	ldr	r1, [pc, #84]	@ (8006598 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006542:	4313      	orrs	r3, r2
 8006544:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8006546:	4b14      	ldr	r3, [pc, #80]	@ (8006598 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	4a13      	ldr	r2, [pc, #76]	@ (8006598 <RCCEx_PLLSAI1_Config+0x1e0>)
 800654c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006550:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006552:	f7fb ff4f 	bl	80023f4 <HAL_GetTick>
 8006556:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006558:	e009      	b.n	800656e <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800655a:	f7fb ff4b 	bl	80023f4 <HAL_GetTick>
 800655e:	4602      	mov	r2, r0
 8006560:	68bb      	ldr	r3, [r7, #8]
 8006562:	1ad3      	subs	r3, r2, r3
 8006564:	2b02      	cmp	r3, #2
 8006566:	d902      	bls.n	800656e <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8006568:	2303      	movs	r3, #3
 800656a:	73fb      	strb	r3, [r7, #15]
          break;
 800656c:	e005      	b.n	800657a <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800656e:	4b0a      	ldr	r3, [pc, #40]	@ (8006598 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006576:	2b00      	cmp	r3, #0
 8006578:	d0ef      	beq.n	800655a <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800657a:	7bfb      	ldrb	r3, [r7, #15]
 800657c:	2b00      	cmp	r3, #0
 800657e:	d106      	bne.n	800658e <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8006580:	4b05      	ldr	r3, [pc, #20]	@ (8006598 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006582:	691a      	ldr	r2, [r3, #16]
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	699b      	ldr	r3, [r3, #24]
 8006588:	4903      	ldr	r1, [pc, #12]	@ (8006598 <RCCEx_PLLSAI1_Config+0x1e0>)
 800658a:	4313      	orrs	r3, r2
 800658c:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800658e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006590:	4618      	mov	r0, r3
 8006592:	3710      	adds	r7, #16
 8006594:	46bd      	mov	sp, r7
 8006596:	bd80      	pop	{r7, pc}
 8006598:	40021000 	.word	0x40021000

0800659c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800659c:	b580      	push	{r7, lr}
 800659e:	b082      	sub	sp, #8
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d101      	bne.n	80065ae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80065aa:	2301      	movs	r3, #1
 80065ac:	e049      	b.n	8006642 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80065b4:	b2db      	uxtb	r3, r3
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d106      	bne.n	80065c8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	2200      	movs	r2, #0
 80065be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80065c2:	6878      	ldr	r0, [r7, #4]
 80065c4:	f7fb fdb8 	bl	8002138 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	2202      	movs	r2, #2
 80065cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681a      	ldr	r2, [r3, #0]
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	3304      	adds	r3, #4
 80065d8:	4619      	mov	r1, r3
 80065da:	4610      	mov	r0, r2
 80065dc:	f000 f94c 	bl	8006878 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	2201      	movs	r2, #1
 80065e4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	2201      	movs	r2, #1
 80065ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	2201      	movs	r2, #1
 80065f4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	2201      	movs	r2, #1
 80065fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	2201      	movs	r2, #1
 8006604:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	2201      	movs	r2, #1
 800660c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	2201      	movs	r2, #1
 8006614:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	2201      	movs	r2, #1
 800661c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	2201      	movs	r2, #1
 8006624:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	2201      	movs	r2, #1
 800662c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	2201      	movs	r2, #1
 8006634:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	2201      	movs	r2, #1
 800663c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006640:	2300      	movs	r3, #0
}
 8006642:	4618      	mov	r0, r3
 8006644:	3708      	adds	r7, #8
 8006646:	46bd      	mov	sp, r7
 8006648:	bd80      	pop	{r7, pc}
	...

0800664c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800664c:	b480      	push	{r7}
 800664e:	b085      	sub	sp, #20
 8006650:	af00      	add	r7, sp, #0
 8006652:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800665a:	b2db      	uxtb	r3, r3
 800665c:	2b01      	cmp	r3, #1
 800665e:	d001      	beq.n	8006664 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006660:	2301      	movs	r3, #1
 8006662:	e033      	b.n	80066cc <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	2202      	movs	r2, #2
 8006668:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	4a19      	ldr	r2, [pc, #100]	@ (80066d8 <HAL_TIM_Base_Start+0x8c>)
 8006672:	4293      	cmp	r3, r2
 8006674:	d009      	beq.n	800668a <HAL_TIM_Base_Start+0x3e>
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800667e:	d004      	beq.n	800668a <HAL_TIM_Base_Start+0x3e>
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	4a15      	ldr	r2, [pc, #84]	@ (80066dc <HAL_TIM_Base_Start+0x90>)
 8006686:	4293      	cmp	r3, r2
 8006688:	d115      	bne.n	80066b6 <HAL_TIM_Base_Start+0x6a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	689a      	ldr	r2, [r3, #8]
 8006690:	4b13      	ldr	r3, [pc, #76]	@ (80066e0 <HAL_TIM_Base_Start+0x94>)
 8006692:	4013      	ands	r3, r2
 8006694:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	2b06      	cmp	r3, #6
 800669a:	d015      	beq.n	80066c8 <HAL_TIM_Base_Start+0x7c>
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80066a2:	d011      	beq.n	80066c8 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	681a      	ldr	r2, [r3, #0]
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	f042 0201 	orr.w	r2, r2, #1
 80066b2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80066b4:	e008      	b.n	80066c8 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	681a      	ldr	r2, [r3, #0]
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	f042 0201 	orr.w	r2, r2, #1
 80066c4:	601a      	str	r2, [r3, #0]
 80066c6:	e000      	b.n	80066ca <HAL_TIM_Base_Start+0x7e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80066c8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80066ca:	2300      	movs	r3, #0
}
 80066cc:	4618      	mov	r0, r3
 80066ce:	3714      	adds	r7, #20
 80066d0:	46bd      	mov	sp, r7
 80066d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d6:	4770      	bx	lr
 80066d8:	40012c00 	.word	0x40012c00
 80066dc:	40014000 	.word	0x40014000
 80066e0:	00010007 	.word	0x00010007

080066e4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80066e4:	b580      	push	{r7, lr}
 80066e6:	b084      	sub	sp, #16
 80066e8:	af00      	add	r7, sp, #0
 80066ea:	6078      	str	r0, [r7, #4]
 80066ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80066ee:	2300      	movs	r3, #0
 80066f0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80066f8:	2b01      	cmp	r3, #1
 80066fa:	d101      	bne.n	8006700 <HAL_TIM_ConfigClockSource+0x1c>
 80066fc:	2302      	movs	r3, #2
 80066fe:	e0b6      	b.n	800686e <HAL_TIM_ConfigClockSource+0x18a>
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	2201      	movs	r2, #1
 8006704:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	2202      	movs	r2, #2
 800670c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	689b      	ldr	r3, [r3, #8]
 8006716:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006718:	68bb      	ldr	r3, [r7, #8]
 800671a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800671e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8006722:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006724:	68bb      	ldr	r3, [r7, #8]
 8006726:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800672a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	68ba      	ldr	r2, [r7, #8]
 8006732:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006734:	683b      	ldr	r3, [r7, #0]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800673c:	d03e      	beq.n	80067bc <HAL_TIM_ConfigClockSource+0xd8>
 800673e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006742:	f200 8087 	bhi.w	8006854 <HAL_TIM_ConfigClockSource+0x170>
 8006746:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800674a:	f000 8086 	beq.w	800685a <HAL_TIM_ConfigClockSource+0x176>
 800674e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006752:	d87f      	bhi.n	8006854 <HAL_TIM_ConfigClockSource+0x170>
 8006754:	2b70      	cmp	r3, #112	@ 0x70
 8006756:	d01a      	beq.n	800678e <HAL_TIM_ConfigClockSource+0xaa>
 8006758:	2b70      	cmp	r3, #112	@ 0x70
 800675a:	d87b      	bhi.n	8006854 <HAL_TIM_ConfigClockSource+0x170>
 800675c:	2b60      	cmp	r3, #96	@ 0x60
 800675e:	d050      	beq.n	8006802 <HAL_TIM_ConfigClockSource+0x11e>
 8006760:	2b60      	cmp	r3, #96	@ 0x60
 8006762:	d877      	bhi.n	8006854 <HAL_TIM_ConfigClockSource+0x170>
 8006764:	2b50      	cmp	r3, #80	@ 0x50
 8006766:	d03c      	beq.n	80067e2 <HAL_TIM_ConfigClockSource+0xfe>
 8006768:	2b50      	cmp	r3, #80	@ 0x50
 800676a:	d873      	bhi.n	8006854 <HAL_TIM_ConfigClockSource+0x170>
 800676c:	2b40      	cmp	r3, #64	@ 0x40
 800676e:	d058      	beq.n	8006822 <HAL_TIM_ConfigClockSource+0x13e>
 8006770:	2b40      	cmp	r3, #64	@ 0x40
 8006772:	d86f      	bhi.n	8006854 <HAL_TIM_ConfigClockSource+0x170>
 8006774:	2b30      	cmp	r3, #48	@ 0x30
 8006776:	d064      	beq.n	8006842 <HAL_TIM_ConfigClockSource+0x15e>
 8006778:	2b30      	cmp	r3, #48	@ 0x30
 800677a:	d86b      	bhi.n	8006854 <HAL_TIM_ConfigClockSource+0x170>
 800677c:	2b20      	cmp	r3, #32
 800677e:	d060      	beq.n	8006842 <HAL_TIM_ConfigClockSource+0x15e>
 8006780:	2b20      	cmp	r3, #32
 8006782:	d867      	bhi.n	8006854 <HAL_TIM_ConfigClockSource+0x170>
 8006784:	2b00      	cmp	r3, #0
 8006786:	d05c      	beq.n	8006842 <HAL_TIM_ConfigClockSource+0x15e>
 8006788:	2b10      	cmp	r3, #16
 800678a:	d05a      	beq.n	8006842 <HAL_TIM_ConfigClockSource+0x15e>
 800678c:	e062      	b.n	8006854 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006792:	683b      	ldr	r3, [r7, #0]
 8006794:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006796:	683b      	ldr	r3, [r7, #0]
 8006798:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800679a:	683b      	ldr	r3, [r7, #0]
 800679c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800679e:	f000 f955 	bl	8006a4c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	689b      	ldr	r3, [r3, #8]
 80067a8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80067aa:	68bb      	ldr	r3, [r7, #8]
 80067ac:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80067b0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	68ba      	ldr	r2, [r7, #8]
 80067b8:	609a      	str	r2, [r3, #8]
      break;
 80067ba:	e04f      	b.n	800685c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80067c0:	683b      	ldr	r3, [r7, #0]
 80067c2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80067c4:	683b      	ldr	r3, [r7, #0]
 80067c6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80067c8:	683b      	ldr	r3, [r7, #0]
 80067ca:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80067cc:	f000 f93e 	bl	8006a4c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	689a      	ldr	r2, [r3, #8]
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80067de:	609a      	str	r2, [r3, #8]
      break;
 80067e0:	e03c      	b.n	800685c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80067e6:	683b      	ldr	r3, [r7, #0]
 80067e8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80067ea:	683b      	ldr	r3, [r7, #0]
 80067ec:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80067ee:	461a      	mov	r2, r3
 80067f0:	f000 f8b2 	bl	8006958 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	2150      	movs	r1, #80	@ 0x50
 80067fa:	4618      	mov	r0, r3
 80067fc:	f000 f90b 	bl	8006a16 <TIM_ITRx_SetConfig>
      break;
 8006800:	e02c      	b.n	800685c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006806:	683b      	ldr	r3, [r7, #0]
 8006808:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800680a:	683b      	ldr	r3, [r7, #0]
 800680c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800680e:	461a      	mov	r2, r3
 8006810:	f000 f8d1 	bl	80069b6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	2160      	movs	r1, #96	@ 0x60
 800681a:	4618      	mov	r0, r3
 800681c:	f000 f8fb 	bl	8006a16 <TIM_ITRx_SetConfig>
      break;
 8006820:	e01c      	b.n	800685c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006826:	683b      	ldr	r3, [r7, #0]
 8006828:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800682a:	683b      	ldr	r3, [r7, #0]
 800682c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800682e:	461a      	mov	r2, r3
 8006830:	f000 f892 	bl	8006958 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	2140      	movs	r1, #64	@ 0x40
 800683a:	4618      	mov	r0, r3
 800683c:	f000 f8eb 	bl	8006a16 <TIM_ITRx_SetConfig>
      break;
 8006840:	e00c      	b.n	800685c <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681a      	ldr	r2, [r3, #0]
 8006846:	683b      	ldr	r3, [r7, #0]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	4619      	mov	r1, r3
 800684c:	4610      	mov	r0, r2
 800684e:	f000 f8e2 	bl	8006a16 <TIM_ITRx_SetConfig>
      break;
 8006852:	e003      	b.n	800685c <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8006854:	2301      	movs	r3, #1
 8006856:	73fb      	strb	r3, [r7, #15]
      break;
 8006858:	e000      	b.n	800685c <HAL_TIM_ConfigClockSource+0x178>
      break;
 800685a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	2201      	movs	r2, #1
 8006860:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	2200      	movs	r2, #0
 8006868:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800686c:	7bfb      	ldrb	r3, [r7, #15]
}
 800686e:	4618      	mov	r0, r3
 8006870:	3710      	adds	r7, #16
 8006872:	46bd      	mov	sp, r7
 8006874:	bd80      	pop	{r7, pc}
	...

08006878 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006878:	b480      	push	{r7}
 800687a:	b085      	sub	sp, #20
 800687c:	af00      	add	r7, sp, #0
 800687e:	6078      	str	r0, [r7, #4]
 8006880:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	4a30      	ldr	r2, [pc, #192]	@ (800694c <TIM_Base_SetConfig+0xd4>)
 800688c:	4293      	cmp	r3, r2
 800688e:	d003      	beq.n	8006898 <TIM_Base_SetConfig+0x20>
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006896:	d108      	bne.n	80068aa <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800689e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80068a0:	683b      	ldr	r3, [r7, #0]
 80068a2:	685b      	ldr	r3, [r3, #4]
 80068a4:	68fa      	ldr	r2, [r7, #12]
 80068a6:	4313      	orrs	r3, r2
 80068a8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	4a27      	ldr	r2, [pc, #156]	@ (800694c <TIM_Base_SetConfig+0xd4>)
 80068ae:	4293      	cmp	r3, r2
 80068b0:	d00b      	beq.n	80068ca <TIM_Base_SetConfig+0x52>
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80068b8:	d007      	beq.n	80068ca <TIM_Base_SetConfig+0x52>
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	4a24      	ldr	r2, [pc, #144]	@ (8006950 <TIM_Base_SetConfig+0xd8>)
 80068be:	4293      	cmp	r3, r2
 80068c0:	d003      	beq.n	80068ca <TIM_Base_SetConfig+0x52>
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	4a23      	ldr	r2, [pc, #140]	@ (8006954 <TIM_Base_SetConfig+0xdc>)
 80068c6:	4293      	cmp	r3, r2
 80068c8:	d108      	bne.n	80068dc <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80068d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80068d2:	683b      	ldr	r3, [r7, #0]
 80068d4:	68db      	ldr	r3, [r3, #12]
 80068d6:	68fa      	ldr	r2, [r7, #12]
 80068d8:	4313      	orrs	r3, r2
 80068da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80068e2:	683b      	ldr	r3, [r7, #0]
 80068e4:	695b      	ldr	r3, [r3, #20]
 80068e6:	4313      	orrs	r3, r2
 80068e8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	68fa      	ldr	r2, [r7, #12]
 80068ee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80068f0:	683b      	ldr	r3, [r7, #0]
 80068f2:	689a      	ldr	r2, [r3, #8]
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80068f8:	683b      	ldr	r3, [r7, #0]
 80068fa:	681a      	ldr	r2, [r3, #0]
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	4a12      	ldr	r2, [pc, #72]	@ (800694c <TIM_Base_SetConfig+0xd4>)
 8006904:	4293      	cmp	r3, r2
 8006906:	d007      	beq.n	8006918 <TIM_Base_SetConfig+0xa0>
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	4a11      	ldr	r2, [pc, #68]	@ (8006950 <TIM_Base_SetConfig+0xd8>)
 800690c:	4293      	cmp	r3, r2
 800690e:	d003      	beq.n	8006918 <TIM_Base_SetConfig+0xa0>
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	4a10      	ldr	r2, [pc, #64]	@ (8006954 <TIM_Base_SetConfig+0xdc>)
 8006914:	4293      	cmp	r3, r2
 8006916:	d103      	bne.n	8006920 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006918:	683b      	ldr	r3, [r7, #0]
 800691a:	691a      	ldr	r2, [r3, #16]
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	2201      	movs	r2, #1
 8006924:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	691b      	ldr	r3, [r3, #16]
 800692a:	f003 0301 	and.w	r3, r3, #1
 800692e:	2b01      	cmp	r3, #1
 8006930:	d105      	bne.n	800693e <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	691b      	ldr	r3, [r3, #16]
 8006936:	f023 0201 	bic.w	r2, r3, #1
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	611a      	str	r2, [r3, #16]
  }
}
 800693e:	bf00      	nop
 8006940:	3714      	adds	r7, #20
 8006942:	46bd      	mov	sp, r7
 8006944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006948:	4770      	bx	lr
 800694a:	bf00      	nop
 800694c:	40012c00 	.word	0x40012c00
 8006950:	40014000 	.word	0x40014000
 8006954:	40014400 	.word	0x40014400

08006958 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006958:	b480      	push	{r7}
 800695a:	b087      	sub	sp, #28
 800695c:	af00      	add	r7, sp, #0
 800695e:	60f8      	str	r0, [r7, #12]
 8006960:	60b9      	str	r1, [r7, #8]
 8006962:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	6a1b      	ldr	r3, [r3, #32]
 8006968:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	6a1b      	ldr	r3, [r3, #32]
 800696e:	f023 0201 	bic.w	r2, r3, #1
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	699b      	ldr	r3, [r3, #24]
 800697a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800697c:	693b      	ldr	r3, [r7, #16]
 800697e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006982:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	011b      	lsls	r3, r3, #4
 8006988:	693a      	ldr	r2, [r7, #16]
 800698a:	4313      	orrs	r3, r2
 800698c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800698e:	697b      	ldr	r3, [r7, #20]
 8006990:	f023 030a 	bic.w	r3, r3, #10
 8006994:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006996:	697a      	ldr	r2, [r7, #20]
 8006998:	68bb      	ldr	r3, [r7, #8]
 800699a:	4313      	orrs	r3, r2
 800699c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	693a      	ldr	r2, [r7, #16]
 80069a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	697a      	ldr	r2, [r7, #20]
 80069a8:	621a      	str	r2, [r3, #32]
}
 80069aa:	bf00      	nop
 80069ac:	371c      	adds	r7, #28
 80069ae:	46bd      	mov	sp, r7
 80069b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b4:	4770      	bx	lr

080069b6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80069b6:	b480      	push	{r7}
 80069b8:	b087      	sub	sp, #28
 80069ba:	af00      	add	r7, sp, #0
 80069bc:	60f8      	str	r0, [r7, #12]
 80069be:	60b9      	str	r1, [r7, #8]
 80069c0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	6a1b      	ldr	r3, [r3, #32]
 80069c6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	6a1b      	ldr	r3, [r3, #32]
 80069cc:	f023 0210 	bic.w	r2, r3, #16
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	699b      	ldr	r3, [r3, #24]
 80069d8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80069da:	693b      	ldr	r3, [r7, #16]
 80069dc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80069e0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	031b      	lsls	r3, r3, #12
 80069e6:	693a      	ldr	r2, [r7, #16]
 80069e8:	4313      	orrs	r3, r2
 80069ea:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80069ec:	697b      	ldr	r3, [r7, #20]
 80069ee:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80069f2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80069f4:	68bb      	ldr	r3, [r7, #8]
 80069f6:	011b      	lsls	r3, r3, #4
 80069f8:	697a      	ldr	r2, [r7, #20]
 80069fa:	4313      	orrs	r3, r2
 80069fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	693a      	ldr	r2, [r7, #16]
 8006a02:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	697a      	ldr	r2, [r7, #20]
 8006a08:	621a      	str	r2, [r3, #32]
}
 8006a0a:	bf00      	nop
 8006a0c:	371c      	adds	r7, #28
 8006a0e:	46bd      	mov	sp, r7
 8006a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a14:	4770      	bx	lr

08006a16 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006a16:	b480      	push	{r7}
 8006a18:	b085      	sub	sp, #20
 8006a1a:	af00      	add	r7, sp, #0
 8006a1c:	6078      	str	r0, [r7, #4]
 8006a1e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	689b      	ldr	r3, [r3, #8]
 8006a24:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006a2c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006a2e:	683a      	ldr	r2, [r7, #0]
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	4313      	orrs	r3, r2
 8006a34:	f043 0307 	orr.w	r3, r3, #7
 8006a38:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	68fa      	ldr	r2, [r7, #12]
 8006a3e:	609a      	str	r2, [r3, #8]
}
 8006a40:	bf00      	nop
 8006a42:	3714      	adds	r7, #20
 8006a44:	46bd      	mov	sp, r7
 8006a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a4a:	4770      	bx	lr

08006a4c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006a4c:	b480      	push	{r7}
 8006a4e:	b087      	sub	sp, #28
 8006a50:	af00      	add	r7, sp, #0
 8006a52:	60f8      	str	r0, [r7, #12]
 8006a54:	60b9      	str	r1, [r7, #8]
 8006a56:	607a      	str	r2, [r7, #4]
 8006a58:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	689b      	ldr	r3, [r3, #8]
 8006a5e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006a60:	697b      	ldr	r3, [r7, #20]
 8006a62:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006a66:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006a68:	683b      	ldr	r3, [r7, #0]
 8006a6a:	021a      	lsls	r2, r3, #8
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	431a      	orrs	r2, r3
 8006a70:	68bb      	ldr	r3, [r7, #8]
 8006a72:	4313      	orrs	r3, r2
 8006a74:	697a      	ldr	r2, [r7, #20]
 8006a76:	4313      	orrs	r3, r2
 8006a78:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	697a      	ldr	r2, [r7, #20]
 8006a7e:	609a      	str	r2, [r3, #8]
}
 8006a80:	bf00      	nop
 8006a82:	371c      	adds	r7, #28
 8006a84:	46bd      	mov	sp, r7
 8006a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a8a:	4770      	bx	lr

08006a8c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006a8c:	b480      	push	{r7}
 8006a8e:	b085      	sub	sp, #20
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	6078      	str	r0, [r7, #4]
 8006a94:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006a9c:	2b01      	cmp	r3, #1
 8006a9e:	d101      	bne.n	8006aa4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006aa0:	2302      	movs	r3, #2
 8006aa2:	e04f      	b.n	8006b44 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	2201      	movs	r2, #1
 8006aa8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	2202      	movs	r2, #2
 8006ab0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	685b      	ldr	r3, [r3, #4]
 8006aba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	689b      	ldr	r3, [r3, #8]
 8006ac2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	4a21      	ldr	r2, [pc, #132]	@ (8006b50 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8006aca:	4293      	cmp	r3, r2
 8006acc:	d108      	bne.n	8006ae0 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8006ad4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006ad6:	683b      	ldr	r3, [r7, #0]
 8006ad8:	685b      	ldr	r3, [r3, #4]
 8006ada:	68fa      	ldr	r2, [r7, #12]
 8006adc:	4313      	orrs	r3, r2
 8006ade:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006ae6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006ae8:	683b      	ldr	r3, [r7, #0]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	68fa      	ldr	r2, [r7, #12]
 8006aee:	4313      	orrs	r3, r2
 8006af0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	68fa      	ldr	r2, [r7, #12]
 8006af8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	4a14      	ldr	r2, [pc, #80]	@ (8006b50 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8006b00:	4293      	cmp	r3, r2
 8006b02:	d009      	beq.n	8006b18 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006b0c:	d004      	beq.n	8006b18 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	4a10      	ldr	r2, [pc, #64]	@ (8006b54 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006b14:	4293      	cmp	r3, r2
 8006b16:	d10c      	bne.n	8006b32 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006b18:	68bb      	ldr	r3, [r7, #8]
 8006b1a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006b1e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006b20:	683b      	ldr	r3, [r7, #0]
 8006b22:	689b      	ldr	r3, [r3, #8]
 8006b24:	68ba      	ldr	r2, [r7, #8]
 8006b26:	4313      	orrs	r3, r2
 8006b28:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	68ba      	ldr	r2, [r7, #8]
 8006b30:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	2201      	movs	r2, #1
 8006b36:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	2200      	movs	r2, #0
 8006b3e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006b42:	2300      	movs	r3, #0
}
 8006b44:	4618      	mov	r0, r3
 8006b46:	3714      	adds	r7, #20
 8006b48:	46bd      	mov	sp, r7
 8006b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b4e:	4770      	bx	lr
 8006b50:	40012c00 	.word	0x40012c00
 8006b54:	40014000 	.word	0x40014000

08006b58 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006b58:	b580      	push	{r7, lr}
 8006b5a:	b082      	sub	sp, #8
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d101      	bne.n	8006b6a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006b66:	2301      	movs	r3, #1
 8006b68:	e040      	b.n	8006bec <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d106      	bne.n	8006b80 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	2200      	movs	r2, #0
 8006b76:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006b7a:	6878      	ldr	r0, [r7, #4]
 8006b7c:	f7fb fafa 	bl	8002174 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	2224      	movs	r2, #36	@ 0x24
 8006b84:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	681a      	ldr	r2, [r3, #0]
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	f022 0201 	bic.w	r2, r2, #1
 8006b94:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d002      	beq.n	8006ba4 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8006b9e:	6878      	ldr	r0, [r7, #4]
 8006ba0:	f000 fade 	bl	8007160 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006ba4:	6878      	ldr	r0, [r7, #4]
 8006ba6:	f000 f8af 	bl	8006d08 <UART_SetConfig>
 8006baa:	4603      	mov	r3, r0
 8006bac:	2b01      	cmp	r3, #1
 8006bae:	d101      	bne.n	8006bb4 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8006bb0:	2301      	movs	r3, #1
 8006bb2:	e01b      	b.n	8006bec <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	685a      	ldr	r2, [r3, #4]
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006bc2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	689a      	ldr	r2, [r3, #8]
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006bd2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	681a      	ldr	r2, [r3, #0]
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	f042 0201 	orr.w	r2, r2, #1
 8006be2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006be4:	6878      	ldr	r0, [r7, #4]
 8006be6:	f000 fb5d 	bl	80072a4 <UART_CheckIdleState>
 8006bea:	4603      	mov	r3, r0
}
 8006bec:	4618      	mov	r0, r3
 8006bee:	3708      	adds	r7, #8
 8006bf0:	46bd      	mov	sp, r7
 8006bf2:	bd80      	pop	{r7, pc}

08006bf4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006bf4:	b580      	push	{r7, lr}
 8006bf6:	b08a      	sub	sp, #40	@ 0x28
 8006bf8:	af02      	add	r7, sp, #8
 8006bfa:	60f8      	str	r0, [r7, #12]
 8006bfc:	60b9      	str	r1, [r7, #8]
 8006bfe:	603b      	str	r3, [r7, #0]
 8006c00:	4613      	mov	r3, r2
 8006c02:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006c08:	2b20      	cmp	r3, #32
 8006c0a:	d177      	bne.n	8006cfc <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8006c0c:	68bb      	ldr	r3, [r7, #8]
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d002      	beq.n	8006c18 <HAL_UART_Transmit+0x24>
 8006c12:	88fb      	ldrh	r3, [r7, #6]
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d101      	bne.n	8006c1c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8006c18:	2301      	movs	r3, #1
 8006c1a:	e070      	b.n	8006cfe <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	2200      	movs	r2, #0
 8006c20:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	2221      	movs	r2, #33	@ 0x21
 8006c28:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006c2a:	f7fb fbe3 	bl	80023f4 <HAL_GetTick>
 8006c2e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	88fa      	ldrh	r2, [r7, #6]
 8006c34:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	88fa      	ldrh	r2, [r7, #6]
 8006c3c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	689b      	ldr	r3, [r3, #8]
 8006c44:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006c48:	d108      	bne.n	8006c5c <HAL_UART_Transmit+0x68>
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	691b      	ldr	r3, [r3, #16]
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d104      	bne.n	8006c5c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8006c52:	2300      	movs	r3, #0
 8006c54:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006c56:	68bb      	ldr	r3, [r7, #8]
 8006c58:	61bb      	str	r3, [r7, #24]
 8006c5a:	e003      	b.n	8006c64 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8006c5c:	68bb      	ldr	r3, [r7, #8]
 8006c5e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006c60:	2300      	movs	r3, #0
 8006c62:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006c64:	e02f      	b.n	8006cc6 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006c66:	683b      	ldr	r3, [r7, #0]
 8006c68:	9300      	str	r3, [sp, #0]
 8006c6a:	697b      	ldr	r3, [r7, #20]
 8006c6c:	2200      	movs	r2, #0
 8006c6e:	2180      	movs	r1, #128	@ 0x80
 8006c70:	68f8      	ldr	r0, [r7, #12]
 8006c72:	f000 fbbf 	bl	80073f4 <UART_WaitOnFlagUntilTimeout>
 8006c76:	4603      	mov	r3, r0
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d004      	beq.n	8006c86 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	2220      	movs	r2, #32
 8006c80:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8006c82:	2303      	movs	r3, #3
 8006c84:	e03b      	b.n	8006cfe <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8006c86:	69fb      	ldr	r3, [r7, #28]
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d10b      	bne.n	8006ca4 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006c8c:	69bb      	ldr	r3, [r7, #24]
 8006c8e:	881a      	ldrh	r2, [r3, #0]
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006c98:	b292      	uxth	r2, r2
 8006c9a:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8006c9c:	69bb      	ldr	r3, [r7, #24]
 8006c9e:	3302      	adds	r3, #2
 8006ca0:	61bb      	str	r3, [r7, #24]
 8006ca2:	e007      	b.n	8006cb4 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006ca4:	69fb      	ldr	r3, [r7, #28]
 8006ca6:	781a      	ldrb	r2, [r3, #0]
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8006cae:	69fb      	ldr	r3, [r7, #28]
 8006cb0:	3301      	adds	r3, #1
 8006cb2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8006cba:	b29b      	uxth	r3, r3
 8006cbc:	3b01      	subs	r3, #1
 8006cbe:	b29a      	uxth	r2, r3
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8006ccc:	b29b      	uxth	r3, r3
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d1c9      	bne.n	8006c66 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006cd2:	683b      	ldr	r3, [r7, #0]
 8006cd4:	9300      	str	r3, [sp, #0]
 8006cd6:	697b      	ldr	r3, [r7, #20]
 8006cd8:	2200      	movs	r2, #0
 8006cda:	2140      	movs	r1, #64	@ 0x40
 8006cdc:	68f8      	ldr	r0, [r7, #12]
 8006cde:	f000 fb89 	bl	80073f4 <UART_WaitOnFlagUntilTimeout>
 8006ce2:	4603      	mov	r3, r0
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d004      	beq.n	8006cf2 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	2220      	movs	r2, #32
 8006cec:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8006cee:	2303      	movs	r3, #3
 8006cf0:	e005      	b.n	8006cfe <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	2220      	movs	r2, #32
 8006cf6:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8006cf8:	2300      	movs	r3, #0
 8006cfa:	e000      	b.n	8006cfe <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8006cfc:	2302      	movs	r3, #2
  }
}
 8006cfe:	4618      	mov	r0, r3
 8006d00:	3720      	adds	r7, #32
 8006d02:	46bd      	mov	sp, r7
 8006d04:	bd80      	pop	{r7, pc}
	...

08006d08 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006d08:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006d0c:	b08a      	sub	sp, #40	@ 0x28
 8006d0e:	af00      	add	r7, sp, #0
 8006d10:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006d12:	2300      	movs	r3, #0
 8006d14:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	689a      	ldr	r2, [r3, #8]
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	691b      	ldr	r3, [r3, #16]
 8006d20:	431a      	orrs	r2, r3
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	695b      	ldr	r3, [r3, #20]
 8006d26:	431a      	orrs	r2, r3
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	69db      	ldr	r3, [r3, #28]
 8006d2c:	4313      	orrs	r3, r2
 8006d2e:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	681a      	ldr	r2, [r3, #0]
 8006d36:	4bb4      	ldr	r3, [pc, #720]	@ (8007008 <UART_SetConfig+0x300>)
 8006d38:	4013      	ands	r3, r2
 8006d3a:	68fa      	ldr	r2, [r7, #12]
 8006d3c:	6812      	ldr	r2, [r2, #0]
 8006d3e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006d40:	430b      	orrs	r3, r1
 8006d42:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	685b      	ldr	r3, [r3, #4]
 8006d4a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	68da      	ldr	r2, [r3, #12]
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	430a      	orrs	r2, r1
 8006d58:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	699b      	ldr	r3, [r3, #24]
 8006d5e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	4aa9      	ldr	r2, [pc, #676]	@ (800700c <UART_SetConfig+0x304>)
 8006d66:	4293      	cmp	r3, r2
 8006d68:	d004      	beq.n	8006d74 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	6a1b      	ldr	r3, [r3, #32]
 8006d6e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006d70:	4313      	orrs	r3, r2
 8006d72:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	689b      	ldr	r3, [r3, #8]
 8006d7a:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006d84:	430a      	orrs	r2, r1
 8006d86:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	4aa0      	ldr	r2, [pc, #640]	@ (8007010 <UART_SetConfig+0x308>)
 8006d8e:	4293      	cmp	r3, r2
 8006d90:	d126      	bne.n	8006de0 <UART_SetConfig+0xd8>
 8006d92:	4ba0      	ldr	r3, [pc, #640]	@ (8007014 <UART_SetConfig+0x30c>)
 8006d94:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006d98:	f003 0303 	and.w	r3, r3, #3
 8006d9c:	2b03      	cmp	r3, #3
 8006d9e:	d81b      	bhi.n	8006dd8 <UART_SetConfig+0xd0>
 8006da0:	a201      	add	r2, pc, #4	@ (adr r2, 8006da8 <UART_SetConfig+0xa0>)
 8006da2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006da6:	bf00      	nop
 8006da8:	08006db9 	.word	0x08006db9
 8006dac:	08006dc9 	.word	0x08006dc9
 8006db0:	08006dc1 	.word	0x08006dc1
 8006db4:	08006dd1 	.word	0x08006dd1
 8006db8:	2301      	movs	r3, #1
 8006dba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006dbe:	e080      	b.n	8006ec2 <UART_SetConfig+0x1ba>
 8006dc0:	2302      	movs	r3, #2
 8006dc2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006dc6:	e07c      	b.n	8006ec2 <UART_SetConfig+0x1ba>
 8006dc8:	2304      	movs	r3, #4
 8006dca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006dce:	e078      	b.n	8006ec2 <UART_SetConfig+0x1ba>
 8006dd0:	2308      	movs	r3, #8
 8006dd2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006dd6:	e074      	b.n	8006ec2 <UART_SetConfig+0x1ba>
 8006dd8:	2310      	movs	r3, #16
 8006dda:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006dde:	e070      	b.n	8006ec2 <UART_SetConfig+0x1ba>
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	4a8c      	ldr	r2, [pc, #560]	@ (8007018 <UART_SetConfig+0x310>)
 8006de6:	4293      	cmp	r3, r2
 8006de8:	d138      	bne.n	8006e5c <UART_SetConfig+0x154>
 8006dea:	4b8a      	ldr	r3, [pc, #552]	@ (8007014 <UART_SetConfig+0x30c>)
 8006dec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006df0:	f003 030c 	and.w	r3, r3, #12
 8006df4:	2b0c      	cmp	r3, #12
 8006df6:	d82d      	bhi.n	8006e54 <UART_SetConfig+0x14c>
 8006df8:	a201      	add	r2, pc, #4	@ (adr r2, 8006e00 <UART_SetConfig+0xf8>)
 8006dfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dfe:	bf00      	nop
 8006e00:	08006e35 	.word	0x08006e35
 8006e04:	08006e55 	.word	0x08006e55
 8006e08:	08006e55 	.word	0x08006e55
 8006e0c:	08006e55 	.word	0x08006e55
 8006e10:	08006e45 	.word	0x08006e45
 8006e14:	08006e55 	.word	0x08006e55
 8006e18:	08006e55 	.word	0x08006e55
 8006e1c:	08006e55 	.word	0x08006e55
 8006e20:	08006e3d 	.word	0x08006e3d
 8006e24:	08006e55 	.word	0x08006e55
 8006e28:	08006e55 	.word	0x08006e55
 8006e2c:	08006e55 	.word	0x08006e55
 8006e30:	08006e4d 	.word	0x08006e4d
 8006e34:	2300      	movs	r3, #0
 8006e36:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006e3a:	e042      	b.n	8006ec2 <UART_SetConfig+0x1ba>
 8006e3c:	2302      	movs	r3, #2
 8006e3e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006e42:	e03e      	b.n	8006ec2 <UART_SetConfig+0x1ba>
 8006e44:	2304      	movs	r3, #4
 8006e46:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006e4a:	e03a      	b.n	8006ec2 <UART_SetConfig+0x1ba>
 8006e4c:	2308      	movs	r3, #8
 8006e4e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006e52:	e036      	b.n	8006ec2 <UART_SetConfig+0x1ba>
 8006e54:	2310      	movs	r3, #16
 8006e56:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006e5a:	e032      	b.n	8006ec2 <UART_SetConfig+0x1ba>
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	4a6a      	ldr	r2, [pc, #424]	@ (800700c <UART_SetConfig+0x304>)
 8006e62:	4293      	cmp	r3, r2
 8006e64:	d12a      	bne.n	8006ebc <UART_SetConfig+0x1b4>
 8006e66:	4b6b      	ldr	r3, [pc, #428]	@ (8007014 <UART_SetConfig+0x30c>)
 8006e68:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006e6c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006e70:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006e74:	d01a      	beq.n	8006eac <UART_SetConfig+0x1a4>
 8006e76:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006e7a:	d81b      	bhi.n	8006eb4 <UART_SetConfig+0x1ac>
 8006e7c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006e80:	d00c      	beq.n	8006e9c <UART_SetConfig+0x194>
 8006e82:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006e86:	d815      	bhi.n	8006eb4 <UART_SetConfig+0x1ac>
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d003      	beq.n	8006e94 <UART_SetConfig+0x18c>
 8006e8c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006e90:	d008      	beq.n	8006ea4 <UART_SetConfig+0x19c>
 8006e92:	e00f      	b.n	8006eb4 <UART_SetConfig+0x1ac>
 8006e94:	2300      	movs	r3, #0
 8006e96:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006e9a:	e012      	b.n	8006ec2 <UART_SetConfig+0x1ba>
 8006e9c:	2302      	movs	r3, #2
 8006e9e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006ea2:	e00e      	b.n	8006ec2 <UART_SetConfig+0x1ba>
 8006ea4:	2304      	movs	r3, #4
 8006ea6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006eaa:	e00a      	b.n	8006ec2 <UART_SetConfig+0x1ba>
 8006eac:	2308      	movs	r3, #8
 8006eae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006eb2:	e006      	b.n	8006ec2 <UART_SetConfig+0x1ba>
 8006eb4:	2310      	movs	r3, #16
 8006eb6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006eba:	e002      	b.n	8006ec2 <UART_SetConfig+0x1ba>
 8006ebc:	2310      	movs	r3, #16
 8006ebe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	4a51      	ldr	r2, [pc, #324]	@ (800700c <UART_SetConfig+0x304>)
 8006ec8:	4293      	cmp	r3, r2
 8006eca:	d17a      	bne.n	8006fc2 <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006ecc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006ed0:	2b08      	cmp	r3, #8
 8006ed2:	d824      	bhi.n	8006f1e <UART_SetConfig+0x216>
 8006ed4:	a201      	add	r2, pc, #4	@ (adr r2, 8006edc <UART_SetConfig+0x1d4>)
 8006ed6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006eda:	bf00      	nop
 8006edc:	08006f01 	.word	0x08006f01
 8006ee0:	08006f1f 	.word	0x08006f1f
 8006ee4:	08006f09 	.word	0x08006f09
 8006ee8:	08006f1f 	.word	0x08006f1f
 8006eec:	08006f0f 	.word	0x08006f0f
 8006ef0:	08006f1f 	.word	0x08006f1f
 8006ef4:	08006f1f 	.word	0x08006f1f
 8006ef8:	08006f1f 	.word	0x08006f1f
 8006efc:	08006f17 	.word	0x08006f17
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006f00:	f7fe ffc8 	bl	8005e94 <HAL_RCC_GetPCLK1Freq>
 8006f04:	61f8      	str	r0, [r7, #28]
        break;
 8006f06:	e010      	b.n	8006f2a <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006f08:	4b44      	ldr	r3, [pc, #272]	@ (800701c <UART_SetConfig+0x314>)
 8006f0a:	61fb      	str	r3, [r7, #28]
        break;
 8006f0c:	e00d      	b.n	8006f2a <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006f0e:	f7fe ff29 	bl	8005d64 <HAL_RCC_GetSysClockFreq>
 8006f12:	61f8      	str	r0, [r7, #28]
        break;
 8006f14:	e009      	b.n	8006f2a <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006f16:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006f1a:	61fb      	str	r3, [r7, #28]
        break;
 8006f1c:	e005      	b.n	8006f2a <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 8006f1e:	2300      	movs	r3, #0
 8006f20:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006f22:	2301      	movs	r3, #1
 8006f24:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8006f28:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006f2a:	69fb      	ldr	r3, [r7, #28]
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	f000 8107 	beq.w	8007140 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	685a      	ldr	r2, [r3, #4]
 8006f36:	4613      	mov	r3, r2
 8006f38:	005b      	lsls	r3, r3, #1
 8006f3a:	4413      	add	r3, r2
 8006f3c:	69fa      	ldr	r2, [r7, #28]
 8006f3e:	429a      	cmp	r2, r3
 8006f40:	d305      	bcc.n	8006f4e <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	685b      	ldr	r3, [r3, #4]
 8006f46:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006f48:	69fa      	ldr	r2, [r7, #28]
 8006f4a:	429a      	cmp	r2, r3
 8006f4c:	d903      	bls.n	8006f56 <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 8006f4e:	2301      	movs	r3, #1
 8006f50:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006f54:	e0f4      	b.n	8007140 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006f56:	69fb      	ldr	r3, [r7, #28]
 8006f58:	2200      	movs	r2, #0
 8006f5a:	461c      	mov	r4, r3
 8006f5c:	4615      	mov	r5, r2
 8006f5e:	f04f 0200 	mov.w	r2, #0
 8006f62:	f04f 0300 	mov.w	r3, #0
 8006f66:	022b      	lsls	r3, r5, #8
 8006f68:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8006f6c:	0222      	lsls	r2, r4, #8
 8006f6e:	68f9      	ldr	r1, [r7, #12]
 8006f70:	6849      	ldr	r1, [r1, #4]
 8006f72:	0849      	lsrs	r1, r1, #1
 8006f74:	2000      	movs	r0, #0
 8006f76:	4688      	mov	r8, r1
 8006f78:	4681      	mov	r9, r0
 8006f7a:	eb12 0a08 	adds.w	sl, r2, r8
 8006f7e:	eb43 0b09 	adc.w	fp, r3, r9
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	685b      	ldr	r3, [r3, #4]
 8006f86:	2200      	movs	r2, #0
 8006f88:	603b      	str	r3, [r7, #0]
 8006f8a:	607a      	str	r2, [r7, #4]
 8006f8c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006f90:	4650      	mov	r0, sl
 8006f92:	4659      	mov	r1, fp
 8006f94:	f7f9 fd80 	bl	8000a98 <__aeabi_uldivmod>
 8006f98:	4602      	mov	r2, r0
 8006f9a:	460b      	mov	r3, r1
 8006f9c:	4613      	mov	r3, r2
 8006f9e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006fa0:	69bb      	ldr	r3, [r7, #24]
 8006fa2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006fa6:	d308      	bcc.n	8006fba <UART_SetConfig+0x2b2>
 8006fa8:	69bb      	ldr	r3, [r7, #24]
 8006faa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006fae:	d204      	bcs.n	8006fba <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	69ba      	ldr	r2, [r7, #24]
 8006fb6:	60da      	str	r2, [r3, #12]
 8006fb8:	e0c2      	b.n	8007140 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 8006fba:	2301      	movs	r3, #1
 8006fbc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006fc0:	e0be      	b.n	8007140 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	69db      	ldr	r3, [r3, #28]
 8006fc6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006fca:	d16a      	bne.n	80070a2 <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8006fcc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006fd0:	2b08      	cmp	r3, #8
 8006fd2:	d834      	bhi.n	800703e <UART_SetConfig+0x336>
 8006fd4:	a201      	add	r2, pc, #4	@ (adr r2, 8006fdc <UART_SetConfig+0x2d4>)
 8006fd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fda:	bf00      	nop
 8006fdc:	08007001 	.word	0x08007001
 8006fe0:	08007021 	.word	0x08007021
 8006fe4:	08007029 	.word	0x08007029
 8006fe8:	0800703f 	.word	0x0800703f
 8006fec:	0800702f 	.word	0x0800702f
 8006ff0:	0800703f 	.word	0x0800703f
 8006ff4:	0800703f 	.word	0x0800703f
 8006ff8:	0800703f 	.word	0x0800703f
 8006ffc:	08007037 	.word	0x08007037
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007000:	f7fe ff48 	bl	8005e94 <HAL_RCC_GetPCLK1Freq>
 8007004:	61f8      	str	r0, [r7, #28]
        break;
 8007006:	e020      	b.n	800704a <UART_SetConfig+0x342>
 8007008:	efff69f3 	.word	0xefff69f3
 800700c:	40008000 	.word	0x40008000
 8007010:	40013800 	.word	0x40013800
 8007014:	40021000 	.word	0x40021000
 8007018:	40004400 	.word	0x40004400
 800701c:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007020:	f7fe ff4e 	bl	8005ec0 <HAL_RCC_GetPCLK2Freq>
 8007024:	61f8      	str	r0, [r7, #28]
        break;
 8007026:	e010      	b.n	800704a <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007028:	4b4c      	ldr	r3, [pc, #304]	@ (800715c <UART_SetConfig+0x454>)
 800702a:	61fb      	str	r3, [r7, #28]
        break;
 800702c:	e00d      	b.n	800704a <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800702e:	f7fe fe99 	bl	8005d64 <HAL_RCC_GetSysClockFreq>
 8007032:	61f8      	str	r0, [r7, #28]
        break;
 8007034:	e009      	b.n	800704a <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007036:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800703a:	61fb      	str	r3, [r7, #28]
        break;
 800703c:	e005      	b.n	800704a <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 800703e:	2300      	movs	r3, #0
 8007040:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007042:	2301      	movs	r3, #1
 8007044:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8007048:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800704a:	69fb      	ldr	r3, [r7, #28]
 800704c:	2b00      	cmp	r3, #0
 800704e:	d077      	beq.n	8007140 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007050:	69fb      	ldr	r3, [r7, #28]
 8007052:	005a      	lsls	r2, r3, #1
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	685b      	ldr	r3, [r3, #4]
 8007058:	085b      	lsrs	r3, r3, #1
 800705a:	441a      	add	r2, r3
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	685b      	ldr	r3, [r3, #4]
 8007060:	fbb2 f3f3 	udiv	r3, r2, r3
 8007064:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007066:	69bb      	ldr	r3, [r7, #24]
 8007068:	2b0f      	cmp	r3, #15
 800706a:	d916      	bls.n	800709a <UART_SetConfig+0x392>
 800706c:	69bb      	ldr	r3, [r7, #24]
 800706e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007072:	d212      	bcs.n	800709a <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007074:	69bb      	ldr	r3, [r7, #24]
 8007076:	b29b      	uxth	r3, r3
 8007078:	f023 030f 	bic.w	r3, r3, #15
 800707c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800707e:	69bb      	ldr	r3, [r7, #24]
 8007080:	085b      	lsrs	r3, r3, #1
 8007082:	b29b      	uxth	r3, r3
 8007084:	f003 0307 	and.w	r3, r3, #7
 8007088:	b29a      	uxth	r2, r3
 800708a:	8afb      	ldrh	r3, [r7, #22]
 800708c:	4313      	orrs	r3, r2
 800708e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	8afa      	ldrh	r2, [r7, #22]
 8007096:	60da      	str	r2, [r3, #12]
 8007098:	e052      	b.n	8007140 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 800709a:	2301      	movs	r3, #1
 800709c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80070a0:	e04e      	b.n	8007140 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 80070a2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80070a6:	2b08      	cmp	r3, #8
 80070a8:	d827      	bhi.n	80070fa <UART_SetConfig+0x3f2>
 80070aa:	a201      	add	r2, pc, #4	@ (adr r2, 80070b0 <UART_SetConfig+0x3a8>)
 80070ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070b0:	080070d5 	.word	0x080070d5
 80070b4:	080070dd 	.word	0x080070dd
 80070b8:	080070e5 	.word	0x080070e5
 80070bc:	080070fb 	.word	0x080070fb
 80070c0:	080070eb 	.word	0x080070eb
 80070c4:	080070fb 	.word	0x080070fb
 80070c8:	080070fb 	.word	0x080070fb
 80070cc:	080070fb 	.word	0x080070fb
 80070d0:	080070f3 	.word	0x080070f3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80070d4:	f7fe fede 	bl	8005e94 <HAL_RCC_GetPCLK1Freq>
 80070d8:	61f8      	str	r0, [r7, #28]
        break;
 80070da:	e014      	b.n	8007106 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80070dc:	f7fe fef0 	bl	8005ec0 <HAL_RCC_GetPCLK2Freq>
 80070e0:	61f8      	str	r0, [r7, #28]
        break;
 80070e2:	e010      	b.n	8007106 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80070e4:	4b1d      	ldr	r3, [pc, #116]	@ (800715c <UART_SetConfig+0x454>)
 80070e6:	61fb      	str	r3, [r7, #28]
        break;
 80070e8:	e00d      	b.n	8007106 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80070ea:	f7fe fe3b 	bl	8005d64 <HAL_RCC_GetSysClockFreq>
 80070ee:	61f8      	str	r0, [r7, #28]
        break;
 80070f0:	e009      	b.n	8007106 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80070f2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80070f6:	61fb      	str	r3, [r7, #28]
        break;
 80070f8:	e005      	b.n	8007106 <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 80070fa:	2300      	movs	r3, #0
 80070fc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80070fe:	2301      	movs	r3, #1
 8007100:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8007104:	bf00      	nop
    }

    if (pclk != 0U)
 8007106:	69fb      	ldr	r3, [r7, #28]
 8007108:	2b00      	cmp	r3, #0
 800710a:	d019      	beq.n	8007140 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	685b      	ldr	r3, [r3, #4]
 8007110:	085a      	lsrs	r2, r3, #1
 8007112:	69fb      	ldr	r3, [r7, #28]
 8007114:	441a      	add	r2, r3
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	685b      	ldr	r3, [r3, #4]
 800711a:	fbb2 f3f3 	udiv	r3, r2, r3
 800711e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007120:	69bb      	ldr	r3, [r7, #24]
 8007122:	2b0f      	cmp	r3, #15
 8007124:	d909      	bls.n	800713a <UART_SetConfig+0x432>
 8007126:	69bb      	ldr	r3, [r7, #24]
 8007128:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800712c:	d205      	bcs.n	800713a <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800712e:	69bb      	ldr	r3, [r7, #24]
 8007130:	b29a      	uxth	r2, r3
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	60da      	str	r2, [r3, #12]
 8007138:	e002      	b.n	8007140 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 800713a:	2301      	movs	r3, #1
 800713c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	2200      	movs	r2, #0
 8007144:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	2200      	movs	r2, #0
 800714a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800714c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8007150:	4618      	mov	r0, r3
 8007152:	3728      	adds	r7, #40	@ 0x28
 8007154:	46bd      	mov	sp, r7
 8007156:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800715a:	bf00      	nop
 800715c:	00f42400 	.word	0x00f42400

08007160 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007160:	b480      	push	{r7}
 8007162:	b083      	sub	sp, #12
 8007164:	af00      	add	r7, sp, #0
 8007166:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800716c:	f003 0308 	and.w	r3, r3, #8
 8007170:	2b00      	cmp	r3, #0
 8007172:	d00a      	beq.n	800718a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	685b      	ldr	r3, [r3, #4]
 800717a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	430a      	orrs	r2, r1
 8007188:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800718e:	f003 0301 	and.w	r3, r3, #1
 8007192:	2b00      	cmp	r3, #0
 8007194:	d00a      	beq.n	80071ac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	685b      	ldr	r3, [r3, #4]
 800719c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	430a      	orrs	r2, r1
 80071aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071b0:	f003 0302 	and.w	r3, r3, #2
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d00a      	beq.n	80071ce <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	685b      	ldr	r3, [r3, #4]
 80071be:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	430a      	orrs	r2, r1
 80071cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071d2:	f003 0304 	and.w	r3, r3, #4
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d00a      	beq.n	80071f0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	685b      	ldr	r3, [r3, #4]
 80071e0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	430a      	orrs	r2, r1
 80071ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071f4:	f003 0310 	and.w	r3, r3, #16
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d00a      	beq.n	8007212 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	689b      	ldr	r3, [r3, #8]
 8007202:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	430a      	orrs	r2, r1
 8007210:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007216:	f003 0320 	and.w	r3, r3, #32
 800721a:	2b00      	cmp	r3, #0
 800721c:	d00a      	beq.n	8007234 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	689b      	ldr	r3, [r3, #8]
 8007224:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	430a      	orrs	r2, r1
 8007232:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007238:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800723c:	2b00      	cmp	r3, #0
 800723e:	d01a      	beq.n	8007276 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	685b      	ldr	r3, [r3, #4]
 8007246:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	430a      	orrs	r2, r1
 8007254:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800725a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800725e:	d10a      	bne.n	8007276 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	685b      	ldr	r3, [r3, #4]
 8007266:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	430a      	orrs	r2, r1
 8007274:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800727a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800727e:	2b00      	cmp	r3, #0
 8007280:	d00a      	beq.n	8007298 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	685b      	ldr	r3, [r3, #4]
 8007288:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	430a      	orrs	r2, r1
 8007296:	605a      	str	r2, [r3, #4]
  }
}
 8007298:	bf00      	nop
 800729a:	370c      	adds	r7, #12
 800729c:	46bd      	mov	sp, r7
 800729e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a2:	4770      	bx	lr

080072a4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80072a4:	b580      	push	{r7, lr}
 80072a6:	b098      	sub	sp, #96	@ 0x60
 80072a8:	af02      	add	r7, sp, #8
 80072aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	2200      	movs	r2, #0
 80072b0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80072b4:	f7fb f89e 	bl	80023f4 <HAL_GetTick>
 80072b8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	f003 0308 	and.w	r3, r3, #8
 80072c4:	2b08      	cmp	r3, #8
 80072c6:	d12e      	bne.n	8007326 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80072c8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80072cc:	9300      	str	r3, [sp, #0]
 80072ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80072d0:	2200      	movs	r2, #0
 80072d2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80072d6:	6878      	ldr	r0, [r7, #4]
 80072d8:	f000 f88c 	bl	80073f4 <UART_WaitOnFlagUntilTimeout>
 80072dc:	4603      	mov	r3, r0
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d021      	beq.n	8007326 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072ea:	e853 3f00 	ldrex	r3, [r3]
 80072ee:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80072f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80072f2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80072f6:	653b      	str	r3, [r7, #80]	@ 0x50
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	461a      	mov	r2, r3
 80072fe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007300:	647b      	str	r3, [r7, #68]	@ 0x44
 8007302:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007304:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007306:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007308:	e841 2300 	strex	r3, r2, [r1]
 800730c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800730e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007310:	2b00      	cmp	r3, #0
 8007312:	d1e6      	bne.n	80072e2 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	2220      	movs	r2, #32
 8007318:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	2200      	movs	r2, #0
 800731e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007322:	2303      	movs	r3, #3
 8007324:	e062      	b.n	80073ec <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	f003 0304 	and.w	r3, r3, #4
 8007330:	2b04      	cmp	r3, #4
 8007332:	d149      	bne.n	80073c8 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007334:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007338:	9300      	str	r3, [sp, #0]
 800733a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800733c:	2200      	movs	r2, #0
 800733e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007342:	6878      	ldr	r0, [r7, #4]
 8007344:	f000 f856 	bl	80073f4 <UART_WaitOnFlagUntilTimeout>
 8007348:	4603      	mov	r3, r0
 800734a:	2b00      	cmp	r3, #0
 800734c:	d03c      	beq.n	80073c8 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007354:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007356:	e853 3f00 	ldrex	r3, [r3]
 800735a:	623b      	str	r3, [r7, #32]
   return(result);
 800735c:	6a3b      	ldr	r3, [r7, #32]
 800735e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007362:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	461a      	mov	r2, r3
 800736a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800736c:	633b      	str	r3, [r7, #48]	@ 0x30
 800736e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007370:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007372:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007374:	e841 2300 	strex	r3, r2, [r1]
 8007378:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800737a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800737c:	2b00      	cmp	r3, #0
 800737e:	d1e6      	bne.n	800734e <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	3308      	adds	r3, #8
 8007386:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007388:	693b      	ldr	r3, [r7, #16]
 800738a:	e853 3f00 	ldrex	r3, [r3]
 800738e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	f023 0301 	bic.w	r3, r3, #1
 8007396:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	3308      	adds	r3, #8
 800739e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80073a0:	61fa      	str	r2, [r7, #28]
 80073a2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073a4:	69b9      	ldr	r1, [r7, #24]
 80073a6:	69fa      	ldr	r2, [r7, #28]
 80073a8:	e841 2300 	strex	r3, r2, [r1]
 80073ac:	617b      	str	r3, [r7, #20]
   return(result);
 80073ae:	697b      	ldr	r3, [r7, #20]
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d1e5      	bne.n	8007380 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	2220      	movs	r2, #32
 80073b8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	2200      	movs	r2, #0
 80073c0:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80073c4:	2303      	movs	r3, #3
 80073c6:	e011      	b.n	80073ec <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	2220      	movs	r2, #32
 80073cc:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	2220      	movs	r2, #32
 80073d2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	2200      	movs	r2, #0
 80073da:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	2200      	movs	r2, #0
 80073e0:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	2200      	movs	r2, #0
 80073e6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80073ea:	2300      	movs	r3, #0
}
 80073ec:	4618      	mov	r0, r3
 80073ee:	3758      	adds	r7, #88	@ 0x58
 80073f0:	46bd      	mov	sp, r7
 80073f2:	bd80      	pop	{r7, pc}

080073f4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80073f4:	b580      	push	{r7, lr}
 80073f6:	b084      	sub	sp, #16
 80073f8:	af00      	add	r7, sp, #0
 80073fa:	60f8      	str	r0, [r7, #12]
 80073fc:	60b9      	str	r1, [r7, #8]
 80073fe:	603b      	str	r3, [r7, #0]
 8007400:	4613      	mov	r3, r2
 8007402:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007404:	e04f      	b.n	80074a6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007406:	69bb      	ldr	r3, [r7, #24]
 8007408:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800740c:	d04b      	beq.n	80074a6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800740e:	f7fa fff1 	bl	80023f4 <HAL_GetTick>
 8007412:	4602      	mov	r2, r0
 8007414:	683b      	ldr	r3, [r7, #0]
 8007416:	1ad3      	subs	r3, r2, r3
 8007418:	69ba      	ldr	r2, [r7, #24]
 800741a:	429a      	cmp	r2, r3
 800741c:	d302      	bcc.n	8007424 <UART_WaitOnFlagUntilTimeout+0x30>
 800741e:	69bb      	ldr	r3, [r7, #24]
 8007420:	2b00      	cmp	r3, #0
 8007422:	d101      	bne.n	8007428 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007424:	2303      	movs	r3, #3
 8007426:	e04e      	b.n	80074c6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	f003 0304 	and.w	r3, r3, #4
 8007432:	2b00      	cmp	r3, #0
 8007434:	d037      	beq.n	80074a6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007436:	68bb      	ldr	r3, [r7, #8]
 8007438:	2b80      	cmp	r3, #128	@ 0x80
 800743a:	d034      	beq.n	80074a6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800743c:	68bb      	ldr	r3, [r7, #8]
 800743e:	2b40      	cmp	r3, #64	@ 0x40
 8007440:	d031      	beq.n	80074a6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	69db      	ldr	r3, [r3, #28]
 8007448:	f003 0308 	and.w	r3, r3, #8
 800744c:	2b08      	cmp	r3, #8
 800744e:	d110      	bne.n	8007472 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	2208      	movs	r2, #8
 8007456:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007458:	68f8      	ldr	r0, [r7, #12]
 800745a:	f000 f838 	bl	80074ce <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	2208      	movs	r2, #8
 8007462:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	2200      	movs	r2, #0
 800746a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800746e:	2301      	movs	r3, #1
 8007470:	e029      	b.n	80074c6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	69db      	ldr	r3, [r3, #28]
 8007478:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800747c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007480:	d111      	bne.n	80074a6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800748a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800748c:	68f8      	ldr	r0, [r7, #12]
 800748e:	f000 f81e 	bl	80074ce <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	2220      	movs	r2, #32
 8007496:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	2200      	movs	r2, #0
 800749e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80074a2:	2303      	movs	r3, #3
 80074a4:	e00f      	b.n	80074c6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	69da      	ldr	r2, [r3, #28]
 80074ac:	68bb      	ldr	r3, [r7, #8]
 80074ae:	4013      	ands	r3, r2
 80074b0:	68ba      	ldr	r2, [r7, #8]
 80074b2:	429a      	cmp	r2, r3
 80074b4:	bf0c      	ite	eq
 80074b6:	2301      	moveq	r3, #1
 80074b8:	2300      	movne	r3, #0
 80074ba:	b2db      	uxtb	r3, r3
 80074bc:	461a      	mov	r2, r3
 80074be:	79fb      	ldrb	r3, [r7, #7]
 80074c0:	429a      	cmp	r2, r3
 80074c2:	d0a0      	beq.n	8007406 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80074c4:	2300      	movs	r3, #0
}
 80074c6:	4618      	mov	r0, r3
 80074c8:	3710      	adds	r7, #16
 80074ca:	46bd      	mov	sp, r7
 80074cc:	bd80      	pop	{r7, pc}

080074ce <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80074ce:	b480      	push	{r7}
 80074d0:	b095      	sub	sp, #84	@ 0x54
 80074d2:	af00      	add	r7, sp, #0
 80074d4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80074de:	e853 3f00 	ldrex	r3, [r3]
 80074e2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80074e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074e6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80074ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	461a      	mov	r2, r3
 80074f2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80074f4:	643b      	str	r3, [r7, #64]	@ 0x40
 80074f6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074f8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80074fa:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80074fc:	e841 2300 	strex	r3, r2, [r1]
 8007500:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007502:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007504:	2b00      	cmp	r3, #0
 8007506:	d1e6      	bne.n	80074d6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	3308      	adds	r3, #8
 800750e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007510:	6a3b      	ldr	r3, [r7, #32]
 8007512:	e853 3f00 	ldrex	r3, [r3]
 8007516:	61fb      	str	r3, [r7, #28]
   return(result);
 8007518:	69fb      	ldr	r3, [r7, #28]
 800751a:	f023 0301 	bic.w	r3, r3, #1
 800751e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	3308      	adds	r3, #8
 8007526:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007528:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800752a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800752c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800752e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007530:	e841 2300 	strex	r3, r2, [r1]
 8007534:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007536:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007538:	2b00      	cmp	r3, #0
 800753a:	d1e5      	bne.n	8007508 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007540:	2b01      	cmp	r3, #1
 8007542:	d118      	bne.n	8007576 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	e853 3f00 	ldrex	r3, [r3]
 8007550:	60bb      	str	r3, [r7, #8]
   return(result);
 8007552:	68bb      	ldr	r3, [r7, #8]
 8007554:	f023 0310 	bic.w	r3, r3, #16
 8007558:	647b      	str	r3, [r7, #68]	@ 0x44
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	461a      	mov	r2, r3
 8007560:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007562:	61bb      	str	r3, [r7, #24]
 8007564:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007566:	6979      	ldr	r1, [r7, #20]
 8007568:	69ba      	ldr	r2, [r7, #24]
 800756a:	e841 2300 	strex	r3, r2, [r1]
 800756e:	613b      	str	r3, [r7, #16]
   return(result);
 8007570:	693b      	ldr	r3, [r7, #16]
 8007572:	2b00      	cmp	r3, #0
 8007574:	d1e6      	bne.n	8007544 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	2220      	movs	r2, #32
 800757a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	2200      	movs	r2, #0
 8007582:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	2200      	movs	r2, #0
 8007588:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800758a:	bf00      	nop
 800758c:	3754      	adds	r7, #84	@ 0x54
 800758e:	46bd      	mov	sp, r7
 8007590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007594:	4770      	bx	lr

08007596 <memset>:
 8007596:	4402      	add	r2, r0
 8007598:	4603      	mov	r3, r0
 800759a:	4293      	cmp	r3, r2
 800759c:	d100      	bne.n	80075a0 <memset+0xa>
 800759e:	4770      	bx	lr
 80075a0:	f803 1b01 	strb.w	r1, [r3], #1
 80075a4:	e7f9      	b.n	800759a <memset+0x4>
	...

080075a8 <__libc_init_array>:
 80075a8:	b570      	push	{r4, r5, r6, lr}
 80075aa:	4d0d      	ldr	r5, [pc, #52]	@ (80075e0 <__libc_init_array+0x38>)
 80075ac:	4c0d      	ldr	r4, [pc, #52]	@ (80075e4 <__libc_init_array+0x3c>)
 80075ae:	1b64      	subs	r4, r4, r5
 80075b0:	10a4      	asrs	r4, r4, #2
 80075b2:	2600      	movs	r6, #0
 80075b4:	42a6      	cmp	r6, r4
 80075b6:	d109      	bne.n	80075cc <__libc_init_array+0x24>
 80075b8:	4d0b      	ldr	r5, [pc, #44]	@ (80075e8 <__libc_init_array+0x40>)
 80075ba:	4c0c      	ldr	r4, [pc, #48]	@ (80075ec <__libc_init_array+0x44>)
 80075bc:	f000 f818 	bl	80075f0 <_init>
 80075c0:	1b64      	subs	r4, r4, r5
 80075c2:	10a4      	asrs	r4, r4, #2
 80075c4:	2600      	movs	r6, #0
 80075c6:	42a6      	cmp	r6, r4
 80075c8:	d105      	bne.n	80075d6 <__libc_init_array+0x2e>
 80075ca:	bd70      	pop	{r4, r5, r6, pc}
 80075cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80075d0:	4798      	blx	r3
 80075d2:	3601      	adds	r6, #1
 80075d4:	e7ee      	b.n	80075b4 <__libc_init_array+0xc>
 80075d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80075da:	4798      	blx	r3
 80075dc:	3601      	adds	r6, #1
 80075de:	e7f2      	b.n	80075c6 <__libc_init_array+0x1e>
 80075e0:	08007658 	.word	0x08007658
 80075e4:	08007658 	.word	0x08007658
 80075e8:	08007658 	.word	0x08007658
 80075ec:	0800765c 	.word	0x0800765c

080075f0 <_init>:
 80075f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075f2:	bf00      	nop
 80075f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80075f6:	bc08      	pop	{r3}
 80075f8:	469e      	mov	lr, r3
 80075fa:	4770      	bx	lr

080075fc <_fini>:
 80075fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075fe:	bf00      	nop
 8007600:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007602:	bc08      	pop	{r3}
 8007604:	469e      	mov	lr, r3
 8007606:	4770      	bx	lr
