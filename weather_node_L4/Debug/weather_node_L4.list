
weather_node_L4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007138  0800018c  0800018c  0000118c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  080072c4  080072c4  000082c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800730c  0800730c  0000900c  2**0
                  CONTENTS
  4 .ARM          00000008  0800730c  0800730c  0000830c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007314  08007314  0000900c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007314  08007314  00008314  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007318  08007318  00008318  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  0800731c  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000290  2000000c  08007328  0000900c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000029c  08007328  0000929c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000900c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018694  00000000  00000000  0000903c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003008  00000000  00000000  000216d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001688  00000000  00000000  000246d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000011ac  00000000  00000000  00025d60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002381d  00000000  00000000  00026f0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019c31  00000000  00000000  0004a729  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000df443  00000000  00000000  0006435a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0014379d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000621c  00000000  00000000  001437e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  001499fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	@ (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	2000000c 	.word	0x2000000c
 80001a8:	00000000 	.word	0x00000000
 80001ac:	080072ac 	.word	0x080072ac

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	@ (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	@ (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	@ (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000010 	.word	0x20000010
 80001c8:	080072ac 	.word	0x080072ac

080001cc <__aeabi_drsub>:
 80001cc:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001d0:	e002      	b.n	80001d8 <__adddf3>
 80001d2:	bf00      	nop

080001d4 <__aeabi_dsub>:
 80001d4:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001d8 <__adddf3>:
 80001d8:	b530      	push	{r4, r5, lr}
 80001da:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001de:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001e2:	ea94 0f05 	teq	r4, r5
 80001e6:	bf08      	it	eq
 80001e8:	ea90 0f02 	teqeq	r0, r2
 80001ec:	bf1f      	itttt	ne
 80001ee:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001f2:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001fa:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fe:	f000 80e2 	beq.w	80003c6 <__adddf3+0x1ee>
 8000202:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000206:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800020a:	bfb8      	it	lt
 800020c:	426d      	neglt	r5, r5
 800020e:	dd0c      	ble.n	800022a <__adddf3+0x52>
 8000210:	442c      	add	r4, r5
 8000212:	ea80 0202 	eor.w	r2, r0, r2
 8000216:	ea81 0303 	eor.w	r3, r1, r3
 800021a:	ea82 0000 	eor.w	r0, r2, r0
 800021e:	ea83 0101 	eor.w	r1, r3, r1
 8000222:	ea80 0202 	eor.w	r2, r0, r2
 8000226:	ea81 0303 	eor.w	r3, r1, r3
 800022a:	2d36      	cmp	r5, #54	@ 0x36
 800022c:	bf88      	it	hi
 800022e:	bd30      	pophi	{r4, r5, pc}
 8000230:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000234:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000238:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 800023c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000240:	d002      	beq.n	8000248 <__adddf3+0x70>
 8000242:	4240      	negs	r0, r0
 8000244:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000248:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 800024c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000250:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000254:	d002      	beq.n	800025c <__adddf3+0x84>
 8000256:	4252      	negs	r2, r2
 8000258:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800025c:	ea94 0f05 	teq	r4, r5
 8000260:	f000 80a7 	beq.w	80003b2 <__adddf3+0x1da>
 8000264:	f1a4 0401 	sub.w	r4, r4, #1
 8000268:	f1d5 0e20 	rsbs	lr, r5, #32
 800026c:	db0d      	blt.n	800028a <__adddf3+0xb2>
 800026e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000272:	fa22 f205 	lsr.w	r2, r2, r5
 8000276:	1880      	adds	r0, r0, r2
 8000278:	f141 0100 	adc.w	r1, r1, #0
 800027c:	fa03 f20e 	lsl.w	r2, r3, lr
 8000280:	1880      	adds	r0, r0, r2
 8000282:	fa43 f305 	asr.w	r3, r3, r5
 8000286:	4159      	adcs	r1, r3
 8000288:	e00e      	b.n	80002a8 <__adddf3+0xd0>
 800028a:	f1a5 0520 	sub.w	r5, r5, #32
 800028e:	f10e 0e20 	add.w	lr, lr, #32
 8000292:	2a01      	cmp	r2, #1
 8000294:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000298:	bf28      	it	cs
 800029a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029e:	fa43 f305 	asr.w	r3, r3, r5
 80002a2:	18c0      	adds	r0, r0, r3
 80002a4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002ac:	d507      	bpl.n	80002be <__adddf3+0xe6>
 80002ae:	f04f 0e00 	mov.w	lr, #0
 80002b2:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b6:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002ba:	eb6e 0101 	sbc.w	r1, lr, r1
 80002be:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002c2:	d31b      	bcc.n	80002fc <__adddf3+0x124>
 80002c4:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002c8:	d30c      	bcc.n	80002e4 <__adddf3+0x10c>
 80002ca:	0849      	lsrs	r1, r1, #1
 80002cc:	ea5f 0030 	movs.w	r0, r0, rrx
 80002d0:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d4:	f104 0401 	add.w	r4, r4, #1
 80002d8:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002dc:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002e0:	f080 809a 	bcs.w	8000418 <__adddf3+0x240>
 80002e4:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002e8:	bf08      	it	eq
 80002ea:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ee:	f150 0000 	adcs.w	r0, r0, #0
 80002f2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f6:	ea41 0105 	orr.w	r1, r1, r5
 80002fa:	bd30      	pop	{r4, r5, pc}
 80002fc:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000300:	4140      	adcs	r0, r0
 8000302:	eb41 0101 	adc.w	r1, r1, r1
 8000306:	3c01      	subs	r4, #1
 8000308:	bf28      	it	cs
 800030a:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800030e:	d2e9      	bcs.n	80002e4 <__adddf3+0x10c>
 8000310:	f091 0f00 	teq	r1, #0
 8000314:	bf04      	itt	eq
 8000316:	4601      	moveq	r1, r0
 8000318:	2000      	moveq	r0, #0
 800031a:	fab1 f381 	clz	r3, r1
 800031e:	bf08      	it	eq
 8000320:	3320      	addeq	r3, #32
 8000322:	f1a3 030b 	sub.w	r3, r3, #11
 8000326:	f1b3 0220 	subs.w	r2, r3, #32
 800032a:	da0c      	bge.n	8000346 <__adddf3+0x16e>
 800032c:	320c      	adds	r2, #12
 800032e:	dd08      	ble.n	8000342 <__adddf3+0x16a>
 8000330:	f102 0c14 	add.w	ip, r2, #20
 8000334:	f1c2 020c 	rsb	r2, r2, #12
 8000338:	fa01 f00c 	lsl.w	r0, r1, ip
 800033c:	fa21 f102 	lsr.w	r1, r1, r2
 8000340:	e00c      	b.n	800035c <__adddf3+0x184>
 8000342:	f102 0214 	add.w	r2, r2, #20
 8000346:	bfd8      	it	le
 8000348:	f1c2 0c20 	rsble	ip, r2, #32
 800034c:	fa01 f102 	lsl.w	r1, r1, r2
 8000350:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000354:	bfdc      	itt	le
 8000356:	ea41 010c 	orrle.w	r1, r1, ip
 800035a:	4090      	lslle	r0, r2
 800035c:	1ae4      	subs	r4, r4, r3
 800035e:	bfa2      	ittt	ge
 8000360:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000364:	4329      	orrge	r1, r5
 8000366:	bd30      	popge	{r4, r5, pc}
 8000368:	ea6f 0404 	mvn.w	r4, r4
 800036c:	3c1f      	subs	r4, #31
 800036e:	da1c      	bge.n	80003aa <__adddf3+0x1d2>
 8000370:	340c      	adds	r4, #12
 8000372:	dc0e      	bgt.n	8000392 <__adddf3+0x1ba>
 8000374:	f104 0414 	add.w	r4, r4, #20
 8000378:	f1c4 0220 	rsb	r2, r4, #32
 800037c:	fa20 f004 	lsr.w	r0, r0, r4
 8000380:	fa01 f302 	lsl.w	r3, r1, r2
 8000384:	ea40 0003 	orr.w	r0, r0, r3
 8000388:	fa21 f304 	lsr.w	r3, r1, r4
 800038c:	ea45 0103 	orr.w	r1, r5, r3
 8000390:	bd30      	pop	{r4, r5, pc}
 8000392:	f1c4 040c 	rsb	r4, r4, #12
 8000396:	f1c4 0220 	rsb	r2, r4, #32
 800039a:	fa20 f002 	lsr.w	r0, r0, r2
 800039e:	fa01 f304 	lsl.w	r3, r1, r4
 80003a2:	ea40 0003 	orr.w	r0, r0, r3
 80003a6:	4629      	mov	r1, r5
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	fa21 f004 	lsr.w	r0, r1, r4
 80003ae:	4629      	mov	r1, r5
 80003b0:	bd30      	pop	{r4, r5, pc}
 80003b2:	f094 0f00 	teq	r4, #0
 80003b6:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003ba:	bf06      	itte	eq
 80003bc:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003c0:	3401      	addeq	r4, #1
 80003c2:	3d01      	subne	r5, #1
 80003c4:	e74e      	b.n	8000264 <__adddf3+0x8c>
 80003c6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ca:	bf18      	it	ne
 80003cc:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d0:	d029      	beq.n	8000426 <__adddf3+0x24e>
 80003d2:	ea94 0f05 	teq	r4, r5
 80003d6:	bf08      	it	eq
 80003d8:	ea90 0f02 	teqeq	r0, r2
 80003dc:	d005      	beq.n	80003ea <__adddf3+0x212>
 80003de:	ea54 0c00 	orrs.w	ip, r4, r0
 80003e2:	bf04      	itt	eq
 80003e4:	4619      	moveq	r1, r3
 80003e6:	4610      	moveq	r0, r2
 80003e8:	bd30      	pop	{r4, r5, pc}
 80003ea:	ea91 0f03 	teq	r1, r3
 80003ee:	bf1e      	ittt	ne
 80003f0:	2100      	movne	r1, #0
 80003f2:	2000      	movne	r0, #0
 80003f4:	bd30      	popne	{r4, r5, pc}
 80003f6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003fa:	d105      	bne.n	8000408 <__adddf3+0x230>
 80003fc:	0040      	lsls	r0, r0, #1
 80003fe:	4149      	adcs	r1, r1
 8000400:	bf28      	it	cs
 8000402:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000406:	bd30      	pop	{r4, r5, pc}
 8000408:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 800040c:	bf3c      	itt	cc
 800040e:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000412:	bd30      	popcc	{r4, r5, pc}
 8000414:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000418:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 800041c:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000420:	f04f 0000 	mov.w	r0, #0
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042a:	bf1a      	itte	ne
 800042c:	4619      	movne	r1, r3
 800042e:	4610      	movne	r0, r2
 8000430:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000434:	bf1c      	itt	ne
 8000436:	460b      	movne	r3, r1
 8000438:	4602      	movne	r2, r0
 800043a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043e:	bf06      	itte	eq
 8000440:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000444:	ea91 0f03 	teqeq	r1, r3
 8000448:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	bf00      	nop

08000450 <__aeabi_ui2d>:
 8000450:	f090 0f00 	teq	r0, #0
 8000454:	bf04      	itt	eq
 8000456:	2100      	moveq	r1, #0
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000460:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000464:	f04f 0500 	mov.w	r5, #0
 8000468:	f04f 0100 	mov.w	r1, #0
 800046c:	e750      	b.n	8000310 <__adddf3+0x138>
 800046e:	bf00      	nop

08000470 <__aeabi_i2d>:
 8000470:	f090 0f00 	teq	r0, #0
 8000474:	bf04      	itt	eq
 8000476:	2100      	moveq	r1, #0
 8000478:	4770      	bxeq	lr
 800047a:	b530      	push	{r4, r5, lr}
 800047c:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000480:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000484:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000488:	bf48      	it	mi
 800048a:	4240      	negmi	r0, r0
 800048c:	f04f 0100 	mov.w	r1, #0
 8000490:	e73e      	b.n	8000310 <__adddf3+0x138>
 8000492:	bf00      	nop

08000494 <__aeabi_f2d>:
 8000494:	0042      	lsls	r2, r0, #1
 8000496:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800049a:	ea4f 0131 	mov.w	r1, r1, rrx
 800049e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004a2:	bf1f      	itttt	ne
 80004a4:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004a8:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004ac:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004b0:	4770      	bxne	lr
 80004b2:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004b6:	bf08      	it	eq
 80004b8:	4770      	bxeq	lr
 80004ba:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004be:	bf04      	itt	eq
 80004c0:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004cc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004d0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004d4:	e71c      	b.n	8000310 <__adddf3+0x138>
 80004d6:	bf00      	nop

080004d8 <__aeabi_ul2d>:
 80004d8:	ea50 0201 	orrs.w	r2, r0, r1
 80004dc:	bf08      	it	eq
 80004de:	4770      	bxeq	lr
 80004e0:	b530      	push	{r4, r5, lr}
 80004e2:	f04f 0500 	mov.w	r5, #0
 80004e6:	e00a      	b.n	80004fe <__aeabi_l2d+0x16>

080004e8 <__aeabi_l2d>:
 80004e8:	ea50 0201 	orrs.w	r2, r0, r1
 80004ec:	bf08      	it	eq
 80004ee:	4770      	bxeq	lr
 80004f0:	b530      	push	{r4, r5, lr}
 80004f2:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80004f6:	d502      	bpl.n	80004fe <__aeabi_l2d+0x16>
 80004f8:	4240      	negs	r0, r0
 80004fa:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fe:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000502:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000506:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800050a:	f43f aed8 	beq.w	80002be <__adddf3+0xe6>
 800050e:	f04f 0203 	mov.w	r2, #3
 8000512:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000516:	bf18      	it	ne
 8000518:	3203      	addne	r2, #3
 800051a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051e:	bf18      	it	ne
 8000520:	3203      	addne	r2, #3
 8000522:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000526:	f1c2 0320 	rsb	r3, r2, #32
 800052a:	fa00 fc03 	lsl.w	ip, r0, r3
 800052e:	fa20 f002 	lsr.w	r0, r0, r2
 8000532:	fa01 fe03 	lsl.w	lr, r1, r3
 8000536:	ea40 000e 	orr.w	r0, r0, lr
 800053a:	fa21 f102 	lsr.w	r1, r1, r2
 800053e:	4414      	add	r4, r2
 8000540:	e6bd      	b.n	80002be <__adddf3+0xe6>
 8000542:	bf00      	nop

08000544 <__aeabi_dmul>:
 8000544:	b570      	push	{r4, r5, r6, lr}
 8000546:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800054a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800054e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000552:	bf1d      	ittte	ne
 8000554:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000558:	ea94 0f0c 	teqne	r4, ip
 800055c:	ea95 0f0c 	teqne	r5, ip
 8000560:	f000 f8de 	bleq	8000720 <__aeabi_dmul+0x1dc>
 8000564:	442c      	add	r4, r5
 8000566:	ea81 0603 	eor.w	r6, r1, r3
 800056a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000572:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000576:	bf18      	it	ne
 8000578:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 800057c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000580:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000584:	d038      	beq.n	80005f8 <__aeabi_dmul+0xb4>
 8000586:	fba0 ce02 	umull	ip, lr, r0, r2
 800058a:	f04f 0500 	mov.w	r5, #0
 800058e:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000592:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000596:	fbe0 e503 	umlal	lr, r5, r0, r3
 800059a:	f04f 0600 	mov.w	r6, #0
 800059e:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005a2:	f09c 0f00 	teq	ip, #0
 80005a6:	bf18      	it	ne
 80005a8:	f04e 0e01 	orrne.w	lr, lr, #1
 80005ac:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005b0:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005b4:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005b8:	d204      	bcs.n	80005c4 <__aeabi_dmul+0x80>
 80005ba:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005be:	416d      	adcs	r5, r5
 80005c0:	eb46 0606 	adc.w	r6, r6, r6
 80005c4:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c8:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005cc:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005d0:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d4:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d8:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005dc:	bf88      	it	hi
 80005de:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005e2:	d81e      	bhi.n	8000622 <__aeabi_dmul+0xde>
 80005e4:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005e8:	bf08      	it	eq
 80005ea:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ee:	f150 0000 	adcs.w	r0, r0, #0
 80005f2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f6:	bd70      	pop	{r4, r5, r6, pc}
 80005f8:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80005fc:	ea46 0101 	orr.w	r1, r6, r1
 8000600:	ea40 0002 	orr.w	r0, r0, r2
 8000604:	ea81 0103 	eor.w	r1, r1, r3
 8000608:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800060c:	bfc2      	ittt	gt
 800060e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000612:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000616:	bd70      	popgt	{r4, r5, r6, pc}
 8000618:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800061c:	f04f 0e00 	mov.w	lr, #0
 8000620:	3c01      	subs	r4, #1
 8000622:	f300 80ab 	bgt.w	800077c <__aeabi_dmul+0x238>
 8000626:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800062a:	bfde      	ittt	le
 800062c:	2000      	movle	r0, #0
 800062e:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000632:	bd70      	pople	{r4, r5, r6, pc}
 8000634:	f1c4 0400 	rsb	r4, r4, #0
 8000638:	3c20      	subs	r4, #32
 800063a:	da35      	bge.n	80006a8 <__aeabi_dmul+0x164>
 800063c:	340c      	adds	r4, #12
 800063e:	dc1b      	bgt.n	8000678 <__aeabi_dmul+0x134>
 8000640:	f104 0414 	add.w	r4, r4, #20
 8000644:	f1c4 0520 	rsb	r5, r4, #32
 8000648:	fa00 f305 	lsl.w	r3, r0, r5
 800064c:	fa20 f004 	lsr.w	r0, r0, r4
 8000650:	fa01 f205 	lsl.w	r2, r1, r5
 8000654:	ea40 0002 	orr.w	r0, r0, r2
 8000658:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 800065c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000660:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000664:	fa21 f604 	lsr.w	r6, r1, r4
 8000668:	eb42 0106 	adc.w	r1, r2, r6
 800066c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000670:	bf08      	it	eq
 8000672:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000676:	bd70      	pop	{r4, r5, r6, pc}
 8000678:	f1c4 040c 	rsb	r4, r4, #12
 800067c:	f1c4 0520 	rsb	r5, r4, #32
 8000680:	fa00 f304 	lsl.w	r3, r0, r4
 8000684:	fa20 f005 	lsr.w	r0, r0, r5
 8000688:	fa01 f204 	lsl.w	r2, r1, r4
 800068c:	ea40 0002 	orr.w	r0, r0, r2
 8000690:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000694:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000698:	f141 0100 	adc.w	r1, r1, #0
 800069c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a0:	bf08      	it	eq
 80006a2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a6:	bd70      	pop	{r4, r5, r6, pc}
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f205 	lsl.w	r2, r0, r5
 80006b0:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b4:	fa20 f304 	lsr.w	r3, r0, r4
 80006b8:	fa01 f205 	lsl.w	r2, r1, r5
 80006bc:	ea43 0302 	orr.w	r3, r3, r2
 80006c0:	fa21 f004 	lsr.w	r0, r1, r4
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c8:	fa21 f204 	lsr.w	r2, r1, r4
 80006cc:	ea20 0002 	bic.w	r0, r0, r2
 80006d0:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d8:	bf08      	it	eq
 80006da:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006de:	bd70      	pop	{r4, r5, r6, pc}
 80006e0:	f094 0f00 	teq	r4, #0
 80006e4:	d10f      	bne.n	8000706 <__aeabi_dmul+0x1c2>
 80006e6:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006ea:	0040      	lsls	r0, r0, #1
 80006ec:	eb41 0101 	adc.w	r1, r1, r1
 80006f0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80006f4:	bf08      	it	eq
 80006f6:	3c01      	subeq	r4, #1
 80006f8:	d0f7      	beq.n	80006ea <__aeabi_dmul+0x1a6>
 80006fa:	ea41 0106 	orr.w	r1, r1, r6
 80006fe:	f095 0f00 	teq	r5, #0
 8000702:	bf18      	it	ne
 8000704:	4770      	bxne	lr
 8000706:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800070a:	0052      	lsls	r2, r2, #1
 800070c:	eb43 0303 	adc.w	r3, r3, r3
 8000710:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000714:	bf08      	it	eq
 8000716:	3d01      	subeq	r5, #1
 8000718:	d0f7      	beq.n	800070a <__aeabi_dmul+0x1c6>
 800071a:	ea43 0306 	orr.w	r3, r3, r6
 800071e:	4770      	bx	lr
 8000720:	ea94 0f0c 	teq	r4, ip
 8000724:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000728:	bf18      	it	ne
 800072a:	ea95 0f0c 	teqne	r5, ip
 800072e:	d00c      	beq.n	800074a <__aeabi_dmul+0x206>
 8000730:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000734:	bf18      	it	ne
 8000736:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800073a:	d1d1      	bne.n	80006e0 <__aeabi_dmul+0x19c>
 800073c:	ea81 0103 	eor.w	r1, r1, r3
 8000740:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000744:	f04f 0000 	mov.w	r0, #0
 8000748:	bd70      	pop	{r4, r5, r6, pc}
 800074a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074e:	bf06      	itte	eq
 8000750:	4610      	moveq	r0, r2
 8000752:	4619      	moveq	r1, r3
 8000754:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000758:	d019      	beq.n	800078e <__aeabi_dmul+0x24a>
 800075a:	ea94 0f0c 	teq	r4, ip
 800075e:	d102      	bne.n	8000766 <__aeabi_dmul+0x222>
 8000760:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000764:	d113      	bne.n	800078e <__aeabi_dmul+0x24a>
 8000766:	ea95 0f0c 	teq	r5, ip
 800076a:	d105      	bne.n	8000778 <__aeabi_dmul+0x234>
 800076c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000770:	bf1c      	itt	ne
 8000772:	4610      	movne	r0, r2
 8000774:	4619      	movne	r1, r3
 8000776:	d10a      	bne.n	800078e <__aeabi_dmul+0x24a>
 8000778:	ea81 0103 	eor.w	r1, r1, r3
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000780:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000784:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000788:	f04f 0000 	mov.w	r0, #0
 800078c:	bd70      	pop	{r4, r5, r6, pc}
 800078e:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000792:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000796:	bd70      	pop	{r4, r5, r6, pc}

08000798 <__aeabi_ddiv>:
 8000798:	b570      	push	{r4, r5, r6, lr}
 800079a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800079e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007a2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a6:	bf1d      	ittte	ne
 80007a8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007ac:	ea94 0f0c 	teqne	r4, ip
 80007b0:	ea95 0f0c 	teqne	r5, ip
 80007b4:	f000 f8a7 	bleq	8000906 <__aeabi_ddiv+0x16e>
 80007b8:	eba4 0405 	sub.w	r4, r4, r5
 80007bc:	ea81 0e03 	eor.w	lr, r1, r3
 80007c0:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c8:	f000 8088 	beq.w	80008dc <__aeabi_ddiv+0x144>
 80007cc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007d0:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007d4:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d8:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007dc:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007e0:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e4:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e8:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007ec:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007f0:	429d      	cmp	r5, r3
 80007f2:	bf08      	it	eq
 80007f4:	4296      	cmpeq	r6, r2
 80007f6:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007fa:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80007fe:	d202      	bcs.n	8000806 <__aeabi_ddiv+0x6e>
 8000800:	085b      	lsrs	r3, r3, #1
 8000802:	ea4f 0232 	mov.w	r2, r2, rrx
 8000806:	1ab6      	subs	r6, r6, r2
 8000808:	eb65 0503 	sbc.w	r5, r5, r3
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000816:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800081a:	ebb6 0e02 	subs.w	lr, r6, r2
 800081e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000822:	bf22      	ittt	cs
 8000824:	1ab6      	subcs	r6, r6, r2
 8000826:	4675      	movcs	r5, lr
 8000828:	ea40 000c 	orrcs.w	r0, r0, ip
 800082c:	085b      	lsrs	r3, r3, #1
 800082e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000832:	ebb6 0e02 	subs.w	lr, r6, r2
 8000836:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083a:	bf22      	ittt	cs
 800083c:	1ab6      	subcs	r6, r6, r2
 800083e:	4675      	movcs	r5, lr
 8000840:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000844:	085b      	lsrs	r3, r3, #1
 8000846:	ea4f 0232 	mov.w	r2, r2, rrx
 800084a:	ebb6 0e02 	subs.w	lr, r6, r2
 800084e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000852:	bf22      	ittt	cs
 8000854:	1ab6      	subcs	r6, r6, r2
 8000856:	4675      	movcs	r5, lr
 8000858:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800085c:	085b      	lsrs	r3, r3, #1
 800085e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000862:	ebb6 0e02 	subs.w	lr, r6, r2
 8000866:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086a:	bf22      	ittt	cs
 800086c:	1ab6      	subcs	r6, r6, r2
 800086e:	4675      	movcs	r5, lr
 8000870:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000874:	ea55 0e06 	orrs.w	lr, r5, r6
 8000878:	d018      	beq.n	80008ac <__aeabi_ddiv+0x114>
 800087a:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000882:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000886:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800088a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000892:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000896:	d1c0      	bne.n	800081a <__aeabi_ddiv+0x82>
 8000898:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800089c:	d10b      	bne.n	80008b6 <__aeabi_ddiv+0x11e>
 800089e:	ea41 0100 	orr.w	r1, r1, r0
 80008a2:	f04f 0000 	mov.w	r0, #0
 80008a6:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008aa:	e7b6      	b.n	800081a <__aeabi_ddiv+0x82>
 80008ac:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008b0:	bf04      	itt	eq
 80008b2:	4301      	orreq	r1, r0
 80008b4:	2000      	moveq	r0, #0
 80008b6:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008ba:	bf88      	it	hi
 80008bc:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008c0:	f63f aeaf 	bhi.w	8000622 <__aeabi_dmul+0xde>
 80008c4:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c8:	bf04      	itt	eq
 80008ca:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008d2:	f150 0000 	adcs.w	r0, r0, #0
 80008d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008da:	bd70      	pop	{r4, r5, r6, pc}
 80008dc:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008e0:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e4:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e8:	bfc2      	ittt	gt
 80008ea:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ee:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008f2:	bd70      	popgt	{r4, r5, r6, pc}
 80008f4:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008f8:	f04f 0e00 	mov.w	lr, #0
 80008fc:	3c01      	subs	r4, #1
 80008fe:	e690      	b.n	8000622 <__aeabi_dmul+0xde>
 8000900:	ea45 0e06 	orr.w	lr, r5, r6
 8000904:	e68d      	b.n	8000622 <__aeabi_dmul+0xde>
 8000906:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800090a:	ea94 0f0c 	teq	r4, ip
 800090e:	bf08      	it	eq
 8000910:	ea95 0f0c 	teqeq	r5, ip
 8000914:	f43f af3b 	beq.w	800078e <__aeabi_dmul+0x24a>
 8000918:	ea94 0f0c 	teq	r4, ip
 800091c:	d10a      	bne.n	8000934 <__aeabi_ddiv+0x19c>
 800091e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000922:	f47f af34 	bne.w	800078e <__aeabi_dmul+0x24a>
 8000926:	ea95 0f0c 	teq	r5, ip
 800092a:	f47f af25 	bne.w	8000778 <__aeabi_dmul+0x234>
 800092e:	4610      	mov	r0, r2
 8000930:	4619      	mov	r1, r3
 8000932:	e72c      	b.n	800078e <__aeabi_dmul+0x24a>
 8000934:	ea95 0f0c 	teq	r5, ip
 8000938:	d106      	bne.n	8000948 <__aeabi_ddiv+0x1b0>
 800093a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093e:	f43f aefd 	beq.w	800073c <__aeabi_dmul+0x1f8>
 8000942:	4610      	mov	r0, r2
 8000944:	4619      	mov	r1, r3
 8000946:	e722      	b.n	800078e <__aeabi_dmul+0x24a>
 8000948:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800094c:	bf18      	it	ne
 800094e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000952:	f47f aec5 	bne.w	80006e0 <__aeabi_dmul+0x19c>
 8000956:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800095a:	f47f af0d 	bne.w	8000778 <__aeabi_dmul+0x234>
 800095e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000962:	f47f aeeb 	bne.w	800073c <__aeabi_dmul+0x1f8>
 8000966:	e712      	b.n	800078e <__aeabi_dmul+0x24a>

08000968 <__aeabi_d2iz>:
 8000968:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800096c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000970:	d215      	bcs.n	800099e <__aeabi_d2iz+0x36>
 8000972:	d511      	bpl.n	8000998 <__aeabi_d2iz+0x30>
 8000974:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000978:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 800097c:	d912      	bls.n	80009a4 <__aeabi_d2iz+0x3c>
 800097e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000982:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000986:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800098a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800098e:	fa23 f002 	lsr.w	r0, r3, r2
 8000992:	bf18      	it	ne
 8000994:	4240      	negne	r0, r0
 8000996:	4770      	bx	lr
 8000998:	f04f 0000 	mov.w	r0, #0
 800099c:	4770      	bx	lr
 800099e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009a2:	d105      	bne.n	80009b0 <__aeabi_d2iz+0x48>
 80009a4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 80009a8:	bf08      	it	eq
 80009aa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 80009ae:	4770      	bx	lr
 80009b0:	f04f 0000 	mov.w	r0, #0
 80009b4:	4770      	bx	lr
 80009b6:	bf00      	nop

080009b8 <__aeabi_d2uiz>:
 80009b8:	004a      	lsls	r2, r1, #1
 80009ba:	d211      	bcs.n	80009e0 <__aeabi_d2uiz+0x28>
 80009bc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80009c0:	d211      	bcs.n	80009e6 <__aeabi_d2uiz+0x2e>
 80009c2:	d50d      	bpl.n	80009e0 <__aeabi_d2uiz+0x28>
 80009c4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80009c8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009cc:	d40e      	bmi.n	80009ec <__aeabi_d2uiz+0x34>
 80009ce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009d2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80009d6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009da:	fa23 f002 	lsr.w	r0, r3, r2
 80009de:	4770      	bx	lr
 80009e0:	f04f 0000 	mov.w	r0, #0
 80009e4:	4770      	bx	lr
 80009e6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009ea:	d102      	bne.n	80009f2 <__aeabi_d2uiz+0x3a>
 80009ec:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80009f0:	4770      	bx	lr
 80009f2:	f04f 0000 	mov.w	r0, #0
 80009f6:	4770      	bx	lr

080009f8 <__aeabi_d2f>:
 80009f8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009fc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a00:	bf24      	itt	cs
 8000a02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a0a:	d90d      	bls.n	8000a28 <__aeabi_d2f+0x30>
 8000a0c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a18:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000a1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a20:	bf08      	it	eq
 8000a22:	f020 0001 	biceq.w	r0, r0, #1
 8000a26:	4770      	bx	lr
 8000a28:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000a2c:	d121      	bne.n	8000a72 <__aeabi_d2f+0x7a>
 8000a2e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000a32:	bfbc      	itt	lt
 8000a34:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000a38:	4770      	bxlt	lr
 8000a3a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a42:	f1c2 0218 	rsb	r2, r2, #24
 8000a46:	f1c2 0c20 	rsb	ip, r2, #32
 8000a4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000a52:	bf18      	it	ne
 8000a54:	f040 0001 	orrne.w	r0, r0, #1
 8000a58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a64:	ea40 000c 	orr.w	r0, r0, ip
 8000a68:	fa23 f302 	lsr.w	r3, r3, r2
 8000a6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a70:	e7cc      	b.n	8000a0c <__aeabi_d2f+0x14>
 8000a72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a76:	d107      	bne.n	8000a88 <__aeabi_d2f+0x90>
 8000a78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a7c:	bf1e      	ittt	ne
 8000a7e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000a82:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000a86:	4770      	bxne	lr
 8000a88:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000a8c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000a90:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <__aeabi_uldivmod>:
 8000a98:	b953      	cbnz	r3, 8000ab0 <__aeabi_uldivmod+0x18>
 8000a9a:	b94a      	cbnz	r2, 8000ab0 <__aeabi_uldivmod+0x18>
 8000a9c:	2900      	cmp	r1, #0
 8000a9e:	bf08      	it	eq
 8000aa0:	2800      	cmpeq	r0, #0
 8000aa2:	bf1c      	itt	ne
 8000aa4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000aa8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000aac:	f000 b96a 	b.w	8000d84 <__aeabi_idiv0>
 8000ab0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ab4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ab8:	f000 f806 	bl	8000ac8 <__udivmoddi4>
 8000abc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ac0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ac4:	b004      	add	sp, #16
 8000ac6:	4770      	bx	lr

08000ac8 <__udivmoddi4>:
 8000ac8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000acc:	9d08      	ldr	r5, [sp, #32]
 8000ace:	460c      	mov	r4, r1
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d14e      	bne.n	8000b72 <__udivmoddi4+0xaa>
 8000ad4:	4694      	mov	ip, r2
 8000ad6:	458c      	cmp	ip, r1
 8000ad8:	4686      	mov	lr, r0
 8000ada:	fab2 f282 	clz	r2, r2
 8000ade:	d962      	bls.n	8000ba6 <__udivmoddi4+0xde>
 8000ae0:	b14a      	cbz	r2, 8000af6 <__udivmoddi4+0x2e>
 8000ae2:	f1c2 0320 	rsb	r3, r2, #32
 8000ae6:	4091      	lsls	r1, r2
 8000ae8:	fa20 f303 	lsr.w	r3, r0, r3
 8000aec:	fa0c fc02 	lsl.w	ip, ip, r2
 8000af0:	4319      	orrs	r1, r3
 8000af2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000af6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000afa:	fa1f f68c 	uxth.w	r6, ip
 8000afe:	fbb1 f4f7 	udiv	r4, r1, r7
 8000b02:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b06:	fb07 1114 	mls	r1, r7, r4, r1
 8000b0a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b0e:	fb04 f106 	mul.w	r1, r4, r6
 8000b12:	4299      	cmp	r1, r3
 8000b14:	d90a      	bls.n	8000b2c <__udivmoddi4+0x64>
 8000b16:	eb1c 0303 	adds.w	r3, ip, r3
 8000b1a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000b1e:	f080 8112 	bcs.w	8000d46 <__udivmoddi4+0x27e>
 8000b22:	4299      	cmp	r1, r3
 8000b24:	f240 810f 	bls.w	8000d46 <__udivmoddi4+0x27e>
 8000b28:	3c02      	subs	r4, #2
 8000b2a:	4463      	add	r3, ip
 8000b2c:	1a59      	subs	r1, r3, r1
 8000b2e:	fa1f f38e 	uxth.w	r3, lr
 8000b32:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b36:	fb07 1110 	mls	r1, r7, r0, r1
 8000b3a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b3e:	fb00 f606 	mul.w	r6, r0, r6
 8000b42:	429e      	cmp	r6, r3
 8000b44:	d90a      	bls.n	8000b5c <__udivmoddi4+0x94>
 8000b46:	eb1c 0303 	adds.w	r3, ip, r3
 8000b4a:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000b4e:	f080 80fc 	bcs.w	8000d4a <__udivmoddi4+0x282>
 8000b52:	429e      	cmp	r6, r3
 8000b54:	f240 80f9 	bls.w	8000d4a <__udivmoddi4+0x282>
 8000b58:	4463      	add	r3, ip
 8000b5a:	3802      	subs	r0, #2
 8000b5c:	1b9b      	subs	r3, r3, r6
 8000b5e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000b62:	2100      	movs	r1, #0
 8000b64:	b11d      	cbz	r5, 8000b6e <__udivmoddi4+0xa6>
 8000b66:	40d3      	lsrs	r3, r2
 8000b68:	2200      	movs	r2, #0
 8000b6a:	e9c5 3200 	strd	r3, r2, [r5]
 8000b6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b72:	428b      	cmp	r3, r1
 8000b74:	d905      	bls.n	8000b82 <__udivmoddi4+0xba>
 8000b76:	b10d      	cbz	r5, 8000b7c <__udivmoddi4+0xb4>
 8000b78:	e9c5 0100 	strd	r0, r1, [r5]
 8000b7c:	2100      	movs	r1, #0
 8000b7e:	4608      	mov	r0, r1
 8000b80:	e7f5      	b.n	8000b6e <__udivmoddi4+0xa6>
 8000b82:	fab3 f183 	clz	r1, r3
 8000b86:	2900      	cmp	r1, #0
 8000b88:	d146      	bne.n	8000c18 <__udivmoddi4+0x150>
 8000b8a:	42a3      	cmp	r3, r4
 8000b8c:	d302      	bcc.n	8000b94 <__udivmoddi4+0xcc>
 8000b8e:	4290      	cmp	r0, r2
 8000b90:	f0c0 80f0 	bcc.w	8000d74 <__udivmoddi4+0x2ac>
 8000b94:	1a86      	subs	r6, r0, r2
 8000b96:	eb64 0303 	sbc.w	r3, r4, r3
 8000b9a:	2001      	movs	r0, #1
 8000b9c:	2d00      	cmp	r5, #0
 8000b9e:	d0e6      	beq.n	8000b6e <__udivmoddi4+0xa6>
 8000ba0:	e9c5 6300 	strd	r6, r3, [r5]
 8000ba4:	e7e3      	b.n	8000b6e <__udivmoddi4+0xa6>
 8000ba6:	2a00      	cmp	r2, #0
 8000ba8:	f040 8090 	bne.w	8000ccc <__udivmoddi4+0x204>
 8000bac:	eba1 040c 	sub.w	r4, r1, ip
 8000bb0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000bb4:	fa1f f78c 	uxth.w	r7, ip
 8000bb8:	2101      	movs	r1, #1
 8000bba:	fbb4 f6f8 	udiv	r6, r4, r8
 8000bbe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000bc2:	fb08 4416 	mls	r4, r8, r6, r4
 8000bc6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000bca:	fb07 f006 	mul.w	r0, r7, r6
 8000bce:	4298      	cmp	r0, r3
 8000bd0:	d908      	bls.n	8000be4 <__udivmoddi4+0x11c>
 8000bd2:	eb1c 0303 	adds.w	r3, ip, r3
 8000bd6:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000bda:	d202      	bcs.n	8000be2 <__udivmoddi4+0x11a>
 8000bdc:	4298      	cmp	r0, r3
 8000bde:	f200 80cd 	bhi.w	8000d7c <__udivmoddi4+0x2b4>
 8000be2:	4626      	mov	r6, r4
 8000be4:	1a1c      	subs	r4, r3, r0
 8000be6:	fa1f f38e 	uxth.w	r3, lr
 8000bea:	fbb4 f0f8 	udiv	r0, r4, r8
 8000bee:	fb08 4410 	mls	r4, r8, r0, r4
 8000bf2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000bf6:	fb00 f707 	mul.w	r7, r0, r7
 8000bfa:	429f      	cmp	r7, r3
 8000bfc:	d908      	bls.n	8000c10 <__udivmoddi4+0x148>
 8000bfe:	eb1c 0303 	adds.w	r3, ip, r3
 8000c02:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000c06:	d202      	bcs.n	8000c0e <__udivmoddi4+0x146>
 8000c08:	429f      	cmp	r7, r3
 8000c0a:	f200 80b0 	bhi.w	8000d6e <__udivmoddi4+0x2a6>
 8000c0e:	4620      	mov	r0, r4
 8000c10:	1bdb      	subs	r3, r3, r7
 8000c12:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c16:	e7a5      	b.n	8000b64 <__udivmoddi4+0x9c>
 8000c18:	f1c1 0620 	rsb	r6, r1, #32
 8000c1c:	408b      	lsls	r3, r1
 8000c1e:	fa22 f706 	lsr.w	r7, r2, r6
 8000c22:	431f      	orrs	r7, r3
 8000c24:	fa20 fc06 	lsr.w	ip, r0, r6
 8000c28:	fa04 f301 	lsl.w	r3, r4, r1
 8000c2c:	ea43 030c 	orr.w	r3, r3, ip
 8000c30:	40f4      	lsrs	r4, r6
 8000c32:	fa00 f801 	lsl.w	r8, r0, r1
 8000c36:	0c38      	lsrs	r0, r7, #16
 8000c38:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000c3c:	fbb4 fef0 	udiv	lr, r4, r0
 8000c40:	fa1f fc87 	uxth.w	ip, r7
 8000c44:	fb00 441e 	mls	r4, r0, lr, r4
 8000c48:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c4c:	fb0e f90c 	mul.w	r9, lr, ip
 8000c50:	45a1      	cmp	r9, r4
 8000c52:	fa02 f201 	lsl.w	r2, r2, r1
 8000c56:	d90a      	bls.n	8000c6e <__udivmoddi4+0x1a6>
 8000c58:	193c      	adds	r4, r7, r4
 8000c5a:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000c5e:	f080 8084 	bcs.w	8000d6a <__udivmoddi4+0x2a2>
 8000c62:	45a1      	cmp	r9, r4
 8000c64:	f240 8081 	bls.w	8000d6a <__udivmoddi4+0x2a2>
 8000c68:	f1ae 0e02 	sub.w	lr, lr, #2
 8000c6c:	443c      	add	r4, r7
 8000c6e:	eba4 0409 	sub.w	r4, r4, r9
 8000c72:	fa1f f983 	uxth.w	r9, r3
 8000c76:	fbb4 f3f0 	udiv	r3, r4, r0
 8000c7a:	fb00 4413 	mls	r4, r0, r3, r4
 8000c7e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c82:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c86:	45a4      	cmp	ip, r4
 8000c88:	d907      	bls.n	8000c9a <__udivmoddi4+0x1d2>
 8000c8a:	193c      	adds	r4, r7, r4
 8000c8c:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000c90:	d267      	bcs.n	8000d62 <__udivmoddi4+0x29a>
 8000c92:	45a4      	cmp	ip, r4
 8000c94:	d965      	bls.n	8000d62 <__udivmoddi4+0x29a>
 8000c96:	3b02      	subs	r3, #2
 8000c98:	443c      	add	r4, r7
 8000c9a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000c9e:	fba0 9302 	umull	r9, r3, r0, r2
 8000ca2:	eba4 040c 	sub.w	r4, r4, ip
 8000ca6:	429c      	cmp	r4, r3
 8000ca8:	46ce      	mov	lr, r9
 8000caa:	469c      	mov	ip, r3
 8000cac:	d351      	bcc.n	8000d52 <__udivmoddi4+0x28a>
 8000cae:	d04e      	beq.n	8000d4e <__udivmoddi4+0x286>
 8000cb0:	b155      	cbz	r5, 8000cc8 <__udivmoddi4+0x200>
 8000cb2:	ebb8 030e 	subs.w	r3, r8, lr
 8000cb6:	eb64 040c 	sbc.w	r4, r4, ip
 8000cba:	fa04 f606 	lsl.w	r6, r4, r6
 8000cbe:	40cb      	lsrs	r3, r1
 8000cc0:	431e      	orrs	r6, r3
 8000cc2:	40cc      	lsrs	r4, r1
 8000cc4:	e9c5 6400 	strd	r6, r4, [r5]
 8000cc8:	2100      	movs	r1, #0
 8000cca:	e750      	b.n	8000b6e <__udivmoddi4+0xa6>
 8000ccc:	f1c2 0320 	rsb	r3, r2, #32
 8000cd0:	fa20 f103 	lsr.w	r1, r0, r3
 8000cd4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cd8:	fa24 f303 	lsr.w	r3, r4, r3
 8000cdc:	4094      	lsls	r4, r2
 8000cde:	430c      	orrs	r4, r1
 8000ce0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ce4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ce8:	fa1f f78c 	uxth.w	r7, ip
 8000cec:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cf0:	fb08 3110 	mls	r1, r8, r0, r3
 8000cf4:	0c23      	lsrs	r3, r4, #16
 8000cf6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cfa:	fb00 f107 	mul.w	r1, r0, r7
 8000cfe:	4299      	cmp	r1, r3
 8000d00:	d908      	bls.n	8000d14 <__udivmoddi4+0x24c>
 8000d02:	eb1c 0303 	adds.w	r3, ip, r3
 8000d06:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000d0a:	d22c      	bcs.n	8000d66 <__udivmoddi4+0x29e>
 8000d0c:	4299      	cmp	r1, r3
 8000d0e:	d92a      	bls.n	8000d66 <__udivmoddi4+0x29e>
 8000d10:	3802      	subs	r0, #2
 8000d12:	4463      	add	r3, ip
 8000d14:	1a5b      	subs	r3, r3, r1
 8000d16:	b2a4      	uxth	r4, r4
 8000d18:	fbb3 f1f8 	udiv	r1, r3, r8
 8000d1c:	fb08 3311 	mls	r3, r8, r1, r3
 8000d20:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d24:	fb01 f307 	mul.w	r3, r1, r7
 8000d28:	42a3      	cmp	r3, r4
 8000d2a:	d908      	bls.n	8000d3e <__udivmoddi4+0x276>
 8000d2c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d30:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000d34:	d213      	bcs.n	8000d5e <__udivmoddi4+0x296>
 8000d36:	42a3      	cmp	r3, r4
 8000d38:	d911      	bls.n	8000d5e <__udivmoddi4+0x296>
 8000d3a:	3902      	subs	r1, #2
 8000d3c:	4464      	add	r4, ip
 8000d3e:	1ae4      	subs	r4, r4, r3
 8000d40:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000d44:	e739      	b.n	8000bba <__udivmoddi4+0xf2>
 8000d46:	4604      	mov	r4, r0
 8000d48:	e6f0      	b.n	8000b2c <__udivmoddi4+0x64>
 8000d4a:	4608      	mov	r0, r1
 8000d4c:	e706      	b.n	8000b5c <__udivmoddi4+0x94>
 8000d4e:	45c8      	cmp	r8, r9
 8000d50:	d2ae      	bcs.n	8000cb0 <__udivmoddi4+0x1e8>
 8000d52:	ebb9 0e02 	subs.w	lr, r9, r2
 8000d56:	eb63 0c07 	sbc.w	ip, r3, r7
 8000d5a:	3801      	subs	r0, #1
 8000d5c:	e7a8      	b.n	8000cb0 <__udivmoddi4+0x1e8>
 8000d5e:	4631      	mov	r1, r6
 8000d60:	e7ed      	b.n	8000d3e <__udivmoddi4+0x276>
 8000d62:	4603      	mov	r3, r0
 8000d64:	e799      	b.n	8000c9a <__udivmoddi4+0x1d2>
 8000d66:	4630      	mov	r0, r6
 8000d68:	e7d4      	b.n	8000d14 <__udivmoddi4+0x24c>
 8000d6a:	46d6      	mov	lr, sl
 8000d6c:	e77f      	b.n	8000c6e <__udivmoddi4+0x1a6>
 8000d6e:	4463      	add	r3, ip
 8000d70:	3802      	subs	r0, #2
 8000d72:	e74d      	b.n	8000c10 <__udivmoddi4+0x148>
 8000d74:	4606      	mov	r6, r0
 8000d76:	4623      	mov	r3, r4
 8000d78:	4608      	mov	r0, r1
 8000d7a:	e70f      	b.n	8000b9c <__udivmoddi4+0xd4>
 8000d7c:	3e02      	subs	r6, #2
 8000d7e:	4463      	add	r3, ip
 8000d80:	e730      	b.n	8000be4 <__udivmoddi4+0x11c>
 8000d82:	bf00      	nop

08000d84 <__aeabi_idiv0>:
 8000d84:	4770      	bx	lr
 8000d86:	bf00      	nop

08000d88 <read_calibration_data>:
 *      Author: bala
 */
#include "bmp.h"

void read_calibration_data(I2C_HandleTypeDef *hi2c, bmp_calib_t *bmp_calib_data)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b08c      	sub	sp, #48	@ 0x30
 8000d8c:	af04      	add	r7, sp, #16
 8000d8e:	6078      	str	r0, [r7, #4]
 8000d90:	6039      	str	r1, [r7, #0]
	uint8_t calib_data[22];

	HAL_I2C_Mem_Read(hi2c,BMP_ADDR,(uint16_t) CALIB_START_ADDR,1,calib_data,22,1000);
 8000d92:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d96:	9302      	str	r3, [sp, #8]
 8000d98:	2316      	movs	r3, #22
 8000d9a:	9301      	str	r3, [sp, #4]
 8000d9c:	f107 0308 	add.w	r3, r7, #8
 8000da0:	9300      	str	r3, [sp, #0]
 8000da2:	2301      	movs	r3, #1
 8000da4:	22aa      	movs	r2, #170	@ 0xaa
 8000da6:	21ee      	movs	r1, #238	@ 0xee
 8000da8:	6878      	ldr	r0, [r7, #4]
 8000daa:	f003 fa3d 	bl	8004228 <HAL_I2C_Mem_Read>

	bmp_calib_data->AC1 = (uint16_t) (calib_data[0] << 8) | (calib_data[1]);
 8000dae:	7a3b      	ldrb	r3, [r7, #8]
 8000db0:	021b      	lsls	r3, r3, #8
 8000db2:	b29b      	uxth	r3, r3
 8000db4:	7a7a      	ldrb	r2, [r7, #9]
 8000db6:	4313      	orrs	r3, r2
 8000db8:	b29a      	uxth	r2, r3
 8000dba:	683b      	ldr	r3, [r7, #0]
 8000dbc:	801a      	strh	r2, [r3, #0]
	bmp_calib_data->AC2 = (uint16_t) (calib_data[2] << 8) | (calib_data[3]);
 8000dbe:	7abb      	ldrb	r3, [r7, #10]
 8000dc0:	021b      	lsls	r3, r3, #8
 8000dc2:	b29b      	uxth	r3, r3
 8000dc4:	7afa      	ldrb	r2, [r7, #11]
 8000dc6:	4313      	orrs	r3, r2
 8000dc8:	b29a      	uxth	r2, r3
 8000dca:	683b      	ldr	r3, [r7, #0]
 8000dcc:	805a      	strh	r2, [r3, #2]
	bmp_calib_data->AC3 = (uint16_t) (calib_data[4] << 8) | (calib_data[5]);
 8000dce:	7b3b      	ldrb	r3, [r7, #12]
 8000dd0:	021b      	lsls	r3, r3, #8
 8000dd2:	b29b      	uxth	r3, r3
 8000dd4:	7b7a      	ldrb	r2, [r7, #13]
 8000dd6:	4313      	orrs	r3, r2
 8000dd8:	b29a      	uxth	r2, r3
 8000dda:	683b      	ldr	r3, [r7, #0]
 8000ddc:	809a      	strh	r2, [r3, #4]
	bmp_calib_data->AC4 = (uint16_t) (calib_data[6] << 8) | (calib_data[7]);
 8000dde:	7bbb      	ldrb	r3, [r7, #14]
 8000de0:	021b      	lsls	r3, r3, #8
 8000de2:	b29b      	uxth	r3, r3
 8000de4:	7bfa      	ldrb	r2, [r7, #15]
 8000de6:	4313      	orrs	r3, r2
 8000de8:	b29a      	uxth	r2, r3
 8000dea:	683b      	ldr	r3, [r7, #0]
 8000dec:	80da      	strh	r2, [r3, #6]
	bmp_calib_data->AC5 = (uint16_t) (calib_data[8] << 8) | (calib_data[9]);
 8000dee:	7c3b      	ldrb	r3, [r7, #16]
 8000df0:	021b      	lsls	r3, r3, #8
 8000df2:	b29b      	uxth	r3, r3
 8000df4:	7c7a      	ldrb	r2, [r7, #17]
 8000df6:	4313      	orrs	r3, r2
 8000df8:	b29a      	uxth	r2, r3
 8000dfa:	683b      	ldr	r3, [r7, #0]
 8000dfc:	811a      	strh	r2, [r3, #8]
	bmp_calib_data->AC6 = (uint16_t) (calib_data[10] << 8) | (calib_data[11]);
 8000dfe:	7cbb      	ldrb	r3, [r7, #18]
 8000e00:	021b      	lsls	r3, r3, #8
 8000e02:	b29b      	uxth	r3, r3
 8000e04:	7cfa      	ldrb	r2, [r7, #19]
 8000e06:	4313      	orrs	r3, r2
 8000e08:	b29a      	uxth	r2, r3
 8000e0a:	683b      	ldr	r3, [r7, #0]
 8000e0c:	815a      	strh	r2, [r3, #10]

	bmp_calib_data->B1 = (uint16_t) (calib_data[12] << 8) | (calib_data[13]);
 8000e0e:	7d3b      	ldrb	r3, [r7, #20]
 8000e10:	021b      	lsls	r3, r3, #8
 8000e12:	b29b      	uxth	r3, r3
 8000e14:	7d7a      	ldrb	r2, [r7, #21]
 8000e16:	4313      	orrs	r3, r2
 8000e18:	b29a      	uxth	r2, r3
 8000e1a:	683b      	ldr	r3, [r7, #0]
 8000e1c:	819a      	strh	r2, [r3, #12]
	bmp_calib_data->B2 = (uint16_t) (calib_data[14] << 8) | (calib_data[15]);
 8000e1e:	7dbb      	ldrb	r3, [r7, #22]
 8000e20:	021b      	lsls	r3, r3, #8
 8000e22:	b29b      	uxth	r3, r3
 8000e24:	7dfa      	ldrb	r2, [r7, #23]
 8000e26:	4313      	orrs	r3, r2
 8000e28:	b29a      	uxth	r2, r3
 8000e2a:	683b      	ldr	r3, [r7, #0]
 8000e2c:	81da      	strh	r2, [r3, #14]

	bmp_calib_data->MB = (uint16_t) (calib_data[16] << 8) | (calib_data[17]);
 8000e2e:	7e3b      	ldrb	r3, [r7, #24]
 8000e30:	021b      	lsls	r3, r3, #8
 8000e32:	b29b      	uxth	r3, r3
 8000e34:	7e7a      	ldrb	r2, [r7, #25]
 8000e36:	4313      	orrs	r3, r2
 8000e38:	b29a      	uxth	r2, r3
 8000e3a:	683b      	ldr	r3, [r7, #0]
 8000e3c:	821a      	strh	r2, [r3, #16]
	bmp_calib_data->MC = (uint16_t) (calib_data[18] << 8) | (calib_data[19]);
 8000e3e:	7ebb      	ldrb	r3, [r7, #26]
 8000e40:	021b      	lsls	r3, r3, #8
 8000e42:	b29b      	uxth	r3, r3
 8000e44:	7efa      	ldrb	r2, [r7, #27]
 8000e46:	4313      	orrs	r3, r2
 8000e48:	b29a      	uxth	r2, r3
 8000e4a:	683b      	ldr	r3, [r7, #0]
 8000e4c:	825a      	strh	r2, [r3, #18]
	bmp_calib_data->MD = (uint16_t) (calib_data[20] << 8) | (calib_data[21]);
 8000e4e:	7f3b      	ldrb	r3, [r7, #28]
 8000e50:	021b      	lsls	r3, r3, #8
 8000e52:	b29b      	uxth	r3, r3
 8000e54:	7f7a      	ldrb	r2, [r7, #29]
 8000e56:	4313      	orrs	r3, r2
 8000e58:	b29a      	uxth	r2, r3
 8000e5a:	683b      	ldr	r3, [r7, #0]
 8000e5c:	829a      	strh	r2, [r3, #20]
}
 8000e5e:	bf00      	nop
 8000e60:	3720      	adds	r7, #32
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bd80      	pop	{r7, pc}
	...

08000e68 <get_uncomp_temp>:

uint16_t get_uncomp_temp(I2C_HandleTypeDef *hi2c, bmp_calib_t *bmp_calib_data)
{
 8000e68:	b5b0      	push	{r4, r5, r7, lr}
 8000e6a:	b08e      	sub	sp, #56	@ 0x38
 8000e6c:	af04      	add	r7, sp, #16
 8000e6e:	6078      	str	r0, [r7, #4]
 8000e70:	6039      	str	r1, [r7, #0]
	uint8_t raw_temp_data[2];
	uint8_t temp_write_val = TEMP_WRITE_VAL;
 8000e72:	232e      	movs	r3, #46	@ 0x2e
 8000e74:	73fb      	strb	r3, [r7, #15]

	HAL_I2C_Mem_Write(hi2c,BMP_ADDR,(uint16_t) TEMP_REG_ADDR,1,&temp_write_val,1,1000);
 8000e76:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e7a:	9302      	str	r3, [sp, #8]
 8000e7c:	2301      	movs	r3, #1
 8000e7e:	9301      	str	r3, [sp, #4]
 8000e80:	f107 030f 	add.w	r3, r7, #15
 8000e84:	9300      	str	r3, [sp, #0]
 8000e86:	2301      	movs	r3, #1
 8000e88:	22f4      	movs	r2, #244	@ 0xf4
 8000e8a:	21ee      	movs	r1, #238	@ 0xee
 8000e8c:	6878      	ldr	r0, [r7, #4]
 8000e8e:	f003 f8b7 	bl	8004000 <HAL_I2C_Mem_Write>
	HAL_Delay(5);
 8000e92:	2005      	movs	r0, #5
 8000e94:	f001 faa2 	bl	80023dc <HAL_Delay>
	HAL_I2C_Mem_Read(hi2c,BMP_ADDR,(uint16_t) TEMP_REG_ADDR,1,raw_temp_data,2,1000);
 8000e98:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e9c:	9302      	str	r3, [sp, #8]
 8000e9e:	2302      	movs	r3, #2
 8000ea0:	9301      	str	r3, [sp, #4]
 8000ea2:	f107 0310 	add.w	r3, r7, #16
 8000ea6:	9300      	str	r3, [sp, #0]
 8000ea8:	2301      	movs	r3, #1
 8000eaa:	22f4      	movs	r2, #244	@ 0xf4
 8000eac:	21ee      	movs	r1, #238	@ 0xee
 8000eae:	6878      	ldr	r0, [r7, #4]
 8000eb0:	f003 f9ba 	bl	8004228 <HAL_I2C_Mem_Read>

	uint16_t uncomp_temp = (uint16_t) (raw_temp_data[0] << 8) | raw_temp_data[1];
 8000eb4:	7c3b      	ldrb	r3, [r7, #16]
 8000eb6:	021b      	lsls	r3, r3, #8
 8000eb8:	b29b      	uxth	r3, r3
 8000eba:	7c7a      	ldrb	r2, [r7, #17]
 8000ebc:	4313      	orrs	r3, r2
 8000ebe:	84fb      	strh	r3, [r7, #38]	@ 0x26


	float X1 = ((uncomp_temp-bmp_calib_data->AC6) * (bmp_calib_data->AC5/(pow(2,15))));
 8000ec0:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8000ec2:	683a      	ldr	r2, [r7, #0]
 8000ec4:	8952      	ldrh	r2, [r2, #10]
 8000ec6:	1a9b      	subs	r3, r3, r2
 8000ec8:	4618      	mov	r0, r3
 8000eca:	f7ff fad1 	bl	8000470 <__aeabi_i2d>
 8000ece:	4604      	mov	r4, r0
 8000ed0:	460d      	mov	r5, r1
 8000ed2:	683b      	ldr	r3, [r7, #0]
 8000ed4:	891b      	ldrh	r3, [r3, #8]
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	f7ff faca 	bl	8000470 <__aeabi_i2d>
 8000edc:	f04f 0200 	mov.w	r2, #0
 8000ee0:	4b36      	ldr	r3, [pc, #216]	@ (8000fbc <get_uncomp_temp+0x154>)
 8000ee2:	f7ff fc59 	bl	8000798 <__aeabi_ddiv>
 8000ee6:	4602      	mov	r2, r0
 8000ee8:	460b      	mov	r3, r1
 8000eea:	4620      	mov	r0, r4
 8000eec:	4629      	mov	r1, r5
 8000eee:	f7ff fb29 	bl	8000544 <__aeabi_dmul>
 8000ef2:	4602      	mov	r2, r0
 8000ef4:	460b      	mov	r3, r1
 8000ef6:	4610      	mov	r0, r2
 8000ef8:	4619      	mov	r1, r3
 8000efa:	f7ff fd7d 	bl	80009f8 <__aeabi_d2f>
 8000efe:	4603      	mov	r3, r0
 8000f00:	623b      	str	r3, [r7, #32]
	float X2 = ((bmp_calib_data->MC*(pow(2,11))) / (X1+bmp_calib_data->MD));
 8000f02:	683b      	ldr	r3, [r7, #0]
 8000f04:	8a5b      	ldrh	r3, [r3, #18]
 8000f06:	4618      	mov	r0, r3
 8000f08:	f7ff fab2 	bl	8000470 <__aeabi_i2d>
 8000f0c:	f04f 0200 	mov.w	r2, #0
 8000f10:	4b2b      	ldr	r3, [pc, #172]	@ (8000fc0 <get_uncomp_temp+0x158>)
 8000f12:	f7ff fb17 	bl	8000544 <__aeabi_dmul>
 8000f16:	4602      	mov	r2, r0
 8000f18:	460b      	mov	r3, r1
 8000f1a:	4614      	mov	r4, r2
 8000f1c:	461d      	mov	r5, r3
 8000f1e:	683b      	ldr	r3, [r7, #0]
 8000f20:	8a9b      	ldrh	r3, [r3, #20]
 8000f22:	ee07 3a90 	vmov	s15, r3
 8000f26:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000f2a:	edd7 7a08 	vldr	s15, [r7, #32]
 8000f2e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f32:	ee17 0a90 	vmov	r0, s15
 8000f36:	f7ff faad 	bl	8000494 <__aeabi_f2d>
 8000f3a:	4602      	mov	r2, r0
 8000f3c:	460b      	mov	r3, r1
 8000f3e:	4620      	mov	r0, r4
 8000f40:	4629      	mov	r1, r5
 8000f42:	f7ff fc29 	bl	8000798 <__aeabi_ddiv>
 8000f46:	4602      	mov	r2, r0
 8000f48:	460b      	mov	r3, r1
 8000f4a:	4610      	mov	r0, r2
 8000f4c:	4619      	mov	r1, r3
 8000f4e:	f7ff fd53 	bl	80009f8 <__aeabi_d2f>
 8000f52:	4603      	mov	r3, r0
 8000f54:	61fb      	str	r3, [r7, #28]
	float B5 = X1+X2;
 8000f56:	ed97 7a08 	vldr	s14, [r7, #32]
 8000f5a:	edd7 7a07 	vldr	s15, [r7, #28]
 8000f5e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f62:	edc7 7a06 	vstr	s15, [r7, #24]
	float comp_temp = ((B5+8)/(pow(2,4)))/10.0;
 8000f66:	edd7 7a06 	vldr	s15, [r7, #24]
 8000f6a:	eeb2 7a00 	vmov.f32	s14, #32	@ 0x41000000  8.0
 8000f6e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000f72:	ee17 0a90 	vmov	r0, s15
 8000f76:	f7ff fa8d 	bl	8000494 <__aeabi_f2d>
 8000f7a:	f04f 0200 	mov.w	r2, #0
 8000f7e:	4b11      	ldr	r3, [pc, #68]	@ (8000fc4 <get_uncomp_temp+0x15c>)
 8000f80:	f7ff fc0a 	bl	8000798 <__aeabi_ddiv>
 8000f84:	4602      	mov	r2, r0
 8000f86:	460b      	mov	r3, r1
 8000f88:	4610      	mov	r0, r2
 8000f8a:	4619      	mov	r1, r3
 8000f8c:	f04f 0200 	mov.w	r2, #0
 8000f90:	4b0d      	ldr	r3, [pc, #52]	@ (8000fc8 <get_uncomp_temp+0x160>)
 8000f92:	f7ff fc01 	bl	8000798 <__aeabi_ddiv>
 8000f96:	4602      	mov	r2, r0
 8000f98:	460b      	mov	r3, r1
 8000f9a:	4610      	mov	r0, r2
 8000f9c:	4619      	mov	r1, r3
 8000f9e:	f7ff fd2b 	bl	80009f8 <__aeabi_d2f>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	617b      	str	r3, [r7, #20]
	return comp_temp;
 8000fa6:	edd7 7a05 	vldr	s15, [r7, #20]
 8000faa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000fae:	ee17 3a90 	vmov	r3, s15
 8000fb2:	b29b      	uxth	r3, r3
}
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	3728      	adds	r7, #40	@ 0x28
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bdb0      	pop	{r4, r5, r7, pc}
 8000fbc:	40e00000 	.word	0x40e00000
 8000fc0:	40a00000 	.word	0x40a00000
 8000fc4:	40300000 	.word	0x40300000
 8000fc8:	40240000 	.word	0x40240000

08000fcc <get_uncomp_press>:

uint32_t get_uncomp_press(I2C_HandleTypeDef *hi2c, bmp_calib_t *bmp_calib_data)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b08a      	sub	sp, #40	@ 0x28
 8000fd0:	af04      	add	r7, sp, #16
 8000fd2:	6078      	str	r0, [r7, #4]
 8000fd4:	6039      	str	r1, [r7, #0]
	uint8_t raw_comp_press_data[3];
	uint8_t comp_press_write_data = TEMP_WRITE_VAL + (OSS << 6);
 8000fd6:	232e      	movs	r3, #46	@ 0x2e
 8000fd8:	73fb      	strb	r3, [r7, #15]

	HAL_I2C_Mem_Write(hi2c,BMP_ADDR,(uint16_t) TEMP_REG_ADDR,1,&comp_press_write_data,1,1000);
 8000fda:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000fde:	9302      	str	r3, [sp, #8]
 8000fe0:	2301      	movs	r3, #1
 8000fe2:	9301      	str	r3, [sp, #4]
 8000fe4:	f107 030f 	add.w	r3, r7, #15
 8000fe8:	9300      	str	r3, [sp, #0]
 8000fea:	2301      	movs	r3, #1
 8000fec:	22f4      	movs	r2, #244	@ 0xf4
 8000fee:	21ee      	movs	r1, #238	@ 0xee
 8000ff0:	6878      	ldr	r0, [r7, #4]
 8000ff2:	f003 f805 	bl	8004000 <HAL_I2C_Mem_Write>

	switch (OSS)
	{
		case (0):
			HAL_Delay (5);
 8000ff6:	2005      	movs	r0, #5
 8000ff8:	f001 f9f0 	bl	80023dc <HAL_Delay>
			break;
 8000ffc:	bf00      	nop
		case (3):
			HAL_Delay (26);
			break;
	}

	HAL_I2C_Mem_Read(hi2c,BMP_ADDR,(uint16_t) PRESS_REG_ADDR,1,raw_comp_press_data,3,1000);
 8000ffe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001002:	9302      	str	r3, [sp, #8]
 8001004:	2303      	movs	r3, #3
 8001006:	9301      	str	r3, [sp, #4]
 8001008:	f107 0310 	add.w	r3, r7, #16
 800100c:	9300      	str	r3, [sp, #0]
 800100e:	2301      	movs	r3, #1
 8001010:	22f6      	movs	r2, #246	@ 0xf6
 8001012:	21ee      	movs	r1, #238	@ 0xee
 8001014:	6878      	ldr	r0, [r7, #4]
 8001016:	f003 f907 	bl	8004228 <HAL_I2C_Mem_Read>

	uint32_t uncomp_press = (((raw_comp_press_data[0]<<16)+(raw_comp_press_data[1]<<8)+raw_comp_press_data[2]) >> (8-OSS));
 800101a:	7c3b      	ldrb	r3, [r7, #16]
 800101c:	041a      	lsls	r2, r3, #16
 800101e:	7c7b      	ldrb	r3, [r7, #17]
 8001020:	021b      	lsls	r3, r3, #8
 8001022:	4413      	add	r3, r2
 8001024:	7cba      	ldrb	r2, [r7, #18]
 8001026:	4413      	add	r3, r2
 8001028:	121b      	asrs	r3, r3, #8
 800102a:	617b      	str	r3, [r7, #20]
	return uncomp_press;
 800102c:	697b      	ldr	r3, [r7, #20]

}
 800102e:	4618      	mov	r0, r3
 8001030:	3718      	adds	r7, #24
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}
	...

08001038 <get_comp_temp>:

float get_comp_temp(uint16_t uncomp_temp, bmp_calib_t *bmp_calib_data)
{
 8001038:	b5b0      	push	{r4, r5, r7, lr}
 800103a:	b086      	sub	sp, #24
 800103c:	af00      	add	r7, sp, #0
 800103e:	4603      	mov	r3, r0
 8001040:	6039      	str	r1, [r7, #0]
 8001042:	80fb      	strh	r3, [r7, #6]
	int32_t X1 = ((uncomp_temp-bmp_calib_data->AC6) * (bmp_calib_data->AC5/(pow(2,15))));
 8001044:	88fb      	ldrh	r3, [r7, #6]
 8001046:	683a      	ldr	r2, [r7, #0]
 8001048:	8952      	ldrh	r2, [r2, #10]
 800104a:	1a9b      	subs	r3, r3, r2
 800104c:	4618      	mov	r0, r3
 800104e:	f7ff fa0f 	bl	8000470 <__aeabi_i2d>
 8001052:	4604      	mov	r4, r0
 8001054:	460d      	mov	r5, r1
 8001056:	683b      	ldr	r3, [r7, #0]
 8001058:	891b      	ldrh	r3, [r3, #8]
 800105a:	4618      	mov	r0, r3
 800105c:	f7ff fa08 	bl	8000470 <__aeabi_i2d>
 8001060:	f04f 0200 	mov.w	r2, #0
 8001064:	4b2d      	ldr	r3, [pc, #180]	@ (800111c <get_comp_temp+0xe4>)
 8001066:	f7ff fb97 	bl	8000798 <__aeabi_ddiv>
 800106a:	4602      	mov	r2, r0
 800106c:	460b      	mov	r3, r1
 800106e:	4620      	mov	r0, r4
 8001070:	4629      	mov	r1, r5
 8001072:	f7ff fa67 	bl	8000544 <__aeabi_dmul>
 8001076:	4602      	mov	r2, r0
 8001078:	460b      	mov	r3, r1
 800107a:	4610      	mov	r0, r2
 800107c:	4619      	mov	r1, r3
 800107e:	f7ff fc73 	bl	8000968 <__aeabi_d2iz>
 8001082:	4603      	mov	r3, r0
 8001084:	617b      	str	r3, [r7, #20]
	int32_t X2 = ((bmp_calib_data->MC*(pow(2,11))) / (X1+bmp_calib_data->MD));
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	8a5b      	ldrh	r3, [r3, #18]
 800108a:	4618      	mov	r0, r3
 800108c:	f7ff f9f0 	bl	8000470 <__aeabi_i2d>
 8001090:	f04f 0200 	mov.w	r2, #0
 8001094:	4b22      	ldr	r3, [pc, #136]	@ (8001120 <get_comp_temp+0xe8>)
 8001096:	f7ff fa55 	bl	8000544 <__aeabi_dmul>
 800109a:	4602      	mov	r2, r0
 800109c:	460b      	mov	r3, r1
 800109e:	4614      	mov	r4, r2
 80010a0:	461d      	mov	r5, r3
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	8a9b      	ldrh	r3, [r3, #20]
 80010a6:	461a      	mov	r2, r3
 80010a8:	697b      	ldr	r3, [r7, #20]
 80010aa:	4413      	add	r3, r2
 80010ac:	4618      	mov	r0, r3
 80010ae:	f7ff f9df 	bl	8000470 <__aeabi_i2d>
 80010b2:	4602      	mov	r2, r0
 80010b4:	460b      	mov	r3, r1
 80010b6:	4620      	mov	r0, r4
 80010b8:	4629      	mov	r1, r5
 80010ba:	f7ff fb6d 	bl	8000798 <__aeabi_ddiv>
 80010be:	4602      	mov	r2, r0
 80010c0:	460b      	mov	r3, r1
 80010c2:	4610      	mov	r0, r2
 80010c4:	4619      	mov	r1, r3
 80010c6:	f7ff fc4f 	bl	8000968 <__aeabi_d2iz>
 80010ca:	4603      	mov	r3, r0
 80010cc:	613b      	str	r3, [r7, #16]
	int32_t B5 = X1+X2;
 80010ce:	697a      	ldr	r2, [r7, #20]
 80010d0:	693b      	ldr	r3, [r7, #16]
 80010d2:	4413      	add	r3, r2
 80010d4:	60fb      	str	r3, [r7, #12]
	float comp_temp = ((B5+8)/(pow(2,4)))/10.0;
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	3308      	adds	r3, #8
 80010da:	4618      	mov	r0, r3
 80010dc:	f7ff f9c8 	bl	8000470 <__aeabi_i2d>
 80010e0:	f04f 0200 	mov.w	r2, #0
 80010e4:	4b0f      	ldr	r3, [pc, #60]	@ (8001124 <get_comp_temp+0xec>)
 80010e6:	f7ff fb57 	bl	8000798 <__aeabi_ddiv>
 80010ea:	4602      	mov	r2, r0
 80010ec:	460b      	mov	r3, r1
 80010ee:	4610      	mov	r0, r2
 80010f0:	4619      	mov	r1, r3
 80010f2:	f04f 0200 	mov.w	r2, #0
 80010f6:	4b0c      	ldr	r3, [pc, #48]	@ (8001128 <get_comp_temp+0xf0>)
 80010f8:	f7ff fb4e 	bl	8000798 <__aeabi_ddiv>
 80010fc:	4602      	mov	r2, r0
 80010fe:	460b      	mov	r3, r1
 8001100:	4610      	mov	r0, r2
 8001102:	4619      	mov	r1, r3
 8001104:	f7ff fc78 	bl	80009f8 <__aeabi_d2f>
 8001108:	4603      	mov	r3, r0
 800110a:	60bb      	str	r3, [r7, #8]
	return comp_temp;
 800110c:	68bb      	ldr	r3, [r7, #8]
 800110e:	ee07 3a90 	vmov	s15, r3
}
 8001112:	eeb0 0a67 	vmov.f32	s0, s15
 8001116:	3718      	adds	r7, #24
 8001118:	46bd      	mov	sp, r7
 800111a:	bdb0      	pop	{r4, r5, r7, pc}
 800111c:	40e00000 	.word	0x40e00000
 8001120:	40a00000 	.word	0x40a00000
 8001124:	40300000 	.word	0x40300000
 8001128:	40240000 	.word	0x40240000

0800112c <get_comp_press>:

float get_comp_press(uint16_t uncomp_press, uint16_t uncomp_temp, bmp_calib_t *bmp_calib_data)
{
 800112c:	b5b0      	push	{r4, r5, r7, lr}
 800112e:	b08c      	sub	sp, #48	@ 0x30
 8001130:	af00      	add	r7, sp, #0
 8001132:	4603      	mov	r3, r0
 8001134:	603a      	str	r2, [r7, #0]
 8001136:	80fb      	strh	r3, [r7, #6]
 8001138:	460b      	mov	r3, r1
 800113a:	80bb      	strh	r3, [r7, #4]
	float comp_press = 0.0;
 800113c:	f04f 0300 	mov.w	r3, #0
 8001140:	62fb      	str	r3, [r7, #44]	@ 0x2c
	int32_t X1 = ((uncomp_temp-bmp_calib_data->AC6) * (bmp_calib_data->AC5/(pow(2,15))));
 8001142:	88bb      	ldrh	r3, [r7, #4]
 8001144:	683a      	ldr	r2, [r7, #0]
 8001146:	8952      	ldrh	r2, [r2, #10]
 8001148:	1a9b      	subs	r3, r3, r2
 800114a:	4618      	mov	r0, r3
 800114c:	f7ff f990 	bl	8000470 <__aeabi_i2d>
 8001150:	4604      	mov	r4, r0
 8001152:	460d      	mov	r5, r1
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	891b      	ldrh	r3, [r3, #8]
 8001158:	4618      	mov	r0, r3
 800115a:	f7ff f989 	bl	8000470 <__aeabi_i2d>
 800115e:	f04f 0200 	mov.w	r2, #0
 8001162:	4bc7      	ldr	r3, [pc, #796]	@ (8001480 <get_comp_press+0x354>)
 8001164:	f7ff fb18 	bl	8000798 <__aeabi_ddiv>
 8001168:	4602      	mov	r2, r0
 800116a:	460b      	mov	r3, r1
 800116c:	4620      	mov	r0, r4
 800116e:	4629      	mov	r1, r5
 8001170:	f7ff f9e8 	bl	8000544 <__aeabi_dmul>
 8001174:	4602      	mov	r2, r0
 8001176:	460b      	mov	r3, r1
 8001178:	4610      	mov	r0, r2
 800117a:	4619      	mov	r1, r3
 800117c:	f7ff fbf4 	bl	8000968 <__aeabi_d2iz>
 8001180:	4603      	mov	r3, r0
 8001182:	62bb      	str	r3, [r7, #40]	@ 0x28
	int32_t X2 = ((bmp_calib_data->MC*(pow(2,11))) / (X1+bmp_calib_data->MD));
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	8a5b      	ldrh	r3, [r3, #18]
 8001188:	4618      	mov	r0, r3
 800118a:	f7ff f971 	bl	8000470 <__aeabi_i2d>
 800118e:	f04f 0200 	mov.w	r2, #0
 8001192:	4bbc      	ldr	r3, [pc, #752]	@ (8001484 <get_comp_press+0x358>)
 8001194:	f7ff f9d6 	bl	8000544 <__aeabi_dmul>
 8001198:	4602      	mov	r2, r0
 800119a:	460b      	mov	r3, r1
 800119c:	4614      	mov	r4, r2
 800119e:	461d      	mov	r5, r3
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	8a9b      	ldrh	r3, [r3, #20]
 80011a4:	461a      	mov	r2, r3
 80011a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80011a8:	4413      	add	r3, r2
 80011aa:	4618      	mov	r0, r3
 80011ac:	f7ff f960 	bl	8000470 <__aeabi_i2d>
 80011b0:	4602      	mov	r2, r0
 80011b2:	460b      	mov	r3, r1
 80011b4:	4620      	mov	r0, r4
 80011b6:	4629      	mov	r1, r5
 80011b8:	f7ff faee 	bl	8000798 <__aeabi_ddiv>
 80011bc:	4602      	mov	r2, r0
 80011be:	460b      	mov	r3, r1
 80011c0:	4610      	mov	r0, r2
 80011c2:	4619      	mov	r1, r3
 80011c4:	f7ff fbd0 	bl	8000968 <__aeabi_d2iz>
 80011c8:	4603      	mov	r3, r0
 80011ca:	627b      	str	r3, [r7, #36]	@ 0x24
	int32_t B5 = X1+X2;
 80011cc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80011ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011d0:	4413      	add	r3, r2
 80011d2:	623b      	str	r3, [r7, #32]
	int32_t B6 = B5-4000;
 80011d4:	6a3b      	ldr	r3, [r7, #32]
 80011d6:	f5a3 637a 	sub.w	r3, r3, #4000	@ 0xfa0
 80011da:	61fb      	str	r3, [r7, #28]
	X1 = (bmp_calib_data->B2 * (B6*B6/(pow(2,12))))/(pow(2,11));
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	89db      	ldrh	r3, [r3, #14]
 80011e0:	4618      	mov	r0, r3
 80011e2:	f7ff f945 	bl	8000470 <__aeabi_i2d>
 80011e6:	4604      	mov	r4, r0
 80011e8:	460d      	mov	r5, r1
 80011ea:	69fb      	ldr	r3, [r7, #28]
 80011ec:	fb03 f303 	mul.w	r3, r3, r3
 80011f0:	4618      	mov	r0, r3
 80011f2:	f7ff f93d 	bl	8000470 <__aeabi_i2d>
 80011f6:	f04f 0200 	mov.w	r2, #0
 80011fa:	4ba3      	ldr	r3, [pc, #652]	@ (8001488 <get_comp_press+0x35c>)
 80011fc:	f7ff facc 	bl	8000798 <__aeabi_ddiv>
 8001200:	4602      	mov	r2, r0
 8001202:	460b      	mov	r3, r1
 8001204:	4620      	mov	r0, r4
 8001206:	4629      	mov	r1, r5
 8001208:	f7ff f99c 	bl	8000544 <__aeabi_dmul>
 800120c:	4602      	mov	r2, r0
 800120e:	460b      	mov	r3, r1
 8001210:	4610      	mov	r0, r2
 8001212:	4619      	mov	r1, r3
 8001214:	f04f 0200 	mov.w	r2, #0
 8001218:	4b9a      	ldr	r3, [pc, #616]	@ (8001484 <get_comp_press+0x358>)
 800121a:	f7ff fabd 	bl	8000798 <__aeabi_ddiv>
 800121e:	4602      	mov	r2, r0
 8001220:	460b      	mov	r3, r1
 8001222:	4610      	mov	r0, r2
 8001224:	4619      	mov	r1, r3
 8001226:	f7ff fb9f 	bl	8000968 <__aeabi_d2iz>
 800122a:	4603      	mov	r3, r0
 800122c:	62bb      	str	r3, [r7, #40]	@ 0x28
	X2 = bmp_calib_data->AC2*B6/(pow(2,11));
 800122e:	683b      	ldr	r3, [r7, #0]
 8001230:	885b      	ldrh	r3, [r3, #2]
 8001232:	461a      	mov	r2, r3
 8001234:	69fb      	ldr	r3, [r7, #28]
 8001236:	fb02 f303 	mul.w	r3, r2, r3
 800123a:	4618      	mov	r0, r3
 800123c:	f7ff f918 	bl	8000470 <__aeabi_i2d>
 8001240:	f04f 0200 	mov.w	r2, #0
 8001244:	4b8f      	ldr	r3, [pc, #572]	@ (8001484 <get_comp_press+0x358>)
 8001246:	f7ff faa7 	bl	8000798 <__aeabi_ddiv>
 800124a:	4602      	mov	r2, r0
 800124c:	460b      	mov	r3, r1
 800124e:	4610      	mov	r0, r2
 8001250:	4619      	mov	r1, r3
 8001252:	f7ff fb89 	bl	8000968 <__aeabi_d2iz>
 8001256:	4603      	mov	r3, r0
 8001258:	627b      	str	r3, [r7, #36]	@ 0x24
	int32_t X3 = X1+X2;
 800125a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800125c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800125e:	4413      	add	r3, r2
 8001260:	61bb      	str	r3, [r7, #24]
	int32_t B3 = (((bmp_calib_data->AC1*4+X3)<<OSS)+2)/4;
 8001262:	683b      	ldr	r3, [r7, #0]
 8001264:	881b      	ldrh	r3, [r3, #0]
 8001266:	009a      	lsls	r2, r3, #2
 8001268:	69bb      	ldr	r3, [r7, #24]
 800126a:	4413      	add	r3, r2
 800126c:	3302      	adds	r3, #2
 800126e:	2b00      	cmp	r3, #0
 8001270:	da00      	bge.n	8001274 <get_comp_press+0x148>
 8001272:	3303      	adds	r3, #3
 8001274:	109b      	asrs	r3, r3, #2
 8001276:	617b      	str	r3, [r7, #20]
	X1 = bmp_calib_data->AC3*B6/pow(2,13);
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	889b      	ldrh	r3, [r3, #4]
 800127c:	461a      	mov	r2, r3
 800127e:	69fb      	ldr	r3, [r7, #28]
 8001280:	fb02 f303 	mul.w	r3, r2, r3
 8001284:	4618      	mov	r0, r3
 8001286:	f7ff f8f3 	bl	8000470 <__aeabi_i2d>
 800128a:	f04f 0200 	mov.w	r2, #0
 800128e:	4b7f      	ldr	r3, [pc, #508]	@ (800148c <get_comp_press+0x360>)
 8001290:	f7ff fa82 	bl	8000798 <__aeabi_ddiv>
 8001294:	4602      	mov	r2, r0
 8001296:	460b      	mov	r3, r1
 8001298:	4610      	mov	r0, r2
 800129a:	4619      	mov	r1, r3
 800129c:	f7ff fb64 	bl	8000968 <__aeabi_d2iz>
 80012a0:	4603      	mov	r3, r0
 80012a2:	62bb      	str	r3, [r7, #40]	@ 0x28
	X2 = (bmp_calib_data->B1 * (B6*B6/(pow(2,12))))/(pow(2,16));
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	899b      	ldrh	r3, [r3, #12]
 80012a8:	4618      	mov	r0, r3
 80012aa:	f7ff f8e1 	bl	8000470 <__aeabi_i2d>
 80012ae:	4604      	mov	r4, r0
 80012b0:	460d      	mov	r5, r1
 80012b2:	69fb      	ldr	r3, [r7, #28]
 80012b4:	fb03 f303 	mul.w	r3, r3, r3
 80012b8:	4618      	mov	r0, r3
 80012ba:	f7ff f8d9 	bl	8000470 <__aeabi_i2d>
 80012be:	f04f 0200 	mov.w	r2, #0
 80012c2:	4b71      	ldr	r3, [pc, #452]	@ (8001488 <get_comp_press+0x35c>)
 80012c4:	f7ff fa68 	bl	8000798 <__aeabi_ddiv>
 80012c8:	4602      	mov	r2, r0
 80012ca:	460b      	mov	r3, r1
 80012cc:	4620      	mov	r0, r4
 80012ce:	4629      	mov	r1, r5
 80012d0:	f7ff f938 	bl	8000544 <__aeabi_dmul>
 80012d4:	4602      	mov	r2, r0
 80012d6:	460b      	mov	r3, r1
 80012d8:	4610      	mov	r0, r2
 80012da:	4619      	mov	r1, r3
 80012dc:	f04f 0200 	mov.w	r2, #0
 80012e0:	4b6b      	ldr	r3, [pc, #428]	@ (8001490 <get_comp_press+0x364>)
 80012e2:	f7ff fa59 	bl	8000798 <__aeabi_ddiv>
 80012e6:	4602      	mov	r2, r0
 80012e8:	460b      	mov	r3, r1
 80012ea:	4610      	mov	r0, r2
 80012ec:	4619      	mov	r1, r3
 80012ee:	f7ff fb3b 	bl	8000968 <__aeabi_d2iz>
 80012f2:	4603      	mov	r3, r0
 80012f4:	627b      	str	r3, [r7, #36]	@ 0x24
	X3 = ((X1+X2)+2)/pow(2,2);
 80012f6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80012f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012fa:	4413      	add	r3, r2
 80012fc:	3302      	adds	r3, #2
 80012fe:	4618      	mov	r0, r3
 8001300:	f7ff f8b6 	bl	8000470 <__aeabi_i2d>
 8001304:	f04f 0200 	mov.w	r2, #0
 8001308:	4b62      	ldr	r3, [pc, #392]	@ (8001494 <get_comp_press+0x368>)
 800130a:	f7ff fa45 	bl	8000798 <__aeabi_ddiv>
 800130e:	4602      	mov	r2, r0
 8001310:	460b      	mov	r3, r1
 8001312:	4610      	mov	r0, r2
 8001314:	4619      	mov	r1, r3
 8001316:	f7ff fb27 	bl	8000968 <__aeabi_d2iz>
 800131a:	4603      	mov	r3, r0
 800131c:	61bb      	str	r3, [r7, #24]
	uint32_t B4 = bmp_calib_data->AC4*(uint32_t)(X3+32768)/(pow(2,15));
 800131e:	683b      	ldr	r3, [r7, #0]
 8001320:	88db      	ldrh	r3, [r3, #6]
 8001322:	461a      	mov	r2, r3
 8001324:	69bb      	ldr	r3, [r7, #24]
 8001326:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 800132a:	fb02 f303 	mul.w	r3, r2, r3
 800132e:	4618      	mov	r0, r3
 8001330:	f7ff f88e 	bl	8000450 <__aeabi_ui2d>
 8001334:	f04f 0200 	mov.w	r2, #0
 8001338:	4b51      	ldr	r3, [pc, #324]	@ (8001480 <get_comp_press+0x354>)
 800133a:	f7ff fa2d 	bl	8000798 <__aeabi_ddiv>
 800133e:	4602      	mov	r2, r0
 8001340:	460b      	mov	r3, r1
 8001342:	4610      	mov	r0, r2
 8001344:	4619      	mov	r1, r3
 8001346:	f7ff fb37 	bl	80009b8 <__aeabi_d2uiz>
 800134a:	4603      	mov	r3, r0
 800134c:	613b      	str	r3, [r7, #16]
	int32_t B7 = ((uint32_t)uncomp_press-B3)*(50000>>OSS);
 800134e:	88fa      	ldrh	r2, [r7, #6]
 8001350:	697b      	ldr	r3, [r7, #20]
 8001352:	1ad3      	subs	r3, r2, r3
 8001354:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8001358:	fb02 f303 	mul.w	r3, r2, r3
 800135c:	60fb      	str	r3, [r7, #12]

	if (B7<0x80000000)
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	2b00      	cmp	r3, #0
 8001362:	db0c      	blt.n	800137e <get_comp_press+0x252>
		comp_press = (B7*2)/B4;
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	005b      	lsls	r3, r3, #1
 8001368:	461a      	mov	r2, r3
 800136a:	693b      	ldr	r3, [r7, #16]
 800136c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001370:	ee07 3a90 	vmov	s15, r3
 8001374:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001378:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
 800137c:	e00a      	b.n	8001394 <get_comp_press+0x268>
	else
		comp_press = (B7/B4)*2;
 800137e:	68fa      	ldr	r2, [r7, #12]
 8001380:	693b      	ldr	r3, [r7, #16]
 8001382:	fbb2 f3f3 	udiv	r3, r2, r3
 8001386:	005b      	lsls	r3, r3, #1
 8001388:	ee07 3a90 	vmov	s15, r3
 800138c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001390:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c

	X1 = (comp_press/(pow(2,8)))*(comp_press/(pow(2,8)));
 8001394:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8001396:	f7ff f87d 	bl	8000494 <__aeabi_f2d>
 800139a:	f04f 0200 	mov.w	r2, #0
 800139e:	4b3e      	ldr	r3, [pc, #248]	@ (8001498 <get_comp_press+0x36c>)
 80013a0:	f7ff f9fa 	bl	8000798 <__aeabi_ddiv>
 80013a4:	4602      	mov	r2, r0
 80013a6:	460b      	mov	r3, r1
 80013a8:	4614      	mov	r4, r2
 80013aa:	461d      	mov	r5, r3
 80013ac:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80013ae:	f7ff f871 	bl	8000494 <__aeabi_f2d>
 80013b2:	f04f 0200 	mov.w	r2, #0
 80013b6:	4b38      	ldr	r3, [pc, #224]	@ (8001498 <get_comp_press+0x36c>)
 80013b8:	f7ff f9ee 	bl	8000798 <__aeabi_ddiv>
 80013bc:	4602      	mov	r2, r0
 80013be:	460b      	mov	r3, r1
 80013c0:	4620      	mov	r0, r4
 80013c2:	4629      	mov	r1, r5
 80013c4:	f7ff f8be 	bl	8000544 <__aeabi_dmul>
 80013c8:	4602      	mov	r2, r0
 80013ca:	460b      	mov	r3, r1
 80013cc:	4610      	mov	r0, r2
 80013ce:	4619      	mov	r1, r3
 80013d0:	f7ff faca 	bl	8000968 <__aeabi_d2iz>
 80013d4:	4603      	mov	r3, r0
 80013d6:	62bb      	str	r3, [r7, #40]	@ 0x28
	X1 = (X1*3038)/(pow(2,16));
 80013d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80013da:	f640 32de 	movw	r2, #3038	@ 0xbde
 80013de:	fb02 f303 	mul.w	r3, r2, r3
 80013e2:	4618      	mov	r0, r3
 80013e4:	f7ff f844 	bl	8000470 <__aeabi_i2d>
 80013e8:	f04f 0200 	mov.w	r2, #0
 80013ec:	4b28      	ldr	r3, [pc, #160]	@ (8001490 <get_comp_press+0x364>)
 80013ee:	f7ff f9d3 	bl	8000798 <__aeabi_ddiv>
 80013f2:	4602      	mov	r2, r0
 80013f4:	460b      	mov	r3, r1
 80013f6:	4610      	mov	r0, r2
 80013f8:	4619      	mov	r1, r3
 80013fa:	f7ff fab5 	bl	8000968 <__aeabi_d2iz>
 80013fe:	4603      	mov	r3, r0
 8001400:	62bb      	str	r3, [r7, #40]	@ 0x28
	X2 = (-7357*comp_press)/(pow(2,16));
 8001402:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001406:	ed9f 7a25 	vldr	s14, [pc, #148]	@ 800149c <get_comp_press+0x370>
 800140a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800140e:	ee17 0a90 	vmov	r0, s15
 8001412:	f7ff f83f 	bl	8000494 <__aeabi_f2d>
 8001416:	f04f 0200 	mov.w	r2, #0
 800141a:	4b1d      	ldr	r3, [pc, #116]	@ (8001490 <get_comp_press+0x364>)
 800141c:	f7ff f9bc 	bl	8000798 <__aeabi_ddiv>
 8001420:	4602      	mov	r2, r0
 8001422:	460b      	mov	r3, r1
 8001424:	4610      	mov	r0, r2
 8001426:	4619      	mov	r1, r3
 8001428:	f7ff fa9e 	bl	8000968 <__aeabi_d2iz>
 800142c:	4603      	mov	r3, r0
 800142e:	627b      	str	r3, [r7, #36]	@ 0x24
	comp_press = comp_press + (X1+X2+3791)/(pow(2,4));
 8001430:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8001432:	f7ff f82f 	bl	8000494 <__aeabi_f2d>
 8001436:	4604      	mov	r4, r0
 8001438:	460d      	mov	r5, r1
 800143a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800143c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800143e:	4413      	add	r3, r2
 8001440:	f603 63cf 	addw	r3, r3, #3791	@ 0xecf
 8001444:	4618      	mov	r0, r3
 8001446:	f7ff f813 	bl	8000470 <__aeabi_i2d>
 800144a:	f04f 0200 	mov.w	r2, #0
 800144e:	4b14      	ldr	r3, [pc, #80]	@ (80014a0 <get_comp_press+0x374>)
 8001450:	f7ff f9a2 	bl	8000798 <__aeabi_ddiv>
 8001454:	4602      	mov	r2, r0
 8001456:	460b      	mov	r3, r1
 8001458:	4620      	mov	r0, r4
 800145a:	4629      	mov	r1, r5
 800145c:	f7fe febc 	bl	80001d8 <__adddf3>
 8001460:	4602      	mov	r2, r0
 8001462:	460b      	mov	r3, r1
 8001464:	4610      	mov	r0, r2
 8001466:	4619      	mov	r1, r3
 8001468:	f7ff fac6 	bl	80009f8 <__aeabi_d2f>
 800146c:	4603      	mov	r3, r0
 800146e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	return comp_press;
 8001470:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001472:	ee07 3a90 	vmov	s15, r3
}
 8001476:	eeb0 0a67 	vmov.f32	s0, s15
 800147a:	3730      	adds	r7, #48	@ 0x30
 800147c:	46bd      	mov	sp, r7
 800147e:	bdb0      	pop	{r4, r5, r7, pc}
 8001480:	40e00000 	.word	0x40e00000
 8001484:	40a00000 	.word	0x40a00000
 8001488:	40b00000 	.word	0x40b00000
 800148c:	40c00000 	.word	0x40c00000
 8001490:	40f00000 	.word	0x40f00000
 8001494:	40100000 	.word	0x40100000
 8001498:	40700000 	.word	0x40700000
 800149c:	c5e5e800 	.word	0xc5e5e800
 80014a0:	40300000 	.word	0x40300000

080014a4 <HAL_DelayUs>:
		"TIMEOUT",
		"ERROR",
		"CHECKSUM MISMATCH"
};

static void HAL_DelayUs(TIM_HandleTypeDef *tim, uint16_t us) {
 80014a4:	b480      	push	{r7}
 80014a6:	b083      	sub	sp, #12
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
 80014ac:	460b      	mov	r3, r1
 80014ae:	807b      	strh	r3, [r7, #2]
	__HAL_TIM_SET_COUNTER(tim, 0);
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	2200      	movs	r2, #0
 80014b6:	625a      	str	r2, [r3, #36]	@ 0x24
	while(__HAL_TIM_GET_COUNTER(tim) < us);
 80014b8:	bf00      	nop
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80014c0:	887b      	ldrh	r3, [r7, #2]
 80014c2:	429a      	cmp	r2, r3
 80014c4:	d3f9      	bcc.n	80014ba <HAL_DelayUs+0x16>
}
 80014c6:	bf00      	nop
 80014c8:	bf00      	nop
 80014ca:	370c      	adds	r7, #12
 80014cc:	46bd      	mov	sp, r7
 80014ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d2:	4770      	bx	lr

080014d4 <DHT11_ObserveState>:

static bool DHT11_ObserveState(DHT11_InitTypeDef *DHT11, uint8_t FinalState) {
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b082      	sub	sp, #8
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
 80014dc:	460b      	mov	r3, r1
 80014de:	70fb      	strb	r3, [r7, #3]
	__HAL_TIM_SET_COUNTER(DHT11->_Tim, 0);
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	691b      	ldr	r3, [r3, #16]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	2200      	movs	r2, #0
 80014e8:	625a      	str	r2, [r3, #36]	@ 0x24
	while(__HAL_TIM_GET_COUNTER(DHT11->_Tim) < DHT11_MAX_TIMEOUT) {
 80014ea:	e00e      	b.n	800150a <DHT11_ObserveState+0x36>
		if(HAL_GPIO_ReadPin(DHT11->_GPIOx, DHT11->_Pin) == FinalState) return true;
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	68da      	ldr	r2, [r3, #12]
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	895b      	ldrh	r3, [r3, #10]
 80014f4:	4619      	mov	r1, r3
 80014f6:	4610      	mov	r0, r2
 80014f8:	f002 fcb6 	bl	8003e68 <HAL_GPIO_ReadPin>
 80014fc:	4603      	mov	r3, r0
 80014fe:	461a      	mov	r2, r3
 8001500:	78fb      	ldrb	r3, [r7, #3]
 8001502:	4293      	cmp	r3, r2
 8001504:	d101      	bne.n	800150a <DHT11_ObserveState+0x36>
 8001506:	2301      	movs	r3, #1
 8001508:	e006      	b.n	8001518 <DHT11_ObserveState+0x44>
	while(__HAL_TIM_GET_COUNTER(DHT11->_Tim) < DHT11_MAX_TIMEOUT) {
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	691b      	ldr	r3, [r3, #16]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001512:	2b63      	cmp	r3, #99	@ 0x63
 8001514:	d9ea      	bls.n	80014ec <DHT11_ObserveState+0x18>
	}

	return false;
 8001516:	2300      	movs	r3, #0
}
 8001518:	4618      	mov	r0, r3
 800151a:	3708      	adds	r7, #8
 800151c:	46bd      	mov	sp, r7
 800151e:	bd80      	pop	{r7, pc}

08001520 <DHT11_SetPinMode>:

static void DHT11_SetPinMode(DHT11_InitTypeDef *DHT11, uint8_t MODE) {
 8001520:	b580      	push	{r7, lr}
 8001522:	b088      	sub	sp, #32
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
 8001528:	460b      	mov	r3, r1
 800152a:	70fb      	strb	r3, [r7, #3]
	GPIO_InitTypeDef GPIO_CFG = {
 800152c:	f107 030c 	add.w	r3, r7, #12
 8001530:	2200      	movs	r2, #0
 8001532:	601a      	str	r2, [r3, #0]
 8001534:	605a      	str	r2, [r3, #4]
 8001536:	609a      	str	r2, [r3, #8]
 8001538:	60da      	str	r2, [r3, #12]
 800153a:	611a      	str	r2, [r3, #16]
			.Mode = MODE?GPIO_MODE_INPUT:GPIO_MODE_OUTPUT_PP,
			.Pin = DHT11->_Pin,
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	895b      	ldrh	r3, [r3, #10]
	GPIO_InitTypeDef GPIO_CFG = {
 8001540:	60fb      	str	r3, [r7, #12]
			.Mode = MODE?GPIO_MODE_INPUT:GPIO_MODE_OUTPUT_PP,
 8001542:	78fb      	ldrb	r3, [r7, #3]
 8001544:	2b00      	cmp	r3, #0
 8001546:	bf0c      	ite	eq
 8001548:	2301      	moveq	r3, #1
 800154a:	2300      	movne	r3, #0
 800154c:	b2db      	uxtb	r3, r3
	GPIO_InitTypeDef GPIO_CFG = {
 800154e:	613b      	str	r3, [r7, #16]
			.Pull = GPIO_NOPULL,
			.Speed = GPIO_SPEED_FREQ_LOW
	};

	HAL_GPIO_Init(DHT11->_GPIOx, &GPIO_CFG);
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	68db      	ldr	r3, [r3, #12]
 8001554:	f107 020c 	add.w	r2, r7, #12
 8001558:	4611      	mov	r1, r2
 800155a:	4618      	mov	r0, r3
 800155c:	f002 fb1a 	bl	8003b94 <HAL_GPIO_Init>
}
 8001560:	bf00      	nop
 8001562:	3720      	adds	r7, #32
 8001564:	46bd      	mov	sp, r7
 8001566:	bd80      	pop	{r7, pc}

08001568 <HAL_DHT11_Init>:
void HAL_DHT11_Init(
		DHT11_InitTypeDef *DHT11,
		GPIO_TypeDef *GPIOx,
		uint16_t GPIO_Pin,
		TIM_HandleTypeDef *TIM
) {
 8001568:	b580      	push	{r7, lr}
 800156a:	b084      	sub	sp, #16
 800156c:	af00      	add	r7, sp, #0
 800156e:	60f8      	str	r0, [r7, #12]
 8001570:	60b9      	str	r1, [r7, #8]
 8001572:	603b      	str	r3, [r7, #0]
 8001574:	4613      	mov	r3, r2
 8001576:	80fb      	strh	r3, [r7, #6]
	DHT11->_GPIOx = GPIOx;
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	68ba      	ldr	r2, [r7, #8]
 800157c:	60da      	str	r2, [r3, #12]
	DHT11->_Pin = GPIO_Pin;
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	88fa      	ldrh	r2, [r7, #6]
 8001582:	815a      	strh	r2, [r3, #10]
	DHT11->_Tim = TIM;
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	683a      	ldr	r2, [r7, #0]
 8001588:	611a      	str	r2, [r3, #16]
	DHT11->Temperature = 0.0f;
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	f04f 0200 	mov.w	r2, #0
 8001590:	601a      	str	r2, [r3, #0]
	DHT11->Humidity = 0.0f;
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	f04f 0200 	mov.w	r2, #0
 8001598:	605a      	str	r2, [r3, #4]

	HAL_TIM_Base_Start(DHT11->_Tim);
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	691b      	ldr	r3, [r3, #16]
 800159e:	4618      	mov	r0, r3
 80015a0:	f004 feb2 	bl	8006308 <HAL_TIM_Base_Start>
}
 80015a4:	bf00      	nop
 80015a6:	3710      	adds	r7, #16
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bd80      	pop	{r7, pc}

080015ac <DHT11_ReadData>:

const char* const HAL_DHT11_GetErrorMsg(DHT11_StatusTypeDef Status) {
	return ErrorMsg[Status];
}

static DHT11_StatusTypeDef DHT11_ReadData(DHT11_InitTypeDef *DHT11) {
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b084      	sub	sp, #16
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
	uint8_t Bits = 0;
 80015b4:	2300      	movs	r3, #0
 80015b6:	73fb      	strb	r3, [r7, #15]
	uint8_t Packets[DHT11_MAX_BYTE_PACKETS] = {0};
 80015b8:	2300      	movs	r3, #0
 80015ba:	60bb      	str	r3, [r7, #8]
 80015bc:	2300      	movs	r3, #0
 80015be:	733b      	strb	r3, [r7, #12]
	uint8_t PacketIndex = 0;
 80015c0:	2300      	movs	r3, #0
 80015c2:	73bb      	strb	r3, [r7, #14]

	DHT11_SetPinMode(DHT11, DHT11_PIN_OUTPUT);
 80015c4:	2100      	movs	r1, #0
 80015c6:	6878      	ldr	r0, [r7, #4]
 80015c8:	f7ff ffaa 	bl	8001520 <DHT11_SetPinMode>
	// PULLING the Line to Low and waits for 20ms
	HAL_GPIO_WritePin(DHT11->_GPIOx, DHT11->_Pin, GPIO_PIN_RESET);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	68d8      	ldr	r0, [r3, #12]
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	895b      	ldrh	r3, [r3, #10]
 80015d4:	2200      	movs	r2, #0
 80015d6:	4619      	mov	r1, r3
 80015d8:	f002 fc5e 	bl	8003e98 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 80015dc:	2014      	movs	r0, #20
 80015de:	f000 fefd 	bl	80023dc <HAL_Delay>
	// PULLING the Line to HIGH and waits for 40us
	HAL_GPIO_WritePin(DHT11->_GPIOx, DHT11->_Pin, GPIO_PIN_SET);
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	68d8      	ldr	r0, [r3, #12]
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	895b      	ldrh	r3, [r3, #10]
 80015ea:	2201      	movs	r2, #1
 80015ec:	4619      	mov	r1, r3
 80015ee:	f002 fc53 	bl	8003e98 <HAL_GPIO_WritePin>
	HAL_DelayUs(DHT11->_Tim, 40);
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	691b      	ldr	r3, [r3, #16]
 80015f6:	2128      	movs	r1, #40	@ 0x28
 80015f8:	4618      	mov	r0, r3
 80015fa:	f7ff ff53 	bl	80014a4 <HAL_DelayUs>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015fe:	b672      	cpsid	i
}
 8001600:	bf00      	nop

	__disable_irq();
	DHT11_SetPinMode(DHT11, DHT11_PIN_INPUT);
 8001602:	2101      	movs	r1, #1
 8001604:	6878      	ldr	r0, [r7, #4]
 8001606:	f7ff ff8b 	bl	8001520 <DHT11_SetPinMode>

	// If the Line is still HIGH, that means DHT11 is not responding
	if(HAL_GPIO_ReadPin(DHT11->_GPIOx, DHT11->_Pin) == GPIO_PIN_SET) {
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	68da      	ldr	r2, [r3, #12]
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	895b      	ldrh	r3, [r3, #10]
 8001612:	4619      	mov	r1, r3
 8001614:	4610      	mov	r0, r2
 8001616:	f002 fc27 	bl	8003e68 <HAL_GPIO_ReadPin>
 800161a:	4603      	mov	r3, r0
 800161c:	2b01      	cmp	r3, #1
 800161e:	d103      	bne.n	8001628 <DHT11_ReadData+0x7c>
  __ASM volatile ("cpsie i" : : : "memory");
 8001620:	b662      	cpsie	i
}
 8001622:	bf00      	nop
		__enable_irq();
		return DHT11_ERROR;
 8001624:	2302      	movs	r3, #2
 8001626:	e0ad      	b.n	8001784 <DHT11_ReadData+0x1d8>
	}

	// Now DHT11 have pulled the Line to LOW, we will wait till it PULLS is HIGH
	if(!DHT11_ObserveState(DHT11, GPIO_PIN_SET)) {
 8001628:	2101      	movs	r1, #1
 800162a:	6878      	ldr	r0, [r7, #4]
 800162c:	f7ff ff52 	bl	80014d4 <DHT11_ObserveState>
 8001630:	4603      	mov	r3, r0
 8001632:	f083 0301 	eor.w	r3, r3, #1
 8001636:	b2db      	uxtb	r3, r3
 8001638:	2b00      	cmp	r3, #0
 800163a:	d003      	beq.n	8001644 <DHT11_ReadData+0x98>
  __ASM volatile ("cpsie i" : : : "memory");
 800163c:	b662      	cpsie	i
}
 800163e:	bf00      	nop
		__enable_irq();
		return DHT11_TIMEOUT;
 8001640:	2301      	movs	r3, #1
 8001642:	e09f      	b.n	8001784 <DHT11_ReadData+0x1d8>
	}

	// Now DHT11 have pulled the Line to HIGH, we will wait till it PULLS is to LOW
	// which means the handshake is done
	if(!DHT11_ObserveState(DHT11, GPIO_PIN_RESET)) {
 8001644:	2100      	movs	r1, #0
 8001646:	6878      	ldr	r0, [r7, #4]
 8001648:	f7ff ff44 	bl	80014d4 <DHT11_ObserveState>
 800164c:	4603      	mov	r3, r0
 800164e:	f083 0301 	eor.w	r3, r3, #1
 8001652:	b2db      	uxtb	r3, r3
 8001654:	2b00      	cmp	r3, #0
 8001656:	d05b      	beq.n	8001710 <DHT11_ReadData+0x164>
  __ASM volatile ("cpsie i" : : : "memory");
 8001658:	b662      	cpsie	i
}
 800165a:	bf00      	nop
			__enable_irq();
			return DHT11_TIMEOUT;
 800165c:	2301      	movs	r3, #1
 800165e:	e091      	b.n	8001784 <DHT11_ReadData+0x1d8>
	}

	while(Bits < 40) {
			// DHT11 is now starting to transmit One Bit
			// We will wait till it PULL the Line to HIGH
			if(!DHT11_ObserveState(DHT11, GPIO_PIN_SET)) {
 8001660:	2101      	movs	r1, #1
 8001662:	6878      	ldr	r0, [r7, #4]
 8001664:	f7ff ff36 	bl	80014d4 <DHT11_ObserveState>
 8001668:	4603      	mov	r3, r0
 800166a:	f083 0301 	eor.w	r3, r3, #1
 800166e:	b2db      	uxtb	r3, r3
 8001670:	2b00      	cmp	r3, #0
 8001672:	d003      	beq.n	800167c <DHT11_ReadData+0xd0>
  __ASM volatile ("cpsie i" : : : "memory");
 8001674:	b662      	cpsie	i
}
 8001676:	bf00      	nop
				__enable_irq();
				return DHT11_TIMEOUT;
 8001678:	2301      	movs	r3, #1
 800167a:	e083      	b.n	8001784 <DHT11_ReadData+0x1d8>
			}

			// Now we will just count the us it stays HIGH
			// 28us means 0
			// 70us means 1
			__HAL_TIM_SET_COUNTER(DHT11->_Tim, 0);
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	691b      	ldr	r3, [r3, #16]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	2200      	movs	r2, #0
 8001684:	625a      	str	r2, [r3, #36]	@ 0x24
			while(HAL_GPIO_ReadPin(DHT11->_GPIOx, DHT11->_Pin) == GPIO_PIN_SET) {
 8001686:	e007      	b.n	8001698 <DHT11_ReadData+0xec>
				if(__HAL_TIM_GET_COUNTER(DHT11->_Tim) > DHT11_MAX_TIMEOUT) {
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	691b      	ldr	r3, [r3, #16]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001690:	2b64      	cmp	r3, #100	@ 0x64
 8001692:	d901      	bls.n	8001698 <DHT11_ReadData+0xec>
					return DHT11_TIMEOUT;
 8001694:	2301      	movs	r3, #1
 8001696:	e075      	b.n	8001784 <DHT11_ReadData+0x1d8>
			while(HAL_GPIO_ReadPin(DHT11->_GPIOx, DHT11->_Pin) == GPIO_PIN_SET) {
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	68da      	ldr	r2, [r3, #12]
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	895b      	ldrh	r3, [r3, #10]
 80016a0:	4619      	mov	r1, r3
 80016a2:	4610      	mov	r0, r2
 80016a4:	f002 fbe0 	bl	8003e68 <HAL_GPIO_ReadPin>
 80016a8:	4603      	mov	r3, r0
 80016aa:	2b01      	cmp	r3, #1
 80016ac:	d0ec      	beq.n	8001688 <DHT11_ReadData+0xdc>
				}
			}

			Packets[PacketIndex] = Packets[PacketIndex] << 1;
 80016ae:	7bbb      	ldrb	r3, [r7, #14]
 80016b0:	3310      	adds	r3, #16
 80016b2:	443b      	add	r3, r7
 80016b4:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 80016b8:	7bbb      	ldrb	r3, [r7, #14]
 80016ba:	0052      	lsls	r2, r2, #1
 80016bc:	b2d2      	uxtb	r2, r2
 80016be:	3310      	adds	r3, #16
 80016c0:	443b      	add	r3, r7
 80016c2:	f803 2c08 	strb.w	r2, [r3, #-8]
			Packets[PacketIndex] |= (__HAL_TIM_GET_COUNTER(DHT11->_Tim) > 50); // 50us is good in between
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	691b      	ldr	r3, [r3, #16]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016ce:	2b32      	cmp	r3, #50	@ 0x32
 80016d0:	bf8c      	ite	hi
 80016d2:	2301      	movhi	r3, #1
 80016d4:	2300      	movls	r3, #0
 80016d6:	b2db      	uxtb	r3, r3
 80016d8:	4619      	mov	r1, r3
 80016da:	7bbb      	ldrb	r3, [r7, #14]
 80016dc:	3310      	adds	r3, #16
 80016de:	443b      	add	r3, r7
 80016e0:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 80016e4:	b25a      	sxtb	r2, r3
 80016e6:	b24b      	sxtb	r3, r1
 80016e8:	4313      	orrs	r3, r2
 80016ea:	b25a      	sxtb	r2, r3
 80016ec:	7bbb      	ldrb	r3, [r7, #14]
 80016ee:	b2d2      	uxtb	r2, r2
 80016f0:	3310      	adds	r3, #16
 80016f2:	443b      	add	r3, r7
 80016f4:	f803 2c08 	strb.w	r2, [r3, #-8]
			Bits++;
 80016f8:	7bfb      	ldrb	r3, [r7, #15]
 80016fa:	3301      	adds	r3, #1
 80016fc:	73fb      	strb	r3, [r7, #15]
			if(!(Bits % 8)) PacketIndex++;
 80016fe:	7bfb      	ldrb	r3, [r7, #15]
 8001700:	f003 0307 	and.w	r3, r3, #7
 8001704:	b2db      	uxtb	r3, r3
 8001706:	2b00      	cmp	r3, #0
 8001708:	d102      	bne.n	8001710 <DHT11_ReadData+0x164>
 800170a:	7bbb      	ldrb	r3, [r7, #14]
 800170c:	3301      	adds	r3, #1
 800170e:	73bb      	strb	r3, [r7, #14]
	while(Bits < 40) {
 8001710:	7bfb      	ldrb	r3, [r7, #15]
 8001712:	2b27      	cmp	r3, #39	@ 0x27
 8001714:	d9a4      	bls.n	8001660 <DHT11_ReadData+0xb4>
  __ASM volatile ("cpsie i" : : : "memory");
 8001716:	b662      	cpsie	i
}
 8001718:	bf00      	nop
	}

	__enable_irq();

	// Last 8 bits are Checksum, which is the sum of all the previously transmitted 4 bytes
	if(Packets[4] != (Packets[0] + Packets[1] + Packets[2] + Packets[3])) {
 800171a:	7b3b      	ldrb	r3, [r7, #12]
 800171c:	461a      	mov	r2, r3
 800171e:	7a3b      	ldrb	r3, [r7, #8]
 8001720:	4619      	mov	r1, r3
 8001722:	7a7b      	ldrb	r3, [r7, #9]
 8001724:	440b      	add	r3, r1
 8001726:	7ab9      	ldrb	r1, [r7, #10]
 8001728:	440b      	add	r3, r1
 800172a:	7af9      	ldrb	r1, [r7, #11]
 800172c:	440b      	add	r3, r1
 800172e:	429a      	cmp	r2, r3
 8001730:	d001      	beq.n	8001736 <DHT11_ReadData+0x18a>
		return DHT11_CHECKSUM_MISMATCH;
 8001732:	2303      	movs	r3, #3
 8001734:	e026      	b.n	8001784 <DHT11_ReadData+0x1d8>
	}

	DHT11->Humidity = Packets[0] + (Packets[1] * 0.1f);
 8001736:	7a3b      	ldrb	r3, [r7, #8]
 8001738:	ee07 3a90 	vmov	s15, r3
 800173c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001740:	7a7b      	ldrb	r3, [r7, #9]
 8001742:	ee07 3a90 	vmov	s15, r3
 8001746:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800174a:	eddf 6a10 	vldr	s13, [pc, #64]	@ 800178c <DHT11_ReadData+0x1e0>
 800174e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001752:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	edc3 7a01 	vstr	s15, [r3, #4]
	DHT11->Temperature = Packets[2] + (Packets[3] * 0.1f);
 800175c:	7abb      	ldrb	r3, [r7, #10]
 800175e:	ee07 3a90 	vmov	s15, r3
 8001762:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001766:	7afb      	ldrb	r3, [r7, #11]
 8001768:	ee07 3a90 	vmov	s15, r3
 800176c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001770:	eddf 6a06 	vldr	s13, [pc, #24]	@ 800178c <DHT11_ReadData+0x1e0>
 8001774:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001778:	ee77 7a27 	vadd.f32	s15, s14, s15
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	edc3 7a00 	vstr	s15, [r3]

	return DHT11_OK;
 8001782:	2300      	movs	r3, #0
}
 8001784:	4618      	mov	r0, r3
 8001786:	3710      	adds	r7, #16
 8001788:	46bd      	mov	sp, r7
 800178a:	bd80      	pop	{r7, pc}
 800178c:	3dcccccd 	.word	0x3dcccccd

08001790 <HAL_DHT11_ReadData>:

DHT11_StatusTypeDef HAL_DHT11_ReadData(DHT11_InitTypeDef *DHT11) {
 8001790:	b580      	push	{r7, lr}
 8001792:	b082      	sub	sp, #8
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
	return DHT11->Status = DHT11_ReadData(DHT11);
 8001798:	6878      	ldr	r0, [r7, #4]
 800179a:	f7ff ff07 	bl	80015ac <DHT11_ReadData>
 800179e:	4603      	mov	r3, r0
 80017a0:	461a      	mov	r2, r3
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	721a      	strb	r2, [r3, #8]
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	7a1b      	ldrb	r3, [r3, #8]
}
 80017aa:	4618      	mov	r0, r3
 80017ac:	3708      	adds	r7, #8
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}
	...

080017b4 <HAL_ADC_ConvCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80017b4:	b480      	push	{r7}
 80017b6:	b083      	sub	sp, #12
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
	ldr_voltage = (uint16_t) analog_vals[0];
 80017bc:	4b07      	ldr	r3, [pc, #28]	@ (80017dc <HAL_ADC_ConvCpltCallback+0x28>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	b29a      	uxth	r2, r3
 80017c2:	4b07      	ldr	r3, [pc, #28]	@ (80017e0 <HAL_ADC_ConvCpltCallback+0x2c>)
 80017c4:	801a      	strh	r2, [r3, #0]
	raindrops_voltage = (uint16_t) analog_vals[1];
 80017c6:	4b05      	ldr	r3, [pc, #20]	@ (80017dc <HAL_ADC_ConvCpltCallback+0x28>)
 80017c8:	685b      	ldr	r3, [r3, #4]
 80017ca:	b29a      	uxth	r2, r3
 80017cc:	4b05      	ldr	r3, [pc, #20]	@ (80017e4 <HAL_ADC_ConvCpltCallback+0x30>)
 80017ce:	801a      	strh	r2, [r3, #0]
}
 80017d0:	bf00      	nop
 80017d2:	370c      	adds	r7, #12
 80017d4:	46bd      	mov	sp, r7
 80017d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017da:	4770      	bx	lr
 80017dc:	20000234 	.word	0x20000234
 80017e0:	2000023c 	.word	0x2000023c
 80017e4:	2000023e 	.word	0x2000023e

080017e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b082      	sub	sp, #8
 80017ec:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80017ee:	f000 fd80 	bl	80022f2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80017f2:	f000 f8c1 	bl	8001978 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80017f6:	f000 faa1 	bl	8001d3c <MX_GPIO_Init>
  MX_DMA_Init();
 80017fa:	f000 fa81 	bl	8001d00 <MX_DMA_Init>
  MX_ADC1_Init();
 80017fe:	f000 f91f 	bl	8001a40 <MX_ADC1_Init>
  MX_I2C1_Init();
 8001802:	f000 f991 	bl	8001b28 <MX_I2C1_Init>
  MX_TIM2_Init();
 8001806:	f000 f9fd 	bl	8001c04 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 800180a:	f000 fa49 	bl	8001ca0 <MX_USART1_UART_Init>
  MX_LPTIM2_Init();
 800180e:	f000 f9cb 	bl	8001ba8 <MX_LPTIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_DHT11_Init(&dht, GPIOA, GPIO_PIN_2, &htim2);
 8001812:	4b49      	ldr	r3, [pc, #292]	@ (8001938 <main+0x150>)
 8001814:	2204      	movs	r2, #4
 8001816:	f04f 4190 	mov.w	r1, #1207959552	@ 0x48000000
 800181a:	4848      	ldr	r0, [pc, #288]	@ (800193c <main+0x154>)
 800181c:	f7ff fea4 	bl	8001568 <HAL_DHT11_Init>
  read_calibration_data(&hi2c1,&bmp_calib_data);
 8001820:	4947      	ldr	r1, [pc, #284]	@ (8001940 <main+0x158>)
 8001822:	4848      	ldr	r0, [pc, #288]	@ (8001944 <main+0x15c>)
 8001824:	f7ff fab0 	bl	8000d88 <read_calibration_data>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	u_temp = get_uncomp_temp(&hi2c1,&bmp_calib_data);
 8001828:	4945      	ldr	r1, [pc, #276]	@ (8001940 <main+0x158>)
 800182a:	4846      	ldr	r0, [pc, #280]	@ (8001944 <main+0x15c>)
 800182c:	f7ff fb1c 	bl	8000e68 <get_uncomp_temp>
 8001830:	4603      	mov	r3, r0
 8001832:	461a      	mov	r2, r3
 8001834:	4b44      	ldr	r3, [pc, #272]	@ (8001948 <main+0x160>)
 8001836:	801a      	strh	r2, [r3, #0]
	u_press = get_uncomp_press(&hi2c1,&bmp_calib_data);
 8001838:	4941      	ldr	r1, [pc, #260]	@ (8001940 <main+0x158>)
 800183a:	4842      	ldr	r0, [pc, #264]	@ (8001944 <main+0x15c>)
 800183c:	f7ff fbc6 	bl	8000fcc <get_uncomp_press>
 8001840:	4603      	mov	r3, r0
 8001842:	4a42      	ldr	r2, [pc, #264]	@ (800194c <main+0x164>)
 8001844:	6013      	str	r3, [r2, #0]

	// Read LDR and Raindrop sensor analog voltages
	HAL_ADC_Start_DMA(&hadc1,analog_vals,2);
 8001846:	2202      	movs	r2, #2
 8001848:	4941      	ldr	r1, [pc, #260]	@ (8001950 <main+0x168>)
 800184a:	4842      	ldr	r0, [pc, #264]	@ (8001954 <main+0x16c>)
 800184c:	f001 f904 	bl	8002a58 <HAL_ADC_Start_DMA>

	// Read float values
	temp_buffer.f_val = get_comp_temp(u_temp,&bmp_calib_data);
 8001850:	4b3d      	ldr	r3, [pc, #244]	@ (8001948 <main+0x160>)
 8001852:	881b      	ldrh	r3, [r3, #0]
 8001854:	493a      	ldr	r1, [pc, #232]	@ (8001940 <main+0x158>)
 8001856:	4618      	mov	r0, r3
 8001858:	f7ff fbee 	bl	8001038 <get_comp_temp>
 800185c:	eef0 7a40 	vmov.f32	s15, s0
 8001860:	4b3d      	ldr	r3, [pc, #244]	@ (8001958 <main+0x170>)
 8001862:	edc3 7a00 	vstr	s15, [r3]
	press_buffer.f_val = get_comp_press(u_temp,u_press,&bmp_calib_data);
 8001866:	4b38      	ldr	r3, [pc, #224]	@ (8001948 <main+0x160>)
 8001868:	881b      	ldrh	r3, [r3, #0]
 800186a:	4a38      	ldr	r2, [pc, #224]	@ (800194c <main+0x164>)
 800186c:	6812      	ldr	r2, [r2, #0]
 800186e:	b291      	uxth	r1, r2
 8001870:	4a33      	ldr	r2, [pc, #204]	@ (8001940 <main+0x158>)
 8001872:	4618      	mov	r0, r3
 8001874:	f7ff fc5a 	bl	800112c <get_comp_press>
 8001878:	eef0 7a40 	vmov.f32	s15, s0
 800187c:	4b37      	ldr	r3, [pc, #220]	@ (800195c <main+0x174>)
 800187e:	edc3 7a00 	vstr	s15, [r3]
	HAL_DHT11_ReadData(&dht);
 8001882:	482e      	ldr	r0, [pc, #184]	@ (800193c <main+0x154>)
 8001884:	f7ff ff84 	bl	8001790 <HAL_DHT11_ReadData>
	dht_temp_buffer.f_val = dht.Temperature;
 8001888:	4b2c      	ldr	r3, [pc, #176]	@ (800193c <main+0x154>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	4a34      	ldr	r2, [pc, #208]	@ (8001960 <main+0x178>)
 800188e:	6013      	str	r3, [r2, #0]
	dht_hum_buffer.f_val = dht.Humidity;
 8001890:	4b2a      	ldr	r3, [pc, #168]	@ (800193c <main+0x154>)
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	4a33      	ldr	r2, [pc, #204]	@ (8001964 <main+0x17c>)
 8001896:	6013      	str	r3, [r2, #0]

	// First 16 bytes for float readings
	for(int i=0;i<4;i++)
 8001898:	2300      	movs	r3, #0
 800189a:	607b      	str	r3, [r7, #4]
 800189c:	e023      	b.n	80018e6 <main+0xfe>
	{
		transmit_buffer[i] = temp_buffer.f_val_buffer[i];
 800189e:	4a2e      	ldr	r2, [pc, #184]	@ (8001958 <main+0x170>)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	4413      	add	r3, r2
 80018a4:	7819      	ldrb	r1, [r3, #0]
 80018a6:	4a30      	ldr	r2, [pc, #192]	@ (8001968 <main+0x180>)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	4413      	add	r3, r2
 80018ac:	460a      	mov	r2, r1
 80018ae:	701a      	strb	r2, [r3, #0]
		transmit_buffer[i+4] = press_buffer.f_val_buffer[i];
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	3304      	adds	r3, #4
 80018b4:	4929      	ldr	r1, [pc, #164]	@ (800195c <main+0x174>)
 80018b6:	687a      	ldr	r2, [r7, #4]
 80018b8:	440a      	add	r2, r1
 80018ba:	7811      	ldrb	r1, [r2, #0]
 80018bc:	4a2a      	ldr	r2, [pc, #168]	@ (8001968 <main+0x180>)
 80018be:	54d1      	strb	r1, [r2, r3]
		transmit_buffer[i+8] = dht_temp_buffer.f_val_buffer[i];
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	3308      	adds	r3, #8
 80018c4:	4926      	ldr	r1, [pc, #152]	@ (8001960 <main+0x178>)
 80018c6:	687a      	ldr	r2, [r7, #4]
 80018c8:	440a      	add	r2, r1
 80018ca:	7811      	ldrb	r1, [r2, #0]
 80018cc:	4a26      	ldr	r2, [pc, #152]	@ (8001968 <main+0x180>)
 80018ce:	54d1      	strb	r1, [r2, r3]
		transmit_buffer[i+12] = dht_hum_buffer.f_val_buffer[i];
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	330c      	adds	r3, #12
 80018d4:	4923      	ldr	r1, [pc, #140]	@ (8001964 <main+0x17c>)
 80018d6:	687a      	ldr	r2, [r7, #4]
 80018d8:	440a      	add	r2, r1
 80018da:	7811      	ldrb	r1, [r2, #0]
 80018dc:	4a22      	ldr	r2, [pc, #136]	@ (8001968 <main+0x180>)
 80018de:	54d1      	strb	r1, [r2, r3]
	for(int i=0;i<4;i++)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	3301      	adds	r3, #1
 80018e4:	607b      	str	r3, [r7, #4]
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	2b03      	cmp	r3, #3
 80018ea:	ddd8      	ble.n	800189e <main+0xb6>
	}

	transmit_buffer[16] = (uint8_t) (ldr_voltage & 0x00FF);
 80018ec:	4b1f      	ldr	r3, [pc, #124]	@ (800196c <main+0x184>)
 80018ee:	881b      	ldrh	r3, [r3, #0]
 80018f0:	b2da      	uxtb	r2, r3
 80018f2:	4b1d      	ldr	r3, [pc, #116]	@ (8001968 <main+0x180>)
 80018f4:	741a      	strb	r2, [r3, #16]
	transmit_buffer[17] = (uint8_t) ((ldr_voltage & 0xFF00)>>8);
 80018f6:	4b1d      	ldr	r3, [pc, #116]	@ (800196c <main+0x184>)
 80018f8:	881b      	ldrh	r3, [r3, #0]
 80018fa:	0a1b      	lsrs	r3, r3, #8
 80018fc:	b29b      	uxth	r3, r3
 80018fe:	b2da      	uxtb	r2, r3
 8001900:	4b19      	ldr	r3, [pc, #100]	@ (8001968 <main+0x180>)
 8001902:	745a      	strb	r2, [r3, #17]

	transmit_buffer[18] = (uint8_t) (raindrops_voltage & 0x00FF);
 8001904:	4b1a      	ldr	r3, [pc, #104]	@ (8001970 <main+0x188>)
 8001906:	881b      	ldrh	r3, [r3, #0]
 8001908:	b2da      	uxtb	r2, r3
 800190a:	4b17      	ldr	r3, [pc, #92]	@ (8001968 <main+0x180>)
 800190c:	749a      	strb	r2, [r3, #18]
	transmit_buffer[19] = (uint8_t) ((raindrops_voltage & 0xFF00)>>8);
 800190e:	4b18      	ldr	r3, [pc, #96]	@ (8001970 <main+0x188>)
 8001910:	881b      	ldrh	r3, [r3, #0]
 8001912:	0a1b      	lsrs	r3, r3, #8
 8001914:	b29b      	uxth	r3, r3
 8001916:	b2da      	uxtb	r2, r3
 8001918:	4b13      	ldr	r3, [pc, #76]	@ (8001968 <main+0x180>)
 800191a:	74da      	strb	r2, [r3, #19]

	HAL_UART_Transmit(&huart1,transmit_buffer,20,1000);
 800191c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001920:	2214      	movs	r2, #20
 8001922:	4911      	ldr	r1, [pc, #68]	@ (8001968 <main+0x180>)
 8001924:	4813      	ldr	r0, [pc, #76]	@ (8001974 <main+0x18c>)
 8001926:	f004 ffc3 	bl	80068b0 <HAL_UART_Transmit>

	// Not needed due to sleep
	//HAL_Delay(500);
	HAL_SuspendTick();
 800192a:	f000 fd7b 	bl	8002424 <HAL_SuspendTick>
	HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 800192e:	2101      	movs	r1, #1
 8001930:	2000      	movs	r0, #0
 8001932:	f003 fa81 	bl	8004e38 <HAL_PWR_EnterSLEEPMode>
	u_temp = get_uncomp_temp(&hi2c1,&bmp_calib_data);
 8001936:	e777      	b.n	8001828 <main+0x40>
 8001938:	20000160 	.word	0x20000160
 800193c:	2000025c 	.word	0x2000025c
 8001940:	20000270 	.word	0x20000270
 8001944:	200000d4 	.word	0x200000d4
 8001948:	20000254 	.word	0x20000254
 800194c:	20000258 	.word	0x20000258
 8001950:	20000234 	.word	0x20000234
 8001954:	20000028 	.word	0x20000028
 8001958:	20000288 	.word	0x20000288
 800195c:	2000028c 	.word	0x2000028c
 8001960:	20000290 	.word	0x20000290
 8001964:	20000294 	.word	0x20000294
 8001968:	20000240 	.word	0x20000240
 800196c:	2000023c 	.word	0x2000023c
 8001970:	2000023e 	.word	0x2000023e
 8001974:	200001ac 	.word	0x200001ac

08001978 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b096      	sub	sp, #88	@ 0x58
 800197c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800197e:	f107 0314 	add.w	r3, r7, #20
 8001982:	2244      	movs	r2, #68	@ 0x44
 8001984:	2100      	movs	r1, #0
 8001986:	4618      	mov	r0, r3
 8001988:	f005 fc63 	bl	8007252 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800198c:	463b      	mov	r3, r7
 800198e:	2200      	movs	r2, #0
 8001990:	601a      	str	r2, [r3, #0]
 8001992:	605a      	str	r2, [r3, #4]
 8001994:	609a      	str	r2, [r3, #8]
 8001996:	60da      	str	r2, [r3, #12]
 8001998:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800199a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800199e:	f003 fa8d 	bl	8004ebc <HAL_PWREx_ControlVoltageScaling>
 80019a2:	4603      	mov	r3, r0
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d001      	beq.n	80019ac <SystemClock_Config+0x34>
  {
    Error_Handler();
 80019a8:	f000 fa5c 	bl	8001e64 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80019ac:	f003 fa34 	bl	8004e18 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80019b0:	4b22      	ldr	r3, [pc, #136]	@ (8001a3c <SystemClock_Config+0xc4>)
 80019b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80019b6:	4a21      	ldr	r2, [pc, #132]	@ (8001a3c <SystemClock_Config+0xc4>)
 80019b8:	f023 0318 	bic.w	r3, r3, #24
 80019bc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_LSE
 80019c0:	231c      	movs	r3, #28
 80019c2:	617b      	str	r3, [r7, #20]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80019c4:	2301      	movs	r3, #1
 80019c6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80019c8:	2301      	movs	r3, #1
 80019ca:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80019cc:	2301      	movs	r3, #1
 80019ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80019d0:	2300      	movs	r3, #0
 80019d2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80019d4:	2360      	movs	r3, #96	@ 0x60
 80019d6:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80019d8:	2302      	movs	r3, #2
 80019da:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80019dc:	2301      	movs	r3, #1
 80019de:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80019e0:	2301      	movs	r3, #1
 80019e2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 80019e4:	2310      	movs	r3, #16
 80019e6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80019e8:	2307      	movs	r3, #7
 80019ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80019ec:	2302      	movs	r3, #2
 80019ee:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80019f0:	2302      	movs	r3, #2
 80019f2:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80019f4:	f107 0314 	add.w	r3, r7, #20
 80019f8:	4618      	mov	r0, r3
 80019fa:	f003 fafd 	bl	8004ff8 <HAL_RCC_OscConfig>
 80019fe:	4603      	mov	r3, r0
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d001      	beq.n	8001a08 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8001a04:	f000 fa2e 	bl	8001e64 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a08:	230f      	movs	r3, #15
 8001a0a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a0c:	2303      	movs	r3, #3
 8001a0e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a10:	2300      	movs	r3, #0
 8001a12:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001a14:	2300      	movs	r3, #0
 8001a16:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001a1c:	463b      	mov	r3, r7
 8001a1e:	2101      	movs	r1, #1
 8001a20:	4618      	mov	r0, r3
 8001a22:	f003 fefd 	bl	8005820 <HAL_RCC_ClockConfig>
 8001a26:	4603      	mov	r3, r0
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d001      	beq.n	8001a30 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8001a2c:	f000 fa1a 	bl	8001e64 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8001a30:	f004 fb10 	bl	8006054 <HAL_RCCEx_EnableMSIPLLMode>
}
 8001a34:	bf00      	nop
 8001a36:	3758      	adds	r7, #88	@ 0x58
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	bd80      	pop	{r7, pc}
 8001a3c:	40021000 	.word	0x40021000

08001a40 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b086      	sub	sp, #24
 8001a44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001a46:	463b      	mov	r3, r7
 8001a48:	2200      	movs	r2, #0
 8001a4a:	601a      	str	r2, [r3, #0]
 8001a4c:	605a      	str	r2, [r3, #4]
 8001a4e:	609a      	str	r2, [r3, #8]
 8001a50:	60da      	str	r2, [r3, #12]
 8001a52:	611a      	str	r2, [r3, #16]
 8001a54:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001a56:	4b30      	ldr	r3, [pc, #192]	@ (8001b18 <MX_ADC1_Init+0xd8>)
 8001a58:	4a30      	ldr	r2, [pc, #192]	@ (8001b1c <MX_ADC1_Init+0xdc>)
 8001a5a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001a5c:	4b2e      	ldr	r3, [pc, #184]	@ (8001b18 <MX_ADC1_Init+0xd8>)
 8001a5e:	2200      	movs	r2, #0
 8001a60:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001a62:	4b2d      	ldr	r3, [pc, #180]	@ (8001b18 <MX_ADC1_Init+0xd8>)
 8001a64:	2200      	movs	r2, #0
 8001a66:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001a68:	4b2b      	ldr	r3, [pc, #172]	@ (8001b18 <MX_ADC1_Init+0xd8>)
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001a6e:	4b2a      	ldr	r3, [pc, #168]	@ (8001b18 <MX_ADC1_Init+0xd8>)
 8001a70:	2201      	movs	r2, #1
 8001a72:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001a74:	4b28      	ldr	r3, [pc, #160]	@ (8001b18 <MX_ADC1_Init+0xd8>)
 8001a76:	2204      	movs	r2, #4
 8001a78:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001a7a:	4b27      	ldr	r3, [pc, #156]	@ (8001b18 <MX_ADC1_Init+0xd8>)
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001a80:	4b25      	ldr	r3, [pc, #148]	@ (8001b18 <MX_ADC1_Init+0xd8>)
 8001a82:	2200      	movs	r2, #0
 8001a84:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 2;
 8001a86:	4b24      	ldr	r3, [pc, #144]	@ (8001b18 <MX_ADC1_Init+0xd8>)
 8001a88:	2202      	movs	r2, #2
 8001a8a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001a8c:	4b22      	ldr	r3, [pc, #136]	@ (8001b18 <MX_ADC1_Init+0xd8>)
 8001a8e:	2200      	movs	r2, #0
 8001a90:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001a94:	4b20      	ldr	r3, [pc, #128]	@ (8001b18 <MX_ADC1_Init+0xd8>)
 8001a96:	2200      	movs	r2, #0
 8001a98:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001a9a:	4b1f      	ldr	r3, [pc, #124]	@ (8001b18 <MX_ADC1_Init+0xd8>)
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001aa0:	4b1d      	ldr	r3, [pc, #116]	@ (8001b18 <MX_ADC1_Init+0xd8>)
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001aa8:	4b1b      	ldr	r3, [pc, #108]	@ (8001b18 <MX_ADC1_Init+0xd8>)
 8001aaa:	2200      	movs	r2, #0
 8001aac:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001aae:	4b1a      	ldr	r3, [pc, #104]	@ (8001b18 <MX_ADC1_Init+0xd8>)
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001ab6:	4818      	ldr	r0, [pc, #96]	@ (8001b18 <MX_ADC1_Init+0xd8>)
 8001ab8:	f000 fe8c 	bl	80027d4 <HAL_ADC_Init>
 8001abc:	4603      	mov	r3, r0
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d001      	beq.n	8001ac6 <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 8001ac2:	f000 f9cf 	bl	8001e64 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001ac6:	4b16      	ldr	r3, [pc, #88]	@ (8001b20 <MX_ADC1_Init+0xe0>)
 8001ac8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001aca:	2306      	movs	r3, #6
 8001acc:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001ad2:	237f      	movs	r3, #127	@ 0x7f
 8001ad4:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001ad6:	2304      	movs	r3, #4
 8001ad8:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001ada:	2300      	movs	r3, #0
 8001adc:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001ade:	463b      	mov	r3, r7
 8001ae0:	4619      	mov	r1, r3
 8001ae2:	480d      	ldr	r0, [pc, #52]	@ (8001b18 <MX_ADC1_Init+0xd8>)
 8001ae4:	f001 f850 	bl	8002b88 <HAL_ADC_ConfigChannel>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d001      	beq.n	8001af2 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8001aee:	f000 f9b9 	bl	8001e64 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001af2:	4b0c      	ldr	r3, [pc, #48]	@ (8001b24 <MX_ADC1_Init+0xe4>)
 8001af4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001af6:	230c      	movs	r3, #12
 8001af8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001afa:	463b      	mov	r3, r7
 8001afc:	4619      	mov	r1, r3
 8001afe:	4806      	ldr	r0, [pc, #24]	@ (8001b18 <MX_ADC1_Init+0xd8>)
 8001b00:	f001 f842 	bl	8002b88 <HAL_ADC_ConfigChannel>
 8001b04:	4603      	mov	r3, r0
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d001      	beq.n	8001b0e <MX_ADC1_Init+0xce>
  {
    Error_Handler();
 8001b0a:	f000 f9ab 	bl	8001e64 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001b0e:	bf00      	nop
 8001b10:	3718      	adds	r7, #24
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bd80      	pop	{r7, pc}
 8001b16:	bf00      	nop
 8001b18:	20000028 	.word	0x20000028
 8001b1c:	50040000 	.word	0x50040000
 8001b20:	14f00020 	.word	0x14f00020
 8001b24:	19200040 	.word	0x19200040

08001b28 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001b2c:	4b1b      	ldr	r3, [pc, #108]	@ (8001b9c <MX_I2C1_Init+0x74>)
 8001b2e:	4a1c      	ldr	r2, [pc, #112]	@ (8001ba0 <MX_I2C1_Init+0x78>)
 8001b30:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 8001b32:	4b1a      	ldr	r3, [pc, #104]	@ (8001b9c <MX_I2C1_Init+0x74>)
 8001b34:	4a1b      	ldr	r2, [pc, #108]	@ (8001ba4 <MX_I2C1_Init+0x7c>)
 8001b36:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001b38:	4b18      	ldr	r3, [pc, #96]	@ (8001b9c <MX_I2C1_Init+0x74>)
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001b3e:	4b17      	ldr	r3, [pc, #92]	@ (8001b9c <MX_I2C1_Init+0x74>)
 8001b40:	2201      	movs	r2, #1
 8001b42:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001b44:	4b15      	ldr	r3, [pc, #84]	@ (8001b9c <MX_I2C1_Init+0x74>)
 8001b46:	2200      	movs	r2, #0
 8001b48:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001b4a:	4b14      	ldr	r3, [pc, #80]	@ (8001b9c <MX_I2C1_Init+0x74>)
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001b50:	4b12      	ldr	r3, [pc, #72]	@ (8001b9c <MX_I2C1_Init+0x74>)
 8001b52:	2200      	movs	r2, #0
 8001b54:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001b56:	4b11      	ldr	r3, [pc, #68]	@ (8001b9c <MX_I2C1_Init+0x74>)
 8001b58:	2200      	movs	r2, #0
 8001b5a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001b5c:	4b0f      	ldr	r3, [pc, #60]	@ (8001b9c <MX_I2C1_Init+0x74>)
 8001b5e:	2200      	movs	r2, #0
 8001b60:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001b62:	480e      	ldr	r0, [pc, #56]	@ (8001b9c <MX_I2C1_Init+0x74>)
 8001b64:	f002 f9b0 	bl	8003ec8 <HAL_I2C_Init>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d001      	beq.n	8001b72 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001b6e:	f000 f979 	bl	8001e64 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001b72:	2100      	movs	r1, #0
 8001b74:	4809      	ldr	r0, [pc, #36]	@ (8001b9c <MX_I2C1_Init+0x74>)
 8001b76:	f002 ff33 	bl	80049e0 <HAL_I2CEx_ConfigAnalogFilter>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d001      	beq.n	8001b84 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001b80:	f000 f970 	bl	8001e64 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001b84:	2100      	movs	r1, #0
 8001b86:	4805      	ldr	r0, [pc, #20]	@ (8001b9c <MX_I2C1_Init+0x74>)
 8001b88:	f002 ff75 	bl	8004a76 <HAL_I2CEx_ConfigDigitalFilter>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d001      	beq.n	8001b96 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001b92:	f000 f967 	bl	8001e64 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001b96:	bf00      	nop
 8001b98:	bd80      	pop	{r7, pc}
 8001b9a:	bf00      	nop
 8001b9c:	200000d4 	.word	0x200000d4
 8001ba0:	40005400 	.word	0x40005400
 8001ba4:	00707cbb 	.word	0x00707cbb

08001ba8 <MX_LPTIM2_Init>:
  * @brief LPTIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPTIM2_Init(void)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	af00      	add	r7, sp, #0
  /* USER CODE END LPTIM2_Init 0 */

  /* USER CODE BEGIN LPTIM2_Init 1 */

  /* USER CODE END LPTIM2_Init 1 */
  hlptim2.Instance = LPTIM2;
 8001bac:	4b13      	ldr	r3, [pc, #76]	@ (8001bfc <MX_LPTIM2_Init+0x54>)
 8001bae:	4a14      	ldr	r2, [pc, #80]	@ (8001c00 <MX_LPTIM2_Init+0x58>)
 8001bb0:	601a      	str	r2, [r3, #0]
  hlptim2.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 8001bb2:	4b12      	ldr	r3, [pc, #72]	@ (8001bfc <MX_LPTIM2_Init+0x54>)
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	605a      	str	r2, [r3, #4]
  hlptim2.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV8;
 8001bb8:	4b10      	ldr	r3, [pc, #64]	@ (8001bfc <MX_LPTIM2_Init+0x54>)
 8001bba:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 8001bbe:	609a      	str	r2, [r3, #8]
  hlptim2.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 8001bc0:	4b0e      	ldr	r3, [pc, #56]	@ (8001bfc <MX_LPTIM2_Init+0x54>)
 8001bc2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001bc6:	615a      	str	r2, [r3, #20]
  hlptim2.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 8001bc8:	4b0c      	ldr	r3, [pc, #48]	@ (8001bfc <MX_LPTIM2_Init+0x54>)
 8001bca:	2200      	movs	r2, #0
 8001bcc:	621a      	str	r2, [r3, #32]
  hlptim2.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 8001bce:	4b0b      	ldr	r3, [pc, #44]	@ (8001bfc <MX_LPTIM2_Init+0x54>)
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	625a      	str	r2, [r3, #36]	@ 0x24
  hlptim2.Init.CounterSource = LPTIM_COUNTERSOURCE_INTERNAL;
 8001bd4:	4b09      	ldr	r3, [pc, #36]	@ (8001bfc <MX_LPTIM2_Init+0x54>)
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	629a      	str	r2, [r3, #40]	@ 0x28
  hlptim2.Init.Input1Source = LPTIM_INPUT1SOURCE_GPIO;
 8001bda:	4b08      	ldr	r3, [pc, #32]	@ (8001bfc <MX_LPTIM2_Init+0x54>)
 8001bdc:	2200      	movs	r2, #0
 8001bde:	62da      	str	r2, [r3, #44]	@ 0x2c
  hlptim2.Init.Input2Source = LPTIM_INPUT2SOURCE_GPIO;
 8001be0:	4b06      	ldr	r3, [pc, #24]	@ (8001bfc <MX_LPTIM2_Init+0x54>)
 8001be2:	2200      	movs	r2, #0
 8001be4:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_LPTIM_Init(&hlptim2) != HAL_OK)
 8001be6:	4805      	ldr	r0, [pc, #20]	@ (8001bfc <MX_LPTIM2_Init+0x54>)
 8001be8:	f002 ff92 	bl	8004b10 <HAL_LPTIM_Init>
 8001bec:	4603      	mov	r3, r0
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d001      	beq.n	8001bf6 <MX_LPTIM2_Init+0x4e>
  {
    Error_Handler();
 8001bf2:	f000 f937 	bl	8001e64 <Error_Handler>
  }
  /* USER CODE BEGIN LPTIM2_Init 2 */

  /* USER CODE END LPTIM2_Init 2 */

}
 8001bf6:	bf00      	nop
 8001bf8:	bd80      	pop	{r7, pc}
 8001bfa:	bf00      	nop
 8001bfc:	20000128 	.word	0x20000128
 8001c00:	40009400 	.word	0x40009400

08001c04 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b088      	sub	sp, #32
 8001c08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c0a:	f107 0310 	add.w	r3, r7, #16
 8001c0e:	2200      	movs	r2, #0
 8001c10:	601a      	str	r2, [r3, #0]
 8001c12:	605a      	str	r2, [r3, #4]
 8001c14:	609a      	str	r2, [r3, #8]
 8001c16:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c18:	1d3b      	adds	r3, r7, #4
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	601a      	str	r2, [r3, #0]
 8001c1e:	605a      	str	r2, [r3, #4]
 8001c20:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001c22:	4b1e      	ldr	r3, [pc, #120]	@ (8001c9c <MX_TIM2_Init+0x98>)
 8001c24:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001c28:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 32;
 8001c2a:	4b1c      	ldr	r3, [pc, #112]	@ (8001c9c <MX_TIM2_Init+0x98>)
 8001c2c:	2220      	movs	r2, #32
 8001c2e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c30:	4b1a      	ldr	r3, [pc, #104]	@ (8001c9c <MX_TIM2_Init+0x98>)
 8001c32:	2200      	movs	r2, #0
 8001c34:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001c36:	4b19      	ldr	r3, [pc, #100]	@ (8001c9c <MX_TIM2_Init+0x98>)
 8001c38:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001c3c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c3e:	4b17      	ldr	r3, [pc, #92]	@ (8001c9c <MX_TIM2_Init+0x98>)
 8001c40:	2200      	movs	r2, #0
 8001c42:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c44:	4b15      	ldr	r3, [pc, #84]	@ (8001c9c <MX_TIM2_Init+0x98>)
 8001c46:	2200      	movs	r2, #0
 8001c48:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001c4a:	4814      	ldr	r0, [pc, #80]	@ (8001c9c <MX_TIM2_Init+0x98>)
 8001c4c:	f004 fb04 	bl	8006258 <HAL_TIM_Base_Init>
 8001c50:	4603      	mov	r3, r0
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d001      	beq.n	8001c5a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001c56:	f000 f905 	bl	8001e64 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c5a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001c5e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001c60:	f107 0310 	add.w	r3, r7, #16
 8001c64:	4619      	mov	r1, r3
 8001c66:	480d      	ldr	r0, [pc, #52]	@ (8001c9c <MX_TIM2_Init+0x98>)
 8001c68:	f004 fb9a 	bl	80063a0 <HAL_TIM_ConfigClockSource>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d001      	beq.n	8001c76 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001c72:	f000 f8f7 	bl	8001e64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c76:	2300      	movs	r3, #0
 8001c78:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001c7e:	1d3b      	adds	r3, r7, #4
 8001c80:	4619      	mov	r1, r3
 8001c82:	4806      	ldr	r0, [pc, #24]	@ (8001c9c <MX_TIM2_Init+0x98>)
 8001c84:	f004 fd60 	bl	8006748 <HAL_TIMEx_MasterConfigSynchronization>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d001      	beq.n	8001c92 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001c8e:	f000 f8e9 	bl	8001e64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001c92:	bf00      	nop
 8001c94:	3720      	adds	r7, #32
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd80      	pop	{r7, pc}
 8001c9a:	bf00      	nop
 8001c9c:	20000160 	.word	0x20000160

08001ca0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001ca4:	4b14      	ldr	r3, [pc, #80]	@ (8001cf8 <MX_USART1_UART_Init+0x58>)
 8001ca6:	4a15      	ldr	r2, [pc, #84]	@ (8001cfc <MX_USART1_UART_Init+0x5c>)
 8001ca8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001caa:	4b13      	ldr	r3, [pc, #76]	@ (8001cf8 <MX_USART1_UART_Init+0x58>)
 8001cac:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001cb0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001cb2:	4b11      	ldr	r3, [pc, #68]	@ (8001cf8 <MX_USART1_UART_Init+0x58>)
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001cb8:	4b0f      	ldr	r3, [pc, #60]	@ (8001cf8 <MX_USART1_UART_Init+0x58>)
 8001cba:	2200      	movs	r2, #0
 8001cbc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001cbe:	4b0e      	ldr	r3, [pc, #56]	@ (8001cf8 <MX_USART1_UART_Init+0x58>)
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX;
 8001cc4:	4b0c      	ldr	r3, [pc, #48]	@ (8001cf8 <MX_USART1_UART_Init+0x58>)
 8001cc6:	2208      	movs	r2, #8
 8001cc8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001cca:	4b0b      	ldr	r3, [pc, #44]	@ (8001cf8 <MX_USART1_UART_Init+0x58>)
 8001ccc:	2200      	movs	r2, #0
 8001cce:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001cd0:	4b09      	ldr	r3, [pc, #36]	@ (8001cf8 <MX_USART1_UART_Init+0x58>)
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001cd6:	4b08      	ldr	r3, [pc, #32]	@ (8001cf8 <MX_USART1_UART_Init+0x58>)
 8001cd8:	2200      	movs	r2, #0
 8001cda:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001cdc:	4b06      	ldr	r3, [pc, #24]	@ (8001cf8 <MX_USART1_UART_Init+0x58>)
 8001cde:	2200      	movs	r2, #0
 8001ce0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001ce2:	4805      	ldr	r0, [pc, #20]	@ (8001cf8 <MX_USART1_UART_Init+0x58>)
 8001ce4:	f004 fd96 	bl	8006814 <HAL_UART_Init>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d001      	beq.n	8001cf2 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001cee:	f000 f8b9 	bl	8001e64 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001cf2:	bf00      	nop
 8001cf4:	bd80      	pop	{r7, pc}
 8001cf6:	bf00      	nop
 8001cf8:	200001ac 	.word	0x200001ac
 8001cfc:	40013800 	.word	0x40013800

08001d00 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b082      	sub	sp, #8
 8001d04:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001d06:	4b0c      	ldr	r3, [pc, #48]	@ (8001d38 <MX_DMA_Init+0x38>)
 8001d08:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001d0a:	4a0b      	ldr	r2, [pc, #44]	@ (8001d38 <MX_DMA_Init+0x38>)
 8001d0c:	f043 0301 	orr.w	r3, r3, #1
 8001d10:	6493      	str	r3, [r2, #72]	@ 0x48
 8001d12:	4b09      	ldr	r3, [pc, #36]	@ (8001d38 <MX_DMA_Init+0x38>)
 8001d14:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001d16:	f003 0301 	and.w	r3, r3, #1
 8001d1a:	607b      	str	r3, [r7, #4]
 8001d1c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001d1e:	2200      	movs	r2, #0
 8001d20:	2100      	movs	r1, #0
 8001d22:	200b      	movs	r0, #11
 8001d24:	f001 fd07 	bl	8003736 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001d28:	200b      	movs	r0, #11
 8001d2a:	f001 fd20 	bl	800376e <HAL_NVIC_EnableIRQ>

}
 8001d2e:	bf00      	nop
 8001d30:	3708      	adds	r7, #8
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bd80      	pop	{r7, pc}
 8001d36:	bf00      	nop
 8001d38:	40021000 	.word	0x40021000

08001d3c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b08a      	sub	sp, #40	@ 0x28
 8001d40:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d42:	f107 0314 	add.w	r3, r7, #20
 8001d46:	2200      	movs	r2, #0
 8001d48:	601a      	str	r2, [r3, #0]
 8001d4a:	605a      	str	r2, [r3, #4]
 8001d4c:	609a      	str	r2, [r3, #8]
 8001d4e:	60da      	str	r2, [r3, #12]
 8001d50:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d52:	4b41      	ldr	r3, [pc, #260]	@ (8001e58 <MX_GPIO_Init+0x11c>)
 8001d54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d56:	4a40      	ldr	r2, [pc, #256]	@ (8001e58 <MX_GPIO_Init+0x11c>)
 8001d58:	f043 0304 	orr.w	r3, r3, #4
 8001d5c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001d5e:	4b3e      	ldr	r3, [pc, #248]	@ (8001e58 <MX_GPIO_Init+0x11c>)
 8001d60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d62:	f003 0304 	and.w	r3, r3, #4
 8001d66:	613b      	str	r3, [r7, #16]
 8001d68:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d6a:	4b3b      	ldr	r3, [pc, #236]	@ (8001e58 <MX_GPIO_Init+0x11c>)
 8001d6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d6e:	4a3a      	ldr	r2, [pc, #232]	@ (8001e58 <MX_GPIO_Init+0x11c>)
 8001d70:	f043 0301 	orr.w	r3, r3, #1
 8001d74:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001d76:	4b38      	ldr	r3, [pc, #224]	@ (8001e58 <MX_GPIO_Init+0x11c>)
 8001d78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d7a:	f003 0301 	and.w	r3, r3, #1
 8001d7e:	60fb      	str	r3, [r7, #12]
 8001d80:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d82:	4b35      	ldr	r3, [pc, #212]	@ (8001e58 <MX_GPIO_Init+0x11c>)
 8001d84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d86:	4a34      	ldr	r2, [pc, #208]	@ (8001e58 <MX_GPIO_Init+0x11c>)
 8001d88:	f043 0302 	orr.w	r3, r3, #2
 8001d8c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001d8e:	4b32      	ldr	r3, [pc, #200]	@ (8001e58 <MX_GPIO_Init+0x11c>)
 8001d90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d92:	f003 0302 	and.w	r3, r3, #2
 8001d96:	60bb      	str	r3, [r7, #8]
 8001d98:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001d9a:	4b2f      	ldr	r3, [pc, #188]	@ (8001e58 <MX_GPIO_Init+0x11c>)
 8001d9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d9e:	4a2e      	ldr	r2, [pc, #184]	@ (8001e58 <MX_GPIO_Init+0x11c>)
 8001da0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001da4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001da6:	4b2c      	ldr	r3, [pc, #176]	@ (8001e58 <MX_GPIO_Init+0x11c>)
 8001da8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001daa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001dae:	607b      	str	r3, [r7, #4]
 8001db0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);
 8001db2:	2200      	movs	r2, #0
 8001db4:	2104      	movs	r1, #4
 8001db6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001dba:	f002 f86d 	bl	8003e98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	2108      	movs	r1, #8
 8001dc2:	4826      	ldr	r0, [pc, #152]	@ (8001e5c <MX_GPIO_Init+0x120>)
 8001dc4:	f002 f868 	bl	8003e98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001dc8:	2304      	movs	r3, #4
 8001dca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001dcc:	2301      	movs	r3, #1
 8001dce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dd8:	f107 0314 	add.w	r3, r7, #20
 8001ddc:	4619      	mov	r1, r3
 8001dde:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001de2:	f001 fed7 	bl	8003b94 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA3 PA4 PA5 PA6
                           PA7 PA8 PA11 PA12
                           PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 8001de6:	f649 13f8 	movw	r3, #39416	@ 0x99f8
 8001dea:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001dec:	2303      	movs	r3, #3
 8001dee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001df0:	2300      	movs	r3, #0
 8001df2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001df4:	f107 0314 	add.w	r3, r7, #20
 8001df8:	4619      	mov	r1, r3
 8001dfa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001dfe:	f001 fec9 	bl	8003b94 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8001e02:	2333      	movs	r3, #51	@ 0x33
 8001e04:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e06:	2303      	movs	r3, #3
 8001e08:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e0e:	f107 0314 	add.w	r3, r7, #20
 8001e12:	4619      	mov	r1, r3
 8001e14:	4811      	ldr	r0, [pc, #68]	@ (8001e5c <MX_GPIO_Init+0x120>)
 8001e16:	f001 febd 	bl	8003b94 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001e1a:	2308      	movs	r3, #8
 8001e1c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e1e:	2301      	movs	r3, #1
 8001e20:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e22:	2300      	movs	r3, #0
 8001e24:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e26:	2300      	movs	r3, #0
 8001e28:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e2a:	f107 0314 	add.w	r3, r7, #20
 8001e2e:	4619      	mov	r1, r3
 8001e30:	480a      	ldr	r0, [pc, #40]	@ (8001e5c <MX_GPIO_Init+0x120>)
 8001e32:	f001 feaf 	bl	8003b94 <HAL_GPIO_Init>

  /*Configure GPIO pin : PH3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001e36:	2308      	movs	r3, #8
 8001e38:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e3a:	2303      	movs	r3, #3
 8001e3c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001e42:	f107 0314 	add.w	r3, r7, #20
 8001e46:	4619      	mov	r1, r3
 8001e48:	4805      	ldr	r0, [pc, #20]	@ (8001e60 <MX_GPIO_Init+0x124>)
 8001e4a:	f001 fea3 	bl	8003b94 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001e4e:	bf00      	nop
 8001e50:	3728      	adds	r7, #40	@ 0x28
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bd80      	pop	{r7, pc}
 8001e56:	bf00      	nop
 8001e58:	40021000 	.word	0x40021000
 8001e5c:	48000400 	.word	0x48000400
 8001e60:	48001c00 	.word	0x48001c00

08001e64 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e64:	b480      	push	{r7}
 8001e66:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001e68:	b672      	cpsid	i
}
 8001e6a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001e6c:	bf00      	nop
 8001e6e:	e7fd      	b.n	8001e6c <Error_Handler+0x8>

08001e70 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e70:	b480      	push	{r7}
 8001e72:	b083      	sub	sp, #12
 8001e74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e76:	4b0f      	ldr	r3, [pc, #60]	@ (8001eb4 <HAL_MspInit+0x44>)
 8001e78:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e7a:	4a0e      	ldr	r2, [pc, #56]	@ (8001eb4 <HAL_MspInit+0x44>)
 8001e7c:	f043 0301 	orr.w	r3, r3, #1
 8001e80:	6613      	str	r3, [r2, #96]	@ 0x60
 8001e82:	4b0c      	ldr	r3, [pc, #48]	@ (8001eb4 <HAL_MspInit+0x44>)
 8001e84:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e86:	f003 0301 	and.w	r3, r3, #1
 8001e8a:	607b      	str	r3, [r7, #4]
 8001e8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e8e:	4b09      	ldr	r3, [pc, #36]	@ (8001eb4 <HAL_MspInit+0x44>)
 8001e90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e92:	4a08      	ldr	r2, [pc, #32]	@ (8001eb4 <HAL_MspInit+0x44>)
 8001e94:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e98:	6593      	str	r3, [r2, #88]	@ 0x58
 8001e9a:	4b06      	ldr	r3, [pc, #24]	@ (8001eb4 <HAL_MspInit+0x44>)
 8001e9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e9e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ea2:	603b      	str	r3, [r7, #0]
 8001ea4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ea6:	bf00      	nop
 8001ea8:	370c      	adds	r7, #12
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb0:	4770      	bx	lr
 8001eb2:	bf00      	nop
 8001eb4:	40021000 	.word	0x40021000

08001eb8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b09e      	sub	sp, #120	@ 0x78
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ec0:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	601a      	str	r2, [r3, #0]
 8001ec8:	605a      	str	r2, [r3, #4]
 8001eca:	609a      	str	r2, [r3, #8]
 8001ecc:	60da      	str	r2, [r3, #12]
 8001ece:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001ed0:	f107 0310 	add.w	r3, r7, #16
 8001ed4:	2254      	movs	r2, #84	@ 0x54
 8001ed6:	2100      	movs	r1, #0
 8001ed8:	4618      	mov	r0, r3
 8001eda:	f005 f9ba 	bl	8007252 <memset>
  if(hadc->Instance==ADC1)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	4a3b      	ldr	r2, [pc, #236]	@ (8001fd0 <HAL_ADC_MspInit+0x118>)
 8001ee4:	4293      	cmp	r3, r2
 8001ee6:	d16e      	bne.n	8001fc6 <HAL_ADC_MspInit+0x10e>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001ee8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001eec:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001eee:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8001ef2:	65bb      	str	r3, [r7, #88]	@ 0x58
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8001ef4:	2301      	movs	r3, #1
 8001ef6:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001ef8:	2301      	movs	r3, #1
 8001efa:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 8001efc:	2310      	movs	r3, #16
 8001efe:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001f00:	2307      	movs	r3, #7
 8001f02:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001f04:	2302      	movs	r3, #2
 8001f06:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001f08:	2302      	movs	r3, #2
 8001f0a:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8001f0c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001f10:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001f12:	f107 0310 	add.w	r3, r7, #16
 8001f16:	4618      	mov	r0, r3
 8001f18:	f003 fea6 	bl	8005c68 <HAL_RCCEx_PeriphCLKConfig>
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d001      	beq.n	8001f26 <HAL_ADC_MspInit+0x6e>
    {
      Error_Handler();
 8001f22:	f7ff ff9f 	bl	8001e64 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001f26:	4b2b      	ldr	r3, [pc, #172]	@ (8001fd4 <HAL_ADC_MspInit+0x11c>)
 8001f28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f2a:	4a2a      	ldr	r2, [pc, #168]	@ (8001fd4 <HAL_ADC_MspInit+0x11c>)
 8001f2c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001f30:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001f32:	4b28      	ldr	r3, [pc, #160]	@ (8001fd4 <HAL_ADC_MspInit+0x11c>)
 8001f34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f36:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001f3a:	60fb      	str	r3, [r7, #12]
 8001f3c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f3e:	4b25      	ldr	r3, [pc, #148]	@ (8001fd4 <HAL_ADC_MspInit+0x11c>)
 8001f40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f42:	4a24      	ldr	r2, [pc, #144]	@ (8001fd4 <HAL_ADC_MspInit+0x11c>)
 8001f44:	f043 0301 	orr.w	r3, r3, #1
 8001f48:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001f4a:	4b22      	ldr	r3, [pc, #136]	@ (8001fd4 <HAL_ADC_MspInit+0x11c>)
 8001f4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f4e:	f003 0301 	and.w	r3, r3, #1
 8001f52:	60bb      	str	r3, [r7, #8]
 8001f54:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    PA1     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001f56:	2303      	movs	r3, #3
 8001f58:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001f5a:	230b      	movs	r3, #11
 8001f5c:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f5e:	2300      	movs	r3, #0
 8001f60:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f62:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001f66:	4619      	mov	r1, r3
 8001f68:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001f6c:	f001 fe12 	bl	8003b94 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001f70:	4b19      	ldr	r3, [pc, #100]	@ (8001fd8 <HAL_ADC_MspInit+0x120>)
 8001f72:	4a1a      	ldr	r2, [pc, #104]	@ (8001fdc <HAL_ADC_MspInit+0x124>)
 8001f74:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8001f76:	4b18      	ldr	r3, [pc, #96]	@ (8001fd8 <HAL_ADC_MspInit+0x120>)
 8001f78:	2200      	movs	r2, #0
 8001f7a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001f7c:	4b16      	ldr	r3, [pc, #88]	@ (8001fd8 <HAL_ADC_MspInit+0x120>)
 8001f7e:	2200      	movs	r2, #0
 8001f80:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f82:	4b15      	ldr	r3, [pc, #84]	@ (8001fd8 <HAL_ADC_MspInit+0x120>)
 8001f84:	2200      	movs	r2, #0
 8001f86:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001f88:	4b13      	ldr	r3, [pc, #76]	@ (8001fd8 <HAL_ADC_MspInit+0x120>)
 8001f8a:	2280      	movs	r2, #128	@ 0x80
 8001f8c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001f8e:	4b12      	ldr	r3, [pc, #72]	@ (8001fd8 <HAL_ADC_MspInit+0x120>)
 8001f90:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001f94:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001f96:	4b10      	ldr	r3, [pc, #64]	@ (8001fd8 <HAL_ADC_MspInit+0x120>)
 8001f98:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001f9c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001f9e:	4b0e      	ldr	r3, [pc, #56]	@ (8001fd8 <HAL_ADC_MspInit+0x120>)
 8001fa0:	2220      	movs	r2, #32
 8001fa2:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001fa4:	4b0c      	ldr	r3, [pc, #48]	@ (8001fd8 <HAL_ADC_MspInit+0x120>)
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001faa:	480b      	ldr	r0, [pc, #44]	@ (8001fd8 <HAL_ADC_MspInit+0x120>)
 8001fac:	f001 fbfa 	bl	80037a4 <HAL_DMA_Init>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d001      	beq.n	8001fba <HAL_ADC_MspInit+0x102>
    {
      Error_Handler();
 8001fb6:	f7ff ff55 	bl	8001e64 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	4a06      	ldr	r2, [pc, #24]	@ (8001fd8 <HAL_ADC_MspInit+0x120>)
 8001fbe:	64da      	str	r2, [r3, #76]	@ 0x4c
 8001fc0:	4a05      	ldr	r2, [pc, #20]	@ (8001fd8 <HAL_ADC_MspInit+0x120>)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	6293      	str	r3, [r2, #40]	@ 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001fc6:	bf00      	nop
 8001fc8:	3778      	adds	r7, #120	@ 0x78
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bd80      	pop	{r7, pc}
 8001fce:	bf00      	nop
 8001fd0:	50040000 	.word	0x50040000
 8001fd4:	40021000 	.word	0x40021000
 8001fd8:	2000008c 	.word	0x2000008c
 8001fdc:	40020008 	.word	0x40020008

08001fe0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b09e      	sub	sp, #120	@ 0x78
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fe8:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001fec:	2200      	movs	r2, #0
 8001fee:	601a      	str	r2, [r3, #0]
 8001ff0:	605a      	str	r2, [r3, #4]
 8001ff2:	609a      	str	r2, [r3, #8]
 8001ff4:	60da      	str	r2, [r3, #12]
 8001ff6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001ff8:	f107 0310 	add.w	r3, r7, #16
 8001ffc:	2254      	movs	r2, #84	@ 0x54
 8001ffe:	2100      	movs	r1, #0
 8002000:	4618      	mov	r0, r3
 8002002:	f005 f926 	bl	8007252 <memset>
  if(hi2c->Instance==I2C1)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	4a1f      	ldr	r2, [pc, #124]	@ (8002088 <HAL_I2C_MspInit+0xa8>)
 800200c:	4293      	cmp	r3, r2
 800200e:	d137      	bne.n	8002080 <HAL_I2C_MspInit+0xa0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002010:	2340      	movs	r3, #64	@ 0x40
 8002012:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002014:	2300      	movs	r3, #0
 8002016:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002018:	f107 0310 	add.w	r3, r7, #16
 800201c:	4618      	mov	r0, r3
 800201e:	f003 fe23 	bl	8005c68 <HAL_RCCEx_PeriphCLKConfig>
 8002022:	4603      	mov	r3, r0
 8002024:	2b00      	cmp	r3, #0
 8002026:	d001      	beq.n	800202c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8002028:	f7ff ff1c 	bl	8001e64 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800202c:	4b17      	ldr	r3, [pc, #92]	@ (800208c <HAL_I2C_MspInit+0xac>)
 800202e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002030:	4a16      	ldr	r2, [pc, #88]	@ (800208c <HAL_I2C_MspInit+0xac>)
 8002032:	f043 0301 	orr.w	r3, r3, #1
 8002036:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002038:	4b14      	ldr	r3, [pc, #80]	@ (800208c <HAL_I2C_MspInit+0xac>)
 800203a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800203c:	f003 0301 	and.w	r3, r3, #1
 8002040:	60fb      	str	r3, [r7, #12]
 8002042:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002044:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8002048:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800204a:	2312      	movs	r3, #18
 800204c:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800204e:	2300      	movs	r3, #0
 8002050:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002052:	2303      	movs	r3, #3
 8002054:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002056:	2304      	movs	r3, #4
 8002058:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800205a:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800205e:	4619      	mov	r1, r3
 8002060:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002064:	f001 fd96 	bl	8003b94 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002068:	4b08      	ldr	r3, [pc, #32]	@ (800208c <HAL_I2C_MspInit+0xac>)
 800206a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800206c:	4a07      	ldr	r2, [pc, #28]	@ (800208c <HAL_I2C_MspInit+0xac>)
 800206e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002072:	6593      	str	r3, [r2, #88]	@ 0x58
 8002074:	4b05      	ldr	r3, [pc, #20]	@ (800208c <HAL_I2C_MspInit+0xac>)
 8002076:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002078:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800207c:	60bb      	str	r3, [r7, #8]
 800207e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002080:	bf00      	nop
 8002082:	3778      	adds	r7, #120	@ 0x78
 8002084:	46bd      	mov	sp, r7
 8002086:	bd80      	pop	{r7, pc}
 8002088:	40005400 	.word	0x40005400
 800208c:	40021000 	.word	0x40021000

08002090 <HAL_LPTIM_MspInit>:
* This function configures the hardware resources used in this example
* @param hlptim: LPTIM handle pointer
* @retval None
*/
void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* hlptim)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b098      	sub	sp, #96	@ 0x60
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002098:	f107 030c 	add.w	r3, r7, #12
 800209c:	2254      	movs	r2, #84	@ 0x54
 800209e:	2100      	movs	r1, #0
 80020a0:	4618      	mov	r0, r3
 80020a2:	f005 f8d6 	bl	8007252 <memset>
  if(hlptim->Instance==LPTIM2)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4a15      	ldr	r2, [pc, #84]	@ (8002100 <HAL_LPTIM_MspInit+0x70>)
 80020ac:	4293      	cmp	r3, r2
 80020ae:	d123      	bne.n	80020f8 <HAL_LPTIM_MspInit+0x68>

  /* USER CODE END LPTIM2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPTIM2;
 80020b0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80020b4:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.Lptim2ClockSelection = RCC_LPTIM2CLKSOURCE_LSI;
 80020b6:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80020ba:	647b      	str	r3, [r7, #68]	@ 0x44
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80020bc:	f107 030c 	add.w	r3, r7, #12
 80020c0:	4618      	mov	r0, r3
 80020c2:	f003 fdd1 	bl	8005c68 <HAL_RCCEx_PeriphCLKConfig>
 80020c6:	4603      	mov	r3, r0
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d001      	beq.n	80020d0 <HAL_LPTIM_MspInit+0x40>
    {
      Error_Handler();
 80020cc:	f7ff feca 	bl	8001e64 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPTIM2_CLK_ENABLE();
 80020d0:	4b0c      	ldr	r3, [pc, #48]	@ (8002104 <HAL_LPTIM_MspInit+0x74>)
 80020d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020d4:	4a0b      	ldr	r2, [pc, #44]	@ (8002104 <HAL_LPTIM_MspInit+0x74>)
 80020d6:	f043 0320 	orr.w	r3, r3, #32
 80020da:	65d3      	str	r3, [r2, #92]	@ 0x5c
 80020dc:	4b09      	ldr	r3, [pc, #36]	@ (8002104 <HAL_LPTIM_MspInit+0x74>)
 80020de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020e0:	f003 0320 	and.w	r3, r3, #32
 80020e4:	60bb      	str	r3, [r7, #8]
 80020e6:	68bb      	ldr	r3, [r7, #8]
    /* LPTIM2 interrupt Init */
    HAL_NVIC_SetPriority(LPTIM2_IRQn, 0, 0);
 80020e8:	2200      	movs	r2, #0
 80020ea:	2100      	movs	r1, #0
 80020ec:	2042      	movs	r0, #66	@ 0x42
 80020ee:	f001 fb22 	bl	8003736 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPTIM2_IRQn);
 80020f2:	2042      	movs	r0, #66	@ 0x42
 80020f4:	f001 fb3b 	bl	800376e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPTIM2_MspInit 1 */

  /* USER CODE END LPTIM2_MspInit 1 */
  }

}
 80020f8:	bf00      	nop
 80020fa:	3760      	adds	r7, #96	@ 0x60
 80020fc:	46bd      	mov	sp, r7
 80020fe:	bd80      	pop	{r7, pc}
 8002100:	40009400 	.word	0x40009400
 8002104:	40021000 	.word	0x40021000

08002108 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002108:	b480      	push	{r7}
 800210a:	b085      	sub	sp, #20
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002118:	d10b      	bne.n	8002132 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800211a:	4b09      	ldr	r3, [pc, #36]	@ (8002140 <HAL_TIM_Base_MspInit+0x38>)
 800211c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800211e:	4a08      	ldr	r2, [pc, #32]	@ (8002140 <HAL_TIM_Base_MspInit+0x38>)
 8002120:	f043 0301 	orr.w	r3, r3, #1
 8002124:	6593      	str	r3, [r2, #88]	@ 0x58
 8002126:	4b06      	ldr	r3, [pc, #24]	@ (8002140 <HAL_TIM_Base_MspInit+0x38>)
 8002128:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800212a:	f003 0301 	and.w	r3, r3, #1
 800212e:	60fb      	str	r3, [r7, #12]
 8002130:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002132:	bf00      	nop
 8002134:	3714      	adds	r7, #20
 8002136:	46bd      	mov	sp, r7
 8002138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213c:	4770      	bx	lr
 800213e:	bf00      	nop
 8002140:	40021000 	.word	0x40021000

08002144 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b09e      	sub	sp, #120	@ 0x78
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800214c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002150:	2200      	movs	r2, #0
 8002152:	601a      	str	r2, [r3, #0]
 8002154:	605a      	str	r2, [r3, #4]
 8002156:	609a      	str	r2, [r3, #8]
 8002158:	60da      	str	r2, [r3, #12]
 800215a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800215c:	f107 0310 	add.w	r3, r7, #16
 8002160:	2254      	movs	r2, #84	@ 0x54
 8002162:	2100      	movs	r1, #0
 8002164:	4618      	mov	r0, r3
 8002166:	f005 f874 	bl	8007252 <memset>
  if(huart->Instance==USART1)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	4a1e      	ldr	r2, [pc, #120]	@ (80021e8 <HAL_UART_MspInit+0xa4>)
 8002170:	4293      	cmp	r3, r2
 8002172:	d135      	bne.n	80021e0 <HAL_UART_MspInit+0x9c>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002174:	2301      	movs	r3, #1
 8002176:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002178:	2300      	movs	r3, #0
 800217a:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800217c:	f107 0310 	add.w	r3, r7, #16
 8002180:	4618      	mov	r0, r3
 8002182:	f003 fd71 	bl	8005c68 <HAL_RCCEx_PeriphCLKConfig>
 8002186:	4603      	mov	r3, r0
 8002188:	2b00      	cmp	r3, #0
 800218a:	d001      	beq.n	8002190 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800218c:	f7ff fe6a 	bl	8001e64 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002190:	4b16      	ldr	r3, [pc, #88]	@ (80021ec <HAL_UART_MspInit+0xa8>)
 8002192:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002194:	4a15      	ldr	r2, [pc, #84]	@ (80021ec <HAL_UART_MspInit+0xa8>)
 8002196:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800219a:	6613      	str	r3, [r2, #96]	@ 0x60
 800219c:	4b13      	ldr	r3, [pc, #76]	@ (80021ec <HAL_UART_MspInit+0xa8>)
 800219e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80021a0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80021a4:	60fb      	str	r3, [r7, #12]
 80021a6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021a8:	4b10      	ldr	r3, [pc, #64]	@ (80021ec <HAL_UART_MspInit+0xa8>)
 80021aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021ac:	4a0f      	ldr	r2, [pc, #60]	@ (80021ec <HAL_UART_MspInit+0xa8>)
 80021ae:	f043 0302 	orr.w	r3, r3, #2
 80021b2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80021b4:	4b0d      	ldr	r3, [pc, #52]	@ (80021ec <HAL_UART_MspInit+0xa8>)
 80021b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021b8:	f003 0302 	and.w	r3, r3, #2
 80021bc:	60bb      	str	r3, [r7, #8]
 80021be:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80021c0:	23c0      	movs	r3, #192	@ 0xc0
 80021c2:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021c4:	2302      	movs	r3, #2
 80021c6:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021c8:	2300      	movs	r3, #0
 80021ca:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021cc:	2303      	movs	r3, #3
 80021ce:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80021d0:	2307      	movs	r3, #7
 80021d2:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021d4:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80021d8:	4619      	mov	r1, r3
 80021da:	4805      	ldr	r0, [pc, #20]	@ (80021f0 <HAL_UART_MspInit+0xac>)
 80021dc:	f001 fcda 	bl	8003b94 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80021e0:	bf00      	nop
 80021e2:	3778      	adds	r7, #120	@ 0x78
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bd80      	pop	{r7, pc}
 80021e8:	40013800 	.word	0x40013800
 80021ec:	40021000 	.word	0x40021000
 80021f0:	48000400 	.word	0x48000400

080021f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80021f4:	b480      	push	{r7}
 80021f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80021f8:	bf00      	nop
 80021fa:	e7fd      	b.n	80021f8 <NMI_Handler+0x4>

080021fc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80021fc:	b480      	push	{r7}
 80021fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002200:	bf00      	nop
 8002202:	e7fd      	b.n	8002200 <HardFault_Handler+0x4>

08002204 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002204:	b480      	push	{r7}
 8002206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002208:	bf00      	nop
 800220a:	e7fd      	b.n	8002208 <MemManage_Handler+0x4>

0800220c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800220c:	b480      	push	{r7}
 800220e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002210:	bf00      	nop
 8002212:	e7fd      	b.n	8002210 <BusFault_Handler+0x4>

08002214 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002214:	b480      	push	{r7}
 8002216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002218:	bf00      	nop
 800221a:	e7fd      	b.n	8002218 <UsageFault_Handler+0x4>

0800221c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800221c:	b480      	push	{r7}
 800221e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002220:	bf00      	nop
 8002222:	46bd      	mov	sp, r7
 8002224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002228:	4770      	bx	lr

0800222a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800222a:	b480      	push	{r7}
 800222c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800222e:	bf00      	nop
 8002230:	46bd      	mov	sp, r7
 8002232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002236:	4770      	bx	lr

08002238 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002238:	b480      	push	{r7}
 800223a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800223c:	bf00      	nop
 800223e:	46bd      	mov	sp, r7
 8002240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002244:	4770      	bx	lr

08002246 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002246:	b580      	push	{r7, lr}
 8002248:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800224a:	f000 f8a7 	bl	800239c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800224e:	bf00      	nop
 8002250:	bd80      	pop	{r7, pc}
	...

08002254 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002258:	4802      	ldr	r0, [pc, #8]	@ (8002264 <DMA1_Channel1_IRQHandler+0x10>)
 800225a:	f001 fbbb 	bl	80039d4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800225e:	bf00      	nop
 8002260:	bd80      	pop	{r7, pc}
 8002262:	bf00      	nop
 8002264:	2000008c 	.word	0x2000008c

08002268 <LPTIM2_IRQHandler>:

/**
  * @brief This function handles LPTIM2 global interrupt.
  */
void LPTIM2_IRQHandler(void)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPTIM2_IRQn 0 */

  /* USER CODE END LPTIM2_IRQn 0 */
  HAL_LPTIM_IRQHandler(&hlptim2);
 800226c:	4802      	ldr	r0, [pc, #8]	@ (8002278 <LPTIM2_IRQHandler+0x10>)
 800226e:	f002 fcf1 	bl	8004c54 <HAL_LPTIM_IRQHandler>
  /* USER CODE BEGIN LPTIM2_IRQn 1 */

  /* USER CODE END LPTIM2_IRQn 1 */
}
 8002272:	bf00      	nop
 8002274:	bd80      	pop	{r7, pc}
 8002276:	bf00      	nop
 8002278:	20000128 	.word	0x20000128

0800227c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800227c:	b480      	push	{r7}
 800227e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002280:	4b06      	ldr	r3, [pc, #24]	@ (800229c <SystemInit+0x20>)
 8002282:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002286:	4a05      	ldr	r2, [pc, #20]	@ (800229c <SystemInit+0x20>)
 8002288:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800228c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8002290:	bf00      	nop
 8002292:	46bd      	mov	sp, r7
 8002294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002298:	4770      	bx	lr
 800229a:	bf00      	nop
 800229c:	e000ed00 	.word	0xe000ed00

080022a0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80022a0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80022d8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80022a4:	f7ff ffea 	bl	800227c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80022a8:	480c      	ldr	r0, [pc, #48]	@ (80022dc <LoopForever+0x6>)
  ldr r1, =_edata
 80022aa:	490d      	ldr	r1, [pc, #52]	@ (80022e0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80022ac:	4a0d      	ldr	r2, [pc, #52]	@ (80022e4 <LoopForever+0xe>)
  movs r3, #0
 80022ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80022b0:	e002      	b.n	80022b8 <LoopCopyDataInit>

080022b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80022b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80022b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80022b6:	3304      	adds	r3, #4

080022b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80022b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80022ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80022bc:	d3f9      	bcc.n	80022b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80022be:	4a0a      	ldr	r2, [pc, #40]	@ (80022e8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80022c0:	4c0a      	ldr	r4, [pc, #40]	@ (80022ec <LoopForever+0x16>)
  movs r3, #0
 80022c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80022c4:	e001      	b.n	80022ca <LoopFillZerobss>

080022c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80022c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80022c8:	3204      	adds	r2, #4

080022ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80022ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80022cc:	d3fb      	bcc.n	80022c6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80022ce:	f004 ffc9 	bl	8007264 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80022d2:	f7ff fa89 	bl	80017e8 <main>

080022d6 <LoopForever>:

LoopForever:
    b LoopForever
 80022d6:	e7fe      	b.n	80022d6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80022d8:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80022dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80022e0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80022e4:	0800731c 	.word	0x0800731c
  ldr r2, =_sbss
 80022e8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80022ec:	2000029c 	.word	0x2000029c

080022f0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80022f0:	e7fe      	b.n	80022f0 <ADC1_IRQHandler>

080022f2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80022f2:	b580      	push	{r7, lr}
 80022f4:	b082      	sub	sp, #8
 80022f6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80022f8:	2300      	movs	r3, #0
 80022fa:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80022fc:	2003      	movs	r0, #3
 80022fe:	f001 fa0f 	bl	8003720 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002302:	2000      	movs	r0, #0
 8002304:	f000 f80e 	bl	8002324 <HAL_InitTick>
 8002308:	4603      	mov	r3, r0
 800230a:	2b00      	cmp	r3, #0
 800230c:	d002      	beq.n	8002314 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800230e:	2301      	movs	r3, #1
 8002310:	71fb      	strb	r3, [r7, #7]
 8002312:	e001      	b.n	8002318 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002314:	f7ff fdac 	bl	8001e70 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002318:	79fb      	ldrb	r3, [r7, #7]
}
 800231a:	4618      	mov	r0, r3
 800231c:	3708      	adds	r7, #8
 800231e:	46bd      	mov	sp, r7
 8002320:	bd80      	pop	{r7, pc}
	...

08002324 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b084      	sub	sp, #16
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800232c:	2300      	movs	r3, #0
 800232e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002330:	4b17      	ldr	r3, [pc, #92]	@ (8002390 <HAL_InitTick+0x6c>)
 8002332:	781b      	ldrb	r3, [r3, #0]
 8002334:	2b00      	cmp	r3, #0
 8002336:	d023      	beq.n	8002380 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002338:	4b16      	ldr	r3, [pc, #88]	@ (8002394 <HAL_InitTick+0x70>)
 800233a:	681a      	ldr	r2, [r3, #0]
 800233c:	4b14      	ldr	r3, [pc, #80]	@ (8002390 <HAL_InitTick+0x6c>)
 800233e:	781b      	ldrb	r3, [r3, #0]
 8002340:	4619      	mov	r1, r3
 8002342:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002346:	fbb3 f3f1 	udiv	r3, r3, r1
 800234a:	fbb2 f3f3 	udiv	r3, r2, r3
 800234e:	4618      	mov	r0, r3
 8002350:	f001 fa1b 	bl	800378a <HAL_SYSTICK_Config>
 8002354:	4603      	mov	r3, r0
 8002356:	2b00      	cmp	r3, #0
 8002358:	d10f      	bne.n	800237a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	2b0f      	cmp	r3, #15
 800235e:	d809      	bhi.n	8002374 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002360:	2200      	movs	r2, #0
 8002362:	6879      	ldr	r1, [r7, #4]
 8002364:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002368:	f001 f9e5 	bl	8003736 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800236c:	4a0a      	ldr	r2, [pc, #40]	@ (8002398 <HAL_InitTick+0x74>)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6013      	str	r3, [r2, #0]
 8002372:	e007      	b.n	8002384 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002374:	2301      	movs	r3, #1
 8002376:	73fb      	strb	r3, [r7, #15]
 8002378:	e004      	b.n	8002384 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800237a:	2301      	movs	r3, #1
 800237c:	73fb      	strb	r3, [r7, #15]
 800237e:	e001      	b.n	8002384 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002380:	2301      	movs	r3, #1
 8002382:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002384:	7bfb      	ldrb	r3, [r7, #15]
}
 8002386:	4618      	mov	r0, r3
 8002388:	3710      	adds	r7, #16
 800238a:	46bd      	mov	sp, r7
 800238c:	bd80      	pop	{r7, pc}
 800238e:	bf00      	nop
 8002390:	20000008 	.word	0x20000008
 8002394:	20000000 	.word	0x20000000
 8002398:	20000004 	.word	0x20000004

0800239c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800239c:	b480      	push	{r7}
 800239e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80023a0:	4b06      	ldr	r3, [pc, #24]	@ (80023bc <HAL_IncTick+0x20>)
 80023a2:	781b      	ldrb	r3, [r3, #0]
 80023a4:	461a      	mov	r2, r3
 80023a6:	4b06      	ldr	r3, [pc, #24]	@ (80023c0 <HAL_IncTick+0x24>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	4413      	add	r3, r2
 80023ac:	4a04      	ldr	r2, [pc, #16]	@ (80023c0 <HAL_IncTick+0x24>)
 80023ae:	6013      	str	r3, [r2, #0]
}
 80023b0:	bf00      	nop
 80023b2:	46bd      	mov	sp, r7
 80023b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b8:	4770      	bx	lr
 80023ba:	bf00      	nop
 80023bc:	20000008 	.word	0x20000008
 80023c0:	20000298 	.word	0x20000298

080023c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80023c4:	b480      	push	{r7}
 80023c6:	af00      	add	r7, sp, #0
  return uwTick;
 80023c8:	4b03      	ldr	r3, [pc, #12]	@ (80023d8 <HAL_GetTick+0x14>)
 80023ca:	681b      	ldr	r3, [r3, #0]
}
 80023cc:	4618      	mov	r0, r3
 80023ce:	46bd      	mov	sp, r7
 80023d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d4:	4770      	bx	lr
 80023d6:	bf00      	nop
 80023d8:	20000298 	.word	0x20000298

080023dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b084      	sub	sp, #16
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80023e4:	f7ff ffee 	bl	80023c4 <HAL_GetTick>
 80023e8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80023f4:	d005      	beq.n	8002402 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80023f6:	4b0a      	ldr	r3, [pc, #40]	@ (8002420 <HAL_Delay+0x44>)
 80023f8:	781b      	ldrb	r3, [r3, #0]
 80023fa:	461a      	mov	r2, r3
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	4413      	add	r3, r2
 8002400:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002402:	bf00      	nop
 8002404:	f7ff ffde 	bl	80023c4 <HAL_GetTick>
 8002408:	4602      	mov	r2, r0
 800240a:	68bb      	ldr	r3, [r7, #8]
 800240c:	1ad3      	subs	r3, r2, r3
 800240e:	68fa      	ldr	r2, [r7, #12]
 8002410:	429a      	cmp	r2, r3
 8002412:	d8f7      	bhi.n	8002404 <HAL_Delay+0x28>
  {
  }
}
 8002414:	bf00      	nop
 8002416:	bf00      	nop
 8002418:	3710      	adds	r7, #16
 800241a:	46bd      	mov	sp, r7
 800241c:	bd80      	pop	{r7, pc}
 800241e:	bf00      	nop
 8002420:	20000008 	.word	0x20000008

08002424 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8002424:	b480      	push	{r7}
 8002426:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 8002428:	4b05      	ldr	r3, [pc, #20]	@ (8002440 <HAL_SuspendTick+0x1c>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	4a04      	ldr	r2, [pc, #16]	@ (8002440 <HAL_SuspendTick+0x1c>)
 800242e:	f023 0302 	bic.w	r3, r3, #2
 8002432:	6013      	str	r3, [r2, #0]
}
 8002434:	bf00      	nop
 8002436:	46bd      	mov	sp, r7
 8002438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243c:	4770      	bx	lr
 800243e:	bf00      	nop
 8002440:	e000e010 	.word	0xe000e010

08002444 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002444:	b480      	push	{r7}
 8002446:	b083      	sub	sp, #12
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
 800244c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	689b      	ldr	r3, [r3, #8]
 8002452:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	431a      	orrs	r2, r3
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	609a      	str	r2, [r3, #8]
}
 800245e:	bf00      	nop
 8002460:	370c      	adds	r7, #12
 8002462:	46bd      	mov	sp, r7
 8002464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002468:	4770      	bx	lr

0800246a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800246a:	b480      	push	{r7}
 800246c:	b083      	sub	sp, #12
 800246e:	af00      	add	r7, sp, #0
 8002470:	6078      	str	r0, [r7, #4]
 8002472:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	689b      	ldr	r3, [r3, #8]
 8002478:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	431a      	orrs	r2, r3
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	609a      	str	r2, [r3, #8]
}
 8002484:	bf00      	nop
 8002486:	370c      	adds	r7, #12
 8002488:	46bd      	mov	sp, r7
 800248a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248e:	4770      	bx	lr

08002490 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002490:	b480      	push	{r7}
 8002492:	b083      	sub	sp, #12
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	689b      	ldr	r3, [r3, #8]
 800249c:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80024a0:	4618      	mov	r0, r3
 80024a2:	370c      	adds	r7, #12
 80024a4:	46bd      	mov	sp, r7
 80024a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024aa:	4770      	bx	lr

080024ac <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80024ac:	b480      	push	{r7}
 80024ae:	b087      	sub	sp, #28
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	60f8      	str	r0, [r7, #12]
 80024b4:	60b9      	str	r1, [r7, #8]
 80024b6:	607a      	str	r2, [r7, #4]
 80024b8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	3360      	adds	r3, #96	@ 0x60
 80024be:	461a      	mov	r2, r3
 80024c0:	68bb      	ldr	r3, [r7, #8]
 80024c2:	009b      	lsls	r3, r3, #2
 80024c4:	4413      	add	r3, r2
 80024c6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80024c8:	697b      	ldr	r3, [r7, #20]
 80024ca:	681a      	ldr	r2, [r3, #0]
 80024cc:	4b08      	ldr	r3, [pc, #32]	@ (80024f0 <LL_ADC_SetOffset+0x44>)
 80024ce:	4013      	ands	r3, r2
 80024d0:	687a      	ldr	r2, [r7, #4]
 80024d2:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 80024d6:	683a      	ldr	r2, [r7, #0]
 80024d8:	430a      	orrs	r2, r1
 80024da:	4313      	orrs	r3, r2
 80024dc:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80024e0:	697b      	ldr	r3, [r7, #20]
 80024e2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80024e4:	bf00      	nop
 80024e6:	371c      	adds	r7, #28
 80024e8:	46bd      	mov	sp, r7
 80024ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ee:	4770      	bx	lr
 80024f0:	03fff000 	.word	0x03fff000

080024f4 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80024f4:	b480      	push	{r7}
 80024f6:	b085      	sub	sp, #20
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
 80024fc:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	3360      	adds	r3, #96	@ 0x60
 8002502:	461a      	mov	r2, r3
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	009b      	lsls	r3, r3, #2
 8002508:	4413      	add	r3, r2
 800250a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8002514:	4618      	mov	r0, r3
 8002516:	3714      	adds	r7, #20
 8002518:	46bd      	mov	sp, r7
 800251a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251e:	4770      	bx	lr

08002520 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002520:	b480      	push	{r7}
 8002522:	b087      	sub	sp, #28
 8002524:	af00      	add	r7, sp, #0
 8002526:	60f8      	str	r0, [r7, #12]
 8002528:	60b9      	str	r1, [r7, #8]
 800252a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	3360      	adds	r3, #96	@ 0x60
 8002530:	461a      	mov	r2, r3
 8002532:	68bb      	ldr	r3, [r7, #8]
 8002534:	009b      	lsls	r3, r3, #2
 8002536:	4413      	add	r3, r2
 8002538:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800253a:	697b      	ldr	r3, [r7, #20]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	431a      	orrs	r2, r3
 8002546:	697b      	ldr	r3, [r7, #20]
 8002548:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800254a:	bf00      	nop
 800254c:	371c      	adds	r7, #28
 800254e:	46bd      	mov	sp, r7
 8002550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002554:	4770      	bx	lr

08002556 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002556:	b480      	push	{r7}
 8002558:	b083      	sub	sp, #12
 800255a:	af00      	add	r7, sp, #0
 800255c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	68db      	ldr	r3, [r3, #12]
 8002562:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002566:	2b00      	cmp	r3, #0
 8002568:	d101      	bne.n	800256e <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800256a:	2301      	movs	r3, #1
 800256c:	e000      	b.n	8002570 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800256e:	2300      	movs	r3, #0
}
 8002570:	4618      	mov	r0, r3
 8002572:	370c      	adds	r7, #12
 8002574:	46bd      	mov	sp, r7
 8002576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257a:	4770      	bx	lr

0800257c <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800257c:	b480      	push	{r7}
 800257e:	b087      	sub	sp, #28
 8002580:	af00      	add	r7, sp, #0
 8002582:	60f8      	str	r0, [r7, #12]
 8002584:	60b9      	str	r1, [r7, #8]
 8002586:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	3330      	adds	r3, #48	@ 0x30
 800258c:	461a      	mov	r2, r3
 800258e:	68bb      	ldr	r3, [r7, #8]
 8002590:	0a1b      	lsrs	r3, r3, #8
 8002592:	009b      	lsls	r3, r3, #2
 8002594:	f003 030c 	and.w	r3, r3, #12
 8002598:	4413      	add	r3, r2
 800259a:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800259c:	697b      	ldr	r3, [r7, #20]
 800259e:	681a      	ldr	r2, [r3, #0]
 80025a0:	68bb      	ldr	r3, [r7, #8]
 80025a2:	f003 031f 	and.w	r3, r3, #31
 80025a6:	211f      	movs	r1, #31
 80025a8:	fa01 f303 	lsl.w	r3, r1, r3
 80025ac:	43db      	mvns	r3, r3
 80025ae:	401a      	ands	r2, r3
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	0e9b      	lsrs	r3, r3, #26
 80025b4:	f003 011f 	and.w	r1, r3, #31
 80025b8:	68bb      	ldr	r3, [r7, #8]
 80025ba:	f003 031f 	and.w	r3, r3, #31
 80025be:	fa01 f303 	lsl.w	r3, r1, r3
 80025c2:	431a      	orrs	r2, r3
 80025c4:	697b      	ldr	r3, [r7, #20]
 80025c6:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80025c8:	bf00      	nop
 80025ca:	371c      	adds	r7, #28
 80025cc:	46bd      	mov	sp, r7
 80025ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d2:	4770      	bx	lr

080025d4 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80025d4:	b480      	push	{r7}
 80025d6:	b087      	sub	sp, #28
 80025d8:	af00      	add	r7, sp, #0
 80025da:	60f8      	str	r0, [r7, #12]
 80025dc:	60b9      	str	r1, [r7, #8]
 80025de:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	3314      	adds	r3, #20
 80025e4:	461a      	mov	r2, r3
 80025e6:	68bb      	ldr	r3, [r7, #8]
 80025e8:	0e5b      	lsrs	r3, r3, #25
 80025ea:	009b      	lsls	r3, r3, #2
 80025ec:	f003 0304 	and.w	r3, r3, #4
 80025f0:	4413      	add	r3, r2
 80025f2:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80025f4:	697b      	ldr	r3, [r7, #20]
 80025f6:	681a      	ldr	r2, [r3, #0]
 80025f8:	68bb      	ldr	r3, [r7, #8]
 80025fa:	0d1b      	lsrs	r3, r3, #20
 80025fc:	f003 031f 	and.w	r3, r3, #31
 8002600:	2107      	movs	r1, #7
 8002602:	fa01 f303 	lsl.w	r3, r1, r3
 8002606:	43db      	mvns	r3, r3
 8002608:	401a      	ands	r2, r3
 800260a:	68bb      	ldr	r3, [r7, #8]
 800260c:	0d1b      	lsrs	r3, r3, #20
 800260e:	f003 031f 	and.w	r3, r3, #31
 8002612:	6879      	ldr	r1, [r7, #4]
 8002614:	fa01 f303 	lsl.w	r3, r1, r3
 8002618:	431a      	orrs	r2, r3
 800261a:	697b      	ldr	r3, [r7, #20]
 800261c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800261e:	bf00      	nop
 8002620:	371c      	adds	r7, #28
 8002622:	46bd      	mov	sp, r7
 8002624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002628:	4770      	bx	lr
	...

0800262c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800262c:	b480      	push	{r7}
 800262e:	b085      	sub	sp, #20
 8002630:	af00      	add	r7, sp, #0
 8002632:	60f8      	str	r0, [r7, #12]
 8002634:	60b9      	str	r1, [r7, #8]
 8002636:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800263e:	68bb      	ldr	r3, [r7, #8]
 8002640:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002644:	43db      	mvns	r3, r3
 8002646:	401a      	ands	r2, r3
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	f003 0318 	and.w	r3, r3, #24
 800264e:	4908      	ldr	r1, [pc, #32]	@ (8002670 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002650:	40d9      	lsrs	r1, r3
 8002652:	68bb      	ldr	r3, [r7, #8]
 8002654:	400b      	ands	r3, r1
 8002656:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800265a:	431a      	orrs	r2, r3
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002662:	bf00      	nop
 8002664:	3714      	adds	r7, #20
 8002666:	46bd      	mov	sp, r7
 8002668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266c:	4770      	bx	lr
 800266e:	bf00      	nop
 8002670:	0007ffff 	.word	0x0007ffff

08002674 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002674:	b480      	push	{r7}
 8002676:	b083      	sub	sp, #12
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	689b      	ldr	r3, [r3, #8]
 8002680:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8002684:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002688:	687a      	ldr	r2, [r7, #4]
 800268a:	6093      	str	r3, [r2, #8]
}
 800268c:	bf00      	nop
 800268e:	370c      	adds	r7, #12
 8002690:	46bd      	mov	sp, r7
 8002692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002696:	4770      	bx	lr

08002698 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002698:	b480      	push	{r7}
 800269a:	b083      	sub	sp, #12
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	689b      	ldr	r3, [r3, #8]
 80026a4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80026a8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80026ac:	d101      	bne.n	80026b2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80026ae:	2301      	movs	r3, #1
 80026b0:	e000      	b.n	80026b4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80026b2:	2300      	movs	r3, #0
}
 80026b4:	4618      	mov	r0, r3
 80026b6:	370c      	adds	r7, #12
 80026b8:	46bd      	mov	sp, r7
 80026ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026be:	4770      	bx	lr

080026c0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80026c0:	b480      	push	{r7}
 80026c2:	b083      	sub	sp, #12
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	689b      	ldr	r3, [r3, #8]
 80026cc:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80026d0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80026d4:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80026dc:	bf00      	nop
 80026de:	370c      	adds	r7, #12
 80026e0:	46bd      	mov	sp, r7
 80026e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e6:	4770      	bx	lr

080026e8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80026e8:	b480      	push	{r7}
 80026ea:	b083      	sub	sp, #12
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	689b      	ldr	r3, [r3, #8]
 80026f4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80026f8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80026fc:	d101      	bne.n	8002702 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80026fe:	2301      	movs	r3, #1
 8002700:	e000      	b.n	8002704 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002702:	2300      	movs	r3, #0
}
 8002704:	4618      	mov	r0, r3
 8002706:	370c      	adds	r7, #12
 8002708:	46bd      	mov	sp, r7
 800270a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270e:	4770      	bx	lr

08002710 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002710:	b480      	push	{r7}
 8002712:	b083      	sub	sp, #12
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	689b      	ldr	r3, [r3, #8]
 800271c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002720:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002724:	f043 0201 	orr.w	r2, r3, #1
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800272c:	bf00      	nop
 800272e:	370c      	adds	r7, #12
 8002730:	46bd      	mov	sp, r7
 8002732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002736:	4770      	bx	lr

08002738 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002738:	b480      	push	{r7}
 800273a:	b083      	sub	sp, #12
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	689b      	ldr	r3, [r3, #8]
 8002744:	f003 0301 	and.w	r3, r3, #1
 8002748:	2b01      	cmp	r3, #1
 800274a:	d101      	bne.n	8002750 <LL_ADC_IsEnabled+0x18>
 800274c:	2301      	movs	r3, #1
 800274e:	e000      	b.n	8002752 <LL_ADC_IsEnabled+0x1a>
 8002750:	2300      	movs	r3, #0
}
 8002752:	4618      	mov	r0, r3
 8002754:	370c      	adds	r7, #12
 8002756:	46bd      	mov	sp, r7
 8002758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275c:	4770      	bx	lr

0800275e <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800275e:	b480      	push	{r7}
 8002760:	b083      	sub	sp, #12
 8002762:	af00      	add	r7, sp, #0
 8002764:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	689b      	ldr	r3, [r3, #8]
 800276a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800276e:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002772:	f043 0204 	orr.w	r2, r3, #4
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800277a:	bf00      	nop
 800277c:	370c      	adds	r7, #12
 800277e:	46bd      	mov	sp, r7
 8002780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002784:	4770      	bx	lr

08002786 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002786:	b480      	push	{r7}
 8002788:	b083      	sub	sp, #12
 800278a:	af00      	add	r7, sp, #0
 800278c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	689b      	ldr	r3, [r3, #8]
 8002792:	f003 0304 	and.w	r3, r3, #4
 8002796:	2b04      	cmp	r3, #4
 8002798:	d101      	bne.n	800279e <LL_ADC_REG_IsConversionOngoing+0x18>
 800279a:	2301      	movs	r3, #1
 800279c:	e000      	b.n	80027a0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800279e:	2300      	movs	r3, #0
}
 80027a0:	4618      	mov	r0, r3
 80027a2:	370c      	adds	r7, #12
 80027a4:	46bd      	mov	sp, r7
 80027a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027aa:	4770      	bx	lr

080027ac <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80027ac:	b480      	push	{r7}
 80027ae:	b083      	sub	sp, #12
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	689b      	ldr	r3, [r3, #8]
 80027b8:	f003 0308 	and.w	r3, r3, #8
 80027bc:	2b08      	cmp	r3, #8
 80027be:	d101      	bne.n	80027c4 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80027c0:	2301      	movs	r3, #1
 80027c2:	e000      	b.n	80027c6 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80027c4:	2300      	movs	r3, #0
}
 80027c6:	4618      	mov	r0, r3
 80027c8:	370c      	adds	r7, #12
 80027ca:	46bd      	mov	sp, r7
 80027cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d0:	4770      	bx	lr
	...

080027d4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b088      	sub	sp, #32
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80027dc:	2300      	movs	r3, #0
 80027de:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80027e0:	2300      	movs	r3, #0
 80027e2:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d101      	bne.n	80027ee <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80027ea:	2301      	movs	r3, #1
 80027ec:	e126      	b.n	8002a3c <HAL_ADC_Init+0x268>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	691b      	ldr	r3, [r3, #16]
 80027f2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d109      	bne.n	8002810 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80027fc:	6878      	ldr	r0, [r7, #4]
 80027fe:	f7ff fb5b 	bl	8001eb8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	2200      	movs	r2, #0
 8002806:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2200      	movs	r2, #0
 800280c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4618      	mov	r0, r3
 8002816:	f7ff ff3f 	bl	8002698 <LL_ADC_IsDeepPowerDownEnabled>
 800281a:	4603      	mov	r3, r0
 800281c:	2b00      	cmp	r3, #0
 800281e:	d004      	beq.n	800282a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	4618      	mov	r0, r3
 8002826:	f7ff ff25 	bl	8002674 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	4618      	mov	r0, r3
 8002830:	f7ff ff5a 	bl	80026e8 <LL_ADC_IsInternalRegulatorEnabled>
 8002834:	4603      	mov	r3, r0
 8002836:	2b00      	cmp	r3, #0
 8002838:	d115      	bne.n	8002866 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	4618      	mov	r0, r3
 8002840:	f7ff ff3e 	bl	80026c0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002844:	4b7f      	ldr	r3, [pc, #508]	@ (8002a44 <HAL_ADC_Init+0x270>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	099b      	lsrs	r3, r3, #6
 800284a:	4a7f      	ldr	r2, [pc, #508]	@ (8002a48 <HAL_ADC_Init+0x274>)
 800284c:	fba2 2303 	umull	r2, r3, r2, r3
 8002850:	099b      	lsrs	r3, r3, #6
 8002852:	3301      	adds	r3, #1
 8002854:	005b      	lsls	r3, r3, #1
 8002856:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002858:	e002      	b.n	8002860 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	3b01      	subs	r3, #1
 800285e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	2b00      	cmp	r3, #0
 8002864:	d1f9      	bne.n	800285a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	4618      	mov	r0, r3
 800286c:	f7ff ff3c 	bl	80026e8 <LL_ADC_IsInternalRegulatorEnabled>
 8002870:	4603      	mov	r3, r0
 8002872:	2b00      	cmp	r3, #0
 8002874:	d10d      	bne.n	8002892 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800287a:	f043 0210 	orr.w	r2, r3, #16
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002886:	f043 0201 	orr.w	r2, r3, #1
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 800288e:	2301      	movs	r3, #1
 8002890:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	4618      	mov	r0, r3
 8002898:	f7ff ff75 	bl	8002786 <LL_ADC_REG_IsConversionOngoing>
 800289c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028a2:	f003 0310 	and.w	r3, r3, #16
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	f040 80bf 	bne.w	8002a2a <HAL_ADC_Init+0x256>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80028ac:	697b      	ldr	r3, [r7, #20]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	f040 80bb 	bne.w	8002a2a <HAL_ADC_Init+0x256>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028b8:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80028bc:	f043 0202 	orr.w	r2, r3, #2
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	4618      	mov	r0, r3
 80028ca:	f7ff ff35 	bl	8002738 <LL_ADC_IsEnabled>
 80028ce:	4603      	mov	r3, r0
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d10b      	bne.n	80028ec <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80028d4:	485d      	ldr	r0, [pc, #372]	@ (8002a4c <HAL_ADC_Init+0x278>)
 80028d6:	f7ff ff2f 	bl	8002738 <LL_ADC_IsEnabled>
 80028da:	4603      	mov	r3, r0
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d105      	bne.n	80028ec <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	685b      	ldr	r3, [r3, #4]
 80028e4:	4619      	mov	r1, r3
 80028e6:	485a      	ldr	r0, [pc, #360]	@ (8002a50 <HAL_ADC_Init+0x27c>)
 80028e8:	f7ff fdac 	bl	8002444 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	7e5b      	ldrb	r3, [r3, #25]
 80028f0:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80028f6:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80028fc:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8002902:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	f893 3020 	ldrb.w	r3, [r3, #32]
 800290a:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800290c:	4313      	orrs	r3, r2
 800290e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002916:	2b01      	cmp	r3, #1
 8002918:	d106      	bne.n	8002928 <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800291e:	3b01      	subs	r3, #1
 8002920:	045b      	lsls	r3, r3, #17
 8002922:	69ba      	ldr	r2, [r7, #24]
 8002924:	4313      	orrs	r3, r2
 8002926:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800292c:	2b00      	cmp	r3, #0
 800292e:	d009      	beq.n	8002944 <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002934:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800293c:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800293e:	69ba      	ldr	r2, [r7, #24]
 8002940:	4313      	orrs	r3, r2
 8002942:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	68da      	ldr	r2, [r3, #12]
 800294a:	4b42      	ldr	r3, [pc, #264]	@ (8002a54 <HAL_ADC_Init+0x280>)
 800294c:	4013      	ands	r3, r2
 800294e:	687a      	ldr	r2, [r7, #4]
 8002950:	6812      	ldr	r2, [r2, #0]
 8002952:	69b9      	ldr	r1, [r7, #24]
 8002954:	430b      	orrs	r3, r1
 8002956:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4618      	mov	r0, r3
 800295e:	f7ff ff25 	bl	80027ac <LL_ADC_INJ_IsConversionOngoing>
 8002962:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002964:	697b      	ldr	r3, [r7, #20]
 8002966:	2b00      	cmp	r3, #0
 8002968:	d13d      	bne.n	80029e6 <HAL_ADC_Init+0x212>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800296a:	693b      	ldr	r3, [r7, #16]
 800296c:	2b00      	cmp	r3, #0
 800296e:	d13a      	bne.n	80029e6 <HAL_ADC_Init+0x212>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002974:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800297c:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800297e:	4313      	orrs	r3, r2
 8002980:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	68db      	ldr	r3, [r3, #12]
 8002988:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800298c:	f023 0302 	bic.w	r3, r3, #2
 8002990:	687a      	ldr	r2, [r7, #4]
 8002992:	6812      	ldr	r2, [r2, #0]
 8002994:	69b9      	ldr	r1, [r7, #24]
 8002996:	430b      	orrs	r3, r1
 8002998:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80029a0:	2b01      	cmp	r3, #1
 80029a2:	d118      	bne.n	80029d6 <HAL_ADC_Init+0x202>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	691b      	ldr	r3, [r3, #16]
 80029aa:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80029ae:	f023 0304 	bic.w	r3, r3, #4
 80029b2:	687a      	ldr	r2, [r7, #4]
 80029b4:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 80029b6:	687a      	ldr	r2, [r7, #4]
 80029b8:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80029ba:	4311      	orrs	r1, r2
 80029bc:	687a      	ldr	r2, [r7, #4]
 80029be:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80029c0:	4311      	orrs	r1, r2
 80029c2:	687a      	ldr	r2, [r7, #4]
 80029c4:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80029c6:	430a      	orrs	r2, r1
 80029c8:	431a      	orrs	r2, r3
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f042 0201 	orr.w	r2, r2, #1
 80029d2:	611a      	str	r2, [r3, #16]
 80029d4:	e007      	b.n	80029e6 <HAL_ADC_Init+0x212>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	691a      	ldr	r2, [r3, #16]
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f022 0201 	bic.w	r2, r2, #1
 80029e4:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	691b      	ldr	r3, [r3, #16]
 80029ea:	2b01      	cmp	r3, #1
 80029ec:	d10c      	bne.n	8002a08 <HAL_ADC_Init+0x234>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029f4:	f023 010f 	bic.w	r1, r3, #15
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	69db      	ldr	r3, [r3, #28]
 80029fc:	1e5a      	subs	r2, r3, #1
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	430a      	orrs	r2, r1
 8002a04:	631a      	str	r2, [r3, #48]	@ 0x30
 8002a06:	e007      	b.n	8002a18 <HAL_ADC_Init+0x244>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f022 020f 	bic.w	r2, r2, #15
 8002a16:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a1c:	f023 0303 	bic.w	r3, r3, #3
 8002a20:	f043 0201 	orr.w	r2, r3, #1
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	655a      	str	r2, [r3, #84]	@ 0x54
 8002a28:	e007      	b.n	8002a3a <HAL_ADC_Init+0x266>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a2e:	f043 0210 	orr.w	r2, r3, #16
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002a36:	2301      	movs	r3, #1
 8002a38:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002a3a:	7ffb      	ldrb	r3, [r7, #31]
}
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	3720      	adds	r7, #32
 8002a40:	46bd      	mov	sp, r7
 8002a42:	bd80      	pop	{r7, pc}
 8002a44:	20000000 	.word	0x20000000
 8002a48:	053e2d63 	.word	0x053e2d63
 8002a4c:	50040000 	.word	0x50040000
 8002a50:	50040300 	.word	0x50040300
 8002a54:	fff0c007 	.word	0xfff0c007

08002a58 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b086      	sub	sp, #24
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	60f8      	str	r0, [r7, #12]
 8002a60:	60b9      	str	r1, [r7, #8]
 8002a62:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	4618      	mov	r0, r3
 8002a6a:	f7ff fe8c 	bl	8002786 <LL_ADC_REG_IsConversionOngoing>
 8002a6e:	4603      	mov	r3, r0
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d167      	bne.n	8002b44 <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002a7a:	2b01      	cmp	r3, #1
 8002a7c:	d101      	bne.n	8002a82 <HAL_ADC_Start_DMA+0x2a>
 8002a7e:	2302      	movs	r3, #2
 8002a80:	e063      	b.n	8002b4a <HAL_ADC_Start_DMA+0xf2>
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	2201      	movs	r2, #1
 8002a86:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002a8a:	68f8      	ldr	r0, [r7, #12]
 8002a8c:	f000 fc5e 	bl	800334c <ADC_Enable>
 8002a90:	4603      	mov	r3, r0
 8002a92:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002a94:	7dfb      	ldrb	r3, [r7, #23]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d14f      	bne.n	8002b3a <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a9e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002aa2:	f023 0301 	bic.w	r3, r3, #1
 8002aa6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	655a      	str	r2, [r3, #84]	@ 0x54
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ab2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d006      	beq.n	8002ac8 <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002abe:	f023 0206 	bic.w	r2, r3, #6
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	659a      	str	r2, [r3, #88]	@ 0x58
 8002ac6:	e002      	b.n	8002ace <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	2200      	movs	r2, #0
 8002acc:	659a      	str	r2, [r3, #88]	@ 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ad2:	4a20      	ldr	r2, [pc, #128]	@ (8002b54 <HAL_ADC_Start_DMA+0xfc>)
 8002ad4:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ada:	4a1f      	ldr	r2, [pc, #124]	@ (8002b58 <HAL_ADC_Start_DMA+0x100>)
 8002adc:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ae2:	4a1e      	ldr	r2, [pc, #120]	@ (8002b5c <HAL_ADC_Start_DMA+0x104>)
 8002ae4:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	221c      	movs	r2, #28
 8002aec:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	2200      	movs	r2, #0
 8002af2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	685a      	ldr	r2, [r3, #4]
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f042 0210 	orr.w	r2, r2, #16
 8002b04:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	68da      	ldr	r2, [r3, #12]
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f042 0201 	orr.w	r2, r2, #1
 8002b14:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	3340      	adds	r3, #64	@ 0x40
 8002b20:	4619      	mov	r1, r3
 8002b22:	68ba      	ldr	r2, [r7, #8]
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	f000 fef5 	bl	8003914 <HAL_DMA_Start_IT>
 8002b2a:	4603      	mov	r3, r0
 8002b2c:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	4618      	mov	r0, r3
 8002b34:	f7ff fe13 	bl	800275e <LL_ADC_REG_StartConversion>
 8002b38:	e006      	b.n	8002b48 <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8002b42:	e001      	b.n	8002b48 <HAL_ADC_Start_DMA+0xf0>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002b44:	2302      	movs	r3, #2
 8002b46:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002b48:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	3718      	adds	r7, #24
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bd80      	pop	{r7, pc}
 8002b52:	bf00      	nop
 8002b54:	08003459 	.word	0x08003459
 8002b58:	08003531 	.word	0x08003531
 8002b5c:	0800354d 	.word	0x0800354d

08002b60 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002b60:	b480      	push	{r7}
 8002b62:	b083      	sub	sp, #12
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002b68:	bf00      	nop
 8002b6a:	370c      	adds	r7, #12
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b72:	4770      	bx	lr

08002b74 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002b74:	b480      	push	{r7}
 8002b76:	b083      	sub	sp, #12
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002b7c:	bf00      	nop
 8002b7e:	370c      	adds	r7, #12
 8002b80:	46bd      	mov	sp, r7
 8002b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b86:	4770      	bx	lr

08002b88 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b0b6      	sub	sp, #216	@ 0xd8
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
 8002b90:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b92:	2300      	movs	r3, #0
 8002b94:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002b98:	2300      	movs	r3, #0
 8002b9a:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002ba2:	2b01      	cmp	r3, #1
 8002ba4:	d101      	bne.n	8002baa <HAL_ADC_ConfigChannel+0x22>
 8002ba6:	2302      	movs	r3, #2
 8002ba8:	e3bb      	b.n	8003322 <HAL_ADC_ConfigChannel+0x79a>
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	2201      	movs	r2, #1
 8002bae:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	f7ff fde5 	bl	8002786 <LL_ADC_REG_IsConversionOngoing>
 8002bbc:	4603      	mov	r3, r0
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	f040 83a0 	bne.w	8003304 <HAL_ADC_ConfigChannel+0x77c>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	685b      	ldr	r3, [r3, #4]
 8002bc8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	685b      	ldr	r3, [r3, #4]
 8002bd0:	2b05      	cmp	r3, #5
 8002bd2:	d824      	bhi.n	8002c1e <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	685b      	ldr	r3, [r3, #4]
 8002bd8:	3b02      	subs	r3, #2
 8002bda:	2b03      	cmp	r3, #3
 8002bdc:	d81b      	bhi.n	8002c16 <HAL_ADC_ConfigChannel+0x8e>
 8002bde:	a201      	add	r2, pc, #4	@ (adr r2, 8002be4 <HAL_ADC_ConfigChannel+0x5c>)
 8002be0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002be4:	08002bf5 	.word	0x08002bf5
 8002be8:	08002bfd 	.word	0x08002bfd
 8002bec:	08002c05 	.word	0x08002c05
 8002bf0:	08002c0d 	.word	0x08002c0d
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8002bf4:	230c      	movs	r3, #12
 8002bf6:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002bfa:	e010      	b.n	8002c1e <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8002bfc:	2312      	movs	r3, #18
 8002bfe:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002c02:	e00c      	b.n	8002c1e <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8002c04:	2318      	movs	r3, #24
 8002c06:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002c0a:	e008      	b.n	8002c1e <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8002c0c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002c10:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002c14:	e003      	b.n	8002c1e <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8002c16:	2306      	movs	r3, #6
 8002c18:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002c1c:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6818      	ldr	r0, [r3, #0]
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	461a      	mov	r2, r3
 8002c28:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8002c2c:	f7ff fca6 	bl	800257c <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4618      	mov	r0, r3
 8002c36:	f7ff fda6 	bl	8002786 <LL_ADC_REG_IsConversionOngoing>
 8002c3a:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	4618      	mov	r0, r3
 8002c44:	f7ff fdb2 	bl	80027ac <LL_ADC_INJ_IsConversionOngoing>
 8002c48:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002c4c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	f040 81a4 	bne.w	8002f9e <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002c56:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	f040 819f 	bne.w	8002f9e <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6818      	ldr	r0, [r3, #0]
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	6819      	ldr	r1, [r3, #0]
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	689b      	ldr	r3, [r3, #8]
 8002c6c:	461a      	mov	r2, r3
 8002c6e:	f7ff fcb1 	bl	80025d4 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	695a      	ldr	r2, [r3, #20]
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	68db      	ldr	r3, [r3, #12]
 8002c7c:	08db      	lsrs	r3, r3, #3
 8002c7e:	f003 0303 	and.w	r3, r3, #3
 8002c82:	005b      	lsls	r3, r3, #1
 8002c84:	fa02 f303 	lsl.w	r3, r2, r3
 8002c88:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	691b      	ldr	r3, [r3, #16]
 8002c90:	2b04      	cmp	r3, #4
 8002c92:	d00a      	beq.n	8002caa <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6818      	ldr	r0, [r3, #0]
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	6919      	ldr	r1, [r3, #16]
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	681a      	ldr	r2, [r3, #0]
 8002ca0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002ca4:	f7ff fc02 	bl	80024ac <LL_ADC_SetOffset>
 8002ca8:	e179      	b.n	8002f9e <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	2100      	movs	r1, #0
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	f7ff fc1f 	bl	80024f4 <LL_ADC_GetOffsetChannel>
 8002cb6:	4603      	mov	r3, r0
 8002cb8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d10a      	bne.n	8002cd6 <HAL_ADC_ConfigChannel+0x14e>
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	2100      	movs	r1, #0
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	f7ff fc14 	bl	80024f4 <LL_ADC_GetOffsetChannel>
 8002ccc:	4603      	mov	r3, r0
 8002cce:	0e9b      	lsrs	r3, r3, #26
 8002cd0:	f003 021f 	and.w	r2, r3, #31
 8002cd4:	e01e      	b.n	8002d14 <HAL_ADC_ConfigChannel+0x18c>
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	2100      	movs	r1, #0
 8002cdc:	4618      	mov	r0, r3
 8002cde:	f7ff fc09 	bl	80024f4 <LL_ADC_GetOffsetChannel>
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ce8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002cec:	fa93 f3a3 	rbit	r3, r3
 8002cf0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002cf4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002cf8:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002cfc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d101      	bne.n	8002d08 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 8002d04:	2320      	movs	r3, #32
 8002d06:	e004      	b.n	8002d12 <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 8002d08:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002d0c:	fab3 f383 	clz	r3, r3
 8002d10:	b2db      	uxtb	r3, r3
 8002d12:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d105      	bne.n	8002d2c <HAL_ADC_ConfigChannel+0x1a4>
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	0e9b      	lsrs	r3, r3, #26
 8002d26:	f003 031f 	and.w	r3, r3, #31
 8002d2a:	e018      	b.n	8002d5e <HAL_ADC_ConfigChannel+0x1d6>
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d34:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002d38:	fa93 f3a3 	rbit	r3, r3
 8002d3c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8002d40:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002d44:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8002d48:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d101      	bne.n	8002d54 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 8002d50:	2320      	movs	r3, #32
 8002d52:	e004      	b.n	8002d5e <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8002d54:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002d58:	fab3 f383 	clz	r3, r3
 8002d5c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002d5e:	429a      	cmp	r2, r3
 8002d60:	d106      	bne.n	8002d70 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	2200      	movs	r2, #0
 8002d68:	2100      	movs	r1, #0
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	f7ff fbd8 	bl	8002520 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	2101      	movs	r1, #1
 8002d76:	4618      	mov	r0, r3
 8002d78:	f7ff fbbc 	bl	80024f4 <LL_ADC_GetOffsetChannel>
 8002d7c:	4603      	mov	r3, r0
 8002d7e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d10a      	bne.n	8002d9c <HAL_ADC_ConfigChannel+0x214>
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	2101      	movs	r1, #1
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	f7ff fbb1 	bl	80024f4 <LL_ADC_GetOffsetChannel>
 8002d92:	4603      	mov	r3, r0
 8002d94:	0e9b      	lsrs	r3, r3, #26
 8002d96:	f003 021f 	and.w	r2, r3, #31
 8002d9a:	e01e      	b.n	8002dda <HAL_ADC_ConfigChannel+0x252>
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	2101      	movs	r1, #1
 8002da2:	4618      	mov	r0, r3
 8002da4:	f7ff fba6 	bl	80024f4 <LL_ADC_GetOffsetChannel>
 8002da8:	4603      	mov	r3, r0
 8002daa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002db2:	fa93 f3a3 	rbit	r3, r3
 8002db6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8002dba:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002dbe:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8002dc2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d101      	bne.n	8002dce <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 8002dca:	2320      	movs	r3, #32
 8002dcc:	e004      	b.n	8002dd8 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 8002dce:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002dd2:	fab3 f383 	clz	r3, r3
 8002dd6:	b2db      	uxtb	r3, r3
 8002dd8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d105      	bne.n	8002df2 <HAL_ADC_ConfigChannel+0x26a>
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	0e9b      	lsrs	r3, r3, #26
 8002dec:	f003 031f 	and.w	r3, r3, #31
 8002df0:	e018      	b.n	8002e24 <HAL_ADC_ConfigChannel+0x29c>
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dfa:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002dfe:	fa93 f3a3 	rbit	r3, r3
 8002e02:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8002e06:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002e0a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8002e0e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d101      	bne.n	8002e1a <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 8002e16:	2320      	movs	r3, #32
 8002e18:	e004      	b.n	8002e24 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 8002e1a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002e1e:	fab3 f383 	clz	r3, r3
 8002e22:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002e24:	429a      	cmp	r2, r3
 8002e26:	d106      	bne.n	8002e36 <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	2101      	movs	r1, #1
 8002e30:	4618      	mov	r0, r3
 8002e32:	f7ff fb75 	bl	8002520 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	2102      	movs	r1, #2
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	f7ff fb59 	bl	80024f4 <LL_ADC_GetOffsetChannel>
 8002e42:	4603      	mov	r3, r0
 8002e44:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d10a      	bne.n	8002e62 <HAL_ADC_ConfigChannel+0x2da>
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	2102      	movs	r1, #2
 8002e52:	4618      	mov	r0, r3
 8002e54:	f7ff fb4e 	bl	80024f4 <LL_ADC_GetOffsetChannel>
 8002e58:	4603      	mov	r3, r0
 8002e5a:	0e9b      	lsrs	r3, r3, #26
 8002e5c:	f003 021f 	and.w	r2, r3, #31
 8002e60:	e01e      	b.n	8002ea0 <HAL_ADC_ConfigChannel+0x318>
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	2102      	movs	r1, #2
 8002e68:	4618      	mov	r0, r3
 8002e6a:	f7ff fb43 	bl	80024f4 <LL_ADC_GetOffsetChannel>
 8002e6e:	4603      	mov	r3, r0
 8002e70:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e74:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002e78:	fa93 f3a3 	rbit	r3, r3
 8002e7c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8002e80:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002e84:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8002e88:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d101      	bne.n	8002e94 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 8002e90:	2320      	movs	r3, #32
 8002e92:	e004      	b.n	8002e9e <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 8002e94:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002e98:	fab3 f383 	clz	r3, r3
 8002e9c:	b2db      	uxtb	r3, r3
 8002e9e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d105      	bne.n	8002eb8 <HAL_ADC_ConfigChannel+0x330>
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	0e9b      	lsrs	r3, r3, #26
 8002eb2:	f003 031f 	and.w	r3, r3, #31
 8002eb6:	e014      	b.n	8002ee2 <HAL_ADC_ConfigChannel+0x35a>
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ebe:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002ec0:	fa93 f3a3 	rbit	r3, r3
 8002ec4:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8002ec6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002ec8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8002ecc:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d101      	bne.n	8002ed8 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 8002ed4:	2320      	movs	r3, #32
 8002ed6:	e004      	b.n	8002ee2 <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8002ed8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002edc:	fab3 f383 	clz	r3, r3
 8002ee0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002ee2:	429a      	cmp	r2, r3
 8002ee4:	d106      	bne.n	8002ef4 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	2200      	movs	r2, #0
 8002eec:	2102      	movs	r1, #2
 8002eee:	4618      	mov	r0, r3
 8002ef0:	f7ff fb16 	bl	8002520 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	2103      	movs	r1, #3
 8002efa:	4618      	mov	r0, r3
 8002efc:	f7ff fafa 	bl	80024f4 <LL_ADC_GetOffsetChannel>
 8002f00:	4603      	mov	r3, r0
 8002f02:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d10a      	bne.n	8002f20 <HAL_ADC_ConfigChannel+0x398>
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	2103      	movs	r1, #3
 8002f10:	4618      	mov	r0, r3
 8002f12:	f7ff faef 	bl	80024f4 <LL_ADC_GetOffsetChannel>
 8002f16:	4603      	mov	r3, r0
 8002f18:	0e9b      	lsrs	r3, r3, #26
 8002f1a:	f003 021f 	and.w	r2, r3, #31
 8002f1e:	e017      	b.n	8002f50 <HAL_ADC_ConfigChannel+0x3c8>
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	2103      	movs	r1, #3
 8002f26:	4618      	mov	r0, r3
 8002f28:	f7ff fae4 	bl	80024f4 <LL_ADC_GetOffsetChannel>
 8002f2c:	4603      	mov	r3, r0
 8002f2e:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f30:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002f32:	fa93 f3a3 	rbit	r3, r3
 8002f36:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8002f38:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002f3a:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8002f3c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d101      	bne.n	8002f46 <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 8002f42:	2320      	movs	r3, #32
 8002f44:	e003      	b.n	8002f4e <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 8002f46:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002f48:	fab3 f383 	clz	r3, r3
 8002f4c:	b2db      	uxtb	r3, r3
 8002f4e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d105      	bne.n	8002f68 <HAL_ADC_ConfigChannel+0x3e0>
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	0e9b      	lsrs	r3, r3, #26
 8002f62:	f003 031f 	and.w	r3, r3, #31
 8002f66:	e011      	b.n	8002f8c <HAL_ADC_ConfigChannel+0x404>
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f6e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002f70:	fa93 f3a3 	rbit	r3, r3
 8002f74:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8002f76:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002f78:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8002f7a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d101      	bne.n	8002f84 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8002f80:	2320      	movs	r3, #32
 8002f82:	e003      	b.n	8002f8c <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8002f84:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002f86:	fab3 f383 	clz	r3, r3
 8002f8a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002f8c:	429a      	cmp	r2, r3
 8002f8e:	d106      	bne.n	8002f9e <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	2200      	movs	r2, #0
 8002f96:	2103      	movs	r1, #3
 8002f98:	4618      	mov	r0, r3
 8002f9a:	f7ff fac1 	bl	8002520 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	f7ff fbc8 	bl	8002738 <LL_ADC_IsEnabled>
 8002fa8:	4603      	mov	r3, r0
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	f040 8140 	bne.w	8003230 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6818      	ldr	r0, [r3, #0]
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	6819      	ldr	r1, [r3, #0]
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	68db      	ldr	r3, [r3, #12]
 8002fbc:	461a      	mov	r2, r3
 8002fbe:	f7ff fb35 	bl	800262c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	68db      	ldr	r3, [r3, #12]
 8002fc6:	4a8f      	ldr	r2, [pc, #572]	@ (8003204 <HAL_ADC_ConfigChannel+0x67c>)
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	f040 8131 	bne.w	8003230 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d10b      	bne.n	8002ff6 <HAL_ADC_ConfigChannel+0x46e>
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	0e9b      	lsrs	r3, r3, #26
 8002fe4:	3301      	adds	r3, #1
 8002fe6:	f003 031f 	and.w	r3, r3, #31
 8002fea:	2b09      	cmp	r3, #9
 8002fec:	bf94      	ite	ls
 8002fee:	2301      	movls	r3, #1
 8002ff0:	2300      	movhi	r3, #0
 8002ff2:	b2db      	uxtb	r3, r3
 8002ff4:	e019      	b.n	800302a <HAL_ADC_ConfigChannel+0x4a2>
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ffc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002ffe:	fa93 f3a3 	rbit	r3, r3
 8003002:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8003004:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003006:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8003008:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800300a:	2b00      	cmp	r3, #0
 800300c:	d101      	bne.n	8003012 <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 800300e:	2320      	movs	r3, #32
 8003010:	e003      	b.n	800301a <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8003012:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003014:	fab3 f383 	clz	r3, r3
 8003018:	b2db      	uxtb	r3, r3
 800301a:	3301      	adds	r3, #1
 800301c:	f003 031f 	and.w	r3, r3, #31
 8003020:	2b09      	cmp	r3, #9
 8003022:	bf94      	ite	ls
 8003024:	2301      	movls	r3, #1
 8003026:	2300      	movhi	r3, #0
 8003028:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800302a:	2b00      	cmp	r3, #0
 800302c:	d079      	beq.n	8003122 <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003036:	2b00      	cmp	r3, #0
 8003038:	d107      	bne.n	800304a <HAL_ADC_ConfigChannel+0x4c2>
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	0e9b      	lsrs	r3, r3, #26
 8003040:	3301      	adds	r3, #1
 8003042:	069b      	lsls	r3, r3, #26
 8003044:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003048:	e015      	b.n	8003076 <HAL_ADC_ConfigChannel+0x4ee>
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003050:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003052:	fa93 f3a3 	rbit	r3, r3
 8003056:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8003058:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800305a:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 800305c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800305e:	2b00      	cmp	r3, #0
 8003060:	d101      	bne.n	8003066 <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 8003062:	2320      	movs	r3, #32
 8003064:	e003      	b.n	800306e <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 8003066:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003068:	fab3 f383 	clz	r3, r3
 800306c:	b2db      	uxtb	r3, r3
 800306e:	3301      	adds	r3, #1
 8003070:	069b      	lsls	r3, r3, #26
 8003072:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003076:	683b      	ldr	r3, [r7, #0]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800307e:	2b00      	cmp	r3, #0
 8003080:	d109      	bne.n	8003096 <HAL_ADC_ConfigChannel+0x50e>
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	0e9b      	lsrs	r3, r3, #26
 8003088:	3301      	adds	r3, #1
 800308a:	f003 031f 	and.w	r3, r3, #31
 800308e:	2101      	movs	r1, #1
 8003090:	fa01 f303 	lsl.w	r3, r1, r3
 8003094:	e017      	b.n	80030c6 <HAL_ADC_ConfigChannel+0x53e>
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800309c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800309e:	fa93 f3a3 	rbit	r3, r3
 80030a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 80030a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80030a6:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 80030a8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d101      	bne.n	80030b2 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 80030ae:	2320      	movs	r3, #32
 80030b0:	e003      	b.n	80030ba <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 80030b2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80030b4:	fab3 f383 	clz	r3, r3
 80030b8:	b2db      	uxtb	r3, r3
 80030ba:	3301      	adds	r3, #1
 80030bc:	f003 031f 	and.w	r3, r3, #31
 80030c0:	2101      	movs	r1, #1
 80030c2:	fa01 f303 	lsl.w	r3, r1, r3
 80030c6:	ea42 0103 	orr.w	r1, r2, r3
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d10a      	bne.n	80030ec <HAL_ADC_ConfigChannel+0x564>
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	0e9b      	lsrs	r3, r3, #26
 80030dc:	3301      	adds	r3, #1
 80030de:	f003 021f 	and.w	r2, r3, #31
 80030e2:	4613      	mov	r3, r2
 80030e4:	005b      	lsls	r3, r3, #1
 80030e6:	4413      	add	r3, r2
 80030e8:	051b      	lsls	r3, r3, #20
 80030ea:	e018      	b.n	800311e <HAL_ADC_ConfigChannel+0x596>
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80030f4:	fa93 f3a3 	rbit	r3, r3
 80030f8:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 80030fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030fc:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 80030fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003100:	2b00      	cmp	r3, #0
 8003102:	d101      	bne.n	8003108 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 8003104:	2320      	movs	r3, #32
 8003106:	e003      	b.n	8003110 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 8003108:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800310a:	fab3 f383 	clz	r3, r3
 800310e:	b2db      	uxtb	r3, r3
 8003110:	3301      	adds	r3, #1
 8003112:	f003 021f 	and.w	r2, r3, #31
 8003116:	4613      	mov	r3, r2
 8003118:	005b      	lsls	r3, r3, #1
 800311a:	4413      	add	r3, r2
 800311c:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800311e:	430b      	orrs	r3, r1
 8003120:	e081      	b.n	8003226 <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800312a:	2b00      	cmp	r3, #0
 800312c:	d107      	bne.n	800313e <HAL_ADC_ConfigChannel+0x5b6>
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	0e9b      	lsrs	r3, r3, #26
 8003134:	3301      	adds	r3, #1
 8003136:	069b      	lsls	r3, r3, #26
 8003138:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800313c:	e015      	b.n	800316a <HAL_ADC_ConfigChannel+0x5e2>
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003144:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003146:	fa93 f3a3 	rbit	r3, r3
 800314a:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 800314c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800314e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8003150:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003152:	2b00      	cmp	r3, #0
 8003154:	d101      	bne.n	800315a <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 8003156:	2320      	movs	r3, #32
 8003158:	e003      	b.n	8003162 <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 800315a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800315c:	fab3 f383 	clz	r3, r3
 8003160:	b2db      	uxtb	r3, r3
 8003162:	3301      	adds	r3, #1
 8003164:	069b      	lsls	r3, r3, #26
 8003166:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003172:	2b00      	cmp	r3, #0
 8003174:	d109      	bne.n	800318a <HAL_ADC_ConfigChannel+0x602>
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	0e9b      	lsrs	r3, r3, #26
 800317c:	3301      	adds	r3, #1
 800317e:	f003 031f 	and.w	r3, r3, #31
 8003182:	2101      	movs	r1, #1
 8003184:	fa01 f303 	lsl.w	r3, r1, r3
 8003188:	e017      	b.n	80031ba <HAL_ADC_ConfigChannel+0x632>
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003190:	69fb      	ldr	r3, [r7, #28]
 8003192:	fa93 f3a3 	rbit	r3, r3
 8003196:	61bb      	str	r3, [r7, #24]
  return result;
 8003198:	69bb      	ldr	r3, [r7, #24]
 800319a:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800319c:	6a3b      	ldr	r3, [r7, #32]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d101      	bne.n	80031a6 <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 80031a2:	2320      	movs	r3, #32
 80031a4:	e003      	b.n	80031ae <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 80031a6:	6a3b      	ldr	r3, [r7, #32]
 80031a8:	fab3 f383 	clz	r3, r3
 80031ac:	b2db      	uxtb	r3, r3
 80031ae:	3301      	adds	r3, #1
 80031b0:	f003 031f 	and.w	r3, r3, #31
 80031b4:	2101      	movs	r1, #1
 80031b6:	fa01 f303 	lsl.w	r3, r1, r3
 80031ba:	ea42 0103 	orr.w	r1, r2, r3
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d10d      	bne.n	80031e6 <HAL_ADC_ConfigChannel+0x65e>
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	0e9b      	lsrs	r3, r3, #26
 80031d0:	3301      	adds	r3, #1
 80031d2:	f003 021f 	and.w	r2, r3, #31
 80031d6:	4613      	mov	r3, r2
 80031d8:	005b      	lsls	r3, r3, #1
 80031da:	4413      	add	r3, r2
 80031dc:	3b1e      	subs	r3, #30
 80031de:	051b      	lsls	r3, r3, #20
 80031e0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80031e4:	e01e      	b.n	8003224 <HAL_ADC_ConfigChannel+0x69c>
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031ec:	693b      	ldr	r3, [r7, #16]
 80031ee:	fa93 f3a3 	rbit	r3, r3
 80031f2:	60fb      	str	r3, [r7, #12]
  return result;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80031f8:	697b      	ldr	r3, [r7, #20]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d104      	bne.n	8003208 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 80031fe:	2320      	movs	r3, #32
 8003200:	e006      	b.n	8003210 <HAL_ADC_ConfigChannel+0x688>
 8003202:	bf00      	nop
 8003204:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8003208:	697b      	ldr	r3, [r7, #20]
 800320a:	fab3 f383 	clz	r3, r3
 800320e:	b2db      	uxtb	r3, r3
 8003210:	3301      	adds	r3, #1
 8003212:	f003 021f 	and.w	r2, r3, #31
 8003216:	4613      	mov	r3, r2
 8003218:	005b      	lsls	r3, r3, #1
 800321a:	4413      	add	r3, r2
 800321c:	3b1e      	subs	r3, #30
 800321e:	051b      	lsls	r3, r3, #20
 8003220:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003224:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8003226:	683a      	ldr	r2, [r7, #0]
 8003228:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800322a:	4619      	mov	r1, r3
 800322c:	f7ff f9d2 	bl	80025d4 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	681a      	ldr	r2, [r3, #0]
 8003234:	4b3d      	ldr	r3, [pc, #244]	@ (800332c <HAL_ADC_ConfigChannel+0x7a4>)
 8003236:	4013      	ands	r3, r2
 8003238:	2b00      	cmp	r3, #0
 800323a:	d06c      	beq.n	8003316 <HAL_ADC_ConfigChannel+0x78e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800323c:	483c      	ldr	r0, [pc, #240]	@ (8003330 <HAL_ADC_ConfigChannel+0x7a8>)
 800323e:	f7ff f927 	bl	8002490 <LL_ADC_GetCommonPathInternalCh>
 8003242:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	4a3a      	ldr	r2, [pc, #232]	@ (8003334 <HAL_ADC_ConfigChannel+0x7ac>)
 800324c:	4293      	cmp	r3, r2
 800324e:	d127      	bne.n	80032a0 <HAL_ADC_ConfigChannel+0x718>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003250:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003254:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003258:	2b00      	cmp	r3, #0
 800325a:	d121      	bne.n	80032a0 <HAL_ADC_ConfigChannel+0x718>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4a35      	ldr	r2, [pc, #212]	@ (8003338 <HAL_ADC_ConfigChannel+0x7b0>)
 8003262:	4293      	cmp	r3, r2
 8003264:	d157      	bne.n	8003316 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003266:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800326a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800326e:	4619      	mov	r1, r3
 8003270:	482f      	ldr	r0, [pc, #188]	@ (8003330 <HAL_ADC_ConfigChannel+0x7a8>)
 8003272:	f7ff f8fa 	bl	800246a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003276:	4b31      	ldr	r3, [pc, #196]	@ (800333c <HAL_ADC_ConfigChannel+0x7b4>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	099b      	lsrs	r3, r3, #6
 800327c:	4a30      	ldr	r2, [pc, #192]	@ (8003340 <HAL_ADC_ConfigChannel+0x7b8>)
 800327e:	fba2 2303 	umull	r2, r3, r2, r3
 8003282:	099b      	lsrs	r3, r3, #6
 8003284:	1c5a      	adds	r2, r3, #1
 8003286:	4613      	mov	r3, r2
 8003288:	005b      	lsls	r3, r3, #1
 800328a:	4413      	add	r3, r2
 800328c:	009b      	lsls	r3, r3, #2
 800328e:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8003290:	e002      	b.n	8003298 <HAL_ADC_ConfigChannel+0x710>
          {
            wait_loop_index--;
 8003292:	68bb      	ldr	r3, [r7, #8]
 8003294:	3b01      	subs	r3, #1
 8003296:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8003298:	68bb      	ldr	r3, [r7, #8]
 800329a:	2b00      	cmp	r3, #0
 800329c:	d1f9      	bne.n	8003292 <HAL_ADC_ConfigChannel+0x70a>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800329e:	e03a      	b.n	8003316 <HAL_ADC_ConfigChannel+0x78e>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	4a27      	ldr	r2, [pc, #156]	@ (8003344 <HAL_ADC_ConfigChannel+0x7bc>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d113      	bne.n	80032d2 <HAL_ADC_ConfigChannel+0x74a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80032aa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80032ae:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d10d      	bne.n	80032d2 <HAL_ADC_ConfigChannel+0x74a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	4a1f      	ldr	r2, [pc, #124]	@ (8003338 <HAL_ADC_ConfigChannel+0x7b0>)
 80032bc:	4293      	cmp	r3, r2
 80032be:	d12a      	bne.n	8003316 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80032c0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80032c4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80032c8:	4619      	mov	r1, r3
 80032ca:	4819      	ldr	r0, [pc, #100]	@ (8003330 <HAL_ADC_ConfigChannel+0x7a8>)
 80032cc:	f7ff f8cd 	bl	800246a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80032d0:	e021      	b.n	8003316 <HAL_ADC_ConfigChannel+0x78e>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	4a1c      	ldr	r2, [pc, #112]	@ (8003348 <HAL_ADC_ConfigChannel+0x7c0>)
 80032d8:	4293      	cmp	r3, r2
 80032da:	d11c      	bne.n	8003316 <HAL_ADC_ConfigChannel+0x78e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80032dc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80032e0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d116      	bne.n	8003316 <HAL_ADC_ConfigChannel+0x78e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	4a12      	ldr	r2, [pc, #72]	@ (8003338 <HAL_ADC_ConfigChannel+0x7b0>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d111      	bne.n	8003316 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80032f2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80032f6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80032fa:	4619      	mov	r1, r3
 80032fc:	480c      	ldr	r0, [pc, #48]	@ (8003330 <HAL_ADC_ConfigChannel+0x7a8>)
 80032fe:	f7ff f8b4 	bl	800246a <LL_ADC_SetCommonPathInternalCh>
 8003302:	e008      	b.n	8003316 <HAL_ADC_ConfigChannel+0x78e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003308:	f043 0220 	orr.w	r2, r3, #32
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8003310:	2301      	movs	r3, #1
 8003312:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	2200      	movs	r2, #0
 800331a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 800331e:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8003322:	4618      	mov	r0, r3
 8003324:	37d8      	adds	r7, #216	@ 0xd8
 8003326:	46bd      	mov	sp, r7
 8003328:	bd80      	pop	{r7, pc}
 800332a:	bf00      	nop
 800332c:	80080000 	.word	0x80080000
 8003330:	50040300 	.word	0x50040300
 8003334:	c7520000 	.word	0xc7520000
 8003338:	50040000 	.word	0x50040000
 800333c:	20000000 	.word	0x20000000
 8003340:	053e2d63 	.word	0x053e2d63
 8003344:	cb840000 	.word	0xcb840000
 8003348:	80000001 	.word	0x80000001

0800334c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b084      	sub	sp, #16
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003354:	2300      	movs	r3, #0
 8003356:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	4618      	mov	r0, r3
 800335e:	f7ff f9eb 	bl	8002738 <LL_ADC_IsEnabled>
 8003362:	4603      	mov	r3, r0
 8003364:	2b00      	cmp	r3, #0
 8003366:	d169      	bne.n	800343c <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	689a      	ldr	r2, [r3, #8]
 800336e:	4b36      	ldr	r3, [pc, #216]	@ (8003448 <ADC_Enable+0xfc>)
 8003370:	4013      	ands	r3, r2
 8003372:	2b00      	cmp	r3, #0
 8003374:	d00d      	beq.n	8003392 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800337a:	f043 0210 	orr.w	r2, r3, #16
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003386:	f043 0201 	orr.w	r2, r3, #1
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 800338e:	2301      	movs	r3, #1
 8003390:	e055      	b.n	800343e <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	4618      	mov	r0, r3
 8003398:	f7ff f9ba 	bl	8002710 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800339c:	482b      	ldr	r0, [pc, #172]	@ (800344c <ADC_Enable+0x100>)
 800339e:	f7ff f877 	bl	8002490 <LL_ADC_GetCommonPathInternalCh>
 80033a2:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80033a4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d013      	beq.n	80033d4 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80033ac:	4b28      	ldr	r3, [pc, #160]	@ (8003450 <ADC_Enable+0x104>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	099b      	lsrs	r3, r3, #6
 80033b2:	4a28      	ldr	r2, [pc, #160]	@ (8003454 <ADC_Enable+0x108>)
 80033b4:	fba2 2303 	umull	r2, r3, r2, r3
 80033b8:	099b      	lsrs	r3, r3, #6
 80033ba:	1c5a      	adds	r2, r3, #1
 80033bc:	4613      	mov	r3, r2
 80033be:	005b      	lsls	r3, r3, #1
 80033c0:	4413      	add	r3, r2
 80033c2:	009b      	lsls	r3, r3, #2
 80033c4:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80033c6:	e002      	b.n	80033ce <ADC_Enable+0x82>
      {
        wait_loop_index--;
 80033c8:	68bb      	ldr	r3, [r7, #8]
 80033ca:	3b01      	subs	r3, #1
 80033cc:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80033ce:	68bb      	ldr	r3, [r7, #8]
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d1f9      	bne.n	80033c8 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80033d4:	f7fe fff6 	bl	80023c4 <HAL_GetTick>
 80033d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80033da:	e028      	b.n	800342e <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	4618      	mov	r0, r3
 80033e2:	f7ff f9a9 	bl	8002738 <LL_ADC_IsEnabled>
 80033e6:	4603      	mov	r3, r0
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d104      	bne.n	80033f6 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	4618      	mov	r0, r3
 80033f2:	f7ff f98d 	bl	8002710 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80033f6:	f7fe ffe5 	bl	80023c4 <HAL_GetTick>
 80033fa:	4602      	mov	r2, r0
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	1ad3      	subs	r3, r2, r3
 8003400:	2b02      	cmp	r3, #2
 8003402:	d914      	bls.n	800342e <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f003 0301 	and.w	r3, r3, #1
 800340e:	2b01      	cmp	r3, #1
 8003410:	d00d      	beq.n	800342e <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003416:	f043 0210 	orr.w	r2, r3, #16
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003422:	f043 0201 	orr.w	r2, r3, #1
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 800342a:	2301      	movs	r3, #1
 800342c:	e007      	b.n	800343e <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f003 0301 	and.w	r3, r3, #1
 8003438:	2b01      	cmp	r3, #1
 800343a:	d1cf      	bne.n	80033dc <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800343c:	2300      	movs	r3, #0
}
 800343e:	4618      	mov	r0, r3
 8003440:	3710      	adds	r7, #16
 8003442:	46bd      	mov	sp, r7
 8003444:	bd80      	pop	{r7, pc}
 8003446:	bf00      	nop
 8003448:	8000003f 	.word	0x8000003f
 800344c:	50040300 	.word	0x50040300
 8003450:	20000000 	.word	0x20000000
 8003454:	053e2d63 	.word	0x053e2d63

08003458 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	b084      	sub	sp, #16
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003464:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800346a:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800346e:	2b00      	cmp	r3, #0
 8003470:	d14b      	bne.n	800350a <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003476:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f003 0308 	and.w	r3, r3, #8
 8003488:	2b00      	cmp	r3, #0
 800348a:	d021      	beq.n	80034d0 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	4618      	mov	r0, r3
 8003492:	f7ff f860 	bl	8002556 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003496:	4603      	mov	r3, r0
 8003498:	2b00      	cmp	r3, #0
 800349a:	d032      	beq.n	8003502 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	68db      	ldr	r3, [r3, #12]
 80034a2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d12b      	bne.n	8003502 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034ae:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	655a      	str	r2, [r3, #84]	@ 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034ba:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d11f      	bne.n	8003502 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034c6:	f043 0201 	orr.w	r2, r3, #1
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	655a      	str	r2, [r3, #84]	@ 0x54
 80034ce:	e018      	b.n	8003502 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	68db      	ldr	r3, [r3, #12]
 80034d6:	f003 0302 	and.w	r3, r3, #2
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d111      	bne.n	8003502 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034e2:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	655a      	str	r2, [r3, #84]	@ 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034ee:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d105      	bne.n	8003502 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034fa:	f043 0201 	orr.w	r2, r3, #1
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003502:	68f8      	ldr	r0, [r7, #12]
 8003504:	f7fe f956 	bl	80017b4 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003508:	e00e      	b.n	8003528 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800350e:	f003 0310 	and.w	r3, r3, #16
 8003512:	2b00      	cmp	r3, #0
 8003514:	d003      	beq.n	800351e <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8003516:	68f8      	ldr	r0, [r7, #12]
 8003518:	f7ff fb2c 	bl	8002b74 <HAL_ADC_ErrorCallback>
}
 800351c:	e004      	b.n	8003528 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003522:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003524:	6878      	ldr	r0, [r7, #4]
 8003526:	4798      	blx	r3
}
 8003528:	bf00      	nop
 800352a:	3710      	adds	r7, #16
 800352c:	46bd      	mov	sp, r7
 800352e:	bd80      	pop	{r7, pc}

08003530 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b084      	sub	sp, #16
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800353c:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800353e:	68f8      	ldr	r0, [r7, #12]
 8003540:	f7ff fb0e 	bl	8002b60 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003544:	bf00      	nop
 8003546:	3710      	adds	r7, #16
 8003548:	46bd      	mov	sp, r7
 800354a:	bd80      	pop	{r7, pc}

0800354c <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	b084      	sub	sp, #16
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003558:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800355e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800356a:	f043 0204 	orr.w	r2, r3, #4
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003572:	68f8      	ldr	r0, [r7, #12]
 8003574:	f7ff fafe 	bl	8002b74 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003578:	bf00      	nop
 800357a:	3710      	adds	r7, #16
 800357c:	46bd      	mov	sp, r7
 800357e:	bd80      	pop	{r7, pc}

08003580 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003580:	b480      	push	{r7}
 8003582:	b085      	sub	sp, #20
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	f003 0307 	and.w	r3, r3, #7
 800358e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003590:	4b0c      	ldr	r3, [pc, #48]	@ (80035c4 <__NVIC_SetPriorityGrouping+0x44>)
 8003592:	68db      	ldr	r3, [r3, #12]
 8003594:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003596:	68ba      	ldr	r2, [r7, #8]
 8003598:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800359c:	4013      	ands	r3, r2
 800359e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80035a4:	68bb      	ldr	r3, [r7, #8]
 80035a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80035a8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80035ac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80035b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80035b2:	4a04      	ldr	r2, [pc, #16]	@ (80035c4 <__NVIC_SetPriorityGrouping+0x44>)
 80035b4:	68bb      	ldr	r3, [r7, #8]
 80035b6:	60d3      	str	r3, [r2, #12]
}
 80035b8:	bf00      	nop
 80035ba:	3714      	adds	r7, #20
 80035bc:	46bd      	mov	sp, r7
 80035be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c2:	4770      	bx	lr
 80035c4:	e000ed00 	.word	0xe000ed00

080035c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80035c8:	b480      	push	{r7}
 80035ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80035cc:	4b04      	ldr	r3, [pc, #16]	@ (80035e0 <__NVIC_GetPriorityGrouping+0x18>)
 80035ce:	68db      	ldr	r3, [r3, #12]
 80035d0:	0a1b      	lsrs	r3, r3, #8
 80035d2:	f003 0307 	and.w	r3, r3, #7
}
 80035d6:	4618      	mov	r0, r3
 80035d8:	46bd      	mov	sp, r7
 80035da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035de:	4770      	bx	lr
 80035e0:	e000ed00 	.word	0xe000ed00

080035e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80035e4:	b480      	push	{r7}
 80035e6:	b083      	sub	sp, #12
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	4603      	mov	r3, r0
 80035ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80035ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	db0b      	blt.n	800360e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80035f6:	79fb      	ldrb	r3, [r7, #7]
 80035f8:	f003 021f 	and.w	r2, r3, #31
 80035fc:	4907      	ldr	r1, [pc, #28]	@ (800361c <__NVIC_EnableIRQ+0x38>)
 80035fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003602:	095b      	lsrs	r3, r3, #5
 8003604:	2001      	movs	r0, #1
 8003606:	fa00 f202 	lsl.w	r2, r0, r2
 800360a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800360e:	bf00      	nop
 8003610:	370c      	adds	r7, #12
 8003612:	46bd      	mov	sp, r7
 8003614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003618:	4770      	bx	lr
 800361a:	bf00      	nop
 800361c:	e000e100 	.word	0xe000e100

08003620 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003620:	b480      	push	{r7}
 8003622:	b083      	sub	sp, #12
 8003624:	af00      	add	r7, sp, #0
 8003626:	4603      	mov	r3, r0
 8003628:	6039      	str	r1, [r7, #0]
 800362a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800362c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003630:	2b00      	cmp	r3, #0
 8003632:	db0a      	blt.n	800364a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	b2da      	uxtb	r2, r3
 8003638:	490c      	ldr	r1, [pc, #48]	@ (800366c <__NVIC_SetPriority+0x4c>)
 800363a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800363e:	0112      	lsls	r2, r2, #4
 8003640:	b2d2      	uxtb	r2, r2
 8003642:	440b      	add	r3, r1
 8003644:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003648:	e00a      	b.n	8003660 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	b2da      	uxtb	r2, r3
 800364e:	4908      	ldr	r1, [pc, #32]	@ (8003670 <__NVIC_SetPriority+0x50>)
 8003650:	79fb      	ldrb	r3, [r7, #7]
 8003652:	f003 030f 	and.w	r3, r3, #15
 8003656:	3b04      	subs	r3, #4
 8003658:	0112      	lsls	r2, r2, #4
 800365a:	b2d2      	uxtb	r2, r2
 800365c:	440b      	add	r3, r1
 800365e:	761a      	strb	r2, [r3, #24]
}
 8003660:	bf00      	nop
 8003662:	370c      	adds	r7, #12
 8003664:	46bd      	mov	sp, r7
 8003666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366a:	4770      	bx	lr
 800366c:	e000e100 	.word	0xe000e100
 8003670:	e000ed00 	.word	0xe000ed00

08003674 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003674:	b480      	push	{r7}
 8003676:	b089      	sub	sp, #36	@ 0x24
 8003678:	af00      	add	r7, sp, #0
 800367a:	60f8      	str	r0, [r7, #12]
 800367c:	60b9      	str	r1, [r7, #8]
 800367e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	f003 0307 	and.w	r3, r3, #7
 8003686:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003688:	69fb      	ldr	r3, [r7, #28]
 800368a:	f1c3 0307 	rsb	r3, r3, #7
 800368e:	2b04      	cmp	r3, #4
 8003690:	bf28      	it	cs
 8003692:	2304      	movcs	r3, #4
 8003694:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003696:	69fb      	ldr	r3, [r7, #28]
 8003698:	3304      	adds	r3, #4
 800369a:	2b06      	cmp	r3, #6
 800369c:	d902      	bls.n	80036a4 <NVIC_EncodePriority+0x30>
 800369e:	69fb      	ldr	r3, [r7, #28]
 80036a0:	3b03      	subs	r3, #3
 80036a2:	e000      	b.n	80036a6 <NVIC_EncodePriority+0x32>
 80036a4:	2300      	movs	r3, #0
 80036a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80036a8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80036ac:	69bb      	ldr	r3, [r7, #24]
 80036ae:	fa02 f303 	lsl.w	r3, r2, r3
 80036b2:	43da      	mvns	r2, r3
 80036b4:	68bb      	ldr	r3, [r7, #8]
 80036b6:	401a      	ands	r2, r3
 80036b8:	697b      	ldr	r3, [r7, #20]
 80036ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80036bc:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80036c0:	697b      	ldr	r3, [r7, #20]
 80036c2:	fa01 f303 	lsl.w	r3, r1, r3
 80036c6:	43d9      	mvns	r1, r3
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80036cc:	4313      	orrs	r3, r2
         );
}
 80036ce:	4618      	mov	r0, r3
 80036d0:	3724      	adds	r7, #36	@ 0x24
 80036d2:	46bd      	mov	sp, r7
 80036d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d8:	4770      	bx	lr
	...

080036dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b082      	sub	sp, #8
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	3b01      	subs	r3, #1
 80036e8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80036ec:	d301      	bcc.n	80036f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80036ee:	2301      	movs	r3, #1
 80036f0:	e00f      	b.n	8003712 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80036f2:	4a0a      	ldr	r2, [pc, #40]	@ (800371c <SysTick_Config+0x40>)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	3b01      	subs	r3, #1
 80036f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80036fa:	210f      	movs	r1, #15
 80036fc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003700:	f7ff ff8e 	bl	8003620 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003704:	4b05      	ldr	r3, [pc, #20]	@ (800371c <SysTick_Config+0x40>)
 8003706:	2200      	movs	r2, #0
 8003708:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800370a:	4b04      	ldr	r3, [pc, #16]	@ (800371c <SysTick_Config+0x40>)
 800370c:	2207      	movs	r2, #7
 800370e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003710:	2300      	movs	r3, #0
}
 8003712:	4618      	mov	r0, r3
 8003714:	3708      	adds	r7, #8
 8003716:	46bd      	mov	sp, r7
 8003718:	bd80      	pop	{r7, pc}
 800371a:	bf00      	nop
 800371c:	e000e010 	.word	0xe000e010

08003720 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b082      	sub	sp, #8
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003728:	6878      	ldr	r0, [r7, #4]
 800372a:	f7ff ff29 	bl	8003580 <__NVIC_SetPriorityGrouping>
}
 800372e:	bf00      	nop
 8003730:	3708      	adds	r7, #8
 8003732:	46bd      	mov	sp, r7
 8003734:	bd80      	pop	{r7, pc}

08003736 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003736:	b580      	push	{r7, lr}
 8003738:	b086      	sub	sp, #24
 800373a:	af00      	add	r7, sp, #0
 800373c:	4603      	mov	r3, r0
 800373e:	60b9      	str	r1, [r7, #8]
 8003740:	607a      	str	r2, [r7, #4]
 8003742:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003744:	2300      	movs	r3, #0
 8003746:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003748:	f7ff ff3e 	bl	80035c8 <__NVIC_GetPriorityGrouping>
 800374c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800374e:	687a      	ldr	r2, [r7, #4]
 8003750:	68b9      	ldr	r1, [r7, #8]
 8003752:	6978      	ldr	r0, [r7, #20]
 8003754:	f7ff ff8e 	bl	8003674 <NVIC_EncodePriority>
 8003758:	4602      	mov	r2, r0
 800375a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800375e:	4611      	mov	r1, r2
 8003760:	4618      	mov	r0, r3
 8003762:	f7ff ff5d 	bl	8003620 <__NVIC_SetPriority>
}
 8003766:	bf00      	nop
 8003768:	3718      	adds	r7, #24
 800376a:	46bd      	mov	sp, r7
 800376c:	bd80      	pop	{r7, pc}

0800376e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800376e:	b580      	push	{r7, lr}
 8003770:	b082      	sub	sp, #8
 8003772:	af00      	add	r7, sp, #0
 8003774:	4603      	mov	r3, r0
 8003776:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003778:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800377c:	4618      	mov	r0, r3
 800377e:	f7ff ff31 	bl	80035e4 <__NVIC_EnableIRQ>
}
 8003782:	bf00      	nop
 8003784:	3708      	adds	r7, #8
 8003786:	46bd      	mov	sp, r7
 8003788:	bd80      	pop	{r7, pc}

0800378a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800378a:	b580      	push	{r7, lr}
 800378c:	b082      	sub	sp, #8
 800378e:	af00      	add	r7, sp, #0
 8003790:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003792:	6878      	ldr	r0, [r7, #4]
 8003794:	f7ff ffa2 	bl	80036dc <SysTick_Config>
 8003798:	4603      	mov	r3, r0
}
 800379a:	4618      	mov	r0, r3
 800379c:	3708      	adds	r7, #8
 800379e:	46bd      	mov	sp, r7
 80037a0:	bd80      	pop	{r7, pc}
	...

080037a4 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80037a4:	b480      	push	{r7}
 80037a6:	b085      	sub	sp, #20
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d101      	bne.n	80037b6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80037b2:	2301      	movs	r3, #1
 80037b4:	e098      	b.n	80038e8 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	461a      	mov	r2, r3
 80037bc:	4b4d      	ldr	r3, [pc, #308]	@ (80038f4 <HAL_DMA_Init+0x150>)
 80037be:	429a      	cmp	r2, r3
 80037c0:	d80f      	bhi.n	80037e2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	461a      	mov	r2, r3
 80037c8:	4b4b      	ldr	r3, [pc, #300]	@ (80038f8 <HAL_DMA_Init+0x154>)
 80037ca:	4413      	add	r3, r2
 80037cc:	4a4b      	ldr	r2, [pc, #300]	@ (80038fc <HAL_DMA_Init+0x158>)
 80037ce:	fba2 2303 	umull	r2, r3, r2, r3
 80037d2:	091b      	lsrs	r3, r3, #4
 80037d4:	009a      	lsls	r2, r3, #2
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	4a48      	ldr	r2, [pc, #288]	@ (8003900 <HAL_DMA_Init+0x15c>)
 80037de:	641a      	str	r2, [r3, #64]	@ 0x40
 80037e0:	e00e      	b.n	8003800 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	461a      	mov	r2, r3
 80037e8:	4b46      	ldr	r3, [pc, #280]	@ (8003904 <HAL_DMA_Init+0x160>)
 80037ea:	4413      	add	r3, r2
 80037ec:	4a43      	ldr	r2, [pc, #268]	@ (80038fc <HAL_DMA_Init+0x158>)
 80037ee:	fba2 2303 	umull	r2, r3, r2, r3
 80037f2:	091b      	lsrs	r3, r3, #4
 80037f4:	009a      	lsls	r2, r3, #2
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	4a42      	ldr	r2, [pc, #264]	@ (8003908 <HAL_DMA_Init+0x164>)
 80037fe:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2202      	movs	r2, #2
 8003804:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8003816:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800381a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003824:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	691b      	ldr	r3, [r3, #16]
 800382a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003830:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	699b      	ldr	r3, [r3, #24]
 8003836:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800383c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6a1b      	ldr	r3, [r3, #32]
 8003842:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003844:	68fa      	ldr	r2, [r7, #12]
 8003846:	4313      	orrs	r3, r2
 8003848:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	68fa      	ldr	r2, [r7, #12]
 8003850:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	689b      	ldr	r3, [r3, #8]
 8003856:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800385a:	d039      	beq.n	80038d0 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003860:	4a27      	ldr	r2, [pc, #156]	@ (8003900 <HAL_DMA_Init+0x15c>)
 8003862:	4293      	cmp	r3, r2
 8003864:	d11a      	bne.n	800389c <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003866:	4b29      	ldr	r3, [pc, #164]	@ (800390c <HAL_DMA_Init+0x168>)
 8003868:	681a      	ldr	r2, [r3, #0]
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800386e:	f003 031c 	and.w	r3, r3, #28
 8003872:	210f      	movs	r1, #15
 8003874:	fa01 f303 	lsl.w	r3, r1, r3
 8003878:	43db      	mvns	r3, r3
 800387a:	4924      	ldr	r1, [pc, #144]	@ (800390c <HAL_DMA_Init+0x168>)
 800387c:	4013      	ands	r3, r2
 800387e:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003880:	4b22      	ldr	r3, [pc, #136]	@ (800390c <HAL_DMA_Init+0x168>)
 8003882:	681a      	ldr	r2, [r3, #0]
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6859      	ldr	r1, [r3, #4]
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800388c:	f003 031c 	and.w	r3, r3, #28
 8003890:	fa01 f303 	lsl.w	r3, r1, r3
 8003894:	491d      	ldr	r1, [pc, #116]	@ (800390c <HAL_DMA_Init+0x168>)
 8003896:	4313      	orrs	r3, r2
 8003898:	600b      	str	r3, [r1, #0]
 800389a:	e019      	b.n	80038d0 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800389c:	4b1c      	ldr	r3, [pc, #112]	@ (8003910 <HAL_DMA_Init+0x16c>)
 800389e:	681a      	ldr	r2, [r3, #0]
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038a4:	f003 031c 	and.w	r3, r3, #28
 80038a8:	210f      	movs	r1, #15
 80038aa:	fa01 f303 	lsl.w	r3, r1, r3
 80038ae:	43db      	mvns	r3, r3
 80038b0:	4917      	ldr	r1, [pc, #92]	@ (8003910 <HAL_DMA_Init+0x16c>)
 80038b2:	4013      	ands	r3, r2
 80038b4:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80038b6:	4b16      	ldr	r3, [pc, #88]	@ (8003910 <HAL_DMA_Init+0x16c>)
 80038b8:	681a      	ldr	r2, [r3, #0]
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6859      	ldr	r1, [r3, #4]
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038c2:	f003 031c 	and.w	r3, r3, #28
 80038c6:	fa01 f303 	lsl.w	r3, r1, r3
 80038ca:	4911      	ldr	r1, [pc, #68]	@ (8003910 <HAL_DMA_Init+0x16c>)
 80038cc:	4313      	orrs	r3, r2
 80038ce:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2200      	movs	r2, #0
 80038d4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2201      	movs	r2, #1
 80038da:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2200      	movs	r2, #0
 80038e2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80038e6:	2300      	movs	r3, #0
}
 80038e8:	4618      	mov	r0, r3
 80038ea:	3714      	adds	r7, #20
 80038ec:	46bd      	mov	sp, r7
 80038ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f2:	4770      	bx	lr
 80038f4:	40020407 	.word	0x40020407
 80038f8:	bffdfff8 	.word	0xbffdfff8
 80038fc:	cccccccd 	.word	0xcccccccd
 8003900:	40020000 	.word	0x40020000
 8003904:	bffdfbf8 	.word	0xbffdfbf8
 8003908:	40020400 	.word	0x40020400
 800390c:	400200a8 	.word	0x400200a8
 8003910:	400204a8 	.word	0x400204a8

08003914 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b086      	sub	sp, #24
 8003918:	af00      	add	r7, sp, #0
 800391a:	60f8      	str	r0, [r7, #12]
 800391c:	60b9      	str	r1, [r7, #8]
 800391e:	607a      	str	r2, [r7, #4]
 8003920:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003922:	2300      	movs	r3, #0
 8003924:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800392c:	2b01      	cmp	r3, #1
 800392e:	d101      	bne.n	8003934 <HAL_DMA_Start_IT+0x20>
 8003930:	2302      	movs	r3, #2
 8003932:	e04b      	b.n	80039cc <HAL_DMA_Start_IT+0xb8>
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	2201      	movs	r2, #1
 8003938:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003942:	b2db      	uxtb	r3, r3
 8003944:	2b01      	cmp	r3, #1
 8003946:	d13a      	bne.n	80039be <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	2202      	movs	r2, #2
 800394c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	2200      	movs	r2, #0
 8003954:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	681a      	ldr	r2, [r3, #0]
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f022 0201 	bic.w	r2, r2, #1
 8003964:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003966:	683b      	ldr	r3, [r7, #0]
 8003968:	687a      	ldr	r2, [r7, #4]
 800396a:	68b9      	ldr	r1, [r7, #8]
 800396c:	68f8      	ldr	r0, [r7, #12]
 800396e:	f000 f8e0 	bl	8003b32 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003976:	2b00      	cmp	r3, #0
 8003978:	d008      	beq.n	800398c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	681a      	ldr	r2, [r3, #0]
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f042 020e 	orr.w	r2, r2, #14
 8003988:	601a      	str	r2, [r3, #0]
 800398a:	e00f      	b.n	80039ac <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	681a      	ldr	r2, [r3, #0]
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f022 0204 	bic.w	r2, r2, #4
 800399a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	681a      	ldr	r2, [r3, #0]
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f042 020a 	orr.w	r2, r2, #10
 80039aa:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	681a      	ldr	r2, [r3, #0]
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f042 0201 	orr.w	r2, r2, #1
 80039ba:	601a      	str	r2, [r3, #0]
 80039bc:	e005      	b.n	80039ca <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	2200      	movs	r2, #0
 80039c2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80039c6:	2302      	movs	r3, #2
 80039c8:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80039ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80039cc:	4618      	mov	r0, r3
 80039ce:	3718      	adds	r7, #24
 80039d0:	46bd      	mov	sp, r7
 80039d2:	bd80      	pop	{r7, pc}

080039d4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b084      	sub	sp, #16
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039f0:	f003 031c 	and.w	r3, r3, #28
 80039f4:	2204      	movs	r2, #4
 80039f6:	409a      	lsls	r2, r3
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	4013      	ands	r3, r2
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d026      	beq.n	8003a4e <HAL_DMA_IRQHandler+0x7a>
 8003a00:	68bb      	ldr	r3, [r7, #8]
 8003a02:	f003 0304 	and.w	r3, r3, #4
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d021      	beq.n	8003a4e <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f003 0320 	and.w	r3, r3, #32
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d107      	bne.n	8003a28 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	681a      	ldr	r2, [r3, #0]
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f022 0204 	bic.w	r2, r2, #4
 8003a26:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a2c:	f003 021c 	and.w	r2, r3, #28
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a34:	2104      	movs	r1, #4
 8003a36:	fa01 f202 	lsl.w	r2, r1, r2
 8003a3a:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d071      	beq.n	8003b28 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a48:	6878      	ldr	r0, [r7, #4]
 8003a4a:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003a4c:	e06c      	b.n	8003b28 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a52:	f003 031c 	and.w	r3, r3, #28
 8003a56:	2202      	movs	r2, #2
 8003a58:	409a      	lsls	r2, r3
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	4013      	ands	r3, r2
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d02e      	beq.n	8003ac0 <HAL_DMA_IRQHandler+0xec>
 8003a62:	68bb      	ldr	r3, [r7, #8]
 8003a64:	f003 0302 	and.w	r3, r3, #2
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d029      	beq.n	8003ac0 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f003 0320 	and.w	r3, r3, #32
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d10b      	bne.n	8003a92 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	681a      	ldr	r2, [r3, #0]
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f022 020a 	bic.w	r2, r2, #10
 8003a88:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	2201      	movs	r2, #1
 8003a8e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a96:	f003 021c 	and.w	r2, r3, #28
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a9e:	2102      	movs	r1, #2
 8003aa0:	fa01 f202 	lsl.w	r2, r1, r2
 8003aa4:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d038      	beq.n	8003b28 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003aba:	6878      	ldr	r0, [r7, #4]
 8003abc:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003abe:	e033      	b.n	8003b28 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ac4:	f003 031c 	and.w	r3, r3, #28
 8003ac8:	2208      	movs	r2, #8
 8003aca:	409a      	lsls	r2, r3
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	4013      	ands	r3, r2
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d02a      	beq.n	8003b2a <HAL_DMA_IRQHandler+0x156>
 8003ad4:	68bb      	ldr	r3, [r7, #8]
 8003ad6:	f003 0308 	and.w	r3, r3, #8
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d025      	beq.n	8003b2a <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	681a      	ldr	r2, [r3, #0]
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f022 020e 	bic.w	r2, r2, #14
 8003aec:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003af2:	f003 021c 	and.w	r2, r3, #28
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003afa:	2101      	movs	r1, #1
 8003afc:	fa01 f202 	lsl.w	r2, r1, r2
 8003b00:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	2201      	movs	r2, #1
 8003b06:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2201      	movs	r2, #1
 8003b0c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2200      	movs	r2, #0
 8003b14:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d004      	beq.n	8003b2a <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b24:	6878      	ldr	r0, [r7, #4]
 8003b26:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003b28:	bf00      	nop
 8003b2a:	bf00      	nop
}
 8003b2c:	3710      	adds	r7, #16
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	bd80      	pop	{r7, pc}

08003b32 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003b32:	b480      	push	{r7}
 8003b34:	b085      	sub	sp, #20
 8003b36:	af00      	add	r7, sp, #0
 8003b38:	60f8      	str	r0, [r7, #12]
 8003b3a:	60b9      	str	r1, [r7, #8]
 8003b3c:	607a      	str	r2, [r7, #4]
 8003b3e:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b44:	f003 021c 	and.w	r2, r3, #28
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b4c:	2101      	movs	r1, #1
 8003b4e:	fa01 f202 	lsl.w	r2, r1, r2
 8003b52:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	683a      	ldr	r2, [r7, #0]
 8003b5a:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	689b      	ldr	r3, [r3, #8]
 8003b60:	2b10      	cmp	r3, #16
 8003b62:	d108      	bne.n	8003b76 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	687a      	ldr	r2, [r7, #4]
 8003b6a:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	68ba      	ldr	r2, [r7, #8]
 8003b72:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003b74:	e007      	b.n	8003b86 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	68ba      	ldr	r2, [r7, #8]
 8003b7c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	687a      	ldr	r2, [r7, #4]
 8003b84:	60da      	str	r2, [r3, #12]
}
 8003b86:	bf00      	nop
 8003b88:	3714      	adds	r7, #20
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b90:	4770      	bx	lr
	...

08003b94 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003b94:	b480      	push	{r7}
 8003b96:	b087      	sub	sp, #28
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
 8003b9c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003ba2:	e148      	b.n	8003e36 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	681a      	ldr	r2, [r3, #0]
 8003ba8:	2101      	movs	r1, #1
 8003baa:	697b      	ldr	r3, [r7, #20]
 8003bac:	fa01 f303 	lsl.w	r3, r1, r3
 8003bb0:	4013      	ands	r3, r2
 8003bb2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	f000 813a 	beq.w	8003e30 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	685b      	ldr	r3, [r3, #4]
 8003bc0:	f003 0303 	and.w	r3, r3, #3
 8003bc4:	2b01      	cmp	r3, #1
 8003bc6:	d005      	beq.n	8003bd4 <HAL_GPIO_Init+0x40>
 8003bc8:	683b      	ldr	r3, [r7, #0]
 8003bca:	685b      	ldr	r3, [r3, #4]
 8003bcc:	f003 0303 	and.w	r3, r3, #3
 8003bd0:	2b02      	cmp	r3, #2
 8003bd2:	d130      	bne.n	8003c36 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	689b      	ldr	r3, [r3, #8]
 8003bd8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003bda:	697b      	ldr	r3, [r7, #20]
 8003bdc:	005b      	lsls	r3, r3, #1
 8003bde:	2203      	movs	r2, #3
 8003be0:	fa02 f303 	lsl.w	r3, r2, r3
 8003be4:	43db      	mvns	r3, r3
 8003be6:	693a      	ldr	r2, [r7, #16]
 8003be8:	4013      	ands	r3, r2
 8003bea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003bec:	683b      	ldr	r3, [r7, #0]
 8003bee:	68da      	ldr	r2, [r3, #12]
 8003bf0:	697b      	ldr	r3, [r7, #20]
 8003bf2:	005b      	lsls	r3, r3, #1
 8003bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8003bf8:	693a      	ldr	r2, [r7, #16]
 8003bfa:	4313      	orrs	r3, r2
 8003bfc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	693a      	ldr	r2, [r7, #16]
 8003c02:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	685b      	ldr	r3, [r3, #4]
 8003c08:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003c0a:	2201      	movs	r2, #1
 8003c0c:	697b      	ldr	r3, [r7, #20]
 8003c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c12:	43db      	mvns	r3, r3
 8003c14:	693a      	ldr	r2, [r7, #16]
 8003c16:	4013      	ands	r3, r2
 8003c18:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003c1a:	683b      	ldr	r3, [r7, #0]
 8003c1c:	685b      	ldr	r3, [r3, #4]
 8003c1e:	091b      	lsrs	r3, r3, #4
 8003c20:	f003 0201 	and.w	r2, r3, #1
 8003c24:	697b      	ldr	r3, [r7, #20]
 8003c26:	fa02 f303 	lsl.w	r3, r2, r3
 8003c2a:	693a      	ldr	r2, [r7, #16]
 8003c2c:	4313      	orrs	r3, r2
 8003c2e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	693a      	ldr	r2, [r7, #16]
 8003c34:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	685b      	ldr	r3, [r3, #4]
 8003c3a:	f003 0303 	and.w	r3, r3, #3
 8003c3e:	2b03      	cmp	r3, #3
 8003c40:	d017      	beq.n	8003c72 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	68db      	ldr	r3, [r3, #12]
 8003c46:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003c48:	697b      	ldr	r3, [r7, #20]
 8003c4a:	005b      	lsls	r3, r3, #1
 8003c4c:	2203      	movs	r2, #3
 8003c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c52:	43db      	mvns	r3, r3
 8003c54:	693a      	ldr	r2, [r7, #16]
 8003c56:	4013      	ands	r3, r2
 8003c58:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003c5a:	683b      	ldr	r3, [r7, #0]
 8003c5c:	689a      	ldr	r2, [r3, #8]
 8003c5e:	697b      	ldr	r3, [r7, #20]
 8003c60:	005b      	lsls	r3, r3, #1
 8003c62:	fa02 f303 	lsl.w	r3, r2, r3
 8003c66:	693a      	ldr	r2, [r7, #16]
 8003c68:	4313      	orrs	r3, r2
 8003c6a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	693a      	ldr	r2, [r7, #16]
 8003c70:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	685b      	ldr	r3, [r3, #4]
 8003c76:	f003 0303 	and.w	r3, r3, #3
 8003c7a:	2b02      	cmp	r3, #2
 8003c7c:	d123      	bne.n	8003cc6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003c7e:	697b      	ldr	r3, [r7, #20]
 8003c80:	08da      	lsrs	r2, r3, #3
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	3208      	adds	r2, #8
 8003c86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003c8a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003c8c:	697b      	ldr	r3, [r7, #20]
 8003c8e:	f003 0307 	and.w	r3, r3, #7
 8003c92:	009b      	lsls	r3, r3, #2
 8003c94:	220f      	movs	r2, #15
 8003c96:	fa02 f303 	lsl.w	r3, r2, r3
 8003c9a:	43db      	mvns	r3, r3
 8003c9c:	693a      	ldr	r2, [r7, #16]
 8003c9e:	4013      	ands	r3, r2
 8003ca0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003ca2:	683b      	ldr	r3, [r7, #0]
 8003ca4:	691a      	ldr	r2, [r3, #16]
 8003ca6:	697b      	ldr	r3, [r7, #20]
 8003ca8:	f003 0307 	and.w	r3, r3, #7
 8003cac:	009b      	lsls	r3, r3, #2
 8003cae:	fa02 f303 	lsl.w	r3, r2, r3
 8003cb2:	693a      	ldr	r2, [r7, #16]
 8003cb4:	4313      	orrs	r3, r2
 8003cb6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003cb8:	697b      	ldr	r3, [r7, #20]
 8003cba:	08da      	lsrs	r2, r3, #3
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	3208      	adds	r2, #8
 8003cc0:	6939      	ldr	r1, [r7, #16]
 8003cc2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003ccc:	697b      	ldr	r3, [r7, #20]
 8003cce:	005b      	lsls	r3, r3, #1
 8003cd0:	2203      	movs	r2, #3
 8003cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8003cd6:	43db      	mvns	r3, r3
 8003cd8:	693a      	ldr	r2, [r7, #16]
 8003cda:	4013      	ands	r3, r2
 8003cdc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003cde:	683b      	ldr	r3, [r7, #0]
 8003ce0:	685b      	ldr	r3, [r3, #4]
 8003ce2:	f003 0203 	and.w	r2, r3, #3
 8003ce6:	697b      	ldr	r3, [r7, #20]
 8003ce8:	005b      	lsls	r3, r3, #1
 8003cea:	fa02 f303 	lsl.w	r3, r2, r3
 8003cee:	693a      	ldr	r2, [r7, #16]
 8003cf0:	4313      	orrs	r3, r2
 8003cf2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	693a      	ldr	r2, [r7, #16]
 8003cf8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	685b      	ldr	r3, [r3, #4]
 8003cfe:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	f000 8094 	beq.w	8003e30 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d08:	4b52      	ldr	r3, [pc, #328]	@ (8003e54 <HAL_GPIO_Init+0x2c0>)
 8003d0a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d0c:	4a51      	ldr	r2, [pc, #324]	@ (8003e54 <HAL_GPIO_Init+0x2c0>)
 8003d0e:	f043 0301 	orr.w	r3, r3, #1
 8003d12:	6613      	str	r3, [r2, #96]	@ 0x60
 8003d14:	4b4f      	ldr	r3, [pc, #316]	@ (8003e54 <HAL_GPIO_Init+0x2c0>)
 8003d16:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d18:	f003 0301 	and.w	r3, r3, #1
 8003d1c:	60bb      	str	r3, [r7, #8]
 8003d1e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003d20:	4a4d      	ldr	r2, [pc, #308]	@ (8003e58 <HAL_GPIO_Init+0x2c4>)
 8003d22:	697b      	ldr	r3, [r7, #20]
 8003d24:	089b      	lsrs	r3, r3, #2
 8003d26:	3302      	adds	r3, #2
 8003d28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d2c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003d2e:	697b      	ldr	r3, [r7, #20]
 8003d30:	f003 0303 	and.w	r3, r3, #3
 8003d34:	009b      	lsls	r3, r3, #2
 8003d36:	220f      	movs	r2, #15
 8003d38:	fa02 f303 	lsl.w	r3, r2, r3
 8003d3c:	43db      	mvns	r3, r3
 8003d3e:	693a      	ldr	r2, [r7, #16]
 8003d40:	4013      	ands	r3, r2
 8003d42:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003d4a:	d00d      	beq.n	8003d68 <HAL_GPIO_Init+0x1d4>
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	4a43      	ldr	r2, [pc, #268]	@ (8003e5c <HAL_GPIO_Init+0x2c8>)
 8003d50:	4293      	cmp	r3, r2
 8003d52:	d007      	beq.n	8003d64 <HAL_GPIO_Init+0x1d0>
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	4a42      	ldr	r2, [pc, #264]	@ (8003e60 <HAL_GPIO_Init+0x2cc>)
 8003d58:	4293      	cmp	r3, r2
 8003d5a:	d101      	bne.n	8003d60 <HAL_GPIO_Init+0x1cc>
 8003d5c:	2302      	movs	r3, #2
 8003d5e:	e004      	b.n	8003d6a <HAL_GPIO_Init+0x1d6>
 8003d60:	2307      	movs	r3, #7
 8003d62:	e002      	b.n	8003d6a <HAL_GPIO_Init+0x1d6>
 8003d64:	2301      	movs	r3, #1
 8003d66:	e000      	b.n	8003d6a <HAL_GPIO_Init+0x1d6>
 8003d68:	2300      	movs	r3, #0
 8003d6a:	697a      	ldr	r2, [r7, #20]
 8003d6c:	f002 0203 	and.w	r2, r2, #3
 8003d70:	0092      	lsls	r2, r2, #2
 8003d72:	4093      	lsls	r3, r2
 8003d74:	693a      	ldr	r2, [r7, #16]
 8003d76:	4313      	orrs	r3, r2
 8003d78:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003d7a:	4937      	ldr	r1, [pc, #220]	@ (8003e58 <HAL_GPIO_Init+0x2c4>)
 8003d7c:	697b      	ldr	r3, [r7, #20]
 8003d7e:	089b      	lsrs	r3, r3, #2
 8003d80:	3302      	adds	r3, #2
 8003d82:	693a      	ldr	r2, [r7, #16]
 8003d84:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003d88:	4b36      	ldr	r3, [pc, #216]	@ (8003e64 <HAL_GPIO_Init+0x2d0>)
 8003d8a:	689b      	ldr	r3, [r3, #8]
 8003d8c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	43db      	mvns	r3, r3
 8003d92:	693a      	ldr	r2, [r7, #16]
 8003d94:	4013      	ands	r3, r2
 8003d96:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	685b      	ldr	r3, [r3, #4]
 8003d9c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d003      	beq.n	8003dac <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8003da4:	693a      	ldr	r2, [r7, #16]
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	4313      	orrs	r3, r2
 8003daa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003dac:	4a2d      	ldr	r2, [pc, #180]	@ (8003e64 <HAL_GPIO_Init+0x2d0>)
 8003dae:	693b      	ldr	r3, [r7, #16]
 8003db0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003db2:	4b2c      	ldr	r3, [pc, #176]	@ (8003e64 <HAL_GPIO_Init+0x2d0>)
 8003db4:	68db      	ldr	r3, [r3, #12]
 8003db6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	43db      	mvns	r3, r3
 8003dbc:	693a      	ldr	r2, [r7, #16]
 8003dbe:	4013      	ands	r3, r2
 8003dc0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003dc2:	683b      	ldr	r3, [r7, #0]
 8003dc4:	685b      	ldr	r3, [r3, #4]
 8003dc6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d003      	beq.n	8003dd6 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8003dce:	693a      	ldr	r2, [r7, #16]
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	4313      	orrs	r3, r2
 8003dd4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003dd6:	4a23      	ldr	r2, [pc, #140]	@ (8003e64 <HAL_GPIO_Init+0x2d0>)
 8003dd8:	693b      	ldr	r3, [r7, #16]
 8003dda:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003ddc:	4b21      	ldr	r3, [pc, #132]	@ (8003e64 <HAL_GPIO_Init+0x2d0>)
 8003dde:	685b      	ldr	r3, [r3, #4]
 8003de0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	43db      	mvns	r3, r3
 8003de6:	693a      	ldr	r2, [r7, #16]
 8003de8:	4013      	ands	r3, r2
 8003dea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	685b      	ldr	r3, [r3, #4]
 8003df0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d003      	beq.n	8003e00 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8003df8:	693a      	ldr	r2, [r7, #16]
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	4313      	orrs	r3, r2
 8003dfe:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003e00:	4a18      	ldr	r2, [pc, #96]	@ (8003e64 <HAL_GPIO_Init+0x2d0>)
 8003e02:	693b      	ldr	r3, [r7, #16]
 8003e04:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003e06:	4b17      	ldr	r3, [pc, #92]	@ (8003e64 <HAL_GPIO_Init+0x2d0>)
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	43db      	mvns	r3, r3
 8003e10:	693a      	ldr	r2, [r7, #16]
 8003e12:	4013      	ands	r3, r2
 8003e14:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	685b      	ldr	r3, [r3, #4]
 8003e1a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d003      	beq.n	8003e2a <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8003e22:	693a      	ldr	r2, [r7, #16]
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	4313      	orrs	r3, r2
 8003e28:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003e2a:	4a0e      	ldr	r2, [pc, #56]	@ (8003e64 <HAL_GPIO_Init+0x2d0>)
 8003e2c:	693b      	ldr	r3, [r7, #16]
 8003e2e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003e30:	697b      	ldr	r3, [r7, #20]
 8003e32:	3301      	adds	r3, #1
 8003e34:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003e36:	683b      	ldr	r3, [r7, #0]
 8003e38:	681a      	ldr	r2, [r3, #0]
 8003e3a:	697b      	ldr	r3, [r7, #20]
 8003e3c:	fa22 f303 	lsr.w	r3, r2, r3
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	f47f aeaf 	bne.w	8003ba4 <HAL_GPIO_Init+0x10>
  }
}
 8003e46:	bf00      	nop
 8003e48:	bf00      	nop
 8003e4a:	371c      	adds	r7, #28
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e52:	4770      	bx	lr
 8003e54:	40021000 	.word	0x40021000
 8003e58:	40010000 	.word	0x40010000
 8003e5c:	48000400 	.word	0x48000400
 8003e60:	48000800 	.word	0x48000800
 8003e64:	40010400 	.word	0x40010400

08003e68 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003e68:	b480      	push	{r7}
 8003e6a:	b085      	sub	sp, #20
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
 8003e70:	460b      	mov	r3, r1
 8003e72:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	691a      	ldr	r2, [r3, #16]
 8003e78:	887b      	ldrh	r3, [r7, #2]
 8003e7a:	4013      	ands	r3, r2
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d002      	beq.n	8003e86 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003e80:	2301      	movs	r3, #1
 8003e82:	73fb      	strb	r3, [r7, #15]
 8003e84:	e001      	b.n	8003e8a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003e86:	2300      	movs	r3, #0
 8003e88:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003e8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	3714      	adds	r7, #20
 8003e90:	46bd      	mov	sp, r7
 8003e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e96:	4770      	bx	lr

08003e98 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003e98:	b480      	push	{r7}
 8003e9a:	b083      	sub	sp, #12
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
 8003ea0:	460b      	mov	r3, r1
 8003ea2:	807b      	strh	r3, [r7, #2]
 8003ea4:	4613      	mov	r3, r2
 8003ea6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003ea8:	787b      	ldrb	r3, [r7, #1]
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d003      	beq.n	8003eb6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003eae:	887a      	ldrh	r2, [r7, #2]
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003eb4:	e002      	b.n	8003ebc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003eb6:	887a      	ldrh	r2, [r7, #2]
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003ebc:	bf00      	nop
 8003ebe:	370c      	adds	r7, #12
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec6:	4770      	bx	lr

08003ec8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b082      	sub	sp, #8
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d101      	bne.n	8003eda <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003ed6:	2301      	movs	r3, #1
 8003ed8:	e08d      	b.n	8003ff6 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003ee0:	b2db      	uxtb	r3, r3
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d106      	bne.n	8003ef4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	2200      	movs	r2, #0
 8003eea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003eee:	6878      	ldr	r0, [r7, #4]
 8003ef0:	f7fe f876 	bl	8001fe0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2224      	movs	r2, #36	@ 0x24
 8003ef8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	681a      	ldr	r2, [r3, #0]
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f022 0201 	bic.w	r2, r2, #1
 8003f0a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	685a      	ldr	r2, [r3, #4]
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003f18:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	689a      	ldr	r2, [r3, #8]
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003f28:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	68db      	ldr	r3, [r3, #12]
 8003f2e:	2b01      	cmp	r3, #1
 8003f30:	d107      	bne.n	8003f42 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	689a      	ldr	r2, [r3, #8]
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003f3e:	609a      	str	r2, [r3, #8]
 8003f40:	e006      	b.n	8003f50 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	689a      	ldr	r2, [r3, #8]
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8003f4e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	68db      	ldr	r3, [r3, #12]
 8003f54:	2b02      	cmp	r3, #2
 8003f56:	d108      	bne.n	8003f6a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	685a      	ldr	r2, [r3, #4]
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003f66:	605a      	str	r2, [r3, #4]
 8003f68:	e007      	b.n	8003f7a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	685a      	ldr	r2, [r3, #4]
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003f78:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	685b      	ldr	r3, [r3, #4]
 8003f80:	687a      	ldr	r2, [r7, #4]
 8003f82:	6812      	ldr	r2, [r2, #0]
 8003f84:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003f88:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003f8c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	68da      	ldr	r2, [r3, #12]
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003f9c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	691a      	ldr	r2, [r3, #16]
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	695b      	ldr	r3, [r3, #20]
 8003fa6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	699b      	ldr	r3, [r3, #24]
 8003fae:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	430a      	orrs	r2, r1
 8003fb6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	69d9      	ldr	r1, [r3, #28]
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6a1a      	ldr	r2, [r3, #32]
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	430a      	orrs	r2, r1
 8003fc6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	681a      	ldr	r2, [r3, #0]
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f042 0201 	orr.w	r2, r2, #1
 8003fd6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2200      	movs	r2, #0
 8003fdc:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	2220      	movs	r2, #32
 8003fe2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	2200      	movs	r2, #0
 8003fea:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2200      	movs	r2, #0
 8003ff0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8003ff4:	2300      	movs	r3, #0
}
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	3708      	adds	r7, #8
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	bd80      	pop	{r7, pc}
	...

08004000 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004000:	b580      	push	{r7, lr}
 8004002:	b088      	sub	sp, #32
 8004004:	af02      	add	r7, sp, #8
 8004006:	60f8      	str	r0, [r7, #12]
 8004008:	4608      	mov	r0, r1
 800400a:	4611      	mov	r1, r2
 800400c:	461a      	mov	r2, r3
 800400e:	4603      	mov	r3, r0
 8004010:	817b      	strh	r3, [r7, #10]
 8004012:	460b      	mov	r3, r1
 8004014:	813b      	strh	r3, [r7, #8]
 8004016:	4613      	mov	r3, r2
 8004018:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004020:	b2db      	uxtb	r3, r3
 8004022:	2b20      	cmp	r3, #32
 8004024:	f040 80f9 	bne.w	800421a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004028:	6a3b      	ldr	r3, [r7, #32]
 800402a:	2b00      	cmp	r3, #0
 800402c:	d002      	beq.n	8004034 <HAL_I2C_Mem_Write+0x34>
 800402e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004030:	2b00      	cmp	r3, #0
 8004032:	d105      	bne.n	8004040 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800403a:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800403c:	2301      	movs	r3, #1
 800403e:	e0ed      	b.n	800421c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004046:	2b01      	cmp	r3, #1
 8004048:	d101      	bne.n	800404e <HAL_I2C_Mem_Write+0x4e>
 800404a:	2302      	movs	r3, #2
 800404c:	e0e6      	b.n	800421c <HAL_I2C_Mem_Write+0x21c>
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	2201      	movs	r2, #1
 8004052:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004056:	f7fe f9b5 	bl	80023c4 <HAL_GetTick>
 800405a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800405c:	697b      	ldr	r3, [r7, #20]
 800405e:	9300      	str	r3, [sp, #0]
 8004060:	2319      	movs	r3, #25
 8004062:	2201      	movs	r2, #1
 8004064:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004068:	68f8      	ldr	r0, [r7, #12]
 800406a:	f000 fac3 	bl	80045f4 <I2C_WaitOnFlagUntilTimeout>
 800406e:	4603      	mov	r3, r0
 8004070:	2b00      	cmp	r3, #0
 8004072:	d001      	beq.n	8004078 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8004074:	2301      	movs	r3, #1
 8004076:	e0d1      	b.n	800421c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	2221      	movs	r2, #33	@ 0x21
 800407c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	2240      	movs	r2, #64	@ 0x40
 8004084:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	2200      	movs	r2, #0
 800408c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	6a3a      	ldr	r2, [r7, #32]
 8004092:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004098:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	2200      	movs	r2, #0
 800409e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80040a0:	88f8      	ldrh	r0, [r7, #6]
 80040a2:	893a      	ldrh	r2, [r7, #8]
 80040a4:	8979      	ldrh	r1, [r7, #10]
 80040a6:	697b      	ldr	r3, [r7, #20]
 80040a8:	9301      	str	r3, [sp, #4]
 80040aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040ac:	9300      	str	r3, [sp, #0]
 80040ae:	4603      	mov	r3, r0
 80040b0:	68f8      	ldr	r0, [r7, #12]
 80040b2:	f000 f9d3 	bl	800445c <I2C_RequestMemoryWrite>
 80040b6:	4603      	mov	r3, r0
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d005      	beq.n	80040c8 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	2200      	movs	r2, #0
 80040c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80040c4:	2301      	movs	r3, #1
 80040c6:	e0a9      	b.n	800421c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040cc:	b29b      	uxth	r3, r3
 80040ce:	2bff      	cmp	r3, #255	@ 0xff
 80040d0:	d90e      	bls.n	80040f0 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	22ff      	movs	r2, #255	@ 0xff
 80040d6:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040dc:	b2da      	uxtb	r2, r3
 80040de:	8979      	ldrh	r1, [r7, #10]
 80040e0:	2300      	movs	r3, #0
 80040e2:	9300      	str	r3, [sp, #0]
 80040e4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80040e8:	68f8      	ldr	r0, [r7, #12]
 80040ea:	f000 fc47 	bl	800497c <I2C_TransferConfig>
 80040ee:	e00f      	b.n	8004110 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040f4:	b29a      	uxth	r2, r3
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040fe:	b2da      	uxtb	r2, r3
 8004100:	8979      	ldrh	r1, [r7, #10]
 8004102:	2300      	movs	r3, #0
 8004104:	9300      	str	r3, [sp, #0]
 8004106:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800410a:	68f8      	ldr	r0, [r7, #12]
 800410c:	f000 fc36 	bl	800497c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004110:	697a      	ldr	r2, [r7, #20]
 8004112:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004114:	68f8      	ldr	r0, [r7, #12]
 8004116:	f000 fac6 	bl	80046a6 <I2C_WaitOnTXISFlagUntilTimeout>
 800411a:	4603      	mov	r3, r0
 800411c:	2b00      	cmp	r3, #0
 800411e:	d001      	beq.n	8004124 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8004120:	2301      	movs	r3, #1
 8004122:	e07b      	b.n	800421c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004128:	781a      	ldrb	r2, [r3, #0]
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004134:	1c5a      	adds	r2, r3, #1
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800413e:	b29b      	uxth	r3, r3
 8004140:	3b01      	subs	r3, #1
 8004142:	b29a      	uxth	r2, r3
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800414c:	3b01      	subs	r3, #1
 800414e:	b29a      	uxth	r2, r3
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004158:	b29b      	uxth	r3, r3
 800415a:	2b00      	cmp	r3, #0
 800415c:	d034      	beq.n	80041c8 <HAL_I2C_Mem_Write+0x1c8>
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004162:	2b00      	cmp	r3, #0
 8004164:	d130      	bne.n	80041c8 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004166:	697b      	ldr	r3, [r7, #20]
 8004168:	9300      	str	r3, [sp, #0]
 800416a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800416c:	2200      	movs	r2, #0
 800416e:	2180      	movs	r1, #128	@ 0x80
 8004170:	68f8      	ldr	r0, [r7, #12]
 8004172:	f000 fa3f 	bl	80045f4 <I2C_WaitOnFlagUntilTimeout>
 8004176:	4603      	mov	r3, r0
 8004178:	2b00      	cmp	r3, #0
 800417a:	d001      	beq.n	8004180 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800417c:	2301      	movs	r3, #1
 800417e:	e04d      	b.n	800421c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004184:	b29b      	uxth	r3, r3
 8004186:	2bff      	cmp	r3, #255	@ 0xff
 8004188:	d90e      	bls.n	80041a8 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	22ff      	movs	r2, #255	@ 0xff
 800418e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004194:	b2da      	uxtb	r2, r3
 8004196:	8979      	ldrh	r1, [r7, #10]
 8004198:	2300      	movs	r3, #0
 800419a:	9300      	str	r3, [sp, #0]
 800419c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80041a0:	68f8      	ldr	r0, [r7, #12]
 80041a2:	f000 fbeb 	bl	800497c <I2C_TransferConfig>
 80041a6:	e00f      	b.n	80041c8 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041ac:	b29a      	uxth	r2, r3
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041b6:	b2da      	uxtb	r2, r3
 80041b8:	8979      	ldrh	r1, [r7, #10]
 80041ba:	2300      	movs	r3, #0
 80041bc:	9300      	str	r3, [sp, #0]
 80041be:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80041c2:	68f8      	ldr	r0, [r7, #12]
 80041c4:	f000 fbda 	bl	800497c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041cc:	b29b      	uxth	r3, r3
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d19e      	bne.n	8004110 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80041d2:	697a      	ldr	r2, [r7, #20]
 80041d4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80041d6:	68f8      	ldr	r0, [r7, #12]
 80041d8:	f000 faac 	bl	8004734 <I2C_WaitOnSTOPFlagUntilTimeout>
 80041dc:	4603      	mov	r3, r0
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d001      	beq.n	80041e6 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80041e2:	2301      	movs	r3, #1
 80041e4:	e01a      	b.n	800421c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	2220      	movs	r2, #32
 80041ec:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	6859      	ldr	r1, [r3, #4]
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	681a      	ldr	r2, [r3, #0]
 80041f8:	4b0a      	ldr	r3, [pc, #40]	@ (8004224 <HAL_I2C_Mem_Write+0x224>)
 80041fa:	400b      	ands	r3, r1
 80041fc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	2220      	movs	r2, #32
 8004202:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	2200      	movs	r2, #0
 800420a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	2200      	movs	r2, #0
 8004212:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004216:	2300      	movs	r3, #0
 8004218:	e000      	b.n	800421c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800421a:	2302      	movs	r3, #2
  }
}
 800421c:	4618      	mov	r0, r3
 800421e:	3718      	adds	r7, #24
 8004220:	46bd      	mov	sp, r7
 8004222:	bd80      	pop	{r7, pc}
 8004224:	fe00e800 	.word	0xfe00e800

08004228 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004228:	b580      	push	{r7, lr}
 800422a:	b088      	sub	sp, #32
 800422c:	af02      	add	r7, sp, #8
 800422e:	60f8      	str	r0, [r7, #12]
 8004230:	4608      	mov	r0, r1
 8004232:	4611      	mov	r1, r2
 8004234:	461a      	mov	r2, r3
 8004236:	4603      	mov	r3, r0
 8004238:	817b      	strh	r3, [r7, #10]
 800423a:	460b      	mov	r3, r1
 800423c:	813b      	strh	r3, [r7, #8]
 800423e:	4613      	mov	r3, r2
 8004240:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004248:	b2db      	uxtb	r3, r3
 800424a:	2b20      	cmp	r3, #32
 800424c:	f040 80fd 	bne.w	800444a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8004250:	6a3b      	ldr	r3, [r7, #32]
 8004252:	2b00      	cmp	r3, #0
 8004254:	d002      	beq.n	800425c <HAL_I2C_Mem_Read+0x34>
 8004256:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004258:	2b00      	cmp	r3, #0
 800425a:	d105      	bne.n	8004268 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004262:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8004264:	2301      	movs	r3, #1
 8004266:	e0f1      	b.n	800444c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800426e:	2b01      	cmp	r3, #1
 8004270:	d101      	bne.n	8004276 <HAL_I2C_Mem_Read+0x4e>
 8004272:	2302      	movs	r3, #2
 8004274:	e0ea      	b.n	800444c <HAL_I2C_Mem_Read+0x224>
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	2201      	movs	r2, #1
 800427a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800427e:	f7fe f8a1 	bl	80023c4 <HAL_GetTick>
 8004282:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004284:	697b      	ldr	r3, [r7, #20]
 8004286:	9300      	str	r3, [sp, #0]
 8004288:	2319      	movs	r3, #25
 800428a:	2201      	movs	r2, #1
 800428c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004290:	68f8      	ldr	r0, [r7, #12]
 8004292:	f000 f9af 	bl	80045f4 <I2C_WaitOnFlagUntilTimeout>
 8004296:	4603      	mov	r3, r0
 8004298:	2b00      	cmp	r3, #0
 800429a:	d001      	beq.n	80042a0 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800429c:	2301      	movs	r3, #1
 800429e:	e0d5      	b.n	800444c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	2222      	movs	r2, #34	@ 0x22
 80042a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	2240      	movs	r2, #64	@ 0x40
 80042ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	2200      	movs	r2, #0
 80042b4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	6a3a      	ldr	r2, [r7, #32]
 80042ba:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80042c0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	2200      	movs	r2, #0
 80042c6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80042c8:	88f8      	ldrh	r0, [r7, #6]
 80042ca:	893a      	ldrh	r2, [r7, #8]
 80042cc:	8979      	ldrh	r1, [r7, #10]
 80042ce:	697b      	ldr	r3, [r7, #20]
 80042d0:	9301      	str	r3, [sp, #4]
 80042d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042d4:	9300      	str	r3, [sp, #0]
 80042d6:	4603      	mov	r3, r0
 80042d8:	68f8      	ldr	r0, [r7, #12]
 80042da:	f000 f913 	bl	8004504 <I2C_RequestMemoryRead>
 80042de:	4603      	mov	r3, r0
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d005      	beq.n	80042f0 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	2200      	movs	r2, #0
 80042e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80042ec:	2301      	movs	r3, #1
 80042ee:	e0ad      	b.n	800444c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042f4:	b29b      	uxth	r3, r3
 80042f6:	2bff      	cmp	r3, #255	@ 0xff
 80042f8:	d90e      	bls.n	8004318 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	2201      	movs	r2, #1
 80042fe:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004304:	b2da      	uxtb	r2, r3
 8004306:	8979      	ldrh	r1, [r7, #10]
 8004308:	4b52      	ldr	r3, [pc, #328]	@ (8004454 <HAL_I2C_Mem_Read+0x22c>)
 800430a:	9300      	str	r3, [sp, #0]
 800430c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004310:	68f8      	ldr	r0, [r7, #12]
 8004312:	f000 fb33 	bl	800497c <I2C_TransferConfig>
 8004316:	e00f      	b.n	8004338 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800431c:	b29a      	uxth	r2, r3
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004326:	b2da      	uxtb	r2, r3
 8004328:	8979      	ldrh	r1, [r7, #10]
 800432a:	4b4a      	ldr	r3, [pc, #296]	@ (8004454 <HAL_I2C_Mem_Read+0x22c>)
 800432c:	9300      	str	r3, [sp, #0]
 800432e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004332:	68f8      	ldr	r0, [r7, #12]
 8004334:	f000 fb22 	bl	800497c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8004338:	697b      	ldr	r3, [r7, #20]
 800433a:	9300      	str	r3, [sp, #0]
 800433c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800433e:	2200      	movs	r2, #0
 8004340:	2104      	movs	r1, #4
 8004342:	68f8      	ldr	r0, [r7, #12]
 8004344:	f000 f956 	bl	80045f4 <I2C_WaitOnFlagUntilTimeout>
 8004348:	4603      	mov	r3, r0
 800434a:	2b00      	cmp	r3, #0
 800434c:	d001      	beq.n	8004352 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800434e:	2301      	movs	r3, #1
 8004350:	e07c      	b.n	800444c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800435c:	b2d2      	uxtb	r2, r2
 800435e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004364:	1c5a      	adds	r2, r3, #1
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800436e:	3b01      	subs	r3, #1
 8004370:	b29a      	uxth	r2, r3
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800437a:	b29b      	uxth	r3, r3
 800437c:	3b01      	subs	r3, #1
 800437e:	b29a      	uxth	r2, r3
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004388:	b29b      	uxth	r3, r3
 800438a:	2b00      	cmp	r3, #0
 800438c:	d034      	beq.n	80043f8 <HAL_I2C_Mem_Read+0x1d0>
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004392:	2b00      	cmp	r3, #0
 8004394:	d130      	bne.n	80043f8 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004396:	697b      	ldr	r3, [r7, #20]
 8004398:	9300      	str	r3, [sp, #0]
 800439a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800439c:	2200      	movs	r2, #0
 800439e:	2180      	movs	r1, #128	@ 0x80
 80043a0:	68f8      	ldr	r0, [r7, #12]
 80043a2:	f000 f927 	bl	80045f4 <I2C_WaitOnFlagUntilTimeout>
 80043a6:	4603      	mov	r3, r0
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d001      	beq.n	80043b0 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80043ac:	2301      	movs	r3, #1
 80043ae:	e04d      	b.n	800444c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043b4:	b29b      	uxth	r3, r3
 80043b6:	2bff      	cmp	r3, #255	@ 0xff
 80043b8:	d90e      	bls.n	80043d8 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	2201      	movs	r2, #1
 80043be:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80043c4:	b2da      	uxtb	r2, r3
 80043c6:	8979      	ldrh	r1, [r7, #10]
 80043c8:	2300      	movs	r3, #0
 80043ca:	9300      	str	r3, [sp, #0]
 80043cc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80043d0:	68f8      	ldr	r0, [r7, #12]
 80043d2:	f000 fad3 	bl	800497c <I2C_TransferConfig>
 80043d6:	e00f      	b.n	80043f8 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043dc:	b29a      	uxth	r2, r3
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80043e6:	b2da      	uxtb	r2, r3
 80043e8:	8979      	ldrh	r1, [r7, #10]
 80043ea:	2300      	movs	r3, #0
 80043ec:	9300      	str	r3, [sp, #0]
 80043ee:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80043f2:	68f8      	ldr	r0, [r7, #12]
 80043f4:	f000 fac2 	bl	800497c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043fc:	b29b      	uxth	r3, r3
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d19a      	bne.n	8004338 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004402:	697a      	ldr	r2, [r7, #20]
 8004404:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004406:	68f8      	ldr	r0, [r7, #12]
 8004408:	f000 f994 	bl	8004734 <I2C_WaitOnSTOPFlagUntilTimeout>
 800440c:	4603      	mov	r3, r0
 800440e:	2b00      	cmp	r3, #0
 8004410:	d001      	beq.n	8004416 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8004412:	2301      	movs	r3, #1
 8004414:	e01a      	b.n	800444c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	2220      	movs	r2, #32
 800441c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	6859      	ldr	r1, [r3, #4]
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	681a      	ldr	r2, [r3, #0]
 8004428:	4b0b      	ldr	r3, [pc, #44]	@ (8004458 <HAL_I2C_Mem_Read+0x230>)
 800442a:	400b      	ands	r3, r1
 800442c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	2220      	movs	r2, #32
 8004432:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	2200      	movs	r2, #0
 800443a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	2200      	movs	r2, #0
 8004442:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004446:	2300      	movs	r3, #0
 8004448:	e000      	b.n	800444c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800444a:	2302      	movs	r3, #2
  }
}
 800444c:	4618      	mov	r0, r3
 800444e:	3718      	adds	r7, #24
 8004450:	46bd      	mov	sp, r7
 8004452:	bd80      	pop	{r7, pc}
 8004454:	80002400 	.word	0x80002400
 8004458:	fe00e800 	.word	0xfe00e800

0800445c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800445c:	b580      	push	{r7, lr}
 800445e:	b086      	sub	sp, #24
 8004460:	af02      	add	r7, sp, #8
 8004462:	60f8      	str	r0, [r7, #12]
 8004464:	4608      	mov	r0, r1
 8004466:	4611      	mov	r1, r2
 8004468:	461a      	mov	r2, r3
 800446a:	4603      	mov	r3, r0
 800446c:	817b      	strh	r3, [r7, #10]
 800446e:	460b      	mov	r3, r1
 8004470:	813b      	strh	r3, [r7, #8]
 8004472:	4613      	mov	r3, r2
 8004474:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8004476:	88fb      	ldrh	r3, [r7, #6]
 8004478:	b2da      	uxtb	r2, r3
 800447a:	8979      	ldrh	r1, [r7, #10]
 800447c:	4b20      	ldr	r3, [pc, #128]	@ (8004500 <I2C_RequestMemoryWrite+0xa4>)
 800447e:	9300      	str	r3, [sp, #0]
 8004480:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004484:	68f8      	ldr	r0, [r7, #12]
 8004486:	f000 fa79 	bl	800497c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800448a:	69fa      	ldr	r2, [r7, #28]
 800448c:	69b9      	ldr	r1, [r7, #24]
 800448e:	68f8      	ldr	r0, [r7, #12]
 8004490:	f000 f909 	bl	80046a6 <I2C_WaitOnTXISFlagUntilTimeout>
 8004494:	4603      	mov	r3, r0
 8004496:	2b00      	cmp	r3, #0
 8004498:	d001      	beq.n	800449e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800449a:	2301      	movs	r3, #1
 800449c:	e02c      	b.n	80044f8 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800449e:	88fb      	ldrh	r3, [r7, #6]
 80044a0:	2b01      	cmp	r3, #1
 80044a2:	d105      	bne.n	80044b0 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80044a4:	893b      	ldrh	r3, [r7, #8]
 80044a6:	b2da      	uxtb	r2, r3
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	629a      	str	r2, [r3, #40]	@ 0x28
 80044ae:	e015      	b.n	80044dc <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80044b0:	893b      	ldrh	r3, [r7, #8]
 80044b2:	0a1b      	lsrs	r3, r3, #8
 80044b4:	b29b      	uxth	r3, r3
 80044b6:	b2da      	uxtb	r2, r3
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80044be:	69fa      	ldr	r2, [r7, #28]
 80044c0:	69b9      	ldr	r1, [r7, #24]
 80044c2:	68f8      	ldr	r0, [r7, #12]
 80044c4:	f000 f8ef 	bl	80046a6 <I2C_WaitOnTXISFlagUntilTimeout>
 80044c8:	4603      	mov	r3, r0
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d001      	beq.n	80044d2 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80044ce:	2301      	movs	r3, #1
 80044d0:	e012      	b.n	80044f8 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80044d2:	893b      	ldrh	r3, [r7, #8]
 80044d4:	b2da      	uxtb	r2, r3
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80044dc:	69fb      	ldr	r3, [r7, #28]
 80044de:	9300      	str	r3, [sp, #0]
 80044e0:	69bb      	ldr	r3, [r7, #24]
 80044e2:	2200      	movs	r2, #0
 80044e4:	2180      	movs	r1, #128	@ 0x80
 80044e6:	68f8      	ldr	r0, [r7, #12]
 80044e8:	f000 f884 	bl	80045f4 <I2C_WaitOnFlagUntilTimeout>
 80044ec:	4603      	mov	r3, r0
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d001      	beq.n	80044f6 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80044f2:	2301      	movs	r3, #1
 80044f4:	e000      	b.n	80044f8 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80044f6:	2300      	movs	r3, #0
}
 80044f8:	4618      	mov	r0, r3
 80044fa:	3710      	adds	r7, #16
 80044fc:	46bd      	mov	sp, r7
 80044fe:	bd80      	pop	{r7, pc}
 8004500:	80002000 	.word	0x80002000

08004504 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8004504:	b580      	push	{r7, lr}
 8004506:	b086      	sub	sp, #24
 8004508:	af02      	add	r7, sp, #8
 800450a:	60f8      	str	r0, [r7, #12]
 800450c:	4608      	mov	r0, r1
 800450e:	4611      	mov	r1, r2
 8004510:	461a      	mov	r2, r3
 8004512:	4603      	mov	r3, r0
 8004514:	817b      	strh	r3, [r7, #10]
 8004516:	460b      	mov	r3, r1
 8004518:	813b      	strh	r3, [r7, #8]
 800451a:	4613      	mov	r3, r2
 800451c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800451e:	88fb      	ldrh	r3, [r7, #6]
 8004520:	b2da      	uxtb	r2, r3
 8004522:	8979      	ldrh	r1, [r7, #10]
 8004524:	4b20      	ldr	r3, [pc, #128]	@ (80045a8 <I2C_RequestMemoryRead+0xa4>)
 8004526:	9300      	str	r3, [sp, #0]
 8004528:	2300      	movs	r3, #0
 800452a:	68f8      	ldr	r0, [r7, #12]
 800452c:	f000 fa26 	bl	800497c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004530:	69fa      	ldr	r2, [r7, #28]
 8004532:	69b9      	ldr	r1, [r7, #24]
 8004534:	68f8      	ldr	r0, [r7, #12]
 8004536:	f000 f8b6 	bl	80046a6 <I2C_WaitOnTXISFlagUntilTimeout>
 800453a:	4603      	mov	r3, r0
 800453c:	2b00      	cmp	r3, #0
 800453e:	d001      	beq.n	8004544 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8004540:	2301      	movs	r3, #1
 8004542:	e02c      	b.n	800459e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004544:	88fb      	ldrh	r3, [r7, #6]
 8004546:	2b01      	cmp	r3, #1
 8004548:	d105      	bne.n	8004556 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800454a:	893b      	ldrh	r3, [r7, #8]
 800454c:	b2da      	uxtb	r2, r3
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	629a      	str	r2, [r3, #40]	@ 0x28
 8004554:	e015      	b.n	8004582 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004556:	893b      	ldrh	r3, [r7, #8]
 8004558:	0a1b      	lsrs	r3, r3, #8
 800455a:	b29b      	uxth	r3, r3
 800455c:	b2da      	uxtb	r2, r3
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004564:	69fa      	ldr	r2, [r7, #28]
 8004566:	69b9      	ldr	r1, [r7, #24]
 8004568:	68f8      	ldr	r0, [r7, #12]
 800456a:	f000 f89c 	bl	80046a6 <I2C_WaitOnTXISFlagUntilTimeout>
 800456e:	4603      	mov	r3, r0
 8004570:	2b00      	cmp	r3, #0
 8004572:	d001      	beq.n	8004578 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8004574:	2301      	movs	r3, #1
 8004576:	e012      	b.n	800459e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004578:	893b      	ldrh	r3, [r7, #8]
 800457a:	b2da      	uxtb	r2, r3
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8004582:	69fb      	ldr	r3, [r7, #28]
 8004584:	9300      	str	r3, [sp, #0]
 8004586:	69bb      	ldr	r3, [r7, #24]
 8004588:	2200      	movs	r2, #0
 800458a:	2140      	movs	r1, #64	@ 0x40
 800458c:	68f8      	ldr	r0, [r7, #12]
 800458e:	f000 f831 	bl	80045f4 <I2C_WaitOnFlagUntilTimeout>
 8004592:	4603      	mov	r3, r0
 8004594:	2b00      	cmp	r3, #0
 8004596:	d001      	beq.n	800459c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8004598:	2301      	movs	r3, #1
 800459a:	e000      	b.n	800459e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800459c:	2300      	movs	r3, #0
}
 800459e:	4618      	mov	r0, r3
 80045a0:	3710      	adds	r7, #16
 80045a2:	46bd      	mov	sp, r7
 80045a4:	bd80      	pop	{r7, pc}
 80045a6:	bf00      	nop
 80045a8:	80002000 	.word	0x80002000

080045ac <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80045ac:	b480      	push	{r7}
 80045ae:	b083      	sub	sp, #12
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	699b      	ldr	r3, [r3, #24]
 80045ba:	f003 0302 	and.w	r3, r3, #2
 80045be:	2b02      	cmp	r3, #2
 80045c0:	d103      	bne.n	80045ca <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	2200      	movs	r2, #0
 80045c8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	699b      	ldr	r3, [r3, #24]
 80045d0:	f003 0301 	and.w	r3, r3, #1
 80045d4:	2b01      	cmp	r3, #1
 80045d6:	d007      	beq.n	80045e8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	699a      	ldr	r2, [r3, #24]
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f042 0201 	orr.w	r2, r2, #1
 80045e6:	619a      	str	r2, [r3, #24]
  }
}
 80045e8:	bf00      	nop
 80045ea:	370c      	adds	r7, #12
 80045ec:	46bd      	mov	sp, r7
 80045ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f2:	4770      	bx	lr

080045f4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	b084      	sub	sp, #16
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	60f8      	str	r0, [r7, #12]
 80045fc:	60b9      	str	r1, [r7, #8]
 80045fe:	603b      	str	r3, [r7, #0]
 8004600:	4613      	mov	r3, r2
 8004602:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004604:	e03b      	b.n	800467e <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004606:	69ba      	ldr	r2, [r7, #24]
 8004608:	6839      	ldr	r1, [r7, #0]
 800460a:	68f8      	ldr	r0, [r7, #12]
 800460c:	f000 f8d6 	bl	80047bc <I2C_IsErrorOccurred>
 8004610:	4603      	mov	r3, r0
 8004612:	2b00      	cmp	r3, #0
 8004614:	d001      	beq.n	800461a <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8004616:	2301      	movs	r3, #1
 8004618:	e041      	b.n	800469e <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800461a:	683b      	ldr	r3, [r7, #0]
 800461c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004620:	d02d      	beq.n	800467e <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004622:	f7fd fecf 	bl	80023c4 <HAL_GetTick>
 8004626:	4602      	mov	r2, r0
 8004628:	69bb      	ldr	r3, [r7, #24]
 800462a:	1ad3      	subs	r3, r2, r3
 800462c:	683a      	ldr	r2, [r7, #0]
 800462e:	429a      	cmp	r2, r3
 8004630:	d302      	bcc.n	8004638 <I2C_WaitOnFlagUntilTimeout+0x44>
 8004632:	683b      	ldr	r3, [r7, #0]
 8004634:	2b00      	cmp	r3, #0
 8004636:	d122      	bne.n	800467e <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	699a      	ldr	r2, [r3, #24]
 800463e:	68bb      	ldr	r3, [r7, #8]
 8004640:	4013      	ands	r3, r2
 8004642:	68ba      	ldr	r2, [r7, #8]
 8004644:	429a      	cmp	r2, r3
 8004646:	bf0c      	ite	eq
 8004648:	2301      	moveq	r3, #1
 800464a:	2300      	movne	r3, #0
 800464c:	b2db      	uxtb	r3, r3
 800464e:	461a      	mov	r2, r3
 8004650:	79fb      	ldrb	r3, [r7, #7]
 8004652:	429a      	cmp	r2, r3
 8004654:	d113      	bne.n	800467e <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800465a:	f043 0220 	orr.w	r2, r3, #32
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	2220      	movs	r2, #32
 8004666:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	2200      	movs	r2, #0
 800466e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	2200      	movs	r2, #0
 8004676:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 800467a:	2301      	movs	r3, #1
 800467c:	e00f      	b.n	800469e <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	699a      	ldr	r2, [r3, #24]
 8004684:	68bb      	ldr	r3, [r7, #8]
 8004686:	4013      	ands	r3, r2
 8004688:	68ba      	ldr	r2, [r7, #8]
 800468a:	429a      	cmp	r2, r3
 800468c:	bf0c      	ite	eq
 800468e:	2301      	moveq	r3, #1
 8004690:	2300      	movne	r3, #0
 8004692:	b2db      	uxtb	r3, r3
 8004694:	461a      	mov	r2, r3
 8004696:	79fb      	ldrb	r3, [r7, #7]
 8004698:	429a      	cmp	r2, r3
 800469a:	d0b4      	beq.n	8004606 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800469c:	2300      	movs	r3, #0
}
 800469e:	4618      	mov	r0, r3
 80046a0:	3710      	adds	r7, #16
 80046a2:	46bd      	mov	sp, r7
 80046a4:	bd80      	pop	{r7, pc}

080046a6 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80046a6:	b580      	push	{r7, lr}
 80046a8:	b084      	sub	sp, #16
 80046aa:	af00      	add	r7, sp, #0
 80046ac:	60f8      	str	r0, [r7, #12]
 80046ae:	60b9      	str	r1, [r7, #8]
 80046b0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80046b2:	e033      	b.n	800471c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80046b4:	687a      	ldr	r2, [r7, #4]
 80046b6:	68b9      	ldr	r1, [r7, #8]
 80046b8:	68f8      	ldr	r0, [r7, #12]
 80046ba:	f000 f87f 	bl	80047bc <I2C_IsErrorOccurred>
 80046be:	4603      	mov	r3, r0
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d001      	beq.n	80046c8 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80046c4:	2301      	movs	r3, #1
 80046c6:	e031      	b.n	800472c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80046c8:	68bb      	ldr	r3, [r7, #8]
 80046ca:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80046ce:	d025      	beq.n	800471c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046d0:	f7fd fe78 	bl	80023c4 <HAL_GetTick>
 80046d4:	4602      	mov	r2, r0
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	1ad3      	subs	r3, r2, r3
 80046da:	68ba      	ldr	r2, [r7, #8]
 80046dc:	429a      	cmp	r2, r3
 80046de:	d302      	bcc.n	80046e6 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80046e0:	68bb      	ldr	r3, [r7, #8]
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d11a      	bne.n	800471c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	699b      	ldr	r3, [r3, #24]
 80046ec:	f003 0302 	and.w	r3, r3, #2
 80046f0:	2b02      	cmp	r3, #2
 80046f2:	d013      	beq.n	800471c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046f8:	f043 0220 	orr.w	r2, r3, #32
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	2220      	movs	r2, #32
 8004704:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	2200      	movs	r2, #0
 800470c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	2200      	movs	r2, #0
 8004714:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004718:	2301      	movs	r3, #1
 800471a:	e007      	b.n	800472c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	699b      	ldr	r3, [r3, #24]
 8004722:	f003 0302 	and.w	r3, r3, #2
 8004726:	2b02      	cmp	r3, #2
 8004728:	d1c4      	bne.n	80046b4 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800472a:	2300      	movs	r3, #0
}
 800472c:	4618      	mov	r0, r3
 800472e:	3710      	adds	r7, #16
 8004730:	46bd      	mov	sp, r7
 8004732:	bd80      	pop	{r7, pc}

08004734 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004734:	b580      	push	{r7, lr}
 8004736:	b084      	sub	sp, #16
 8004738:	af00      	add	r7, sp, #0
 800473a:	60f8      	str	r0, [r7, #12]
 800473c:	60b9      	str	r1, [r7, #8]
 800473e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004740:	e02f      	b.n	80047a2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004742:	687a      	ldr	r2, [r7, #4]
 8004744:	68b9      	ldr	r1, [r7, #8]
 8004746:	68f8      	ldr	r0, [r7, #12]
 8004748:	f000 f838 	bl	80047bc <I2C_IsErrorOccurred>
 800474c:	4603      	mov	r3, r0
 800474e:	2b00      	cmp	r3, #0
 8004750:	d001      	beq.n	8004756 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004752:	2301      	movs	r3, #1
 8004754:	e02d      	b.n	80047b2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004756:	f7fd fe35 	bl	80023c4 <HAL_GetTick>
 800475a:	4602      	mov	r2, r0
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	1ad3      	subs	r3, r2, r3
 8004760:	68ba      	ldr	r2, [r7, #8]
 8004762:	429a      	cmp	r2, r3
 8004764:	d302      	bcc.n	800476c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004766:	68bb      	ldr	r3, [r7, #8]
 8004768:	2b00      	cmp	r3, #0
 800476a:	d11a      	bne.n	80047a2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	699b      	ldr	r3, [r3, #24]
 8004772:	f003 0320 	and.w	r3, r3, #32
 8004776:	2b20      	cmp	r3, #32
 8004778:	d013      	beq.n	80047a2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800477e:	f043 0220 	orr.w	r2, r3, #32
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	2220      	movs	r2, #32
 800478a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	2200      	movs	r2, #0
 8004792:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	2200      	movs	r2, #0
 800479a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800479e:	2301      	movs	r3, #1
 80047a0:	e007      	b.n	80047b2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	699b      	ldr	r3, [r3, #24]
 80047a8:	f003 0320 	and.w	r3, r3, #32
 80047ac:	2b20      	cmp	r3, #32
 80047ae:	d1c8      	bne.n	8004742 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80047b0:	2300      	movs	r3, #0
}
 80047b2:	4618      	mov	r0, r3
 80047b4:	3710      	adds	r7, #16
 80047b6:	46bd      	mov	sp, r7
 80047b8:	bd80      	pop	{r7, pc}
	...

080047bc <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80047bc:	b580      	push	{r7, lr}
 80047be:	b08a      	sub	sp, #40	@ 0x28
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	60f8      	str	r0, [r7, #12]
 80047c4:	60b9      	str	r1, [r7, #8]
 80047c6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80047c8:	2300      	movs	r3, #0
 80047ca:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	699b      	ldr	r3, [r3, #24]
 80047d4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80047d6:	2300      	movs	r3, #0
 80047d8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80047de:	69bb      	ldr	r3, [r7, #24]
 80047e0:	f003 0310 	and.w	r3, r3, #16
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d068      	beq.n	80048ba <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	2210      	movs	r2, #16
 80047ee:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80047f0:	e049      	b.n	8004886 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80047f2:	68bb      	ldr	r3, [r7, #8]
 80047f4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80047f8:	d045      	beq.n	8004886 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80047fa:	f7fd fde3 	bl	80023c4 <HAL_GetTick>
 80047fe:	4602      	mov	r2, r0
 8004800:	69fb      	ldr	r3, [r7, #28]
 8004802:	1ad3      	subs	r3, r2, r3
 8004804:	68ba      	ldr	r2, [r7, #8]
 8004806:	429a      	cmp	r2, r3
 8004808:	d302      	bcc.n	8004810 <I2C_IsErrorOccurred+0x54>
 800480a:	68bb      	ldr	r3, [r7, #8]
 800480c:	2b00      	cmp	r3, #0
 800480e:	d13a      	bne.n	8004886 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	685b      	ldr	r3, [r3, #4]
 8004816:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800481a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004822:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	699b      	ldr	r3, [r3, #24]
 800482a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800482e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004832:	d121      	bne.n	8004878 <I2C_IsErrorOccurred+0xbc>
 8004834:	697b      	ldr	r3, [r7, #20]
 8004836:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800483a:	d01d      	beq.n	8004878 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800483c:	7cfb      	ldrb	r3, [r7, #19]
 800483e:	2b20      	cmp	r3, #32
 8004840:	d01a      	beq.n	8004878 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	685a      	ldr	r2, [r3, #4]
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004850:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004852:	f7fd fdb7 	bl	80023c4 <HAL_GetTick>
 8004856:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004858:	e00e      	b.n	8004878 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800485a:	f7fd fdb3 	bl	80023c4 <HAL_GetTick>
 800485e:	4602      	mov	r2, r0
 8004860:	69fb      	ldr	r3, [r7, #28]
 8004862:	1ad3      	subs	r3, r2, r3
 8004864:	2b19      	cmp	r3, #25
 8004866:	d907      	bls.n	8004878 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8004868:	6a3b      	ldr	r3, [r7, #32]
 800486a:	f043 0320 	orr.w	r3, r3, #32
 800486e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8004870:	2301      	movs	r3, #1
 8004872:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8004876:	e006      	b.n	8004886 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	699b      	ldr	r3, [r3, #24]
 800487e:	f003 0320 	and.w	r3, r3, #32
 8004882:	2b20      	cmp	r3, #32
 8004884:	d1e9      	bne.n	800485a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	699b      	ldr	r3, [r3, #24]
 800488c:	f003 0320 	and.w	r3, r3, #32
 8004890:	2b20      	cmp	r3, #32
 8004892:	d003      	beq.n	800489c <I2C_IsErrorOccurred+0xe0>
 8004894:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004898:	2b00      	cmp	r3, #0
 800489a:	d0aa      	beq.n	80047f2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800489c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d103      	bne.n	80048ac <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	2220      	movs	r2, #32
 80048aa:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80048ac:	6a3b      	ldr	r3, [r7, #32]
 80048ae:	f043 0304 	orr.w	r3, r3, #4
 80048b2:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80048b4:	2301      	movs	r3, #1
 80048b6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	699b      	ldr	r3, [r3, #24]
 80048c0:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80048c2:	69bb      	ldr	r3, [r7, #24]
 80048c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d00b      	beq.n	80048e4 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80048cc:	6a3b      	ldr	r3, [r7, #32]
 80048ce:	f043 0301 	orr.w	r3, r3, #1
 80048d2:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80048dc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80048de:	2301      	movs	r3, #1
 80048e0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80048e4:	69bb      	ldr	r3, [r7, #24]
 80048e6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d00b      	beq.n	8004906 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80048ee:	6a3b      	ldr	r3, [r7, #32]
 80048f0:	f043 0308 	orr.w	r3, r3, #8
 80048f4:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80048fe:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004900:	2301      	movs	r3, #1
 8004902:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004906:	69bb      	ldr	r3, [r7, #24]
 8004908:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800490c:	2b00      	cmp	r3, #0
 800490e:	d00b      	beq.n	8004928 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004910:	6a3b      	ldr	r3, [r7, #32]
 8004912:	f043 0302 	orr.w	r3, r3, #2
 8004916:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004920:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004922:	2301      	movs	r3, #1
 8004924:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8004928:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800492c:	2b00      	cmp	r3, #0
 800492e:	d01c      	beq.n	800496a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004930:	68f8      	ldr	r0, [r7, #12]
 8004932:	f7ff fe3b 	bl	80045ac <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	6859      	ldr	r1, [r3, #4]
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	681a      	ldr	r2, [r3, #0]
 8004940:	4b0d      	ldr	r3, [pc, #52]	@ (8004978 <I2C_IsErrorOccurred+0x1bc>)
 8004942:	400b      	ands	r3, r1
 8004944:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800494a:	6a3b      	ldr	r3, [r7, #32]
 800494c:	431a      	orrs	r2, r3
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	2220      	movs	r2, #32
 8004956:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	2200      	movs	r2, #0
 800495e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	2200      	movs	r2, #0
 8004966:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800496a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800496e:	4618      	mov	r0, r3
 8004970:	3728      	adds	r7, #40	@ 0x28
 8004972:	46bd      	mov	sp, r7
 8004974:	bd80      	pop	{r7, pc}
 8004976:	bf00      	nop
 8004978:	fe00e800 	.word	0xfe00e800

0800497c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800497c:	b480      	push	{r7}
 800497e:	b087      	sub	sp, #28
 8004980:	af00      	add	r7, sp, #0
 8004982:	60f8      	str	r0, [r7, #12]
 8004984:	607b      	str	r3, [r7, #4]
 8004986:	460b      	mov	r3, r1
 8004988:	817b      	strh	r3, [r7, #10]
 800498a:	4613      	mov	r3, r2
 800498c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800498e:	897b      	ldrh	r3, [r7, #10]
 8004990:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004994:	7a7b      	ldrb	r3, [r7, #9]
 8004996:	041b      	lsls	r3, r3, #16
 8004998:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800499c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80049a2:	6a3b      	ldr	r3, [r7, #32]
 80049a4:	4313      	orrs	r3, r2
 80049a6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80049aa:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	685a      	ldr	r2, [r3, #4]
 80049b2:	6a3b      	ldr	r3, [r7, #32]
 80049b4:	0d5b      	lsrs	r3, r3, #21
 80049b6:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80049ba:	4b08      	ldr	r3, [pc, #32]	@ (80049dc <I2C_TransferConfig+0x60>)
 80049bc:	430b      	orrs	r3, r1
 80049be:	43db      	mvns	r3, r3
 80049c0:	ea02 0103 	and.w	r1, r2, r3
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	697a      	ldr	r2, [r7, #20]
 80049ca:	430a      	orrs	r2, r1
 80049cc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80049ce:	bf00      	nop
 80049d0:	371c      	adds	r7, #28
 80049d2:	46bd      	mov	sp, r7
 80049d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d8:	4770      	bx	lr
 80049da:	bf00      	nop
 80049dc:	03ff63ff 	.word	0x03ff63ff

080049e0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80049e0:	b480      	push	{r7}
 80049e2:	b083      	sub	sp, #12
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
 80049e8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80049f0:	b2db      	uxtb	r3, r3
 80049f2:	2b20      	cmp	r3, #32
 80049f4:	d138      	bne.n	8004a68 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80049fc:	2b01      	cmp	r3, #1
 80049fe:	d101      	bne.n	8004a04 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004a00:	2302      	movs	r3, #2
 8004a02:	e032      	b.n	8004a6a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2201      	movs	r2, #1
 8004a08:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2224      	movs	r2, #36	@ 0x24
 8004a10:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	681a      	ldr	r2, [r3, #0]
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f022 0201 	bic.w	r2, r2, #1
 8004a22:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	681a      	ldr	r2, [r3, #0]
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004a32:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	6819      	ldr	r1, [r3, #0]
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	683a      	ldr	r2, [r7, #0]
 8004a40:	430a      	orrs	r2, r1
 8004a42:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	681a      	ldr	r2, [r3, #0]
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f042 0201 	orr.w	r2, r2, #1
 8004a52:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2220      	movs	r2, #32
 8004a58:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2200      	movs	r2, #0
 8004a60:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004a64:	2300      	movs	r3, #0
 8004a66:	e000      	b.n	8004a6a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004a68:	2302      	movs	r3, #2
  }
}
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	370c      	adds	r7, #12
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a74:	4770      	bx	lr

08004a76 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004a76:	b480      	push	{r7}
 8004a78:	b085      	sub	sp, #20
 8004a7a:	af00      	add	r7, sp, #0
 8004a7c:	6078      	str	r0, [r7, #4]
 8004a7e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004a86:	b2db      	uxtb	r3, r3
 8004a88:	2b20      	cmp	r3, #32
 8004a8a:	d139      	bne.n	8004b00 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004a92:	2b01      	cmp	r3, #1
 8004a94:	d101      	bne.n	8004a9a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004a96:	2302      	movs	r3, #2
 8004a98:	e033      	b.n	8004b02 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	2201      	movs	r2, #1
 8004a9e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	2224      	movs	r2, #36	@ 0x24
 8004aa6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	681a      	ldr	r2, [r3, #0]
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f022 0201 	bic.w	r2, r2, #1
 8004ab8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004ac8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004aca:	683b      	ldr	r3, [r7, #0]
 8004acc:	021b      	lsls	r3, r3, #8
 8004ace:	68fa      	ldr	r2, [r7, #12]
 8004ad0:	4313      	orrs	r3, r2
 8004ad2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	68fa      	ldr	r2, [r7, #12]
 8004ada:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	681a      	ldr	r2, [r3, #0]
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f042 0201 	orr.w	r2, r2, #1
 8004aea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2220      	movs	r2, #32
 8004af0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2200      	movs	r2, #0
 8004af8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004afc:	2300      	movs	r3, #0
 8004afe:	e000      	b.n	8004b02 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004b00:	2302      	movs	r3, #2
  }
}
 8004b02:	4618      	mov	r0, r3
 8004b04:	3714      	adds	r7, #20
 8004b06:	46bd      	mov	sp, r7
 8004b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0c:	4770      	bx	lr
	...

08004b10 <HAL_LPTIM_Init>:
  *         LPTIM_InitTypeDef and initialize the associated handle.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
 8004b10:	b580      	push	{r7, lr}
 8004b12:	b084      	sub	sp, #16
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
  uint32_t tmpcfgr;

  /* Check the LPTIM handle allocation */
  if (hlptim == NULL)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d101      	bne.n	8004b22 <HAL_LPTIM_Init+0x12>
  {
    return HAL_ERROR;
 8004b1e:	2301      	movs	r3, #1
 8004b20:	e08f      	b.n	8004c42 <HAL_LPTIM_Init+0x132>
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));

  assert_param(IS_LPTIM_CLOCK_SOURCE(hlptim->Init.Clock.Source));
  assert_param(IS_LPTIM_CLOCK_PRESCALER(hlptim->Init.Clock.Prescaler));
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	685b      	ldr	r3, [r3, #4]
 8004b26:	2b01      	cmp	r3, #1
  assert_param(IS_LPTIM_COUNTER_SOURCE(hlptim->Init.CounterSource));
#if defined(LPTIM_RCR_REP)
  assert_param(IS_LPTIM_REPETITION(hlptim->Init.RepetitionCounter));
#endif

  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8004b2e:	b2db      	uxtb	r3, r3
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d106      	bne.n	8004b42 <HAL_LPTIM_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hlptim->Lock = HAL_UNLOCKED;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2200      	movs	r2, #0
 8004b38:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hlptim->MspInitCallback(hlptim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_LPTIM_MspInit(hlptim);
 8004b3c:	6878      	ldr	r0, [r7, #4]
 8004b3e:	f7fd faa7 	bl	8002090 <HAL_LPTIM_MspInit>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	2202      	movs	r2, #2
 8004b46:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  }

#endif

  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	68db      	ldr	r3, [r3, #12]
 8004b50:	60fb      	str	r3, [r7, #12]

  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	685b      	ldr	r3, [r3, #4]
 8004b56:	2b01      	cmp	r3, #1
 8004b58:	d004      	beq.n	8004b64 <HAL_LPTIM_Init+0x54>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b5e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004b62:	d103      	bne.n	8004b6c <HAL_LPTIM_Init+0x5c>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	f023 031e 	bic.w	r3, r3, #30
 8004b6a:	60fb      	str	r3, [r7, #12]
  }
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	695b      	ldr	r3, [r3, #20]
 8004b70:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004b74:	4293      	cmp	r3, r2
 8004b76:	d005      	beq.n	8004b84 <HAL_LPTIM_Init+0x74>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 8004b7e:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8004b82:	60fb      	str	r3, [r7, #12]
  }

  /* Clear CKSEL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 8004b84:	68fa      	ldr	r2, [r7, #12]
 8004b86:	4b31      	ldr	r3, [pc, #196]	@ (8004c4c <HAL_LPTIM_Init+0x13c>)
 8004b88:	4013      	ands	r3, r2
 8004b8a:	60fb      	str	r3, [r7, #12]
                          LPTIM_CFGR_WAVPOL | LPTIM_CFGR_PRESC | LPTIM_CFGR_COUNTMODE));

  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	685a      	ldr	r2, [r3, #4]
              hlptim->Init.Clock.Prescaler |
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	689b      	ldr	r3, [r3, #8]
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8004b94:	431a      	orrs	r2, r3
              hlptim->Init.OutputPolarity  |
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	6a1b      	ldr	r3, [r3, #32]
              hlptim->Init.Clock.Prescaler |
 8004b9a:	431a      	orrs	r2, r3
              hlptim->Init.UpdateMode      |
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
              hlptim->Init.OutputPolarity  |
 8004ba0:	431a      	orrs	r2, r3
              hlptim->Init.CounterSource);
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
              hlptim->Init.UpdateMode      |
 8004ba6:	4313      	orrs	r3, r2
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8004ba8:	68fa      	ldr	r2, [r7, #12]
 8004baa:	4313      	orrs	r3, r2
 8004bac:	60fb      	str	r3, [r7, #12]

  /* Glitch filters for internal triggers and  external inputs are configured
   * only if an internal clock source is provided to the LPTIM
   */
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC)
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	685b      	ldr	r3, [r3, #4]
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d107      	bne.n	8004bc6 <HAL_LPTIM_Init+0xb6>
  {
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	69da      	ldr	r2, [r3, #28]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 8004bbe:	4313      	orrs	r3, r2
 8004bc0:	68fa      	ldr	r2, [r7, #12]
 8004bc2:	4313      	orrs	r3, r2
 8004bc4:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external clock polarity and digital filter */
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	685b      	ldr	r3, [r3, #4]
 8004bca:	2b01      	cmp	r3, #1
 8004bcc:	d004      	beq.n	8004bd8 <HAL_LPTIM_Init+0xc8>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bd2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004bd6:	d107      	bne.n	8004be8 <HAL_LPTIM_Init+0xd8>
  {
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	68da      	ldr	r2, [r3, #12]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8004be0:	4313      	orrs	r3, r2
 8004be2:	68fa      	ldr	r2, [r7, #12]
 8004be4:	4313      	orrs	r3, r2
 8004be6:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external trigger */
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	695b      	ldr	r3, [r3, #20]
 8004bec:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004bf0:	4293      	cmp	r3, r2
 8004bf2:	d00a      	beq.n	8004c0a <HAL_LPTIM_Init+0xfa>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	695a      	ldr	r2, [r3, #20]
                hlptim->Init.Trigger.ActiveEdge |
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	699b      	ldr	r3, [r3, #24]
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8004bfc:	431a      	orrs	r2, r3
                hlptim->Init.Trigger.SampleTime);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	69db      	ldr	r3, [r3, #28]
                hlptim->Init.Trigger.ActiveEdge |
 8004c02:	4313      	orrs	r3, r2
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8004c04:	68fa      	ldr	r2, [r7, #12]
 8004c06:	4313      	orrs	r3, r2
 8004c08:	60fb      	str	r3, [r7, #12]
  }

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	68fa      	ldr	r2, [r7, #12]
 8004c10:	60da      	str	r2, [r3, #12]

  /* Configure LPTIM input sources */
  if (hlptim->Instance == LPTIM1)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	4a0e      	ldr	r2, [pc, #56]	@ (8004c50 <HAL_LPTIM_Init+0x140>)
 8004c18:	4293      	cmp	r3, r2
 8004c1a:	d108      	bne.n	8004c2e <HAL_LPTIM_Init+0x11e>
    /* Check LPTIM Input1 and Input2 sources */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));
    assert_param(IS_LPTIM_INPUT2_SOURCE(hlptim->Instance, hlptim->Init.Input2Source));

    /* Configure LPTIM Input1 and Input2 sources */
    hlptim->Instance->OR = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	430a      	orrs	r2, r1
 8004c2a:	621a      	str	r2, [r3, #32]
 8004c2c:	e004      	b.n	8004c38 <HAL_LPTIM_Init+0x128>
  {
    /* Check LPTIM Input1 source */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));

    /* Configure LPTIM Input1 source */
    hlptim->Instance->OR = hlptim->Init.Input1Source;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	687a      	ldr	r2, [r7, #4]
 8004c34:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004c36:	621a      	str	r2, [r3, #32]
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2201      	movs	r2, #1
 8004c3c:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36

  /* Return function status */
  return HAL_OK;
 8004c40:	2300      	movs	r3, #0
}
 8004c42:	4618      	mov	r0, r3
 8004c44:	3710      	adds	r7, #16
 8004c46:	46bd      	mov	sp, r7
 8004c48:	bd80      	pop	{r7, pc}
 8004c4a:	bf00      	nop
 8004c4c:	ff19f1fe 	.word	0xff19f1fe
 8004c50:	40007c00 	.word	0x40007c00

08004c54 <HAL_LPTIM_IRQHandler>:
  * @brief  Handle LPTIM interrupt request.
  * @param  hlptim LPTIM handle
  * @retval None
  */
void HAL_LPTIM_IRQHandler(LPTIM_HandleTypeDef *hlptim)
{
 8004c54:	b580      	push	{r7, lr}
 8004c56:	b082      	sub	sp, #8
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]
  /* Compare match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPM) != RESET)
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f003 0301 	and.w	r3, r3, #1
 8004c66:	2b01      	cmp	r3, #1
 8004c68:	d10d      	bne.n	8004c86 <HAL_LPTIM_IRQHandler+0x32>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPM) != RESET)
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	689b      	ldr	r3, [r3, #8]
 8004c70:	f003 0301 	and.w	r3, r3, #1
 8004c74:	2b01      	cmp	r3, #1
 8004c76:	d106      	bne.n	8004c86 <HAL_LPTIM_IRQHandler+0x32>
    {
      /* Clear Compare match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPM);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	2201      	movs	r2, #1
 8004c7e:	605a      	str	r2, [r3, #4]

      /* Compare match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareMatchCallback(hlptim);
#else
      HAL_LPTIM_CompareMatchCallback(hlptim);
 8004c80:	6878      	ldr	r0, [r7, #4]
 8004c82:	f000 f882 	bl	8004d8a <HAL_LPTIM_CompareMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARRM) != RESET)
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f003 0302 	and.w	r3, r3, #2
 8004c90:	2b02      	cmp	r3, #2
 8004c92:	d10d      	bne.n	8004cb0 <HAL_LPTIM_IRQHandler+0x5c>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARRM) != RESET)
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	689b      	ldr	r3, [r3, #8]
 8004c9a:	f003 0302 	and.w	r3, r3, #2
 8004c9e:	2b02      	cmp	r3, #2
 8004ca0:	d106      	bne.n	8004cb0 <HAL_LPTIM_IRQHandler+0x5c>
    {
      /* Clear Autoreload match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARRM);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	2202      	movs	r2, #2
 8004ca8:	605a      	str	r2, [r3, #4]

      /* Autoreload match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadMatchCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadMatchCallback(hlptim);
 8004caa:	6878      	ldr	r0, [r7, #4]
 8004cac:	f000 f877 	bl	8004d9e <HAL_LPTIM_AutoReloadMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Trigger detected interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_EXTTRIG) != RESET)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f003 0304 	and.w	r3, r3, #4
 8004cba:	2b04      	cmp	r3, #4
 8004cbc:	d10d      	bne.n	8004cda <HAL_LPTIM_IRQHandler+0x86>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_EXTTRIG) != RESET)
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	689b      	ldr	r3, [r3, #8]
 8004cc4:	f003 0304 	and.w	r3, r3, #4
 8004cc8:	2b04      	cmp	r3, #4
 8004cca:	d106      	bne.n	8004cda <HAL_LPTIM_IRQHandler+0x86>
    {
      /* Clear Trigger detected flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_EXTTRIG);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	2204      	movs	r2, #4
 8004cd2:	605a      	str	r2, [r3, #4]

      /* Trigger detected callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->TriggerCallback(hlptim);
#else
      HAL_LPTIM_TriggerCallback(hlptim);
 8004cd4:	6878      	ldr	r0, [r7, #4]
 8004cd6:	f000 f86c 	bl	8004db2 <HAL_LPTIM_TriggerCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Compare write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPOK) != RESET)
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f003 0308 	and.w	r3, r3, #8
 8004ce4:	2b08      	cmp	r3, #8
 8004ce6:	d10d      	bne.n	8004d04 <HAL_LPTIM_IRQHandler+0xb0>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPOK) != RESET)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	689b      	ldr	r3, [r3, #8]
 8004cee:	f003 0308 	and.w	r3, r3, #8
 8004cf2:	2b08      	cmp	r3, #8
 8004cf4:	d106      	bne.n	8004d04 <HAL_LPTIM_IRQHandler+0xb0>
    {
      /* Clear Compare write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	2208      	movs	r2, #8
 8004cfc:	605a      	str	r2, [r3, #4]

      /* Compare write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareWriteCallback(hlptim);
#else
      HAL_LPTIM_CompareWriteCallback(hlptim);
 8004cfe:	6878      	ldr	r0, [r7, #4]
 8004d00:	f000 f861 	bl	8004dc6 <HAL_LPTIM_CompareWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARROK) != RESET)
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f003 0310 	and.w	r3, r3, #16
 8004d0e:	2b10      	cmp	r3, #16
 8004d10:	d10d      	bne.n	8004d2e <HAL_LPTIM_IRQHandler+0xda>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARROK) != RESET)
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	689b      	ldr	r3, [r3, #8]
 8004d18:	f003 0310 	and.w	r3, r3, #16
 8004d1c:	2b10      	cmp	r3, #16
 8004d1e:	d106      	bne.n	8004d2e <HAL_LPTIM_IRQHandler+0xda>
    {
      /* Clear Autoreload write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	2210      	movs	r2, #16
 8004d26:	605a      	str	r2, [r3, #4]

      /* Autoreload write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadWriteCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadWriteCallback(hlptim);
 8004d28:	6878      	ldr	r0, [r7, #4]
 8004d2a:	f000 f856 	bl	8004dda <HAL_LPTIM_AutoReloadWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Down to Up interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_UP) != RESET)
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f003 0320 	and.w	r3, r3, #32
 8004d38:	2b20      	cmp	r3, #32
 8004d3a:	d10d      	bne.n	8004d58 <HAL_LPTIM_IRQHandler+0x104>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_UP) != RESET)
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	689b      	ldr	r3, [r3, #8]
 8004d42:	f003 0320 	and.w	r3, r3, #32
 8004d46:	2b20      	cmp	r3, #32
 8004d48:	d106      	bne.n	8004d58 <HAL_LPTIM_IRQHandler+0x104>
    {
      /* Clear Direction counter changed from Down to Up flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_UP);
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	2220      	movs	r2, #32
 8004d50:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Down to Up Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionUpCallback(hlptim);
#else
      HAL_LPTIM_DirectionUpCallback(hlptim);
 8004d52:	6878      	ldr	r0, [r7, #4]
 8004d54:	f000 f84b 	bl	8004dee <HAL_LPTIM_DirectionUpCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Up to Down interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_DOWN) != RESET)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d62:	2b40      	cmp	r3, #64	@ 0x40
 8004d64:	d10d      	bne.n	8004d82 <HAL_LPTIM_IRQHandler+0x12e>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_DOWN) != RESET)
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	689b      	ldr	r3, [r3, #8]
 8004d6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d70:	2b40      	cmp	r3, #64	@ 0x40
 8004d72:	d106      	bne.n	8004d82 <HAL_LPTIM_IRQHandler+0x12e>
    {
      /* Clear Direction counter changed from Up to Down flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_DOWN);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	2240      	movs	r2, #64	@ 0x40
 8004d7a:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Up to Down Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionDownCallback(hlptim);
#else
      HAL_LPTIM_DirectionDownCallback(hlptim);
 8004d7c:	6878      	ldr	r0, [r7, #4]
 8004d7e:	f000 f840 	bl	8004e02 <HAL_LPTIM_DirectionDownCallback>
      HAL_LPTIM_RepCounterWriteCallback(hlptim);
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }
#endif
}
 8004d82:	bf00      	nop
 8004d84:	3708      	adds	r7, #8
 8004d86:	46bd      	mov	sp, r7
 8004d88:	bd80      	pop	{r7, pc}

08004d8a <HAL_LPTIM_CompareMatchCallback>:
  * @brief  Compare match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 8004d8a:	b480      	push	{r7}
 8004d8c:	b083      	sub	sp, #12
 8004d8e:	af00      	add	r7, sp, #0
 8004d90:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareMatchCallback could be implemented in the user file
   */
}
 8004d92:	bf00      	nop
 8004d94:	370c      	adds	r7, #12
 8004d96:	46bd      	mov	sp, r7
 8004d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9c:	4770      	bx	lr

08004d9e <HAL_LPTIM_AutoReloadMatchCallback>:
  * @brief  Autoreload match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 8004d9e:	b480      	push	{r7}
 8004da0:	b083      	sub	sp, #12
 8004da2:	af00      	add	r7, sp, #0
 8004da4:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadMatchCallback could be implemented in the user file
   */
}
 8004da6:	bf00      	nop
 8004da8:	370c      	adds	r7, #12
 8004daa:	46bd      	mov	sp, r7
 8004dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db0:	4770      	bx	lr

08004db2 <HAL_LPTIM_TriggerCallback>:
  * @brief  Trigger detected callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_TriggerCallback(LPTIM_HandleTypeDef *hlptim)
{
 8004db2:	b480      	push	{r7}
 8004db4:	b083      	sub	sp, #12
 8004db6:	af00      	add	r7, sp, #0
 8004db8:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_TriggerCallback could be implemented in the user file
   */
}
 8004dba:	bf00      	nop
 8004dbc:	370c      	adds	r7, #12
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc4:	4770      	bx	lr

08004dc6 <HAL_LPTIM_CompareWriteCallback>:
  * @brief  Compare write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 8004dc6:	b480      	push	{r7}
 8004dc8:	b083      	sub	sp, #12
 8004dca:	af00      	add	r7, sp, #0
 8004dcc:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareWriteCallback could be implemented in the user file
   */
}
 8004dce:	bf00      	nop
 8004dd0:	370c      	adds	r7, #12
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd8:	4770      	bx	lr

08004dda <HAL_LPTIM_AutoReloadWriteCallback>:
  * @brief  Autoreload write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 8004dda:	b480      	push	{r7}
 8004ddc:	b083      	sub	sp, #12
 8004dde:	af00      	add	r7, sp, #0
 8004de0:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadWriteCallback could be implemented in the user file
   */
}
 8004de2:	bf00      	nop
 8004de4:	370c      	adds	r7, #12
 8004de6:	46bd      	mov	sp, r7
 8004de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dec:	4770      	bx	lr

08004dee <HAL_LPTIM_DirectionUpCallback>:
  * @brief  Direction counter changed from Down to Up callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionUpCallback(LPTIM_HandleTypeDef *hlptim)
{
 8004dee:	b480      	push	{r7}
 8004df0:	b083      	sub	sp, #12
 8004df2:	af00      	add	r7, sp, #0
 8004df4:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionUpCallback could be implemented in the user file
   */
}
 8004df6:	bf00      	nop
 8004df8:	370c      	adds	r7, #12
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e00:	4770      	bx	lr

08004e02 <HAL_LPTIM_DirectionDownCallback>:
  * @brief  Direction counter changed from Up to Down callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionDownCallback(LPTIM_HandleTypeDef *hlptim)
{
 8004e02:	b480      	push	{r7}
 8004e04:	b083      	sub	sp, #12
 8004e06:	af00      	add	r7, sp, #0
 8004e08:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionDownCallback could be implemented in the user file
   */
}
 8004e0a:	bf00      	nop
 8004e0c:	370c      	adds	r7, #12
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e14:	4770      	bx	lr
	...

08004e18 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004e18:	b480      	push	{r7}
 8004e1a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004e1c:	4b05      	ldr	r3, [pc, #20]	@ (8004e34 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	4a04      	ldr	r2, [pc, #16]	@ (8004e34 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004e22:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004e26:	6013      	str	r3, [r2, #0]
}
 8004e28:	bf00      	nop
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e30:	4770      	bx	lr
 8004e32:	bf00      	nop
 8004e34:	40007000 	.word	0x40007000

08004e38 <HAL_PWR_EnterSLEEPMode>:
  * @note  When WFI entry is used, tick interrupt have to be disabled if not desired as
  *        the interrupt wake up source.
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 8004e38:	b580      	push	{r7, lr}
 8004e3a:	b082      	sub	sp, #8
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	6078      	str	r0, [r7, #4]
 8004e40:	460b      	mov	r3, r1
 8004e42:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Set Regulator parameter */
  if (Regulator == PWR_MAINREGULATOR_ON)
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d10c      	bne.n	8004e64 <HAL_PWR_EnterSLEEPMode+0x2c>
  {
    /* If in low-power run mode at this point, exit it */
    if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF))
 8004e4a:	4b13      	ldr	r3, [pc, #76]	@ (8004e98 <HAL_PWR_EnterSLEEPMode+0x60>)
 8004e4c:	695b      	ldr	r3, [r3, #20]
 8004e4e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004e52:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004e56:	d10e      	bne.n	8004e76 <HAL_PWR_EnterSLEEPMode+0x3e>
    {
      if (HAL_PWREx_DisableLowPowerRunMode() != HAL_OK)
 8004e58:	f000 f896 	bl	8004f88 <HAL_PWREx_DisableLowPowerRunMode>
 8004e5c:	4603      	mov	r3, r0
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d009      	beq.n	8004e76 <HAL_PWR_EnterSLEEPMode+0x3e>
      {
        return ;
 8004e62:	e016      	b.n	8004e92 <HAL_PWR_EnterSLEEPMode+0x5a>
  }
  else
  {
    /* If in run mode, first move to low-power run mode.
       The system clock frequency must be below 2 MHz at this point. */
    if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF) == RESET)
 8004e64:	4b0c      	ldr	r3, [pc, #48]	@ (8004e98 <HAL_PWR_EnterSLEEPMode+0x60>)
 8004e66:	695b      	ldr	r3, [r3, #20]
 8004e68:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004e6c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004e70:	d001      	beq.n	8004e76 <HAL_PWR_EnterSLEEPMode+0x3e>
    {
      HAL_PWREx_EnableLowPowerRunMode();
 8004e72:	f000 f879 	bl	8004f68 <HAL_PWREx_EnableLowPowerRunMode>
    }
  }

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8004e76:	4b09      	ldr	r3, [pc, #36]	@ (8004e9c <HAL_PWR_EnterSLEEPMode+0x64>)
 8004e78:	691b      	ldr	r3, [r3, #16]
 8004e7a:	4a08      	ldr	r2, [pc, #32]	@ (8004e9c <HAL_PWR_EnterSLEEPMode+0x64>)
 8004e7c:	f023 0304 	bic.w	r3, r3, #4
 8004e80:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8004e82:	78fb      	ldrb	r3, [r7, #3]
 8004e84:	2b01      	cmp	r3, #1
 8004e86:	d101      	bne.n	8004e8c <HAL_PWR_EnterSLEEPMode+0x54>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8004e88:	bf30      	wfi
 8004e8a:	e002      	b.n	8004e92 <HAL_PWR_EnterSLEEPMode+0x5a>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8004e8c:	bf40      	sev
    __WFE();
 8004e8e:	bf20      	wfe
    __WFE();
 8004e90:	bf20      	wfe
  }

}
 8004e92:	3708      	adds	r7, #8
 8004e94:	46bd      	mov	sp, r7
 8004e96:	bd80      	pop	{r7, pc}
 8004e98:	40007000 	.word	0x40007000
 8004e9c:	e000ed00 	.word	0xe000ed00

08004ea0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004ea0:	b480      	push	{r7}
 8004ea2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004ea4:	4b04      	ldr	r3, [pc, #16]	@ (8004eb8 <HAL_PWREx_GetVoltageRange+0x18>)
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8004eac:	4618      	mov	r0, r3
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb4:	4770      	bx	lr
 8004eb6:	bf00      	nop
 8004eb8:	40007000 	.word	0x40007000

08004ebc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004ebc:	b480      	push	{r7}
 8004ebe:	b085      	sub	sp, #20
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004eca:	d130      	bne.n	8004f2e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004ecc:	4b23      	ldr	r3, [pc, #140]	@ (8004f5c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004ed4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004ed8:	d038      	beq.n	8004f4c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004eda:	4b20      	ldr	r3, [pc, #128]	@ (8004f5c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004ee2:	4a1e      	ldr	r2, [pc, #120]	@ (8004f5c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004ee4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004ee8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004eea:	4b1d      	ldr	r3, [pc, #116]	@ (8004f60 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	2232      	movs	r2, #50	@ 0x32
 8004ef0:	fb02 f303 	mul.w	r3, r2, r3
 8004ef4:	4a1b      	ldr	r2, [pc, #108]	@ (8004f64 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004ef6:	fba2 2303 	umull	r2, r3, r2, r3
 8004efa:	0c9b      	lsrs	r3, r3, #18
 8004efc:	3301      	adds	r3, #1
 8004efe:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004f00:	e002      	b.n	8004f08 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	3b01      	subs	r3, #1
 8004f06:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004f08:	4b14      	ldr	r3, [pc, #80]	@ (8004f5c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004f0a:	695b      	ldr	r3, [r3, #20]
 8004f0c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004f10:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004f14:	d102      	bne.n	8004f1c <HAL_PWREx_ControlVoltageScaling+0x60>
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d1f2      	bne.n	8004f02 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004f1c:	4b0f      	ldr	r3, [pc, #60]	@ (8004f5c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004f1e:	695b      	ldr	r3, [r3, #20]
 8004f20:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004f24:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004f28:	d110      	bne.n	8004f4c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8004f2a:	2303      	movs	r3, #3
 8004f2c:	e00f      	b.n	8004f4e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8004f2e:	4b0b      	ldr	r3, [pc, #44]	@ (8004f5c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004f36:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004f3a:	d007      	beq.n	8004f4c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004f3c:	4b07      	ldr	r3, [pc, #28]	@ (8004f5c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004f44:	4a05      	ldr	r2, [pc, #20]	@ (8004f5c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004f46:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004f4a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004f4c:	2300      	movs	r3, #0
}
 8004f4e:	4618      	mov	r0, r3
 8004f50:	3714      	adds	r7, #20
 8004f52:	46bd      	mov	sp, r7
 8004f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f58:	4770      	bx	lr
 8004f5a:	bf00      	nop
 8004f5c:	40007000 	.word	0x40007000
 8004f60:	20000000 	.word	0x20000000
 8004f64:	431bde83 	.word	0x431bde83

08004f68 <HAL_PWREx_EnableLowPowerRunMode>:
  *        Setting RUN_PD in FLASH_ACR then appropriately reducing the clock frequency must
  *        be done before calling HAL_PWREx_EnableLowPowerRunMode() API.
  * @retval None
  */
void HAL_PWREx_EnableLowPowerRunMode(void)
{
 8004f68:	b480      	push	{r7}
 8004f6a:	af00      	add	r7, sp, #0
  /* Set Regulator parameter */
  SET_BIT(PWR->CR1, PWR_CR1_LPR);
 8004f6c:	4b05      	ldr	r3, [pc, #20]	@ (8004f84 <HAL_PWREx_EnableLowPowerRunMode+0x1c>)
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	4a04      	ldr	r2, [pc, #16]	@ (8004f84 <HAL_PWREx_EnableLowPowerRunMode+0x1c>)
 8004f72:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004f76:	6013      	str	r3, [r2, #0]
}
 8004f78:	bf00      	nop
 8004f7a:	46bd      	mov	sp, r7
 8004f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f80:	4770      	bx	lr
 8004f82:	bf00      	nop
 8004f84:	40007000 	.word	0x40007000

08004f88 <HAL_PWREx_DisableLowPowerRunMode>:
  *        returns HAL_TIMEOUT status). The system clock frequency can then be
  *        increased above 2 MHz.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_DisableLowPowerRunMode(void)
{
 8004f88:	b480      	push	{r7}
 8004f8a:	b083      	sub	sp, #12
 8004f8c:	af00      	add	r7, sp, #0
  uint32_t wait_loop_index;

  /* Clear LPR bit */
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 8004f8e:	4b17      	ldr	r3, [pc, #92]	@ (8004fec <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	4a16      	ldr	r2, [pc, #88]	@ (8004fec <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 8004f94:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004f98:	6013      	str	r3, [r2, #0]

  /* Wait until REGLPF is reset */
  wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004f9a:	4b15      	ldr	r3, [pc, #84]	@ (8004ff0 <HAL_PWREx_DisableLowPowerRunMode+0x68>)
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	2232      	movs	r2, #50	@ 0x32
 8004fa0:	fb02 f303 	mul.w	r3, r2, r3
 8004fa4:	4a13      	ldr	r2, [pc, #76]	@ (8004ff4 <HAL_PWREx_DisableLowPowerRunMode+0x6c>)
 8004fa6:	fba2 2303 	umull	r2, r3, r2, r3
 8004faa:	0c9b      	lsrs	r3, r3, #18
 8004fac:	3301      	adds	r3, #1
 8004fae:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 8004fb0:	e002      	b.n	8004fb8 <HAL_PWREx_DisableLowPowerRunMode+0x30>
  {
    wait_loop_index--;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	3b01      	subs	r3, #1
 8004fb6:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 8004fb8:	4b0c      	ldr	r3, [pc, #48]	@ (8004fec <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 8004fba:	695b      	ldr	r3, [r3, #20]
 8004fbc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004fc0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004fc4:	d102      	bne.n	8004fcc <HAL_PWREx_DisableLowPowerRunMode+0x44>
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d1f2      	bne.n	8004fb2 <HAL_PWREx_DisableLowPowerRunMode+0x2a>
  }
  if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF))
 8004fcc:	4b07      	ldr	r3, [pc, #28]	@ (8004fec <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 8004fce:	695b      	ldr	r3, [r3, #20]
 8004fd0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004fd4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004fd8:	d101      	bne.n	8004fde <HAL_PWREx_DisableLowPowerRunMode+0x56>
  {
    return HAL_TIMEOUT;
 8004fda:	2303      	movs	r3, #3
 8004fdc:	e000      	b.n	8004fe0 <HAL_PWREx_DisableLowPowerRunMode+0x58>
  }

  return HAL_OK;
 8004fde:	2300      	movs	r3, #0
}
 8004fe0:	4618      	mov	r0, r3
 8004fe2:	370c      	adds	r7, #12
 8004fe4:	46bd      	mov	sp, r7
 8004fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fea:	4770      	bx	lr
 8004fec:	40007000 	.word	0x40007000
 8004ff0:	20000000 	.word	0x20000000
 8004ff4:	431bde83 	.word	0x431bde83

08004ff8 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004ff8:	b580      	push	{r7, lr}
 8004ffa:	b088      	sub	sp, #32
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2b00      	cmp	r3, #0
 8005004:	d102      	bne.n	800500c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8005006:	2301      	movs	r3, #1
 8005008:	f000 bc02 	b.w	8005810 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800500c:	4b96      	ldr	r3, [pc, #600]	@ (8005268 <HAL_RCC_OscConfig+0x270>)
 800500e:	689b      	ldr	r3, [r3, #8]
 8005010:	f003 030c 	and.w	r3, r3, #12
 8005014:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005016:	4b94      	ldr	r3, [pc, #592]	@ (8005268 <HAL_RCC_OscConfig+0x270>)
 8005018:	68db      	ldr	r3, [r3, #12]
 800501a:	f003 0303 	and.w	r3, r3, #3
 800501e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f003 0310 	and.w	r3, r3, #16
 8005028:	2b00      	cmp	r3, #0
 800502a:	f000 80e4 	beq.w	80051f6 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800502e:	69bb      	ldr	r3, [r7, #24]
 8005030:	2b00      	cmp	r3, #0
 8005032:	d007      	beq.n	8005044 <HAL_RCC_OscConfig+0x4c>
 8005034:	69bb      	ldr	r3, [r7, #24]
 8005036:	2b0c      	cmp	r3, #12
 8005038:	f040 808b 	bne.w	8005152 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800503c:	697b      	ldr	r3, [r7, #20]
 800503e:	2b01      	cmp	r3, #1
 8005040:	f040 8087 	bne.w	8005152 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005044:	4b88      	ldr	r3, [pc, #544]	@ (8005268 <HAL_RCC_OscConfig+0x270>)
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f003 0302 	and.w	r3, r3, #2
 800504c:	2b00      	cmp	r3, #0
 800504e:	d005      	beq.n	800505c <HAL_RCC_OscConfig+0x64>
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	699b      	ldr	r3, [r3, #24]
 8005054:	2b00      	cmp	r3, #0
 8005056:	d101      	bne.n	800505c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8005058:	2301      	movs	r3, #1
 800505a:	e3d9      	b.n	8005810 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	6a1a      	ldr	r2, [r3, #32]
 8005060:	4b81      	ldr	r3, [pc, #516]	@ (8005268 <HAL_RCC_OscConfig+0x270>)
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f003 0308 	and.w	r3, r3, #8
 8005068:	2b00      	cmp	r3, #0
 800506a:	d004      	beq.n	8005076 <HAL_RCC_OscConfig+0x7e>
 800506c:	4b7e      	ldr	r3, [pc, #504]	@ (8005268 <HAL_RCC_OscConfig+0x270>)
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005074:	e005      	b.n	8005082 <HAL_RCC_OscConfig+0x8a>
 8005076:	4b7c      	ldr	r3, [pc, #496]	@ (8005268 <HAL_RCC_OscConfig+0x270>)
 8005078:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800507c:	091b      	lsrs	r3, r3, #4
 800507e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005082:	4293      	cmp	r3, r2
 8005084:	d223      	bcs.n	80050ce <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	6a1b      	ldr	r3, [r3, #32]
 800508a:	4618      	mov	r0, r3
 800508c:	f000 fd8c 	bl	8005ba8 <RCC_SetFlashLatencyFromMSIRange>
 8005090:	4603      	mov	r3, r0
 8005092:	2b00      	cmp	r3, #0
 8005094:	d001      	beq.n	800509a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8005096:	2301      	movs	r3, #1
 8005098:	e3ba      	b.n	8005810 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800509a:	4b73      	ldr	r3, [pc, #460]	@ (8005268 <HAL_RCC_OscConfig+0x270>)
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	4a72      	ldr	r2, [pc, #456]	@ (8005268 <HAL_RCC_OscConfig+0x270>)
 80050a0:	f043 0308 	orr.w	r3, r3, #8
 80050a4:	6013      	str	r3, [r2, #0]
 80050a6:	4b70      	ldr	r3, [pc, #448]	@ (8005268 <HAL_RCC_OscConfig+0x270>)
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	6a1b      	ldr	r3, [r3, #32]
 80050b2:	496d      	ldr	r1, [pc, #436]	@ (8005268 <HAL_RCC_OscConfig+0x270>)
 80050b4:	4313      	orrs	r3, r2
 80050b6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80050b8:	4b6b      	ldr	r3, [pc, #428]	@ (8005268 <HAL_RCC_OscConfig+0x270>)
 80050ba:	685b      	ldr	r3, [r3, #4]
 80050bc:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	69db      	ldr	r3, [r3, #28]
 80050c4:	021b      	lsls	r3, r3, #8
 80050c6:	4968      	ldr	r1, [pc, #416]	@ (8005268 <HAL_RCC_OscConfig+0x270>)
 80050c8:	4313      	orrs	r3, r2
 80050ca:	604b      	str	r3, [r1, #4]
 80050cc:	e025      	b.n	800511a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80050ce:	4b66      	ldr	r3, [pc, #408]	@ (8005268 <HAL_RCC_OscConfig+0x270>)
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	4a65      	ldr	r2, [pc, #404]	@ (8005268 <HAL_RCC_OscConfig+0x270>)
 80050d4:	f043 0308 	orr.w	r3, r3, #8
 80050d8:	6013      	str	r3, [r2, #0]
 80050da:	4b63      	ldr	r3, [pc, #396]	@ (8005268 <HAL_RCC_OscConfig+0x270>)
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	6a1b      	ldr	r3, [r3, #32]
 80050e6:	4960      	ldr	r1, [pc, #384]	@ (8005268 <HAL_RCC_OscConfig+0x270>)
 80050e8:	4313      	orrs	r3, r2
 80050ea:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80050ec:	4b5e      	ldr	r3, [pc, #376]	@ (8005268 <HAL_RCC_OscConfig+0x270>)
 80050ee:	685b      	ldr	r3, [r3, #4]
 80050f0:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	69db      	ldr	r3, [r3, #28]
 80050f8:	021b      	lsls	r3, r3, #8
 80050fa:	495b      	ldr	r1, [pc, #364]	@ (8005268 <HAL_RCC_OscConfig+0x270>)
 80050fc:	4313      	orrs	r3, r2
 80050fe:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005100:	69bb      	ldr	r3, [r7, #24]
 8005102:	2b00      	cmp	r3, #0
 8005104:	d109      	bne.n	800511a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	6a1b      	ldr	r3, [r3, #32]
 800510a:	4618      	mov	r0, r3
 800510c:	f000 fd4c 	bl	8005ba8 <RCC_SetFlashLatencyFromMSIRange>
 8005110:	4603      	mov	r3, r0
 8005112:	2b00      	cmp	r3, #0
 8005114:	d001      	beq.n	800511a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8005116:	2301      	movs	r3, #1
 8005118:	e37a      	b.n	8005810 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800511a:	f000 fc81 	bl	8005a20 <HAL_RCC_GetSysClockFreq>
 800511e:	4602      	mov	r2, r0
 8005120:	4b51      	ldr	r3, [pc, #324]	@ (8005268 <HAL_RCC_OscConfig+0x270>)
 8005122:	689b      	ldr	r3, [r3, #8]
 8005124:	091b      	lsrs	r3, r3, #4
 8005126:	f003 030f 	and.w	r3, r3, #15
 800512a:	4950      	ldr	r1, [pc, #320]	@ (800526c <HAL_RCC_OscConfig+0x274>)
 800512c:	5ccb      	ldrb	r3, [r1, r3]
 800512e:	f003 031f 	and.w	r3, r3, #31
 8005132:	fa22 f303 	lsr.w	r3, r2, r3
 8005136:	4a4e      	ldr	r2, [pc, #312]	@ (8005270 <HAL_RCC_OscConfig+0x278>)
 8005138:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800513a:	4b4e      	ldr	r3, [pc, #312]	@ (8005274 <HAL_RCC_OscConfig+0x27c>)
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	4618      	mov	r0, r3
 8005140:	f7fd f8f0 	bl	8002324 <HAL_InitTick>
 8005144:	4603      	mov	r3, r0
 8005146:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8005148:	7bfb      	ldrb	r3, [r7, #15]
 800514a:	2b00      	cmp	r3, #0
 800514c:	d052      	beq.n	80051f4 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800514e:	7bfb      	ldrb	r3, [r7, #15]
 8005150:	e35e      	b.n	8005810 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	699b      	ldr	r3, [r3, #24]
 8005156:	2b00      	cmp	r3, #0
 8005158:	d032      	beq.n	80051c0 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800515a:	4b43      	ldr	r3, [pc, #268]	@ (8005268 <HAL_RCC_OscConfig+0x270>)
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	4a42      	ldr	r2, [pc, #264]	@ (8005268 <HAL_RCC_OscConfig+0x270>)
 8005160:	f043 0301 	orr.w	r3, r3, #1
 8005164:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005166:	f7fd f92d 	bl	80023c4 <HAL_GetTick>
 800516a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800516c:	e008      	b.n	8005180 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800516e:	f7fd f929 	bl	80023c4 <HAL_GetTick>
 8005172:	4602      	mov	r2, r0
 8005174:	693b      	ldr	r3, [r7, #16]
 8005176:	1ad3      	subs	r3, r2, r3
 8005178:	2b02      	cmp	r3, #2
 800517a:	d901      	bls.n	8005180 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800517c:	2303      	movs	r3, #3
 800517e:	e347      	b.n	8005810 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005180:	4b39      	ldr	r3, [pc, #228]	@ (8005268 <HAL_RCC_OscConfig+0x270>)
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f003 0302 	and.w	r3, r3, #2
 8005188:	2b00      	cmp	r3, #0
 800518a:	d0f0      	beq.n	800516e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800518c:	4b36      	ldr	r3, [pc, #216]	@ (8005268 <HAL_RCC_OscConfig+0x270>)
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	4a35      	ldr	r2, [pc, #212]	@ (8005268 <HAL_RCC_OscConfig+0x270>)
 8005192:	f043 0308 	orr.w	r3, r3, #8
 8005196:	6013      	str	r3, [r2, #0]
 8005198:	4b33      	ldr	r3, [pc, #204]	@ (8005268 <HAL_RCC_OscConfig+0x270>)
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	6a1b      	ldr	r3, [r3, #32]
 80051a4:	4930      	ldr	r1, [pc, #192]	@ (8005268 <HAL_RCC_OscConfig+0x270>)
 80051a6:	4313      	orrs	r3, r2
 80051a8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80051aa:	4b2f      	ldr	r3, [pc, #188]	@ (8005268 <HAL_RCC_OscConfig+0x270>)
 80051ac:	685b      	ldr	r3, [r3, #4]
 80051ae:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	69db      	ldr	r3, [r3, #28]
 80051b6:	021b      	lsls	r3, r3, #8
 80051b8:	492b      	ldr	r1, [pc, #172]	@ (8005268 <HAL_RCC_OscConfig+0x270>)
 80051ba:	4313      	orrs	r3, r2
 80051bc:	604b      	str	r3, [r1, #4]
 80051be:	e01a      	b.n	80051f6 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80051c0:	4b29      	ldr	r3, [pc, #164]	@ (8005268 <HAL_RCC_OscConfig+0x270>)
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	4a28      	ldr	r2, [pc, #160]	@ (8005268 <HAL_RCC_OscConfig+0x270>)
 80051c6:	f023 0301 	bic.w	r3, r3, #1
 80051ca:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80051cc:	f7fd f8fa 	bl	80023c4 <HAL_GetTick>
 80051d0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80051d2:	e008      	b.n	80051e6 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80051d4:	f7fd f8f6 	bl	80023c4 <HAL_GetTick>
 80051d8:	4602      	mov	r2, r0
 80051da:	693b      	ldr	r3, [r7, #16]
 80051dc:	1ad3      	subs	r3, r2, r3
 80051de:	2b02      	cmp	r3, #2
 80051e0:	d901      	bls.n	80051e6 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80051e2:	2303      	movs	r3, #3
 80051e4:	e314      	b.n	8005810 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80051e6:	4b20      	ldr	r3, [pc, #128]	@ (8005268 <HAL_RCC_OscConfig+0x270>)
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f003 0302 	and.w	r3, r3, #2
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d1f0      	bne.n	80051d4 <HAL_RCC_OscConfig+0x1dc>
 80051f2:	e000      	b.n	80051f6 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80051f4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f003 0301 	and.w	r3, r3, #1
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d073      	beq.n	80052ea <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8005202:	69bb      	ldr	r3, [r7, #24]
 8005204:	2b08      	cmp	r3, #8
 8005206:	d005      	beq.n	8005214 <HAL_RCC_OscConfig+0x21c>
 8005208:	69bb      	ldr	r3, [r7, #24]
 800520a:	2b0c      	cmp	r3, #12
 800520c:	d10e      	bne.n	800522c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800520e:	697b      	ldr	r3, [r7, #20]
 8005210:	2b03      	cmp	r3, #3
 8005212:	d10b      	bne.n	800522c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005214:	4b14      	ldr	r3, [pc, #80]	@ (8005268 <HAL_RCC_OscConfig+0x270>)
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800521c:	2b00      	cmp	r3, #0
 800521e:	d063      	beq.n	80052e8 <HAL_RCC_OscConfig+0x2f0>
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	685b      	ldr	r3, [r3, #4]
 8005224:	2b00      	cmp	r3, #0
 8005226:	d15f      	bne.n	80052e8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8005228:	2301      	movs	r3, #1
 800522a:	e2f1      	b.n	8005810 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	685b      	ldr	r3, [r3, #4]
 8005230:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005234:	d106      	bne.n	8005244 <HAL_RCC_OscConfig+0x24c>
 8005236:	4b0c      	ldr	r3, [pc, #48]	@ (8005268 <HAL_RCC_OscConfig+0x270>)
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	4a0b      	ldr	r2, [pc, #44]	@ (8005268 <HAL_RCC_OscConfig+0x270>)
 800523c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005240:	6013      	str	r3, [r2, #0]
 8005242:	e025      	b.n	8005290 <HAL_RCC_OscConfig+0x298>
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	685b      	ldr	r3, [r3, #4]
 8005248:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800524c:	d114      	bne.n	8005278 <HAL_RCC_OscConfig+0x280>
 800524e:	4b06      	ldr	r3, [pc, #24]	@ (8005268 <HAL_RCC_OscConfig+0x270>)
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	4a05      	ldr	r2, [pc, #20]	@ (8005268 <HAL_RCC_OscConfig+0x270>)
 8005254:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005258:	6013      	str	r3, [r2, #0]
 800525a:	4b03      	ldr	r3, [pc, #12]	@ (8005268 <HAL_RCC_OscConfig+0x270>)
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	4a02      	ldr	r2, [pc, #8]	@ (8005268 <HAL_RCC_OscConfig+0x270>)
 8005260:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005264:	6013      	str	r3, [r2, #0]
 8005266:	e013      	b.n	8005290 <HAL_RCC_OscConfig+0x298>
 8005268:	40021000 	.word	0x40021000
 800526c:	080072c4 	.word	0x080072c4
 8005270:	20000000 	.word	0x20000000
 8005274:	20000004 	.word	0x20000004
 8005278:	4ba0      	ldr	r3, [pc, #640]	@ (80054fc <HAL_RCC_OscConfig+0x504>)
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	4a9f      	ldr	r2, [pc, #636]	@ (80054fc <HAL_RCC_OscConfig+0x504>)
 800527e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005282:	6013      	str	r3, [r2, #0]
 8005284:	4b9d      	ldr	r3, [pc, #628]	@ (80054fc <HAL_RCC_OscConfig+0x504>)
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	4a9c      	ldr	r2, [pc, #624]	@ (80054fc <HAL_RCC_OscConfig+0x504>)
 800528a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800528e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	685b      	ldr	r3, [r3, #4]
 8005294:	2b00      	cmp	r3, #0
 8005296:	d013      	beq.n	80052c0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005298:	f7fd f894 	bl	80023c4 <HAL_GetTick>
 800529c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800529e:	e008      	b.n	80052b2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80052a0:	f7fd f890 	bl	80023c4 <HAL_GetTick>
 80052a4:	4602      	mov	r2, r0
 80052a6:	693b      	ldr	r3, [r7, #16]
 80052a8:	1ad3      	subs	r3, r2, r3
 80052aa:	2b64      	cmp	r3, #100	@ 0x64
 80052ac:	d901      	bls.n	80052b2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80052ae:	2303      	movs	r3, #3
 80052b0:	e2ae      	b.n	8005810 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80052b2:	4b92      	ldr	r3, [pc, #584]	@ (80054fc <HAL_RCC_OscConfig+0x504>)
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d0f0      	beq.n	80052a0 <HAL_RCC_OscConfig+0x2a8>
 80052be:	e014      	b.n	80052ea <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052c0:	f7fd f880 	bl	80023c4 <HAL_GetTick>
 80052c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80052c6:	e008      	b.n	80052da <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80052c8:	f7fd f87c 	bl	80023c4 <HAL_GetTick>
 80052cc:	4602      	mov	r2, r0
 80052ce:	693b      	ldr	r3, [r7, #16]
 80052d0:	1ad3      	subs	r3, r2, r3
 80052d2:	2b64      	cmp	r3, #100	@ 0x64
 80052d4:	d901      	bls.n	80052da <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80052d6:	2303      	movs	r3, #3
 80052d8:	e29a      	b.n	8005810 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80052da:	4b88      	ldr	r3, [pc, #544]	@ (80054fc <HAL_RCC_OscConfig+0x504>)
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d1f0      	bne.n	80052c8 <HAL_RCC_OscConfig+0x2d0>
 80052e6:	e000      	b.n	80052ea <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80052e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f003 0302 	and.w	r3, r3, #2
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d060      	beq.n	80053b8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80052f6:	69bb      	ldr	r3, [r7, #24]
 80052f8:	2b04      	cmp	r3, #4
 80052fa:	d005      	beq.n	8005308 <HAL_RCC_OscConfig+0x310>
 80052fc:	69bb      	ldr	r3, [r7, #24]
 80052fe:	2b0c      	cmp	r3, #12
 8005300:	d119      	bne.n	8005336 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005302:	697b      	ldr	r3, [r7, #20]
 8005304:	2b02      	cmp	r3, #2
 8005306:	d116      	bne.n	8005336 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005308:	4b7c      	ldr	r3, [pc, #496]	@ (80054fc <HAL_RCC_OscConfig+0x504>)
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005310:	2b00      	cmp	r3, #0
 8005312:	d005      	beq.n	8005320 <HAL_RCC_OscConfig+0x328>
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	68db      	ldr	r3, [r3, #12]
 8005318:	2b00      	cmp	r3, #0
 800531a:	d101      	bne.n	8005320 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800531c:	2301      	movs	r3, #1
 800531e:	e277      	b.n	8005810 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005320:	4b76      	ldr	r3, [pc, #472]	@ (80054fc <HAL_RCC_OscConfig+0x504>)
 8005322:	685b      	ldr	r3, [r3, #4]
 8005324:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	691b      	ldr	r3, [r3, #16]
 800532c:	061b      	lsls	r3, r3, #24
 800532e:	4973      	ldr	r1, [pc, #460]	@ (80054fc <HAL_RCC_OscConfig+0x504>)
 8005330:	4313      	orrs	r3, r2
 8005332:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005334:	e040      	b.n	80053b8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	68db      	ldr	r3, [r3, #12]
 800533a:	2b00      	cmp	r3, #0
 800533c:	d023      	beq.n	8005386 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800533e:	4b6f      	ldr	r3, [pc, #444]	@ (80054fc <HAL_RCC_OscConfig+0x504>)
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	4a6e      	ldr	r2, [pc, #440]	@ (80054fc <HAL_RCC_OscConfig+0x504>)
 8005344:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005348:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800534a:	f7fd f83b 	bl	80023c4 <HAL_GetTick>
 800534e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005350:	e008      	b.n	8005364 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005352:	f7fd f837 	bl	80023c4 <HAL_GetTick>
 8005356:	4602      	mov	r2, r0
 8005358:	693b      	ldr	r3, [r7, #16]
 800535a:	1ad3      	subs	r3, r2, r3
 800535c:	2b02      	cmp	r3, #2
 800535e:	d901      	bls.n	8005364 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8005360:	2303      	movs	r3, #3
 8005362:	e255      	b.n	8005810 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005364:	4b65      	ldr	r3, [pc, #404]	@ (80054fc <HAL_RCC_OscConfig+0x504>)
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800536c:	2b00      	cmp	r3, #0
 800536e:	d0f0      	beq.n	8005352 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005370:	4b62      	ldr	r3, [pc, #392]	@ (80054fc <HAL_RCC_OscConfig+0x504>)
 8005372:	685b      	ldr	r3, [r3, #4]
 8005374:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	691b      	ldr	r3, [r3, #16]
 800537c:	061b      	lsls	r3, r3, #24
 800537e:	495f      	ldr	r1, [pc, #380]	@ (80054fc <HAL_RCC_OscConfig+0x504>)
 8005380:	4313      	orrs	r3, r2
 8005382:	604b      	str	r3, [r1, #4]
 8005384:	e018      	b.n	80053b8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005386:	4b5d      	ldr	r3, [pc, #372]	@ (80054fc <HAL_RCC_OscConfig+0x504>)
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	4a5c      	ldr	r2, [pc, #368]	@ (80054fc <HAL_RCC_OscConfig+0x504>)
 800538c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005390:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005392:	f7fd f817 	bl	80023c4 <HAL_GetTick>
 8005396:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005398:	e008      	b.n	80053ac <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800539a:	f7fd f813 	bl	80023c4 <HAL_GetTick>
 800539e:	4602      	mov	r2, r0
 80053a0:	693b      	ldr	r3, [r7, #16]
 80053a2:	1ad3      	subs	r3, r2, r3
 80053a4:	2b02      	cmp	r3, #2
 80053a6:	d901      	bls.n	80053ac <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80053a8:	2303      	movs	r3, #3
 80053aa:	e231      	b.n	8005810 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80053ac:	4b53      	ldr	r3, [pc, #332]	@ (80054fc <HAL_RCC_OscConfig+0x504>)
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d1f0      	bne.n	800539a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f003 0308 	and.w	r3, r3, #8
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d03c      	beq.n	800543e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	695b      	ldr	r3, [r3, #20]
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d01c      	beq.n	8005406 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80053cc:	4b4b      	ldr	r3, [pc, #300]	@ (80054fc <HAL_RCC_OscConfig+0x504>)
 80053ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80053d2:	4a4a      	ldr	r2, [pc, #296]	@ (80054fc <HAL_RCC_OscConfig+0x504>)
 80053d4:	f043 0301 	orr.w	r3, r3, #1
 80053d8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053dc:	f7fc fff2 	bl	80023c4 <HAL_GetTick>
 80053e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80053e2:	e008      	b.n	80053f6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80053e4:	f7fc ffee 	bl	80023c4 <HAL_GetTick>
 80053e8:	4602      	mov	r2, r0
 80053ea:	693b      	ldr	r3, [r7, #16]
 80053ec:	1ad3      	subs	r3, r2, r3
 80053ee:	2b02      	cmp	r3, #2
 80053f0:	d901      	bls.n	80053f6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80053f2:	2303      	movs	r3, #3
 80053f4:	e20c      	b.n	8005810 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80053f6:	4b41      	ldr	r3, [pc, #260]	@ (80054fc <HAL_RCC_OscConfig+0x504>)
 80053f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80053fc:	f003 0302 	and.w	r3, r3, #2
 8005400:	2b00      	cmp	r3, #0
 8005402:	d0ef      	beq.n	80053e4 <HAL_RCC_OscConfig+0x3ec>
 8005404:	e01b      	b.n	800543e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005406:	4b3d      	ldr	r3, [pc, #244]	@ (80054fc <HAL_RCC_OscConfig+0x504>)
 8005408:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800540c:	4a3b      	ldr	r2, [pc, #236]	@ (80054fc <HAL_RCC_OscConfig+0x504>)
 800540e:	f023 0301 	bic.w	r3, r3, #1
 8005412:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005416:	f7fc ffd5 	bl	80023c4 <HAL_GetTick>
 800541a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800541c:	e008      	b.n	8005430 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800541e:	f7fc ffd1 	bl	80023c4 <HAL_GetTick>
 8005422:	4602      	mov	r2, r0
 8005424:	693b      	ldr	r3, [r7, #16]
 8005426:	1ad3      	subs	r3, r2, r3
 8005428:	2b02      	cmp	r3, #2
 800542a:	d901      	bls.n	8005430 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800542c:	2303      	movs	r3, #3
 800542e:	e1ef      	b.n	8005810 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005430:	4b32      	ldr	r3, [pc, #200]	@ (80054fc <HAL_RCC_OscConfig+0x504>)
 8005432:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005436:	f003 0302 	and.w	r3, r3, #2
 800543a:	2b00      	cmp	r3, #0
 800543c:	d1ef      	bne.n	800541e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f003 0304 	and.w	r3, r3, #4
 8005446:	2b00      	cmp	r3, #0
 8005448:	f000 80a6 	beq.w	8005598 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800544c:	2300      	movs	r3, #0
 800544e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8005450:	4b2a      	ldr	r3, [pc, #168]	@ (80054fc <HAL_RCC_OscConfig+0x504>)
 8005452:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005454:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005458:	2b00      	cmp	r3, #0
 800545a:	d10d      	bne.n	8005478 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800545c:	4b27      	ldr	r3, [pc, #156]	@ (80054fc <HAL_RCC_OscConfig+0x504>)
 800545e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005460:	4a26      	ldr	r2, [pc, #152]	@ (80054fc <HAL_RCC_OscConfig+0x504>)
 8005462:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005466:	6593      	str	r3, [r2, #88]	@ 0x58
 8005468:	4b24      	ldr	r3, [pc, #144]	@ (80054fc <HAL_RCC_OscConfig+0x504>)
 800546a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800546c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005470:	60bb      	str	r3, [r7, #8]
 8005472:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005474:	2301      	movs	r3, #1
 8005476:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005478:	4b21      	ldr	r3, [pc, #132]	@ (8005500 <HAL_RCC_OscConfig+0x508>)
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005480:	2b00      	cmp	r3, #0
 8005482:	d118      	bne.n	80054b6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005484:	4b1e      	ldr	r3, [pc, #120]	@ (8005500 <HAL_RCC_OscConfig+0x508>)
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	4a1d      	ldr	r2, [pc, #116]	@ (8005500 <HAL_RCC_OscConfig+0x508>)
 800548a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800548e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005490:	f7fc ff98 	bl	80023c4 <HAL_GetTick>
 8005494:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005496:	e008      	b.n	80054aa <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005498:	f7fc ff94 	bl	80023c4 <HAL_GetTick>
 800549c:	4602      	mov	r2, r0
 800549e:	693b      	ldr	r3, [r7, #16]
 80054a0:	1ad3      	subs	r3, r2, r3
 80054a2:	2b02      	cmp	r3, #2
 80054a4:	d901      	bls.n	80054aa <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80054a6:	2303      	movs	r3, #3
 80054a8:	e1b2      	b.n	8005810 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80054aa:	4b15      	ldr	r3, [pc, #84]	@ (8005500 <HAL_RCC_OscConfig+0x508>)
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d0f0      	beq.n	8005498 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	689b      	ldr	r3, [r3, #8]
 80054ba:	2b01      	cmp	r3, #1
 80054bc:	d108      	bne.n	80054d0 <HAL_RCC_OscConfig+0x4d8>
 80054be:	4b0f      	ldr	r3, [pc, #60]	@ (80054fc <HAL_RCC_OscConfig+0x504>)
 80054c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80054c4:	4a0d      	ldr	r2, [pc, #52]	@ (80054fc <HAL_RCC_OscConfig+0x504>)
 80054c6:	f043 0301 	orr.w	r3, r3, #1
 80054ca:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80054ce:	e029      	b.n	8005524 <HAL_RCC_OscConfig+0x52c>
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	689b      	ldr	r3, [r3, #8]
 80054d4:	2b05      	cmp	r3, #5
 80054d6:	d115      	bne.n	8005504 <HAL_RCC_OscConfig+0x50c>
 80054d8:	4b08      	ldr	r3, [pc, #32]	@ (80054fc <HAL_RCC_OscConfig+0x504>)
 80054da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80054de:	4a07      	ldr	r2, [pc, #28]	@ (80054fc <HAL_RCC_OscConfig+0x504>)
 80054e0:	f043 0304 	orr.w	r3, r3, #4
 80054e4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80054e8:	4b04      	ldr	r3, [pc, #16]	@ (80054fc <HAL_RCC_OscConfig+0x504>)
 80054ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80054ee:	4a03      	ldr	r2, [pc, #12]	@ (80054fc <HAL_RCC_OscConfig+0x504>)
 80054f0:	f043 0301 	orr.w	r3, r3, #1
 80054f4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80054f8:	e014      	b.n	8005524 <HAL_RCC_OscConfig+0x52c>
 80054fa:	bf00      	nop
 80054fc:	40021000 	.word	0x40021000
 8005500:	40007000 	.word	0x40007000
 8005504:	4b9a      	ldr	r3, [pc, #616]	@ (8005770 <HAL_RCC_OscConfig+0x778>)
 8005506:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800550a:	4a99      	ldr	r2, [pc, #612]	@ (8005770 <HAL_RCC_OscConfig+0x778>)
 800550c:	f023 0301 	bic.w	r3, r3, #1
 8005510:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005514:	4b96      	ldr	r3, [pc, #600]	@ (8005770 <HAL_RCC_OscConfig+0x778>)
 8005516:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800551a:	4a95      	ldr	r2, [pc, #596]	@ (8005770 <HAL_RCC_OscConfig+0x778>)
 800551c:	f023 0304 	bic.w	r3, r3, #4
 8005520:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	689b      	ldr	r3, [r3, #8]
 8005528:	2b00      	cmp	r3, #0
 800552a:	d016      	beq.n	800555a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800552c:	f7fc ff4a 	bl	80023c4 <HAL_GetTick>
 8005530:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005532:	e00a      	b.n	800554a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005534:	f7fc ff46 	bl	80023c4 <HAL_GetTick>
 8005538:	4602      	mov	r2, r0
 800553a:	693b      	ldr	r3, [r7, #16]
 800553c:	1ad3      	subs	r3, r2, r3
 800553e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005542:	4293      	cmp	r3, r2
 8005544:	d901      	bls.n	800554a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8005546:	2303      	movs	r3, #3
 8005548:	e162      	b.n	8005810 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800554a:	4b89      	ldr	r3, [pc, #548]	@ (8005770 <HAL_RCC_OscConfig+0x778>)
 800554c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005550:	f003 0302 	and.w	r3, r3, #2
 8005554:	2b00      	cmp	r3, #0
 8005556:	d0ed      	beq.n	8005534 <HAL_RCC_OscConfig+0x53c>
 8005558:	e015      	b.n	8005586 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800555a:	f7fc ff33 	bl	80023c4 <HAL_GetTick>
 800555e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005560:	e00a      	b.n	8005578 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005562:	f7fc ff2f 	bl	80023c4 <HAL_GetTick>
 8005566:	4602      	mov	r2, r0
 8005568:	693b      	ldr	r3, [r7, #16]
 800556a:	1ad3      	subs	r3, r2, r3
 800556c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005570:	4293      	cmp	r3, r2
 8005572:	d901      	bls.n	8005578 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8005574:	2303      	movs	r3, #3
 8005576:	e14b      	b.n	8005810 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005578:	4b7d      	ldr	r3, [pc, #500]	@ (8005770 <HAL_RCC_OscConfig+0x778>)
 800557a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800557e:	f003 0302 	and.w	r3, r3, #2
 8005582:	2b00      	cmp	r3, #0
 8005584:	d1ed      	bne.n	8005562 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005586:	7ffb      	ldrb	r3, [r7, #31]
 8005588:	2b01      	cmp	r3, #1
 800558a:	d105      	bne.n	8005598 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800558c:	4b78      	ldr	r3, [pc, #480]	@ (8005770 <HAL_RCC_OscConfig+0x778>)
 800558e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005590:	4a77      	ldr	r2, [pc, #476]	@ (8005770 <HAL_RCC_OscConfig+0x778>)
 8005592:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005596:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f003 0320 	and.w	r3, r3, #32
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d03c      	beq.n	800561e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d01c      	beq.n	80055e6 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80055ac:	4b70      	ldr	r3, [pc, #448]	@ (8005770 <HAL_RCC_OscConfig+0x778>)
 80055ae:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80055b2:	4a6f      	ldr	r2, [pc, #444]	@ (8005770 <HAL_RCC_OscConfig+0x778>)
 80055b4:	f043 0301 	orr.w	r3, r3, #1
 80055b8:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055bc:	f7fc ff02 	bl	80023c4 <HAL_GetTick>
 80055c0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80055c2:	e008      	b.n	80055d6 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80055c4:	f7fc fefe 	bl	80023c4 <HAL_GetTick>
 80055c8:	4602      	mov	r2, r0
 80055ca:	693b      	ldr	r3, [r7, #16]
 80055cc:	1ad3      	subs	r3, r2, r3
 80055ce:	2b02      	cmp	r3, #2
 80055d0:	d901      	bls.n	80055d6 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80055d2:	2303      	movs	r3, #3
 80055d4:	e11c      	b.n	8005810 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80055d6:	4b66      	ldr	r3, [pc, #408]	@ (8005770 <HAL_RCC_OscConfig+0x778>)
 80055d8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80055dc:	f003 0302 	and.w	r3, r3, #2
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d0ef      	beq.n	80055c4 <HAL_RCC_OscConfig+0x5cc>
 80055e4:	e01b      	b.n	800561e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80055e6:	4b62      	ldr	r3, [pc, #392]	@ (8005770 <HAL_RCC_OscConfig+0x778>)
 80055e8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80055ec:	4a60      	ldr	r2, [pc, #384]	@ (8005770 <HAL_RCC_OscConfig+0x778>)
 80055ee:	f023 0301 	bic.w	r3, r3, #1
 80055f2:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055f6:	f7fc fee5 	bl	80023c4 <HAL_GetTick>
 80055fa:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80055fc:	e008      	b.n	8005610 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80055fe:	f7fc fee1 	bl	80023c4 <HAL_GetTick>
 8005602:	4602      	mov	r2, r0
 8005604:	693b      	ldr	r3, [r7, #16]
 8005606:	1ad3      	subs	r3, r2, r3
 8005608:	2b02      	cmp	r3, #2
 800560a:	d901      	bls.n	8005610 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800560c:	2303      	movs	r3, #3
 800560e:	e0ff      	b.n	8005810 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005610:	4b57      	ldr	r3, [pc, #348]	@ (8005770 <HAL_RCC_OscConfig+0x778>)
 8005612:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005616:	f003 0302 	and.w	r3, r3, #2
 800561a:	2b00      	cmp	r3, #0
 800561c:	d1ef      	bne.n	80055fe <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005622:	2b00      	cmp	r3, #0
 8005624:	f000 80f3 	beq.w	800580e <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800562c:	2b02      	cmp	r3, #2
 800562e:	f040 80c9 	bne.w	80057c4 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8005632:	4b4f      	ldr	r3, [pc, #316]	@ (8005770 <HAL_RCC_OscConfig+0x778>)
 8005634:	68db      	ldr	r3, [r3, #12]
 8005636:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005638:	697b      	ldr	r3, [r7, #20]
 800563a:	f003 0203 	and.w	r2, r3, #3
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005642:	429a      	cmp	r2, r3
 8005644:	d12c      	bne.n	80056a0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005646:	697b      	ldr	r3, [r7, #20]
 8005648:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005650:	3b01      	subs	r3, #1
 8005652:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005654:	429a      	cmp	r2, r3
 8005656:	d123      	bne.n	80056a0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005658:	697b      	ldr	r3, [r7, #20]
 800565a:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005662:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005664:	429a      	cmp	r2, r3
 8005666:	d11b      	bne.n	80056a0 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005668:	697b      	ldr	r3, [r7, #20]
 800566a:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005672:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005674:	429a      	cmp	r2, r3
 8005676:	d113      	bne.n	80056a0 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005678:	697b      	ldr	r3, [r7, #20]
 800567a:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005682:	085b      	lsrs	r3, r3, #1
 8005684:	3b01      	subs	r3, #1
 8005686:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005688:	429a      	cmp	r2, r3
 800568a:	d109      	bne.n	80056a0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800568c:	697b      	ldr	r3, [r7, #20]
 800568e:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005696:	085b      	lsrs	r3, r3, #1
 8005698:	3b01      	subs	r3, #1
 800569a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800569c:	429a      	cmp	r2, r3
 800569e:	d06b      	beq.n	8005778 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80056a0:	69bb      	ldr	r3, [r7, #24]
 80056a2:	2b0c      	cmp	r3, #12
 80056a4:	d062      	beq.n	800576c <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80056a6:	4b32      	ldr	r3, [pc, #200]	@ (8005770 <HAL_RCC_OscConfig+0x778>)
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d001      	beq.n	80056b6 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80056b2:	2301      	movs	r3, #1
 80056b4:	e0ac      	b.n	8005810 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80056b6:	4b2e      	ldr	r3, [pc, #184]	@ (8005770 <HAL_RCC_OscConfig+0x778>)
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	4a2d      	ldr	r2, [pc, #180]	@ (8005770 <HAL_RCC_OscConfig+0x778>)
 80056bc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80056c0:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80056c2:	f7fc fe7f 	bl	80023c4 <HAL_GetTick>
 80056c6:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80056c8:	e008      	b.n	80056dc <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80056ca:	f7fc fe7b 	bl	80023c4 <HAL_GetTick>
 80056ce:	4602      	mov	r2, r0
 80056d0:	693b      	ldr	r3, [r7, #16]
 80056d2:	1ad3      	subs	r3, r2, r3
 80056d4:	2b02      	cmp	r3, #2
 80056d6:	d901      	bls.n	80056dc <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80056d8:	2303      	movs	r3, #3
 80056da:	e099      	b.n	8005810 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80056dc:	4b24      	ldr	r3, [pc, #144]	@ (8005770 <HAL_RCC_OscConfig+0x778>)
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d1f0      	bne.n	80056ca <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80056e8:	4b21      	ldr	r3, [pc, #132]	@ (8005770 <HAL_RCC_OscConfig+0x778>)
 80056ea:	68da      	ldr	r2, [r3, #12]
 80056ec:	4b21      	ldr	r3, [pc, #132]	@ (8005774 <HAL_RCC_OscConfig+0x77c>)
 80056ee:	4013      	ands	r3, r2
 80056f0:	687a      	ldr	r2, [r7, #4]
 80056f2:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80056f4:	687a      	ldr	r2, [r7, #4]
 80056f6:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80056f8:	3a01      	subs	r2, #1
 80056fa:	0112      	lsls	r2, r2, #4
 80056fc:	4311      	orrs	r1, r2
 80056fe:	687a      	ldr	r2, [r7, #4]
 8005700:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8005702:	0212      	lsls	r2, r2, #8
 8005704:	4311      	orrs	r1, r2
 8005706:	687a      	ldr	r2, [r7, #4]
 8005708:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800570a:	0852      	lsrs	r2, r2, #1
 800570c:	3a01      	subs	r2, #1
 800570e:	0552      	lsls	r2, r2, #21
 8005710:	4311      	orrs	r1, r2
 8005712:	687a      	ldr	r2, [r7, #4]
 8005714:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8005716:	0852      	lsrs	r2, r2, #1
 8005718:	3a01      	subs	r2, #1
 800571a:	0652      	lsls	r2, r2, #25
 800571c:	4311      	orrs	r1, r2
 800571e:	687a      	ldr	r2, [r7, #4]
 8005720:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8005722:	06d2      	lsls	r2, r2, #27
 8005724:	430a      	orrs	r2, r1
 8005726:	4912      	ldr	r1, [pc, #72]	@ (8005770 <HAL_RCC_OscConfig+0x778>)
 8005728:	4313      	orrs	r3, r2
 800572a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800572c:	4b10      	ldr	r3, [pc, #64]	@ (8005770 <HAL_RCC_OscConfig+0x778>)
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	4a0f      	ldr	r2, [pc, #60]	@ (8005770 <HAL_RCC_OscConfig+0x778>)
 8005732:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005736:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005738:	4b0d      	ldr	r3, [pc, #52]	@ (8005770 <HAL_RCC_OscConfig+0x778>)
 800573a:	68db      	ldr	r3, [r3, #12]
 800573c:	4a0c      	ldr	r2, [pc, #48]	@ (8005770 <HAL_RCC_OscConfig+0x778>)
 800573e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005742:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005744:	f7fc fe3e 	bl	80023c4 <HAL_GetTick>
 8005748:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800574a:	e008      	b.n	800575e <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800574c:	f7fc fe3a 	bl	80023c4 <HAL_GetTick>
 8005750:	4602      	mov	r2, r0
 8005752:	693b      	ldr	r3, [r7, #16]
 8005754:	1ad3      	subs	r3, r2, r3
 8005756:	2b02      	cmp	r3, #2
 8005758:	d901      	bls.n	800575e <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800575a:	2303      	movs	r3, #3
 800575c:	e058      	b.n	8005810 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800575e:	4b04      	ldr	r3, [pc, #16]	@ (8005770 <HAL_RCC_OscConfig+0x778>)
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005766:	2b00      	cmp	r3, #0
 8005768:	d0f0      	beq.n	800574c <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800576a:	e050      	b.n	800580e <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800576c:	2301      	movs	r3, #1
 800576e:	e04f      	b.n	8005810 <HAL_RCC_OscConfig+0x818>
 8005770:	40021000 	.word	0x40021000
 8005774:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005778:	4b27      	ldr	r3, [pc, #156]	@ (8005818 <HAL_RCC_OscConfig+0x820>)
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005780:	2b00      	cmp	r3, #0
 8005782:	d144      	bne.n	800580e <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005784:	4b24      	ldr	r3, [pc, #144]	@ (8005818 <HAL_RCC_OscConfig+0x820>)
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	4a23      	ldr	r2, [pc, #140]	@ (8005818 <HAL_RCC_OscConfig+0x820>)
 800578a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800578e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005790:	4b21      	ldr	r3, [pc, #132]	@ (8005818 <HAL_RCC_OscConfig+0x820>)
 8005792:	68db      	ldr	r3, [r3, #12]
 8005794:	4a20      	ldr	r2, [pc, #128]	@ (8005818 <HAL_RCC_OscConfig+0x820>)
 8005796:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800579a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800579c:	f7fc fe12 	bl	80023c4 <HAL_GetTick>
 80057a0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80057a2:	e008      	b.n	80057b6 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80057a4:	f7fc fe0e 	bl	80023c4 <HAL_GetTick>
 80057a8:	4602      	mov	r2, r0
 80057aa:	693b      	ldr	r3, [r7, #16]
 80057ac:	1ad3      	subs	r3, r2, r3
 80057ae:	2b02      	cmp	r3, #2
 80057b0:	d901      	bls.n	80057b6 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 80057b2:	2303      	movs	r3, #3
 80057b4:	e02c      	b.n	8005810 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80057b6:	4b18      	ldr	r3, [pc, #96]	@ (8005818 <HAL_RCC_OscConfig+0x820>)
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d0f0      	beq.n	80057a4 <HAL_RCC_OscConfig+0x7ac>
 80057c2:	e024      	b.n	800580e <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80057c4:	69bb      	ldr	r3, [r7, #24]
 80057c6:	2b0c      	cmp	r3, #12
 80057c8:	d01f      	beq.n	800580a <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80057ca:	4b13      	ldr	r3, [pc, #76]	@ (8005818 <HAL_RCC_OscConfig+0x820>)
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	4a12      	ldr	r2, [pc, #72]	@ (8005818 <HAL_RCC_OscConfig+0x820>)
 80057d0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80057d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057d6:	f7fc fdf5 	bl	80023c4 <HAL_GetTick>
 80057da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80057dc:	e008      	b.n	80057f0 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80057de:	f7fc fdf1 	bl	80023c4 <HAL_GetTick>
 80057e2:	4602      	mov	r2, r0
 80057e4:	693b      	ldr	r3, [r7, #16]
 80057e6:	1ad3      	subs	r3, r2, r3
 80057e8:	2b02      	cmp	r3, #2
 80057ea:	d901      	bls.n	80057f0 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 80057ec:	2303      	movs	r3, #3
 80057ee:	e00f      	b.n	8005810 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80057f0:	4b09      	ldr	r3, [pc, #36]	@ (8005818 <HAL_RCC_OscConfig+0x820>)
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d1f0      	bne.n	80057de <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80057fc:	4b06      	ldr	r3, [pc, #24]	@ (8005818 <HAL_RCC_OscConfig+0x820>)
 80057fe:	68da      	ldr	r2, [r3, #12]
 8005800:	4905      	ldr	r1, [pc, #20]	@ (8005818 <HAL_RCC_OscConfig+0x820>)
 8005802:	4b06      	ldr	r3, [pc, #24]	@ (800581c <HAL_RCC_OscConfig+0x824>)
 8005804:	4013      	ands	r3, r2
 8005806:	60cb      	str	r3, [r1, #12]
 8005808:	e001      	b.n	800580e <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800580a:	2301      	movs	r3, #1
 800580c:	e000      	b.n	8005810 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 800580e:	2300      	movs	r3, #0
}
 8005810:	4618      	mov	r0, r3
 8005812:	3720      	adds	r7, #32
 8005814:	46bd      	mov	sp, r7
 8005816:	bd80      	pop	{r7, pc}
 8005818:	40021000 	.word	0x40021000
 800581c:	feeefffc 	.word	0xfeeefffc

08005820 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005820:	b580      	push	{r7, lr}
 8005822:	b084      	sub	sp, #16
 8005824:	af00      	add	r7, sp, #0
 8005826:	6078      	str	r0, [r7, #4]
 8005828:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	2b00      	cmp	r3, #0
 800582e:	d101      	bne.n	8005834 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005830:	2301      	movs	r3, #1
 8005832:	e0e7      	b.n	8005a04 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005834:	4b75      	ldr	r3, [pc, #468]	@ (8005a0c <HAL_RCC_ClockConfig+0x1ec>)
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	f003 0307 	and.w	r3, r3, #7
 800583c:	683a      	ldr	r2, [r7, #0]
 800583e:	429a      	cmp	r2, r3
 8005840:	d910      	bls.n	8005864 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005842:	4b72      	ldr	r3, [pc, #456]	@ (8005a0c <HAL_RCC_ClockConfig+0x1ec>)
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	f023 0207 	bic.w	r2, r3, #7
 800584a:	4970      	ldr	r1, [pc, #448]	@ (8005a0c <HAL_RCC_ClockConfig+0x1ec>)
 800584c:	683b      	ldr	r3, [r7, #0]
 800584e:	4313      	orrs	r3, r2
 8005850:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005852:	4b6e      	ldr	r3, [pc, #440]	@ (8005a0c <HAL_RCC_ClockConfig+0x1ec>)
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f003 0307 	and.w	r3, r3, #7
 800585a:	683a      	ldr	r2, [r7, #0]
 800585c:	429a      	cmp	r2, r3
 800585e:	d001      	beq.n	8005864 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005860:	2301      	movs	r3, #1
 8005862:	e0cf      	b.n	8005a04 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	f003 0302 	and.w	r3, r3, #2
 800586c:	2b00      	cmp	r3, #0
 800586e:	d010      	beq.n	8005892 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	689a      	ldr	r2, [r3, #8]
 8005874:	4b66      	ldr	r3, [pc, #408]	@ (8005a10 <HAL_RCC_ClockConfig+0x1f0>)
 8005876:	689b      	ldr	r3, [r3, #8]
 8005878:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800587c:	429a      	cmp	r2, r3
 800587e:	d908      	bls.n	8005892 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005880:	4b63      	ldr	r3, [pc, #396]	@ (8005a10 <HAL_RCC_ClockConfig+0x1f0>)
 8005882:	689b      	ldr	r3, [r3, #8]
 8005884:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	689b      	ldr	r3, [r3, #8]
 800588c:	4960      	ldr	r1, [pc, #384]	@ (8005a10 <HAL_RCC_ClockConfig+0x1f0>)
 800588e:	4313      	orrs	r3, r2
 8005890:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	f003 0301 	and.w	r3, r3, #1
 800589a:	2b00      	cmp	r3, #0
 800589c:	d04c      	beq.n	8005938 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	685b      	ldr	r3, [r3, #4]
 80058a2:	2b03      	cmp	r3, #3
 80058a4:	d107      	bne.n	80058b6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80058a6:	4b5a      	ldr	r3, [pc, #360]	@ (8005a10 <HAL_RCC_ClockConfig+0x1f0>)
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d121      	bne.n	80058f6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80058b2:	2301      	movs	r3, #1
 80058b4:	e0a6      	b.n	8005a04 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	685b      	ldr	r3, [r3, #4]
 80058ba:	2b02      	cmp	r3, #2
 80058bc:	d107      	bne.n	80058ce <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80058be:	4b54      	ldr	r3, [pc, #336]	@ (8005a10 <HAL_RCC_ClockConfig+0x1f0>)
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d115      	bne.n	80058f6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80058ca:	2301      	movs	r3, #1
 80058cc:	e09a      	b.n	8005a04 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	685b      	ldr	r3, [r3, #4]
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d107      	bne.n	80058e6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80058d6:	4b4e      	ldr	r3, [pc, #312]	@ (8005a10 <HAL_RCC_ClockConfig+0x1f0>)
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	f003 0302 	and.w	r3, r3, #2
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d109      	bne.n	80058f6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80058e2:	2301      	movs	r3, #1
 80058e4:	e08e      	b.n	8005a04 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80058e6:	4b4a      	ldr	r3, [pc, #296]	@ (8005a10 <HAL_RCC_ClockConfig+0x1f0>)
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d101      	bne.n	80058f6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80058f2:	2301      	movs	r3, #1
 80058f4:	e086      	b.n	8005a04 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80058f6:	4b46      	ldr	r3, [pc, #280]	@ (8005a10 <HAL_RCC_ClockConfig+0x1f0>)
 80058f8:	689b      	ldr	r3, [r3, #8]
 80058fa:	f023 0203 	bic.w	r2, r3, #3
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	685b      	ldr	r3, [r3, #4]
 8005902:	4943      	ldr	r1, [pc, #268]	@ (8005a10 <HAL_RCC_ClockConfig+0x1f0>)
 8005904:	4313      	orrs	r3, r2
 8005906:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005908:	f7fc fd5c 	bl	80023c4 <HAL_GetTick>
 800590c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800590e:	e00a      	b.n	8005926 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005910:	f7fc fd58 	bl	80023c4 <HAL_GetTick>
 8005914:	4602      	mov	r2, r0
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	1ad3      	subs	r3, r2, r3
 800591a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800591e:	4293      	cmp	r3, r2
 8005920:	d901      	bls.n	8005926 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8005922:	2303      	movs	r3, #3
 8005924:	e06e      	b.n	8005a04 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005926:	4b3a      	ldr	r3, [pc, #232]	@ (8005a10 <HAL_RCC_ClockConfig+0x1f0>)
 8005928:	689b      	ldr	r3, [r3, #8]
 800592a:	f003 020c 	and.w	r2, r3, #12
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	685b      	ldr	r3, [r3, #4]
 8005932:	009b      	lsls	r3, r3, #2
 8005934:	429a      	cmp	r2, r3
 8005936:	d1eb      	bne.n	8005910 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	f003 0302 	and.w	r3, r3, #2
 8005940:	2b00      	cmp	r3, #0
 8005942:	d010      	beq.n	8005966 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	689a      	ldr	r2, [r3, #8]
 8005948:	4b31      	ldr	r3, [pc, #196]	@ (8005a10 <HAL_RCC_ClockConfig+0x1f0>)
 800594a:	689b      	ldr	r3, [r3, #8]
 800594c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005950:	429a      	cmp	r2, r3
 8005952:	d208      	bcs.n	8005966 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005954:	4b2e      	ldr	r3, [pc, #184]	@ (8005a10 <HAL_RCC_ClockConfig+0x1f0>)
 8005956:	689b      	ldr	r3, [r3, #8]
 8005958:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	689b      	ldr	r3, [r3, #8]
 8005960:	492b      	ldr	r1, [pc, #172]	@ (8005a10 <HAL_RCC_ClockConfig+0x1f0>)
 8005962:	4313      	orrs	r3, r2
 8005964:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005966:	4b29      	ldr	r3, [pc, #164]	@ (8005a0c <HAL_RCC_ClockConfig+0x1ec>)
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	f003 0307 	and.w	r3, r3, #7
 800596e:	683a      	ldr	r2, [r7, #0]
 8005970:	429a      	cmp	r2, r3
 8005972:	d210      	bcs.n	8005996 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005974:	4b25      	ldr	r3, [pc, #148]	@ (8005a0c <HAL_RCC_ClockConfig+0x1ec>)
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	f023 0207 	bic.w	r2, r3, #7
 800597c:	4923      	ldr	r1, [pc, #140]	@ (8005a0c <HAL_RCC_ClockConfig+0x1ec>)
 800597e:	683b      	ldr	r3, [r7, #0]
 8005980:	4313      	orrs	r3, r2
 8005982:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005984:	4b21      	ldr	r3, [pc, #132]	@ (8005a0c <HAL_RCC_ClockConfig+0x1ec>)
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	f003 0307 	and.w	r3, r3, #7
 800598c:	683a      	ldr	r2, [r7, #0]
 800598e:	429a      	cmp	r2, r3
 8005990:	d001      	beq.n	8005996 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8005992:	2301      	movs	r3, #1
 8005994:	e036      	b.n	8005a04 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	f003 0304 	and.w	r3, r3, #4
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d008      	beq.n	80059b4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80059a2:	4b1b      	ldr	r3, [pc, #108]	@ (8005a10 <HAL_RCC_ClockConfig+0x1f0>)
 80059a4:	689b      	ldr	r3, [r3, #8]
 80059a6:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	68db      	ldr	r3, [r3, #12]
 80059ae:	4918      	ldr	r1, [pc, #96]	@ (8005a10 <HAL_RCC_ClockConfig+0x1f0>)
 80059b0:	4313      	orrs	r3, r2
 80059b2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	f003 0308 	and.w	r3, r3, #8
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d009      	beq.n	80059d4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80059c0:	4b13      	ldr	r3, [pc, #76]	@ (8005a10 <HAL_RCC_ClockConfig+0x1f0>)
 80059c2:	689b      	ldr	r3, [r3, #8]
 80059c4:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	691b      	ldr	r3, [r3, #16]
 80059cc:	00db      	lsls	r3, r3, #3
 80059ce:	4910      	ldr	r1, [pc, #64]	@ (8005a10 <HAL_RCC_ClockConfig+0x1f0>)
 80059d0:	4313      	orrs	r3, r2
 80059d2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80059d4:	f000 f824 	bl	8005a20 <HAL_RCC_GetSysClockFreq>
 80059d8:	4602      	mov	r2, r0
 80059da:	4b0d      	ldr	r3, [pc, #52]	@ (8005a10 <HAL_RCC_ClockConfig+0x1f0>)
 80059dc:	689b      	ldr	r3, [r3, #8]
 80059de:	091b      	lsrs	r3, r3, #4
 80059e0:	f003 030f 	and.w	r3, r3, #15
 80059e4:	490b      	ldr	r1, [pc, #44]	@ (8005a14 <HAL_RCC_ClockConfig+0x1f4>)
 80059e6:	5ccb      	ldrb	r3, [r1, r3]
 80059e8:	f003 031f 	and.w	r3, r3, #31
 80059ec:	fa22 f303 	lsr.w	r3, r2, r3
 80059f0:	4a09      	ldr	r2, [pc, #36]	@ (8005a18 <HAL_RCC_ClockConfig+0x1f8>)
 80059f2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80059f4:	4b09      	ldr	r3, [pc, #36]	@ (8005a1c <HAL_RCC_ClockConfig+0x1fc>)
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	4618      	mov	r0, r3
 80059fa:	f7fc fc93 	bl	8002324 <HAL_InitTick>
 80059fe:	4603      	mov	r3, r0
 8005a00:	72fb      	strb	r3, [r7, #11]

  return status;
 8005a02:	7afb      	ldrb	r3, [r7, #11]
}
 8005a04:	4618      	mov	r0, r3
 8005a06:	3710      	adds	r7, #16
 8005a08:	46bd      	mov	sp, r7
 8005a0a:	bd80      	pop	{r7, pc}
 8005a0c:	40022000 	.word	0x40022000
 8005a10:	40021000 	.word	0x40021000
 8005a14:	080072c4 	.word	0x080072c4
 8005a18:	20000000 	.word	0x20000000
 8005a1c:	20000004 	.word	0x20000004

08005a20 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005a20:	b480      	push	{r7}
 8005a22:	b089      	sub	sp, #36	@ 0x24
 8005a24:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005a26:	2300      	movs	r3, #0
 8005a28:	61fb      	str	r3, [r7, #28]
 8005a2a:	2300      	movs	r3, #0
 8005a2c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005a2e:	4b3e      	ldr	r3, [pc, #248]	@ (8005b28 <HAL_RCC_GetSysClockFreq+0x108>)
 8005a30:	689b      	ldr	r3, [r3, #8]
 8005a32:	f003 030c 	and.w	r3, r3, #12
 8005a36:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005a38:	4b3b      	ldr	r3, [pc, #236]	@ (8005b28 <HAL_RCC_GetSysClockFreq+0x108>)
 8005a3a:	68db      	ldr	r3, [r3, #12]
 8005a3c:	f003 0303 	and.w	r3, r3, #3
 8005a40:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005a42:	693b      	ldr	r3, [r7, #16]
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d005      	beq.n	8005a54 <HAL_RCC_GetSysClockFreq+0x34>
 8005a48:	693b      	ldr	r3, [r7, #16]
 8005a4a:	2b0c      	cmp	r3, #12
 8005a4c:	d121      	bne.n	8005a92 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	2b01      	cmp	r3, #1
 8005a52:	d11e      	bne.n	8005a92 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005a54:	4b34      	ldr	r3, [pc, #208]	@ (8005b28 <HAL_RCC_GetSysClockFreq+0x108>)
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	f003 0308 	and.w	r3, r3, #8
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d107      	bne.n	8005a70 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005a60:	4b31      	ldr	r3, [pc, #196]	@ (8005b28 <HAL_RCC_GetSysClockFreq+0x108>)
 8005a62:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005a66:	0a1b      	lsrs	r3, r3, #8
 8005a68:	f003 030f 	and.w	r3, r3, #15
 8005a6c:	61fb      	str	r3, [r7, #28]
 8005a6e:	e005      	b.n	8005a7c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005a70:	4b2d      	ldr	r3, [pc, #180]	@ (8005b28 <HAL_RCC_GetSysClockFreq+0x108>)
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	091b      	lsrs	r3, r3, #4
 8005a76:	f003 030f 	and.w	r3, r3, #15
 8005a7a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005a7c:	4a2b      	ldr	r2, [pc, #172]	@ (8005b2c <HAL_RCC_GetSysClockFreq+0x10c>)
 8005a7e:	69fb      	ldr	r3, [r7, #28]
 8005a80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005a84:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005a86:	693b      	ldr	r3, [r7, #16]
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d10d      	bne.n	8005aa8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005a8c:	69fb      	ldr	r3, [r7, #28]
 8005a8e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005a90:	e00a      	b.n	8005aa8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8005a92:	693b      	ldr	r3, [r7, #16]
 8005a94:	2b04      	cmp	r3, #4
 8005a96:	d102      	bne.n	8005a9e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005a98:	4b25      	ldr	r3, [pc, #148]	@ (8005b30 <HAL_RCC_GetSysClockFreq+0x110>)
 8005a9a:	61bb      	str	r3, [r7, #24]
 8005a9c:	e004      	b.n	8005aa8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8005a9e:	693b      	ldr	r3, [r7, #16]
 8005aa0:	2b08      	cmp	r3, #8
 8005aa2:	d101      	bne.n	8005aa8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005aa4:	4b23      	ldr	r3, [pc, #140]	@ (8005b34 <HAL_RCC_GetSysClockFreq+0x114>)
 8005aa6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005aa8:	693b      	ldr	r3, [r7, #16]
 8005aaa:	2b0c      	cmp	r3, #12
 8005aac:	d134      	bne.n	8005b18 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005aae:	4b1e      	ldr	r3, [pc, #120]	@ (8005b28 <HAL_RCC_GetSysClockFreq+0x108>)
 8005ab0:	68db      	ldr	r3, [r3, #12]
 8005ab2:	f003 0303 	and.w	r3, r3, #3
 8005ab6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005ab8:	68bb      	ldr	r3, [r7, #8]
 8005aba:	2b02      	cmp	r3, #2
 8005abc:	d003      	beq.n	8005ac6 <HAL_RCC_GetSysClockFreq+0xa6>
 8005abe:	68bb      	ldr	r3, [r7, #8]
 8005ac0:	2b03      	cmp	r3, #3
 8005ac2:	d003      	beq.n	8005acc <HAL_RCC_GetSysClockFreq+0xac>
 8005ac4:	e005      	b.n	8005ad2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8005ac6:	4b1a      	ldr	r3, [pc, #104]	@ (8005b30 <HAL_RCC_GetSysClockFreq+0x110>)
 8005ac8:	617b      	str	r3, [r7, #20]
      break;
 8005aca:	e005      	b.n	8005ad8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005acc:	4b19      	ldr	r3, [pc, #100]	@ (8005b34 <HAL_RCC_GetSysClockFreq+0x114>)
 8005ace:	617b      	str	r3, [r7, #20]
      break;
 8005ad0:	e002      	b.n	8005ad8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8005ad2:	69fb      	ldr	r3, [r7, #28]
 8005ad4:	617b      	str	r3, [r7, #20]
      break;
 8005ad6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005ad8:	4b13      	ldr	r3, [pc, #76]	@ (8005b28 <HAL_RCC_GetSysClockFreq+0x108>)
 8005ada:	68db      	ldr	r3, [r3, #12]
 8005adc:	091b      	lsrs	r3, r3, #4
 8005ade:	f003 0307 	and.w	r3, r3, #7
 8005ae2:	3301      	adds	r3, #1
 8005ae4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005ae6:	4b10      	ldr	r3, [pc, #64]	@ (8005b28 <HAL_RCC_GetSysClockFreq+0x108>)
 8005ae8:	68db      	ldr	r3, [r3, #12]
 8005aea:	0a1b      	lsrs	r3, r3, #8
 8005aec:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005af0:	697a      	ldr	r2, [r7, #20]
 8005af2:	fb03 f202 	mul.w	r2, r3, r2
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005afc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005afe:	4b0a      	ldr	r3, [pc, #40]	@ (8005b28 <HAL_RCC_GetSysClockFreq+0x108>)
 8005b00:	68db      	ldr	r3, [r3, #12]
 8005b02:	0e5b      	lsrs	r3, r3, #25
 8005b04:	f003 0303 	and.w	r3, r3, #3
 8005b08:	3301      	adds	r3, #1
 8005b0a:	005b      	lsls	r3, r3, #1
 8005b0c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005b0e:	697a      	ldr	r2, [r7, #20]
 8005b10:	683b      	ldr	r3, [r7, #0]
 8005b12:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b16:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005b18:	69bb      	ldr	r3, [r7, #24]
}
 8005b1a:	4618      	mov	r0, r3
 8005b1c:	3724      	adds	r7, #36	@ 0x24
 8005b1e:	46bd      	mov	sp, r7
 8005b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b24:	4770      	bx	lr
 8005b26:	bf00      	nop
 8005b28:	40021000 	.word	0x40021000
 8005b2c:	080072dc 	.word	0x080072dc
 8005b30:	00f42400 	.word	0x00f42400
 8005b34:	007a1200 	.word	0x007a1200

08005b38 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005b38:	b480      	push	{r7}
 8005b3a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005b3c:	4b03      	ldr	r3, [pc, #12]	@ (8005b4c <HAL_RCC_GetHCLKFreq+0x14>)
 8005b3e:	681b      	ldr	r3, [r3, #0]
}
 8005b40:	4618      	mov	r0, r3
 8005b42:	46bd      	mov	sp, r7
 8005b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b48:	4770      	bx	lr
 8005b4a:	bf00      	nop
 8005b4c:	20000000 	.word	0x20000000

08005b50 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005b50:	b580      	push	{r7, lr}
 8005b52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005b54:	f7ff fff0 	bl	8005b38 <HAL_RCC_GetHCLKFreq>
 8005b58:	4602      	mov	r2, r0
 8005b5a:	4b06      	ldr	r3, [pc, #24]	@ (8005b74 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005b5c:	689b      	ldr	r3, [r3, #8]
 8005b5e:	0a1b      	lsrs	r3, r3, #8
 8005b60:	f003 0307 	and.w	r3, r3, #7
 8005b64:	4904      	ldr	r1, [pc, #16]	@ (8005b78 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005b66:	5ccb      	ldrb	r3, [r1, r3]
 8005b68:	f003 031f 	and.w	r3, r3, #31
 8005b6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005b70:	4618      	mov	r0, r3
 8005b72:	bd80      	pop	{r7, pc}
 8005b74:	40021000 	.word	0x40021000
 8005b78:	080072d4 	.word	0x080072d4

08005b7c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005b7c:	b580      	push	{r7, lr}
 8005b7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005b80:	f7ff ffda 	bl	8005b38 <HAL_RCC_GetHCLKFreq>
 8005b84:	4602      	mov	r2, r0
 8005b86:	4b06      	ldr	r3, [pc, #24]	@ (8005ba0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005b88:	689b      	ldr	r3, [r3, #8]
 8005b8a:	0adb      	lsrs	r3, r3, #11
 8005b8c:	f003 0307 	and.w	r3, r3, #7
 8005b90:	4904      	ldr	r1, [pc, #16]	@ (8005ba4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005b92:	5ccb      	ldrb	r3, [r1, r3]
 8005b94:	f003 031f 	and.w	r3, r3, #31
 8005b98:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005b9c:	4618      	mov	r0, r3
 8005b9e:	bd80      	pop	{r7, pc}
 8005ba0:	40021000 	.word	0x40021000
 8005ba4:	080072d4 	.word	0x080072d4

08005ba8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005ba8:	b580      	push	{r7, lr}
 8005baa:	b086      	sub	sp, #24
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005bb0:	2300      	movs	r3, #0
 8005bb2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005bb4:	4b2a      	ldr	r3, [pc, #168]	@ (8005c60 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005bb6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005bb8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d003      	beq.n	8005bc8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005bc0:	f7ff f96e 	bl	8004ea0 <HAL_PWREx_GetVoltageRange>
 8005bc4:	6178      	str	r0, [r7, #20]
 8005bc6:	e014      	b.n	8005bf2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005bc8:	4b25      	ldr	r3, [pc, #148]	@ (8005c60 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005bca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005bcc:	4a24      	ldr	r2, [pc, #144]	@ (8005c60 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005bce:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005bd2:	6593      	str	r3, [r2, #88]	@ 0x58
 8005bd4:	4b22      	ldr	r3, [pc, #136]	@ (8005c60 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005bd6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005bd8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005bdc:	60fb      	str	r3, [r7, #12]
 8005bde:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005be0:	f7ff f95e 	bl	8004ea0 <HAL_PWREx_GetVoltageRange>
 8005be4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005be6:	4b1e      	ldr	r3, [pc, #120]	@ (8005c60 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005be8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005bea:	4a1d      	ldr	r2, [pc, #116]	@ (8005c60 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005bec:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005bf0:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005bf2:	697b      	ldr	r3, [r7, #20]
 8005bf4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005bf8:	d10b      	bne.n	8005c12 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	2b80      	cmp	r3, #128	@ 0x80
 8005bfe:	d919      	bls.n	8005c34 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2ba0      	cmp	r3, #160	@ 0xa0
 8005c04:	d902      	bls.n	8005c0c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005c06:	2302      	movs	r3, #2
 8005c08:	613b      	str	r3, [r7, #16]
 8005c0a:	e013      	b.n	8005c34 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005c0c:	2301      	movs	r3, #1
 8005c0e:	613b      	str	r3, [r7, #16]
 8005c10:	e010      	b.n	8005c34 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	2b80      	cmp	r3, #128	@ 0x80
 8005c16:	d902      	bls.n	8005c1e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8005c18:	2303      	movs	r3, #3
 8005c1a:	613b      	str	r3, [r7, #16]
 8005c1c:	e00a      	b.n	8005c34 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	2b80      	cmp	r3, #128	@ 0x80
 8005c22:	d102      	bne.n	8005c2a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005c24:	2302      	movs	r3, #2
 8005c26:	613b      	str	r3, [r7, #16]
 8005c28:	e004      	b.n	8005c34 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	2b70      	cmp	r3, #112	@ 0x70
 8005c2e:	d101      	bne.n	8005c34 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005c30:	2301      	movs	r3, #1
 8005c32:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005c34:	4b0b      	ldr	r3, [pc, #44]	@ (8005c64 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	f023 0207 	bic.w	r2, r3, #7
 8005c3c:	4909      	ldr	r1, [pc, #36]	@ (8005c64 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005c3e:	693b      	ldr	r3, [r7, #16]
 8005c40:	4313      	orrs	r3, r2
 8005c42:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005c44:	4b07      	ldr	r3, [pc, #28]	@ (8005c64 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	f003 0307 	and.w	r3, r3, #7
 8005c4c:	693a      	ldr	r2, [r7, #16]
 8005c4e:	429a      	cmp	r2, r3
 8005c50:	d001      	beq.n	8005c56 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8005c52:	2301      	movs	r3, #1
 8005c54:	e000      	b.n	8005c58 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8005c56:	2300      	movs	r3, #0
}
 8005c58:	4618      	mov	r0, r3
 8005c5a:	3718      	adds	r7, #24
 8005c5c:	46bd      	mov	sp, r7
 8005c5e:	bd80      	pop	{r7, pc}
 8005c60:	40021000 	.word	0x40021000
 8005c64:	40022000 	.word	0x40022000

08005c68 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005c68:	b580      	push	{r7, lr}
 8005c6a:	b086      	sub	sp, #24
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005c70:	2300      	movs	r3, #0
 8005c72:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005c74:	2300      	movs	r3, #0
 8005c76:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d031      	beq.n	8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c88:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8005c8c:	d01a      	beq.n	8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8005c8e:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8005c92:	d814      	bhi.n	8005cbe <HAL_RCCEx_PeriphCLKConfig+0x56>
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d009      	beq.n	8005cac <HAL_RCCEx_PeriphCLKConfig+0x44>
 8005c98:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005c9c:	d10f      	bne.n	8005cbe <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8005c9e:	4b5d      	ldr	r3, [pc, #372]	@ (8005e14 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005ca0:	68db      	ldr	r3, [r3, #12]
 8005ca2:	4a5c      	ldr	r2, [pc, #368]	@ (8005e14 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005ca4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005ca8:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005caa:	e00c      	b.n	8005cc6 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	3304      	adds	r3, #4
 8005cb0:	2100      	movs	r1, #0
 8005cb2:	4618      	mov	r0, r3
 8005cb4:	f000 f9de 	bl	8006074 <RCCEx_PLLSAI1_Config>
 8005cb8:	4603      	mov	r3, r0
 8005cba:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005cbc:	e003      	b.n	8005cc6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005cbe:	2301      	movs	r3, #1
 8005cc0:	74fb      	strb	r3, [r7, #19]
      break;
 8005cc2:	e000      	b.n	8005cc6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8005cc4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005cc6:	7cfb      	ldrb	r3, [r7, #19]
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d10b      	bne.n	8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005ccc:	4b51      	ldr	r3, [pc, #324]	@ (8005e14 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005cce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005cd2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005cda:	494e      	ldr	r1, [pc, #312]	@ (8005e14 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005cdc:	4313      	orrs	r3, r2
 8005cde:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8005ce2:	e001      	b.n	8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ce4:	7cfb      	ldrb	r3, [r7, #19]
 8005ce6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	f000 809e 	beq.w	8005e32 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005cf6:	2300      	movs	r3, #0
 8005cf8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005cfa:	4b46      	ldr	r3, [pc, #280]	@ (8005e14 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005cfc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005cfe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d101      	bne.n	8005d0a <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8005d06:	2301      	movs	r3, #1
 8005d08:	e000      	b.n	8005d0c <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8005d0a:	2300      	movs	r3, #0
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d00d      	beq.n	8005d2c <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005d10:	4b40      	ldr	r3, [pc, #256]	@ (8005e14 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005d12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d14:	4a3f      	ldr	r2, [pc, #252]	@ (8005e14 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005d16:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005d1a:	6593      	str	r3, [r2, #88]	@ 0x58
 8005d1c:	4b3d      	ldr	r3, [pc, #244]	@ (8005e14 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005d1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d20:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005d24:	60bb      	str	r3, [r7, #8]
 8005d26:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005d28:	2301      	movs	r3, #1
 8005d2a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005d2c:	4b3a      	ldr	r3, [pc, #232]	@ (8005e18 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	4a39      	ldr	r2, [pc, #228]	@ (8005e18 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8005d32:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005d36:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005d38:	f7fc fb44 	bl	80023c4 <HAL_GetTick>
 8005d3c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005d3e:	e009      	b.n	8005d54 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005d40:	f7fc fb40 	bl	80023c4 <HAL_GetTick>
 8005d44:	4602      	mov	r2, r0
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	1ad3      	subs	r3, r2, r3
 8005d4a:	2b02      	cmp	r3, #2
 8005d4c:	d902      	bls.n	8005d54 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8005d4e:	2303      	movs	r3, #3
 8005d50:	74fb      	strb	r3, [r7, #19]
        break;
 8005d52:	e005      	b.n	8005d60 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005d54:	4b30      	ldr	r3, [pc, #192]	@ (8005e18 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d0ef      	beq.n	8005d40 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8005d60:	7cfb      	ldrb	r3, [r7, #19]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d15a      	bne.n	8005e1c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005d66:	4b2b      	ldr	r3, [pc, #172]	@ (8005e14 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005d68:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005d6c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005d70:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005d72:	697b      	ldr	r3, [r7, #20]
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d01e      	beq.n	8005db6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005d7c:	697a      	ldr	r2, [r7, #20]
 8005d7e:	429a      	cmp	r2, r3
 8005d80:	d019      	beq.n	8005db6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005d82:	4b24      	ldr	r3, [pc, #144]	@ (8005e14 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005d84:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005d88:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005d8c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005d8e:	4b21      	ldr	r3, [pc, #132]	@ (8005e14 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005d90:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005d94:	4a1f      	ldr	r2, [pc, #124]	@ (8005e14 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005d96:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005d9a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005d9e:	4b1d      	ldr	r3, [pc, #116]	@ (8005e14 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005da0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005da4:	4a1b      	ldr	r2, [pc, #108]	@ (8005e14 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005da6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005daa:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005dae:	4a19      	ldr	r2, [pc, #100]	@ (8005e14 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005db0:	697b      	ldr	r3, [r7, #20]
 8005db2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005db6:	697b      	ldr	r3, [r7, #20]
 8005db8:	f003 0301 	and.w	r3, r3, #1
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d016      	beq.n	8005dee <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005dc0:	f7fc fb00 	bl	80023c4 <HAL_GetTick>
 8005dc4:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005dc6:	e00b      	b.n	8005de0 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005dc8:	f7fc fafc 	bl	80023c4 <HAL_GetTick>
 8005dcc:	4602      	mov	r2, r0
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	1ad3      	subs	r3, r2, r3
 8005dd2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005dd6:	4293      	cmp	r3, r2
 8005dd8:	d902      	bls.n	8005de0 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8005dda:	2303      	movs	r3, #3
 8005ddc:	74fb      	strb	r3, [r7, #19]
            break;
 8005dde:	e006      	b.n	8005dee <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005de0:	4b0c      	ldr	r3, [pc, #48]	@ (8005e14 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005de2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005de6:	f003 0302 	and.w	r3, r3, #2
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d0ec      	beq.n	8005dc8 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8005dee:	7cfb      	ldrb	r3, [r7, #19]
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d10b      	bne.n	8005e0c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005df4:	4b07      	ldr	r3, [pc, #28]	@ (8005e14 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005df6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005dfa:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005e02:	4904      	ldr	r1, [pc, #16]	@ (8005e14 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005e04:	4313      	orrs	r3, r2
 8005e06:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8005e0a:	e009      	b.n	8005e20 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005e0c:	7cfb      	ldrb	r3, [r7, #19]
 8005e0e:	74bb      	strb	r3, [r7, #18]
 8005e10:	e006      	b.n	8005e20 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8005e12:	bf00      	nop
 8005e14:	40021000 	.word	0x40021000
 8005e18:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e1c:	7cfb      	ldrb	r3, [r7, #19]
 8005e1e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005e20:	7c7b      	ldrb	r3, [r7, #17]
 8005e22:	2b01      	cmp	r3, #1
 8005e24:	d105      	bne.n	8005e32 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005e26:	4b8a      	ldr	r3, [pc, #552]	@ (8006050 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005e28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e2a:	4a89      	ldr	r2, [pc, #548]	@ (8006050 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005e2c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005e30:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	f003 0301 	and.w	r3, r3, #1
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d00a      	beq.n	8005e54 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005e3e:	4b84      	ldr	r3, [pc, #528]	@ (8006050 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005e40:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e44:	f023 0203 	bic.w	r2, r3, #3
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	6a1b      	ldr	r3, [r3, #32]
 8005e4c:	4980      	ldr	r1, [pc, #512]	@ (8006050 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005e4e:	4313      	orrs	r3, r2
 8005e50:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	f003 0302 	and.w	r3, r3, #2
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d00a      	beq.n	8005e76 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005e60:	4b7b      	ldr	r3, [pc, #492]	@ (8006050 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005e62:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e66:	f023 020c 	bic.w	r2, r3, #12
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e6e:	4978      	ldr	r1, [pc, #480]	@ (8006050 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005e70:	4313      	orrs	r3, r2
 8005e72:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	f003 0320 	and.w	r3, r3, #32
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d00a      	beq.n	8005e98 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005e82:	4b73      	ldr	r3, [pc, #460]	@ (8006050 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005e84:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e88:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e90:	496f      	ldr	r1, [pc, #444]	@ (8006050 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005e92:	4313      	orrs	r3, r2
 8005e94:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d00a      	beq.n	8005eba <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005ea4:	4b6a      	ldr	r3, [pc, #424]	@ (8006050 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005ea6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005eaa:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005eb2:	4967      	ldr	r1, [pc, #412]	@ (8006050 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005eb4:	4313      	orrs	r3, r2
 8005eb6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d00a      	beq.n	8005edc <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005ec6:	4b62      	ldr	r3, [pc, #392]	@ (8006050 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005ec8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ecc:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ed4:	495e      	ldr	r1, [pc, #376]	@ (8006050 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005ed6:	4313      	orrs	r3, r2
 8005ed8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d00a      	beq.n	8005efe <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005ee8:	4b59      	ldr	r3, [pc, #356]	@ (8006050 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005eea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005eee:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ef6:	4956      	ldr	r1, [pc, #344]	@ (8006050 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005ef8:	4313      	orrs	r3, r2
 8005efa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d00a      	beq.n	8005f20 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005f0a:	4b51      	ldr	r3, [pc, #324]	@ (8006050 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005f0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f10:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f18:	494d      	ldr	r1, [pc, #308]	@ (8006050 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005f1a:	4313      	orrs	r3, r2
 8005f1c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d028      	beq.n	8005f7e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005f2c:	4b48      	ldr	r3, [pc, #288]	@ (8006050 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005f2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f32:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f3a:	4945      	ldr	r1, [pc, #276]	@ (8006050 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005f3c:	4313      	orrs	r3, r2
 8005f3e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f46:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005f4a:	d106      	bne.n	8005f5a <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005f4c:	4b40      	ldr	r3, [pc, #256]	@ (8006050 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005f4e:	68db      	ldr	r3, [r3, #12]
 8005f50:	4a3f      	ldr	r2, [pc, #252]	@ (8006050 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005f52:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005f56:	60d3      	str	r3, [r2, #12]
 8005f58:	e011      	b.n	8005f7e <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f5e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005f62:	d10c      	bne.n	8005f7e <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	3304      	adds	r3, #4
 8005f68:	2101      	movs	r1, #1
 8005f6a:	4618      	mov	r0, r3
 8005f6c:	f000 f882 	bl	8006074 <RCCEx_PLLSAI1_Config>
 8005f70:	4603      	mov	r3, r0
 8005f72:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005f74:	7cfb      	ldrb	r3, [r7, #19]
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d001      	beq.n	8005f7e <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8005f7a:	7cfb      	ldrb	r3, [r7, #19]
 8005f7c:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d028      	beq.n	8005fdc <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005f8a:	4b31      	ldr	r3, [pc, #196]	@ (8006050 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005f8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f90:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f98:	492d      	ldr	r1, [pc, #180]	@ (8006050 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005f9a:	4313      	orrs	r3, r2
 8005f9c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005fa4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005fa8:	d106      	bne.n	8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005faa:	4b29      	ldr	r3, [pc, #164]	@ (8006050 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005fac:	68db      	ldr	r3, [r3, #12]
 8005fae:	4a28      	ldr	r2, [pc, #160]	@ (8006050 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005fb0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005fb4:	60d3      	str	r3, [r2, #12]
 8005fb6:	e011      	b.n	8005fdc <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005fbc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005fc0:	d10c      	bne.n	8005fdc <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	3304      	adds	r3, #4
 8005fc6:	2101      	movs	r1, #1
 8005fc8:	4618      	mov	r0, r3
 8005fca:	f000 f853 	bl	8006074 <RCCEx_PLLSAI1_Config>
 8005fce:	4603      	mov	r3, r0
 8005fd0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005fd2:	7cfb      	ldrb	r3, [r7, #19]
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d001      	beq.n	8005fdc <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8005fd8:	7cfb      	ldrb	r3, [r7, #19]
 8005fda:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d01c      	beq.n	8006022 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005fe8:	4b19      	ldr	r3, [pc, #100]	@ (8006050 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005fea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005fee:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005ff6:	4916      	ldr	r1, [pc, #88]	@ (8006050 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005ff8:	4313      	orrs	r3, r2
 8005ffa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006002:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006006:	d10c      	bne.n	8006022 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	3304      	adds	r3, #4
 800600c:	2102      	movs	r1, #2
 800600e:	4618      	mov	r0, r3
 8006010:	f000 f830 	bl	8006074 <RCCEx_PLLSAI1_Config>
 8006014:	4603      	mov	r3, r0
 8006016:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006018:	7cfb      	ldrb	r3, [r7, #19]
 800601a:	2b00      	cmp	r3, #0
 800601c:	d001      	beq.n	8006022 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 800601e:	7cfb      	ldrb	r3, [r7, #19]
 8006020:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800602a:	2b00      	cmp	r3, #0
 800602c:	d00a      	beq.n	8006044 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800602e:	4b08      	ldr	r3, [pc, #32]	@ (8006050 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006030:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006034:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800603c:	4904      	ldr	r1, [pc, #16]	@ (8006050 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800603e:	4313      	orrs	r3, r2
 8006040:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8006044:	7cbb      	ldrb	r3, [r7, #18]
}
 8006046:	4618      	mov	r0, r3
 8006048:	3718      	adds	r7, #24
 800604a:	46bd      	mov	sp, r7
 800604c:	bd80      	pop	{r7, pc}
 800604e:	bf00      	nop
 8006050:	40021000 	.word	0x40021000

08006054 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8006054:	b480      	push	{r7}
 8006056:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8006058:	4b05      	ldr	r3, [pc, #20]	@ (8006070 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	4a04      	ldr	r2, [pc, #16]	@ (8006070 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800605e:	f043 0304 	orr.w	r3, r3, #4
 8006062:	6013      	str	r3, [r2, #0]
}
 8006064:	bf00      	nop
 8006066:	46bd      	mov	sp, r7
 8006068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606c:	4770      	bx	lr
 800606e:	bf00      	nop
 8006070:	40021000 	.word	0x40021000

08006074 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8006074:	b580      	push	{r7, lr}
 8006076:	b084      	sub	sp, #16
 8006078:	af00      	add	r7, sp, #0
 800607a:	6078      	str	r0, [r7, #4]
 800607c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800607e:	2300      	movs	r3, #0
 8006080:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006082:	4b74      	ldr	r3, [pc, #464]	@ (8006254 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006084:	68db      	ldr	r3, [r3, #12]
 8006086:	f003 0303 	and.w	r3, r3, #3
 800608a:	2b00      	cmp	r3, #0
 800608c:	d018      	beq.n	80060c0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800608e:	4b71      	ldr	r3, [pc, #452]	@ (8006254 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006090:	68db      	ldr	r3, [r3, #12]
 8006092:	f003 0203 	and.w	r2, r3, #3
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	429a      	cmp	r2, r3
 800609c:	d10d      	bne.n	80060ba <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
       ||
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d009      	beq.n	80060ba <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80060a6:	4b6b      	ldr	r3, [pc, #428]	@ (8006254 <RCCEx_PLLSAI1_Config+0x1e0>)
 80060a8:	68db      	ldr	r3, [r3, #12]
 80060aa:	091b      	lsrs	r3, r3, #4
 80060ac:	f003 0307 	and.w	r3, r3, #7
 80060b0:	1c5a      	adds	r2, r3, #1
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	685b      	ldr	r3, [r3, #4]
       ||
 80060b6:	429a      	cmp	r2, r3
 80060b8:	d047      	beq.n	800614a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80060ba:	2301      	movs	r3, #1
 80060bc:	73fb      	strb	r3, [r7, #15]
 80060be:	e044      	b.n	800614a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	2b03      	cmp	r3, #3
 80060c6:	d018      	beq.n	80060fa <RCCEx_PLLSAI1_Config+0x86>
 80060c8:	2b03      	cmp	r3, #3
 80060ca:	d825      	bhi.n	8006118 <RCCEx_PLLSAI1_Config+0xa4>
 80060cc:	2b01      	cmp	r3, #1
 80060ce:	d002      	beq.n	80060d6 <RCCEx_PLLSAI1_Config+0x62>
 80060d0:	2b02      	cmp	r3, #2
 80060d2:	d009      	beq.n	80060e8 <RCCEx_PLLSAI1_Config+0x74>
 80060d4:	e020      	b.n	8006118 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80060d6:	4b5f      	ldr	r3, [pc, #380]	@ (8006254 <RCCEx_PLLSAI1_Config+0x1e0>)
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	f003 0302 	and.w	r3, r3, #2
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d11d      	bne.n	800611e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80060e2:	2301      	movs	r3, #1
 80060e4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80060e6:	e01a      	b.n	800611e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80060e8:	4b5a      	ldr	r3, [pc, #360]	@ (8006254 <RCCEx_PLLSAI1_Config+0x1e0>)
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d116      	bne.n	8006122 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80060f4:	2301      	movs	r3, #1
 80060f6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80060f8:	e013      	b.n	8006122 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80060fa:	4b56      	ldr	r3, [pc, #344]	@ (8006254 <RCCEx_PLLSAI1_Config+0x1e0>)
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006102:	2b00      	cmp	r3, #0
 8006104:	d10f      	bne.n	8006126 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006106:	4b53      	ldr	r3, [pc, #332]	@ (8006254 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800610e:	2b00      	cmp	r3, #0
 8006110:	d109      	bne.n	8006126 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8006112:	2301      	movs	r3, #1
 8006114:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006116:	e006      	b.n	8006126 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8006118:	2301      	movs	r3, #1
 800611a:	73fb      	strb	r3, [r7, #15]
      break;
 800611c:	e004      	b.n	8006128 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800611e:	bf00      	nop
 8006120:	e002      	b.n	8006128 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006122:	bf00      	nop
 8006124:	e000      	b.n	8006128 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006126:	bf00      	nop
    }

    if(status == HAL_OK)
 8006128:	7bfb      	ldrb	r3, [r7, #15]
 800612a:	2b00      	cmp	r3, #0
 800612c:	d10d      	bne.n	800614a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800612e:	4b49      	ldr	r3, [pc, #292]	@ (8006254 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006130:	68db      	ldr	r3, [r3, #12]
 8006132:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	6819      	ldr	r1, [r3, #0]
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	685b      	ldr	r3, [r3, #4]
 800613e:	3b01      	subs	r3, #1
 8006140:	011b      	lsls	r3, r3, #4
 8006142:	430b      	orrs	r3, r1
 8006144:	4943      	ldr	r1, [pc, #268]	@ (8006254 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006146:	4313      	orrs	r3, r2
 8006148:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800614a:	7bfb      	ldrb	r3, [r7, #15]
 800614c:	2b00      	cmp	r3, #0
 800614e:	d17c      	bne.n	800624a <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8006150:	4b40      	ldr	r3, [pc, #256]	@ (8006254 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	4a3f      	ldr	r2, [pc, #252]	@ (8006254 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006156:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800615a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800615c:	f7fc f932 	bl	80023c4 <HAL_GetTick>
 8006160:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006162:	e009      	b.n	8006178 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006164:	f7fc f92e 	bl	80023c4 <HAL_GetTick>
 8006168:	4602      	mov	r2, r0
 800616a:	68bb      	ldr	r3, [r7, #8]
 800616c:	1ad3      	subs	r3, r2, r3
 800616e:	2b02      	cmp	r3, #2
 8006170:	d902      	bls.n	8006178 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8006172:	2303      	movs	r3, #3
 8006174:	73fb      	strb	r3, [r7, #15]
        break;
 8006176:	e005      	b.n	8006184 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006178:	4b36      	ldr	r3, [pc, #216]	@ (8006254 <RCCEx_PLLSAI1_Config+0x1e0>)
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006180:	2b00      	cmp	r3, #0
 8006182:	d1ef      	bne.n	8006164 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8006184:	7bfb      	ldrb	r3, [r7, #15]
 8006186:	2b00      	cmp	r3, #0
 8006188:	d15f      	bne.n	800624a <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800618a:	683b      	ldr	r3, [r7, #0]
 800618c:	2b00      	cmp	r3, #0
 800618e:	d110      	bne.n	80061b2 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006190:	4b30      	ldr	r3, [pc, #192]	@ (8006254 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006192:	691b      	ldr	r3, [r3, #16]
 8006194:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8006198:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800619c:	687a      	ldr	r2, [r7, #4]
 800619e:	6892      	ldr	r2, [r2, #8]
 80061a0:	0211      	lsls	r1, r2, #8
 80061a2:	687a      	ldr	r2, [r7, #4]
 80061a4:	68d2      	ldr	r2, [r2, #12]
 80061a6:	06d2      	lsls	r2, r2, #27
 80061a8:	430a      	orrs	r2, r1
 80061aa:	492a      	ldr	r1, [pc, #168]	@ (8006254 <RCCEx_PLLSAI1_Config+0x1e0>)
 80061ac:	4313      	orrs	r3, r2
 80061ae:	610b      	str	r3, [r1, #16]
 80061b0:	e027      	b.n	8006202 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80061b2:	683b      	ldr	r3, [r7, #0]
 80061b4:	2b01      	cmp	r3, #1
 80061b6:	d112      	bne.n	80061de <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80061b8:	4b26      	ldr	r3, [pc, #152]	@ (8006254 <RCCEx_PLLSAI1_Config+0x1e0>)
 80061ba:	691b      	ldr	r3, [r3, #16]
 80061bc:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 80061c0:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80061c4:	687a      	ldr	r2, [r7, #4]
 80061c6:	6892      	ldr	r2, [r2, #8]
 80061c8:	0211      	lsls	r1, r2, #8
 80061ca:	687a      	ldr	r2, [r7, #4]
 80061cc:	6912      	ldr	r2, [r2, #16]
 80061ce:	0852      	lsrs	r2, r2, #1
 80061d0:	3a01      	subs	r2, #1
 80061d2:	0552      	lsls	r2, r2, #21
 80061d4:	430a      	orrs	r2, r1
 80061d6:	491f      	ldr	r1, [pc, #124]	@ (8006254 <RCCEx_PLLSAI1_Config+0x1e0>)
 80061d8:	4313      	orrs	r3, r2
 80061da:	610b      	str	r3, [r1, #16]
 80061dc:	e011      	b.n	8006202 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80061de:	4b1d      	ldr	r3, [pc, #116]	@ (8006254 <RCCEx_PLLSAI1_Config+0x1e0>)
 80061e0:	691b      	ldr	r3, [r3, #16]
 80061e2:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80061e6:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80061ea:	687a      	ldr	r2, [r7, #4]
 80061ec:	6892      	ldr	r2, [r2, #8]
 80061ee:	0211      	lsls	r1, r2, #8
 80061f0:	687a      	ldr	r2, [r7, #4]
 80061f2:	6952      	ldr	r2, [r2, #20]
 80061f4:	0852      	lsrs	r2, r2, #1
 80061f6:	3a01      	subs	r2, #1
 80061f8:	0652      	lsls	r2, r2, #25
 80061fa:	430a      	orrs	r2, r1
 80061fc:	4915      	ldr	r1, [pc, #84]	@ (8006254 <RCCEx_PLLSAI1_Config+0x1e0>)
 80061fe:	4313      	orrs	r3, r2
 8006200:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8006202:	4b14      	ldr	r3, [pc, #80]	@ (8006254 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	4a13      	ldr	r2, [pc, #76]	@ (8006254 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006208:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800620c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800620e:	f7fc f8d9 	bl	80023c4 <HAL_GetTick>
 8006212:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006214:	e009      	b.n	800622a <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006216:	f7fc f8d5 	bl	80023c4 <HAL_GetTick>
 800621a:	4602      	mov	r2, r0
 800621c:	68bb      	ldr	r3, [r7, #8]
 800621e:	1ad3      	subs	r3, r2, r3
 8006220:	2b02      	cmp	r3, #2
 8006222:	d902      	bls.n	800622a <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8006224:	2303      	movs	r3, #3
 8006226:	73fb      	strb	r3, [r7, #15]
          break;
 8006228:	e005      	b.n	8006236 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800622a:	4b0a      	ldr	r3, [pc, #40]	@ (8006254 <RCCEx_PLLSAI1_Config+0x1e0>)
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006232:	2b00      	cmp	r3, #0
 8006234:	d0ef      	beq.n	8006216 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8006236:	7bfb      	ldrb	r3, [r7, #15]
 8006238:	2b00      	cmp	r3, #0
 800623a:	d106      	bne.n	800624a <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800623c:	4b05      	ldr	r3, [pc, #20]	@ (8006254 <RCCEx_PLLSAI1_Config+0x1e0>)
 800623e:	691a      	ldr	r2, [r3, #16]
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	699b      	ldr	r3, [r3, #24]
 8006244:	4903      	ldr	r1, [pc, #12]	@ (8006254 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006246:	4313      	orrs	r3, r2
 8006248:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800624a:	7bfb      	ldrb	r3, [r7, #15]
}
 800624c:	4618      	mov	r0, r3
 800624e:	3710      	adds	r7, #16
 8006250:	46bd      	mov	sp, r7
 8006252:	bd80      	pop	{r7, pc}
 8006254:	40021000 	.word	0x40021000

08006258 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006258:	b580      	push	{r7, lr}
 800625a:	b082      	sub	sp, #8
 800625c:	af00      	add	r7, sp, #0
 800625e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	2b00      	cmp	r3, #0
 8006264:	d101      	bne.n	800626a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006266:	2301      	movs	r3, #1
 8006268:	e049      	b.n	80062fe <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006270:	b2db      	uxtb	r3, r3
 8006272:	2b00      	cmp	r3, #0
 8006274:	d106      	bne.n	8006284 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	2200      	movs	r2, #0
 800627a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800627e:	6878      	ldr	r0, [r7, #4]
 8006280:	f7fb ff42 	bl	8002108 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	2202      	movs	r2, #2
 8006288:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681a      	ldr	r2, [r3, #0]
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	3304      	adds	r3, #4
 8006294:	4619      	mov	r1, r3
 8006296:	4610      	mov	r0, r2
 8006298:	f000 f94c 	bl	8006534 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	2201      	movs	r2, #1
 80062a0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	2201      	movs	r2, #1
 80062a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	2201      	movs	r2, #1
 80062b0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	2201      	movs	r2, #1
 80062b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	2201      	movs	r2, #1
 80062c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	2201      	movs	r2, #1
 80062c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	2201      	movs	r2, #1
 80062d0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	2201      	movs	r2, #1
 80062d8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	2201      	movs	r2, #1
 80062e0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	2201      	movs	r2, #1
 80062e8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	2201      	movs	r2, #1
 80062f0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	2201      	movs	r2, #1
 80062f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80062fc:	2300      	movs	r3, #0
}
 80062fe:	4618      	mov	r0, r3
 8006300:	3708      	adds	r7, #8
 8006302:	46bd      	mov	sp, r7
 8006304:	bd80      	pop	{r7, pc}
	...

08006308 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006308:	b480      	push	{r7}
 800630a:	b085      	sub	sp, #20
 800630c:	af00      	add	r7, sp, #0
 800630e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006316:	b2db      	uxtb	r3, r3
 8006318:	2b01      	cmp	r3, #1
 800631a:	d001      	beq.n	8006320 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800631c:	2301      	movs	r3, #1
 800631e:	e033      	b.n	8006388 <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	2202      	movs	r2, #2
 8006324:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	4a19      	ldr	r2, [pc, #100]	@ (8006394 <HAL_TIM_Base_Start+0x8c>)
 800632e:	4293      	cmp	r3, r2
 8006330:	d009      	beq.n	8006346 <HAL_TIM_Base_Start+0x3e>
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800633a:	d004      	beq.n	8006346 <HAL_TIM_Base_Start+0x3e>
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	4a15      	ldr	r2, [pc, #84]	@ (8006398 <HAL_TIM_Base_Start+0x90>)
 8006342:	4293      	cmp	r3, r2
 8006344:	d115      	bne.n	8006372 <HAL_TIM_Base_Start+0x6a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	689a      	ldr	r2, [r3, #8]
 800634c:	4b13      	ldr	r3, [pc, #76]	@ (800639c <HAL_TIM_Base_Start+0x94>)
 800634e:	4013      	ands	r3, r2
 8006350:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	2b06      	cmp	r3, #6
 8006356:	d015      	beq.n	8006384 <HAL_TIM_Base_Start+0x7c>
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800635e:	d011      	beq.n	8006384 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	681a      	ldr	r2, [r3, #0]
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	f042 0201 	orr.w	r2, r2, #1
 800636e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006370:	e008      	b.n	8006384 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	681a      	ldr	r2, [r3, #0]
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	f042 0201 	orr.w	r2, r2, #1
 8006380:	601a      	str	r2, [r3, #0]
 8006382:	e000      	b.n	8006386 <HAL_TIM_Base_Start+0x7e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006384:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006386:	2300      	movs	r3, #0
}
 8006388:	4618      	mov	r0, r3
 800638a:	3714      	adds	r7, #20
 800638c:	46bd      	mov	sp, r7
 800638e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006392:	4770      	bx	lr
 8006394:	40012c00 	.word	0x40012c00
 8006398:	40014000 	.word	0x40014000
 800639c:	00010007 	.word	0x00010007

080063a0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80063a0:	b580      	push	{r7, lr}
 80063a2:	b084      	sub	sp, #16
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	6078      	str	r0, [r7, #4]
 80063a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80063aa:	2300      	movs	r3, #0
 80063ac:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80063b4:	2b01      	cmp	r3, #1
 80063b6:	d101      	bne.n	80063bc <HAL_TIM_ConfigClockSource+0x1c>
 80063b8:	2302      	movs	r3, #2
 80063ba:	e0b6      	b.n	800652a <HAL_TIM_ConfigClockSource+0x18a>
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	2201      	movs	r2, #1
 80063c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	2202      	movs	r2, #2
 80063c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	689b      	ldr	r3, [r3, #8]
 80063d2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80063d4:	68bb      	ldr	r3, [r7, #8]
 80063d6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80063da:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80063de:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80063e0:	68bb      	ldr	r3, [r7, #8]
 80063e2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80063e6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	68ba      	ldr	r2, [r7, #8]
 80063ee:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80063f0:	683b      	ldr	r3, [r7, #0]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80063f8:	d03e      	beq.n	8006478 <HAL_TIM_ConfigClockSource+0xd8>
 80063fa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80063fe:	f200 8087 	bhi.w	8006510 <HAL_TIM_ConfigClockSource+0x170>
 8006402:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006406:	f000 8086 	beq.w	8006516 <HAL_TIM_ConfigClockSource+0x176>
 800640a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800640e:	d87f      	bhi.n	8006510 <HAL_TIM_ConfigClockSource+0x170>
 8006410:	2b70      	cmp	r3, #112	@ 0x70
 8006412:	d01a      	beq.n	800644a <HAL_TIM_ConfigClockSource+0xaa>
 8006414:	2b70      	cmp	r3, #112	@ 0x70
 8006416:	d87b      	bhi.n	8006510 <HAL_TIM_ConfigClockSource+0x170>
 8006418:	2b60      	cmp	r3, #96	@ 0x60
 800641a:	d050      	beq.n	80064be <HAL_TIM_ConfigClockSource+0x11e>
 800641c:	2b60      	cmp	r3, #96	@ 0x60
 800641e:	d877      	bhi.n	8006510 <HAL_TIM_ConfigClockSource+0x170>
 8006420:	2b50      	cmp	r3, #80	@ 0x50
 8006422:	d03c      	beq.n	800649e <HAL_TIM_ConfigClockSource+0xfe>
 8006424:	2b50      	cmp	r3, #80	@ 0x50
 8006426:	d873      	bhi.n	8006510 <HAL_TIM_ConfigClockSource+0x170>
 8006428:	2b40      	cmp	r3, #64	@ 0x40
 800642a:	d058      	beq.n	80064de <HAL_TIM_ConfigClockSource+0x13e>
 800642c:	2b40      	cmp	r3, #64	@ 0x40
 800642e:	d86f      	bhi.n	8006510 <HAL_TIM_ConfigClockSource+0x170>
 8006430:	2b30      	cmp	r3, #48	@ 0x30
 8006432:	d064      	beq.n	80064fe <HAL_TIM_ConfigClockSource+0x15e>
 8006434:	2b30      	cmp	r3, #48	@ 0x30
 8006436:	d86b      	bhi.n	8006510 <HAL_TIM_ConfigClockSource+0x170>
 8006438:	2b20      	cmp	r3, #32
 800643a:	d060      	beq.n	80064fe <HAL_TIM_ConfigClockSource+0x15e>
 800643c:	2b20      	cmp	r3, #32
 800643e:	d867      	bhi.n	8006510 <HAL_TIM_ConfigClockSource+0x170>
 8006440:	2b00      	cmp	r3, #0
 8006442:	d05c      	beq.n	80064fe <HAL_TIM_ConfigClockSource+0x15e>
 8006444:	2b10      	cmp	r3, #16
 8006446:	d05a      	beq.n	80064fe <HAL_TIM_ConfigClockSource+0x15e>
 8006448:	e062      	b.n	8006510 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800644e:	683b      	ldr	r3, [r7, #0]
 8006450:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006452:	683b      	ldr	r3, [r7, #0]
 8006454:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006456:	683b      	ldr	r3, [r7, #0]
 8006458:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800645a:	f000 f955 	bl	8006708 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	689b      	ldr	r3, [r3, #8]
 8006464:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006466:	68bb      	ldr	r3, [r7, #8]
 8006468:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800646c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	68ba      	ldr	r2, [r7, #8]
 8006474:	609a      	str	r2, [r3, #8]
      break;
 8006476:	e04f      	b.n	8006518 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800647c:	683b      	ldr	r3, [r7, #0]
 800647e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006480:	683b      	ldr	r3, [r7, #0]
 8006482:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006484:	683b      	ldr	r3, [r7, #0]
 8006486:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006488:	f000 f93e 	bl	8006708 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	689a      	ldr	r2, [r3, #8]
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800649a:	609a      	str	r2, [r3, #8]
      break;
 800649c:	e03c      	b.n	8006518 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80064a2:	683b      	ldr	r3, [r7, #0]
 80064a4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80064a6:	683b      	ldr	r3, [r7, #0]
 80064a8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80064aa:	461a      	mov	r2, r3
 80064ac:	f000 f8b2 	bl	8006614 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	2150      	movs	r1, #80	@ 0x50
 80064b6:	4618      	mov	r0, r3
 80064b8:	f000 f90b 	bl	80066d2 <TIM_ITRx_SetConfig>
      break;
 80064bc:	e02c      	b.n	8006518 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80064c2:	683b      	ldr	r3, [r7, #0]
 80064c4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80064c6:	683b      	ldr	r3, [r7, #0]
 80064c8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80064ca:	461a      	mov	r2, r3
 80064cc:	f000 f8d1 	bl	8006672 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	2160      	movs	r1, #96	@ 0x60
 80064d6:	4618      	mov	r0, r3
 80064d8:	f000 f8fb 	bl	80066d2 <TIM_ITRx_SetConfig>
      break;
 80064dc:	e01c      	b.n	8006518 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80064e2:	683b      	ldr	r3, [r7, #0]
 80064e4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80064e6:	683b      	ldr	r3, [r7, #0]
 80064e8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80064ea:	461a      	mov	r2, r3
 80064ec:	f000 f892 	bl	8006614 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	2140      	movs	r1, #64	@ 0x40
 80064f6:	4618      	mov	r0, r3
 80064f8:	f000 f8eb 	bl	80066d2 <TIM_ITRx_SetConfig>
      break;
 80064fc:	e00c      	b.n	8006518 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681a      	ldr	r2, [r3, #0]
 8006502:	683b      	ldr	r3, [r7, #0]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	4619      	mov	r1, r3
 8006508:	4610      	mov	r0, r2
 800650a:	f000 f8e2 	bl	80066d2 <TIM_ITRx_SetConfig>
      break;
 800650e:	e003      	b.n	8006518 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8006510:	2301      	movs	r3, #1
 8006512:	73fb      	strb	r3, [r7, #15]
      break;
 8006514:	e000      	b.n	8006518 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8006516:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	2201      	movs	r2, #1
 800651c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	2200      	movs	r2, #0
 8006524:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006528:	7bfb      	ldrb	r3, [r7, #15]
}
 800652a:	4618      	mov	r0, r3
 800652c:	3710      	adds	r7, #16
 800652e:	46bd      	mov	sp, r7
 8006530:	bd80      	pop	{r7, pc}
	...

08006534 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006534:	b480      	push	{r7}
 8006536:	b085      	sub	sp, #20
 8006538:	af00      	add	r7, sp, #0
 800653a:	6078      	str	r0, [r7, #4]
 800653c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	4a30      	ldr	r2, [pc, #192]	@ (8006608 <TIM_Base_SetConfig+0xd4>)
 8006548:	4293      	cmp	r3, r2
 800654a:	d003      	beq.n	8006554 <TIM_Base_SetConfig+0x20>
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006552:	d108      	bne.n	8006566 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800655a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800655c:	683b      	ldr	r3, [r7, #0]
 800655e:	685b      	ldr	r3, [r3, #4]
 8006560:	68fa      	ldr	r2, [r7, #12]
 8006562:	4313      	orrs	r3, r2
 8006564:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	4a27      	ldr	r2, [pc, #156]	@ (8006608 <TIM_Base_SetConfig+0xd4>)
 800656a:	4293      	cmp	r3, r2
 800656c:	d00b      	beq.n	8006586 <TIM_Base_SetConfig+0x52>
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006574:	d007      	beq.n	8006586 <TIM_Base_SetConfig+0x52>
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	4a24      	ldr	r2, [pc, #144]	@ (800660c <TIM_Base_SetConfig+0xd8>)
 800657a:	4293      	cmp	r3, r2
 800657c:	d003      	beq.n	8006586 <TIM_Base_SetConfig+0x52>
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	4a23      	ldr	r2, [pc, #140]	@ (8006610 <TIM_Base_SetConfig+0xdc>)
 8006582:	4293      	cmp	r3, r2
 8006584:	d108      	bne.n	8006598 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800658c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800658e:	683b      	ldr	r3, [r7, #0]
 8006590:	68db      	ldr	r3, [r3, #12]
 8006592:	68fa      	ldr	r2, [r7, #12]
 8006594:	4313      	orrs	r3, r2
 8006596:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800659e:	683b      	ldr	r3, [r7, #0]
 80065a0:	695b      	ldr	r3, [r3, #20]
 80065a2:	4313      	orrs	r3, r2
 80065a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	68fa      	ldr	r2, [r7, #12]
 80065aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80065ac:	683b      	ldr	r3, [r7, #0]
 80065ae:	689a      	ldr	r2, [r3, #8]
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80065b4:	683b      	ldr	r3, [r7, #0]
 80065b6:	681a      	ldr	r2, [r3, #0]
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	4a12      	ldr	r2, [pc, #72]	@ (8006608 <TIM_Base_SetConfig+0xd4>)
 80065c0:	4293      	cmp	r3, r2
 80065c2:	d007      	beq.n	80065d4 <TIM_Base_SetConfig+0xa0>
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	4a11      	ldr	r2, [pc, #68]	@ (800660c <TIM_Base_SetConfig+0xd8>)
 80065c8:	4293      	cmp	r3, r2
 80065ca:	d003      	beq.n	80065d4 <TIM_Base_SetConfig+0xa0>
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	4a10      	ldr	r2, [pc, #64]	@ (8006610 <TIM_Base_SetConfig+0xdc>)
 80065d0:	4293      	cmp	r3, r2
 80065d2:	d103      	bne.n	80065dc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80065d4:	683b      	ldr	r3, [r7, #0]
 80065d6:	691a      	ldr	r2, [r3, #16]
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	2201      	movs	r2, #1
 80065e0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	691b      	ldr	r3, [r3, #16]
 80065e6:	f003 0301 	and.w	r3, r3, #1
 80065ea:	2b01      	cmp	r3, #1
 80065ec:	d105      	bne.n	80065fa <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	691b      	ldr	r3, [r3, #16]
 80065f2:	f023 0201 	bic.w	r2, r3, #1
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	611a      	str	r2, [r3, #16]
  }
}
 80065fa:	bf00      	nop
 80065fc:	3714      	adds	r7, #20
 80065fe:	46bd      	mov	sp, r7
 8006600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006604:	4770      	bx	lr
 8006606:	bf00      	nop
 8006608:	40012c00 	.word	0x40012c00
 800660c:	40014000 	.word	0x40014000
 8006610:	40014400 	.word	0x40014400

08006614 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006614:	b480      	push	{r7}
 8006616:	b087      	sub	sp, #28
 8006618:	af00      	add	r7, sp, #0
 800661a:	60f8      	str	r0, [r7, #12]
 800661c:	60b9      	str	r1, [r7, #8]
 800661e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	6a1b      	ldr	r3, [r3, #32]
 8006624:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	6a1b      	ldr	r3, [r3, #32]
 800662a:	f023 0201 	bic.w	r2, r3, #1
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	699b      	ldr	r3, [r3, #24]
 8006636:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006638:	693b      	ldr	r3, [r7, #16]
 800663a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800663e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	011b      	lsls	r3, r3, #4
 8006644:	693a      	ldr	r2, [r7, #16]
 8006646:	4313      	orrs	r3, r2
 8006648:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800664a:	697b      	ldr	r3, [r7, #20]
 800664c:	f023 030a 	bic.w	r3, r3, #10
 8006650:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006652:	697a      	ldr	r2, [r7, #20]
 8006654:	68bb      	ldr	r3, [r7, #8]
 8006656:	4313      	orrs	r3, r2
 8006658:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	693a      	ldr	r2, [r7, #16]
 800665e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	697a      	ldr	r2, [r7, #20]
 8006664:	621a      	str	r2, [r3, #32]
}
 8006666:	bf00      	nop
 8006668:	371c      	adds	r7, #28
 800666a:	46bd      	mov	sp, r7
 800666c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006670:	4770      	bx	lr

08006672 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006672:	b480      	push	{r7}
 8006674:	b087      	sub	sp, #28
 8006676:	af00      	add	r7, sp, #0
 8006678:	60f8      	str	r0, [r7, #12]
 800667a:	60b9      	str	r1, [r7, #8]
 800667c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	6a1b      	ldr	r3, [r3, #32]
 8006682:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	6a1b      	ldr	r3, [r3, #32]
 8006688:	f023 0210 	bic.w	r2, r3, #16
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	699b      	ldr	r3, [r3, #24]
 8006694:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006696:	693b      	ldr	r3, [r7, #16]
 8006698:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800669c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	031b      	lsls	r3, r3, #12
 80066a2:	693a      	ldr	r2, [r7, #16]
 80066a4:	4313      	orrs	r3, r2
 80066a6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80066a8:	697b      	ldr	r3, [r7, #20]
 80066aa:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80066ae:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80066b0:	68bb      	ldr	r3, [r7, #8]
 80066b2:	011b      	lsls	r3, r3, #4
 80066b4:	697a      	ldr	r2, [r7, #20]
 80066b6:	4313      	orrs	r3, r2
 80066b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	693a      	ldr	r2, [r7, #16]
 80066be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	697a      	ldr	r2, [r7, #20]
 80066c4:	621a      	str	r2, [r3, #32]
}
 80066c6:	bf00      	nop
 80066c8:	371c      	adds	r7, #28
 80066ca:	46bd      	mov	sp, r7
 80066cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d0:	4770      	bx	lr

080066d2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80066d2:	b480      	push	{r7}
 80066d4:	b085      	sub	sp, #20
 80066d6:	af00      	add	r7, sp, #0
 80066d8:	6078      	str	r0, [r7, #4]
 80066da:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	689b      	ldr	r3, [r3, #8]
 80066e0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80066e8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80066ea:	683a      	ldr	r2, [r7, #0]
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	4313      	orrs	r3, r2
 80066f0:	f043 0307 	orr.w	r3, r3, #7
 80066f4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	68fa      	ldr	r2, [r7, #12]
 80066fa:	609a      	str	r2, [r3, #8]
}
 80066fc:	bf00      	nop
 80066fe:	3714      	adds	r7, #20
 8006700:	46bd      	mov	sp, r7
 8006702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006706:	4770      	bx	lr

08006708 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006708:	b480      	push	{r7}
 800670a:	b087      	sub	sp, #28
 800670c:	af00      	add	r7, sp, #0
 800670e:	60f8      	str	r0, [r7, #12]
 8006710:	60b9      	str	r1, [r7, #8]
 8006712:	607a      	str	r2, [r7, #4]
 8006714:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	689b      	ldr	r3, [r3, #8]
 800671a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800671c:	697b      	ldr	r3, [r7, #20]
 800671e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006722:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006724:	683b      	ldr	r3, [r7, #0]
 8006726:	021a      	lsls	r2, r3, #8
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	431a      	orrs	r2, r3
 800672c:	68bb      	ldr	r3, [r7, #8]
 800672e:	4313      	orrs	r3, r2
 8006730:	697a      	ldr	r2, [r7, #20]
 8006732:	4313      	orrs	r3, r2
 8006734:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	697a      	ldr	r2, [r7, #20]
 800673a:	609a      	str	r2, [r3, #8]
}
 800673c:	bf00      	nop
 800673e:	371c      	adds	r7, #28
 8006740:	46bd      	mov	sp, r7
 8006742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006746:	4770      	bx	lr

08006748 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006748:	b480      	push	{r7}
 800674a:	b085      	sub	sp, #20
 800674c:	af00      	add	r7, sp, #0
 800674e:	6078      	str	r0, [r7, #4]
 8006750:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006758:	2b01      	cmp	r3, #1
 800675a:	d101      	bne.n	8006760 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800675c:	2302      	movs	r3, #2
 800675e:	e04f      	b.n	8006800 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	2201      	movs	r2, #1
 8006764:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	2202      	movs	r2, #2
 800676c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	685b      	ldr	r3, [r3, #4]
 8006776:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	689b      	ldr	r3, [r3, #8]
 800677e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	4a21      	ldr	r2, [pc, #132]	@ (800680c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8006786:	4293      	cmp	r3, r2
 8006788:	d108      	bne.n	800679c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8006790:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006792:	683b      	ldr	r3, [r7, #0]
 8006794:	685b      	ldr	r3, [r3, #4]
 8006796:	68fa      	ldr	r2, [r7, #12]
 8006798:	4313      	orrs	r3, r2
 800679a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80067a2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80067a4:	683b      	ldr	r3, [r7, #0]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	68fa      	ldr	r2, [r7, #12]
 80067aa:	4313      	orrs	r3, r2
 80067ac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	68fa      	ldr	r2, [r7, #12]
 80067b4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	4a14      	ldr	r2, [pc, #80]	@ (800680c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80067bc:	4293      	cmp	r3, r2
 80067be:	d009      	beq.n	80067d4 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80067c8:	d004      	beq.n	80067d4 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	4a10      	ldr	r2, [pc, #64]	@ (8006810 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80067d0:	4293      	cmp	r3, r2
 80067d2:	d10c      	bne.n	80067ee <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80067d4:	68bb      	ldr	r3, [r7, #8]
 80067d6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80067da:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80067dc:	683b      	ldr	r3, [r7, #0]
 80067de:	689b      	ldr	r3, [r3, #8]
 80067e0:	68ba      	ldr	r2, [r7, #8]
 80067e2:	4313      	orrs	r3, r2
 80067e4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	68ba      	ldr	r2, [r7, #8]
 80067ec:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	2201      	movs	r2, #1
 80067f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	2200      	movs	r2, #0
 80067fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80067fe:	2300      	movs	r3, #0
}
 8006800:	4618      	mov	r0, r3
 8006802:	3714      	adds	r7, #20
 8006804:	46bd      	mov	sp, r7
 8006806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800680a:	4770      	bx	lr
 800680c:	40012c00 	.word	0x40012c00
 8006810:	40014000 	.word	0x40014000

08006814 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006814:	b580      	push	{r7, lr}
 8006816:	b082      	sub	sp, #8
 8006818:	af00      	add	r7, sp, #0
 800681a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	2b00      	cmp	r3, #0
 8006820:	d101      	bne.n	8006826 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006822:	2301      	movs	r3, #1
 8006824:	e040      	b.n	80068a8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800682a:	2b00      	cmp	r3, #0
 800682c:	d106      	bne.n	800683c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	2200      	movs	r2, #0
 8006832:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006836:	6878      	ldr	r0, [r7, #4]
 8006838:	f7fb fc84 	bl	8002144 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	2224      	movs	r2, #36	@ 0x24
 8006840:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	681a      	ldr	r2, [r3, #0]
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	f022 0201 	bic.w	r2, r2, #1
 8006850:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006856:	2b00      	cmp	r3, #0
 8006858:	d002      	beq.n	8006860 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800685a:	6878      	ldr	r0, [r7, #4]
 800685c:	f000 fade 	bl	8006e1c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006860:	6878      	ldr	r0, [r7, #4]
 8006862:	f000 f8af 	bl	80069c4 <UART_SetConfig>
 8006866:	4603      	mov	r3, r0
 8006868:	2b01      	cmp	r3, #1
 800686a:	d101      	bne.n	8006870 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800686c:	2301      	movs	r3, #1
 800686e:	e01b      	b.n	80068a8 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	685a      	ldr	r2, [r3, #4]
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800687e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	689a      	ldr	r2, [r3, #8]
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800688e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	681a      	ldr	r2, [r3, #0]
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	f042 0201 	orr.w	r2, r2, #1
 800689e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80068a0:	6878      	ldr	r0, [r7, #4]
 80068a2:	f000 fb5d 	bl	8006f60 <UART_CheckIdleState>
 80068a6:	4603      	mov	r3, r0
}
 80068a8:	4618      	mov	r0, r3
 80068aa:	3708      	adds	r7, #8
 80068ac:	46bd      	mov	sp, r7
 80068ae:	bd80      	pop	{r7, pc}

080068b0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80068b0:	b580      	push	{r7, lr}
 80068b2:	b08a      	sub	sp, #40	@ 0x28
 80068b4:	af02      	add	r7, sp, #8
 80068b6:	60f8      	str	r0, [r7, #12]
 80068b8:	60b9      	str	r1, [r7, #8]
 80068ba:	603b      	str	r3, [r7, #0]
 80068bc:	4613      	mov	r3, r2
 80068be:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80068c4:	2b20      	cmp	r3, #32
 80068c6:	d177      	bne.n	80069b8 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80068c8:	68bb      	ldr	r3, [r7, #8]
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d002      	beq.n	80068d4 <HAL_UART_Transmit+0x24>
 80068ce:	88fb      	ldrh	r3, [r7, #6]
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d101      	bne.n	80068d8 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80068d4:	2301      	movs	r3, #1
 80068d6:	e070      	b.n	80069ba <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	2200      	movs	r2, #0
 80068dc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	2221      	movs	r2, #33	@ 0x21
 80068e4:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80068e6:	f7fb fd6d 	bl	80023c4 <HAL_GetTick>
 80068ea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	88fa      	ldrh	r2, [r7, #6]
 80068f0:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	88fa      	ldrh	r2, [r7, #6]
 80068f8:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	689b      	ldr	r3, [r3, #8]
 8006900:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006904:	d108      	bne.n	8006918 <HAL_UART_Transmit+0x68>
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	691b      	ldr	r3, [r3, #16]
 800690a:	2b00      	cmp	r3, #0
 800690c:	d104      	bne.n	8006918 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800690e:	2300      	movs	r3, #0
 8006910:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006912:	68bb      	ldr	r3, [r7, #8]
 8006914:	61bb      	str	r3, [r7, #24]
 8006916:	e003      	b.n	8006920 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8006918:	68bb      	ldr	r3, [r7, #8]
 800691a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800691c:	2300      	movs	r3, #0
 800691e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006920:	e02f      	b.n	8006982 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006922:	683b      	ldr	r3, [r7, #0]
 8006924:	9300      	str	r3, [sp, #0]
 8006926:	697b      	ldr	r3, [r7, #20]
 8006928:	2200      	movs	r2, #0
 800692a:	2180      	movs	r1, #128	@ 0x80
 800692c:	68f8      	ldr	r0, [r7, #12]
 800692e:	f000 fbbf 	bl	80070b0 <UART_WaitOnFlagUntilTimeout>
 8006932:	4603      	mov	r3, r0
 8006934:	2b00      	cmp	r3, #0
 8006936:	d004      	beq.n	8006942 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	2220      	movs	r2, #32
 800693c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800693e:	2303      	movs	r3, #3
 8006940:	e03b      	b.n	80069ba <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8006942:	69fb      	ldr	r3, [r7, #28]
 8006944:	2b00      	cmp	r3, #0
 8006946:	d10b      	bne.n	8006960 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006948:	69bb      	ldr	r3, [r7, #24]
 800694a:	881a      	ldrh	r2, [r3, #0]
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006954:	b292      	uxth	r2, r2
 8006956:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8006958:	69bb      	ldr	r3, [r7, #24]
 800695a:	3302      	adds	r3, #2
 800695c:	61bb      	str	r3, [r7, #24]
 800695e:	e007      	b.n	8006970 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006960:	69fb      	ldr	r3, [r7, #28]
 8006962:	781a      	ldrb	r2, [r3, #0]
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800696a:	69fb      	ldr	r3, [r7, #28]
 800696c:	3301      	adds	r3, #1
 800696e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8006976:	b29b      	uxth	r3, r3
 8006978:	3b01      	subs	r3, #1
 800697a:	b29a      	uxth	r2, r3
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8006988:	b29b      	uxth	r3, r3
 800698a:	2b00      	cmp	r3, #0
 800698c:	d1c9      	bne.n	8006922 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800698e:	683b      	ldr	r3, [r7, #0]
 8006990:	9300      	str	r3, [sp, #0]
 8006992:	697b      	ldr	r3, [r7, #20]
 8006994:	2200      	movs	r2, #0
 8006996:	2140      	movs	r1, #64	@ 0x40
 8006998:	68f8      	ldr	r0, [r7, #12]
 800699a:	f000 fb89 	bl	80070b0 <UART_WaitOnFlagUntilTimeout>
 800699e:	4603      	mov	r3, r0
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d004      	beq.n	80069ae <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	2220      	movs	r2, #32
 80069a8:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80069aa:	2303      	movs	r3, #3
 80069ac:	e005      	b.n	80069ba <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	2220      	movs	r2, #32
 80069b2:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80069b4:	2300      	movs	r3, #0
 80069b6:	e000      	b.n	80069ba <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 80069b8:	2302      	movs	r3, #2
  }
}
 80069ba:	4618      	mov	r0, r3
 80069bc:	3720      	adds	r7, #32
 80069be:	46bd      	mov	sp, r7
 80069c0:	bd80      	pop	{r7, pc}
	...

080069c4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80069c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80069c8:	b08a      	sub	sp, #40	@ 0x28
 80069ca:	af00      	add	r7, sp, #0
 80069cc:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80069ce:	2300      	movs	r3, #0
 80069d0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	689a      	ldr	r2, [r3, #8]
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	691b      	ldr	r3, [r3, #16]
 80069dc:	431a      	orrs	r2, r3
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	695b      	ldr	r3, [r3, #20]
 80069e2:	431a      	orrs	r2, r3
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	69db      	ldr	r3, [r3, #28]
 80069e8:	4313      	orrs	r3, r2
 80069ea:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	681a      	ldr	r2, [r3, #0]
 80069f2:	4bb4      	ldr	r3, [pc, #720]	@ (8006cc4 <UART_SetConfig+0x300>)
 80069f4:	4013      	ands	r3, r2
 80069f6:	68fa      	ldr	r2, [r7, #12]
 80069f8:	6812      	ldr	r2, [r2, #0]
 80069fa:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80069fc:	430b      	orrs	r3, r1
 80069fe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	685b      	ldr	r3, [r3, #4]
 8006a06:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	68da      	ldr	r2, [r3, #12]
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	430a      	orrs	r2, r1
 8006a14:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	699b      	ldr	r3, [r3, #24]
 8006a1a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	4aa9      	ldr	r2, [pc, #676]	@ (8006cc8 <UART_SetConfig+0x304>)
 8006a22:	4293      	cmp	r3, r2
 8006a24:	d004      	beq.n	8006a30 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	6a1b      	ldr	r3, [r3, #32]
 8006a2a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006a2c:	4313      	orrs	r3, r2
 8006a2e:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	689b      	ldr	r3, [r3, #8]
 8006a36:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006a40:	430a      	orrs	r2, r1
 8006a42:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	4aa0      	ldr	r2, [pc, #640]	@ (8006ccc <UART_SetConfig+0x308>)
 8006a4a:	4293      	cmp	r3, r2
 8006a4c:	d126      	bne.n	8006a9c <UART_SetConfig+0xd8>
 8006a4e:	4ba0      	ldr	r3, [pc, #640]	@ (8006cd0 <UART_SetConfig+0x30c>)
 8006a50:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a54:	f003 0303 	and.w	r3, r3, #3
 8006a58:	2b03      	cmp	r3, #3
 8006a5a:	d81b      	bhi.n	8006a94 <UART_SetConfig+0xd0>
 8006a5c:	a201      	add	r2, pc, #4	@ (adr r2, 8006a64 <UART_SetConfig+0xa0>)
 8006a5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a62:	bf00      	nop
 8006a64:	08006a75 	.word	0x08006a75
 8006a68:	08006a85 	.word	0x08006a85
 8006a6c:	08006a7d 	.word	0x08006a7d
 8006a70:	08006a8d 	.word	0x08006a8d
 8006a74:	2301      	movs	r3, #1
 8006a76:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006a7a:	e080      	b.n	8006b7e <UART_SetConfig+0x1ba>
 8006a7c:	2302      	movs	r3, #2
 8006a7e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006a82:	e07c      	b.n	8006b7e <UART_SetConfig+0x1ba>
 8006a84:	2304      	movs	r3, #4
 8006a86:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006a8a:	e078      	b.n	8006b7e <UART_SetConfig+0x1ba>
 8006a8c:	2308      	movs	r3, #8
 8006a8e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006a92:	e074      	b.n	8006b7e <UART_SetConfig+0x1ba>
 8006a94:	2310      	movs	r3, #16
 8006a96:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006a9a:	e070      	b.n	8006b7e <UART_SetConfig+0x1ba>
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	4a8c      	ldr	r2, [pc, #560]	@ (8006cd4 <UART_SetConfig+0x310>)
 8006aa2:	4293      	cmp	r3, r2
 8006aa4:	d138      	bne.n	8006b18 <UART_SetConfig+0x154>
 8006aa6:	4b8a      	ldr	r3, [pc, #552]	@ (8006cd0 <UART_SetConfig+0x30c>)
 8006aa8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006aac:	f003 030c 	and.w	r3, r3, #12
 8006ab0:	2b0c      	cmp	r3, #12
 8006ab2:	d82d      	bhi.n	8006b10 <UART_SetConfig+0x14c>
 8006ab4:	a201      	add	r2, pc, #4	@ (adr r2, 8006abc <UART_SetConfig+0xf8>)
 8006ab6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006aba:	bf00      	nop
 8006abc:	08006af1 	.word	0x08006af1
 8006ac0:	08006b11 	.word	0x08006b11
 8006ac4:	08006b11 	.word	0x08006b11
 8006ac8:	08006b11 	.word	0x08006b11
 8006acc:	08006b01 	.word	0x08006b01
 8006ad0:	08006b11 	.word	0x08006b11
 8006ad4:	08006b11 	.word	0x08006b11
 8006ad8:	08006b11 	.word	0x08006b11
 8006adc:	08006af9 	.word	0x08006af9
 8006ae0:	08006b11 	.word	0x08006b11
 8006ae4:	08006b11 	.word	0x08006b11
 8006ae8:	08006b11 	.word	0x08006b11
 8006aec:	08006b09 	.word	0x08006b09
 8006af0:	2300      	movs	r3, #0
 8006af2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006af6:	e042      	b.n	8006b7e <UART_SetConfig+0x1ba>
 8006af8:	2302      	movs	r3, #2
 8006afa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006afe:	e03e      	b.n	8006b7e <UART_SetConfig+0x1ba>
 8006b00:	2304      	movs	r3, #4
 8006b02:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006b06:	e03a      	b.n	8006b7e <UART_SetConfig+0x1ba>
 8006b08:	2308      	movs	r3, #8
 8006b0a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006b0e:	e036      	b.n	8006b7e <UART_SetConfig+0x1ba>
 8006b10:	2310      	movs	r3, #16
 8006b12:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006b16:	e032      	b.n	8006b7e <UART_SetConfig+0x1ba>
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	4a6a      	ldr	r2, [pc, #424]	@ (8006cc8 <UART_SetConfig+0x304>)
 8006b1e:	4293      	cmp	r3, r2
 8006b20:	d12a      	bne.n	8006b78 <UART_SetConfig+0x1b4>
 8006b22:	4b6b      	ldr	r3, [pc, #428]	@ (8006cd0 <UART_SetConfig+0x30c>)
 8006b24:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b28:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006b2c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006b30:	d01a      	beq.n	8006b68 <UART_SetConfig+0x1a4>
 8006b32:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006b36:	d81b      	bhi.n	8006b70 <UART_SetConfig+0x1ac>
 8006b38:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006b3c:	d00c      	beq.n	8006b58 <UART_SetConfig+0x194>
 8006b3e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006b42:	d815      	bhi.n	8006b70 <UART_SetConfig+0x1ac>
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d003      	beq.n	8006b50 <UART_SetConfig+0x18c>
 8006b48:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006b4c:	d008      	beq.n	8006b60 <UART_SetConfig+0x19c>
 8006b4e:	e00f      	b.n	8006b70 <UART_SetConfig+0x1ac>
 8006b50:	2300      	movs	r3, #0
 8006b52:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006b56:	e012      	b.n	8006b7e <UART_SetConfig+0x1ba>
 8006b58:	2302      	movs	r3, #2
 8006b5a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006b5e:	e00e      	b.n	8006b7e <UART_SetConfig+0x1ba>
 8006b60:	2304      	movs	r3, #4
 8006b62:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006b66:	e00a      	b.n	8006b7e <UART_SetConfig+0x1ba>
 8006b68:	2308      	movs	r3, #8
 8006b6a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006b6e:	e006      	b.n	8006b7e <UART_SetConfig+0x1ba>
 8006b70:	2310      	movs	r3, #16
 8006b72:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006b76:	e002      	b.n	8006b7e <UART_SetConfig+0x1ba>
 8006b78:	2310      	movs	r3, #16
 8006b7a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	4a51      	ldr	r2, [pc, #324]	@ (8006cc8 <UART_SetConfig+0x304>)
 8006b84:	4293      	cmp	r3, r2
 8006b86:	d17a      	bne.n	8006c7e <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006b88:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006b8c:	2b08      	cmp	r3, #8
 8006b8e:	d824      	bhi.n	8006bda <UART_SetConfig+0x216>
 8006b90:	a201      	add	r2, pc, #4	@ (adr r2, 8006b98 <UART_SetConfig+0x1d4>)
 8006b92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b96:	bf00      	nop
 8006b98:	08006bbd 	.word	0x08006bbd
 8006b9c:	08006bdb 	.word	0x08006bdb
 8006ba0:	08006bc5 	.word	0x08006bc5
 8006ba4:	08006bdb 	.word	0x08006bdb
 8006ba8:	08006bcb 	.word	0x08006bcb
 8006bac:	08006bdb 	.word	0x08006bdb
 8006bb0:	08006bdb 	.word	0x08006bdb
 8006bb4:	08006bdb 	.word	0x08006bdb
 8006bb8:	08006bd3 	.word	0x08006bd3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006bbc:	f7fe ffc8 	bl	8005b50 <HAL_RCC_GetPCLK1Freq>
 8006bc0:	61f8      	str	r0, [r7, #28]
        break;
 8006bc2:	e010      	b.n	8006be6 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006bc4:	4b44      	ldr	r3, [pc, #272]	@ (8006cd8 <UART_SetConfig+0x314>)
 8006bc6:	61fb      	str	r3, [r7, #28]
        break;
 8006bc8:	e00d      	b.n	8006be6 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006bca:	f7fe ff29 	bl	8005a20 <HAL_RCC_GetSysClockFreq>
 8006bce:	61f8      	str	r0, [r7, #28]
        break;
 8006bd0:	e009      	b.n	8006be6 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006bd2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006bd6:	61fb      	str	r3, [r7, #28]
        break;
 8006bd8:	e005      	b.n	8006be6 <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 8006bda:	2300      	movs	r3, #0
 8006bdc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006bde:	2301      	movs	r3, #1
 8006be0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8006be4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006be6:	69fb      	ldr	r3, [r7, #28]
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	f000 8107 	beq.w	8006dfc <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	685a      	ldr	r2, [r3, #4]
 8006bf2:	4613      	mov	r3, r2
 8006bf4:	005b      	lsls	r3, r3, #1
 8006bf6:	4413      	add	r3, r2
 8006bf8:	69fa      	ldr	r2, [r7, #28]
 8006bfa:	429a      	cmp	r2, r3
 8006bfc:	d305      	bcc.n	8006c0a <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	685b      	ldr	r3, [r3, #4]
 8006c02:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006c04:	69fa      	ldr	r2, [r7, #28]
 8006c06:	429a      	cmp	r2, r3
 8006c08:	d903      	bls.n	8006c12 <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 8006c0a:	2301      	movs	r3, #1
 8006c0c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006c10:	e0f4      	b.n	8006dfc <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006c12:	69fb      	ldr	r3, [r7, #28]
 8006c14:	2200      	movs	r2, #0
 8006c16:	461c      	mov	r4, r3
 8006c18:	4615      	mov	r5, r2
 8006c1a:	f04f 0200 	mov.w	r2, #0
 8006c1e:	f04f 0300 	mov.w	r3, #0
 8006c22:	022b      	lsls	r3, r5, #8
 8006c24:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8006c28:	0222      	lsls	r2, r4, #8
 8006c2a:	68f9      	ldr	r1, [r7, #12]
 8006c2c:	6849      	ldr	r1, [r1, #4]
 8006c2e:	0849      	lsrs	r1, r1, #1
 8006c30:	2000      	movs	r0, #0
 8006c32:	4688      	mov	r8, r1
 8006c34:	4681      	mov	r9, r0
 8006c36:	eb12 0a08 	adds.w	sl, r2, r8
 8006c3a:	eb43 0b09 	adc.w	fp, r3, r9
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	685b      	ldr	r3, [r3, #4]
 8006c42:	2200      	movs	r2, #0
 8006c44:	603b      	str	r3, [r7, #0]
 8006c46:	607a      	str	r2, [r7, #4]
 8006c48:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006c4c:	4650      	mov	r0, sl
 8006c4e:	4659      	mov	r1, fp
 8006c50:	f7f9 ff22 	bl	8000a98 <__aeabi_uldivmod>
 8006c54:	4602      	mov	r2, r0
 8006c56:	460b      	mov	r3, r1
 8006c58:	4613      	mov	r3, r2
 8006c5a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006c5c:	69bb      	ldr	r3, [r7, #24]
 8006c5e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006c62:	d308      	bcc.n	8006c76 <UART_SetConfig+0x2b2>
 8006c64:	69bb      	ldr	r3, [r7, #24]
 8006c66:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006c6a:	d204      	bcs.n	8006c76 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	69ba      	ldr	r2, [r7, #24]
 8006c72:	60da      	str	r2, [r3, #12]
 8006c74:	e0c2      	b.n	8006dfc <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 8006c76:	2301      	movs	r3, #1
 8006c78:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006c7c:	e0be      	b.n	8006dfc <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	69db      	ldr	r3, [r3, #28]
 8006c82:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006c86:	d16a      	bne.n	8006d5e <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8006c88:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006c8c:	2b08      	cmp	r3, #8
 8006c8e:	d834      	bhi.n	8006cfa <UART_SetConfig+0x336>
 8006c90:	a201      	add	r2, pc, #4	@ (adr r2, 8006c98 <UART_SetConfig+0x2d4>)
 8006c92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c96:	bf00      	nop
 8006c98:	08006cbd 	.word	0x08006cbd
 8006c9c:	08006cdd 	.word	0x08006cdd
 8006ca0:	08006ce5 	.word	0x08006ce5
 8006ca4:	08006cfb 	.word	0x08006cfb
 8006ca8:	08006ceb 	.word	0x08006ceb
 8006cac:	08006cfb 	.word	0x08006cfb
 8006cb0:	08006cfb 	.word	0x08006cfb
 8006cb4:	08006cfb 	.word	0x08006cfb
 8006cb8:	08006cf3 	.word	0x08006cf3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006cbc:	f7fe ff48 	bl	8005b50 <HAL_RCC_GetPCLK1Freq>
 8006cc0:	61f8      	str	r0, [r7, #28]
        break;
 8006cc2:	e020      	b.n	8006d06 <UART_SetConfig+0x342>
 8006cc4:	efff69f3 	.word	0xefff69f3
 8006cc8:	40008000 	.word	0x40008000
 8006ccc:	40013800 	.word	0x40013800
 8006cd0:	40021000 	.word	0x40021000
 8006cd4:	40004400 	.word	0x40004400
 8006cd8:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006cdc:	f7fe ff4e 	bl	8005b7c <HAL_RCC_GetPCLK2Freq>
 8006ce0:	61f8      	str	r0, [r7, #28]
        break;
 8006ce2:	e010      	b.n	8006d06 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006ce4:	4b4c      	ldr	r3, [pc, #304]	@ (8006e18 <UART_SetConfig+0x454>)
 8006ce6:	61fb      	str	r3, [r7, #28]
        break;
 8006ce8:	e00d      	b.n	8006d06 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006cea:	f7fe fe99 	bl	8005a20 <HAL_RCC_GetSysClockFreq>
 8006cee:	61f8      	str	r0, [r7, #28]
        break;
 8006cf0:	e009      	b.n	8006d06 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006cf2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006cf6:	61fb      	str	r3, [r7, #28]
        break;
 8006cf8:	e005      	b.n	8006d06 <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 8006cfa:	2300      	movs	r3, #0
 8006cfc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006cfe:	2301      	movs	r3, #1
 8006d00:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8006d04:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006d06:	69fb      	ldr	r3, [r7, #28]
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d077      	beq.n	8006dfc <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006d0c:	69fb      	ldr	r3, [r7, #28]
 8006d0e:	005a      	lsls	r2, r3, #1
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	685b      	ldr	r3, [r3, #4]
 8006d14:	085b      	lsrs	r3, r3, #1
 8006d16:	441a      	add	r2, r3
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	685b      	ldr	r3, [r3, #4]
 8006d1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d20:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006d22:	69bb      	ldr	r3, [r7, #24]
 8006d24:	2b0f      	cmp	r3, #15
 8006d26:	d916      	bls.n	8006d56 <UART_SetConfig+0x392>
 8006d28:	69bb      	ldr	r3, [r7, #24]
 8006d2a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006d2e:	d212      	bcs.n	8006d56 <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006d30:	69bb      	ldr	r3, [r7, #24]
 8006d32:	b29b      	uxth	r3, r3
 8006d34:	f023 030f 	bic.w	r3, r3, #15
 8006d38:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006d3a:	69bb      	ldr	r3, [r7, #24]
 8006d3c:	085b      	lsrs	r3, r3, #1
 8006d3e:	b29b      	uxth	r3, r3
 8006d40:	f003 0307 	and.w	r3, r3, #7
 8006d44:	b29a      	uxth	r2, r3
 8006d46:	8afb      	ldrh	r3, [r7, #22]
 8006d48:	4313      	orrs	r3, r2
 8006d4a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	8afa      	ldrh	r2, [r7, #22]
 8006d52:	60da      	str	r2, [r3, #12]
 8006d54:	e052      	b.n	8006dfc <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8006d56:	2301      	movs	r3, #1
 8006d58:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006d5c:	e04e      	b.n	8006dfc <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006d5e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006d62:	2b08      	cmp	r3, #8
 8006d64:	d827      	bhi.n	8006db6 <UART_SetConfig+0x3f2>
 8006d66:	a201      	add	r2, pc, #4	@ (adr r2, 8006d6c <UART_SetConfig+0x3a8>)
 8006d68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d6c:	08006d91 	.word	0x08006d91
 8006d70:	08006d99 	.word	0x08006d99
 8006d74:	08006da1 	.word	0x08006da1
 8006d78:	08006db7 	.word	0x08006db7
 8006d7c:	08006da7 	.word	0x08006da7
 8006d80:	08006db7 	.word	0x08006db7
 8006d84:	08006db7 	.word	0x08006db7
 8006d88:	08006db7 	.word	0x08006db7
 8006d8c:	08006daf 	.word	0x08006daf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006d90:	f7fe fede 	bl	8005b50 <HAL_RCC_GetPCLK1Freq>
 8006d94:	61f8      	str	r0, [r7, #28]
        break;
 8006d96:	e014      	b.n	8006dc2 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006d98:	f7fe fef0 	bl	8005b7c <HAL_RCC_GetPCLK2Freq>
 8006d9c:	61f8      	str	r0, [r7, #28]
        break;
 8006d9e:	e010      	b.n	8006dc2 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006da0:	4b1d      	ldr	r3, [pc, #116]	@ (8006e18 <UART_SetConfig+0x454>)
 8006da2:	61fb      	str	r3, [r7, #28]
        break;
 8006da4:	e00d      	b.n	8006dc2 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006da6:	f7fe fe3b 	bl	8005a20 <HAL_RCC_GetSysClockFreq>
 8006daa:	61f8      	str	r0, [r7, #28]
        break;
 8006dac:	e009      	b.n	8006dc2 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006dae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006db2:	61fb      	str	r3, [r7, #28]
        break;
 8006db4:	e005      	b.n	8006dc2 <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 8006db6:	2300      	movs	r3, #0
 8006db8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006dba:	2301      	movs	r3, #1
 8006dbc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8006dc0:	bf00      	nop
    }

    if (pclk != 0U)
 8006dc2:	69fb      	ldr	r3, [r7, #28]
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d019      	beq.n	8006dfc <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	685b      	ldr	r3, [r3, #4]
 8006dcc:	085a      	lsrs	r2, r3, #1
 8006dce:	69fb      	ldr	r3, [r7, #28]
 8006dd0:	441a      	add	r2, r3
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	685b      	ldr	r3, [r3, #4]
 8006dd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8006dda:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006ddc:	69bb      	ldr	r3, [r7, #24]
 8006dde:	2b0f      	cmp	r3, #15
 8006de0:	d909      	bls.n	8006df6 <UART_SetConfig+0x432>
 8006de2:	69bb      	ldr	r3, [r7, #24]
 8006de4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006de8:	d205      	bcs.n	8006df6 <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006dea:	69bb      	ldr	r3, [r7, #24]
 8006dec:	b29a      	uxth	r2, r3
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	60da      	str	r2, [r3, #12]
 8006df4:	e002      	b.n	8006dfc <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8006df6:	2301      	movs	r3, #1
 8006df8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	2200      	movs	r2, #0
 8006e00:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	2200      	movs	r2, #0
 8006e06:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8006e08:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8006e0c:	4618      	mov	r0, r3
 8006e0e:	3728      	adds	r7, #40	@ 0x28
 8006e10:	46bd      	mov	sp, r7
 8006e12:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006e16:	bf00      	nop
 8006e18:	00f42400 	.word	0x00f42400

08006e1c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006e1c:	b480      	push	{r7}
 8006e1e:	b083      	sub	sp, #12
 8006e20:	af00      	add	r7, sp, #0
 8006e22:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e28:	f003 0308 	and.w	r3, r3, #8
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d00a      	beq.n	8006e46 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	685b      	ldr	r3, [r3, #4]
 8006e36:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	430a      	orrs	r2, r1
 8006e44:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e4a:	f003 0301 	and.w	r3, r3, #1
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d00a      	beq.n	8006e68 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	685b      	ldr	r3, [r3, #4]
 8006e58:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	430a      	orrs	r2, r1
 8006e66:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e6c:	f003 0302 	and.w	r3, r3, #2
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d00a      	beq.n	8006e8a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	685b      	ldr	r3, [r3, #4]
 8006e7a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	430a      	orrs	r2, r1
 8006e88:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e8e:	f003 0304 	and.w	r3, r3, #4
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d00a      	beq.n	8006eac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	685b      	ldr	r3, [r3, #4]
 8006e9c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	430a      	orrs	r2, r1
 8006eaa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006eb0:	f003 0310 	and.w	r3, r3, #16
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d00a      	beq.n	8006ece <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	689b      	ldr	r3, [r3, #8]
 8006ebe:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	430a      	orrs	r2, r1
 8006ecc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ed2:	f003 0320 	and.w	r3, r3, #32
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d00a      	beq.n	8006ef0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	689b      	ldr	r3, [r3, #8]
 8006ee0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	430a      	orrs	r2, r1
 8006eee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ef4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d01a      	beq.n	8006f32 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	685b      	ldr	r3, [r3, #4]
 8006f02:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	430a      	orrs	r2, r1
 8006f10:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f16:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006f1a:	d10a      	bne.n	8006f32 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	685b      	ldr	r3, [r3, #4]
 8006f22:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	430a      	orrs	r2, r1
 8006f30:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f36:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d00a      	beq.n	8006f54 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	685b      	ldr	r3, [r3, #4]
 8006f44:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	430a      	orrs	r2, r1
 8006f52:	605a      	str	r2, [r3, #4]
  }
}
 8006f54:	bf00      	nop
 8006f56:	370c      	adds	r7, #12
 8006f58:	46bd      	mov	sp, r7
 8006f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f5e:	4770      	bx	lr

08006f60 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006f60:	b580      	push	{r7, lr}
 8006f62:	b098      	sub	sp, #96	@ 0x60
 8006f64:	af02      	add	r7, sp, #8
 8006f66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	2200      	movs	r2, #0
 8006f6c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006f70:	f7fb fa28 	bl	80023c4 <HAL_GetTick>
 8006f74:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	f003 0308 	and.w	r3, r3, #8
 8006f80:	2b08      	cmp	r3, #8
 8006f82:	d12e      	bne.n	8006fe2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006f84:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006f88:	9300      	str	r3, [sp, #0]
 8006f8a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006f8c:	2200      	movs	r2, #0
 8006f8e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006f92:	6878      	ldr	r0, [r7, #4]
 8006f94:	f000 f88c 	bl	80070b0 <UART_WaitOnFlagUntilTimeout>
 8006f98:	4603      	mov	r3, r0
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d021      	beq.n	8006fe2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fa4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006fa6:	e853 3f00 	ldrex	r3, [r3]
 8006faa:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006fac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006fae:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006fb2:	653b      	str	r3, [r7, #80]	@ 0x50
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	461a      	mov	r2, r3
 8006fba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006fbc:	647b      	str	r3, [r7, #68]	@ 0x44
 8006fbe:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fc0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006fc2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006fc4:	e841 2300 	strex	r3, r2, [r1]
 8006fc8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006fca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d1e6      	bne.n	8006f9e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	2220      	movs	r2, #32
 8006fd4:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	2200      	movs	r2, #0
 8006fda:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006fde:	2303      	movs	r3, #3
 8006fe0:	e062      	b.n	80070a8 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	f003 0304 	and.w	r3, r3, #4
 8006fec:	2b04      	cmp	r3, #4
 8006fee:	d149      	bne.n	8007084 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006ff0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006ff4:	9300      	str	r3, [sp, #0]
 8006ff6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006ff8:	2200      	movs	r2, #0
 8006ffa:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006ffe:	6878      	ldr	r0, [r7, #4]
 8007000:	f000 f856 	bl	80070b0 <UART_WaitOnFlagUntilTimeout>
 8007004:	4603      	mov	r3, r0
 8007006:	2b00      	cmp	r3, #0
 8007008:	d03c      	beq.n	8007084 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007010:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007012:	e853 3f00 	ldrex	r3, [r3]
 8007016:	623b      	str	r3, [r7, #32]
   return(result);
 8007018:	6a3b      	ldr	r3, [r7, #32]
 800701a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800701e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	461a      	mov	r2, r3
 8007026:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007028:	633b      	str	r3, [r7, #48]	@ 0x30
 800702a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800702c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800702e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007030:	e841 2300 	strex	r3, r2, [r1]
 8007034:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007036:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007038:	2b00      	cmp	r3, #0
 800703a:	d1e6      	bne.n	800700a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	3308      	adds	r3, #8
 8007042:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007044:	693b      	ldr	r3, [r7, #16]
 8007046:	e853 3f00 	ldrex	r3, [r3]
 800704a:	60fb      	str	r3, [r7, #12]
   return(result);
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	f023 0301 	bic.w	r3, r3, #1
 8007052:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	3308      	adds	r3, #8
 800705a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800705c:	61fa      	str	r2, [r7, #28]
 800705e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007060:	69b9      	ldr	r1, [r7, #24]
 8007062:	69fa      	ldr	r2, [r7, #28]
 8007064:	e841 2300 	strex	r3, r2, [r1]
 8007068:	617b      	str	r3, [r7, #20]
   return(result);
 800706a:	697b      	ldr	r3, [r7, #20]
 800706c:	2b00      	cmp	r3, #0
 800706e:	d1e5      	bne.n	800703c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	2220      	movs	r2, #32
 8007074:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	2200      	movs	r2, #0
 800707c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007080:	2303      	movs	r3, #3
 8007082:	e011      	b.n	80070a8 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	2220      	movs	r2, #32
 8007088:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	2220      	movs	r2, #32
 800708e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	2200      	movs	r2, #0
 8007096:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	2200      	movs	r2, #0
 800709c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	2200      	movs	r2, #0
 80070a2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80070a6:	2300      	movs	r3, #0
}
 80070a8:	4618      	mov	r0, r3
 80070aa:	3758      	adds	r7, #88	@ 0x58
 80070ac:	46bd      	mov	sp, r7
 80070ae:	bd80      	pop	{r7, pc}

080070b0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80070b0:	b580      	push	{r7, lr}
 80070b2:	b084      	sub	sp, #16
 80070b4:	af00      	add	r7, sp, #0
 80070b6:	60f8      	str	r0, [r7, #12]
 80070b8:	60b9      	str	r1, [r7, #8]
 80070ba:	603b      	str	r3, [r7, #0]
 80070bc:	4613      	mov	r3, r2
 80070be:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80070c0:	e04f      	b.n	8007162 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80070c2:	69bb      	ldr	r3, [r7, #24]
 80070c4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80070c8:	d04b      	beq.n	8007162 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80070ca:	f7fb f97b 	bl	80023c4 <HAL_GetTick>
 80070ce:	4602      	mov	r2, r0
 80070d0:	683b      	ldr	r3, [r7, #0]
 80070d2:	1ad3      	subs	r3, r2, r3
 80070d4:	69ba      	ldr	r2, [r7, #24]
 80070d6:	429a      	cmp	r2, r3
 80070d8:	d302      	bcc.n	80070e0 <UART_WaitOnFlagUntilTimeout+0x30>
 80070da:	69bb      	ldr	r3, [r7, #24]
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d101      	bne.n	80070e4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80070e0:	2303      	movs	r3, #3
 80070e2:	e04e      	b.n	8007182 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	f003 0304 	and.w	r3, r3, #4
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d037      	beq.n	8007162 <UART_WaitOnFlagUntilTimeout+0xb2>
 80070f2:	68bb      	ldr	r3, [r7, #8]
 80070f4:	2b80      	cmp	r3, #128	@ 0x80
 80070f6:	d034      	beq.n	8007162 <UART_WaitOnFlagUntilTimeout+0xb2>
 80070f8:	68bb      	ldr	r3, [r7, #8]
 80070fa:	2b40      	cmp	r3, #64	@ 0x40
 80070fc:	d031      	beq.n	8007162 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	69db      	ldr	r3, [r3, #28]
 8007104:	f003 0308 	and.w	r3, r3, #8
 8007108:	2b08      	cmp	r3, #8
 800710a:	d110      	bne.n	800712e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	2208      	movs	r2, #8
 8007112:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007114:	68f8      	ldr	r0, [r7, #12]
 8007116:	f000 f838 	bl	800718a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	2208      	movs	r2, #8
 800711e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	2200      	movs	r2, #0
 8007126:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800712a:	2301      	movs	r3, #1
 800712c:	e029      	b.n	8007182 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	69db      	ldr	r3, [r3, #28]
 8007134:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007138:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800713c:	d111      	bne.n	8007162 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007146:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007148:	68f8      	ldr	r0, [r7, #12]
 800714a:	f000 f81e 	bl	800718a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	2220      	movs	r2, #32
 8007152:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	2200      	movs	r2, #0
 800715a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800715e:	2303      	movs	r3, #3
 8007160:	e00f      	b.n	8007182 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	69da      	ldr	r2, [r3, #28]
 8007168:	68bb      	ldr	r3, [r7, #8]
 800716a:	4013      	ands	r3, r2
 800716c:	68ba      	ldr	r2, [r7, #8]
 800716e:	429a      	cmp	r2, r3
 8007170:	bf0c      	ite	eq
 8007172:	2301      	moveq	r3, #1
 8007174:	2300      	movne	r3, #0
 8007176:	b2db      	uxtb	r3, r3
 8007178:	461a      	mov	r2, r3
 800717a:	79fb      	ldrb	r3, [r7, #7]
 800717c:	429a      	cmp	r2, r3
 800717e:	d0a0      	beq.n	80070c2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007180:	2300      	movs	r3, #0
}
 8007182:	4618      	mov	r0, r3
 8007184:	3710      	adds	r7, #16
 8007186:	46bd      	mov	sp, r7
 8007188:	bd80      	pop	{r7, pc}

0800718a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800718a:	b480      	push	{r7}
 800718c:	b095      	sub	sp, #84	@ 0x54
 800718e:	af00      	add	r7, sp, #0
 8007190:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007198:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800719a:	e853 3f00 	ldrex	r3, [r3]
 800719e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80071a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071a2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80071a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	461a      	mov	r2, r3
 80071ae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80071b0:	643b      	str	r3, [r7, #64]	@ 0x40
 80071b2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071b4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80071b6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80071b8:	e841 2300 	strex	r3, r2, [r1]
 80071bc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80071be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d1e6      	bne.n	8007192 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	3308      	adds	r3, #8
 80071ca:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071cc:	6a3b      	ldr	r3, [r7, #32]
 80071ce:	e853 3f00 	ldrex	r3, [r3]
 80071d2:	61fb      	str	r3, [r7, #28]
   return(result);
 80071d4:	69fb      	ldr	r3, [r7, #28]
 80071d6:	f023 0301 	bic.w	r3, r3, #1
 80071da:	64bb      	str	r3, [r7, #72]	@ 0x48
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	3308      	adds	r3, #8
 80071e2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80071e4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80071e6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071e8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80071ea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80071ec:	e841 2300 	strex	r3, r2, [r1]
 80071f0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80071f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d1e5      	bne.n	80071c4 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80071fc:	2b01      	cmp	r3, #1
 80071fe:	d118      	bne.n	8007232 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	e853 3f00 	ldrex	r3, [r3]
 800720c:	60bb      	str	r3, [r7, #8]
   return(result);
 800720e:	68bb      	ldr	r3, [r7, #8]
 8007210:	f023 0310 	bic.w	r3, r3, #16
 8007214:	647b      	str	r3, [r7, #68]	@ 0x44
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	461a      	mov	r2, r3
 800721c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800721e:	61bb      	str	r3, [r7, #24]
 8007220:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007222:	6979      	ldr	r1, [r7, #20]
 8007224:	69ba      	ldr	r2, [r7, #24]
 8007226:	e841 2300 	strex	r3, r2, [r1]
 800722a:	613b      	str	r3, [r7, #16]
   return(result);
 800722c:	693b      	ldr	r3, [r7, #16]
 800722e:	2b00      	cmp	r3, #0
 8007230:	d1e6      	bne.n	8007200 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	2220      	movs	r2, #32
 8007236:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	2200      	movs	r2, #0
 800723e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	2200      	movs	r2, #0
 8007244:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8007246:	bf00      	nop
 8007248:	3754      	adds	r7, #84	@ 0x54
 800724a:	46bd      	mov	sp, r7
 800724c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007250:	4770      	bx	lr

08007252 <memset>:
 8007252:	4402      	add	r2, r0
 8007254:	4603      	mov	r3, r0
 8007256:	4293      	cmp	r3, r2
 8007258:	d100      	bne.n	800725c <memset+0xa>
 800725a:	4770      	bx	lr
 800725c:	f803 1b01 	strb.w	r1, [r3], #1
 8007260:	e7f9      	b.n	8007256 <memset+0x4>
	...

08007264 <__libc_init_array>:
 8007264:	b570      	push	{r4, r5, r6, lr}
 8007266:	4d0d      	ldr	r5, [pc, #52]	@ (800729c <__libc_init_array+0x38>)
 8007268:	4c0d      	ldr	r4, [pc, #52]	@ (80072a0 <__libc_init_array+0x3c>)
 800726a:	1b64      	subs	r4, r4, r5
 800726c:	10a4      	asrs	r4, r4, #2
 800726e:	2600      	movs	r6, #0
 8007270:	42a6      	cmp	r6, r4
 8007272:	d109      	bne.n	8007288 <__libc_init_array+0x24>
 8007274:	4d0b      	ldr	r5, [pc, #44]	@ (80072a4 <__libc_init_array+0x40>)
 8007276:	4c0c      	ldr	r4, [pc, #48]	@ (80072a8 <__libc_init_array+0x44>)
 8007278:	f000 f818 	bl	80072ac <_init>
 800727c:	1b64      	subs	r4, r4, r5
 800727e:	10a4      	asrs	r4, r4, #2
 8007280:	2600      	movs	r6, #0
 8007282:	42a6      	cmp	r6, r4
 8007284:	d105      	bne.n	8007292 <__libc_init_array+0x2e>
 8007286:	bd70      	pop	{r4, r5, r6, pc}
 8007288:	f855 3b04 	ldr.w	r3, [r5], #4
 800728c:	4798      	blx	r3
 800728e:	3601      	adds	r6, #1
 8007290:	e7ee      	b.n	8007270 <__libc_init_array+0xc>
 8007292:	f855 3b04 	ldr.w	r3, [r5], #4
 8007296:	4798      	blx	r3
 8007298:	3601      	adds	r6, #1
 800729a:	e7f2      	b.n	8007282 <__libc_init_array+0x1e>
 800729c:	08007314 	.word	0x08007314
 80072a0:	08007314 	.word	0x08007314
 80072a4:	08007314 	.word	0x08007314
 80072a8:	08007318 	.word	0x08007318

080072ac <_init>:
 80072ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072ae:	bf00      	nop
 80072b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80072b2:	bc08      	pop	{r3}
 80072b4:	469e      	mov	lr, r3
 80072b6:	4770      	bx	lr

080072b8 <_fini>:
 80072b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072ba:	bf00      	nop
 80072bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80072be:	bc08      	pop	{r3}
 80072c0:	469e      	mov	lr, r3
 80072c2:	4770      	bx	lr
