
weather_node_L4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000773c  0800018c  0800018c  0000118c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  080078c8  080078c8  000088c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007910  08007910  0000900c  2**0
                  CONTENTS
  4 .ARM          00000008  08007910  08007910  00008910  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007918  08007918  0000900c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007918  08007918  00008918  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800791c  0800791c  0000891c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08007920  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000027c  2000000c  0800792c  0000900c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000288  0800792c  00009288  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000900c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019a78  00000000  00000000  0000903c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000031c4  00000000  00000000  00022ab4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001728  00000000  00000000  00025c78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001227  00000000  00000000  000273a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024178  00000000  00000000  000285c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b0b3  00000000  00000000  0004c73f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e347c  00000000  00000000  000677f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0014ac6e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000064f0  00000000  00000000  0014acb4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  001511a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	@ (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	2000000c 	.word	0x2000000c
 80001a8:	00000000 	.word	0x00000000
 80001ac:	080078b0 	.word	0x080078b0

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	@ (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	@ (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	@ (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000010 	.word	0x20000010
 80001c8:	080078b0 	.word	0x080078b0

080001cc <__aeabi_drsub>:
 80001cc:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001d0:	e002      	b.n	80001d8 <__adddf3>
 80001d2:	bf00      	nop

080001d4 <__aeabi_dsub>:
 80001d4:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001d8 <__adddf3>:
 80001d8:	b530      	push	{r4, r5, lr}
 80001da:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001de:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001e2:	ea94 0f05 	teq	r4, r5
 80001e6:	bf08      	it	eq
 80001e8:	ea90 0f02 	teqeq	r0, r2
 80001ec:	bf1f      	itttt	ne
 80001ee:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001f2:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001fa:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fe:	f000 80e2 	beq.w	80003c6 <__adddf3+0x1ee>
 8000202:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000206:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800020a:	bfb8      	it	lt
 800020c:	426d      	neglt	r5, r5
 800020e:	dd0c      	ble.n	800022a <__adddf3+0x52>
 8000210:	442c      	add	r4, r5
 8000212:	ea80 0202 	eor.w	r2, r0, r2
 8000216:	ea81 0303 	eor.w	r3, r1, r3
 800021a:	ea82 0000 	eor.w	r0, r2, r0
 800021e:	ea83 0101 	eor.w	r1, r3, r1
 8000222:	ea80 0202 	eor.w	r2, r0, r2
 8000226:	ea81 0303 	eor.w	r3, r1, r3
 800022a:	2d36      	cmp	r5, #54	@ 0x36
 800022c:	bf88      	it	hi
 800022e:	bd30      	pophi	{r4, r5, pc}
 8000230:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000234:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000238:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 800023c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000240:	d002      	beq.n	8000248 <__adddf3+0x70>
 8000242:	4240      	negs	r0, r0
 8000244:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000248:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 800024c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000250:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000254:	d002      	beq.n	800025c <__adddf3+0x84>
 8000256:	4252      	negs	r2, r2
 8000258:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800025c:	ea94 0f05 	teq	r4, r5
 8000260:	f000 80a7 	beq.w	80003b2 <__adddf3+0x1da>
 8000264:	f1a4 0401 	sub.w	r4, r4, #1
 8000268:	f1d5 0e20 	rsbs	lr, r5, #32
 800026c:	db0d      	blt.n	800028a <__adddf3+0xb2>
 800026e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000272:	fa22 f205 	lsr.w	r2, r2, r5
 8000276:	1880      	adds	r0, r0, r2
 8000278:	f141 0100 	adc.w	r1, r1, #0
 800027c:	fa03 f20e 	lsl.w	r2, r3, lr
 8000280:	1880      	adds	r0, r0, r2
 8000282:	fa43 f305 	asr.w	r3, r3, r5
 8000286:	4159      	adcs	r1, r3
 8000288:	e00e      	b.n	80002a8 <__adddf3+0xd0>
 800028a:	f1a5 0520 	sub.w	r5, r5, #32
 800028e:	f10e 0e20 	add.w	lr, lr, #32
 8000292:	2a01      	cmp	r2, #1
 8000294:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000298:	bf28      	it	cs
 800029a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029e:	fa43 f305 	asr.w	r3, r3, r5
 80002a2:	18c0      	adds	r0, r0, r3
 80002a4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002ac:	d507      	bpl.n	80002be <__adddf3+0xe6>
 80002ae:	f04f 0e00 	mov.w	lr, #0
 80002b2:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b6:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002ba:	eb6e 0101 	sbc.w	r1, lr, r1
 80002be:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002c2:	d31b      	bcc.n	80002fc <__adddf3+0x124>
 80002c4:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002c8:	d30c      	bcc.n	80002e4 <__adddf3+0x10c>
 80002ca:	0849      	lsrs	r1, r1, #1
 80002cc:	ea5f 0030 	movs.w	r0, r0, rrx
 80002d0:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d4:	f104 0401 	add.w	r4, r4, #1
 80002d8:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002dc:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002e0:	f080 809a 	bcs.w	8000418 <__adddf3+0x240>
 80002e4:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002e8:	bf08      	it	eq
 80002ea:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ee:	f150 0000 	adcs.w	r0, r0, #0
 80002f2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f6:	ea41 0105 	orr.w	r1, r1, r5
 80002fa:	bd30      	pop	{r4, r5, pc}
 80002fc:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000300:	4140      	adcs	r0, r0
 8000302:	eb41 0101 	adc.w	r1, r1, r1
 8000306:	3c01      	subs	r4, #1
 8000308:	bf28      	it	cs
 800030a:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800030e:	d2e9      	bcs.n	80002e4 <__adddf3+0x10c>
 8000310:	f091 0f00 	teq	r1, #0
 8000314:	bf04      	itt	eq
 8000316:	4601      	moveq	r1, r0
 8000318:	2000      	moveq	r0, #0
 800031a:	fab1 f381 	clz	r3, r1
 800031e:	bf08      	it	eq
 8000320:	3320      	addeq	r3, #32
 8000322:	f1a3 030b 	sub.w	r3, r3, #11
 8000326:	f1b3 0220 	subs.w	r2, r3, #32
 800032a:	da0c      	bge.n	8000346 <__adddf3+0x16e>
 800032c:	320c      	adds	r2, #12
 800032e:	dd08      	ble.n	8000342 <__adddf3+0x16a>
 8000330:	f102 0c14 	add.w	ip, r2, #20
 8000334:	f1c2 020c 	rsb	r2, r2, #12
 8000338:	fa01 f00c 	lsl.w	r0, r1, ip
 800033c:	fa21 f102 	lsr.w	r1, r1, r2
 8000340:	e00c      	b.n	800035c <__adddf3+0x184>
 8000342:	f102 0214 	add.w	r2, r2, #20
 8000346:	bfd8      	it	le
 8000348:	f1c2 0c20 	rsble	ip, r2, #32
 800034c:	fa01 f102 	lsl.w	r1, r1, r2
 8000350:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000354:	bfdc      	itt	le
 8000356:	ea41 010c 	orrle.w	r1, r1, ip
 800035a:	4090      	lslle	r0, r2
 800035c:	1ae4      	subs	r4, r4, r3
 800035e:	bfa2      	ittt	ge
 8000360:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000364:	4329      	orrge	r1, r5
 8000366:	bd30      	popge	{r4, r5, pc}
 8000368:	ea6f 0404 	mvn.w	r4, r4
 800036c:	3c1f      	subs	r4, #31
 800036e:	da1c      	bge.n	80003aa <__adddf3+0x1d2>
 8000370:	340c      	adds	r4, #12
 8000372:	dc0e      	bgt.n	8000392 <__adddf3+0x1ba>
 8000374:	f104 0414 	add.w	r4, r4, #20
 8000378:	f1c4 0220 	rsb	r2, r4, #32
 800037c:	fa20 f004 	lsr.w	r0, r0, r4
 8000380:	fa01 f302 	lsl.w	r3, r1, r2
 8000384:	ea40 0003 	orr.w	r0, r0, r3
 8000388:	fa21 f304 	lsr.w	r3, r1, r4
 800038c:	ea45 0103 	orr.w	r1, r5, r3
 8000390:	bd30      	pop	{r4, r5, pc}
 8000392:	f1c4 040c 	rsb	r4, r4, #12
 8000396:	f1c4 0220 	rsb	r2, r4, #32
 800039a:	fa20 f002 	lsr.w	r0, r0, r2
 800039e:	fa01 f304 	lsl.w	r3, r1, r4
 80003a2:	ea40 0003 	orr.w	r0, r0, r3
 80003a6:	4629      	mov	r1, r5
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	fa21 f004 	lsr.w	r0, r1, r4
 80003ae:	4629      	mov	r1, r5
 80003b0:	bd30      	pop	{r4, r5, pc}
 80003b2:	f094 0f00 	teq	r4, #0
 80003b6:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003ba:	bf06      	itte	eq
 80003bc:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003c0:	3401      	addeq	r4, #1
 80003c2:	3d01      	subne	r5, #1
 80003c4:	e74e      	b.n	8000264 <__adddf3+0x8c>
 80003c6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ca:	bf18      	it	ne
 80003cc:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d0:	d029      	beq.n	8000426 <__adddf3+0x24e>
 80003d2:	ea94 0f05 	teq	r4, r5
 80003d6:	bf08      	it	eq
 80003d8:	ea90 0f02 	teqeq	r0, r2
 80003dc:	d005      	beq.n	80003ea <__adddf3+0x212>
 80003de:	ea54 0c00 	orrs.w	ip, r4, r0
 80003e2:	bf04      	itt	eq
 80003e4:	4619      	moveq	r1, r3
 80003e6:	4610      	moveq	r0, r2
 80003e8:	bd30      	pop	{r4, r5, pc}
 80003ea:	ea91 0f03 	teq	r1, r3
 80003ee:	bf1e      	ittt	ne
 80003f0:	2100      	movne	r1, #0
 80003f2:	2000      	movne	r0, #0
 80003f4:	bd30      	popne	{r4, r5, pc}
 80003f6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003fa:	d105      	bne.n	8000408 <__adddf3+0x230>
 80003fc:	0040      	lsls	r0, r0, #1
 80003fe:	4149      	adcs	r1, r1
 8000400:	bf28      	it	cs
 8000402:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000406:	bd30      	pop	{r4, r5, pc}
 8000408:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 800040c:	bf3c      	itt	cc
 800040e:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000412:	bd30      	popcc	{r4, r5, pc}
 8000414:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000418:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 800041c:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000420:	f04f 0000 	mov.w	r0, #0
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042a:	bf1a      	itte	ne
 800042c:	4619      	movne	r1, r3
 800042e:	4610      	movne	r0, r2
 8000430:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000434:	bf1c      	itt	ne
 8000436:	460b      	movne	r3, r1
 8000438:	4602      	movne	r2, r0
 800043a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043e:	bf06      	itte	eq
 8000440:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000444:	ea91 0f03 	teqeq	r1, r3
 8000448:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	bf00      	nop

08000450 <__aeabi_ui2d>:
 8000450:	f090 0f00 	teq	r0, #0
 8000454:	bf04      	itt	eq
 8000456:	2100      	moveq	r1, #0
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000460:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000464:	f04f 0500 	mov.w	r5, #0
 8000468:	f04f 0100 	mov.w	r1, #0
 800046c:	e750      	b.n	8000310 <__adddf3+0x138>
 800046e:	bf00      	nop

08000470 <__aeabi_i2d>:
 8000470:	f090 0f00 	teq	r0, #0
 8000474:	bf04      	itt	eq
 8000476:	2100      	moveq	r1, #0
 8000478:	4770      	bxeq	lr
 800047a:	b530      	push	{r4, r5, lr}
 800047c:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000480:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000484:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000488:	bf48      	it	mi
 800048a:	4240      	negmi	r0, r0
 800048c:	f04f 0100 	mov.w	r1, #0
 8000490:	e73e      	b.n	8000310 <__adddf3+0x138>
 8000492:	bf00      	nop

08000494 <__aeabi_f2d>:
 8000494:	0042      	lsls	r2, r0, #1
 8000496:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800049a:	ea4f 0131 	mov.w	r1, r1, rrx
 800049e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004a2:	bf1f      	itttt	ne
 80004a4:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004a8:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004ac:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004b0:	4770      	bxne	lr
 80004b2:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004b6:	bf08      	it	eq
 80004b8:	4770      	bxeq	lr
 80004ba:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004be:	bf04      	itt	eq
 80004c0:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004cc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004d0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004d4:	e71c      	b.n	8000310 <__adddf3+0x138>
 80004d6:	bf00      	nop

080004d8 <__aeabi_ul2d>:
 80004d8:	ea50 0201 	orrs.w	r2, r0, r1
 80004dc:	bf08      	it	eq
 80004de:	4770      	bxeq	lr
 80004e0:	b530      	push	{r4, r5, lr}
 80004e2:	f04f 0500 	mov.w	r5, #0
 80004e6:	e00a      	b.n	80004fe <__aeabi_l2d+0x16>

080004e8 <__aeabi_l2d>:
 80004e8:	ea50 0201 	orrs.w	r2, r0, r1
 80004ec:	bf08      	it	eq
 80004ee:	4770      	bxeq	lr
 80004f0:	b530      	push	{r4, r5, lr}
 80004f2:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80004f6:	d502      	bpl.n	80004fe <__aeabi_l2d+0x16>
 80004f8:	4240      	negs	r0, r0
 80004fa:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fe:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000502:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000506:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800050a:	f43f aed8 	beq.w	80002be <__adddf3+0xe6>
 800050e:	f04f 0203 	mov.w	r2, #3
 8000512:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000516:	bf18      	it	ne
 8000518:	3203      	addne	r2, #3
 800051a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051e:	bf18      	it	ne
 8000520:	3203      	addne	r2, #3
 8000522:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000526:	f1c2 0320 	rsb	r3, r2, #32
 800052a:	fa00 fc03 	lsl.w	ip, r0, r3
 800052e:	fa20 f002 	lsr.w	r0, r0, r2
 8000532:	fa01 fe03 	lsl.w	lr, r1, r3
 8000536:	ea40 000e 	orr.w	r0, r0, lr
 800053a:	fa21 f102 	lsr.w	r1, r1, r2
 800053e:	4414      	add	r4, r2
 8000540:	e6bd      	b.n	80002be <__adddf3+0xe6>
 8000542:	bf00      	nop

08000544 <__aeabi_dmul>:
 8000544:	b570      	push	{r4, r5, r6, lr}
 8000546:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800054a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800054e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000552:	bf1d      	ittte	ne
 8000554:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000558:	ea94 0f0c 	teqne	r4, ip
 800055c:	ea95 0f0c 	teqne	r5, ip
 8000560:	f000 f8de 	bleq	8000720 <__aeabi_dmul+0x1dc>
 8000564:	442c      	add	r4, r5
 8000566:	ea81 0603 	eor.w	r6, r1, r3
 800056a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000572:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000576:	bf18      	it	ne
 8000578:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 800057c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000580:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000584:	d038      	beq.n	80005f8 <__aeabi_dmul+0xb4>
 8000586:	fba0 ce02 	umull	ip, lr, r0, r2
 800058a:	f04f 0500 	mov.w	r5, #0
 800058e:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000592:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000596:	fbe0 e503 	umlal	lr, r5, r0, r3
 800059a:	f04f 0600 	mov.w	r6, #0
 800059e:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005a2:	f09c 0f00 	teq	ip, #0
 80005a6:	bf18      	it	ne
 80005a8:	f04e 0e01 	orrne.w	lr, lr, #1
 80005ac:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005b0:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005b4:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005b8:	d204      	bcs.n	80005c4 <__aeabi_dmul+0x80>
 80005ba:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005be:	416d      	adcs	r5, r5
 80005c0:	eb46 0606 	adc.w	r6, r6, r6
 80005c4:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c8:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005cc:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005d0:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d4:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d8:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005dc:	bf88      	it	hi
 80005de:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005e2:	d81e      	bhi.n	8000622 <__aeabi_dmul+0xde>
 80005e4:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005e8:	bf08      	it	eq
 80005ea:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ee:	f150 0000 	adcs.w	r0, r0, #0
 80005f2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f6:	bd70      	pop	{r4, r5, r6, pc}
 80005f8:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80005fc:	ea46 0101 	orr.w	r1, r6, r1
 8000600:	ea40 0002 	orr.w	r0, r0, r2
 8000604:	ea81 0103 	eor.w	r1, r1, r3
 8000608:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800060c:	bfc2      	ittt	gt
 800060e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000612:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000616:	bd70      	popgt	{r4, r5, r6, pc}
 8000618:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800061c:	f04f 0e00 	mov.w	lr, #0
 8000620:	3c01      	subs	r4, #1
 8000622:	f300 80ab 	bgt.w	800077c <__aeabi_dmul+0x238>
 8000626:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800062a:	bfde      	ittt	le
 800062c:	2000      	movle	r0, #0
 800062e:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000632:	bd70      	pople	{r4, r5, r6, pc}
 8000634:	f1c4 0400 	rsb	r4, r4, #0
 8000638:	3c20      	subs	r4, #32
 800063a:	da35      	bge.n	80006a8 <__aeabi_dmul+0x164>
 800063c:	340c      	adds	r4, #12
 800063e:	dc1b      	bgt.n	8000678 <__aeabi_dmul+0x134>
 8000640:	f104 0414 	add.w	r4, r4, #20
 8000644:	f1c4 0520 	rsb	r5, r4, #32
 8000648:	fa00 f305 	lsl.w	r3, r0, r5
 800064c:	fa20 f004 	lsr.w	r0, r0, r4
 8000650:	fa01 f205 	lsl.w	r2, r1, r5
 8000654:	ea40 0002 	orr.w	r0, r0, r2
 8000658:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 800065c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000660:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000664:	fa21 f604 	lsr.w	r6, r1, r4
 8000668:	eb42 0106 	adc.w	r1, r2, r6
 800066c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000670:	bf08      	it	eq
 8000672:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000676:	bd70      	pop	{r4, r5, r6, pc}
 8000678:	f1c4 040c 	rsb	r4, r4, #12
 800067c:	f1c4 0520 	rsb	r5, r4, #32
 8000680:	fa00 f304 	lsl.w	r3, r0, r4
 8000684:	fa20 f005 	lsr.w	r0, r0, r5
 8000688:	fa01 f204 	lsl.w	r2, r1, r4
 800068c:	ea40 0002 	orr.w	r0, r0, r2
 8000690:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000694:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000698:	f141 0100 	adc.w	r1, r1, #0
 800069c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a0:	bf08      	it	eq
 80006a2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a6:	bd70      	pop	{r4, r5, r6, pc}
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f205 	lsl.w	r2, r0, r5
 80006b0:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b4:	fa20 f304 	lsr.w	r3, r0, r4
 80006b8:	fa01 f205 	lsl.w	r2, r1, r5
 80006bc:	ea43 0302 	orr.w	r3, r3, r2
 80006c0:	fa21 f004 	lsr.w	r0, r1, r4
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c8:	fa21 f204 	lsr.w	r2, r1, r4
 80006cc:	ea20 0002 	bic.w	r0, r0, r2
 80006d0:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d8:	bf08      	it	eq
 80006da:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006de:	bd70      	pop	{r4, r5, r6, pc}
 80006e0:	f094 0f00 	teq	r4, #0
 80006e4:	d10f      	bne.n	8000706 <__aeabi_dmul+0x1c2>
 80006e6:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006ea:	0040      	lsls	r0, r0, #1
 80006ec:	eb41 0101 	adc.w	r1, r1, r1
 80006f0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80006f4:	bf08      	it	eq
 80006f6:	3c01      	subeq	r4, #1
 80006f8:	d0f7      	beq.n	80006ea <__aeabi_dmul+0x1a6>
 80006fa:	ea41 0106 	orr.w	r1, r1, r6
 80006fe:	f095 0f00 	teq	r5, #0
 8000702:	bf18      	it	ne
 8000704:	4770      	bxne	lr
 8000706:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800070a:	0052      	lsls	r2, r2, #1
 800070c:	eb43 0303 	adc.w	r3, r3, r3
 8000710:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000714:	bf08      	it	eq
 8000716:	3d01      	subeq	r5, #1
 8000718:	d0f7      	beq.n	800070a <__aeabi_dmul+0x1c6>
 800071a:	ea43 0306 	orr.w	r3, r3, r6
 800071e:	4770      	bx	lr
 8000720:	ea94 0f0c 	teq	r4, ip
 8000724:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000728:	bf18      	it	ne
 800072a:	ea95 0f0c 	teqne	r5, ip
 800072e:	d00c      	beq.n	800074a <__aeabi_dmul+0x206>
 8000730:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000734:	bf18      	it	ne
 8000736:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800073a:	d1d1      	bne.n	80006e0 <__aeabi_dmul+0x19c>
 800073c:	ea81 0103 	eor.w	r1, r1, r3
 8000740:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000744:	f04f 0000 	mov.w	r0, #0
 8000748:	bd70      	pop	{r4, r5, r6, pc}
 800074a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074e:	bf06      	itte	eq
 8000750:	4610      	moveq	r0, r2
 8000752:	4619      	moveq	r1, r3
 8000754:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000758:	d019      	beq.n	800078e <__aeabi_dmul+0x24a>
 800075a:	ea94 0f0c 	teq	r4, ip
 800075e:	d102      	bne.n	8000766 <__aeabi_dmul+0x222>
 8000760:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000764:	d113      	bne.n	800078e <__aeabi_dmul+0x24a>
 8000766:	ea95 0f0c 	teq	r5, ip
 800076a:	d105      	bne.n	8000778 <__aeabi_dmul+0x234>
 800076c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000770:	bf1c      	itt	ne
 8000772:	4610      	movne	r0, r2
 8000774:	4619      	movne	r1, r3
 8000776:	d10a      	bne.n	800078e <__aeabi_dmul+0x24a>
 8000778:	ea81 0103 	eor.w	r1, r1, r3
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000780:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000784:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000788:	f04f 0000 	mov.w	r0, #0
 800078c:	bd70      	pop	{r4, r5, r6, pc}
 800078e:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000792:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000796:	bd70      	pop	{r4, r5, r6, pc}

08000798 <__aeabi_ddiv>:
 8000798:	b570      	push	{r4, r5, r6, lr}
 800079a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800079e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007a2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a6:	bf1d      	ittte	ne
 80007a8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007ac:	ea94 0f0c 	teqne	r4, ip
 80007b0:	ea95 0f0c 	teqne	r5, ip
 80007b4:	f000 f8a7 	bleq	8000906 <__aeabi_ddiv+0x16e>
 80007b8:	eba4 0405 	sub.w	r4, r4, r5
 80007bc:	ea81 0e03 	eor.w	lr, r1, r3
 80007c0:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c8:	f000 8088 	beq.w	80008dc <__aeabi_ddiv+0x144>
 80007cc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007d0:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007d4:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d8:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007dc:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007e0:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e4:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e8:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007ec:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007f0:	429d      	cmp	r5, r3
 80007f2:	bf08      	it	eq
 80007f4:	4296      	cmpeq	r6, r2
 80007f6:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007fa:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80007fe:	d202      	bcs.n	8000806 <__aeabi_ddiv+0x6e>
 8000800:	085b      	lsrs	r3, r3, #1
 8000802:	ea4f 0232 	mov.w	r2, r2, rrx
 8000806:	1ab6      	subs	r6, r6, r2
 8000808:	eb65 0503 	sbc.w	r5, r5, r3
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000816:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800081a:	ebb6 0e02 	subs.w	lr, r6, r2
 800081e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000822:	bf22      	ittt	cs
 8000824:	1ab6      	subcs	r6, r6, r2
 8000826:	4675      	movcs	r5, lr
 8000828:	ea40 000c 	orrcs.w	r0, r0, ip
 800082c:	085b      	lsrs	r3, r3, #1
 800082e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000832:	ebb6 0e02 	subs.w	lr, r6, r2
 8000836:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083a:	bf22      	ittt	cs
 800083c:	1ab6      	subcs	r6, r6, r2
 800083e:	4675      	movcs	r5, lr
 8000840:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000844:	085b      	lsrs	r3, r3, #1
 8000846:	ea4f 0232 	mov.w	r2, r2, rrx
 800084a:	ebb6 0e02 	subs.w	lr, r6, r2
 800084e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000852:	bf22      	ittt	cs
 8000854:	1ab6      	subcs	r6, r6, r2
 8000856:	4675      	movcs	r5, lr
 8000858:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800085c:	085b      	lsrs	r3, r3, #1
 800085e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000862:	ebb6 0e02 	subs.w	lr, r6, r2
 8000866:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086a:	bf22      	ittt	cs
 800086c:	1ab6      	subcs	r6, r6, r2
 800086e:	4675      	movcs	r5, lr
 8000870:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000874:	ea55 0e06 	orrs.w	lr, r5, r6
 8000878:	d018      	beq.n	80008ac <__aeabi_ddiv+0x114>
 800087a:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000882:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000886:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800088a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000892:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000896:	d1c0      	bne.n	800081a <__aeabi_ddiv+0x82>
 8000898:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800089c:	d10b      	bne.n	80008b6 <__aeabi_ddiv+0x11e>
 800089e:	ea41 0100 	orr.w	r1, r1, r0
 80008a2:	f04f 0000 	mov.w	r0, #0
 80008a6:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008aa:	e7b6      	b.n	800081a <__aeabi_ddiv+0x82>
 80008ac:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008b0:	bf04      	itt	eq
 80008b2:	4301      	orreq	r1, r0
 80008b4:	2000      	moveq	r0, #0
 80008b6:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008ba:	bf88      	it	hi
 80008bc:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008c0:	f63f aeaf 	bhi.w	8000622 <__aeabi_dmul+0xde>
 80008c4:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c8:	bf04      	itt	eq
 80008ca:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008d2:	f150 0000 	adcs.w	r0, r0, #0
 80008d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008da:	bd70      	pop	{r4, r5, r6, pc}
 80008dc:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008e0:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e4:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e8:	bfc2      	ittt	gt
 80008ea:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ee:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008f2:	bd70      	popgt	{r4, r5, r6, pc}
 80008f4:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008f8:	f04f 0e00 	mov.w	lr, #0
 80008fc:	3c01      	subs	r4, #1
 80008fe:	e690      	b.n	8000622 <__aeabi_dmul+0xde>
 8000900:	ea45 0e06 	orr.w	lr, r5, r6
 8000904:	e68d      	b.n	8000622 <__aeabi_dmul+0xde>
 8000906:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800090a:	ea94 0f0c 	teq	r4, ip
 800090e:	bf08      	it	eq
 8000910:	ea95 0f0c 	teqeq	r5, ip
 8000914:	f43f af3b 	beq.w	800078e <__aeabi_dmul+0x24a>
 8000918:	ea94 0f0c 	teq	r4, ip
 800091c:	d10a      	bne.n	8000934 <__aeabi_ddiv+0x19c>
 800091e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000922:	f47f af34 	bne.w	800078e <__aeabi_dmul+0x24a>
 8000926:	ea95 0f0c 	teq	r5, ip
 800092a:	f47f af25 	bne.w	8000778 <__aeabi_dmul+0x234>
 800092e:	4610      	mov	r0, r2
 8000930:	4619      	mov	r1, r3
 8000932:	e72c      	b.n	800078e <__aeabi_dmul+0x24a>
 8000934:	ea95 0f0c 	teq	r5, ip
 8000938:	d106      	bne.n	8000948 <__aeabi_ddiv+0x1b0>
 800093a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093e:	f43f aefd 	beq.w	800073c <__aeabi_dmul+0x1f8>
 8000942:	4610      	mov	r0, r2
 8000944:	4619      	mov	r1, r3
 8000946:	e722      	b.n	800078e <__aeabi_dmul+0x24a>
 8000948:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800094c:	bf18      	it	ne
 800094e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000952:	f47f aec5 	bne.w	80006e0 <__aeabi_dmul+0x19c>
 8000956:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800095a:	f47f af0d 	bne.w	8000778 <__aeabi_dmul+0x234>
 800095e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000962:	f47f aeeb 	bne.w	800073c <__aeabi_dmul+0x1f8>
 8000966:	e712      	b.n	800078e <__aeabi_dmul+0x24a>

08000968 <__aeabi_d2iz>:
 8000968:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800096c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000970:	d215      	bcs.n	800099e <__aeabi_d2iz+0x36>
 8000972:	d511      	bpl.n	8000998 <__aeabi_d2iz+0x30>
 8000974:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000978:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 800097c:	d912      	bls.n	80009a4 <__aeabi_d2iz+0x3c>
 800097e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000982:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000986:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800098a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800098e:	fa23 f002 	lsr.w	r0, r3, r2
 8000992:	bf18      	it	ne
 8000994:	4240      	negne	r0, r0
 8000996:	4770      	bx	lr
 8000998:	f04f 0000 	mov.w	r0, #0
 800099c:	4770      	bx	lr
 800099e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009a2:	d105      	bne.n	80009b0 <__aeabi_d2iz+0x48>
 80009a4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 80009a8:	bf08      	it	eq
 80009aa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 80009ae:	4770      	bx	lr
 80009b0:	f04f 0000 	mov.w	r0, #0
 80009b4:	4770      	bx	lr
 80009b6:	bf00      	nop

080009b8 <__aeabi_d2uiz>:
 80009b8:	004a      	lsls	r2, r1, #1
 80009ba:	d211      	bcs.n	80009e0 <__aeabi_d2uiz+0x28>
 80009bc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80009c0:	d211      	bcs.n	80009e6 <__aeabi_d2uiz+0x2e>
 80009c2:	d50d      	bpl.n	80009e0 <__aeabi_d2uiz+0x28>
 80009c4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80009c8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009cc:	d40e      	bmi.n	80009ec <__aeabi_d2uiz+0x34>
 80009ce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009d2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80009d6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009da:	fa23 f002 	lsr.w	r0, r3, r2
 80009de:	4770      	bx	lr
 80009e0:	f04f 0000 	mov.w	r0, #0
 80009e4:	4770      	bx	lr
 80009e6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009ea:	d102      	bne.n	80009f2 <__aeabi_d2uiz+0x3a>
 80009ec:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80009f0:	4770      	bx	lr
 80009f2:	f04f 0000 	mov.w	r0, #0
 80009f6:	4770      	bx	lr

080009f8 <__aeabi_d2f>:
 80009f8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009fc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a00:	bf24      	itt	cs
 8000a02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a0a:	d90d      	bls.n	8000a28 <__aeabi_d2f+0x30>
 8000a0c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a18:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000a1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a20:	bf08      	it	eq
 8000a22:	f020 0001 	biceq.w	r0, r0, #1
 8000a26:	4770      	bx	lr
 8000a28:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000a2c:	d121      	bne.n	8000a72 <__aeabi_d2f+0x7a>
 8000a2e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000a32:	bfbc      	itt	lt
 8000a34:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000a38:	4770      	bxlt	lr
 8000a3a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a42:	f1c2 0218 	rsb	r2, r2, #24
 8000a46:	f1c2 0c20 	rsb	ip, r2, #32
 8000a4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000a52:	bf18      	it	ne
 8000a54:	f040 0001 	orrne.w	r0, r0, #1
 8000a58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a64:	ea40 000c 	orr.w	r0, r0, ip
 8000a68:	fa23 f302 	lsr.w	r3, r3, r2
 8000a6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a70:	e7cc      	b.n	8000a0c <__aeabi_d2f+0x14>
 8000a72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a76:	d107      	bne.n	8000a88 <__aeabi_d2f+0x90>
 8000a78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a7c:	bf1e      	ittt	ne
 8000a7e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000a82:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000a86:	4770      	bxne	lr
 8000a88:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000a8c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000a90:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <__aeabi_uldivmod>:
 8000a98:	b953      	cbnz	r3, 8000ab0 <__aeabi_uldivmod+0x18>
 8000a9a:	b94a      	cbnz	r2, 8000ab0 <__aeabi_uldivmod+0x18>
 8000a9c:	2900      	cmp	r1, #0
 8000a9e:	bf08      	it	eq
 8000aa0:	2800      	cmpeq	r0, #0
 8000aa2:	bf1c      	itt	ne
 8000aa4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000aa8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000aac:	f000 b96a 	b.w	8000d84 <__aeabi_idiv0>
 8000ab0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ab4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ab8:	f000 f806 	bl	8000ac8 <__udivmoddi4>
 8000abc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ac0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ac4:	b004      	add	sp, #16
 8000ac6:	4770      	bx	lr

08000ac8 <__udivmoddi4>:
 8000ac8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000acc:	9d08      	ldr	r5, [sp, #32]
 8000ace:	460c      	mov	r4, r1
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d14e      	bne.n	8000b72 <__udivmoddi4+0xaa>
 8000ad4:	4694      	mov	ip, r2
 8000ad6:	458c      	cmp	ip, r1
 8000ad8:	4686      	mov	lr, r0
 8000ada:	fab2 f282 	clz	r2, r2
 8000ade:	d962      	bls.n	8000ba6 <__udivmoddi4+0xde>
 8000ae0:	b14a      	cbz	r2, 8000af6 <__udivmoddi4+0x2e>
 8000ae2:	f1c2 0320 	rsb	r3, r2, #32
 8000ae6:	4091      	lsls	r1, r2
 8000ae8:	fa20 f303 	lsr.w	r3, r0, r3
 8000aec:	fa0c fc02 	lsl.w	ip, ip, r2
 8000af0:	4319      	orrs	r1, r3
 8000af2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000af6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000afa:	fa1f f68c 	uxth.w	r6, ip
 8000afe:	fbb1 f4f7 	udiv	r4, r1, r7
 8000b02:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b06:	fb07 1114 	mls	r1, r7, r4, r1
 8000b0a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b0e:	fb04 f106 	mul.w	r1, r4, r6
 8000b12:	4299      	cmp	r1, r3
 8000b14:	d90a      	bls.n	8000b2c <__udivmoddi4+0x64>
 8000b16:	eb1c 0303 	adds.w	r3, ip, r3
 8000b1a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000b1e:	f080 8112 	bcs.w	8000d46 <__udivmoddi4+0x27e>
 8000b22:	4299      	cmp	r1, r3
 8000b24:	f240 810f 	bls.w	8000d46 <__udivmoddi4+0x27e>
 8000b28:	3c02      	subs	r4, #2
 8000b2a:	4463      	add	r3, ip
 8000b2c:	1a59      	subs	r1, r3, r1
 8000b2e:	fa1f f38e 	uxth.w	r3, lr
 8000b32:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b36:	fb07 1110 	mls	r1, r7, r0, r1
 8000b3a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b3e:	fb00 f606 	mul.w	r6, r0, r6
 8000b42:	429e      	cmp	r6, r3
 8000b44:	d90a      	bls.n	8000b5c <__udivmoddi4+0x94>
 8000b46:	eb1c 0303 	adds.w	r3, ip, r3
 8000b4a:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000b4e:	f080 80fc 	bcs.w	8000d4a <__udivmoddi4+0x282>
 8000b52:	429e      	cmp	r6, r3
 8000b54:	f240 80f9 	bls.w	8000d4a <__udivmoddi4+0x282>
 8000b58:	4463      	add	r3, ip
 8000b5a:	3802      	subs	r0, #2
 8000b5c:	1b9b      	subs	r3, r3, r6
 8000b5e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000b62:	2100      	movs	r1, #0
 8000b64:	b11d      	cbz	r5, 8000b6e <__udivmoddi4+0xa6>
 8000b66:	40d3      	lsrs	r3, r2
 8000b68:	2200      	movs	r2, #0
 8000b6a:	e9c5 3200 	strd	r3, r2, [r5]
 8000b6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b72:	428b      	cmp	r3, r1
 8000b74:	d905      	bls.n	8000b82 <__udivmoddi4+0xba>
 8000b76:	b10d      	cbz	r5, 8000b7c <__udivmoddi4+0xb4>
 8000b78:	e9c5 0100 	strd	r0, r1, [r5]
 8000b7c:	2100      	movs	r1, #0
 8000b7e:	4608      	mov	r0, r1
 8000b80:	e7f5      	b.n	8000b6e <__udivmoddi4+0xa6>
 8000b82:	fab3 f183 	clz	r1, r3
 8000b86:	2900      	cmp	r1, #0
 8000b88:	d146      	bne.n	8000c18 <__udivmoddi4+0x150>
 8000b8a:	42a3      	cmp	r3, r4
 8000b8c:	d302      	bcc.n	8000b94 <__udivmoddi4+0xcc>
 8000b8e:	4290      	cmp	r0, r2
 8000b90:	f0c0 80f0 	bcc.w	8000d74 <__udivmoddi4+0x2ac>
 8000b94:	1a86      	subs	r6, r0, r2
 8000b96:	eb64 0303 	sbc.w	r3, r4, r3
 8000b9a:	2001      	movs	r0, #1
 8000b9c:	2d00      	cmp	r5, #0
 8000b9e:	d0e6      	beq.n	8000b6e <__udivmoddi4+0xa6>
 8000ba0:	e9c5 6300 	strd	r6, r3, [r5]
 8000ba4:	e7e3      	b.n	8000b6e <__udivmoddi4+0xa6>
 8000ba6:	2a00      	cmp	r2, #0
 8000ba8:	f040 8090 	bne.w	8000ccc <__udivmoddi4+0x204>
 8000bac:	eba1 040c 	sub.w	r4, r1, ip
 8000bb0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000bb4:	fa1f f78c 	uxth.w	r7, ip
 8000bb8:	2101      	movs	r1, #1
 8000bba:	fbb4 f6f8 	udiv	r6, r4, r8
 8000bbe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000bc2:	fb08 4416 	mls	r4, r8, r6, r4
 8000bc6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000bca:	fb07 f006 	mul.w	r0, r7, r6
 8000bce:	4298      	cmp	r0, r3
 8000bd0:	d908      	bls.n	8000be4 <__udivmoddi4+0x11c>
 8000bd2:	eb1c 0303 	adds.w	r3, ip, r3
 8000bd6:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000bda:	d202      	bcs.n	8000be2 <__udivmoddi4+0x11a>
 8000bdc:	4298      	cmp	r0, r3
 8000bde:	f200 80cd 	bhi.w	8000d7c <__udivmoddi4+0x2b4>
 8000be2:	4626      	mov	r6, r4
 8000be4:	1a1c      	subs	r4, r3, r0
 8000be6:	fa1f f38e 	uxth.w	r3, lr
 8000bea:	fbb4 f0f8 	udiv	r0, r4, r8
 8000bee:	fb08 4410 	mls	r4, r8, r0, r4
 8000bf2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000bf6:	fb00 f707 	mul.w	r7, r0, r7
 8000bfa:	429f      	cmp	r7, r3
 8000bfc:	d908      	bls.n	8000c10 <__udivmoddi4+0x148>
 8000bfe:	eb1c 0303 	adds.w	r3, ip, r3
 8000c02:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000c06:	d202      	bcs.n	8000c0e <__udivmoddi4+0x146>
 8000c08:	429f      	cmp	r7, r3
 8000c0a:	f200 80b0 	bhi.w	8000d6e <__udivmoddi4+0x2a6>
 8000c0e:	4620      	mov	r0, r4
 8000c10:	1bdb      	subs	r3, r3, r7
 8000c12:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c16:	e7a5      	b.n	8000b64 <__udivmoddi4+0x9c>
 8000c18:	f1c1 0620 	rsb	r6, r1, #32
 8000c1c:	408b      	lsls	r3, r1
 8000c1e:	fa22 f706 	lsr.w	r7, r2, r6
 8000c22:	431f      	orrs	r7, r3
 8000c24:	fa20 fc06 	lsr.w	ip, r0, r6
 8000c28:	fa04 f301 	lsl.w	r3, r4, r1
 8000c2c:	ea43 030c 	orr.w	r3, r3, ip
 8000c30:	40f4      	lsrs	r4, r6
 8000c32:	fa00 f801 	lsl.w	r8, r0, r1
 8000c36:	0c38      	lsrs	r0, r7, #16
 8000c38:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000c3c:	fbb4 fef0 	udiv	lr, r4, r0
 8000c40:	fa1f fc87 	uxth.w	ip, r7
 8000c44:	fb00 441e 	mls	r4, r0, lr, r4
 8000c48:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c4c:	fb0e f90c 	mul.w	r9, lr, ip
 8000c50:	45a1      	cmp	r9, r4
 8000c52:	fa02 f201 	lsl.w	r2, r2, r1
 8000c56:	d90a      	bls.n	8000c6e <__udivmoddi4+0x1a6>
 8000c58:	193c      	adds	r4, r7, r4
 8000c5a:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000c5e:	f080 8084 	bcs.w	8000d6a <__udivmoddi4+0x2a2>
 8000c62:	45a1      	cmp	r9, r4
 8000c64:	f240 8081 	bls.w	8000d6a <__udivmoddi4+0x2a2>
 8000c68:	f1ae 0e02 	sub.w	lr, lr, #2
 8000c6c:	443c      	add	r4, r7
 8000c6e:	eba4 0409 	sub.w	r4, r4, r9
 8000c72:	fa1f f983 	uxth.w	r9, r3
 8000c76:	fbb4 f3f0 	udiv	r3, r4, r0
 8000c7a:	fb00 4413 	mls	r4, r0, r3, r4
 8000c7e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c82:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c86:	45a4      	cmp	ip, r4
 8000c88:	d907      	bls.n	8000c9a <__udivmoddi4+0x1d2>
 8000c8a:	193c      	adds	r4, r7, r4
 8000c8c:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000c90:	d267      	bcs.n	8000d62 <__udivmoddi4+0x29a>
 8000c92:	45a4      	cmp	ip, r4
 8000c94:	d965      	bls.n	8000d62 <__udivmoddi4+0x29a>
 8000c96:	3b02      	subs	r3, #2
 8000c98:	443c      	add	r4, r7
 8000c9a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000c9e:	fba0 9302 	umull	r9, r3, r0, r2
 8000ca2:	eba4 040c 	sub.w	r4, r4, ip
 8000ca6:	429c      	cmp	r4, r3
 8000ca8:	46ce      	mov	lr, r9
 8000caa:	469c      	mov	ip, r3
 8000cac:	d351      	bcc.n	8000d52 <__udivmoddi4+0x28a>
 8000cae:	d04e      	beq.n	8000d4e <__udivmoddi4+0x286>
 8000cb0:	b155      	cbz	r5, 8000cc8 <__udivmoddi4+0x200>
 8000cb2:	ebb8 030e 	subs.w	r3, r8, lr
 8000cb6:	eb64 040c 	sbc.w	r4, r4, ip
 8000cba:	fa04 f606 	lsl.w	r6, r4, r6
 8000cbe:	40cb      	lsrs	r3, r1
 8000cc0:	431e      	orrs	r6, r3
 8000cc2:	40cc      	lsrs	r4, r1
 8000cc4:	e9c5 6400 	strd	r6, r4, [r5]
 8000cc8:	2100      	movs	r1, #0
 8000cca:	e750      	b.n	8000b6e <__udivmoddi4+0xa6>
 8000ccc:	f1c2 0320 	rsb	r3, r2, #32
 8000cd0:	fa20 f103 	lsr.w	r1, r0, r3
 8000cd4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cd8:	fa24 f303 	lsr.w	r3, r4, r3
 8000cdc:	4094      	lsls	r4, r2
 8000cde:	430c      	orrs	r4, r1
 8000ce0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ce4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ce8:	fa1f f78c 	uxth.w	r7, ip
 8000cec:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cf0:	fb08 3110 	mls	r1, r8, r0, r3
 8000cf4:	0c23      	lsrs	r3, r4, #16
 8000cf6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cfa:	fb00 f107 	mul.w	r1, r0, r7
 8000cfe:	4299      	cmp	r1, r3
 8000d00:	d908      	bls.n	8000d14 <__udivmoddi4+0x24c>
 8000d02:	eb1c 0303 	adds.w	r3, ip, r3
 8000d06:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000d0a:	d22c      	bcs.n	8000d66 <__udivmoddi4+0x29e>
 8000d0c:	4299      	cmp	r1, r3
 8000d0e:	d92a      	bls.n	8000d66 <__udivmoddi4+0x29e>
 8000d10:	3802      	subs	r0, #2
 8000d12:	4463      	add	r3, ip
 8000d14:	1a5b      	subs	r3, r3, r1
 8000d16:	b2a4      	uxth	r4, r4
 8000d18:	fbb3 f1f8 	udiv	r1, r3, r8
 8000d1c:	fb08 3311 	mls	r3, r8, r1, r3
 8000d20:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d24:	fb01 f307 	mul.w	r3, r1, r7
 8000d28:	42a3      	cmp	r3, r4
 8000d2a:	d908      	bls.n	8000d3e <__udivmoddi4+0x276>
 8000d2c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d30:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000d34:	d213      	bcs.n	8000d5e <__udivmoddi4+0x296>
 8000d36:	42a3      	cmp	r3, r4
 8000d38:	d911      	bls.n	8000d5e <__udivmoddi4+0x296>
 8000d3a:	3902      	subs	r1, #2
 8000d3c:	4464      	add	r4, ip
 8000d3e:	1ae4      	subs	r4, r4, r3
 8000d40:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000d44:	e739      	b.n	8000bba <__udivmoddi4+0xf2>
 8000d46:	4604      	mov	r4, r0
 8000d48:	e6f0      	b.n	8000b2c <__udivmoddi4+0x64>
 8000d4a:	4608      	mov	r0, r1
 8000d4c:	e706      	b.n	8000b5c <__udivmoddi4+0x94>
 8000d4e:	45c8      	cmp	r8, r9
 8000d50:	d2ae      	bcs.n	8000cb0 <__udivmoddi4+0x1e8>
 8000d52:	ebb9 0e02 	subs.w	lr, r9, r2
 8000d56:	eb63 0c07 	sbc.w	ip, r3, r7
 8000d5a:	3801      	subs	r0, #1
 8000d5c:	e7a8      	b.n	8000cb0 <__udivmoddi4+0x1e8>
 8000d5e:	4631      	mov	r1, r6
 8000d60:	e7ed      	b.n	8000d3e <__udivmoddi4+0x276>
 8000d62:	4603      	mov	r3, r0
 8000d64:	e799      	b.n	8000c9a <__udivmoddi4+0x1d2>
 8000d66:	4630      	mov	r0, r6
 8000d68:	e7d4      	b.n	8000d14 <__udivmoddi4+0x24c>
 8000d6a:	46d6      	mov	lr, sl
 8000d6c:	e77f      	b.n	8000c6e <__udivmoddi4+0x1a6>
 8000d6e:	4463      	add	r3, ip
 8000d70:	3802      	subs	r0, #2
 8000d72:	e74d      	b.n	8000c10 <__udivmoddi4+0x148>
 8000d74:	4606      	mov	r6, r0
 8000d76:	4623      	mov	r3, r4
 8000d78:	4608      	mov	r0, r1
 8000d7a:	e70f      	b.n	8000b9c <__udivmoddi4+0xd4>
 8000d7c:	3e02      	subs	r6, #2
 8000d7e:	4463      	add	r3, ip
 8000d80:	e730      	b.n	8000be4 <__udivmoddi4+0x11c>
 8000d82:	bf00      	nop

08000d84 <__aeabi_idiv0>:
 8000d84:	4770      	bx	lr
 8000d86:	bf00      	nop

08000d88 <read_calibration_data>:
 *      Author: bala
 */
#include "bmp.h"

void read_calibration_data(I2C_HandleTypeDef *hi2c, bmp_calib_t *bmp_calib_data)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b08c      	sub	sp, #48	@ 0x30
 8000d8c:	af04      	add	r7, sp, #16
 8000d8e:	6078      	str	r0, [r7, #4]
 8000d90:	6039      	str	r1, [r7, #0]
	uint8_t calib_data[22];

	HAL_I2C_Mem_Read(hi2c,BMP_ADDR,(uint16_t) CALIB_START_ADDR,1,calib_data,22,1000);
 8000d92:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d96:	9302      	str	r3, [sp, #8]
 8000d98:	2316      	movs	r3, #22
 8000d9a:	9301      	str	r3, [sp, #4]
 8000d9c:	f107 0308 	add.w	r3, r7, #8
 8000da0:	9300      	str	r3, [sp, #0]
 8000da2:	2301      	movs	r3, #1
 8000da4:	22aa      	movs	r2, #170	@ 0xaa
 8000da6:	21ee      	movs	r1, #238	@ 0xee
 8000da8:	6878      	ldr	r0, [r7, #4]
 8000daa:	f003 fad5 	bl	8004358 <HAL_I2C_Mem_Read>

	bmp_calib_data->AC1 = (uint16_t) (calib_data[0] << 8) | (calib_data[1]);
 8000dae:	7a3b      	ldrb	r3, [r7, #8]
 8000db0:	021b      	lsls	r3, r3, #8
 8000db2:	b29b      	uxth	r3, r3
 8000db4:	7a7a      	ldrb	r2, [r7, #9]
 8000db6:	4313      	orrs	r3, r2
 8000db8:	b29a      	uxth	r2, r3
 8000dba:	683b      	ldr	r3, [r7, #0]
 8000dbc:	801a      	strh	r2, [r3, #0]
	bmp_calib_data->AC2 = (uint16_t) (calib_data[2] << 8) | (calib_data[3]);
 8000dbe:	7abb      	ldrb	r3, [r7, #10]
 8000dc0:	021b      	lsls	r3, r3, #8
 8000dc2:	b29b      	uxth	r3, r3
 8000dc4:	7afa      	ldrb	r2, [r7, #11]
 8000dc6:	4313      	orrs	r3, r2
 8000dc8:	b29a      	uxth	r2, r3
 8000dca:	683b      	ldr	r3, [r7, #0]
 8000dcc:	805a      	strh	r2, [r3, #2]
	bmp_calib_data->AC3 = (uint16_t) (calib_data[4] << 8) | (calib_data[5]);
 8000dce:	7b3b      	ldrb	r3, [r7, #12]
 8000dd0:	021b      	lsls	r3, r3, #8
 8000dd2:	b29b      	uxth	r3, r3
 8000dd4:	7b7a      	ldrb	r2, [r7, #13]
 8000dd6:	4313      	orrs	r3, r2
 8000dd8:	b29a      	uxth	r2, r3
 8000dda:	683b      	ldr	r3, [r7, #0]
 8000ddc:	809a      	strh	r2, [r3, #4]
	bmp_calib_data->AC4 = (uint16_t) (calib_data[6] << 8) | (calib_data[7]);
 8000dde:	7bbb      	ldrb	r3, [r7, #14]
 8000de0:	021b      	lsls	r3, r3, #8
 8000de2:	b29b      	uxth	r3, r3
 8000de4:	7bfa      	ldrb	r2, [r7, #15]
 8000de6:	4313      	orrs	r3, r2
 8000de8:	b29a      	uxth	r2, r3
 8000dea:	683b      	ldr	r3, [r7, #0]
 8000dec:	80da      	strh	r2, [r3, #6]
	bmp_calib_data->AC5 = (uint16_t) (calib_data[8] << 8) | (calib_data[9]);
 8000dee:	7c3b      	ldrb	r3, [r7, #16]
 8000df0:	021b      	lsls	r3, r3, #8
 8000df2:	b29b      	uxth	r3, r3
 8000df4:	7c7a      	ldrb	r2, [r7, #17]
 8000df6:	4313      	orrs	r3, r2
 8000df8:	b29a      	uxth	r2, r3
 8000dfa:	683b      	ldr	r3, [r7, #0]
 8000dfc:	811a      	strh	r2, [r3, #8]
	bmp_calib_data->AC6 = (uint16_t) (calib_data[10] << 8) | (calib_data[11]);
 8000dfe:	7cbb      	ldrb	r3, [r7, #18]
 8000e00:	021b      	lsls	r3, r3, #8
 8000e02:	b29b      	uxth	r3, r3
 8000e04:	7cfa      	ldrb	r2, [r7, #19]
 8000e06:	4313      	orrs	r3, r2
 8000e08:	b29a      	uxth	r2, r3
 8000e0a:	683b      	ldr	r3, [r7, #0]
 8000e0c:	815a      	strh	r2, [r3, #10]

	bmp_calib_data->B1 = (uint16_t) (calib_data[12] << 8) | (calib_data[13]);
 8000e0e:	7d3b      	ldrb	r3, [r7, #20]
 8000e10:	021b      	lsls	r3, r3, #8
 8000e12:	b29b      	uxth	r3, r3
 8000e14:	7d7a      	ldrb	r2, [r7, #21]
 8000e16:	4313      	orrs	r3, r2
 8000e18:	b29a      	uxth	r2, r3
 8000e1a:	683b      	ldr	r3, [r7, #0]
 8000e1c:	819a      	strh	r2, [r3, #12]
	bmp_calib_data->B2 = (uint16_t) (calib_data[14] << 8) | (calib_data[15]);
 8000e1e:	7dbb      	ldrb	r3, [r7, #22]
 8000e20:	021b      	lsls	r3, r3, #8
 8000e22:	b29b      	uxth	r3, r3
 8000e24:	7dfa      	ldrb	r2, [r7, #23]
 8000e26:	4313      	orrs	r3, r2
 8000e28:	b29a      	uxth	r2, r3
 8000e2a:	683b      	ldr	r3, [r7, #0]
 8000e2c:	81da      	strh	r2, [r3, #14]

	bmp_calib_data->MB = (uint16_t) (calib_data[16] << 8) | (calib_data[17]);
 8000e2e:	7e3b      	ldrb	r3, [r7, #24]
 8000e30:	021b      	lsls	r3, r3, #8
 8000e32:	b29b      	uxth	r3, r3
 8000e34:	7e7a      	ldrb	r2, [r7, #25]
 8000e36:	4313      	orrs	r3, r2
 8000e38:	b29a      	uxth	r2, r3
 8000e3a:	683b      	ldr	r3, [r7, #0]
 8000e3c:	821a      	strh	r2, [r3, #16]
	bmp_calib_data->MC = (uint16_t) (calib_data[18] << 8) | (calib_data[19]);
 8000e3e:	7ebb      	ldrb	r3, [r7, #26]
 8000e40:	021b      	lsls	r3, r3, #8
 8000e42:	b29b      	uxth	r3, r3
 8000e44:	7efa      	ldrb	r2, [r7, #27]
 8000e46:	4313      	orrs	r3, r2
 8000e48:	b29a      	uxth	r2, r3
 8000e4a:	683b      	ldr	r3, [r7, #0]
 8000e4c:	825a      	strh	r2, [r3, #18]
	bmp_calib_data->MD = (uint16_t) (calib_data[20] << 8) | (calib_data[21]);
 8000e4e:	7f3b      	ldrb	r3, [r7, #28]
 8000e50:	021b      	lsls	r3, r3, #8
 8000e52:	b29b      	uxth	r3, r3
 8000e54:	7f7a      	ldrb	r2, [r7, #29]
 8000e56:	4313      	orrs	r3, r2
 8000e58:	b29a      	uxth	r2, r3
 8000e5a:	683b      	ldr	r3, [r7, #0]
 8000e5c:	829a      	strh	r2, [r3, #20]
}
 8000e5e:	bf00      	nop
 8000e60:	3720      	adds	r7, #32
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bd80      	pop	{r7, pc}
	...

08000e68 <get_uncomp_temp>:

uint16_t get_uncomp_temp(I2C_HandleTypeDef *hi2c, bmp_calib_t *bmp_calib_data)
{
 8000e68:	b5b0      	push	{r4, r5, r7, lr}
 8000e6a:	b08e      	sub	sp, #56	@ 0x38
 8000e6c:	af04      	add	r7, sp, #16
 8000e6e:	6078      	str	r0, [r7, #4]
 8000e70:	6039      	str	r1, [r7, #0]
	uint8_t raw_temp_data[2];
	uint8_t temp_write_val = TEMP_WRITE_VAL;
 8000e72:	232e      	movs	r3, #46	@ 0x2e
 8000e74:	73fb      	strb	r3, [r7, #15]

	HAL_I2C_Mem_Write(hi2c,BMP_ADDR,(uint16_t) TEMP_REG_ADDR,1,&temp_write_val,1,1000);
 8000e76:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e7a:	9302      	str	r3, [sp, #8]
 8000e7c:	2301      	movs	r3, #1
 8000e7e:	9301      	str	r3, [sp, #4]
 8000e80:	f107 030f 	add.w	r3, r7, #15
 8000e84:	9300      	str	r3, [sp, #0]
 8000e86:	2301      	movs	r3, #1
 8000e88:	22f4      	movs	r2, #244	@ 0xf4
 8000e8a:	21ee      	movs	r1, #238	@ 0xee
 8000e8c:	6878      	ldr	r0, [r7, #4]
 8000e8e:	f003 f94f 	bl	8004130 <HAL_I2C_Mem_Write>
	HAL_Delay(5);
 8000e92:	2005      	movs	r0, #5
 8000e94:	f001 fb10 	bl	80024b8 <HAL_Delay>
	HAL_I2C_Mem_Read(hi2c,BMP_ADDR,(uint16_t) TEMP_REG_ADDR,1,raw_temp_data,2,1000);
 8000e98:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e9c:	9302      	str	r3, [sp, #8]
 8000e9e:	2302      	movs	r3, #2
 8000ea0:	9301      	str	r3, [sp, #4]
 8000ea2:	f107 0310 	add.w	r3, r7, #16
 8000ea6:	9300      	str	r3, [sp, #0]
 8000ea8:	2301      	movs	r3, #1
 8000eaa:	22f4      	movs	r2, #244	@ 0xf4
 8000eac:	21ee      	movs	r1, #238	@ 0xee
 8000eae:	6878      	ldr	r0, [r7, #4]
 8000eb0:	f003 fa52 	bl	8004358 <HAL_I2C_Mem_Read>

	uint16_t uncomp_temp = (uint16_t) (raw_temp_data[0] << 8) | raw_temp_data[1];
 8000eb4:	7c3b      	ldrb	r3, [r7, #16]
 8000eb6:	021b      	lsls	r3, r3, #8
 8000eb8:	b29b      	uxth	r3, r3
 8000eba:	7c7a      	ldrb	r2, [r7, #17]
 8000ebc:	4313      	orrs	r3, r2
 8000ebe:	84fb      	strh	r3, [r7, #38]	@ 0x26


	float X1 = ((uncomp_temp-bmp_calib_data->AC6) * (bmp_calib_data->AC5/(pow(2,15))));
 8000ec0:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8000ec2:	683a      	ldr	r2, [r7, #0]
 8000ec4:	8952      	ldrh	r2, [r2, #10]
 8000ec6:	1a9b      	subs	r3, r3, r2
 8000ec8:	4618      	mov	r0, r3
 8000eca:	f7ff fad1 	bl	8000470 <__aeabi_i2d>
 8000ece:	4604      	mov	r4, r0
 8000ed0:	460d      	mov	r5, r1
 8000ed2:	683b      	ldr	r3, [r7, #0]
 8000ed4:	891b      	ldrh	r3, [r3, #8]
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	f7ff faca 	bl	8000470 <__aeabi_i2d>
 8000edc:	f04f 0200 	mov.w	r2, #0
 8000ee0:	4b36      	ldr	r3, [pc, #216]	@ (8000fbc <get_uncomp_temp+0x154>)
 8000ee2:	f7ff fc59 	bl	8000798 <__aeabi_ddiv>
 8000ee6:	4602      	mov	r2, r0
 8000ee8:	460b      	mov	r3, r1
 8000eea:	4620      	mov	r0, r4
 8000eec:	4629      	mov	r1, r5
 8000eee:	f7ff fb29 	bl	8000544 <__aeabi_dmul>
 8000ef2:	4602      	mov	r2, r0
 8000ef4:	460b      	mov	r3, r1
 8000ef6:	4610      	mov	r0, r2
 8000ef8:	4619      	mov	r1, r3
 8000efa:	f7ff fd7d 	bl	80009f8 <__aeabi_d2f>
 8000efe:	4603      	mov	r3, r0
 8000f00:	623b      	str	r3, [r7, #32]
	float X2 = ((bmp_calib_data->MC*(pow(2,11))) / (X1+bmp_calib_data->MD));
 8000f02:	683b      	ldr	r3, [r7, #0]
 8000f04:	8a5b      	ldrh	r3, [r3, #18]
 8000f06:	4618      	mov	r0, r3
 8000f08:	f7ff fab2 	bl	8000470 <__aeabi_i2d>
 8000f0c:	f04f 0200 	mov.w	r2, #0
 8000f10:	4b2b      	ldr	r3, [pc, #172]	@ (8000fc0 <get_uncomp_temp+0x158>)
 8000f12:	f7ff fb17 	bl	8000544 <__aeabi_dmul>
 8000f16:	4602      	mov	r2, r0
 8000f18:	460b      	mov	r3, r1
 8000f1a:	4614      	mov	r4, r2
 8000f1c:	461d      	mov	r5, r3
 8000f1e:	683b      	ldr	r3, [r7, #0]
 8000f20:	8a9b      	ldrh	r3, [r3, #20]
 8000f22:	ee07 3a90 	vmov	s15, r3
 8000f26:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000f2a:	edd7 7a08 	vldr	s15, [r7, #32]
 8000f2e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f32:	ee17 0a90 	vmov	r0, s15
 8000f36:	f7ff faad 	bl	8000494 <__aeabi_f2d>
 8000f3a:	4602      	mov	r2, r0
 8000f3c:	460b      	mov	r3, r1
 8000f3e:	4620      	mov	r0, r4
 8000f40:	4629      	mov	r1, r5
 8000f42:	f7ff fc29 	bl	8000798 <__aeabi_ddiv>
 8000f46:	4602      	mov	r2, r0
 8000f48:	460b      	mov	r3, r1
 8000f4a:	4610      	mov	r0, r2
 8000f4c:	4619      	mov	r1, r3
 8000f4e:	f7ff fd53 	bl	80009f8 <__aeabi_d2f>
 8000f52:	4603      	mov	r3, r0
 8000f54:	61fb      	str	r3, [r7, #28]
	float B5 = X1+X2;
 8000f56:	ed97 7a08 	vldr	s14, [r7, #32]
 8000f5a:	edd7 7a07 	vldr	s15, [r7, #28]
 8000f5e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f62:	edc7 7a06 	vstr	s15, [r7, #24]
	float comp_temp = ((B5+8)/(pow(2,4)))/10.0;
 8000f66:	edd7 7a06 	vldr	s15, [r7, #24]
 8000f6a:	eeb2 7a00 	vmov.f32	s14, #32	@ 0x41000000  8.0
 8000f6e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000f72:	ee17 0a90 	vmov	r0, s15
 8000f76:	f7ff fa8d 	bl	8000494 <__aeabi_f2d>
 8000f7a:	f04f 0200 	mov.w	r2, #0
 8000f7e:	4b11      	ldr	r3, [pc, #68]	@ (8000fc4 <get_uncomp_temp+0x15c>)
 8000f80:	f7ff fc0a 	bl	8000798 <__aeabi_ddiv>
 8000f84:	4602      	mov	r2, r0
 8000f86:	460b      	mov	r3, r1
 8000f88:	4610      	mov	r0, r2
 8000f8a:	4619      	mov	r1, r3
 8000f8c:	f04f 0200 	mov.w	r2, #0
 8000f90:	4b0d      	ldr	r3, [pc, #52]	@ (8000fc8 <get_uncomp_temp+0x160>)
 8000f92:	f7ff fc01 	bl	8000798 <__aeabi_ddiv>
 8000f96:	4602      	mov	r2, r0
 8000f98:	460b      	mov	r3, r1
 8000f9a:	4610      	mov	r0, r2
 8000f9c:	4619      	mov	r1, r3
 8000f9e:	f7ff fd2b 	bl	80009f8 <__aeabi_d2f>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	617b      	str	r3, [r7, #20]
	return comp_temp;
 8000fa6:	edd7 7a05 	vldr	s15, [r7, #20]
 8000faa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000fae:	ee17 3a90 	vmov	r3, s15
 8000fb2:	b29b      	uxth	r3, r3
}
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	3728      	adds	r7, #40	@ 0x28
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bdb0      	pop	{r4, r5, r7, pc}
 8000fbc:	40e00000 	.word	0x40e00000
 8000fc0:	40a00000 	.word	0x40a00000
 8000fc4:	40300000 	.word	0x40300000
 8000fc8:	40240000 	.word	0x40240000

08000fcc <get_uncomp_press>:

uint32_t get_uncomp_press(I2C_HandleTypeDef *hi2c, bmp_calib_t *bmp_calib_data)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b08a      	sub	sp, #40	@ 0x28
 8000fd0:	af04      	add	r7, sp, #16
 8000fd2:	6078      	str	r0, [r7, #4]
 8000fd4:	6039      	str	r1, [r7, #0]
	uint8_t raw_comp_press_data[3];
	uint8_t comp_press_write_data = TEMP_WRITE_VAL + (OSS << 6);
 8000fd6:	232e      	movs	r3, #46	@ 0x2e
 8000fd8:	73fb      	strb	r3, [r7, #15]

	HAL_I2C_Mem_Write(hi2c,BMP_ADDR,(uint16_t) TEMP_REG_ADDR,1,&comp_press_write_data,1,1000);
 8000fda:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000fde:	9302      	str	r3, [sp, #8]
 8000fe0:	2301      	movs	r3, #1
 8000fe2:	9301      	str	r3, [sp, #4]
 8000fe4:	f107 030f 	add.w	r3, r7, #15
 8000fe8:	9300      	str	r3, [sp, #0]
 8000fea:	2301      	movs	r3, #1
 8000fec:	22f4      	movs	r2, #244	@ 0xf4
 8000fee:	21ee      	movs	r1, #238	@ 0xee
 8000ff0:	6878      	ldr	r0, [r7, #4]
 8000ff2:	f003 f89d 	bl	8004130 <HAL_I2C_Mem_Write>

	switch (OSS)
	{
		case (0):
			HAL_Delay (5);
 8000ff6:	2005      	movs	r0, #5
 8000ff8:	f001 fa5e 	bl	80024b8 <HAL_Delay>
			break;
 8000ffc:	bf00      	nop
		case (3):
			HAL_Delay (26);
			break;
	}

	HAL_I2C_Mem_Read(hi2c,BMP_ADDR,(uint16_t) PRESS_REG_ADDR,1,raw_comp_press_data,3,1000);
 8000ffe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001002:	9302      	str	r3, [sp, #8]
 8001004:	2303      	movs	r3, #3
 8001006:	9301      	str	r3, [sp, #4]
 8001008:	f107 0310 	add.w	r3, r7, #16
 800100c:	9300      	str	r3, [sp, #0]
 800100e:	2301      	movs	r3, #1
 8001010:	22f6      	movs	r2, #246	@ 0xf6
 8001012:	21ee      	movs	r1, #238	@ 0xee
 8001014:	6878      	ldr	r0, [r7, #4]
 8001016:	f003 f99f 	bl	8004358 <HAL_I2C_Mem_Read>

	uint32_t uncomp_press = (((raw_comp_press_data[0]<<16)+(raw_comp_press_data[1]<<8)+raw_comp_press_data[2]) >> (8-OSS));
 800101a:	7c3b      	ldrb	r3, [r7, #16]
 800101c:	041a      	lsls	r2, r3, #16
 800101e:	7c7b      	ldrb	r3, [r7, #17]
 8001020:	021b      	lsls	r3, r3, #8
 8001022:	4413      	add	r3, r2
 8001024:	7cba      	ldrb	r2, [r7, #18]
 8001026:	4413      	add	r3, r2
 8001028:	121b      	asrs	r3, r3, #8
 800102a:	617b      	str	r3, [r7, #20]
	return uncomp_press;
 800102c:	697b      	ldr	r3, [r7, #20]

}
 800102e:	4618      	mov	r0, r3
 8001030:	3718      	adds	r7, #24
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}
	...

08001038 <get_comp_temp>:

float get_comp_temp(uint16_t uncomp_temp, bmp_calib_t *bmp_calib_data)
{
 8001038:	b5b0      	push	{r4, r5, r7, lr}
 800103a:	b086      	sub	sp, #24
 800103c:	af00      	add	r7, sp, #0
 800103e:	4603      	mov	r3, r0
 8001040:	6039      	str	r1, [r7, #0]
 8001042:	80fb      	strh	r3, [r7, #6]
	int32_t X1 = ((uncomp_temp-bmp_calib_data->AC6) * (bmp_calib_data->AC5/(pow(2,15))));
 8001044:	88fb      	ldrh	r3, [r7, #6]
 8001046:	683a      	ldr	r2, [r7, #0]
 8001048:	8952      	ldrh	r2, [r2, #10]
 800104a:	1a9b      	subs	r3, r3, r2
 800104c:	4618      	mov	r0, r3
 800104e:	f7ff fa0f 	bl	8000470 <__aeabi_i2d>
 8001052:	4604      	mov	r4, r0
 8001054:	460d      	mov	r5, r1
 8001056:	683b      	ldr	r3, [r7, #0]
 8001058:	891b      	ldrh	r3, [r3, #8]
 800105a:	4618      	mov	r0, r3
 800105c:	f7ff fa08 	bl	8000470 <__aeabi_i2d>
 8001060:	f04f 0200 	mov.w	r2, #0
 8001064:	4b2d      	ldr	r3, [pc, #180]	@ (800111c <get_comp_temp+0xe4>)
 8001066:	f7ff fb97 	bl	8000798 <__aeabi_ddiv>
 800106a:	4602      	mov	r2, r0
 800106c:	460b      	mov	r3, r1
 800106e:	4620      	mov	r0, r4
 8001070:	4629      	mov	r1, r5
 8001072:	f7ff fa67 	bl	8000544 <__aeabi_dmul>
 8001076:	4602      	mov	r2, r0
 8001078:	460b      	mov	r3, r1
 800107a:	4610      	mov	r0, r2
 800107c:	4619      	mov	r1, r3
 800107e:	f7ff fc73 	bl	8000968 <__aeabi_d2iz>
 8001082:	4603      	mov	r3, r0
 8001084:	617b      	str	r3, [r7, #20]
	int32_t X2 = ((bmp_calib_data->MC*(pow(2,11))) / (X1+bmp_calib_data->MD));
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	8a5b      	ldrh	r3, [r3, #18]
 800108a:	4618      	mov	r0, r3
 800108c:	f7ff f9f0 	bl	8000470 <__aeabi_i2d>
 8001090:	f04f 0200 	mov.w	r2, #0
 8001094:	4b22      	ldr	r3, [pc, #136]	@ (8001120 <get_comp_temp+0xe8>)
 8001096:	f7ff fa55 	bl	8000544 <__aeabi_dmul>
 800109a:	4602      	mov	r2, r0
 800109c:	460b      	mov	r3, r1
 800109e:	4614      	mov	r4, r2
 80010a0:	461d      	mov	r5, r3
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	8a9b      	ldrh	r3, [r3, #20]
 80010a6:	461a      	mov	r2, r3
 80010a8:	697b      	ldr	r3, [r7, #20]
 80010aa:	4413      	add	r3, r2
 80010ac:	4618      	mov	r0, r3
 80010ae:	f7ff f9df 	bl	8000470 <__aeabi_i2d>
 80010b2:	4602      	mov	r2, r0
 80010b4:	460b      	mov	r3, r1
 80010b6:	4620      	mov	r0, r4
 80010b8:	4629      	mov	r1, r5
 80010ba:	f7ff fb6d 	bl	8000798 <__aeabi_ddiv>
 80010be:	4602      	mov	r2, r0
 80010c0:	460b      	mov	r3, r1
 80010c2:	4610      	mov	r0, r2
 80010c4:	4619      	mov	r1, r3
 80010c6:	f7ff fc4f 	bl	8000968 <__aeabi_d2iz>
 80010ca:	4603      	mov	r3, r0
 80010cc:	613b      	str	r3, [r7, #16]
	int32_t B5 = X1+X2;
 80010ce:	697a      	ldr	r2, [r7, #20]
 80010d0:	693b      	ldr	r3, [r7, #16]
 80010d2:	4413      	add	r3, r2
 80010d4:	60fb      	str	r3, [r7, #12]
	float comp_temp = ((B5+8)/(pow(2,4)))/10.0;
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	3308      	adds	r3, #8
 80010da:	4618      	mov	r0, r3
 80010dc:	f7ff f9c8 	bl	8000470 <__aeabi_i2d>
 80010e0:	f04f 0200 	mov.w	r2, #0
 80010e4:	4b0f      	ldr	r3, [pc, #60]	@ (8001124 <get_comp_temp+0xec>)
 80010e6:	f7ff fb57 	bl	8000798 <__aeabi_ddiv>
 80010ea:	4602      	mov	r2, r0
 80010ec:	460b      	mov	r3, r1
 80010ee:	4610      	mov	r0, r2
 80010f0:	4619      	mov	r1, r3
 80010f2:	f04f 0200 	mov.w	r2, #0
 80010f6:	4b0c      	ldr	r3, [pc, #48]	@ (8001128 <get_comp_temp+0xf0>)
 80010f8:	f7ff fb4e 	bl	8000798 <__aeabi_ddiv>
 80010fc:	4602      	mov	r2, r0
 80010fe:	460b      	mov	r3, r1
 8001100:	4610      	mov	r0, r2
 8001102:	4619      	mov	r1, r3
 8001104:	f7ff fc78 	bl	80009f8 <__aeabi_d2f>
 8001108:	4603      	mov	r3, r0
 800110a:	60bb      	str	r3, [r7, #8]
	return comp_temp;
 800110c:	68bb      	ldr	r3, [r7, #8]
 800110e:	ee07 3a90 	vmov	s15, r3
}
 8001112:	eeb0 0a67 	vmov.f32	s0, s15
 8001116:	3718      	adds	r7, #24
 8001118:	46bd      	mov	sp, r7
 800111a:	bdb0      	pop	{r4, r5, r7, pc}
 800111c:	40e00000 	.word	0x40e00000
 8001120:	40a00000 	.word	0x40a00000
 8001124:	40300000 	.word	0x40300000
 8001128:	40240000 	.word	0x40240000

0800112c <get_comp_press>:

float get_comp_press(uint16_t uncomp_press, uint16_t uncomp_temp, bmp_calib_t *bmp_calib_data)
{
 800112c:	b5b0      	push	{r4, r5, r7, lr}
 800112e:	b08c      	sub	sp, #48	@ 0x30
 8001130:	af00      	add	r7, sp, #0
 8001132:	4603      	mov	r3, r0
 8001134:	603a      	str	r2, [r7, #0]
 8001136:	80fb      	strh	r3, [r7, #6]
 8001138:	460b      	mov	r3, r1
 800113a:	80bb      	strh	r3, [r7, #4]
	float comp_press = 0.0;
 800113c:	f04f 0300 	mov.w	r3, #0
 8001140:	62fb      	str	r3, [r7, #44]	@ 0x2c
	int32_t X1 = ((uncomp_temp-bmp_calib_data->AC6) * (bmp_calib_data->AC5/(pow(2,15))));
 8001142:	88bb      	ldrh	r3, [r7, #4]
 8001144:	683a      	ldr	r2, [r7, #0]
 8001146:	8952      	ldrh	r2, [r2, #10]
 8001148:	1a9b      	subs	r3, r3, r2
 800114a:	4618      	mov	r0, r3
 800114c:	f7ff f990 	bl	8000470 <__aeabi_i2d>
 8001150:	4604      	mov	r4, r0
 8001152:	460d      	mov	r5, r1
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	891b      	ldrh	r3, [r3, #8]
 8001158:	4618      	mov	r0, r3
 800115a:	f7ff f989 	bl	8000470 <__aeabi_i2d>
 800115e:	f04f 0200 	mov.w	r2, #0
 8001162:	4bc7      	ldr	r3, [pc, #796]	@ (8001480 <get_comp_press+0x354>)
 8001164:	f7ff fb18 	bl	8000798 <__aeabi_ddiv>
 8001168:	4602      	mov	r2, r0
 800116a:	460b      	mov	r3, r1
 800116c:	4620      	mov	r0, r4
 800116e:	4629      	mov	r1, r5
 8001170:	f7ff f9e8 	bl	8000544 <__aeabi_dmul>
 8001174:	4602      	mov	r2, r0
 8001176:	460b      	mov	r3, r1
 8001178:	4610      	mov	r0, r2
 800117a:	4619      	mov	r1, r3
 800117c:	f7ff fbf4 	bl	8000968 <__aeabi_d2iz>
 8001180:	4603      	mov	r3, r0
 8001182:	62bb      	str	r3, [r7, #40]	@ 0x28
	int32_t X2 = ((bmp_calib_data->MC*(pow(2,11))) / (X1+bmp_calib_data->MD));
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	8a5b      	ldrh	r3, [r3, #18]
 8001188:	4618      	mov	r0, r3
 800118a:	f7ff f971 	bl	8000470 <__aeabi_i2d>
 800118e:	f04f 0200 	mov.w	r2, #0
 8001192:	4bbc      	ldr	r3, [pc, #752]	@ (8001484 <get_comp_press+0x358>)
 8001194:	f7ff f9d6 	bl	8000544 <__aeabi_dmul>
 8001198:	4602      	mov	r2, r0
 800119a:	460b      	mov	r3, r1
 800119c:	4614      	mov	r4, r2
 800119e:	461d      	mov	r5, r3
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	8a9b      	ldrh	r3, [r3, #20]
 80011a4:	461a      	mov	r2, r3
 80011a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80011a8:	4413      	add	r3, r2
 80011aa:	4618      	mov	r0, r3
 80011ac:	f7ff f960 	bl	8000470 <__aeabi_i2d>
 80011b0:	4602      	mov	r2, r0
 80011b2:	460b      	mov	r3, r1
 80011b4:	4620      	mov	r0, r4
 80011b6:	4629      	mov	r1, r5
 80011b8:	f7ff faee 	bl	8000798 <__aeabi_ddiv>
 80011bc:	4602      	mov	r2, r0
 80011be:	460b      	mov	r3, r1
 80011c0:	4610      	mov	r0, r2
 80011c2:	4619      	mov	r1, r3
 80011c4:	f7ff fbd0 	bl	8000968 <__aeabi_d2iz>
 80011c8:	4603      	mov	r3, r0
 80011ca:	627b      	str	r3, [r7, #36]	@ 0x24
	int32_t B5 = X1+X2;
 80011cc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80011ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011d0:	4413      	add	r3, r2
 80011d2:	623b      	str	r3, [r7, #32]
	int32_t B6 = B5-4000;
 80011d4:	6a3b      	ldr	r3, [r7, #32]
 80011d6:	f5a3 637a 	sub.w	r3, r3, #4000	@ 0xfa0
 80011da:	61fb      	str	r3, [r7, #28]
	X1 = (bmp_calib_data->B2 * (B6*B6/(pow(2,12))))/(pow(2,11));
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	89db      	ldrh	r3, [r3, #14]
 80011e0:	4618      	mov	r0, r3
 80011e2:	f7ff f945 	bl	8000470 <__aeabi_i2d>
 80011e6:	4604      	mov	r4, r0
 80011e8:	460d      	mov	r5, r1
 80011ea:	69fb      	ldr	r3, [r7, #28]
 80011ec:	fb03 f303 	mul.w	r3, r3, r3
 80011f0:	4618      	mov	r0, r3
 80011f2:	f7ff f93d 	bl	8000470 <__aeabi_i2d>
 80011f6:	f04f 0200 	mov.w	r2, #0
 80011fa:	4ba3      	ldr	r3, [pc, #652]	@ (8001488 <get_comp_press+0x35c>)
 80011fc:	f7ff facc 	bl	8000798 <__aeabi_ddiv>
 8001200:	4602      	mov	r2, r0
 8001202:	460b      	mov	r3, r1
 8001204:	4620      	mov	r0, r4
 8001206:	4629      	mov	r1, r5
 8001208:	f7ff f99c 	bl	8000544 <__aeabi_dmul>
 800120c:	4602      	mov	r2, r0
 800120e:	460b      	mov	r3, r1
 8001210:	4610      	mov	r0, r2
 8001212:	4619      	mov	r1, r3
 8001214:	f04f 0200 	mov.w	r2, #0
 8001218:	4b9a      	ldr	r3, [pc, #616]	@ (8001484 <get_comp_press+0x358>)
 800121a:	f7ff fabd 	bl	8000798 <__aeabi_ddiv>
 800121e:	4602      	mov	r2, r0
 8001220:	460b      	mov	r3, r1
 8001222:	4610      	mov	r0, r2
 8001224:	4619      	mov	r1, r3
 8001226:	f7ff fb9f 	bl	8000968 <__aeabi_d2iz>
 800122a:	4603      	mov	r3, r0
 800122c:	62bb      	str	r3, [r7, #40]	@ 0x28
	X2 = bmp_calib_data->AC2*B6/(pow(2,11));
 800122e:	683b      	ldr	r3, [r7, #0]
 8001230:	885b      	ldrh	r3, [r3, #2]
 8001232:	461a      	mov	r2, r3
 8001234:	69fb      	ldr	r3, [r7, #28]
 8001236:	fb02 f303 	mul.w	r3, r2, r3
 800123a:	4618      	mov	r0, r3
 800123c:	f7ff f918 	bl	8000470 <__aeabi_i2d>
 8001240:	f04f 0200 	mov.w	r2, #0
 8001244:	4b8f      	ldr	r3, [pc, #572]	@ (8001484 <get_comp_press+0x358>)
 8001246:	f7ff faa7 	bl	8000798 <__aeabi_ddiv>
 800124a:	4602      	mov	r2, r0
 800124c:	460b      	mov	r3, r1
 800124e:	4610      	mov	r0, r2
 8001250:	4619      	mov	r1, r3
 8001252:	f7ff fb89 	bl	8000968 <__aeabi_d2iz>
 8001256:	4603      	mov	r3, r0
 8001258:	627b      	str	r3, [r7, #36]	@ 0x24
	int32_t X3 = X1+X2;
 800125a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800125c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800125e:	4413      	add	r3, r2
 8001260:	61bb      	str	r3, [r7, #24]
	int32_t B3 = (((bmp_calib_data->AC1*4+X3)<<OSS)+2)/4;
 8001262:	683b      	ldr	r3, [r7, #0]
 8001264:	881b      	ldrh	r3, [r3, #0]
 8001266:	009a      	lsls	r2, r3, #2
 8001268:	69bb      	ldr	r3, [r7, #24]
 800126a:	4413      	add	r3, r2
 800126c:	3302      	adds	r3, #2
 800126e:	2b00      	cmp	r3, #0
 8001270:	da00      	bge.n	8001274 <get_comp_press+0x148>
 8001272:	3303      	adds	r3, #3
 8001274:	109b      	asrs	r3, r3, #2
 8001276:	617b      	str	r3, [r7, #20]
	X1 = bmp_calib_data->AC3*B6/pow(2,13);
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	889b      	ldrh	r3, [r3, #4]
 800127c:	461a      	mov	r2, r3
 800127e:	69fb      	ldr	r3, [r7, #28]
 8001280:	fb02 f303 	mul.w	r3, r2, r3
 8001284:	4618      	mov	r0, r3
 8001286:	f7ff f8f3 	bl	8000470 <__aeabi_i2d>
 800128a:	f04f 0200 	mov.w	r2, #0
 800128e:	4b7f      	ldr	r3, [pc, #508]	@ (800148c <get_comp_press+0x360>)
 8001290:	f7ff fa82 	bl	8000798 <__aeabi_ddiv>
 8001294:	4602      	mov	r2, r0
 8001296:	460b      	mov	r3, r1
 8001298:	4610      	mov	r0, r2
 800129a:	4619      	mov	r1, r3
 800129c:	f7ff fb64 	bl	8000968 <__aeabi_d2iz>
 80012a0:	4603      	mov	r3, r0
 80012a2:	62bb      	str	r3, [r7, #40]	@ 0x28
	X2 = (bmp_calib_data->B1 * (B6*B6/(pow(2,12))))/(pow(2,16));
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	899b      	ldrh	r3, [r3, #12]
 80012a8:	4618      	mov	r0, r3
 80012aa:	f7ff f8e1 	bl	8000470 <__aeabi_i2d>
 80012ae:	4604      	mov	r4, r0
 80012b0:	460d      	mov	r5, r1
 80012b2:	69fb      	ldr	r3, [r7, #28]
 80012b4:	fb03 f303 	mul.w	r3, r3, r3
 80012b8:	4618      	mov	r0, r3
 80012ba:	f7ff f8d9 	bl	8000470 <__aeabi_i2d>
 80012be:	f04f 0200 	mov.w	r2, #0
 80012c2:	4b71      	ldr	r3, [pc, #452]	@ (8001488 <get_comp_press+0x35c>)
 80012c4:	f7ff fa68 	bl	8000798 <__aeabi_ddiv>
 80012c8:	4602      	mov	r2, r0
 80012ca:	460b      	mov	r3, r1
 80012cc:	4620      	mov	r0, r4
 80012ce:	4629      	mov	r1, r5
 80012d0:	f7ff f938 	bl	8000544 <__aeabi_dmul>
 80012d4:	4602      	mov	r2, r0
 80012d6:	460b      	mov	r3, r1
 80012d8:	4610      	mov	r0, r2
 80012da:	4619      	mov	r1, r3
 80012dc:	f04f 0200 	mov.w	r2, #0
 80012e0:	4b6b      	ldr	r3, [pc, #428]	@ (8001490 <get_comp_press+0x364>)
 80012e2:	f7ff fa59 	bl	8000798 <__aeabi_ddiv>
 80012e6:	4602      	mov	r2, r0
 80012e8:	460b      	mov	r3, r1
 80012ea:	4610      	mov	r0, r2
 80012ec:	4619      	mov	r1, r3
 80012ee:	f7ff fb3b 	bl	8000968 <__aeabi_d2iz>
 80012f2:	4603      	mov	r3, r0
 80012f4:	627b      	str	r3, [r7, #36]	@ 0x24
	X3 = ((X1+X2)+2)/pow(2,2);
 80012f6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80012f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012fa:	4413      	add	r3, r2
 80012fc:	3302      	adds	r3, #2
 80012fe:	4618      	mov	r0, r3
 8001300:	f7ff f8b6 	bl	8000470 <__aeabi_i2d>
 8001304:	f04f 0200 	mov.w	r2, #0
 8001308:	4b62      	ldr	r3, [pc, #392]	@ (8001494 <get_comp_press+0x368>)
 800130a:	f7ff fa45 	bl	8000798 <__aeabi_ddiv>
 800130e:	4602      	mov	r2, r0
 8001310:	460b      	mov	r3, r1
 8001312:	4610      	mov	r0, r2
 8001314:	4619      	mov	r1, r3
 8001316:	f7ff fb27 	bl	8000968 <__aeabi_d2iz>
 800131a:	4603      	mov	r3, r0
 800131c:	61bb      	str	r3, [r7, #24]
	uint32_t B4 = bmp_calib_data->AC4*(uint32_t)(X3+32768)/(pow(2,15));
 800131e:	683b      	ldr	r3, [r7, #0]
 8001320:	88db      	ldrh	r3, [r3, #6]
 8001322:	461a      	mov	r2, r3
 8001324:	69bb      	ldr	r3, [r7, #24]
 8001326:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 800132a:	fb02 f303 	mul.w	r3, r2, r3
 800132e:	4618      	mov	r0, r3
 8001330:	f7ff f88e 	bl	8000450 <__aeabi_ui2d>
 8001334:	f04f 0200 	mov.w	r2, #0
 8001338:	4b51      	ldr	r3, [pc, #324]	@ (8001480 <get_comp_press+0x354>)
 800133a:	f7ff fa2d 	bl	8000798 <__aeabi_ddiv>
 800133e:	4602      	mov	r2, r0
 8001340:	460b      	mov	r3, r1
 8001342:	4610      	mov	r0, r2
 8001344:	4619      	mov	r1, r3
 8001346:	f7ff fb37 	bl	80009b8 <__aeabi_d2uiz>
 800134a:	4603      	mov	r3, r0
 800134c:	613b      	str	r3, [r7, #16]
	int32_t B7 = ((uint32_t)uncomp_press-B3)*(50000>>OSS);
 800134e:	88fa      	ldrh	r2, [r7, #6]
 8001350:	697b      	ldr	r3, [r7, #20]
 8001352:	1ad3      	subs	r3, r2, r3
 8001354:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8001358:	fb02 f303 	mul.w	r3, r2, r3
 800135c:	60fb      	str	r3, [r7, #12]

	if (B7<0x80000000)
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	2b00      	cmp	r3, #0
 8001362:	db0c      	blt.n	800137e <get_comp_press+0x252>
		comp_press = (B7*2)/B4;
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	005b      	lsls	r3, r3, #1
 8001368:	461a      	mov	r2, r3
 800136a:	693b      	ldr	r3, [r7, #16]
 800136c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001370:	ee07 3a90 	vmov	s15, r3
 8001374:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001378:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
 800137c:	e00a      	b.n	8001394 <get_comp_press+0x268>
	else
		comp_press = (B7/B4)*2;
 800137e:	68fa      	ldr	r2, [r7, #12]
 8001380:	693b      	ldr	r3, [r7, #16]
 8001382:	fbb2 f3f3 	udiv	r3, r2, r3
 8001386:	005b      	lsls	r3, r3, #1
 8001388:	ee07 3a90 	vmov	s15, r3
 800138c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001390:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c

	X1 = (comp_press/(pow(2,8)))*(comp_press/(pow(2,8)));
 8001394:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8001396:	f7ff f87d 	bl	8000494 <__aeabi_f2d>
 800139a:	f04f 0200 	mov.w	r2, #0
 800139e:	4b3e      	ldr	r3, [pc, #248]	@ (8001498 <get_comp_press+0x36c>)
 80013a0:	f7ff f9fa 	bl	8000798 <__aeabi_ddiv>
 80013a4:	4602      	mov	r2, r0
 80013a6:	460b      	mov	r3, r1
 80013a8:	4614      	mov	r4, r2
 80013aa:	461d      	mov	r5, r3
 80013ac:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80013ae:	f7ff f871 	bl	8000494 <__aeabi_f2d>
 80013b2:	f04f 0200 	mov.w	r2, #0
 80013b6:	4b38      	ldr	r3, [pc, #224]	@ (8001498 <get_comp_press+0x36c>)
 80013b8:	f7ff f9ee 	bl	8000798 <__aeabi_ddiv>
 80013bc:	4602      	mov	r2, r0
 80013be:	460b      	mov	r3, r1
 80013c0:	4620      	mov	r0, r4
 80013c2:	4629      	mov	r1, r5
 80013c4:	f7ff f8be 	bl	8000544 <__aeabi_dmul>
 80013c8:	4602      	mov	r2, r0
 80013ca:	460b      	mov	r3, r1
 80013cc:	4610      	mov	r0, r2
 80013ce:	4619      	mov	r1, r3
 80013d0:	f7ff faca 	bl	8000968 <__aeabi_d2iz>
 80013d4:	4603      	mov	r3, r0
 80013d6:	62bb      	str	r3, [r7, #40]	@ 0x28
	X1 = (X1*3038)/(pow(2,16));
 80013d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80013da:	f640 32de 	movw	r2, #3038	@ 0xbde
 80013de:	fb02 f303 	mul.w	r3, r2, r3
 80013e2:	4618      	mov	r0, r3
 80013e4:	f7ff f844 	bl	8000470 <__aeabi_i2d>
 80013e8:	f04f 0200 	mov.w	r2, #0
 80013ec:	4b28      	ldr	r3, [pc, #160]	@ (8001490 <get_comp_press+0x364>)
 80013ee:	f7ff f9d3 	bl	8000798 <__aeabi_ddiv>
 80013f2:	4602      	mov	r2, r0
 80013f4:	460b      	mov	r3, r1
 80013f6:	4610      	mov	r0, r2
 80013f8:	4619      	mov	r1, r3
 80013fa:	f7ff fab5 	bl	8000968 <__aeabi_d2iz>
 80013fe:	4603      	mov	r3, r0
 8001400:	62bb      	str	r3, [r7, #40]	@ 0x28
	X2 = (-7357*comp_press)/(pow(2,16));
 8001402:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001406:	ed9f 7a25 	vldr	s14, [pc, #148]	@ 800149c <get_comp_press+0x370>
 800140a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800140e:	ee17 0a90 	vmov	r0, s15
 8001412:	f7ff f83f 	bl	8000494 <__aeabi_f2d>
 8001416:	f04f 0200 	mov.w	r2, #0
 800141a:	4b1d      	ldr	r3, [pc, #116]	@ (8001490 <get_comp_press+0x364>)
 800141c:	f7ff f9bc 	bl	8000798 <__aeabi_ddiv>
 8001420:	4602      	mov	r2, r0
 8001422:	460b      	mov	r3, r1
 8001424:	4610      	mov	r0, r2
 8001426:	4619      	mov	r1, r3
 8001428:	f7ff fa9e 	bl	8000968 <__aeabi_d2iz>
 800142c:	4603      	mov	r3, r0
 800142e:	627b      	str	r3, [r7, #36]	@ 0x24
	comp_press = comp_press + (X1+X2+3791)/(pow(2,4));
 8001430:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8001432:	f7ff f82f 	bl	8000494 <__aeabi_f2d>
 8001436:	4604      	mov	r4, r0
 8001438:	460d      	mov	r5, r1
 800143a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800143c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800143e:	4413      	add	r3, r2
 8001440:	f603 63cf 	addw	r3, r3, #3791	@ 0xecf
 8001444:	4618      	mov	r0, r3
 8001446:	f7ff f813 	bl	8000470 <__aeabi_i2d>
 800144a:	f04f 0200 	mov.w	r2, #0
 800144e:	4b14      	ldr	r3, [pc, #80]	@ (80014a0 <get_comp_press+0x374>)
 8001450:	f7ff f9a2 	bl	8000798 <__aeabi_ddiv>
 8001454:	4602      	mov	r2, r0
 8001456:	460b      	mov	r3, r1
 8001458:	4620      	mov	r0, r4
 800145a:	4629      	mov	r1, r5
 800145c:	f7fe febc 	bl	80001d8 <__adddf3>
 8001460:	4602      	mov	r2, r0
 8001462:	460b      	mov	r3, r1
 8001464:	4610      	mov	r0, r2
 8001466:	4619      	mov	r1, r3
 8001468:	f7ff fac6 	bl	80009f8 <__aeabi_d2f>
 800146c:	4603      	mov	r3, r0
 800146e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	return comp_press;
 8001470:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001472:	ee07 3a90 	vmov	s15, r3
}
 8001476:	eeb0 0a67 	vmov.f32	s0, s15
 800147a:	3730      	adds	r7, #48	@ 0x30
 800147c:	46bd      	mov	sp, r7
 800147e:	bdb0      	pop	{r4, r5, r7, pc}
 8001480:	40e00000 	.word	0x40e00000
 8001484:	40a00000 	.word	0x40a00000
 8001488:	40b00000 	.word	0x40b00000
 800148c:	40c00000 	.word	0x40c00000
 8001490:	40f00000 	.word	0x40f00000
 8001494:	40100000 	.word	0x40100000
 8001498:	40700000 	.word	0x40700000
 800149c:	c5e5e800 	.word	0xc5e5e800
 80014a0:	40300000 	.word	0x40300000

080014a4 <HAL_DelayUs>:
		"TIMEOUT",
		"ERROR",
		"CHECKSUM MISMATCH"
};

static void HAL_DelayUs(TIM_HandleTypeDef *tim, uint16_t us) {
 80014a4:	b480      	push	{r7}
 80014a6:	b083      	sub	sp, #12
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
 80014ac:	460b      	mov	r3, r1
 80014ae:	807b      	strh	r3, [r7, #2]
	__HAL_TIM_SET_COUNTER(tim, 0);
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	2200      	movs	r2, #0
 80014b6:	625a      	str	r2, [r3, #36]	@ 0x24
	while(__HAL_TIM_GET_COUNTER(tim) < us);
 80014b8:	bf00      	nop
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80014c0:	887b      	ldrh	r3, [r7, #2]
 80014c2:	429a      	cmp	r2, r3
 80014c4:	d3f9      	bcc.n	80014ba <HAL_DelayUs+0x16>
}
 80014c6:	bf00      	nop
 80014c8:	bf00      	nop
 80014ca:	370c      	adds	r7, #12
 80014cc:	46bd      	mov	sp, r7
 80014ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d2:	4770      	bx	lr

080014d4 <DHT11_ObserveState>:

static bool DHT11_ObserveState(DHT11_InitTypeDef *DHT11, uint8_t FinalState) {
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b082      	sub	sp, #8
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
 80014dc:	460b      	mov	r3, r1
 80014de:	70fb      	strb	r3, [r7, #3]
	__HAL_TIM_SET_COUNTER(DHT11->_Tim, 0);
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	691b      	ldr	r3, [r3, #16]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	2200      	movs	r2, #0
 80014e8:	625a      	str	r2, [r3, #36]	@ 0x24
	while(__HAL_TIM_GET_COUNTER(DHT11->_Tim) < DHT11_MAX_TIMEOUT) {
 80014ea:	e00e      	b.n	800150a <DHT11_ObserveState+0x36>
		if(HAL_GPIO_ReadPin(DHT11->_GPIOx, DHT11->_Pin) == FinalState) return true;
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	68da      	ldr	r2, [r3, #12]
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	895b      	ldrh	r3, [r3, #10]
 80014f4:	4619      	mov	r1, r3
 80014f6:	4610      	mov	r0, r2
 80014f8:	f002 fd34 	bl	8003f64 <HAL_GPIO_ReadPin>
 80014fc:	4603      	mov	r3, r0
 80014fe:	461a      	mov	r2, r3
 8001500:	78fb      	ldrb	r3, [r7, #3]
 8001502:	4293      	cmp	r3, r2
 8001504:	d101      	bne.n	800150a <DHT11_ObserveState+0x36>
 8001506:	2301      	movs	r3, #1
 8001508:	e006      	b.n	8001518 <DHT11_ObserveState+0x44>
	while(__HAL_TIM_GET_COUNTER(DHT11->_Tim) < DHT11_MAX_TIMEOUT) {
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	691b      	ldr	r3, [r3, #16]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001512:	2b63      	cmp	r3, #99	@ 0x63
 8001514:	d9ea      	bls.n	80014ec <DHT11_ObserveState+0x18>
	}

	return false;
 8001516:	2300      	movs	r3, #0
}
 8001518:	4618      	mov	r0, r3
 800151a:	3708      	adds	r7, #8
 800151c:	46bd      	mov	sp, r7
 800151e:	bd80      	pop	{r7, pc}

08001520 <DHT11_SetPinMode>:

static void DHT11_SetPinMode(DHT11_InitTypeDef *DHT11, uint8_t MODE) {
 8001520:	b580      	push	{r7, lr}
 8001522:	b088      	sub	sp, #32
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
 8001528:	460b      	mov	r3, r1
 800152a:	70fb      	strb	r3, [r7, #3]
	GPIO_InitTypeDef GPIO_CFG = {
 800152c:	f107 030c 	add.w	r3, r7, #12
 8001530:	2200      	movs	r2, #0
 8001532:	601a      	str	r2, [r3, #0]
 8001534:	605a      	str	r2, [r3, #4]
 8001536:	609a      	str	r2, [r3, #8]
 8001538:	60da      	str	r2, [r3, #12]
 800153a:	611a      	str	r2, [r3, #16]
			.Mode = MODE?GPIO_MODE_INPUT:GPIO_MODE_OUTPUT_PP,
			.Pin = DHT11->_Pin,
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	895b      	ldrh	r3, [r3, #10]
	GPIO_InitTypeDef GPIO_CFG = {
 8001540:	60fb      	str	r3, [r7, #12]
			.Mode = MODE?GPIO_MODE_INPUT:GPIO_MODE_OUTPUT_PP,
 8001542:	78fb      	ldrb	r3, [r7, #3]
 8001544:	2b00      	cmp	r3, #0
 8001546:	bf0c      	ite	eq
 8001548:	2301      	moveq	r3, #1
 800154a:	2300      	movne	r3, #0
 800154c:	b2db      	uxtb	r3, r3
	GPIO_InitTypeDef GPIO_CFG = {
 800154e:	613b      	str	r3, [r7, #16]
			.Pull = GPIO_NOPULL,
			.Speed = GPIO_SPEED_FREQ_LOW
	};

	HAL_GPIO_Init(DHT11->_GPIOx, &GPIO_CFG);
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	68db      	ldr	r3, [r3, #12]
 8001554:	f107 020c 	add.w	r2, r7, #12
 8001558:	4611      	mov	r1, r2
 800155a:	4618      	mov	r0, r3
 800155c:	f002 fb98 	bl	8003c90 <HAL_GPIO_Init>
}
 8001560:	bf00      	nop
 8001562:	3720      	adds	r7, #32
 8001564:	46bd      	mov	sp, r7
 8001566:	bd80      	pop	{r7, pc}

08001568 <HAL_DHT11_Init>:
void HAL_DHT11_Init(
		DHT11_InitTypeDef *DHT11,
		GPIO_TypeDef *GPIOx,
		uint16_t GPIO_Pin,
		TIM_HandleTypeDef *TIM
) {
 8001568:	b580      	push	{r7, lr}
 800156a:	b084      	sub	sp, #16
 800156c:	af00      	add	r7, sp, #0
 800156e:	60f8      	str	r0, [r7, #12]
 8001570:	60b9      	str	r1, [r7, #8]
 8001572:	603b      	str	r3, [r7, #0]
 8001574:	4613      	mov	r3, r2
 8001576:	80fb      	strh	r3, [r7, #6]
	DHT11->_GPIOx = GPIOx;
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	68ba      	ldr	r2, [r7, #8]
 800157c:	60da      	str	r2, [r3, #12]
	DHT11->_Pin = GPIO_Pin;
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	88fa      	ldrh	r2, [r7, #6]
 8001582:	815a      	strh	r2, [r3, #10]
	DHT11->_Tim = TIM;
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	683a      	ldr	r2, [r7, #0]
 8001588:	611a      	str	r2, [r3, #16]
	DHT11->Temperature = 0.0f;
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	f04f 0200 	mov.w	r2, #0
 8001590:	601a      	str	r2, [r3, #0]
	DHT11->Humidity = 0.0f;
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	f04f 0200 	mov.w	r2, #0
 8001598:	605a      	str	r2, [r3, #4]

	HAL_TIM_Base_Start(DHT11->_Tim);
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	691b      	ldr	r3, [r3, #16]
 800159e:	4618      	mov	r0, r3
 80015a0:	f005 f9b4 	bl	800690c <HAL_TIM_Base_Start>
}
 80015a4:	bf00      	nop
 80015a6:	3710      	adds	r7, #16
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bd80      	pop	{r7, pc}

080015ac <DHT11_ReadData>:

const char* const HAL_DHT11_GetErrorMsg(DHT11_StatusTypeDef Status) {
	return ErrorMsg[Status];
}

static DHT11_StatusTypeDef DHT11_ReadData(DHT11_InitTypeDef *DHT11) {
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b084      	sub	sp, #16
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
	uint8_t Bits = 0;
 80015b4:	2300      	movs	r3, #0
 80015b6:	73fb      	strb	r3, [r7, #15]
	uint8_t Packets[DHT11_MAX_BYTE_PACKETS] = {0};
 80015b8:	2300      	movs	r3, #0
 80015ba:	60bb      	str	r3, [r7, #8]
 80015bc:	2300      	movs	r3, #0
 80015be:	733b      	strb	r3, [r7, #12]
	uint8_t PacketIndex = 0;
 80015c0:	2300      	movs	r3, #0
 80015c2:	73bb      	strb	r3, [r7, #14]

	DHT11_SetPinMode(DHT11, DHT11_PIN_OUTPUT);
 80015c4:	2100      	movs	r1, #0
 80015c6:	6878      	ldr	r0, [r7, #4]
 80015c8:	f7ff ffaa 	bl	8001520 <DHT11_SetPinMode>
	// PULLING the Line to Low and waits for 20ms
	HAL_GPIO_WritePin(DHT11->_GPIOx, DHT11->_Pin, GPIO_PIN_RESET);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	68d8      	ldr	r0, [r3, #12]
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	895b      	ldrh	r3, [r3, #10]
 80015d4:	2200      	movs	r2, #0
 80015d6:	4619      	mov	r1, r3
 80015d8:	f002 fcdc 	bl	8003f94 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 80015dc:	2014      	movs	r0, #20
 80015de:	f000 ff6b 	bl	80024b8 <HAL_Delay>
	// PULLING the Line to HIGH and waits for 40us
	HAL_GPIO_WritePin(DHT11->_GPIOx, DHT11->_Pin, GPIO_PIN_SET);
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	68d8      	ldr	r0, [r3, #12]
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	895b      	ldrh	r3, [r3, #10]
 80015ea:	2201      	movs	r2, #1
 80015ec:	4619      	mov	r1, r3
 80015ee:	f002 fcd1 	bl	8003f94 <HAL_GPIO_WritePin>
	HAL_DelayUs(DHT11->_Tim, 40);
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	691b      	ldr	r3, [r3, #16]
 80015f6:	2128      	movs	r1, #40	@ 0x28
 80015f8:	4618      	mov	r0, r3
 80015fa:	f7ff ff53 	bl	80014a4 <HAL_DelayUs>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015fe:	b672      	cpsid	i
}
 8001600:	bf00      	nop

	__disable_irq();
	DHT11_SetPinMode(DHT11, DHT11_PIN_INPUT);
 8001602:	2101      	movs	r1, #1
 8001604:	6878      	ldr	r0, [r7, #4]
 8001606:	f7ff ff8b 	bl	8001520 <DHT11_SetPinMode>

	// If the Line is still HIGH, that means DHT11 is not responding
	if(HAL_GPIO_ReadPin(DHT11->_GPIOx, DHT11->_Pin) == GPIO_PIN_SET) {
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	68da      	ldr	r2, [r3, #12]
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	895b      	ldrh	r3, [r3, #10]
 8001612:	4619      	mov	r1, r3
 8001614:	4610      	mov	r0, r2
 8001616:	f002 fca5 	bl	8003f64 <HAL_GPIO_ReadPin>
 800161a:	4603      	mov	r3, r0
 800161c:	2b01      	cmp	r3, #1
 800161e:	d103      	bne.n	8001628 <DHT11_ReadData+0x7c>
  __ASM volatile ("cpsie i" : : : "memory");
 8001620:	b662      	cpsie	i
}
 8001622:	bf00      	nop
		__enable_irq();
		return DHT11_ERROR;
 8001624:	2302      	movs	r3, #2
 8001626:	e0ad      	b.n	8001784 <DHT11_ReadData+0x1d8>
	}

	// Now DHT11 have pulled the Line to LOW, we will wait till it PULLS is HIGH
	if(!DHT11_ObserveState(DHT11, GPIO_PIN_SET)) {
 8001628:	2101      	movs	r1, #1
 800162a:	6878      	ldr	r0, [r7, #4]
 800162c:	f7ff ff52 	bl	80014d4 <DHT11_ObserveState>
 8001630:	4603      	mov	r3, r0
 8001632:	f083 0301 	eor.w	r3, r3, #1
 8001636:	b2db      	uxtb	r3, r3
 8001638:	2b00      	cmp	r3, #0
 800163a:	d003      	beq.n	8001644 <DHT11_ReadData+0x98>
  __ASM volatile ("cpsie i" : : : "memory");
 800163c:	b662      	cpsie	i
}
 800163e:	bf00      	nop
		__enable_irq();
		return DHT11_TIMEOUT;
 8001640:	2301      	movs	r3, #1
 8001642:	e09f      	b.n	8001784 <DHT11_ReadData+0x1d8>
	}

	// Now DHT11 have pulled the Line to HIGH, we will wait till it PULLS is to LOW
	// which means the handshake is done
	if(!DHT11_ObserveState(DHT11, GPIO_PIN_RESET)) {
 8001644:	2100      	movs	r1, #0
 8001646:	6878      	ldr	r0, [r7, #4]
 8001648:	f7ff ff44 	bl	80014d4 <DHT11_ObserveState>
 800164c:	4603      	mov	r3, r0
 800164e:	f083 0301 	eor.w	r3, r3, #1
 8001652:	b2db      	uxtb	r3, r3
 8001654:	2b00      	cmp	r3, #0
 8001656:	d05b      	beq.n	8001710 <DHT11_ReadData+0x164>
  __ASM volatile ("cpsie i" : : : "memory");
 8001658:	b662      	cpsie	i
}
 800165a:	bf00      	nop
			__enable_irq();
			return DHT11_TIMEOUT;
 800165c:	2301      	movs	r3, #1
 800165e:	e091      	b.n	8001784 <DHT11_ReadData+0x1d8>
	}

	while(Bits < 40) {
			// DHT11 is now starting to transmit One Bit
			// We will wait till it PULL the Line to HIGH
			if(!DHT11_ObserveState(DHT11, GPIO_PIN_SET)) {
 8001660:	2101      	movs	r1, #1
 8001662:	6878      	ldr	r0, [r7, #4]
 8001664:	f7ff ff36 	bl	80014d4 <DHT11_ObserveState>
 8001668:	4603      	mov	r3, r0
 800166a:	f083 0301 	eor.w	r3, r3, #1
 800166e:	b2db      	uxtb	r3, r3
 8001670:	2b00      	cmp	r3, #0
 8001672:	d003      	beq.n	800167c <DHT11_ReadData+0xd0>
  __ASM volatile ("cpsie i" : : : "memory");
 8001674:	b662      	cpsie	i
}
 8001676:	bf00      	nop
				__enable_irq();
				return DHT11_TIMEOUT;
 8001678:	2301      	movs	r3, #1
 800167a:	e083      	b.n	8001784 <DHT11_ReadData+0x1d8>
			}

			// Now we will just count the us it stays HIGH
			// 28us means 0
			// 70us means 1
			__HAL_TIM_SET_COUNTER(DHT11->_Tim, 0);
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	691b      	ldr	r3, [r3, #16]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	2200      	movs	r2, #0
 8001684:	625a      	str	r2, [r3, #36]	@ 0x24
			while(HAL_GPIO_ReadPin(DHT11->_GPIOx, DHT11->_Pin) == GPIO_PIN_SET) {
 8001686:	e007      	b.n	8001698 <DHT11_ReadData+0xec>
				if(__HAL_TIM_GET_COUNTER(DHT11->_Tim) > DHT11_MAX_TIMEOUT) {
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	691b      	ldr	r3, [r3, #16]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001690:	2b64      	cmp	r3, #100	@ 0x64
 8001692:	d901      	bls.n	8001698 <DHT11_ReadData+0xec>
					return DHT11_TIMEOUT;
 8001694:	2301      	movs	r3, #1
 8001696:	e075      	b.n	8001784 <DHT11_ReadData+0x1d8>
			while(HAL_GPIO_ReadPin(DHT11->_GPIOx, DHT11->_Pin) == GPIO_PIN_SET) {
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	68da      	ldr	r2, [r3, #12]
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	895b      	ldrh	r3, [r3, #10]
 80016a0:	4619      	mov	r1, r3
 80016a2:	4610      	mov	r0, r2
 80016a4:	f002 fc5e 	bl	8003f64 <HAL_GPIO_ReadPin>
 80016a8:	4603      	mov	r3, r0
 80016aa:	2b01      	cmp	r3, #1
 80016ac:	d0ec      	beq.n	8001688 <DHT11_ReadData+0xdc>
				}
			}

			Packets[PacketIndex] = Packets[PacketIndex] << 1;
 80016ae:	7bbb      	ldrb	r3, [r7, #14]
 80016b0:	3310      	adds	r3, #16
 80016b2:	443b      	add	r3, r7
 80016b4:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 80016b8:	7bbb      	ldrb	r3, [r7, #14]
 80016ba:	0052      	lsls	r2, r2, #1
 80016bc:	b2d2      	uxtb	r2, r2
 80016be:	3310      	adds	r3, #16
 80016c0:	443b      	add	r3, r7
 80016c2:	f803 2c08 	strb.w	r2, [r3, #-8]
			Packets[PacketIndex] |= (__HAL_TIM_GET_COUNTER(DHT11->_Tim) > 50); // 50us is good in between
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	691b      	ldr	r3, [r3, #16]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016ce:	2b32      	cmp	r3, #50	@ 0x32
 80016d0:	bf8c      	ite	hi
 80016d2:	2301      	movhi	r3, #1
 80016d4:	2300      	movls	r3, #0
 80016d6:	b2db      	uxtb	r3, r3
 80016d8:	4619      	mov	r1, r3
 80016da:	7bbb      	ldrb	r3, [r7, #14]
 80016dc:	3310      	adds	r3, #16
 80016de:	443b      	add	r3, r7
 80016e0:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 80016e4:	b25a      	sxtb	r2, r3
 80016e6:	b24b      	sxtb	r3, r1
 80016e8:	4313      	orrs	r3, r2
 80016ea:	b25a      	sxtb	r2, r3
 80016ec:	7bbb      	ldrb	r3, [r7, #14]
 80016ee:	b2d2      	uxtb	r2, r2
 80016f0:	3310      	adds	r3, #16
 80016f2:	443b      	add	r3, r7
 80016f4:	f803 2c08 	strb.w	r2, [r3, #-8]
			Bits++;
 80016f8:	7bfb      	ldrb	r3, [r7, #15]
 80016fa:	3301      	adds	r3, #1
 80016fc:	73fb      	strb	r3, [r7, #15]
			if(!(Bits % 8)) PacketIndex++;
 80016fe:	7bfb      	ldrb	r3, [r7, #15]
 8001700:	f003 0307 	and.w	r3, r3, #7
 8001704:	b2db      	uxtb	r3, r3
 8001706:	2b00      	cmp	r3, #0
 8001708:	d102      	bne.n	8001710 <DHT11_ReadData+0x164>
 800170a:	7bbb      	ldrb	r3, [r7, #14]
 800170c:	3301      	adds	r3, #1
 800170e:	73bb      	strb	r3, [r7, #14]
	while(Bits < 40) {
 8001710:	7bfb      	ldrb	r3, [r7, #15]
 8001712:	2b27      	cmp	r3, #39	@ 0x27
 8001714:	d9a4      	bls.n	8001660 <DHT11_ReadData+0xb4>
  __ASM volatile ("cpsie i" : : : "memory");
 8001716:	b662      	cpsie	i
}
 8001718:	bf00      	nop
	}

	__enable_irq();

	// Last 8 bits are Checksum, which is the sum of all the previously transmitted 4 bytes
	if(Packets[4] != (Packets[0] + Packets[1] + Packets[2] + Packets[3])) {
 800171a:	7b3b      	ldrb	r3, [r7, #12]
 800171c:	461a      	mov	r2, r3
 800171e:	7a3b      	ldrb	r3, [r7, #8]
 8001720:	4619      	mov	r1, r3
 8001722:	7a7b      	ldrb	r3, [r7, #9]
 8001724:	440b      	add	r3, r1
 8001726:	7ab9      	ldrb	r1, [r7, #10]
 8001728:	440b      	add	r3, r1
 800172a:	7af9      	ldrb	r1, [r7, #11]
 800172c:	440b      	add	r3, r1
 800172e:	429a      	cmp	r2, r3
 8001730:	d001      	beq.n	8001736 <DHT11_ReadData+0x18a>
		return DHT11_CHECKSUM_MISMATCH;
 8001732:	2303      	movs	r3, #3
 8001734:	e026      	b.n	8001784 <DHT11_ReadData+0x1d8>
	}

	DHT11->Humidity = Packets[0] + (Packets[1] * 0.1f);
 8001736:	7a3b      	ldrb	r3, [r7, #8]
 8001738:	ee07 3a90 	vmov	s15, r3
 800173c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001740:	7a7b      	ldrb	r3, [r7, #9]
 8001742:	ee07 3a90 	vmov	s15, r3
 8001746:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800174a:	eddf 6a10 	vldr	s13, [pc, #64]	@ 800178c <DHT11_ReadData+0x1e0>
 800174e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001752:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	edc3 7a01 	vstr	s15, [r3, #4]
	DHT11->Temperature = Packets[2] + (Packets[3] * 0.1f);
 800175c:	7abb      	ldrb	r3, [r7, #10]
 800175e:	ee07 3a90 	vmov	s15, r3
 8001762:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001766:	7afb      	ldrb	r3, [r7, #11]
 8001768:	ee07 3a90 	vmov	s15, r3
 800176c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001770:	eddf 6a06 	vldr	s13, [pc, #24]	@ 800178c <DHT11_ReadData+0x1e0>
 8001774:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001778:	ee77 7a27 	vadd.f32	s15, s14, s15
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	edc3 7a00 	vstr	s15, [r3]

	return DHT11_OK;
 8001782:	2300      	movs	r3, #0
}
 8001784:	4618      	mov	r0, r3
 8001786:	3710      	adds	r7, #16
 8001788:	46bd      	mov	sp, r7
 800178a:	bd80      	pop	{r7, pc}
 800178c:	3dcccccd 	.word	0x3dcccccd

08001790 <HAL_DHT11_ReadData>:

DHT11_StatusTypeDef HAL_DHT11_ReadData(DHT11_InitTypeDef *DHT11) {
 8001790:	b580      	push	{r7, lr}
 8001792:	b082      	sub	sp, #8
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
	return DHT11->Status = DHT11_ReadData(DHT11);
 8001798:	6878      	ldr	r0, [r7, #4]
 800179a:	f7ff ff07 	bl	80015ac <DHT11_ReadData>
 800179e:	4603      	mov	r3, r0
 80017a0:	461a      	mov	r2, r3
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	721a      	strb	r2, [r3, #8]
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	7a1b      	ldrb	r3, [r3, #8]
}
 80017aa:	4618      	mov	r0, r3
 80017ac:	3708      	adds	r7, #8
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}
	...

080017b4 <HAL_ADC_ConvCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80017b4:	b480      	push	{r7}
 80017b6:	b083      	sub	sp, #12
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
	ldr_voltage = (uint16_t) analog_vals[0];
 80017bc:	4b07      	ldr	r3, [pc, #28]	@ (80017dc <HAL_ADC_ConvCpltCallback+0x28>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	b29a      	uxth	r2, r3
 80017c2:	4b07      	ldr	r3, [pc, #28]	@ (80017e0 <HAL_ADC_ConvCpltCallback+0x2c>)
 80017c4:	801a      	strh	r2, [r3, #0]
	raindrops_voltage = (uint16_t) analog_vals[1];
 80017c6:	4b05      	ldr	r3, [pc, #20]	@ (80017dc <HAL_ADC_ConvCpltCallback+0x28>)
 80017c8:	685b      	ldr	r3, [r3, #4]
 80017ca:	b29a      	uxth	r2, r3
 80017cc:	4b05      	ldr	r3, [pc, #20]	@ (80017e4 <HAL_ADC_ConvCpltCallback+0x30>)
 80017ce:	801a      	strh	r2, [r3, #0]
}
 80017d0:	bf00      	nop
 80017d2:	370c      	adds	r7, #12
 80017d4:	46bd      	mov	sp, r7
 80017d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017da:	4770      	bx	lr
 80017dc:	20000220 	.word	0x20000220
 80017e0:	20000228 	.word	0x20000228
 80017e4:	2000022a 	.word	0x2000022a

080017e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b082      	sub	sp, #8
 80017ec:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80017ee:	f000 fdee 	bl	80023ce <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80017f2:	f000 f8c1 	bl	8001978 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80017f6:	f000 fb03 	bl	8001e00 <MX_GPIO_Init>
  MX_DMA_Init();
 80017fa:	f000 fae3 	bl	8001dc4 <MX_DMA_Init>
  MX_ADC1_Init();
 80017fe:	f000 f91f 	bl	8001a40 <MX_ADC1_Init>
  MX_I2C1_Init();
 8001802:	f000 f991 	bl	8001b28 <MX_I2C1_Init>
  MX_TIM2_Init();
 8001806:	f000 fa5f 	bl	8001cc8 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 800180a:	f000 faab 	bl	8001d64 <MX_USART1_UART_Init>
  MX_RTC_Init();
 800180e:	f000 f9cb 	bl	8001ba8 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  HAL_DHT11_Init(&dht, GPIOA, GPIO_PIN_2, &htim2);
 8001812:	4b49      	ldr	r3, [pc, #292]	@ (8001938 <main+0x150>)
 8001814:	2204      	movs	r2, #4
 8001816:	f04f 4190 	mov.w	r1, #1207959552	@ 0x48000000
 800181a:	4848      	ldr	r0, [pc, #288]	@ (800193c <main+0x154>)
 800181c:	f7ff fea4 	bl	8001568 <HAL_DHT11_Init>
  read_calibration_data(&hi2c1,&bmp_calib_data);
 8001820:	4947      	ldr	r1, [pc, #284]	@ (8001940 <main+0x158>)
 8001822:	4848      	ldr	r0, [pc, #288]	@ (8001944 <main+0x15c>)
 8001824:	f7ff fab0 	bl	8000d88 <read_calibration_data>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	u_temp = get_uncomp_temp(&hi2c1,&bmp_calib_data);
 8001828:	4945      	ldr	r1, [pc, #276]	@ (8001940 <main+0x158>)
 800182a:	4846      	ldr	r0, [pc, #280]	@ (8001944 <main+0x15c>)
 800182c:	f7ff fb1c 	bl	8000e68 <get_uncomp_temp>
 8001830:	4603      	mov	r3, r0
 8001832:	461a      	mov	r2, r3
 8001834:	4b44      	ldr	r3, [pc, #272]	@ (8001948 <main+0x160>)
 8001836:	801a      	strh	r2, [r3, #0]
	u_press = get_uncomp_press(&hi2c1,&bmp_calib_data);
 8001838:	4941      	ldr	r1, [pc, #260]	@ (8001940 <main+0x158>)
 800183a:	4842      	ldr	r0, [pc, #264]	@ (8001944 <main+0x15c>)
 800183c:	f7ff fbc6 	bl	8000fcc <get_uncomp_press>
 8001840:	4603      	mov	r3, r0
 8001842:	4a42      	ldr	r2, [pc, #264]	@ (800194c <main+0x164>)
 8001844:	6013      	str	r3, [r2, #0]

	// Read LDR and Raindrop sensor analog voltages
	HAL_ADC_Start_DMA(&hadc1,analog_vals,2);
 8001846:	2202      	movs	r2, #2
 8001848:	4941      	ldr	r1, [pc, #260]	@ (8001950 <main+0x168>)
 800184a:	4842      	ldr	r0, [pc, #264]	@ (8001954 <main+0x16c>)
 800184c:	f001 f982 	bl	8002b54 <HAL_ADC_Start_DMA>

	// Read float values
	temp_buffer.f_val = get_comp_temp(u_temp,&bmp_calib_data);
 8001850:	4b3d      	ldr	r3, [pc, #244]	@ (8001948 <main+0x160>)
 8001852:	881b      	ldrh	r3, [r3, #0]
 8001854:	493a      	ldr	r1, [pc, #232]	@ (8001940 <main+0x158>)
 8001856:	4618      	mov	r0, r3
 8001858:	f7ff fbee 	bl	8001038 <get_comp_temp>
 800185c:	eef0 7a40 	vmov.f32	s15, s0
 8001860:	4b3d      	ldr	r3, [pc, #244]	@ (8001958 <main+0x170>)
 8001862:	edc3 7a00 	vstr	s15, [r3]
	press_buffer.f_val = get_comp_press(u_temp,u_press,&bmp_calib_data);
 8001866:	4b38      	ldr	r3, [pc, #224]	@ (8001948 <main+0x160>)
 8001868:	881b      	ldrh	r3, [r3, #0]
 800186a:	4a38      	ldr	r2, [pc, #224]	@ (800194c <main+0x164>)
 800186c:	6812      	ldr	r2, [r2, #0]
 800186e:	b291      	uxth	r1, r2
 8001870:	4a33      	ldr	r2, [pc, #204]	@ (8001940 <main+0x158>)
 8001872:	4618      	mov	r0, r3
 8001874:	f7ff fc5a 	bl	800112c <get_comp_press>
 8001878:	eef0 7a40 	vmov.f32	s15, s0
 800187c:	4b37      	ldr	r3, [pc, #220]	@ (800195c <main+0x174>)
 800187e:	edc3 7a00 	vstr	s15, [r3]
	HAL_DHT11_ReadData(&dht);
 8001882:	482e      	ldr	r0, [pc, #184]	@ (800193c <main+0x154>)
 8001884:	f7ff ff84 	bl	8001790 <HAL_DHT11_ReadData>
	dht_temp_buffer.f_val = dht.Temperature;
 8001888:	4b2c      	ldr	r3, [pc, #176]	@ (800193c <main+0x154>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	4a34      	ldr	r2, [pc, #208]	@ (8001960 <main+0x178>)
 800188e:	6013      	str	r3, [r2, #0]
	dht_hum_buffer.f_val = dht.Humidity;
 8001890:	4b2a      	ldr	r3, [pc, #168]	@ (800193c <main+0x154>)
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	4a33      	ldr	r2, [pc, #204]	@ (8001964 <main+0x17c>)
 8001896:	6013      	str	r3, [r2, #0]

	// First 16 bytes for float readings
	for(int i=0;i<4;i++)
 8001898:	2300      	movs	r3, #0
 800189a:	607b      	str	r3, [r7, #4]
 800189c:	e023      	b.n	80018e6 <main+0xfe>
	{
		transmit_buffer[i] = temp_buffer.f_val_buffer[i];
 800189e:	4a2e      	ldr	r2, [pc, #184]	@ (8001958 <main+0x170>)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	4413      	add	r3, r2
 80018a4:	7819      	ldrb	r1, [r3, #0]
 80018a6:	4a30      	ldr	r2, [pc, #192]	@ (8001968 <main+0x180>)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	4413      	add	r3, r2
 80018ac:	460a      	mov	r2, r1
 80018ae:	701a      	strb	r2, [r3, #0]
		transmit_buffer[i+4] = press_buffer.f_val_buffer[i];
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	3304      	adds	r3, #4
 80018b4:	4929      	ldr	r1, [pc, #164]	@ (800195c <main+0x174>)
 80018b6:	687a      	ldr	r2, [r7, #4]
 80018b8:	440a      	add	r2, r1
 80018ba:	7811      	ldrb	r1, [r2, #0]
 80018bc:	4a2a      	ldr	r2, [pc, #168]	@ (8001968 <main+0x180>)
 80018be:	54d1      	strb	r1, [r2, r3]
		transmit_buffer[i+8] = dht_temp_buffer.f_val_buffer[i];
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	3308      	adds	r3, #8
 80018c4:	4926      	ldr	r1, [pc, #152]	@ (8001960 <main+0x178>)
 80018c6:	687a      	ldr	r2, [r7, #4]
 80018c8:	440a      	add	r2, r1
 80018ca:	7811      	ldrb	r1, [r2, #0]
 80018cc:	4a26      	ldr	r2, [pc, #152]	@ (8001968 <main+0x180>)
 80018ce:	54d1      	strb	r1, [r2, r3]
		transmit_buffer[i+12] = dht_hum_buffer.f_val_buffer[i];
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	330c      	adds	r3, #12
 80018d4:	4923      	ldr	r1, [pc, #140]	@ (8001964 <main+0x17c>)
 80018d6:	687a      	ldr	r2, [r7, #4]
 80018d8:	440a      	add	r2, r1
 80018da:	7811      	ldrb	r1, [r2, #0]
 80018dc:	4a22      	ldr	r2, [pc, #136]	@ (8001968 <main+0x180>)
 80018de:	54d1      	strb	r1, [r2, r3]
	for(int i=0;i<4;i++)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	3301      	adds	r3, #1
 80018e4:	607b      	str	r3, [r7, #4]
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	2b03      	cmp	r3, #3
 80018ea:	ddd8      	ble.n	800189e <main+0xb6>
	}

	transmit_buffer[16] = (uint8_t) (ldr_voltage & 0x00FF);
 80018ec:	4b1f      	ldr	r3, [pc, #124]	@ (800196c <main+0x184>)
 80018ee:	881b      	ldrh	r3, [r3, #0]
 80018f0:	b2da      	uxtb	r2, r3
 80018f2:	4b1d      	ldr	r3, [pc, #116]	@ (8001968 <main+0x180>)
 80018f4:	741a      	strb	r2, [r3, #16]
	transmit_buffer[17] = (uint8_t) ((ldr_voltage & 0xFF00)>>8);
 80018f6:	4b1d      	ldr	r3, [pc, #116]	@ (800196c <main+0x184>)
 80018f8:	881b      	ldrh	r3, [r3, #0]
 80018fa:	0a1b      	lsrs	r3, r3, #8
 80018fc:	b29b      	uxth	r3, r3
 80018fe:	b2da      	uxtb	r2, r3
 8001900:	4b19      	ldr	r3, [pc, #100]	@ (8001968 <main+0x180>)
 8001902:	745a      	strb	r2, [r3, #17]

	transmit_buffer[18] = (uint8_t) (raindrops_voltage & 0x00FF);
 8001904:	4b1a      	ldr	r3, [pc, #104]	@ (8001970 <main+0x188>)
 8001906:	881b      	ldrh	r3, [r3, #0]
 8001908:	b2da      	uxtb	r2, r3
 800190a:	4b17      	ldr	r3, [pc, #92]	@ (8001968 <main+0x180>)
 800190c:	749a      	strb	r2, [r3, #18]
	transmit_buffer[19] = (uint8_t) ((raindrops_voltage & 0xFF00)>>8);
 800190e:	4b18      	ldr	r3, [pc, #96]	@ (8001970 <main+0x188>)
 8001910:	881b      	ldrh	r3, [r3, #0]
 8001912:	0a1b      	lsrs	r3, r3, #8
 8001914:	b29b      	uxth	r3, r3
 8001916:	b2da      	uxtb	r2, r3
 8001918:	4b13      	ldr	r3, [pc, #76]	@ (8001968 <main+0x180>)
 800191a:	74da      	strb	r2, [r3, #19]

	HAL_UART_Transmit(&huart1,transmit_buffer,20,1000);
 800191c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001920:	2214      	movs	r2, #20
 8001922:	4911      	ldr	r1, [pc, #68]	@ (8001968 <main+0x180>)
 8001924:	4813      	ldr	r0, [pc, #76]	@ (8001974 <main+0x18c>)
 8001926:	f005 fac5 	bl	8006eb4 <HAL_UART_Transmit>

	// Not needed due to sleep
	//HAL_Delay(500);
	HAL_SuspendTick();
 800192a:	f000 fde9 	bl	8002500 <HAL_SuspendTick>
	HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 800192e:	2101      	movs	r1, #1
 8001930:	2000      	movs	r0, #0
 8001932:	f003 f995 	bl	8004c60 <HAL_PWR_EnterSLEEPMode>
	u_temp = get_uncomp_temp(&hi2c1,&bmp_calib_data);
 8001936:	e777      	b.n	8001828 <main+0x40>
 8001938:	2000014c 	.word	0x2000014c
 800193c:	20000248 	.word	0x20000248
 8001940:	2000025c 	.word	0x2000025c
 8001944:	200000d4 	.word	0x200000d4
 8001948:	20000240 	.word	0x20000240
 800194c:	20000244 	.word	0x20000244
 8001950:	20000220 	.word	0x20000220
 8001954:	20000028 	.word	0x20000028
 8001958:	20000274 	.word	0x20000274
 800195c:	20000278 	.word	0x20000278
 8001960:	2000027c 	.word	0x2000027c
 8001964:	20000280 	.word	0x20000280
 8001968:	2000022c 	.word	0x2000022c
 800196c:	20000228 	.word	0x20000228
 8001970:	2000022a 	.word	0x2000022a
 8001974:	20000198 	.word	0x20000198

08001978 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b096      	sub	sp, #88	@ 0x58
 800197c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800197e:	f107 0314 	add.w	r3, r7, #20
 8001982:	2244      	movs	r2, #68	@ 0x44
 8001984:	2100      	movs	r1, #0
 8001986:	4618      	mov	r0, r3
 8001988:	f005 ff65 	bl	8007856 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800198c:	463b      	mov	r3, r7
 800198e:	2200      	movs	r2, #0
 8001990:	601a      	str	r2, [r3, #0]
 8001992:	605a      	str	r2, [r3, #4]
 8001994:	609a      	str	r2, [r3, #8]
 8001996:	60da      	str	r2, [r3, #12]
 8001998:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800199a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800199e:	f003 f9a1 	bl	8004ce4 <HAL_PWREx_ControlVoltageScaling>
 80019a2:	4603      	mov	r3, r0
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d001      	beq.n	80019ac <SystemClock_Config+0x34>
  {
    Error_Handler();
 80019a8:	f000 face 	bl	8001f48 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80019ac:	f003 f948 	bl	8004c40 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80019b0:	4b22      	ldr	r3, [pc, #136]	@ (8001a3c <SystemClock_Config+0xc4>)
 80019b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80019b6:	4a21      	ldr	r2, [pc, #132]	@ (8001a3c <SystemClock_Config+0xc4>)
 80019b8:	f023 0318 	bic.w	r3, r3, #24
 80019bc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_LSE
 80019c0:	231c      	movs	r3, #28
 80019c2:	617b      	str	r3, [r7, #20]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80019c4:	2301      	movs	r3, #1
 80019c6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80019c8:	2301      	movs	r3, #1
 80019ca:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80019cc:	2301      	movs	r3, #1
 80019ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80019d0:	2300      	movs	r3, #0
 80019d2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80019d4:	2360      	movs	r3, #96	@ 0x60
 80019d6:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80019d8:	2302      	movs	r3, #2
 80019da:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80019dc:	2301      	movs	r3, #1
 80019de:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80019e0:	2301      	movs	r3, #1
 80019e2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 80019e4:	2310      	movs	r3, #16
 80019e6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80019e8:	2307      	movs	r3, #7
 80019ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80019ec:	2302      	movs	r3, #2
 80019ee:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80019f0:	2302      	movs	r3, #2
 80019f2:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80019f4:	f107 0314 	add.w	r3, r7, #20
 80019f8:	4618      	mov	r0, r3
 80019fa:	f003 fa11 	bl	8004e20 <HAL_RCC_OscConfig>
 80019fe:	4603      	mov	r3, r0
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d001      	beq.n	8001a08 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8001a04:	f000 faa0 	bl	8001f48 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a08:	230f      	movs	r3, #15
 8001a0a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a0c:	2303      	movs	r3, #3
 8001a0e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a10:	2300      	movs	r3, #0
 8001a12:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001a14:	2300      	movs	r3, #0
 8001a16:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001a1c:	463b      	mov	r3, r7
 8001a1e:	2101      	movs	r1, #1
 8001a20:	4618      	mov	r0, r3
 8001a22:	f003 fe11 	bl	8005648 <HAL_RCC_ClockConfig>
 8001a26:	4603      	mov	r3, r0
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d001      	beq.n	8001a30 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8001a2c:	f000 fa8c 	bl	8001f48 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8001a30:	f004 fa24 	bl	8005e7c <HAL_RCCEx_EnableMSIPLLMode>
}
 8001a34:	bf00      	nop
 8001a36:	3758      	adds	r7, #88	@ 0x58
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	bd80      	pop	{r7, pc}
 8001a3c:	40021000 	.word	0x40021000

08001a40 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b086      	sub	sp, #24
 8001a44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001a46:	463b      	mov	r3, r7
 8001a48:	2200      	movs	r2, #0
 8001a4a:	601a      	str	r2, [r3, #0]
 8001a4c:	605a      	str	r2, [r3, #4]
 8001a4e:	609a      	str	r2, [r3, #8]
 8001a50:	60da      	str	r2, [r3, #12]
 8001a52:	611a      	str	r2, [r3, #16]
 8001a54:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001a56:	4b30      	ldr	r3, [pc, #192]	@ (8001b18 <MX_ADC1_Init+0xd8>)
 8001a58:	4a30      	ldr	r2, [pc, #192]	@ (8001b1c <MX_ADC1_Init+0xdc>)
 8001a5a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001a5c:	4b2e      	ldr	r3, [pc, #184]	@ (8001b18 <MX_ADC1_Init+0xd8>)
 8001a5e:	2200      	movs	r2, #0
 8001a60:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001a62:	4b2d      	ldr	r3, [pc, #180]	@ (8001b18 <MX_ADC1_Init+0xd8>)
 8001a64:	2200      	movs	r2, #0
 8001a66:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001a68:	4b2b      	ldr	r3, [pc, #172]	@ (8001b18 <MX_ADC1_Init+0xd8>)
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001a6e:	4b2a      	ldr	r3, [pc, #168]	@ (8001b18 <MX_ADC1_Init+0xd8>)
 8001a70:	2201      	movs	r2, #1
 8001a72:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001a74:	4b28      	ldr	r3, [pc, #160]	@ (8001b18 <MX_ADC1_Init+0xd8>)
 8001a76:	2204      	movs	r2, #4
 8001a78:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001a7a:	4b27      	ldr	r3, [pc, #156]	@ (8001b18 <MX_ADC1_Init+0xd8>)
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001a80:	4b25      	ldr	r3, [pc, #148]	@ (8001b18 <MX_ADC1_Init+0xd8>)
 8001a82:	2200      	movs	r2, #0
 8001a84:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 2;
 8001a86:	4b24      	ldr	r3, [pc, #144]	@ (8001b18 <MX_ADC1_Init+0xd8>)
 8001a88:	2202      	movs	r2, #2
 8001a8a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001a8c:	4b22      	ldr	r3, [pc, #136]	@ (8001b18 <MX_ADC1_Init+0xd8>)
 8001a8e:	2200      	movs	r2, #0
 8001a90:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001a94:	4b20      	ldr	r3, [pc, #128]	@ (8001b18 <MX_ADC1_Init+0xd8>)
 8001a96:	2200      	movs	r2, #0
 8001a98:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001a9a:	4b1f      	ldr	r3, [pc, #124]	@ (8001b18 <MX_ADC1_Init+0xd8>)
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001aa0:	4b1d      	ldr	r3, [pc, #116]	@ (8001b18 <MX_ADC1_Init+0xd8>)
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001aa8:	4b1b      	ldr	r3, [pc, #108]	@ (8001b18 <MX_ADC1_Init+0xd8>)
 8001aaa:	2200      	movs	r2, #0
 8001aac:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001aae:	4b1a      	ldr	r3, [pc, #104]	@ (8001b18 <MX_ADC1_Init+0xd8>)
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001ab6:	4818      	ldr	r0, [pc, #96]	@ (8001b18 <MX_ADC1_Init+0xd8>)
 8001ab8:	f000 ff0a 	bl	80028d0 <HAL_ADC_Init>
 8001abc:	4603      	mov	r3, r0
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d001      	beq.n	8001ac6 <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 8001ac2:	f000 fa41 	bl	8001f48 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001ac6:	4b16      	ldr	r3, [pc, #88]	@ (8001b20 <MX_ADC1_Init+0xe0>)
 8001ac8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001aca:	2306      	movs	r3, #6
 8001acc:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001ad2:	237f      	movs	r3, #127	@ 0x7f
 8001ad4:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001ad6:	2304      	movs	r3, #4
 8001ad8:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001ada:	2300      	movs	r3, #0
 8001adc:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001ade:	463b      	mov	r3, r7
 8001ae0:	4619      	mov	r1, r3
 8001ae2:	480d      	ldr	r0, [pc, #52]	@ (8001b18 <MX_ADC1_Init+0xd8>)
 8001ae4:	f001 f8ce 	bl	8002c84 <HAL_ADC_ConfigChannel>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d001      	beq.n	8001af2 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8001aee:	f000 fa2b 	bl	8001f48 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001af2:	4b0c      	ldr	r3, [pc, #48]	@ (8001b24 <MX_ADC1_Init+0xe4>)
 8001af4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001af6:	230c      	movs	r3, #12
 8001af8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001afa:	463b      	mov	r3, r7
 8001afc:	4619      	mov	r1, r3
 8001afe:	4806      	ldr	r0, [pc, #24]	@ (8001b18 <MX_ADC1_Init+0xd8>)
 8001b00:	f001 f8c0 	bl	8002c84 <HAL_ADC_ConfigChannel>
 8001b04:	4603      	mov	r3, r0
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d001      	beq.n	8001b0e <MX_ADC1_Init+0xce>
  {
    Error_Handler();
 8001b0a:	f000 fa1d 	bl	8001f48 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001b0e:	bf00      	nop
 8001b10:	3718      	adds	r7, #24
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bd80      	pop	{r7, pc}
 8001b16:	bf00      	nop
 8001b18:	20000028 	.word	0x20000028
 8001b1c:	50040000 	.word	0x50040000
 8001b20:	14f00020 	.word	0x14f00020
 8001b24:	19200040 	.word	0x19200040

08001b28 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001b2c:	4b1b      	ldr	r3, [pc, #108]	@ (8001b9c <MX_I2C1_Init+0x74>)
 8001b2e:	4a1c      	ldr	r2, [pc, #112]	@ (8001ba0 <MX_I2C1_Init+0x78>)
 8001b30:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 8001b32:	4b1a      	ldr	r3, [pc, #104]	@ (8001b9c <MX_I2C1_Init+0x74>)
 8001b34:	4a1b      	ldr	r2, [pc, #108]	@ (8001ba4 <MX_I2C1_Init+0x7c>)
 8001b36:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001b38:	4b18      	ldr	r3, [pc, #96]	@ (8001b9c <MX_I2C1_Init+0x74>)
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001b3e:	4b17      	ldr	r3, [pc, #92]	@ (8001b9c <MX_I2C1_Init+0x74>)
 8001b40:	2201      	movs	r2, #1
 8001b42:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001b44:	4b15      	ldr	r3, [pc, #84]	@ (8001b9c <MX_I2C1_Init+0x74>)
 8001b46:	2200      	movs	r2, #0
 8001b48:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001b4a:	4b14      	ldr	r3, [pc, #80]	@ (8001b9c <MX_I2C1_Init+0x74>)
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001b50:	4b12      	ldr	r3, [pc, #72]	@ (8001b9c <MX_I2C1_Init+0x74>)
 8001b52:	2200      	movs	r2, #0
 8001b54:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001b56:	4b11      	ldr	r3, [pc, #68]	@ (8001b9c <MX_I2C1_Init+0x74>)
 8001b58:	2200      	movs	r2, #0
 8001b5a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001b5c:	4b0f      	ldr	r3, [pc, #60]	@ (8001b9c <MX_I2C1_Init+0x74>)
 8001b5e:	2200      	movs	r2, #0
 8001b60:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001b62:	480e      	ldr	r0, [pc, #56]	@ (8001b9c <MX_I2C1_Init+0x74>)
 8001b64:	f002 fa48 	bl	8003ff8 <HAL_I2C_Init>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d001      	beq.n	8001b72 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001b6e:	f000 f9eb 	bl	8001f48 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001b72:	2100      	movs	r1, #0
 8001b74:	4809      	ldr	r0, [pc, #36]	@ (8001b9c <MX_I2C1_Init+0x74>)
 8001b76:	f002 ffcb 	bl	8004b10 <HAL_I2CEx_ConfigAnalogFilter>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d001      	beq.n	8001b84 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001b80:	f000 f9e2 	bl	8001f48 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001b84:	2100      	movs	r1, #0
 8001b86:	4805      	ldr	r0, [pc, #20]	@ (8001b9c <MX_I2C1_Init+0x74>)
 8001b88:	f003 f80d 	bl	8004ba6 <HAL_I2CEx_ConfigDigitalFilter>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d001      	beq.n	8001b96 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001b92:	f000 f9d9 	bl	8001f48 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001b96:	bf00      	nop
 8001b98:	bd80      	pop	{r7, pc}
 8001b9a:	bf00      	nop
 8001b9c:	200000d4 	.word	0x200000d4
 8001ba0:	40005400 	.word	0x40005400
 8001ba4:	00707cbb 	.word	0x00707cbb

08001ba8 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b092      	sub	sp, #72	@ 0x48
 8001bac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001bae:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	601a      	str	r2, [r3, #0]
 8001bb6:	605a      	str	r2, [r3, #4]
 8001bb8:	609a      	str	r2, [r3, #8]
 8001bba:	60da      	str	r2, [r3, #12]
 8001bbc:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	633b      	str	r3, [r7, #48]	@ 0x30
  RTC_AlarmTypeDef sAlarm = {0};
 8001bc2:	1d3b      	adds	r3, r7, #4
 8001bc4:	222c      	movs	r2, #44	@ 0x2c
 8001bc6:	2100      	movs	r1, #0
 8001bc8:	4618      	mov	r0, r3
 8001bca:	f005 fe44 	bl	8007856 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001bce:	4b3c      	ldr	r3, [pc, #240]	@ (8001cc0 <MX_RTC_Init+0x118>)
 8001bd0:	4a3c      	ldr	r2, [pc, #240]	@ (8001cc4 <MX_RTC_Init+0x11c>)
 8001bd2:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001bd4:	4b3a      	ldr	r3, [pc, #232]	@ (8001cc0 <MX_RTC_Init+0x118>)
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001bda:	4b39      	ldr	r3, [pc, #228]	@ (8001cc0 <MX_RTC_Init+0x118>)
 8001bdc:	227f      	movs	r2, #127	@ 0x7f
 8001bde:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001be0:	4b37      	ldr	r3, [pc, #220]	@ (8001cc0 <MX_RTC_Init+0x118>)
 8001be2:	22ff      	movs	r2, #255	@ 0xff
 8001be4:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001be6:	4b36      	ldr	r3, [pc, #216]	@ (8001cc0 <MX_RTC_Init+0x118>)
 8001be8:	2200      	movs	r2, #0
 8001bea:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001bec:	4b34      	ldr	r3, [pc, #208]	@ (8001cc0 <MX_RTC_Init+0x118>)
 8001bee:	2200      	movs	r2, #0
 8001bf0:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001bf2:	4b33      	ldr	r3, [pc, #204]	@ (8001cc0 <MX_RTC_Init+0x118>)
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001bf8:	4b31      	ldr	r3, [pc, #196]	@ (8001cc0 <MX_RTC_Init+0x118>)
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001bfe:	4830      	ldr	r0, [pc, #192]	@ (8001cc0 <MX_RTC_Init+0x118>)
 8001c00:	f004 fa3e 	bl	8006080 <HAL_RTC_Init>
 8001c04:	4603      	mov	r3, r0
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d001      	beq.n	8001c0e <MX_RTC_Init+0x66>
  {
    Error_Handler();
 8001c0a:	f000 f99d 	bl	8001f48 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
  sTime.Minutes = 0x0;
 8001c14:	2300      	movs	r3, #0
 8001c16:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
  sTime.Seconds = 0x0;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001c20:	2300      	movs	r3, #0
 8001c22:	643b      	str	r3, [r7, #64]	@ 0x40
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001c24:	2300      	movs	r3, #0
 8001c26:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001c28:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001c2c:	2201      	movs	r2, #1
 8001c2e:	4619      	mov	r1, r3
 8001c30:	4823      	ldr	r0, [pc, #140]	@ (8001cc0 <MX_RTC_Init+0x118>)
 8001c32:	f004 faad 	bl	8006190 <HAL_RTC_SetTime>
 8001c36:	4603      	mov	r3, r0
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d001      	beq.n	8001c40 <MX_RTC_Init+0x98>
  {
    Error_Handler();
 8001c3c:	f000 f984 	bl	8001f48 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001c40:	2301      	movs	r3, #1
 8001c42:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  sDate.Month = RTC_MONTH_JANUARY;
 8001c46:	2301      	movs	r3, #1
 8001c48:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
  sDate.Date = 0x1;
 8001c4c:	2301      	movs	r3, #1
 8001c4e:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
  sDate.Year = 0x0;
 8001c52:	2300      	movs	r3, #0
 8001c54:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001c58:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001c5c:	2201      	movs	r2, #1
 8001c5e:	4619      	mov	r1, r3
 8001c60:	4817      	ldr	r0, [pc, #92]	@ (8001cc0 <MX_RTC_Init+0x118>)
 8001c62:	f004 fb32 	bl	80062ca <HAL_RTC_SetDate>
 8001c66:	4603      	mov	r3, r0
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d001      	beq.n	8001c70 <MX_RTC_Init+0xc8>
  {
    Error_Handler();
 8001c6c:	f000 f96c 	bl	8001f48 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8001c70:	2300      	movs	r3, #0
 8001c72:	713b      	strb	r3, [r7, #4]
  sAlarm.AlarmTime.Minutes = 0x0;
 8001c74:	2300      	movs	r3, #0
 8001c76:	717b      	strb	r3, [r7, #5]
  sAlarm.AlarmTime.Seconds = 0x10;
 8001c78:	2310      	movs	r3, #16
 8001c7a:	71bb      	strb	r3, [r7, #6]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	60bb      	str	r3, [r7, #8]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001c80:	2300      	movs	r3, #0
 8001c82:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001c84:	2300      	movs	r3, #0
 8001c86:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8001c90:	2300      	movs	r3, #0
 8001c92:	627b      	str	r3, [r7, #36]	@ 0x24
  sAlarm.AlarmDateWeekDay = 0x1;
 8001c94:	2301      	movs	r3, #1
 8001c96:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  sAlarm.Alarm = RTC_ALARM_A;
 8001c9a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001c9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001ca0:	1d3b      	adds	r3, r7, #4
 8001ca2:	2201      	movs	r2, #1
 8001ca4:	4619      	mov	r1, r3
 8001ca6:	4806      	ldr	r0, [pc, #24]	@ (8001cc0 <MX_RTC_Init+0x118>)
 8001ca8:	f004 fb96 	bl	80063d8 <HAL_RTC_SetAlarm_IT>
 8001cac:	4603      	mov	r3, r0
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d001      	beq.n	8001cb6 <MX_RTC_Init+0x10e>
  {
    Error_Handler();
 8001cb2:	f000 f949 	bl	8001f48 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001cb6:	bf00      	nop
 8001cb8:	3748      	adds	r7, #72	@ 0x48
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd80      	pop	{r7, pc}
 8001cbe:	bf00      	nop
 8001cc0:	20000128 	.word	0x20000128
 8001cc4:	40002800 	.word	0x40002800

08001cc8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b088      	sub	sp, #32
 8001ccc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001cce:	f107 0310 	add.w	r3, r7, #16
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	601a      	str	r2, [r3, #0]
 8001cd6:	605a      	str	r2, [r3, #4]
 8001cd8:	609a      	str	r2, [r3, #8]
 8001cda:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001cdc:	1d3b      	adds	r3, r7, #4
 8001cde:	2200      	movs	r2, #0
 8001ce0:	601a      	str	r2, [r3, #0]
 8001ce2:	605a      	str	r2, [r3, #4]
 8001ce4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001ce6:	4b1e      	ldr	r3, [pc, #120]	@ (8001d60 <MX_TIM2_Init+0x98>)
 8001ce8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001cec:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 32;
 8001cee:	4b1c      	ldr	r3, [pc, #112]	@ (8001d60 <MX_TIM2_Init+0x98>)
 8001cf0:	2220      	movs	r2, #32
 8001cf2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cf4:	4b1a      	ldr	r3, [pc, #104]	@ (8001d60 <MX_TIM2_Init+0x98>)
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001cfa:	4b19      	ldr	r3, [pc, #100]	@ (8001d60 <MX_TIM2_Init+0x98>)
 8001cfc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001d00:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d02:	4b17      	ldr	r3, [pc, #92]	@ (8001d60 <MX_TIM2_Init+0x98>)
 8001d04:	2200      	movs	r2, #0
 8001d06:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d08:	4b15      	ldr	r3, [pc, #84]	@ (8001d60 <MX_TIM2_Init+0x98>)
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001d0e:	4814      	ldr	r0, [pc, #80]	@ (8001d60 <MX_TIM2_Init+0x98>)
 8001d10:	f004 fda4 	bl	800685c <HAL_TIM_Base_Init>
 8001d14:	4603      	mov	r3, r0
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d001      	beq.n	8001d1e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001d1a:	f000 f915 	bl	8001f48 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d1e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001d22:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001d24:	f107 0310 	add.w	r3, r7, #16
 8001d28:	4619      	mov	r1, r3
 8001d2a:	480d      	ldr	r0, [pc, #52]	@ (8001d60 <MX_TIM2_Init+0x98>)
 8001d2c:	f004 fe3a 	bl	80069a4 <HAL_TIM_ConfigClockSource>
 8001d30:	4603      	mov	r3, r0
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d001      	beq.n	8001d3a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001d36:	f000 f907 	bl	8001f48 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001d42:	1d3b      	adds	r3, r7, #4
 8001d44:	4619      	mov	r1, r3
 8001d46:	4806      	ldr	r0, [pc, #24]	@ (8001d60 <MX_TIM2_Init+0x98>)
 8001d48:	f005 f800 	bl	8006d4c <HAL_TIMEx_MasterConfigSynchronization>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d001      	beq.n	8001d56 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001d52:	f000 f8f9 	bl	8001f48 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001d56:	bf00      	nop
 8001d58:	3720      	adds	r7, #32
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bd80      	pop	{r7, pc}
 8001d5e:	bf00      	nop
 8001d60:	2000014c 	.word	0x2000014c

08001d64 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001d68:	4b14      	ldr	r3, [pc, #80]	@ (8001dbc <MX_USART1_UART_Init+0x58>)
 8001d6a:	4a15      	ldr	r2, [pc, #84]	@ (8001dc0 <MX_USART1_UART_Init+0x5c>)
 8001d6c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001d6e:	4b13      	ldr	r3, [pc, #76]	@ (8001dbc <MX_USART1_UART_Init+0x58>)
 8001d70:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001d74:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001d76:	4b11      	ldr	r3, [pc, #68]	@ (8001dbc <MX_USART1_UART_Init+0x58>)
 8001d78:	2200      	movs	r2, #0
 8001d7a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001d7c:	4b0f      	ldr	r3, [pc, #60]	@ (8001dbc <MX_USART1_UART_Init+0x58>)
 8001d7e:	2200      	movs	r2, #0
 8001d80:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001d82:	4b0e      	ldr	r3, [pc, #56]	@ (8001dbc <MX_USART1_UART_Init+0x58>)
 8001d84:	2200      	movs	r2, #0
 8001d86:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX;
 8001d88:	4b0c      	ldr	r3, [pc, #48]	@ (8001dbc <MX_USART1_UART_Init+0x58>)
 8001d8a:	2208      	movs	r2, #8
 8001d8c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d8e:	4b0b      	ldr	r3, [pc, #44]	@ (8001dbc <MX_USART1_UART_Init+0x58>)
 8001d90:	2200      	movs	r2, #0
 8001d92:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d94:	4b09      	ldr	r3, [pc, #36]	@ (8001dbc <MX_USART1_UART_Init+0x58>)
 8001d96:	2200      	movs	r2, #0
 8001d98:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001d9a:	4b08      	ldr	r3, [pc, #32]	@ (8001dbc <MX_USART1_UART_Init+0x58>)
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001da0:	4b06      	ldr	r3, [pc, #24]	@ (8001dbc <MX_USART1_UART_Init+0x58>)
 8001da2:	2200      	movs	r2, #0
 8001da4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001da6:	4805      	ldr	r0, [pc, #20]	@ (8001dbc <MX_USART1_UART_Init+0x58>)
 8001da8:	f005 f836 	bl	8006e18 <HAL_UART_Init>
 8001dac:	4603      	mov	r3, r0
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d001      	beq.n	8001db6 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001db2:	f000 f8c9 	bl	8001f48 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001db6:	bf00      	nop
 8001db8:	bd80      	pop	{r7, pc}
 8001dba:	bf00      	nop
 8001dbc:	20000198 	.word	0x20000198
 8001dc0:	40013800 	.word	0x40013800

08001dc4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b082      	sub	sp, #8
 8001dc8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001dca:	4b0c      	ldr	r3, [pc, #48]	@ (8001dfc <MX_DMA_Init+0x38>)
 8001dcc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001dce:	4a0b      	ldr	r2, [pc, #44]	@ (8001dfc <MX_DMA_Init+0x38>)
 8001dd0:	f043 0301 	orr.w	r3, r3, #1
 8001dd4:	6493      	str	r3, [r2, #72]	@ 0x48
 8001dd6:	4b09      	ldr	r3, [pc, #36]	@ (8001dfc <MX_DMA_Init+0x38>)
 8001dd8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001dda:	f003 0301 	and.w	r3, r3, #1
 8001dde:	607b      	str	r3, [r7, #4]
 8001de0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001de2:	2200      	movs	r2, #0
 8001de4:	2100      	movs	r1, #0
 8001de6:	200b      	movs	r0, #11
 8001de8:	f001 fd23 	bl	8003832 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001dec:	200b      	movs	r0, #11
 8001dee:	f001 fd3c 	bl	800386a <HAL_NVIC_EnableIRQ>

}
 8001df2:	bf00      	nop
 8001df4:	3708      	adds	r7, #8
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bd80      	pop	{r7, pc}
 8001dfa:	bf00      	nop
 8001dfc:	40021000 	.word	0x40021000

08001e00 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b08a      	sub	sp, #40	@ 0x28
 8001e04:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e06:	f107 0314 	add.w	r3, r7, #20
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	601a      	str	r2, [r3, #0]
 8001e0e:	605a      	str	r2, [r3, #4]
 8001e10:	609a      	str	r2, [r3, #8]
 8001e12:	60da      	str	r2, [r3, #12]
 8001e14:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e16:	4b41      	ldr	r3, [pc, #260]	@ (8001f1c <MX_GPIO_Init+0x11c>)
 8001e18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e1a:	4a40      	ldr	r2, [pc, #256]	@ (8001f1c <MX_GPIO_Init+0x11c>)
 8001e1c:	f043 0304 	orr.w	r3, r3, #4
 8001e20:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001e22:	4b3e      	ldr	r3, [pc, #248]	@ (8001f1c <MX_GPIO_Init+0x11c>)
 8001e24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e26:	f003 0304 	and.w	r3, r3, #4
 8001e2a:	613b      	str	r3, [r7, #16]
 8001e2c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e2e:	4b3b      	ldr	r3, [pc, #236]	@ (8001f1c <MX_GPIO_Init+0x11c>)
 8001e30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e32:	4a3a      	ldr	r2, [pc, #232]	@ (8001f1c <MX_GPIO_Init+0x11c>)
 8001e34:	f043 0301 	orr.w	r3, r3, #1
 8001e38:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001e3a:	4b38      	ldr	r3, [pc, #224]	@ (8001f1c <MX_GPIO_Init+0x11c>)
 8001e3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e3e:	f003 0301 	and.w	r3, r3, #1
 8001e42:	60fb      	str	r3, [r7, #12]
 8001e44:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e46:	4b35      	ldr	r3, [pc, #212]	@ (8001f1c <MX_GPIO_Init+0x11c>)
 8001e48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e4a:	4a34      	ldr	r2, [pc, #208]	@ (8001f1c <MX_GPIO_Init+0x11c>)
 8001e4c:	f043 0302 	orr.w	r3, r3, #2
 8001e50:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001e52:	4b32      	ldr	r3, [pc, #200]	@ (8001f1c <MX_GPIO_Init+0x11c>)
 8001e54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e56:	f003 0302 	and.w	r3, r3, #2
 8001e5a:	60bb      	str	r3, [r7, #8]
 8001e5c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001e5e:	4b2f      	ldr	r3, [pc, #188]	@ (8001f1c <MX_GPIO_Init+0x11c>)
 8001e60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e62:	4a2e      	ldr	r2, [pc, #184]	@ (8001f1c <MX_GPIO_Init+0x11c>)
 8001e64:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001e68:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001e6a:	4b2c      	ldr	r3, [pc, #176]	@ (8001f1c <MX_GPIO_Init+0x11c>)
 8001e6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e6e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e72:	607b      	str	r3, [r7, #4]
 8001e74:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);
 8001e76:	2200      	movs	r2, #0
 8001e78:	2104      	movs	r1, #4
 8001e7a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001e7e:	f002 f889 	bl	8003f94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 8001e82:	2200      	movs	r2, #0
 8001e84:	2108      	movs	r1, #8
 8001e86:	4826      	ldr	r0, [pc, #152]	@ (8001f20 <MX_GPIO_Init+0x120>)
 8001e88:	f002 f884 	bl	8003f94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001e8c:	2304      	movs	r3, #4
 8001e8e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e90:	2301      	movs	r3, #1
 8001e92:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e94:	2300      	movs	r3, #0
 8001e96:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e9c:	f107 0314 	add.w	r3, r7, #20
 8001ea0:	4619      	mov	r1, r3
 8001ea2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001ea6:	f001 fef3 	bl	8003c90 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA3 PA4 PA5 PA6
                           PA7 PA8 PA11 PA12
                           PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 8001eaa:	f649 13f8 	movw	r3, #39416	@ 0x99f8
 8001eae:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001eb0:	2303      	movs	r3, #3
 8001eb2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001eb8:	f107 0314 	add.w	r3, r7, #20
 8001ebc:	4619      	mov	r1, r3
 8001ebe:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001ec2:	f001 fee5 	bl	8003c90 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8001ec6:	2333      	movs	r3, #51	@ 0x33
 8001ec8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001eca:	2303      	movs	r3, #3
 8001ecc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ed2:	f107 0314 	add.w	r3, r7, #20
 8001ed6:	4619      	mov	r1, r3
 8001ed8:	4811      	ldr	r0, [pc, #68]	@ (8001f20 <MX_GPIO_Init+0x120>)
 8001eda:	f001 fed9 	bl	8003c90 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001ede:	2308      	movs	r3, #8
 8001ee0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eea:	2300      	movs	r3, #0
 8001eec:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001eee:	f107 0314 	add.w	r3, r7, #20
 8001ef2:	4619      	mov	r1, r3
 8001ef4:	480a      	ldr	r0, [pc, #40]	@ (8001f20 <MX_GPIO_Init+0x120>)
 8001ef6:	f001 fecb 	bl	8003c90 <HAL_GPIO_Init>

  /*Configure GPIO pin : PH3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001efa:	2308      	movs	r3, #8
 8001efc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001efe:	2303      	movs	r3, #3
 8001f00:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f02:	2300      	movs	r3, #0
 8001f04:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001f06:	f107 0314 	add.w	r3, r7, #20
 8001f0a:	4619      	mov	r1, r3
 8001f0c:	4805      	ldr	r0, [pc, #20]	@ (8001f24 <MX_GPIO_Init+0x124>)
 8001f0e:	f001 febf 	bl	8003c90 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001f12:	bf00      	nop
 8001f14:	3728      	adds	r7, #40	@ 0x28
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bd80      	pop	{r7, pc}
 8001f1a:	bf00      	nop
 8001f1c:	40021000 	.word	0x40021000
 8001f20:	48000400 	.word	0x48000400
 8001f24:	48001c00 	.word	0x48001c00

08001f28 <HAL_RTC_AlarmAEventCallback>:

/* USER CODE BEGIN 4 */
void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b082      	sub	sp, #8
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
    HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_3);
 8001f30:	2108      	movs	r1, #8
 8001f32:	4804      	ldr	r0, [pc, #16]	@ (8001f44 <HAL_RTC_AlarmAEventCallback+0x1c>)
 8001f34:	f002 f846 	bl	8003fc4 <HAL_GPIO_TogglePin>
    HAL_ResumeTick();
 8001f38:	f000 faf2 	bl	8002520 <HAL_ResumeTick>
}
 8001f3c:	bf00      	nop
 8001f3e:	3708      	adds	r7, #8
 8001f40:	46bd      	mov	sp, r7
 8001f42:	bd80      	pop	{r7, pc}
 8001f44:	48000400 	.word	0x48000400

08001f48 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001f4c:	b672      	cpsid	i
}
 8001f4e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001f50:	bf00      	nop
 8001f52:	e7fd      	b.n	8001f50 <Error_Handler+0x8>

08001f54 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f54:	b480      	push	{r7}
 8001f56:	b083      	sub	sp, #12
 8001f58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f5a:	4b0f      	ldr	r3, [pc, #60]	@ (8001f98 <HAL_MspInit+0x44>)
 8001f5c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f5e:	4a0e      	ldr	r2, [pc, #56]	@ (8001f98 <HAL_MspInit+0x44>)
 8001f60:	f043 0301 	orr.w	r3, r3, #1
 8001f64:	6613      	str	r3, [r2, #96]	@ 0x60
 8001f66:	4b0c      	ldr	r3, [pc, #48]	@ (8001f98 <HAL_MspInit+0x44>)
 8001f68:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f6a:	f003 0301 	and.w	r3, r3, #1
 8001f6e:	607b      	str	r3, [r7, #4]
 8001f70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f72:	4b09      	ldr	r3, [pc, #36]	@ (8001f98 <HAL_MspInit+0x44>)
 8001f74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f76:	4a08      	ldr	r2, [pc, #32]	@ (8001f98 <HAL_MspInit+0x44>)
 8001f78:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f7c:	6593      	str	r3, [r2, #88]	@ 0x58
 8001f7e:	4b06      	ldr	r3, [pc, #24]	@ (8001f98 <HAL_MspInit+0x44>)
 8001f80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f82:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f86:	603b      	str	r3, [r7, #0]
 8001f88:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f8a:	bf00      	nop
 8001f8c:	370c      	adds	r7, #12
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f94:	4770      	bx	lr
 8001f96:	bf00      	nop
 8001f98:	40021000 	.word	0x40021000

08001f9c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b09e      	sub	sp, #120	@ 0x78
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fa4:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001fa8:	2200      	movs	r2, #0
 8001faa:	601a      	str	r2, [r3, #0]
 8001fac:	605a      	str	r2, [r3, #4]
 8001fae:	609a      	str	r2, [r3, #8]
 8001fb0:	60da      	str	r2, [r3, #12]
 8001fb2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001fb4:	f107 0310 	add.w	r3, r7, #16
 8001fb8:	2254      	movs	r2, #84	@ 0x54
 8001fba:	2100      	movs	r1, #0
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	f005 fc4a 	bl	8007856 <memset>
  if(hadc->Instance==ADC1)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	4a3b      	ldr	r2, [pc, #236]	@ (80020b4 <HAL_ADC_MspInit+0x118>)
 8001fc8:	4293      	cmp	r3, r2
 8001fca:	d16e      	bne.n	80020aa <HAL_ADC_MspInit+0x10e>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001fcc:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001fd0:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001fd2:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8001fd6:	65bb      	str	r3, [r7, #88]	@ 0x58
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8001fd8:	2301      	movs	r3, #1
 8001fda:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001fdc:	2301      	movs	r3, #1
 8001fde:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 8001fe0:	2310      	movs	r3, #16
 8001fe2:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001fe4:	2307      	movs	r3, #7
 8001fe6:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001fe8:	2302      	movs	r3, #2
 8001fea:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001fec:	2302      	movs	r3, #2
 8001fee:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8001ff0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001ff4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ff6:	f107 0310 	add.w	r3, r7, #16
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	f003 fd48 	bl	8005a90 <HAL_RCCEx_PeriphCLKConfig>
 8002000:	4603      	mov	r3, r0
 8002002:	2b00      	cmp	r3, #0
 8002004:	d001      	beq.n	800200a <HAL_ADC_MspInit+0x6e>
    {
      Error_Handler();
 8002006:	f7ff ff9f 	bl	8001f48 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800200a:	4b2b      	ldr	r3, [pc, #172]	@ (80020b8 <HAL_ADC_MspInit+0x11c>)
 800200c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800200e:	4a2a      	ldr	r2, [pc, #168]	@ (80020b8 <HAL_ADC_MspInit+0x11c>)
 8002010:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002014:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002016:	4b28      	ldr	r3, [pc, #160]	@ (80020b8 <HAL_ADC_MspInit+0x11c>)
 8002018:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800201a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800201e:	60fb      	str	r3, [r7, #12]
 8002020:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002022:	4b25      	ldr	r3, [pc, #148]	@ (80020b8 <HAL_ADC_MspInit+0x11c>)
 8002024:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002026:	4a24      	ldr	r2, [pc, #144]	@ (80020b8 <HAL_ADC_MspInit+0x11c>)
 8002028:	f043 0301 	orr.w	r3, r3, #1
 800202c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800202e:	4b22      	ldr	r3, [pc, #136]	@ (80020b8 <HAL_ADC_MspInit+0x11c>)
 8002030:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002032:	f003 0301 	and.w	r3, r3, #1
 8002036:	60bb      	str	r3, [r7, #8]
 8002038:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    PA1     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800203a:	2303      	movs	r3, #3
 800203c:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800203e:	230b      	movs	r3, #11
 8002040:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002042:	2300      	movs	r3, #0
 8002044:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002046:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800204a:	4619      	mov	r1, r3
 800204c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002050:	f001 fe1e 	bl	8003c90 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8002054:	4b19      	ldr	r3, [pc, #100]	@ (80020bc <HAL_ADC_MspInit+0x120>)
 8002056:	4a1a      	ldr	r2, [pc, #104]	@ (80020c0 <HAL_ADC_MspInit+0x124>)
 8002058:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 800205a:	4b18      	ldr	r3, [pc, #96]	@ (80020bc <HAL_ADC_MspInit+0x120>)
 800205c:	2200      	movs	r2, #0
 800205e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002060:	4b16      	ldr	r3, [pc, #88]	@ (80020bc <HAL_ADC_MspInit+0x120>)
 8002062:	2200      	movs	r2, #0
 8002064:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002066:	4b15      	ldr	r3, [pc, #84]	@ (80020bc <HAL_ADC_MspInit+0x120>)
 8002068:	2200      	movs	r2, #0
 800206a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800206c:	4b13      	ldr	r3, [pc, #76]	@ (80020bc <HAL_ADC_MspInit+0x120>)
 800206e:	2280      	movs	r2, #128	@ 0x80
 8002070:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002072:	4b12      	ldr	r3, [pc, #72]	@ (80020bc <HAL_ADC_MspInit+0x120>)
 8002074:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002078:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800207a:	4b10      	ldr	r3, [pc, #64]	@ (80020bc <HAL_ADC_MspInit+0x120>)
 800207c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002080:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002082:	4b0e      	ldr	r3, [pc, #56]	@ (80020bc <HAL_ADC_MspInit+0x120>)
 8002084:	2220      	movs	r2, #32
 8002086:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002088:	4b0c      	ldr	r3, [pc, #48]	@ (80020bc <HAL_ADC_MspInit+0x120>)
 800208a:	2200      	movs	r2, #0
 800208c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800208e:	480b      	ldr	r0, [pc, #44]	@ (80020bc <HAL_ADC_MspInit+0x120>)
 8002090:	f001 fc06 	bl	80038a0 <HAL_DMA_Init>
 8002094:	4603      	mov	r3, r0
 8002096:	2b00      	cmp	r3, #0
 8002098:	d001      	beq.n	800209e <HAL_ADC_MspInit+0x102>
    {
      Error_Handler();
 800209a:	f7ff ff55 	bl	8001f48 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	4a06      	ldr	r2, [pc, #24]	@ (80020bc <HAL_ADC_MspInit+0x120>)
 80020a2:	64da      	str	r2, [r3, #76]	@ 0x4c
 80020a4:	4a05      	ldr	r2, [pc, #20]	@ (80020bc <HAL_ADC_MspInit+0x120>)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6293      	str	r3, [r2, #40]	@ 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80020aa:	bf00      	nop
 80020ac:	3778      	adds	r7, #120	@ 0x78
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bd80      	pop	{r7, pc}
 80020b2:	bf00      	nop
 80020b4:	50040000 	.word	0x50040000
 80020b8:	40021000 	.word	0x40021000
 80020bc:	2000008c 	.word	0x2000008c
 80020c0:	40020008 	.word	0x40020008

080020c4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b09e      	sub	sp, #120	@ 0x78
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020cc:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80020d0:	2200      	movs	r2, #0
 80020d2:	601a      	str	r2, [r3, #0]
 80020d4:	605a      	str	r2, [r3, #4]
 80020d6:	609a      	str	r2, [r3, #8]
 80020d8:	60da      	str	r2, [r3, #12]
 80020da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80020dc:	f107 0310 	add.w	r3, r7, #16
 80020e0:	2254      	movs	r2, #84	@ 0x54
 80020e2:	2100      	movs	r1, #0
 80020e4:	4618      	mov	r0, r3
 80020e6:	f005 fbb6 	bl	8007856 <memset>
  if(hi2c->Instance==I2C1)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	4a1f      	ldr	r2, [pc, #124]	@ (800216c <HAL_I2C_MspInit+0xa8>)
 80020f0:	4293      	cmp	r3, r2
 80020f2:	d137      	bne.n	8002164 <HAL_I2C_MspInit+0xa0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80020f4:	2340      	movs	r3, #64	@ 0x40
 80020f6:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80020f8:	2300      	movs	r3, #0
 80020fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80020fc:	f107 0310 	add.w	r3, r7, #16
 8002100:	4618      	mov	r0, r3
 8002102:	f003 fcc5 	bl	8005a90 <HAL_RCCEx_PeriphCLKConfig>
 8002106:	4603      	mov	r3, r0
 8002108:	2b00      	cmp	r3, #0
 800210a:	d001      	beq.n	8002110 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 800210c:	f7ff ff1c 	bl	8001f48 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002110:	4b17      	ldr	r3, [pc, #92]	@ (8002170 <HAL_I2C_MspInit+0xac>)
 8002112:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002114:	4a16      	ldr	r2, [pc, #88]	@ (8002170 <HAL_I2C_MspInit+0xac>)
 8002116:	f043 0301 	orr.w	r3, r3, #1
 800211a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800211c:	4b14      	ldr	r3, [pc, #80]	@ (8002170 <HAL_I2C_MspInit+0xac>)
 800211e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002120:	f003 0301 	and.w	r3, r3, #1
 8002124:	60fb      	str	r3, [r7, #12]
 8002126:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002128:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800212c:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800212e:	2312      	movs	r3, #18
 8002130:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002132:	2300      	movs	r3, #0
 8002134:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002136:	2303      	movs	r3, #3
 8002138:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800213a:	2304      	movs	r3, #4
 800213c:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800213e:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002142:	4619      	mov	r1, r3
 8002144:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002148:	f001 fda2 	bl	8003c90 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800214c:	4b08      	ldr	r3, [pc, #32]	@ (8002170 <HAL_I2C_MspInit+0xac>)
 800214e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002150:	4a07      	ldr	r2, [pc, #28]	@ (8002170 <HAL_I2C_MspInit+0xac>)
 8002152:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002156:	6593      	str	r3, [r2, #88]	@ 0x58
 8002158:	4b05      	ldr	r3, [pc, #20]	@ (8002170 <HAL_I2C_MspInit+0xac>)
 800215a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800215c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002160:	60bb      	str	r3, [r7, #8]
 8002162:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002164:	bf00      	nop
 8002166:	3778      	adds	r7, #120	@ 0x78
 8002168:	46bd      	mov	sp, r7
 800216a:	bd80      	pop	{r7, pc}
 800216c:	40005400 	.word	0x40005400
 8002170:	40021000 	.word	0x40021000

08002174 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b098      	sub	sp, #96	@ 0x60
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800217c:	f107 030c 	add.w	r3, r7, #12
 8002180:	2254      	movs	r2, #84	@ 0x54
 8002182:	2100      	movs	r1, #0
 8002184:	4618      	mov	r0, r3
 8002186:	f005 fb66 	bl	8007856 <memset>
  if(hrtc->Instance==RTC)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	4a13      	ldr	r2, [pc, #76]	@ (80021dc <HAL_RTC_MspInit+0x68>)
 8002190:	4293      	cmp	r3, r2
 8002192:	d11f      	bne.n	80021d4 <HAL_RTC_MspInit+0x60>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002194:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002198:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800219a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800219e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80021a0:	f107 030c 	add.w	r3, r7, #12
 80021a4:	4618      	mov	r0, r3
 80021a6:	f003 fc73 	bl	8005a90 <HAL_RCCEx_PeriphCLKConfig>
 80021aa:	4603      	mov	r3, r0
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d001      	beq.n	80021b4 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 80021b0:	f7ff feca 	bl	8001f48 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80021b4:	4b0a      	ldr	r3, [pc, #40]	@ (80021e0 <HAL_RTC_MspInit+0x6c>)
 80021b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021ba:	4a09      	ldr	r2, [pc, #36]	@ (80021e0 <HAL_RTC_MspInit+0x6c>)
 80021bc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80021c0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 80021c4:	2200      	movs	r2, #0
 80021c6:	2100      	movs	r1, #0
 80021c8:	2029      	movs	r0, #41	@ 0x29
 80021ca:	f001 fb32 	bl	8003832 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 80021ce:	2029      	movs	r0, #41	@ 0x29
 80021d0:	f001 fb4b 	bl	800386a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80021d4:	bf00      	nop
 80021d6:	3760      	adds	r7, #96	@ 0x60
 80021d8:	46bd      	mov	sp, r7
 80021da:	bd80      	pop	{r7, pc}
 80021dc:	40002800 	.word	0x40002800
 80021e0:	40021000 	.word	0x40021000

080021e4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80021e4:	b480      	push	{r7}
 80021e6:	b085      	sub	sp, #20
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80021f4:	d10b      	bne.n	800220e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80021f6:	4b09      	ldr	r3, [pc, #36]	@ (800221c <HAL_TIM_Base_MspInit+0x38>)
 80021f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021fa:	4a08      	ldr	r2, [pc, #32]	@ (800221c <HAL_TIM_Base_MspInit+0x38>)
 80021fc:	f043 0301 	orr.w	r3, r3, #1
 8002200:	6593      	str	r3, [r2, #88]	@ 0x58
 8002202:	4b06      	ldr	r3, [pc, #24]	@ (800221c <HAL_TIM_Base_MspInit+0x38>)
 8002204:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002206:	f003 0301 	and.w	r3, r3, #1
 800220a:	60fb      	str	r3, [r7, #12]
 800220c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800220e:	bf00      	nop
 8002210:	3714      	adds	r7, #20
 8002212:	46bd      	mov	sp, r7
 8002214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002218:	4770      	bx	lr
 800221a:	bf00      	nop
 800221c:	40021000 	.word	0x40021000

08002220 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b09e      	sub	sp, #120	@ 0x78
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002228:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800222c:	2200      	movs	r2, #0
 800222e:	601a      	str	r2, [r3, #0]
 8002230:	605a      	str	r2, [r3, #4]
 8002232:	609a      	str	r2, [r3, #8]
 8002234:	60da      	str	r2, [r3, #12]
 8002236:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002238:	f107 0310 	add.w	r3, r7, #16
 800223c:	2254      	movs	r2, #84	@ 0x54
 800223e:	2100      	movs	r1, #0
 8002240:	4618      	mov	r0, r3
 8002242:	f005 fb08 	bl	8007856 <memset>
  if(huart->Instance==USART1)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	4a1e      	ldr	r2, [pc, #120]	@ (80022c4 <HAL_UART_MspInit+0xa4>)
 800224c:	4293      	cmp	r3, r2
 800224e:	d135      	bne.n	80022bc <HAL_UART_MspInit+0x9c>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002250:	2301      	movs	r3, #1
 8002252:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002254:	2300      	movs	r3, #0
 8002256:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002258:	f107 0310 	add.w	r3, r7, #16
 800225c:	4618      	mov	r0, r3
 800225e:	f003 fc17 	bl	8005a90 <HAL_RCCEx_PeriphCLKConfig>
 8002262:	4603      	mov	r3, r0
 8002264:	2b00      	cmp	r3, #0
 8002266:	d001      	beq.n	800226c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002268:	f7ff fe6e 	bl	8001f48 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800226c:	4b16      	ldr	r3, [pc, #88]	@ (80022c8 <HAL_UART_MspInit+0xa8>)
 800226e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002270:	4a15      	ldr	r2, [pc, #84]	@ (80022c8 <HAL_UART_MspInit+0xa8>)
 8002272:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002276:	6613      	str	r3, [r2, #96]	@ 0x60
 8002278:	4b13      	ldr	r3, [pc, #76]	@ (80022c8 <HAL_UART_MspInit+0xa8>)
 800227a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800227c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002280:	60fb      	str	r3, [r7, #12]
 8002282:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002284:	4b10      	ldr	r3, [pc, #64]	@ (80022c8 <HAL_UART_MspInit+0xa8>)
 8002286:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002288:	4a0f      	ldr	r2, [pc, #60]	@ (80022c8 <HAL_UART_MspInit+0xa8>)
 800228a:	f043 0302 	orr.w	r3, r3, #2
 800228e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002290:	4b0d      	ldr	r3, [pc, #52]	@ (80022c8 <HAL_UART_MspInit+0xa8>)
 8002292:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002294:	f003 0302 	and.w	r3, r3, #2
 8002298:	60bb      	str	r3, [r7, #8]
 800229a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800229c:	23c0      	movs	r3, #192	@ 0xc0
 800229e:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022a0:	2302      	movs	r3, #2
 80022a2:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022a4:	2300      	movs	r3, #0
 80022a6:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022a8:	2303      	movs	r3, #3
 80022aa:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80022ac:	2307      	movs	r3, #7
 80022ae:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022b0:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80022b4:	4619      	mov	r1, r3
 80022b6:	4805      	ldr	r0, [pc, #20]	@ (80022cc <HAL_UART_MspInit+0xac>)
 80022b8:	f001 fcea 	bl	8003c90 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80022bc:	bf00      	nop
 80022be:	3778      	adds	r7, #120	@ 0x78
 80022c0:	46bd      	mov	sp, r7
 80022c2:	bd80      	pop	{r7, pc}
 80022c4:	40013800 	.word	0x40013800
 80022c8:	40021000 	.word	0x40021000
 80022cc:	48000400 	.word	0x48000400

080022d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80022d0:	b480      	push	{r7}
 80022d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80022d4:	bf00      	nop
 80022d6:	e7fd      	b.n	80022d4 <NMI_Handler+0x4>

080022d8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80022d8:	b480      	push	{r7}
 80022da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80022dc:	bf00      	nop
 80022de:	e7fd      	b.n	80022dc <HardFault_Handler+0x4>

080022e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80022e0:	b480      	push	{r7}
 80022e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80022e4:	bf00      	nop
 80022e6:	e7fd      	b.n	80022e4 <MemManage_Handler+0x4>

080022e8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80022e8:	b480      	push	{r7}
 80022ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80022ec:	bf00      	nop
 80022ee:	e7fd      	b.n	80022ec <BusFault_Handler+0x4>

080022f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80022f0:	b480      	push	{r7}
 80022f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80022f4:	bf00      	nop
 80022f6:	e7fd      	b.n	80022f4 <UsageFault_Handler+0x4>

080022f8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80022f8:	b480      	push	{r7}
 80022fa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80022fc:	bf00      	nop
 80022fe:	46bd      	mov	sp, r7
 8002300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002304:	4770      	bx	lr

08002306 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002306:	b480      	push	{r7}
 8002308:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800230a:	bf00      	nop
 800230c:	46bd      	mov	sp, r7
 800230e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002312:	4770      	bx	lr

08002314 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002314:	b480      	push	{r7}
 8002316:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002318:	bf00      	nop
 800231a:	46bd      	mov	sp, r7
 800231c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002320:	4770      	bx	lr

08002322 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002322:	b580      	push	{r7, lr}
 8002324:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002326:	f000 f8a7 	bl	8002478 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800232a:	bf00      	nop
 800232c:	bd80      	pop	{r7, pc}
	...

08002330 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002334:	4802      	ldr	r0, [pc, #8]	@ (8002340 <DMA1_Channel1_IRQHandler+0x10>)
 8002336:	f001 fbcb 	bl	8003ad0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800233a:	bf00      	nop
 800233c:	bd80      	pop	{r7, pc}
 800233e:	bf00      	nop
 8002340:	2000008c 	.word	0x2000008c

08002344 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarm interrupt through EXTI line 18.
  */
void RTC_Alarm_IRQHandler(void)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8002348:	4802      	ldr	r0, [pc, #8]	@ (8002354 <RTC_Alarm_IRQHandler+0x10>)
 800234a:	f004 f981 	bl	8006650 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 800234e:	bf00      	nop
 8002350:	bd80      	pop	{r7, pc}
 8002352:	bf00      	nop
 8002354:	20000128 	.word	0x20000128

08002358 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002358:	b480      	push	{r7}
 800235a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800235c:	4b06      	ldr	r3, [pc, #24]	@ (8002378 <SystemInit+0x20>)
 800235e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002362:	4a05      	ldr	r2, [pc, #20]	@ (8002378 <SystemInit+0x20>)
 8002364:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002368:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 800236c:	bf00      	nop
 800236e:	46bd      	mov	sp, r7
 8002370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002374:	4770      	bx	lr
 8002376:	bf00      	nop
 8002378:	e000ed00 	.word	0xe000ed00

0800237c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800237c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80023b4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002380:	f7ff ffea 	bl	8002358 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002384:	480c      	ldr	r0, [pc, #48]	@ (80023b8 <LoopForever+0x6>)
  ldr r1, =_edata
 8002386:	490d      	ldr	r1, [pc, #52]	@ (80023bc <LoopForever+0xa>)
  ldr r2, =_sidata
 8002388:	4a0d      	ldr	r2, [pc, #52]	@ (80023c0 <LoopForever+0xe>)
  movs r3, #0
 800238a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800238c:	e002      	b.n	8002394 <LoopCopyDataInit>

0800238e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800238e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002390:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002392:	3304      	adds	r3, #4

08002394 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002394:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002396:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002398:	d3f9      	bcc.n	800238e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800239a:	4a0a      	ldr	r2, [pc, #40]	@ (80023c4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800239c:	4c0a      	ldr	r4, [pc, #40]	@ (80023c8 <LoopForever+0x16>)
  movs r3, #0
 800239e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80023a0:	e001      	b.n	80023a6 <LoopFillZerobss>

080023a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80023a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80023a4:	3204      	adds	r2, #4

080023a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80023a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80023a8:	d3fb      	bcc.n	80023a2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80023aa:	f005 fa5d 	bl	8007868 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80023ae:	f7ff fa1b 	bl	80017e8 <main>

080023b2 <LoopForever>:

LoopForever:
    b LoopForever
 80023b2:	e7fe      	b.n	80023b2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80023b4:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80023b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80023bc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80023c0:	08007920 	.word	0x08007920
  ldr r2, =_sbss
 80023c4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80023c8:	20000288 	.word	0x20000288

080023cc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80023cc:	e7fe      	b.n	80023cc <ADC1_IRQHandler>

080023ce <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80023ce:	b580      	push	{r7, lr}
 80023d0:	b082      	sub	sp, #8
 80023d2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80023d4:	2300      	movs	r3, #0
 80023d6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80023d8:	2003      	movs	r0, #3
 80023da:	f001 fa1f 	bl	800381c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80023de:	2000      	movs	r0, #0
 80023e0:	f000 f80e 	bl	8002400 <HAL_InitTick>
 80023e4:	4603      	mov	r3, r0
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d002      	beq.n	80023f0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80023ea:	2301      	movs	r3, #1
 80023ec:	71fb      	strb	r3, [r7, #7]
 80023ee:	e001      	b.n	80023f4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80023f0:	f7ff fdb0 	bl	8001f54 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80023f4:	79fb      	ldrb	r3, [r7, #7]
}
 80023f6:	4618      	mov	r0, r3
 80023f8:	3708      	adds	r7, #8
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bd80      	pop	{r7, pc}
	...

08002400 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b084      	sub	sp, #16
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002408:	2300      	movs	r3, #0
 800240a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800240c:	4b17      	ldr	r3, [pc, #92]	@ (800246c <HAL_InitTick+0x6c>)
 800240e:	781b      	ldrb	r3, [r3, #0]
 8002410:	2b00      	cmp	r3, #0
 8002412:	d023      	beq.n	800245c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002414:	4b16      	ldr	r3, [pc, #88]	@ (8002470 <HAL_InitTick+0x70>)
 8002416:	681a      	ldr	r2, [r3, #0]
 8002418:	4b14      	ldr	r3, [pc, #80]	@ (800246c <HAL_InitTick+0x6c>)
 800241a:	781b      	ldrb	r3, [r3, #0]
 800241c:	4619      	mov	r1, r3
 800241e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002422:	fbb3 f3f1 	udiv	r3, r3, r1
 8002426:	fbb2 f3f3 	udiv	r3, r2, r3
 800242a:	4618      	mov	r0, r3
 800242c:	f001 fa2b 	bl	8003886 <HAL_SYSTICK_Config>
 8002430:	4603      	mov	r3, r0
 8002432:	2b00      	cmp	r3, #0
 8002434:	d10f      	bne.n	8002456 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	2b0f      	cmp	r3, #15
 800243a:	d809      	bhi.n	8002450 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800243c:	2200      	movs	r2, #0
 800243e:	6879      	ldr	r1, [r7, #4]
 8002440:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002444:	f001 f9f5 	bl	8003832 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002448:	4a0a      	ldr	r2, [pc, #40]	@ (8002474 <HAL_InitTick+0x74>)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6013      	str	r3, [r2, #0]
 800244e:	e007      	b.n	8002460 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002450:	2301      	movs	r3, #1
 8002452:	73fb      	strb	r3, [r7, #15]
 8002454:	e004      	b.n	8002460 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002456:	2301      	movs	r3, #1
 8002458:	73fb      	strb	r3, [r7, #15]
 800245a:	e001      	b.n	8002460 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800245c:	2301      	movs	r3, #1
 800245e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002460:	7bfb      	ldrb	r3, [r7, #15]
}
 8002462:	4618      	mov	r0, r3
 8002464:	3710      	adds	r7, #16
 8002466:	46bd      	mov	sp, r7
 8002468:	bd80      	pop	{r7, pc}
 800246a:	bf00      	nop
 800246c:	20000008 	.word	0x20000008
 8002470:	20000000 	.word	0x20000000
 8002474:	20000004 	.word	0x20000004

08002478 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002478:	b480      	push	{r7}
 800247a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800247c:	4b06      	ldr	r3, [pc, #24]	@ (8002498 <HAL_IncTick+0x20>)
 800247e:	781b      	ldrb	r3, [r3, #0]
 8002480:	461a      	mov	r2, r3
 8002482:	4b06      	ldr	r3, [pc, #24]	@ (800249c <HAL_IncTick+0x24>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	4413      	add	r3, r2
 8002488:	4a04      	ldr	r2, [pc, #16]	@ (800249c <HAL_IncTick+0x24>)
 800248a:	6013      	str	r3, [r2, #0]
}
 800248c:	bf00      	nop
 800248e:	46bd      	mov	sp, r7
 8002490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002494:	4770      	bx	lr
 8002496:	bf00      	nop
 8002498:	20000008 	.word	0x20000008
 800249c:	20000284 	.word	0x20000284

080024a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80024a0:	b480      	push	{r7}
 80024a2:	af00      	add	r7, sp, #0
  return uwTick;
 80024a4:	4b03      	ldr	r3, [pc, #12]	@ (80024b4 <HAL_GetTick+0x14>)
 80024a6:	681b      	ldr	r3, [r3, #0]
}
 80024a8:	4618      	mov	r0, r3
 80024aa:	46bd      	mov	sp, r7
 80024ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b0:	4770      	bx	lr
 80024b2:	bf00      	nop
 80024b4:	20000284 	.word	0x20000284

080024b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b084      	sub	sp, #16
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80024c0:	f7ff ffee 	bl	80024a0 <HAL_GetTick>
 80024c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80024d0:	d005      	beq.n	80024de <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80024d2:	4b0a      	ldr	r3, [pc, #40]	@ (80024fc <HAL_Delay+0x44>)
 80024d4:	781b      	ldrb	r3, [r3, #0]
 80024d6:	461a      	mov	r2, r3
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	4413      	add	r3, r2
 80024dc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80024de:	bf00      	nop
 80024e0:	f7ff ffde 	bl	80024a0 <HAL_GetTick>
 80024e4:	4602      	mov	r2, r0
 80024e6:	68bb      	ldr	r3, [r7, #8]
 80024e8:	1ad3      	subs	r3, r2, r3
 80024ea:	68fa      	ldr	r2, [r7, #12]
 80024ec:	429a      	cmp	r2, r3
 80024ee:	d8f7      	bhi.n	80024e0 <HAL_Delay+0x28>
  {
  }
}
 80024f0:	bf00      	nop
 80024f2:	bf00      	nop
 80024f4:	3710      	adds	r7, #16
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bd80      	pop	{r7, pc}
 80024fa:	bf00      	nop
 80024fc:	20000008 	.word	0x20000008

08002500 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8002500:	b480      	push	{r7}
 8002502:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 8002504:	4b05      	ldr	r3, [pc, #20]	@ (800251c <HAL_SuspendTick+0x1c>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	4a04      	ldr	r2, [pc, #16]	@ (800251c <HAL_SuspendTick+0x1c>)
 800250a:	f023 0302 	bic.w	r3, r3, #2
 800250e:	6013      	str	r3, [r2, #0]
}
 8002510:	bf00      	nop
 8002512:	46bd      	mov	sp, r7
 8002514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002518:	4770      	bx	lr
 800251a:	bf00      	nop
 800251c:	e000e010 	.word	0xe000e010

08002520 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8002520:	b480      	push	{r7}
 8002522:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 8002524:	4b05      	ldr	r3, [pc, #20]	@ (800253c <HAL_ResumeTick+0x1c>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	4a04      	ldr	r2, [pc, #16]	@ (800253c <HAL_ResumeTick+0x1c>)
 800252a:	f043 0302 	orr.w	r3, r3, #2
 800252e:	6013      	str	r3, [r2, #0]
}
 8002530:	bf00      	nop
 8002532:	46bd      	mov	sp, r7
 8002534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002538:	4770      	bx	lr
 800253a:	bf00      	nop
 800253c:	e000e010 	.word	0xe000e010

08002540 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002540:	b480      	push	{r7}
 8002542:	b083      	sub	sp, #12
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
 8002548:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	689b      	ldr	r3, [r3, #8]
 800254e:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	431a      	orrs	r2, r3
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	609a      	str	r2, [r3, #8]
}
 800255a:	bf00      	nop
 800255c:	370c      	adds	r7, #12
 800255e:	46bd      	mov	sp, r7
 8002560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002564:	4770      	bx	lr

08002566 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002566:	b480      	push	{r7}
 8002568:	b083      	sub	sp, #12
 800256a:	af00      	add	r7, sp, #0
 800256c:	6078      	str	r0, [r7, #4]
 800256e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	689b      	ldr	r3, [r3, #8]
 8002574:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	431a      	orrs	r2, r3
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	609a      	str	r2, [r3, #8]
}
 8002580:	bf00      	nop
 8002582:	370c      	adds	r7, #12
 8002584:	46bd      	mov	sp, r7
 8002586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258a:	4770      	bx	lr

0800258c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800258c:	b480      	push	{r7}
 800258e:	b083      	sub	sp, #12
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	689b      	ldr	r3, [r3, #8]
 8002598:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 800259c:	4618      	mov	r0, r3
 800259e:	370c      	adds	r7, #12
 80025a0:	46bd      	mov	sp, r7
 80025a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a6:	4770      	bx	lr

080025a8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80025a8:	b480      	push	{r7}
 80025aa:	b087      	sub	sp, #28
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	60f8      	str	r0, [r7, #12]
 80025b0:	60b9      	str	r1, [r7, #8]
 80025b2:	607a      	str	r2, [r7, #4]
 80025b4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	3360      	adds	r3, #96	@ 0x60
 80025ba:	461a      	mov	r2, r3
 80025bc:	68bb      	ldr	r3, [r7, #8]
 80025be:	009b      	lsls	r3, r3, #2
 80025c0:	4413      	add	r3, r2
 80025c2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80025c4:	697b      	ldr	r3, [r7, #20]
 80025c6:	681a      	ldr	r2, [r3, #0]
 80025c8:	4b08      	ldr	r3, [pc, #32]	@ (80025ec <LL_ADC_SetOffset+0x44>)
 80025ca:	4013      	ands	r3, r2
 80025cc:	687a      	ldr	r2, [r7, #4]
 80025ce:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 80025d2:	683a      	ldr	r2, [r7, #0]
 80025d4:	430a      	orrs	r2, r1
 80025d6:	4313      	orrs	r3, r2
 80025d8:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80025dc:	697b      	ldr	r3, [r7, #20]
 80025de:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80025e0:	bf00      	nop
 80025e2:	371c      	adds	r7, #28
 80025e4:	46bd      	mov	sp, r7
 80025e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ea:	4770      	bx	lr
 80025ec:	03fff000 	.word	0x03fff000

080025f0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80025f0:	b480      	push	{r7}
 80025f2:	b085      	sub	sp, #20
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
 80025f8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	3360      	adds	r3, #96	@ 0x60
 80025fe:	461a      	mov	r2, r3
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	009b      	lsls	r3, r3, #2
 8002604:	4413      	add	r3, r2
 8002606:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8002610:	4618      	mov	r0, r3
 8002612:	3714      	adds	r7, #20
 8002614:	46bd      	mov	sp, r7
 8002616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261a:	4770      	bx	lr

0800261c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800261c:	b480      	push	{r7}
 800261e:	b087      	sub	sp, #28
 8002620:	af00      	add	r7, sp, #0
 8002622:	60f8      	str	r0, [r7, #12]
 8002624:	60b9      	str	r1, [r7, #8]
 8002626:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	3360      	adds	r3, #96	@ 0x60
 800262c:	461a      	mov	r2, r3
 800262e:	68bb      	ldr	r3, [r7, #8]
 8002630:	009b      	lsls	r3, r3, #2
 8002632:	4413      	add	r3, r2
 8002634:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002636:	697b      	ldr	r3, [r7, #20]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	431a      	orrs	r2, r3
 8002642:	697b      	ldr	r3, [r7, #20]
 8002644:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002646:	bf00      	nop
 8002648:	371c      	adds	r7, #28
 800264a:	46bd      	mov	sp, r7
 800264c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002650:	4770      	bx	lr

08002652 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002652:	b480      	push	{r7}
 8002654:	b083      	sub	sp, #12
 8002656:	af00      	add	r7, sp, #0
 8002658:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	68db      	ldr	r3, [r3, #12]
 800265e:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002662:	2b00      	cmp	r3, #0
 8002664:	d101      	bne.n	800266a <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002666:	2301      	movs	r3, #1
 8002668:	e000      	b.n	800266c <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800266a:	2300      	movs	r3, #0
}
 800266c:	4618      	mov	r0, r3
 800266e:	370c      	adds	r7, #12
 8002670:	46bd      	mov	sp, r7
 8002672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002676:	4770      	bx	lr

08002678 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002678:	b480      	push	{r7}
 800267a:	b087      	sub	sp, #28
 800267c:	af00      	add	r7, sp, #0
 800267e:	60f8      	str	r0, [r7, #12]
 8002680:	60b9      	str	r1, [r7, #8]
 8002682:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	3330      	adds	r3, #48	@ 0x30
 8002688:	461a      	mov	r2, r3
 800268a:	68bb      	ldr	r3, [r7, #8]
 800268c:	0a1b      	lsrs	r3, r3, #8
 800268e:	009b      	lsls	r3, r3, #2
 8002690:	f003 030c 	and.w	r3, r3, #12
 8002694:	4413      	add	r3, r2
 8002696:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002698:	697b      	ldr	r3, [r7, #20]
 800269a:	681a      	ldr	r2, [r3, #0]
 800269c:	68bb      	ldr	r3, [r7, #8]
 800269e:	f003 031f 	and.w	r3, r3, #31
 80026a2:	211f      	movs	r1, #31
 80026a4:	fa01 f303 	lsl.w	r3, r1, r3
 80026a8:	43db      	mvns	r3, r3
 80026aa:	401a      	ands	r2, r3
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	0e9b      	lsrs	r3, r3, #26
 80026b0:	f003 011f 	and.w	r1, r3, #31
 80026b4:	68bb      	ldr	r3, [r7, #8]
 80026b6:	f003 031f 	and.w	r3, r3, #31
 80026ba:	fa01 f303 	lsl.w	r3, r1, r3
 80026be:	431a      	orrs	r2, r3
 80026c0:	697b      	ldr	r3, [r7, #20]
 80026c2:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80026c4:	bf00      	nop
 80026c6:	371c      	adds	r7, #28
 80026c8:	46bd      	mov	sp, r7
 80026ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ce:	4770      	bx	lr

080026d0 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80026d0:	b480      	push	{r7}
 80026d2:	b087      	sub	sp, #28
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	60f8      	str	r0, [r7, #12]
 80026d8:	60b9      	str	r1, [r7, #8]
 80026da:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	3314      	adds	r3, #20
 80026e0:	461a      	mov	r2, r3
 80026e2:	68bb      	ldr	r3, [r7, #8]
 80026e4:	0e5b      	lsrs	r3, r3, #25
 80026e6:	009b      	lsls	r3, r3, #2
 80026e8:	f003 0304 	and.w	r3, r3, #4
 80026ec:	4413      	add	r3, r2
 80026ee:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80026f0:	697b      	ldr	r3, [r7, #20]
 80026f2:	681a      	ldr	r2, [r3, #0]
 80026f4:	68bb      	ldr	r3, [r7, #8]
 80026f6:	0d1b      	lsrs	r3, r3, #20
 80026f8:	f003 031f 	and.w	r3, r3, #31
 80026fc:	2107      	movs	r1, #7
 80026fe:	fa01 f303 	lsl.w	r3, r1, r3
 8002702:	43db      	mvns	r3, r3
 8002704:	401a      	ands	r2, r3
 8002706:	68bb      	ldr	r3, [r7, #8]
 8002708:	0d1b      	lsrs	r3, r3, #20
 800270a:	f003 031f 	and.w	r3, r3, #31
 800270e:	6879      	ldr	r1, [r7, #4]
 8002710:	fa01 f303 	lsl.w	r3, r1, r3
 8002714:	431a      	orrs	r2, r3
 8002716:	697b      	ldr	r3, [r7, #20]
 8002718:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800271a:	bf00      	nop
 800271c:	371c      	adds	r7, #28
 800271e:	46bd      	mov	sp, r7
 8002720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002724:	4770      	bx	lr
	...

08002728 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002728:	b480      	push	{r7}
 800272a:	b085      	sub	sp, #20
 800272c:	af00      	add	r7, sp, #0
 800272e:	60f8      	str	r0, [r7, #12]
 8002730:	60b9      	str	r1, [r7, #8]
 8002732:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800273a:	68bb      	ldr	r3, [r7, #8]
 800273c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002740:	43db      	mvns	r3, r3
 8002742:	401a      	ands	r2, r3
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	f003 0318 	and.w	r3, r3, #24
 800274a:	4908      	ldr	r1, [pc, #32]	@ (800276c <LL_ADC_SetChannelSingleDiff+0x44>)
 800274c:	40d9      	lsrs	r1, r3
 800274e:	68bb      	ldr	r3, [r7, #8]
 8002750:	400b      	ands	r3, r1
 8002752:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002756:	431a      	orrs	r2, r3
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800275e:	bf00      	nop
 8002760:	3714      	adds	r7, #20
 8002762:	46bd      	mov	sp, r7
 8002764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002768:	4770      	bx	lr
 800276a:	bf00      	nop
 800276c:	0007ffff 	.word	0x0007ffff

08002770 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002770:	b480      	push	{r7}
 8002772:	b083      	sub	sp, #12
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	689b      	ldr	r3, [r3, #8]
 800277c:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8002780:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002784:	687a      	ldr	r2, [r7, #4]
 8002786:	6093      	str	r3, [r2, #8]
}
 8002788:	bf00      	nop
 800278a:	370c      	adds	r7, #12
 800278c:	46bd      	mov	sp, r7
 800278e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002792:	4770      	bx	lr

08002794 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002794:	b480      	push	{r7}
 8002796:	b083      	sub	sp, #12
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	689b      	ldr	r3, [r3, #8]
 80027a0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80027a4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80027a8:	d101      	bne.n	80027ae <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80027aa:	2301      	movs	r3, #1
 80027ac:	e000      	b.n	80027b0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80027ae:	2300      	movs	r3, #0
}
 80027b0:	4618      	mov	r0, r3
 80027b2:	370c      	adds	r7, #12
 80027b4:	46bd      	mov	sp, r7
 80027b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ba:	4770      	bx	lr

080027bc <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80027bc:	b480      	push	{r7}
 80027be:	b083      	sub	sp, #12
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	689b      	ldr	r3, [r3, #8]
 80027c8:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80027cc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80027d0:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80027d8:	bf00      	nop
 80027da:	370c      	adds	r7, #12
 80027dc:	46bd      	mov	sp, r7
 80027de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e2:	4770      	bx	lr

080027e4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80027e4:	b480      	push	{r7}
 80027e6:	b083      	sub	sp, #12
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	689b      	ldr	r3, [r3, #8]
 80027f0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027f4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80027f8:	d101      	bne.n	80027fe <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80027fa:	2301      	movs	r3, #1
 80027fc:	e000      	b.n	8002800 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80027fe:	2300      	movs	r3, #0
}
 8002800:	4618      	mov	r0, r3
 8002802:	370c      	adds	r7, #12
 8002804:	46bd      	mov	sp, r7
 8002806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280a:	4770      	bx	lr

0800280c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800280c:	b480      	push	{r7}
 800280e:	b083      	sub	sp, #12
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	689b      	ldr	r3, [r3, #8]
 8002818:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800281c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002820:	f043 0201 	orr.w	r2, r3, #1
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002828:	bf00      	nop
 800282a:	370c      	adds	r7, #12
 800282c:	46bd      	mov	sp, r7
 800282e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002832:	4770      	bx	lr

08002834 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002834:	b480      	push	{r7}
 8002836:	b083      	sub	sp, #12
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	689b      	ldr	r3, [r3, #8]
 8002840:	f003 0301 	and.w	r3, r3, #1
 8002844:	2b01      	cmp	r3, #1
 8002846:	d101      	bne.n	800284c <LL_ADC_IsEnabled+0x18>
 8002848:	2301      	movs	r3, #1
 800284a:	e000      	b.n	800284e <LL_ADC_IsEnabled+0x1a>
 800284c:	2300      	movs	r3, #0
}
 800284e:	4618      	mov	r0, r3
 8002850:	370c      	adds	r7, #12
 8002852:	46bd      	mov	sp, r7
 8002854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002858:	4770      	bx	lr

0800285a <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800285a:	b480      	push	{r7}
 800285c:	b083      	sub	sp, #12
 800285e:	af00      	add	r7, sp, #0
 8002860:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	689b      	ldr	r3, [r3, #8]
 8002866:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800286a:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800286e:	f043 0204 	orr.w	r2, r3, #4
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002876:	bf00      	nop
 8002878:	370c      	adds	r7, #12
 800287a:	46bd      	mov	sp, r7
 800287c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002880:	4770      	bx	lr

08002882 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002882:	b480      	push	{r7}
 8002884:	b083      	sub	sp, #12
 8002886:	af00      	add	r7, sp, #0
 8002888:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	689b      	ldr	r3, [r3, #8]
 800288e:	f003 0304 	and.w	r3, r3, #4
 8002892:	2b04      	cmp	r3, #4
 8002894:	d101      	bne.n	800289a <LL_ADC_REG_IsConversionOngoing+0x18>
 8002896:	2301      	movs	r3, #1
 8002898:	e000      	b.n	800289c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800289a:	2300      	movs	r3, #0
}
 800289c:	4618      	mov	r0, r3
 800289e:	370c      	adds	r7, #12
 80028a0:	46bd      	mov	sp, r7
 80028a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a6:	4770      	bx	lr

080028a8 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80028a8:	b480      	push	{r7}
 80028aa:	b083      	sub	sp, #12
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	689b      	ldr	r3, [r3, #8]
 80028b4:	f003 0308 	and.w	r3, r3, #8
 80028b8:	2b08      	cmp	r3, #8
 80028ba:	d101      	bne.n	80028c0 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80028bc:	2301      	movs	r3, #1
 80028be:	e000      	b.n	80028c2 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80028c0:	2300      	movs	r3, #0
}
 80028c2:	4618      	mov	r0, r3
 80028c4:	370c      	adds	r7, #12
 80028c6:	46bd      	mov	sp, r7
 80028c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028cc:	4770      	bx	lr
	...

080028d0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b088      	sub	sp, #32
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80028d8:	2300      	movs	r3, #0
 80028da:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80028dc:	2300      	movs	r3, #0
 80028de:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d101      	bne.n	80028ea <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80028e6:	2301      	movs	r3, #1
 80028e8:	e126      	b.n	8002b38 <HAL_ADC_Init+0x268>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	691b      	ldr	r3, [r3, #16]
 80028ee:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d109      	bne.n	800290c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80028f8:	6878      	ldr	r0, [r7, #4]
 80028fa:	f7ff fb4f 	bl	8001f9c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	2200      	movs	r2, #0
 8002902:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2200      	movs	r2, #0
 8002908:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4618      	mov	r0, r3
 8002912:	f7ff ff3f 	bl	8002794 <LL_ADC_IsDeepPowerDownEnabled>
 8002916:	4603      	mov	r3, r0
 8002918:	2b00      	cmp	r3, #0
 800291a:	d004      	beq.n	8002926 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	4618      	mov	r0, r3
 8002922:	f7ff ff25 	bl	8002770 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	4618      	mov	r0, r3
 800292c:	f7ff ff5a 	bl	80027e4 <LL_ADC_IsInternalRegulatorEnabled>
 8002930:	4603      	mov	r3, r0
 8002932:	2b00      	cmp	r3, #0
 8002934:	d115      	bne.n	8002962 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	4618      	mov	r0, r3
 800293c:	f7ff ff3e 	bl	80027bc <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002940:	4b7f      	ldr	r3, [pc, #508]	@ (8002b40 <HAL_ADC_Init+0x270>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	099b      	lsrs	r3, r3, #6
 8002946:	4a7f      	ldr	r2, [pc, #508]	@ (8002b44 <HAL_ADC_Init+0x274>)
 8002948:	fba2 2303 	umull	r2, r3, r2, r3
 800294c:	099b      	lsrs	r3, r3, #6
 800294e:	3301      	adds	r3, #1
 8002950:	005b      	lsls	r3, r3, #1
 8002952:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002954:	e002      	b.n	800295c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	3b01      	subs	r3, #1
 800295a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	2b00      	cmp	r3, #0
 8002960:	d1f9      	bne.n	8002956 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	4618      	mov	r0, r3
 8002968:	f7ff ff3c 	bl	80027e4 <LL_ADC_IsInternalRegulatorEnabled>
 800296c:	4603      	mov	r3, r0
 800296e:	2b00      	cmp	r3, #0
 8002970:	d10d      	bne.n	800298e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002976:	f043 0210 	orr.w	r2, r3, #16
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002982:	f043 0201 	orr.w	r2, r3, #1
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 800298a:	2301      	movs	r3, #1
 800298c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4618      	mov	r0, r3
 8002994:	f7ff ff75 	bl	8002882 <LL_ADC_REG_IsConversionOngoing>
 8002998:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800299e:	f003 0310 	and.w	r3, r3, #16
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	f040 80bf 	bne.w	8002b26 <HAL_ADC_Init+0x256>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80029a8:	697b      	ldr	r3, [r7, #20]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	f040 80bb 	bne.w	8002b26 <HAL_ADC_Init+0x256>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029b4:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80029b8:	f043 0202 	orr.w	r2, r3, #2
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4618      	mov	r0, r3
 80029c6:	f7ff ff35 	bl	8002834 <LL_ADC_IsEnabled>
 80029ca:	4603      	mov	r3, r0
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d10b      	bne.n	80029e8 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80029d0:	485d      	ldr	r0, [pc, #372]	@ (8002b48 <HAL_ADC_Init+0x278>)
 80029d2:	f7ff ff2f 	bl	8002834 <LL_ADC_IsEnabled>
 80029d6:	4603      	mov	r3, r0
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d105      	bne.n	80029e8 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	4619      	mov	r1, r3
 80029e2:	485a      	ldr	r0, [pc, #360]	@ (8002b4c <HAL_ADC_Init+0x27c>)
 80029e4:	f7ff fdac 	bl	8002540 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	7e5b      	ldrb	r3, [r3, #25]
 80029ec:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80029f2:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80029f8:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80029fe:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002a06:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002a08:	4313      	orrs	r3, r2
 8002a0a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002a12:	2b01      	cmp	r3, #1
 8002a14:	d106      	bne.n	8002a24 <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a1a:	3b01      	subs	r3, #1
 8002a1c:	045b      	lsls	r3, r3, #17
 8002a1e:	69ba      	ldr	r2, [r7, #24]
 8002a20:	4313      	orrs	r3, r2
 8002a22:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d009      	beq.n	8002a40 <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a30:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a38:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002a3a:	69ba      	ldr	r2, [r7, #24]
 8002a3c:	4313      	orrs	r3, r2
 8002a3e:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	68da      	ldr	r2, [r3, #12]
 8002a46:	4b42      	ldr	r3, [pc, #264]	@ (8002b50 <HAL_ADC_Init+0x280>)
 8002a48:	4013      	ands	r3, r2
 8002a4a:	687a      	ldr	r2, [r7, #4]
 8002a4c:	6812      	ldr	r2, [r2, #0]
 8002a4e:	69b9      	ldr	r1, [r7, #24]
 8002a50:	430b      	orrs	r3, r1
 8002a52:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4618      	mov	r0, r3
 8002a5a:	f7ff ff25 	bl	80028a8 <LL_ADC_INJ_IsConversionOngoing>
 8002a5e:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002a60:	697b      	ldr	r3, [r7, #20]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d13d      	bne.n	8002ae2 <HAL_ADC_Init+0x212>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002a66:	693b      	ldr	r3, [r7, #16]
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d13a      	bne.n	8002ae2 <HAL_ADC_Init+0x212>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002a70:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002a78:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002a7a:	4313      	orrs	r3, r2
 8002a7c:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	68db      	ldr	r3, [r3, #12]
 8002a84:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002a88:	f023 0302 	bic.w	r3, r3, #2
 8002a8c:	687a      	ldr	r2, [r7, #4]
 8002a8e:	6812      	ldr	r2, [r2, #0]
 8002a90:	69b9      	ldr	r1, [r7, #24]
 8002a92:	430b      	orrs	r3, r1
 8002a94:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002a9c:	2b01      	cmp	r3, #1
 8002a9e:	d118      	bne.n	8002ad2 <HAL_ADC_Init+0x202>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	691b      	ldr	r3, [r3, #16]
 8002aa6:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8002aaa:	f023 0304 	bic.w	r3, r3, #4
 8002aae:	687a      	ldr	r2, [r7, #4]
 8002ab0:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8002ab2:	687a      	ldr	r2, [r7, #4]
 8002ab4:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002ab6:	4311      	orrs	r1, r2
 8002ab8:	687a      	ldr	r2, [r7, #4]
 8002aba:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8002abc:	4311      	orrs	r1, r2
 8002abe:	687a      	ldr	r2, [r7, #4]
 8002ac0:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002ac2:	430a      	orrs	r2, r1
 8002ac4:	431a      	orrs	r2, r3
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f042 0201 	orr.w	r2, r2, #1
 8002ace:	611a      	str	r2, [r3, #16]
 8002ad0:	e007      	b.n	8002ae2 <HAL_ADC_Init+0x212>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	691a      	ldr	r2, [r3, #16]
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f022 0201 	bic.w	r2, r2, #1
 8002ae0:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	691b      	ldr	r3, [r3, #16]
 8002ae6:	2b01      	cmp	r3, #1
 8002ae8:	d10c      	bne.n	8002b04 <HAL_ADC_Init+0x234>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002af0:	f023 010f 	bic.w	r1, r3, #15
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	69db      	ldr	r3, [r3, #28]
 8002af8:	1e5a      	subs	r2, r3, #1
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	430a      	orrs	r2, r1
 8002b00:	631a      	str	r2, [r3, #48]	@ 0x30
 8002b02:	e007      	b.n	8002b14 <HAL_ADC_Init+0x244>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f022 020f 	bic.w	r2, r2, #15
 8002b12:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b18:	f023 0303 	bic.w	r3, r3, #3
 8002b1c:	f043 0201 	orr.w	r2, r3, #1
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	655a      	str	r2, [r3, #84]	@ 0x54
 8002b24:	e007      	b.n	8002b36 <HAL_ADC_Init+0x266>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b2a:	f043 0210 	orr.w	r2, r3, #16
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002b32:	2301      	movs	r3, #1
 8002b34:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002b36:	7ffb      	ldrb	r3, [r7, #31]
}
 8002b38:	4618      	mov	r0, r3
 8002b3a:	3720      	adds	r7, #32
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	bd80      	pop	{r7, pc}
 8002b40:	20000000 	.word	0x20000000
 8002b44:	053e2d63 	.word	0x053e2d63
 8002b48:	50040000 	.word	0x50040000
 8002b4c:	50040300 	.word	0x50040300
 8002b50:	fff0c007 	.word	0xfff0c007

08002b54 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b086      	sub	sp, #24
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	60f8      	str	r0, [r7, #12]
 8002b5c:	60b9      	str	r1, [r7, #8]
 8002b5e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4618      	mov	r0, r3
 8002b66:	f7ff fe8c 	bl	8002882 <LL_ADC_REG_IsConversionOngoing>
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d167      	bne.n	8002c40 <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002b76:	2b01      	cmp	r3, #1
 8002b78:	d101      	bne.n	8002b7e <HAL_ADC_Start_DMA+0x2a>
 8002b7a:	2302      	movs	r3, #2
 8002b7c:	e063      	b.n	8002c46 <HAL_ADC_Start_DMA+0xf2>
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	2201      	movs	r2, #1
 8002b82:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002b86:	68f8      	ldr	r0, [r7, #12]
 8002b88:	f000 fc5e 	bl	8003448 <ADC_Enable>
 8002b8c:	4603      	mov	r3, r0
 8002b8e:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002b90:	7dfb      	ldrb	r3, [r7, #23]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d14f      	bne.n	8002c36 <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b9a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002b9e:	f023 0301 	bic.w	r3, r3, #1
 8002ba2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	655a      	str	r2, [r3, #84]	@ 0x54
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bae:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d006      	beq.n	8002bc4 <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bba:	f023 0206 	bic.w	r2, r3, #6
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	659a      	str	r2, [r3, #88]	@ 0x58
 8002bc2:	e002      	b.n	8002bca <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	659a      	str	r2, [r3, #88]	@ 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002bce:	4a20      	ldr	r2, [pc, #128]	@ (8002c50 <HAL_ADC_Start_DMA+0xfc>)
 8002bd0:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002bd6:	4a1f      	ldr	r2, [pc, #124]	@ (8002c54 <HAL_ADC_Start_DMA+0x100>)
 8002bd8:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002bde:	4a1e      	ldr	r2, [pc, #120]	@ (8002c58 <HAL_ADC_Start_DMA+0x104>)
 8002be0:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	221c      	movs	r2, #28
 8002be8:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	2200      	movs	r2, #0
 8002bee:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	685a      	ldr	r2, [r3, #4]
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f042 0210 	orr.w	r2, r2, #16
 8002c00:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	68da      	ldr	r2, [r3, #12]
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f042 0201 	orr.w	r2, r2, #1
 8002c10:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	3340      	adds	r3, #64	@ 0x40
 8002c1c:	4619      	mov	r1, r3
 8002c1e:	68ba      	ldr	r2, [r7, #8]
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	f000 fef5 	bl	8003a10 <HAL_DMA_Start_IT>
 8002c26:	4603      	mov	r3, r0
 8002c28:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	4618      	mov	r0, r3
 8002c30:	f7ff fe13 	bl	800285a <LL_ADC_REG_StartConversion>
 8002c34:	e006      	b.n	8002c44 <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	2200      	movs	r2, #0
 8002c3a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8002c3e:	e001      	b.n	8002c44 <HAL_ADC_Start_DMA+0xf0>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002c40:	2302      	movs	r3, #2
 8002c42:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002c44:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c46:	4618      	mov	r0, r3
 8002c48:	3718      	adds	r7, #24
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	bd80      	pop	{r7, pc}
 8002c4e:	bf00      	nop
 8002c50:	08003555 	.word	0x08003555
 8002c54:	0800362d 	.word	0x0800362d
 8002c58:	08003649 	.word	0x08003649

08002c5c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002c5c:	b480      	push	{r7}
 8002c5e:	b083      	sub	sp, #12
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002c64:	bf00      	nop
 8002c66:	370c      	adds	r7, #12
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6e:	4770      	bx	lr

08002c70 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002c70:	b480      	push	{r7}
 8002c72:	b083      	sub	sp, #12
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002c78:	bf00      	nop
 8002c7a:	370c      	adds	r7, #12
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c82:	4770      	bx	lr

08002c84 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b0b6      	sub	sp, #216	@ 0xd8
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
 8002c8c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c8e:	2300      	movs	r3, #0
 8002c90:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002c94:	2300      	movs	r3, #0
 8002c96:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002c9e:	2b01      	cmp	r3, #1
 8002ca0:	d101      	bne.n	8002ca6 <HAL_ADC_ConfigChannel+0x22>
 8002ca2:	2302      	movs	r3, #2
 8002ca4:	e3bb      	b.n	800341e <HAL_ADC_ConfigChannel+0x79a>
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	2201      	movs	r2, #1
 8002caa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	f7ff fde5 	bl	8002882 <LL_ADC_REG_IsConversionOngoing>
 8002cb8:	4603      	mov	r3, r0
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	f040 83a0 	bne.w	8003400 <HAL_ADC_ConfigChannel+0x77c>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	685b      	ldr	r3, [r3, #4]
 8002cc4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	685b      	ldr	r3, [r3, #4]
 8002ccc:	2b05      	cmp	r3, #5
 8002cce:	d824      	bhi.n	8002d1a <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	685b      	ldr	r3, [r3, #4]
 8002cd4:	3b02      	subs	r3, #2
 8002cd6:	2b03      	cmp	r3, #3
 8002cd8:	d81b      	bhi.n	8002d12 <HAL_ADC_ConfigChannel+0x8e>
 8002cda:	a201      	add	r2, pc, #4	@ (adr r2, 8002ce0 <HAL_ADC_ConfigChannel+0x5c>)
 8002cdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ce0:	08002cf1 	.word	0x08002cf1
 8002ce4:	08002cf9 	.word	0x08002cf9
 8002ce8:	08002d01 	.word	0x08002d01
 8002cec:	08002d09 	.word	0x08002d09
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8002cf0:	230c      	movs	r3, #12
 8002cf2:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002cf6:	e010      	b.n	8002d1a <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8002cf8:	2312      	movs	r3, #18
 8002cfa:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002cfe:	e00c      	b.n	8002d1a <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8002d00:	2318      	movs	r3, #24
 8002d02:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002d06:	e008      	b.n	8002d1a <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8002d08:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002d0c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002d10:	e003      	b.n	8002d1a <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8002d12:	2306      	movs	r3, #6
 8002d14:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002d18:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6818      	ldr	r0, [r3, #0]
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	461a      	mov	r2, r3
 8002d24:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8002d28:	f7ff fca6 	bl	8002678 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4618      	mov	r0, r3
 8002d32:	f7ff fda6 	bl	8002882 <LL_ADC_REG_IsConversionOngoing>
 8002d36:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	4618      	mov	r0, r3
 8002d40:	f7ff fdb2 	bl	80028a8 <LL_ADC_INJ_IsConversionOngoing>
 8002d44:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002d48:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	f040 81a4 	bne.w	800309a <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002d52:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	f040 819f 	bne.w	800309a <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6818      	ldr	r0, [r3, #0]
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	6819      	ldr	r1, [r3, #0]
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	689b      	ldr	r3, [r3, #8]
 8002d68:	461a      	mov	r2, r3
 8002d6a:	f7ff fcb1 	bl	80026d0 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	695a      	ldr	r2, [r3, #20]
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	68db      	ldr	r3, [r3, #12]
 8002d78:	08db      	lsrs	r3, r3, #3
 8002d7a:	f003 0303 	and.w	r3, r3, #3
 8002d7e:	005b      	lsls	r3, r3, #1
 8002d80:	fa02 f303 	lsl.w	r3, r2, r3
 8002d84:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	691b      	ldr	r3, [r3, #16]
 8002d8c:	2b04      	cmp	r3, #4
 8002d8e:	d00a      	beq.n	8002da6 <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6818      	ldr	r0, [r3, #0]
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	6919      	ldr	r1, [r3, #16]
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	681a      	ldr	r2, [r3, #0]
 8002d9c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002da0:	f7ff fc02 	bl	80025a8 <LL_ADC_SetOffset>
 8002da4:	e179      	b.n	800309a <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	2100      	movs	r1, #0
 8002dac:	4618      	mov	r0, r3
 8002dae:	f7ff fc1f 	bl	80025f0 <LL_ADC_GetOffsetChannel>
 8002db2:	4603      	mov	r3, r0
 8002db4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d10a      	bne.n	8002dd2 <HAL_ADC_ConfigChannel+0x14e>
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	2100      	movs	r1, #0
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	f7ff fc14 	bl	80025f0 <LL_ADC_GetOffsetChannel>
 8002dc8:	4603      	mov	r3, r0
 8002dca:	0e9b      	lsrs	r3, r3, #26
 8002dcc:	f003 021f 	and.w	r2, r3, #31
 8002dd0:	e01e      	b.n	8002e10 <HAL_ADC_ConfigChannel+0x18c>
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	2100      	movs	r1, #0
 8002dd8:	4618      	mov	r0, r3
 8002dda:	f7ff fc09 	bl	80025f0 <LL_ADC_GetOffsetChannel>
 8002dde:	4603      	mov	r3, r0
 8002de0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002de4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002de8:	fa93 f3a3 	rbit	r3, r3
 8002dec:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002df0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002df4:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002df8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d101      	bne.n	8002e04 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 8002e00:	2320      	movs	r3, #32
 8002e02:	e004      	b.n	8002e0e <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 8002e04:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002e08:	fab3 f383 	clz	r3, r3
 8002e0c:	b2db      	uxtb	r3, r3
 8002e0e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d105      	bne.n	8002e28 <HAL_ADC_ConfigChannel+0x1a4>
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	0e9b      	lsrs	r3, r3, #26
 8002e22:	f003 031f 	and.w	r3, r3, #31
 8002e26:	e018      	b.n	8002e5a <HAL_ADC_ConfigChannel+0x1d6>
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e30:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002e34:	fa93 f3a3 	rbit	r3, r3
 8002e38:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8002e3c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002e40:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8002e44:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d101      	bne.n	8002e50 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 8002e4c:	2320      	movs	r3, #32
 8002e4e:	e004      	b.n	8002e5a <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8002e50:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002e54:	fab3 f383 	clz	r3, r3
 8002e58:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002e5a:	429a      	cmp	r2, r3
 8002e5c:	d106      	bne.n	8002e6c <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	2200      	movs	r2, #0
 8002e64:	2100      	movs	r1, #0
 8002e66:	4618      	mov	r0, r3
 8002e68:	f7ff fbd8 	bl	800261c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	2101      	movs	r1, #1
 8002e72:	4618      	mov	r0, r3
 8002e74:	f7ff fbbc 	bl	80025f0 <LL_ADC_GetOffsetChannel>
 8002e78:	4603      	mov	r3, r0
 8002e7a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d10a      	bne.n	8002e98 <HAL_ADC_ConfigChannel+0x214>
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	2101      	movs	r1, #1
 8002e88:	4618      	mov	r0, r3
 8002e8a:	f7ff fbb1 	bl	80025f0 <LL_ADC_GetOffsetChannel>
 8002e8e:	4603      	mov	r3, r0
 8002e90:	0e9b      	lsrs	r3, r3, #26
 8002e92:	f003 021f 	and.w	r2, r3, #31
 8002e96:	e01e      	b.n	8002ed6 <HAL_ADC_ConfigChannel+0x252>
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	2101      	movs	r1, #1
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	f7ff fba6 	bl	80025f0 <LL_ADC_GetOffsetChannel>
 8002ea4:	4603      	mov	r3, r0
 8002ea6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eaa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002eae:	fa93 f3a3 	rbit	r3, r3
 8002eb2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8002eb6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002eba:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8002ebe:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d101      	bne.n	8002eca <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 8002ec6:	2320      	movs	r3, #32
 8002ec8:	e004      	b.n	8002ed4 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 8002eca:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002ece:	fab3 f383 	clz	r3, r3
 8002ed2:	b2db      	uxtb	r3, r3
 8002ed4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d105      	bne.n	8002eee <HAL_ADC_ConfigChannel+0x26a>
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	0e9b      	lsrs	r3, r3, #26
 8002ee8:	f003 031f 	and.w	r3, r3, #31
 8002eec:	e018      	b.n	8002f20 <HAL_ADC_ConfigChannel+0x29c>
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ef6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002efa:	fa93 f3a3 	rbit	r3, r3
 8002efe:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8002f02:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002f06:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8002f0a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d101      	bne.n	8002f16 <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 8002f12:	2320      	movs	r3, #32
 8002f14:	e004      	b.n	8002f20 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 8002f16:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002f1a:	fab3 f383 	clz	r3, r3
 8002f1e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002f20:	429a      	cmp	r2, r3
 8002f22:	d106      	bne.n	8002f32 <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	2200      	movs	r2, #0
 8002f2a:	2101      	movs	r1, #1
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	f7ff fb75 	bl	800261c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	2102      	movs	r1, #2
 8002f38:	4618      	mov	r0, r3
 8002f3a:	f7ff fb59 	bl	80025f0 <LL_ADC_GetOffsetChannel>
 8002f3e:	4603      	mov	r3, r0
 8002f40:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d10a      	bne.n	8002f5e <HAL_ADC_ConfigChannel+0x2da>
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	2102      	movs	r1, #2
 8002f4e:	4618      	mov	r0, r3
 8002f50:	f7ff fb4e 	bl	80025f0 <LL_ADC_GetOffsetChannel>
 8002f54:	4603      	mov	r3, r0
 8002f56:	0e9b      	lsrs	r3, r3, #26
 8002f58:	f003 021f 	and.w	r2, r3, #31
 8002f5c:	e01e      	b.n	8002f9c <HAL_ADC_ConfigChannel+0x318>
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	2102      	movs	r1, #2
 8002f64:	4618      	mov	r0, r3
 8002f66:	f7ff fb43 	bl	80025f0 <LL_ADC_GetOffsetChannel>
 8002f6a:	4603      	mov	r3, r0
 8002f6c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f70:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002f74:	fa93 f3a3 	rbit	r3, r3
 8002f78:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8002f7c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002f80:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8002f84:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d101      	bne.n	8002f90 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 8002f8c:	2320      	movs	r3, #32
 8002f8e:	e004      	b.n	8002f9a <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 8002f90:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002f94:	fab3 f383 	clz	r3, r3
 8002f98:	b2db      	uxtb	r3, r3
 8002f9a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d105      	bne.n	8002fb4 <HAL_ADC_ConfigChannel+0x330>
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	0e9b      	lsrs	r3, r3, #26
 8002fae:	f003 031f 	and.w	r3, r3, #31
 8002fb2:	e014      	b.n	8002fde <HAL_ADC_ConfigChannel+0x35a>
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fba:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002fbc:	fa93 f3a3 	rbit	r3, r3
 8002fc0:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8002fc2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002fc4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8002fc8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d101      	bne.n	8002fd4 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 8002fd0:	2320      	movs	r3, #32
 8002fd2:	e004      	b.n	8002fde <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8002fd4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002fd8:	fab3 f383 	clz	r3, r3
 8002fdc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002fde:	429a      	cmp	r2, r3
 8002fe0:	d106      	bne.n	8002ff0 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	2102      	movs	r1, #2
 8002fea:	4618      	mov	r0, r3
 8002fec:	f7ff fb16 	bl	800261c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	2103      	movs	r1, #3
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	f7ff fafa 	bl	80025f0 <LL_ADC_GetOffsetChannel>
 8002ffc:	4603      	mov	r3, r0
 8002ffe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003002:	2b00      	cmp	r3, #0
 8003004:	d10a      	bne.n	800301c <HAL_ADC_ConfigChannel+0x398>
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	2103      	movs	r1, #3
 800300c:	4618      	mov	r0, r3
 800300e:	f7ff faef 	bl	80025f0 <LL_ADC_GetOffsetChannel>
 8003012:	4603      	mov	r3, r0
 8003014:	0e9b      	lsrs	r3, r3, #26
 8003016:	f003 021f 	and.w	r2, r3, #31
 800301a:	e017      	b.n	800304c <HAL_ADC_ConfigChannel+0x3c8>
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	2103      	movs	r1, #3
 8003022:	4618      	mov	r0, r3
 8003024:	f7ff fae4 	bl	80025f0 <LL_ADC_GetOffsetChannel>
 8003028:	4603      	mov	r3, r0
 800302a:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800302c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800302e:	fa93 f3a3 	rbit	r3, r3
 8003032:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8003034:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003036:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8003038:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800303a:	2b00      	cmp	r3, #0
 800303c:	d101      	bne.n	8003042 <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 800303e:	2320      	movs	r3, #32
 8003040:	e003      	b.n	800304a <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 8003042:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003044:	fab3 f383 	clz	r3, r3
 8003048:	b2db      	uxtb	r3, r3
 800304a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003054:	2b00      	cmp	r3, #0
 8003056:	d105      	bne.n	8003064 <HAL_ADC_ConfigChannel+0x3e0>
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	0e9b      	lsrs	r3, r3, #26
 800305e:	f003 031f 	and.w	r3, r3, #31
 8003062:	e011      	b.n	8003088 <HAL_ADC_ConfigChannel+0x404>
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800306a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800306c:	fa93 f3a3 	rbit	r3, r3
 8003070:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8003072:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003074:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8003076:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003078:	2b00      	cmp	r3, #0
 800307a:	d101      	bne.n	8003080 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 800307c:	2320      	movs	r3, #32
 800307e:	e003      	b.n	8003088 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8003080:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003082:	fab3 f383 	clz	r3, r3
 8003086:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003088:	429a      	cmp	r2, r3
 800308a:	d106      	bne.n	800309a <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	2200      	movs	r2, #0
 8003092:	2103      	movs	r1, #3
 8003094:	4618      	mov	r0, r3
 8003096:	f7ff fac1 	bl	800261c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	4618      	mov	r0, r3
 80030a0:	f7ff fbc8 	bl	8002834 <LL_ADC_IsEnabled>
 80030a4:	4603      	mov	r3, r0
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	f040 8140 	bne.w	800332c <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6818      	ldr	r0, [r3, #0]
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	6819      	ldr	r1, [r3, #0]
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	68db      	ldr	r3, [r3, #12]
 80030b8:	461a      	mov	r2, r3
 80030ba:	f7ff fb35 	bl	8002728 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80030be:	683b      	ldr	r3, [r7, #0]
 80030c0:	68db      	ldr	r3, [r3, #12]
 80030c2:	4a8f      	ldr	r2, [pc, #572]	@ (8003300 <HAL_ADC_ConfigChannel+0x67c>)
 80030c4:	4293      	cmp	r3, r2
 80030c6:	f040 8131 	bne.w	800332c <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d10b      	bne.n	80030f2 <HAL_ADC_ConfigChannel+0x46e>
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	0e9b      	lsrs	r3, r3, #26
 80030e0:	3301      	adds	r3, #1
 80030e2:	f003 031f 	and.w	r3, r3, #31
 80030e6:	2b09      	cmp	r3, #9
 80030e8:	bf94      	ite	ls
 80030ea:	2301      	movls	r3, #1
 80030ec:	2300      	movhi	r3, #0
 80030ee:	b2db      	uxtb	r3, r3
 80030f0:	e019      	b.n	8003126 <HAL_ADC_ConfigChannel+0x4a2>
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030f8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80030fa:	fa93 f3a3 	rbit	r3, r3
 80030fe:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8003100:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003102:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8003104:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003106:	2b00      	cmp	r3, #0
 8003108:	d101      	bne.n	800310e <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 800310a:	2320      	movs	r3, #32
 800310c:	e003      	b.n	8003116 <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 800310e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003110:	fab3 f383 	clz	r3, r3
 8003114:	b2db      	uxtb	r3, r3
 8003116:	3301      	adds	r3, #1
 8003118:	f003 031f 	and.w	r3, r3, #31
 800311c:	2b09      	cmp	r3, #9
 800311e:	bf94      	ite	ls
 8003120:	2301      	movls	r3, #1
 8003122:	2300      	movhi	r3, #0
 8003124:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003126:	2b00      	cmp	r3, #0
 8003128:	d079      	beq.n	800321e <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003132:	2b00      	cmp	r3, #0
 8003134:	d107      	bne.n	8003146 <HAL_ADC_ConfigChannel+0x4c2>
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	0e9b      	lsrs	r3, r3, #26
 800313c:	3301      	adds	r3, #1
 800313e:	069b      	lsls	r3, r3, #26
 8003140:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003144:	e015      	b.n	8003172 <HAL_ADC_ConfigChannel+0x4ee>
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800314c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800314e:	fa93 f3a3 	rbit	r3, r3
 8003152:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8003154:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003156:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8003158:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800315a:	2b00      	cmp	r3, #0
 800315c:	d101      	bne.n	8003162 <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 800315e:	2320      	movs	r3, #32
 8003160:	e003      	b.n	800316a <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 8003162:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003164:	fab3 f383 	clz	r3, r3
 8003168:	b2db      	uxtb	r3, r3
 800316a:	3301      	adds	r3, #1
 800316c:	069b      	lsls	r3, r3, #26
 800316e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800317a:	2b00      	cmp	r3, #0
 800317c:	d109      	bne.n	8003192 <HAL_ADC_ConfigChannel+0x50e>
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	0e9b      	lsrs	r3, r3, #26
 8003184:	3301      	adds	r3, #1
 8003186:	f003 031f 	and.w	r3, r3, #31
 800318a:	2101      	movs	r1, #1
 800318c:	fa01 f303 	lsl.w	r3, r1, r3
 8003190:	e017      	b.n	80031c2 <HAL_ADC_ConfigChannel+0x53e>
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003198:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800319a:	fa93 f3a3 	rbit	r3, r3
 800319e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 80031a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80031a2:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 80031a4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d101      	bne.n	80031ae <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 80031aa:	2320      	movs	r3, #32
 80031ac:	e003      	b.n	80031b6 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 80031ae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80031b0:	fab3 f383 	clz	r3, r3
 80031b4:	b2db      	uxtb	r3, r3
 80031b6:	3301      	adds	r3, #1
 80031b8:	f003 031f 	and.w	r3, r3, #31
 80031bc:	2101      	movs	r1, #1
 80031be:	fa01 f303 	lsl.w	r3, r1, r3
 80031c2:	ea42 0103 	orr.w	r1, r2, r3
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d10a      	bne.n	80031e8 <HAL_ADC_ConfigChannel+0x564>
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	0e9b      	lsrs	r3, r3, #26
 80031d8:	3301      	adds	r3, #1
 80031da:	f003 021f 	and.w	r2, r3, #31
 80031de:	4613      	mov	r3, r2
 80031e0:	005b      	lsls	r3, r3, #1
 80031e2:	4413      	add	r3, r2
 80031e4:	051b      	lsls	r3, r3, #20
 80031e6:	e018      	b.n	800321a <HAL_ADC_ConfigChannel+0x596>
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80031f0:	fa93 f3a3 	rbit	r3, r3
 80031f4:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 80031f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031f8:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 80031fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d101      	bne.n	8003204 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 8003200:	2320      	movs	r3, #32
 8003202:	e003      	b.n	800320c <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 8003204:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003206:	fab3 f383 	clz	r3, r3
 800320a:	b2db      	uxtb	r3, r3
 800320c:	3301      	adds	r3, #1
 800320e:	f003 021f 	and.w	r2, r3, #31
 8003212:	4613      	mov	r3, r2
 8003214:	005b      	lsls	r3, r3, #1
 8003216:	4413      	add	r3, r2
 8003218:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800321a:	430b      	orrs	r3, r1
 800321c:	e081      	b.n	8003322 <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003226:	2b00      	cmp	r3, #0
 8003228:	d107      	bne.n	800323a <HAL_ADC_ConfigChannel+0x5b6>
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	0e9b      	lsrs	r3, r3, #26
 8003230:	3301      	adds	r3, #1
 8003232:	069b      	lsls	r3, r3, #26
 8003234:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003238:	e015      	b.n	8003266 <HAL_ADC_ConfigChannel+0x5e2>
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003240:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003242:	fa93 f3a3 	rbit	r3, r3
 8003246:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8003248:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800324a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 800324c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800324e:	2b00      	cmp	r3, #0
 8003250:	d101      	bne.n	8003256 <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 8003252:	2320      	movs	r3, #32
 8003254:	e003      	b.n	800325e <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 8003256:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003258:	fab3 f383 	clz	r3, r3
 800325c:	b2db      	uxtb	r3, r3
 800325e:	3301      	adds	r3, #1
 8003260:	069b      	lsls	r3, r3, #26
 8003262:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800326e:	2b00      	cmp	r3, #0
 8003270:	d109      	bne.n	8003286 <HAL_ADC_ConfigChannel+0x602>
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	0e9b      	lsrs	r3, r3, #26
 8003278:	3301      	adds	r3, #1
 800327a:	f003 031f 	and.w	r3, r3, #31
 800327e:	2101      	movs	r1, #1
 8003280:	fa01 f303 	lsl.w	r3, r1, r3
 8003284:	e017      	b.n	80032b6 <HAL_ADC_ConfigChannel+0x632>
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800328c:	69fb      	ldr	r3, [r7, #28]
 800328e:	fa93 f3a3 	rbit	r3, r3
 8003292:	61bb      	str	r3, [r7, #24]
  return result;
 8003294:	69bb      	ldr	r3, [r7, #24]
 8003296:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8003298:	6a3b      	ldr	r3, [r7, #32]
 800329a:	2b00      	cmp	r3, #0
 800329c:	d101      	bne.n	80032a2 <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 800329e:	2320      	movs	r3, #32
 80032a0:	e003      	b.n	80032aa <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 80032a2:	6a3b      	ldr	r3, [r7, #32]
 80032a4:	fab3 f383 	clz	r3, r3
 80032a8:	b2db      	uxtb	r3, r3
 80032aa:	3301      	adds	r3, #1
 80032ac:	f003 031f 	and.w	r3, r3, #31
 80032b0:	2101      	movs	r1, #1
 80032b2:	fa01 f303 	lsl.w	r3, r1, r3
 80032b6:	ea42 0103 	orr.w	r1, r2, r3
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d10d      	bne.n	80032e2 <HAL_ADC_ConfigChannel+0x65e>
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	0e9b      	lsrs	r3, r3, #26
 80032cc:	3301      	adds	r3, #1
 80032ce:	f003 021f 	and.w	r2, r3, #31
 80032d2:	4613      	mov	r3, r2
 80032d4:	005b      	lsls	r3, r3, #1
 80032d6:	4413      	add	r3, r2
 80032d8:	3b1e      	subs	r3, #30
 80032da:	051b      	lsls	r3, r3, #20
 80032dc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80032e0:	e01e      	b.n	8003320 <HAL_ADC_ConfigChannel+0x69c>
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032e8:	693b      	ldr	r3, [r7, #16]
 80032ea:	fa93 f3a3 	rbit	r3, r3
 80032ee:	60fb      	str	r3, [r7, #12]
  return result;
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80032f4:	697b      	ldr	r3, [r7, #20]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d104      	bne.n	8003304 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 80032fa:	2320      	movs	r3, #32
 80032fc:	e006      	b.n	800330c <HAL_ADC_ConfigChannel+0x688>
 80032fe:	bf00      	nop
 8003300:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8003304:	697b      	ldr	r3, [r7, #20]
 8003306:	fab3 f383 	clz	r3, r3
 800330a:	b2db      	uxtb	r3, r3
 800330c:	3301      	adds	r3, #1
 800330e:	f003 021f 	and.w	r2, r3, #31
 8003312:	4613      	mov	r3, r2
 8003314:	005b      	lsls	r3, r3, #1
 8003316:	4413      	add	r3, r2
 8003318:	3b1e      	subs	r3, #30
 800331a:	051b      	lsls	r3, r3, #20
 800331c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003320:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8003322:	683a      	ldr	r2, [r7, #0]
 8003324:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003326:	4619      	mov	r1, r3
 8003328:	f7ff f9d2 	bl	80026d0 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	681a      	ldr	r2, [r3, #0]
 8003330:	4b3d      	ldr	r3, [pc, #244]	@ (8003428 <HAL_ADC_ConfigChannel+0x7a4>)
 8003332:	4013      	ands	r3, r2
 8003334:	2b00      	cmp	r3, #0
 8003336:	d06c      	beq.n	8003412 <HAL_ADC_ConfigChannel+0x78e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003338:	483c      	ldr	r0, [pc, #240]	@ (800342c <HAL_ADC_ConfigChannel+0x7a8>)
 800333a:	f7ff f927 	bl	800258c <LL_ADC_GetCommonPathInternalCh>
 800333e:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	4a3a      	ldr	r2, [pc, #232]	@ (8003430 <HAL_ADC_ConfigChannel+0x7ac>)
 8003348:	4293      	cmp	r3, r2
 800334a:	d127      	bne.n	800339c <HAL_ADC_ConfigChannel+0x718>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800334c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003350:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003354:	2b00      	cmp	r3, #0
 8003356:	d121      	bne.n	800339c <HAL_ADC_ConfigChannel+0x718>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	4a35      	ldr	r2, [pc, #212]	@ (8003434 <HAL_ADC_ConfigChannel+0x7b0>)
 800335e:	4293      	cmp	r3, r2
 8003360:	d157      	bne.n	8003412 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003362:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003366:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800336a:	4619      	mov	r1, r3
 800336c:	482f      	ldr	r0, [pc, #188]	@ (800342c <HAL_ADC_ConfigChannel+0x7a8>)
 800336e:	f7ff f8fa 	bl	8002566 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003372:	4b31      	ldr	r3, [pc, #196]	@ (8003438 <HAL_ADC_ConfigChannel+0x7b4>)
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	099b      	lsrs	r3, r3, #6
 8003378:	4a30      	ldr	r2, [pc, #192]	@ (800343c <HAL_ADC_ConfigChannel+0x7b8>)
 800337a:	fba2 2303 	umull	r2, r3, r2, r3
 800337e:	099b      	lsrs	r3, r3, #6
 8003380:	1c5a      	adds	r2, r3, #1
 8003382:	4613      	mov	r3, r2
 8003384:	005b      	lsls	r3, r3, #1
 8003386:	4413      	add	r3, r2
 8003388:	009b      	lsls	r3, r3, #2
 800338a:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800338c:	e002      	b.n	8003394 <HAL_ADC_ConfigChannel+0x710>
          {
            wait_loop_index--;
 800338e:	68bb      	ldr	r3, [r7, #8]
 8003390:	3b01      	subs	r3, #1
 8003392:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8003394:	68bb      	ldr	r3, [r7, #8]
 8003396:	2b00      	cmp	r3, #0
 8003398:	d1f9      	bne.n	800338e <HAL_ADC_ConfigChannel+0x70a>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800339a:	e03a      	b.n	8003412 <HAL_ADC_ConfigChannel+0x78e>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	4a27      	ldr	r2, [pc, #156]	@ (8003440 <HAL_ADC_ConfigChannel+0x7bc>)
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d113      	bne.n	80033ce <HAL_ADC_ConfigChannel+0x74a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80033a6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80033aa:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d10d      	bne.n	80033ce <HAL_ADC_ConfigChannel+0x74a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	4a1f      	ldr	r2, [pc, #124]	@ (8003434 <HAL_ADC_ConfigChannel+0x7b0>)
 80033b8:	4293      	cmp	r3, r2
 80033ba:	d12a      	bne.n	8003412 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80033bc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80033c0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80033c4:	4619      	mov	r1, r3
 80033c6:	4819      	ldr	r0, [pc, #100]	@ (800342c <HAL_ADC_ConfigChannel+0x7a8>)
 80033c8:	f7ff f8cd 	bl	8002566 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80033cc:	e021      	b.n	8003412 <HAL_ADC_ConfigChannel+0x78e>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4a1c      	ldr	r2, [pc, #112]	@ (8003444 <HAL_ADC_ConfigChannel+0x7c0>)
 80033d4:	4293      	cmp	r3, r2
 80033d6:	d11c      	bne.n	8003412 <HAL_ADC_ConfigChannel+0x78e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80033d8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80033dc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d116      	bne.n	8003412 <HAL_ADC_ConfigChannel+0x78e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4a12      	ldr	r2, [pc, #72]	@ (8003434 <HAL_ADC_ConfigChannel+0x7b0>)
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d111      	bne.n	8003412 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80033ee:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80033f2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80033f6:	4619      	mov	r1, r3
 80033f8:	480c      	ldr	r0, [pc, #48]	@ (800342c <HAL_ADC_ConfigChannel+0x7a8>)
 80033fa:	f7ff f8b4 	bl	8002566 <LL_ADC_SetCommonPathInternalCh>
 80033fe:	e008      	b.n	8003412 <HAL_ADC_ConfigChannel+0x78e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003404:	f043 0220 	orr.w	r2, r3, #32
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 800340c:	2301      	movs	r3, #1
 800340e:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2200      	movs	r2, #0
 8003416:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 800341a:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 800341e:	4618      	mov	r0, r3
 8003420:	37d8      	adds	r7, #216	@ 0xd8
 8003422:	46bd      	mov	sp, r7
 8003424:	bd80      	pop	{r7, pc}
 8003426:	bf00      	nop
 8003428:	80080000 	.word	0x80080000
 800342c:	50040300 	.word	0x50040300
 8003430:	c7520000 	.word	0xc7520000
 8003434:	50040000 	.word	0x50040000
 8003438:	20000000 	.word	0x20000000
 800343c:	053e2d63 	.word	0x053e2d63
 8003440:	cb840000 	.word	0xcb840000
 8003444:	80000001 	.word	0x80000001

08003448 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b084      	sub	sp, #16
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003450:	2300      	movs	r3, #0
 8003452:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	4618      	mov	r0, r3
 800345a:	f7ff f9eb 	bl	8002834 <LL_ADC_IsEnabled>
 800345e:	4603      	mov	r3, r0
 8003460:	2b00      	cmp	r3, #0
 8003462:	d169      	bne.n	8003538 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	689a      	ldr	r2, [r3, #8]
 800346a:	4b36      	ldr	r3, [pc, #216]	@ (8003544 <ADC_Enable+0xfc>)
 800346c:	4013      	ands	r3, r2
 800346e:	2b00      	cmp	r3, #0
 8003470:	d00d      	beq.n	800348e <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003476:	f043 0210 	orr.w	r2, r3, #16
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003482:	f043 0201 	orr.w	r2, r3, #1
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 800348a:	2301      	movs	r3, #1
 800348c:	e055      	b.n	800353a <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	4618      	mov	r0, r3
 8003494:	f7ff f9ba 	bl	800280c <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003498:	482b      	ldr	r0, [pc, #172]	@ (8003548 <ADC_Enable+0x100>)
 800349a:	f7ff f877 	bl	800258c <LL_ADC_GetCommonPathInternalCh>
 800349e:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80034a0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d013      	beq.n	80034d0 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80034a8:	4b28      	ldr	r3, [pc, #160]	@ (800354c <ADC_Enable+0x104>)
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	099b      	lsrs	r3, r3, #6
 80034ae:	4a28      	ldr	r2, [pc, #160]	@ (8003550 <ADC_Enable+0x108>)
 80034b0:	fba2 2303 	umull	r2, r3, r2, r3
 80034b4:	099b      	lsrs	r3, r3, #6
 80034b6:	1c5a      	adds	r2, r3, #1
 80034b8:	4613      	mov	r3, r2
 80034ba:	005b      	lsls	r3, r3, #1
 80034bc:	4413      	add	r3, r2
 80034be:	009b      	lsls	r3, r3, #2
 80034c0:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80034c2:	e002      	b.n	80034ca <ADC_Enable+0x82>
      {
        wait_loop_index--;
 80034c4:	68bb      	ldr	r3, [r7, #8]
 80034c6:	3b01      	subs	r3, #1
 80034c8:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80034ca:	68bb      	ldr	r3, [r7, #8]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d1f9      	bne.n	80034c4 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80034d0:	f7fe ffe6 	bl	80024a0 <HAL_GetTick>
 80034d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80034d6:	e028      	b.n	800352a <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	4618      	mov	r0, r3
 80034de:	f7ff f9a9 	bl	8002834 <LL_ADC_IsEnabled>
 80034e2:	4603      	mov	r3, r0
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d104      	bne.n	80034f2 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	4618      	mov	r0, r3
 80034ee:	f7ff f98d 	bl	800280c <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80034f2:	f7fe ffd5 	bl	80024a0 <HAL_GetTick>
 80034f6:	4602      	mov	r2, r0
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	1ad3      	subs	r3, r2, r3
 80034fc:	2b02      	cmp	r3, #2
 80034fe:	d914      	bls.n	800352a <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f003 0301 	and.w	r3, r3, #1
 800350a:	2b01      	cmp	r3, #1
 800350c:	d00d      	beq.n	800352a <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003512:	f043 0210 	orr.w	r2, r3, #16
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800351e:	f043 0201 	orr.w	r2, r3, #1
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8003526:	2301      	movs	r3, #1
 8003528:	e007      	b.n	800353a <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f003 0301 	and.w	r3, r3, #1
 8003534:	2b01      	cmp	r3, #1
 8003536:	d1cf      	bne.n	80034d8 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003538:	2300      	movs	r3, #0
}
 800353a:	4618      	mov	r0, r3
 800353c:	3710      	adds	r7, #16
 800353e:	46bd      	mov	sp, r7
 8003540:	bd80      	pop	{r7, pc}
 8003542:	bf00      	nop
 8003544:	8000003f 	.word	0x8000003f
 8003548:	50040300 	.word	0x50040300
 800354c:	20000000 	.word	0x20000000
 8003550:	053e2d63 	.word	0x053e2d63

08003554 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	b084      	sub	sp, #16
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003560:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003566:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800356a:	2b00      	cmp	r3, #0
 800356c:	d14b      	bne.n	8003606 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003572:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f003 0308 	and.w	r3, r3, #8
 8003584:	2b00      	cmp	r3, #0
 8003586:	d021      	beq.n	80035cc <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	4618      	mov	r0, r3
 800358e:	f7ff f860 	bl	8002652 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003592:	4603      	mov	r3, r0
 8003594:	2b00      	cmp	r3, #0
 8003596:	d032      	beq.n	80035fe <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	68db      	ldr	r3, [r3, #12]
 800359e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d12b      	bne.n	80035fe <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035aa:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	655a      	str	r2, [r3, #84]	@ 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035b6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d11f      	bne.n	80035fe <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035c2:	f043 0201 	orr.w	r2, r3, #1
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	655a      	str	r2, [r3, #84]	@ 0x54
 80035ca:	e018      	b.n	80035fe <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	68db      	ldr	r3, [r3, #12]
 80035d2:	f003 0302 	and.w	r3, r3, #2
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d111      	bne.n	80035fe <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035de:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	655a      	str	r2, [r3, #84]	@ 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035ea:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d105      	bne.n	80035fe <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035f6:	f043 0201 	orr.w	r2, r3, #1
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80035fe:	68f8      	ldr	r0, [r7, #12]
 8003600:	f7fe f8d8 	bl	80017b4 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003604:	e00e      	b.n	8003624 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800360a:	f003 0310 	and.w	r3, r3, #16
 800360e:	2b00      	cmp	r3, #0
 8003610:	d003      	beq.n	800361a <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8003612:	68f8      	ldr	r0, [r7, #12]
 8003614:	f7ff fb2c 	bl	8002c70 <HAL_ADC_ErrorCallback>
}
 8003618:	e004      	b.n	8003624 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800361e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003620:	6878      	ldr	r0, [r7, #4]
 8003622:	4798      	blx	r3
}
 8003624:	bf00      	nop
 8003626:	3710      	adds	r7, #16
 8003628:	46bd      	mov	sp, r7
 800362a:	bd80      	pop	{r7, pc}

0800362c <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b084      	sub	sp, #16
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003638:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800363a:	68f8      	ldr	r0, [r7, #12]
 800363c:	f7ff fb0e 	bl	8002c5c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003640:	bf00      	nop
 8003642:	3710      	adds	r7, #16
 8003644:	46bd      	mov	sp, r7
 8003646:	bd80      	pop	{r7, pc}

08003648 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003648:	b580      	push	{r7, lr}
 800364a:	b084      	sub	sp, #16
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003654:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800365a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003666:	f043 0204 	orr.w	r2, r3, #4
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800366e:	68f8      	ldr	r0, [r7, #12]
 8003670:	f7ff fafe 	bl	8002c70 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003674:	bf00      	nop
 8003676:	3710      	adds	r7, #16
 8003678:	46bd      	mov	sp, r7
 800367a:	bd80      	pop	{r7, pc}

0800367c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800367c:	b480      	push	{r7}
 800367e:	b085      	sub	sp, #20
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	f003 0307 	and.w	r3, r3, #7
 800368a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800368c:	4b0c      	ldr	r3, [pc, #48]	@ (80036c0 <__NVIC_SetPriorityGrouping+0x44>)
 800368e:	68db      	ldr	r3, [r3, #12]
 8003690:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003692:	68ba      	ldr	r2, [r7, #8]
 8003694:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003698:	4013      	ands	r3, r2
 800369a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80036a0:	68bb      	ldr	r3, [r7, #8]
 80036a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80036a4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80036a8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80036ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80036ae:	4a04      	ldr	r2, [pc, #16]	@ (80036c0 <__NVIC_SetPriorityGrouping+0x44>)
 80036b0:	68bb      	ldr	r3, [r7, #8]
 80036b2:	60d3      	str	r3, [r2, #12]
}
 80036b4:	bf00      	nop
 80036b6:	3714      	adds	r7, #20
 80036b8:	46bd      	mov	sp, r7
 80036ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036be:	4770      	bx	lr
 80036c0:	e000ed00 	.word	0xe000ed00

080036c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80036c4:	b480      	push	{r7}
 80036c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80036c8:	4b04      	ldr	r3, [pc, #16]	@ (80036dc <__NVIC_GetPriorityGrouping+0x18>)
 80036ca:	68db      	ldr	r3, [r3, #12]
 80036cc:	0a1b      	lsrs	r3, r3, #8
 80036ce:	f003 0307 	and.w	r3, r3, #7
}
 80036d2:	4618      	mov	r0, r3
 80036d4:	46bd      	mov	sp, r7
 80036d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036da:	4770      	bx	lr
 80036dc:	e000ed00 	.word	0xe000ed00

080036e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80036e0:	b480      	push	{r7}
 80036e2:	b083      	sub	sp, #12
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	4603      	mov	r3, r0
 80036e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80036ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	db0b      	blt.n	800370a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80036f2:	79fb      	ldrb	r3, [r7, #7]
 80036f4:	f003 021f 	and.w	r2, r3, #31
 80036f8:	4907      	ldr	r1, [pc, #28]	@ (8003718 <__NVIC_EnableIRQ+0x38>)
 80036fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036fe:	095b      	lsrs	r3, r3, #5
 8003700:	2001      	movs	r0, #1
 8003702:	fa00 f202 	lsl.w	r2, r0, r2
 8003706:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800370a:	bf00      	nop
 800370c:	370c      	adds	r7, #12
 800370e:	46bd      	mov	sp, r7
 8003710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003714:	4770      	bx	lr
 8003716:	bf00      	nop
 8003718:	e000e100 	.word	0xe000e100

0800371c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800371c:	b480      	push	{r7}
 800371e:	b083      	sub	sp, #12
 8003720:	af00      	add	r7, sp, #0
 8003722:	4603      	mov	r3, r0
 8003724:	6039      	str	r1, [r7, #0]
 8003726:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003728:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800372c:	2b00      	cmp	r3, #0
 800372e:	db0a      	blt.n	8003746 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	b2da      	uxtb	r2, r3
 8003734:	490c      	ldr	r1, [pc, #48]	@ (8003768 <__NVIC_SetPriority+0x4c>)
 8003736:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800373a:	0112      	lsls	r2, r2, #4
 800373c:	b2d2      	uxtb	r2, r2
 800373e:	440b      	add	r3, r1
 8003740:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003744:	e00a      	b.n	800375c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	b2da      	uxtb	r2, r3
 800374a:	4908      	ldr	r1, [pc, #32]	@ (800376c <__NVIC_SetPriority+0x50>)
 800374c:	79fb      	ldrb	r3, [r7, #7]
 800374e:	f003 030f 	and.w	r3, r3, #15
 8003752:	3b04      	subs	r3, #4
 8003754:	0112      	lsls	r2, r2, #4
 8003756:	b2d2      	uxtb	r2, r2
 8003758:	440b      	add	r3, r1
 800375a:	761a      	strb	r2, [r3, #24]
}
 800375c:	bf00      	nop
 800375e:	370c      	adds	r7, #12
 8003760:	46bd      	mov	sp, r7
 8003762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003766:	4770      	bx	lr
 8003768:	e000e100 	.word	0xe000e100
 800376c:	e000ed00 	.word	0xe000ed00

08003770 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003770:	b480      	push	{r7}
 8003772:	b089      	sub	sp, #36	@ 0x24
 8003774:	af00      	add	r7, sp, #0
 8003776:	60f8      	str	r0, [r7, #12]
 8003778:	60b9      	str	r1, [r7, #8]
 800377a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	f003 0307 	and.w	r3, r3, #7
 8003782:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003784:	69fb      	ldr	r3, [r7, #28]
 8003786:	f1c3 0307 	rsb	r3, r3, #7
 800378a:	2b04      	cmp	r3, #4
 800378c:	bf28      	it	cs
 800378e:	2304      	movcs	r3, #4
 8003790:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003792:	69fb      	ldr	r3, [r7, #28]
 8003794:	3304      	adds	r3, #4
 8003796:	2b06      	cmp	r3, #6
 8003798:	d902      	bls.n	80037a0 <NVIC_EncodePriority+0x30>
 800379a:	69fb      	ldr	r3, [r7, #28]
 800379c:	3b03      	subs	r3, #3
 800379e:	e000      	b.n	80037a2 <NVIC_EncodePriority+0x32>
 80037a0:	2300      	movs	r3, #0
 80037a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80037a4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80037a8:	69bb      	ldr	r3, [r7, #24]
 80037aa:	fa02 f303 	lsl.w	r3, r2, r3
 80037ae:	43da      	mvns	r2, r3
 80037b0:	68bb      	ldr	r3, [r7, #8]
 80037b2:	401a      	ands	r2, r3
 80037b4:	697b      	ldr	r3, [r7, #20]
 80037b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80037b8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80037bc:	697b      	ldr	r3, [r7, #20]
 80037be:	fa01 f303 	lsl.w	r3, r1, r3
 80037c2:	43d9      	mvns	r1, r3
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80037c8:	4313      	orrs	r3, r2
         );
}
 80037ca:	4618      	mov	r0, r3
 80037cc:	3724      	adds	r7, #36	@ 0x24
 80037ce:	46bd      	mov	sp, r7
 80037d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d4:	4770      	bx	lr
	...

080037d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b082      	sub	sp, #8
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	3b01      	subs	r3, #1
 80037e4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80037e8:	d301      	bcc.n	80037ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80037ea:	2301      	movs	r3, #1
 80037ec:	e00f      	b.n	800380e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80037ee:	4a0a      	ldr	r2, [pc, #40]	@ (8003818 <SysTick_Config+0x40>)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	3b01      	subs	r3, #1
 80037f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80037f6:	210f      	movs	r1, #15
 80037f8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80037fc:	f7ff ff8e 	bl	800371c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003800:	4b05      	ldr	r3, [pc, #20]	@ (8003818 <SysTick_Config+0x40>)
 8003802:	2200      	movs	r2, #0
 8003804:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003806:	4b04      	ldr	r3, [pc, #16]	@ (8003818 <SysTick_Config+0x40>)
 8003808:	2207      	movs	r2, #7
 800380a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800380c:	2300      	movs	r3, #0
}
 800380e:	4618      	mov	r0, r3
 8003810:	3708      	adds	r7, #8
 8003812:	46bd      	mov	sp, r7
 8003814:	bd80      	pop	{r7, pc}
 8003816:	bf00      	nop
 8003818:	e000e010 	.word	0xe000e010

0800381c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	b082      	sub	sp, #8
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003824:	6878      	ldr	r0, [r7, #4]
 8003826:	f7ff ff29 	bl	800367c <__NVIC_SetPriorityGrouping>
}
 800382a:	bf00      	nop
 800382c:	3708      	adds	r7, #8
 800382e:	46bd      	mov	sp, r7
 8003830:	bd80      	pop	{r7, pc}

08003832 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003832:	b580      	push	{r7, lr}
 8003834:	b086      	sub	sp, #24
 8003836:	af00      	add	r7, sp, #0
 8003838:	4603      	mov	r3, r0
 800383a:	60b9      	str	r1, [r7, #8]
 800383c:	607a      	str	r2, [r7, #4]
 800383e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003840:	2300      	movs	r3, #0
 8003842:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003844:	f7ff ff3e 	bl	80036c4 <__NVIC_GetPriorityGrouping>
 8003848:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800384a:	687a      	ldr	r2, [r7, #4]
 800384c:	68b9      	ldr	r1, [r7, #8]
 800384e:	6978      	ldr	r0, [r7, #20]
 8003850:	f7ff ff8e 	bl	8003770 <NVIC_EncodePriority>
 8003854:	4602      	mov	r2, r0
 8003856:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800385a:	4611      	mov	r1, r2
 800385c:	4618      	mov	r0, r3
 800385e:	f7ff ff5d 	bl	800371c <__NVIC_SetPriority>
}
 8003862:	bf00      	nop
 8003864:	3718      	adds	r7, #24
 8003866:	46bd      	mov	sp, r7
 8003868:	bd80      	pop	{r7, pc}

0800386a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800386a:	b580      	push	{r7, lr}
 800386c:	b082      	sub	sp, #8
 800386e:	af00      	add	r7, sp, #0
 8003870:	4603      	mov	r3, r0
 8003872:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003874:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003878:	4618      	mov	r0, r3
 800387a:	f7ff ff31 	bl	80036e0 <__NVIC_EnableIRQ>
}
 800387e:	bf00      	nop
 8003880:	3708      	adds	r7, #8
 8003882:	46bd      	mov	sp, r7
 8003884:	bd80      	pop	{r7, pc}

08003886 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003886:	b580      	push	{r7, lr}
 8003888:	b082      	sub	sp, #8
 800388a:	af00      	add	r7, sp, #0
 800388c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800388e:	6878      	ldr	r0, [r7, #4]
 8003890:	f7ff ffa2 	bl	80037d8 <SysTick_Config>
 8003894:	4603      	mov	r3, r0
}
 8003896:	4618      	mov	r0, r3
 8003898:	3708      	adds	r7, #8
 800389a:	46bd      	mov	sp, r7
 800389c:	bd80      	pop	{r7, pc}
	...

080038a0 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80038a0:	b480      	push	{r7}
 80038a2:	b085      	sub	sp, #20
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d101      	bne.n	80038b2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80038ae:	2301      	movs	r3, #1
 80038b0:	e098      	b.n	80039e4 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	461a      	mov	r2, r3
 80038b8:	4b4d      	ldr	r3, [pc, #308]	@ (80039f0 <HAL_DMA_Init+0x150>)
 80038ba:	429a      	cmp	r2, r3
 80038bc:	d80f      	bhi.n	80038de <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	461a      	mov	r2, r3
 80038c4:	4b4b      	ldr	r3, [pc, #300]	@ (80039f4 <HAL_DMA_Init+0x154>)
 80038c6:	4413      	add	r3, r2
 80038c8:	4a4b      	ldr	r2, [pc, #300]	@ (80039f8 <HAL_DMA_Init+0x158>)
 80038ca:	fba2 2303 	umull	r2, r3, r2, r3
 80038ce:	091b      	lsrs	r3, r3, #4
 80038d0:	009a      	lsls	r2, r3, #2
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	4a48      	ldr	r2, [pc, #288]	@ (80039fc <HAL_DMA_Init+0x15c>)
 80038da:	641a      	str	r2, [r3, #64]	@ 0x40
 80038dc:	e00e      	b.n	80038fc <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	461a      	mov	r2, r3
 80038e4:	4b46      	ldr	r3, [pc, #280]	@ (8003a00 <HAL_DMA_Init+0x160>)
 80038e6:	4413      	add	r3, r2
 80038e8:	4a43      	ldr	r2, [pc, #268]	@ (80039f8 <HAL_DMA_Init+0x158>)
 80038ea:	fba2 2303 	umull	r2, r3, r2, r3
 80038ee:	091b      	lsrs	r3, r3, #4
 80038f0:	009a      	lsls	r2, r3, #2
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	4a42      	ldr	r2, [pc, #264]	@ (8003a04 <HAL_DMA_Init+0x164>)
 80038fa:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2202      	movs	r2, #2
 8003900:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8003912:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003916:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003920:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	691b      	ldr	r3, [r3, #16]
 8003926:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800392c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	699b      	ldr	r3, [r3, #24]
 8003932:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003938:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6a1b      	ldr	r3, [r3, #32]
 800393e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003940:	68fa      	ldr	r2, [r7, #12]
 8003942:	4313      	orrs	r3, r2
 8003944:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	68fa      	ldr	r2, [r7, #12]
 800394c:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	689b      	ldr	r3, [r3, #8]
 8003952:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003956:	d039      	beq.n	80039cc <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800395c:	4a27      	ldr	r2, [pc, #156]	@ (80039fc <HAL_DMA_Init+0x15c>)
 800395e:	4293      	cmp	r3, r2
 8003960:	d11a      	bne.n	8003998 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003962:	4b29      	ldr	r3, [pc, #164]	@ (8003a08 <HAL_DMA_Init+0x168>)
 8003964:	681a      	ldr	r2, [r3, #0]
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800396a:	f003 031c 	and.w	r3, r3, #28
 800396e:	210f      	movs	r1, #15
 8003970:	fa01 f303 	lsl.w	r3, r1, r3
 8003974:	43db      	mvns	r3, r3
 8003976:	4924      	ldr	r1, [pc, #144]	@ (8003a08 <HAL_DMA_Init+0x168>)
 8003978:	4013      	ands	r3, r2
 800397a:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800397c:	4b22      	ldr	r3, [pc, #136]	@ (8003a08 <HAL_DMA_Init+0x168>)
 800397e:	681a      	ldr	r2, [r3, #0]
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6859      	ldr	r1, [r3, #4]
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003988:	f003 031c 	and.w	r3, r3, #28
 800398c:	fa01 f303 	lsl.w	r3, r1, r3
 8003990:	491d      	ldr	r1, [pc, #116]	@ (8003a08 <HAL_DMA_Init+0x168>)
 8003992:	4313      	orrs	r3, r2
 8003994:	600b      	str	r3, [r1, #0]
 8003996:	e019      	b.n	80039cc <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003998:	4b1c      	ldr	r3, [pc, #112]	@ (8003a0c <HAL_DMA_Init+0x16c>)
 800399a:	681a      	ldr	r2, [r3, #0]
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039a0:	f003 031c 	and.w	r3, r3, #28
 80039a4:	210f      	movs	r1, #15
 80039a6:	fa01 f303 	lsl.w	r3, r1, r3
 80039aa:	43db      	mvns	r3, r3
 80039ac:	4917      	ldr	r1, [pc, #92]	@ (8003a0c <HAL_DMA_Init+0x16c>)
 80039ae:	4013      	ands	r3, r2
 80039b0:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80039b2:	4b16      	ldr	r3, [pc, #88]	@ (8003a0c <HAL_DMA_Init+0x16c>)
 80039b4:	681a      	ldr	r2, [r3, #0]
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6859      	ldr	r1, [r3, #4]
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039be:	f003 031c 	and.w	r3, r3, #28
 80039c2:	fa01 f303 	lsl.w	r3, r1, r3
 80039c6:	4911      	ldr	r1, [pc, #68]	@ (8003a0c <HAL_DMA_Init+0x16c>)
 80039c8:	4313      	orrs	r3, r2
 80039ca:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2200      	movs	r2, #0
 80039d0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	2201      	movs	r2, #1
 80039d6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	2200      	movs	r2, #0
 80039de:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80039e2:	2300      	movs	r3, #0
}
 80039e4:	4618      	mov	r0, r3
 80039e6:	3714      	adds	r7, #20
 80039e8:	46bd      	mov	sp, r7
 80039ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ee:	4770      	bx	lr
 80039f0:	40020407 	.word	0x40020407
 80039f4:	bffdfff8 	.word	0xbffdfff8
 80039f8:	cccccccd 	.word	0xcccccccd
 80039fc:	40020000 	.word	0x40020000
 8003a00:	bffdfbf8 	.word	0xbffdfbf8
 8003a04:	40020400 	.word	0x40020400
 8003a08:	400200a8 	.word	0x400200a8
 8003a0c:	400204a8 	.word	0x400204a8

08003a10 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b086      	sub	sp, #24
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	60f8      	str	r0, [r7, #12]
 8003a18:	60b9      	str	r1, [r7, #8]
 8003a1a:	607a      	str	r2, [r7, #4]
 8003a1c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003a1e:	2300      	movs	r3, #0
 8003a20:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003a28:	2b01      	cmp	r3, #1
 8003a2a:	d101      	bne.n	8003a30 <HAL_DMA_Start_IT+0x20>
 8003a2c:	2302      	movs	r3, #2
 8003a2e:	e04b      	b.n	8003ac8 <HAL_DMA_Start_IT+0xb8>
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	2201      	movs	r2, #1
 8003a34:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003a3e:	b2db      	uxtb	r3, r3
 8003a40:	2b01      	cmp	r3, #1
 8003a42:	d13a      	bne.n	8003aba <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	2202      	movs	r2, #2
 8003a48:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	2200      	movs	r2, #0
 8003a50:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	681a      	ldr	r2, [r3, #0]
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f022 0201 	bic.w	r2, r2, #1
 8003a60:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	687a      	ldr	r2, [r7, #4]
 8003a66:	68b9      	ldr	r1, [r7, #8]
 8003a68:	68f8      	ldr	r0, [r7, #12]
 8003a6a:	f000 f8e0 	bl	8003c2e <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d008      	beq.n	8003a88 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	681a      	ldr	r2, [r3, #0]
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f042 020e 	orr.w	r2, r2, #14
 8003a84:	601a      	str	r2, [r3, #0]
 8003a86:	e00f      	b.n	8003aa8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	681a      	ldr	r2, [r3, #0]
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f022 0204 	bic.w	r2, r2, #4
 8003a96:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	681a      	ldr	r2, [r3, #0]
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f042 020a 	orr.w	r2, r2, #10
 8003aa6:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	681a      	ldr	r2, [r3, #0]
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f042 0201 	orr.w	r2, r2, #1
 8003ab6:	601a      	str	r2, [r3, #0]
 8003ab8:	e005      	b.n	8003ac6 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	2200      	movs	r2, #0
 8003abe:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003ac2:	2302      	movs	r3, #2
 8003ac4:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003ac6:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ac8:	4618      	mov	r0, r3
 8003aca:	3718      	adds	r7, #24
 8003acc:	46bd      	mov	sp, r7
 8003ace:	bd80      	pop	{r7, pc}

08003ad0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b084      	sub	sp, #16
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003aec:	f003 031c 	and.w	r3, r3, #28
 8003af0:	2204      	movs	r2, #4
 8003af2:	409a      	lsls	r2, r3
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	4013      	ands	r3, r2
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d026      	beq.n	8003b4a <HAL_DMA_IRQHandler+0x7a>
 8003afc:	68bb      	ldr	r3, [r7, #8]
 8003afe:	f003 0304 	and.w	r3, r3, #4
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d021      	beq.n	8003b4a <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f003 0320 	and.w	r3, r3, #32
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d107      	bne.n	8003b24 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	681a      	ldr	r2, [r3, #0]
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f022 0204 	bic.w	r2, r2, #4
 8003b22:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b28:	f003 021c 	and.w	r2, r3, #28
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b30:	2104      	movs	r1, #4
 8003b32:	fa01 f202 	lsl.w	r2, r1, r2
 8003b36:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d071      	beq.n	8003c24 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b44:	6878      	ldr	r0, [r7, #4]
 8003b46:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003b48:	e06c      	b.n	8003c24 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b4e:	f003 031c 	and.w	r3, r3, #28
 8003b52:	2202      	movs	r2, #2
 8003b54:	409a      	lsls	r2, r3
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	4013      	ands	r3, r2
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d02e      	beq.n	8003bbc <HAL_DMA_IRQHandler+0xec>
 8003b5e:	68bb      	ldr	r3, [r7, #8]
 8003b60:	f003 0302 	and.w	r3, r3, #2
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d029      	beq.n	8003bbc <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f003 0320 	and.w	r3, r3, #32
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d10b      	bne.n	8003b8e <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	681a      	ldr	r2, [r3, #0]
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f022 020a 	bic.w	r2, r2, #10
 8003b84:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2201      	movs	r2, #1
 8003b8a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b92:	f003 021c 	and.w	r2, r3, #28
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b9a:	2102      	movs	r1, #2
 8003b9c:	fa01 f202 	lsl.w	r2, r1, r2
 8003ba0:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d038      	beq.n	8003c24 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bb6:	6878      	ldr	r0, [r7, #4]
 8003bb8:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003bba:	e033      	b.n	8003c24 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bc0:	f003 031c 	and.w	r3, r3, #28
 8003bc4:	2208      	movs	r2, #8
 8003bc6:	409a      	lsls	r2, r3
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	4013      	ands	r3, r2
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d02a      	beq.n	8003c26 <HAL_DMA_IRQHandler+0x156>
 8003bd0:	68bb      	ldr	r3, [r7, #8]
 8003bd2:	f003 0308 	and.w	r3, r3, #8
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d025      	beq.n	8003c26 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	681a      	ldr	r2, [r3, #0]
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f022 020e 	bic.w	r2, r2, #14
 8003be8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bee:	f003 021c 	and.w	r2, r3, #28
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bf6:	2101      	movs	r1, #1
 8003bf8:	fa01 f202 	lsl.w	r2, r1, r2
 8003bfc:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	2201      	movs	r2, #1
 8003c02:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2201      	movs	r2, #1
 8003c08:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2200      	movs	r2, #0
 8003c10:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d004      	beq.n	8003c26 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c20:	6878      	ldr	r0, [r7, #4]
 8003c22:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003c24:	bf00      	nop
 8003c26:	bf00      	nop
}
 8003c28:	3710      	adds	r7, #16
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	bd80      	pop	{r7, pc}

08003c2e <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003c2e:	b480      	push	{r7}
 8003c30:	b085      	sub	sp, #20
 8003c32:	af00      	add	r7, sp, #0
 8003c34:	60f8      	str	r0, [r7, #12]
 8003c36:	60b9      	str	r1, [r7, #8]
 8003c38:	607a      	str	r2, [r7, #4]
 8003c3a:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c40:	f003 021c 	and.w	r2, r3, #28
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c48:	2101      	movs	r1, #1
 8003c4a:	fa01 f202 	lsl.w	r2, r1, r2
 8003c4e:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	683a      	ldr	r2, [r7, #0]
 8003c56:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	689b      	ldr	r3, [r3, #8]
 8003c5c:	2b10      	cmp	r3, #16
 8003c5e:	d108      	bne.n	8003c72 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	687a      	ldr	r2, [r7, #4]
 8003c66:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	68ba      	ldr	r2, [r7, #8]
 8003c6e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003c70:	e007      	b.n	8003c82 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	68ba      	ldr	r2, [r7, #8]
 8003c78:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	687a      	ldr	r2, [r7, #4]
 8003c80:	60da      	str	r2, [r3, #12]
}
 8003c82:	bf00      	nop
 8003c84:	3714      	adds	r7, #20
 8003c86:	46bd      	mov	sp, r7
 8003c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8c:	4770      	bx	lr
	...

08003c90 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003c90:	b480      	push	{r7}
 8003c92:	b087      	sub	sp, #28
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
 8003c98:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003c9e:	e148      	b.n	8003f32 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	681a      	ldr	r2, [r3, #0]
 8003ca4:	2101      	movs	r1, #1
 8003ca6:	697b      	ldr	r3, [r7, #20]
 8003ca8:	fa01 f303 	lsl.w	r3, r1, r3
 8003cac:	4013      	ands	r3, r2
 8003cae:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	f000 813a 	beq.w	8003f2c <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	685b      	ldr	r3, [r3, #4]
 8003cbc:	f003 0303 	and.w	r3, r3, #3
 8003cc0:	2b01      	cmp	r3, #1
 8003cc2:	d005      	beq.n	8003cd0 <HAL_GPIO_Init+0x40>
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	685b      	ldr	r3, [r3, #4]
 8003cc8:	f003 0303 	and.w	r3, r3, #3
 8003ccc:	2b02      	cmp	r3, #2
 8003cce:	d130      	bne.n	8003d32 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	689b      	ldr	r3, [r3, #8]
 8003cd4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003cd6:	697b      	ldr	r3, [r7, #20]
 8003cd8:	005b      	lsls	r3, r3, #1
 8003cda:	2203      	movs	r2, #3
 8003cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8003ce0:	43db      	mvns	r3, r3
 8003ce2:	693a      	ldr	r2, [r7, #16]
 8003ce4:	4013      	ands	r3, r2
 8003ce6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	68da      	ldr	r2, [r3, #12]
 8003cec:	697b      	ldr	r3, [r7, #20]
 8003cee:	005b      	lsls	r3, r3, #1
 8003cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8003cf4:	693a      	ldr	r2, [r7, #16]
 8003cf6:	4313      	orrs	r3, r2
 8003cf8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	693a      	ldr	r2, [r7, #16]
 8003cfe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	685b      	ldr	r3, [r3, #4]
 8003d04:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003d06:	2201      	movs	r2, #1
 8003d08:	697b      	ldr	r3, [r7, #20]
 8003d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d0e:	43db      	mvns	r3, r3
 8003d10:	693a      	ldr	r2, [r7, #16]
 8003d12:	4013      	ands	r3, r2
 8003d14:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	685b      	ldr	r3, [r3, #4]
 8003d1a:	091b      	lsrs	r3, r3, #4
 8003d1c:	f003 0201 	and.w	r2, r3, #1
 8003d20:	697b      	ldr	r3, [r7, #20]
 8003d22:	fa02 f303 	lsl.w	r3, r2, r3
 8003d26:	693a      	ldr	r2, [r7, #16]
 8003d28:	4313      	orrs	r3, r2
 8003d2a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	693a      	ldr	r2, [r7, #16]
 8003d30:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	685b      	ldr	r3, [r3, #4]
 8003d36:	f003 0303 	and.w	r3, r3, #3
 8003d3a:	2b03      	cmp	r3, #3
 8003d3c:	d017      	beq.n	8003d6e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	68db      	ldr	r3, [r3, #12]
 8003d42:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003d44:	697b      	ldr	r3, [r7, #20]
 8003d46:	005b      	lsls	r3, r3, #1
 8003d48:	2203      	movs	r2, #3
 8003d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d4e:	43db      	mvns	r3, r3
 8003d50:	693a      	ldr	r2, [r7, #16]
 8003d52:	4013      	ands	r3, r2
 8003d54:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003d56:	683b      	ldr	r3, [r7, #0]
 8003d58:	689a      	ldr	r2, [r3, #8]
 8003d5a:	697b      	ldr	r3, [r7, #20]
 8003d5c:	005b      	lsls	r3, r3, #1
 8003d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d62:	693a      	ldr	r2, [r7, #16]
 8003d64:	4313      	orrs	r3, r2
 8003d66:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	693a      	ldr	r2, [r7, #16]
 8003d6c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003d6e:	683b      	ldr	r3, [r7, #0]
 8003d70:	685b      	ldr	r3, [r3, #4]
 8003d72:	f003 0303 	and.w	r3, r3, #3
 8003d76:	2b02      	cmp	r3, #2
 8003d78:	d123      	bne.n	8003dc2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003d7a:	697b      	ldr	r3, [r7, #20]
 8003d7c:	08da      	lsrs	r2, r3, #3
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	3208      	adds	r2, #8
 8003d82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003d86:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003d88:	697b      	ldr	r3, [r7, #20]
 8003d8a:	f003 0307 	and.w	r3, r3, #7
 8003d8e:	009b      	lsls	r3, r3, #2
 8003d90:	220f      	movs	r2, #15
 8003d92:	fa02 f303 	lsl.w	r3, r2, r3
 8003d96:	43db      	mvns	r3, r3
 8003d98:	693a      	ldr	r2, [r7, #16]
 8003d9a:	4013      	ands	r3, r2
 8003d9c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	691a      	ldr	r2, [r3, #16]
 8003da2:	697b      	ldr	r3, [r7, #20]
 8003da4:	f003 0307 	and.w	r3, r3, #7
 8003da8:	009b      	lsls	r3, r3, #2
 8003daa:	fa02 f303 	lsl.w	r3, r2, r3
 8003dae:	693a      	ldr	r2, [r7, #16]
 8003db0:	4313      	orrs	r3, r2
 8003db2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003db4:	697b      	ldr	r3, [r7, #20]
 8003db6:	08da      	lsrs	r2, r3, #3
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	3208      	adds	r2, #8
 8003dbc:	6939      	ldr	r1, [r7, #16]
 8003dbe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003dc8:	697b      	ldr	r3, [r7, #20]
 8003dca:	005b      	lsls	r3, r3, #1
 8003dcc:	2203      	movs	r2, #3
 8003dce:	fa02 f303 	lsl.w	r3, r2, r3
 8003dd2:	43db      	mvns	r3, r3
 8003dd4:	693a      	ldr	r2, [r7, #16]
 8003dd6:	4013      	ands	r3, r2
 8003dd8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	685b      	ldr	r3, [r3, #4]
 8003dde:	f003 0203 	and.w	r2, r3, #3
 8003de2:	697b      	ldr	r3, [r7, #20]
 8003de4:	005b      	lsls	r3, r3, #1
 8003de6:	fa02 f303 	lsl.w	r3, r2, r3
 8003dea:	693a      	ldr	r2, [r7, #16]
 8003dec:	4313      	orrs	r3, r2
 8003dee:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	693a      	ldr	r2, [r7, #16]
 8003df4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	685b      	ldr	r3, [r3, #4]
 8003dfa:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	f000 8094 	beq.w	8003f2c <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e04:	4b52      	ldr	r3, [pc, #328]	@ (8003f50 <HAL_GPIO_Init+0x2c0>)
 8003e06:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e08:	4a51      	ldr	r2, [pc, #324]	@ (8003f50 <HAL_GPIO_Init+0x2c0>)
 8003e0a:	f043 0301 	orr.w	r3, r3, #1
 8003e0e:	6613      	str	r3, [r2, #96]	@ 0x60
 8003e10:	4b4f      	ldr	r3, [pc, #316]	@ (8003f50 <HAL_GPIO_Init+0x2c0>)
 8003e12:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e14:	f003 0301 	and.w	r3, r3, #1
 8003e18:	60bb      	str	r3, [r7, #8]
 8003e1a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003e1c:	4a4d      	ldr	r2, [pc, #308]	@ (8003f54 <HAL_GPIO_Init+0x2c4>)
 8003e1e:	697b      	ldr	r3, [r7, #20]
 8003e20:	089b      	lsrs	r3, r3, #2
 8003e22:	3302      	adds	r3, #2
 8003e24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e28:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003e2a:	697b      	ldr	r3, [r7, #20]
 8003e2c:	f003 0303 	and.w	r3, r3, #3
 8003e30:	009b      	lsls	r3, r3, #2
 8003e32:	220f      	movs	r2, #15
 8003e34:	fa02 f303 	lsl.w	r3, r2, r3
 8003e38:	43db      	mvns	r3, r3
 8003e3a:	693a      	ldr	r2, [r7, #16]
 8003e3c:	4013      	ands	r3, r2
 8003e3e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003e46:	d00d      	beq.n	8003e64 <HAL_GPIO_Init+0x1d4>
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	4a43      	ldr	r2, [pc, #268]	@ (8003f58 <HAL_GPIO_Init+0x2c8>)
 8003e4c:	4293      	cmp	r3, r2
 8003e4e:	d007      	beq.n	8003e60 <HAL_GPIO_Init+0x1d0>
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	4a42      	ldr	r2, [pc, #264]	@ (8003f5c <HAL_GPIO_Init+0x2cc>)
 8003e54:	4293      	cmp	r3, r2
 8003e56:	d101      	bne.n	8003e5c <HAL_GPIO_Init+0x1cc>
 8003e58:	2302      	movs	r3, #2
 8003e5a:	e004      	b.n	8003e66 <HAL_GPIO_Init+0x1d6>
 8003e5c:	2307      	movs	r3, #7
 8003e5e:	e002      	b.n	8003e66 <HAL_GPIO_Init+0x1d6>
 8003e60:	2301      	movs	r3, #1
 8003e62:	e000      	b.n	8003e66 <HAL_GPIO_Init+0x1d6>
 8003e64:	2300      	movs	r3, #0
 8003e66:	697a      	ldr	r2, [r7, #20]
 8003e68:	f002 0203 	and.w	r2, r2, #3
 8003e6c:	0092      	lsls	r2, r2, #2
 8003e6e:	4093      	lsls	r3, r2
 8003e70:	693a      	ldr	r2, [r7, #16]
 8003e72:	4313      	orrs	r3, r2
 8003e74:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003e76:	4937      	ldr	r1, [pc, #220]	@ (8003f54 <HAL_GPIO_Init+0x2c4>)
 8003e78:	697b      	ldr	r3, [r7, #20]
 8003e7a:	089b      	lsrs	r3, r3, #2
 8003e7c:	3302      	adds	r3, #2
 8003e7e:	693a      	ldr	r2, [r7, #16]
 8003e80:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003e84:	4b36      	ldr	r3, [pc, #216]	@ (8003f60 <HAL_GPIO_Init+0x2d0>)
 8003e86:	689b      	ldr	r3, [r3, #8]
 8003e88:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	43db      	mvns	r3, r3
 8003e8e:	693a      	ldr	r2, [r7, #16]
 8003e90:	4013      	ands	r3, r2
 8003e92:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	685b      	ldr	r3, [r3, #4]
 8003e98:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d003      	beq.n	8003ea8 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8003ea0:	693a      	ldr	r2, [r7, #16]
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	4313      	orrs	r3, r2
 8003ea6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003ea8:	4a2d      	ldr	r2, [pc, #180]	@ (8003f60 <HAL_GPIO_Init+0x2d0>)
 8003eaa:	693b      	ldr	r3, [r7, #16]
 8003eac:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003eae:	4b2c      	ldr	r3, [pc, #176]	@ (8003f60 <HAL_GPIO_Init+0x2d0>)
 8003eb0:	68db      	ldr	r3, [r3, #12]
 8003eb2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	43db      	mvns	r3, r3
 8003eb8:	693a      	ldr	r2, [r7, #16]
 8003eba:	4013      	ands	r3, r2
 8003ebc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003ebe:	683b      	ldr	r3, [r7, #0]
 8003ec0:	685b      	ldr	r3, [r3, #4]
 8003ec2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d003      	beq.n	8003ed2 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8003eca:	693a      	ldr	r2, [r7, #16]
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	4313      	orrs	r3, r2
 8003ed0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003ed2:	4a23      	ldr	r2, [pc, #140]	@ (8003f60 <HAL_GPIO_Init+0x2d0>)
 8003ed4:	693b      	ldr	r3, [r7, #16]
 8003ed6:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003ed8:	4b21      	ldr	r3, [pc, #132]	@ (8003f60 <HAL_GPIO_Init+0x2d0>)
 8003eda:	685b      	ldr	r3, [r3, #4]
 8003edc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	43db      	mvns	r3, r3
 8003ee2:	693a      	ldr	r2, [r7, #16]
 8003ee4:	4013      	ands	r3, r2
 8003ee6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	685b      	ldr	r3, [r3, #4]
 8003eec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d003      	beq.n	8003efc <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8003ef4:	693a      	ldr	r2, [r7, #16]
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	4313      	orrs	r3, r2
 8003efa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003efc:	4a18      	ldr	r2, [pc, #96]	@ (8003f60 <HAL_GPIO_Init+0x2d0>)
 8003efe:	693b      	ldr	r3, [r7, #16]
 8003f00:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003f02:	4b17      	ldr	r3, [pc, #92]	@ (8003f60 <HAL_GPIO_Init+0x2d0>)
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	43db      	mvns	r3, r3
 8003f0c:	693a      	ldr	r2, [r7, #16]
 8003f0e:	4013      	ands	r3, r2
 8003f10:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003f12:	683b      	ldr	r3, [r7, #0]
 8003f14:	685b      	ldr	r3, [r3, #4]
 8003f16:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d003      	beq.n	8003f26 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8003f1e:	693a      	ldr	r2, [r7, #16]
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	4313      	orrs	r3, r2
 8003f24:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003f26:	4a0e      	ldr	r2, [pc, #56]	@ (8003f60 <HAL_GPIO_Init+0x2d0>)
 8003f28:	693b      	ldr	r3, [r7, #16]
 8003f2a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003f2c:	697b      	ldr	r3, [r7, #20]
 8003f2e:	3301      	adds	r3, #1
 8003f30:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003f32:	683b      	ldr	r3, [r7, #0]
 8003f34:	681a      	ldr	r2, [r3, #0]
 8003f36:	697b      	ldr	r3, [r7, #20]
 8003f38:	fa22 f303 	lsr.w	r3, r2, r3
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	f47f aeaf 	bne.w	8003ca0 <HAL_GPIO_Init+0x10>
  }
}
 8003f42:	bf00      	nop
 8003f44:	bf00      	nop
 8003f46:	371c      	adds	r7, #28
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4e:	4770      	bx	lr
 8003f50:	40021000 	.word	0x40021000
 8003f54:	40010000 	.word	0x40010000
 8003f58:	48000400 	.word	0x48000400
 8003f5c:	48000800 	.word	0x48000800
 8003f60:	40010400 	.word	0x40010400

08003f64 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003f64:	b480      	push	{r7}
 8003f66:	b085      	sub	sp, #20
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
 8003f6c:	460b      	mov	r3, r1
 8003f6e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	691a      	ldr	r2, [r3, #16]
 8003f74:	887b      	ldrh	r3, [r7, #2]
 8003f76:	4013      	ands	r3, r2
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d002      	beq.n	8003f82 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003f7c:	2301      	movs	r3, #1
 8003f7e:	73fb      	strb	r3, [r7, #15]
 8003f80:	e001      	b.n	8003f86 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003f82:	2300      	movs	r3, #0
 8003f84:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003f86:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f88:	4618      	mov	r0, r3
 8003f8a:	3714      	adds	r7, #20
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f92:	4770      	bx	lr

08003f94 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003f94:	b480      	push	{r7}
 8003f96:	b083      	sub	sp, #12
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
 8003f9c:	460b      	mov	r3, r1
 8003f9e:	807b      	strh	r3, [r7, #2]
 8003fa0:	4613      	mov	r3, r2
 8003fa2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003fa4:	787b      	ldrb	r3, [r7, #1]
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d003      	beq.n	8003fb2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003faa:	887a      	ldrh	r2, [r7, #2]
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003fb0:	e002      	b.n	8003fb8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003fb2:	887a      	ldrh	r2, [r7, #2]
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003fb8:	bf00      	nop
 8003fba:	370c      	adds	r7, #12
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc2:	4770      	bx	lr

08003fc4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003fc4:	b480      	push	{r7}
 8003fc6:	b085      	sub	sp, #20
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
 8003fcc:	460b      	mov	r3, r1
 8003fce:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	695b      	ldr	r3, [r3, #20]
 8003fd4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003fd6:	887a      	ldrh	r2, [r7, #2]
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	4013      	ands	r3, r2
 8003fdc:	041a      	lsls	r2, r3, #16
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	43d9      	mvns	r1, r3
 8003fe2:	887b      	ldrh	r3, [r7, #2]
 8003fe4:	400b      	ands	r3, r1
 8003fe6:	431a      	orrs	r2, r3
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	619a      	str	r2, [r3, #24]
}
 8003fec:	bf00      	nop
 8003fee:	3714      	adds	r7, #20
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff6:	4770      	bx	lr

08003ff8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b082      	sub	sp, #8
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2b00      	cmp	r3, #0
 8004004:	d101      	bne.n	800400a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004006:	2301      	movs	r3, #1
 8004008:	e08d      	b.n	8004126 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004010:	b2db      	uxtb	r3, r3
 8004012:	2b00      	cmp	r3, #0
 8004014:	d106      	bne.n	8004024 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	2200      	movs	r2, #0
 800401a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800401e:	6878      	ldr	r0, [r7, #4]
 8004020:	f7fe f850 	bl	80020c4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2224      	movs	r2, #36	@ 0x24
 8004028:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	681a      	ldr	r2, [r3, #0]
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f022 0201 	bic.w	r2, r2, #1
 800403a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	685a      	ldr	r2, [r3, #4]
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004048:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	689a      	ldr	r2, [r3, #8]
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004058:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	68db      	ldr	r3, [r3, #12]
 800405e:	2b01      	cmp	r3, #1
 8004060:	d107      	bne.n	8004072 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	689a      	ldr	r2, [r3, #8]
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800406e:	609a      	str	r2, [r3, #8]
 8004070:	e006      	b.n	8004080 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	689a      	ldr	r2, [r3, #8]
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800407e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	68db      	ldr	r3, [r3, #12]
 8004084:	2b02      	cmp	r3, #2
 8004086:	d108      	bne.n	800409a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	685a      	ldr	r2, [r3, #4]
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004096:	605a      	str	r2, [r3, #4]
 8004098:	e007      	b.n	80040aa <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	685a      	ldr	r2, [r3, #4]
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80040a8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	685b      	ldr	r3, [r3, #4]
 80040b0:	687a      	ldr	r2, [r7, #4]
 80040b2:	6812      	ldr	r2, [r2, #0]
 80040b4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80040b8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80040bc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	68da      	ldr	r2, [r3, #12]
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80040cc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	691a      	ldr	r2, [r3, #16]
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	695b      	ldr	r3, [r3, #20]
 80040d6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	699b      	ldr	r3, [r3, #24]
 80040de:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	430a      	orrs	r2, r1
 80040e6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	69d9      	ldr	r1, [r3, #28]
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	6a1a      	ldr	r2, [r3, #32]
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	430a      	orrs	r2, r1
 80040f6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	681a      	ldr	r2, [r3, #0]
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f042 0201 	orr.w	r2, r2, #1
 8004106:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2200      	movs	r2, #0
 800410c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	2220      	movs	r2, #32
 8004112:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	2200      	movs	r2, #0
 800411a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2200      	movs	r2, #0
 8004120:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8004124:	2300      	movs	r3, #0
}
 8004126:	4618      	mov	r0, r3
 8004128:	3708      	adds	r7, #8
 800412a:	46bd      	mov	sp, r7
 800412c:	bd80      	pop	{r7, pc}
	...

08004130 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004130:	b580      	push	{r7, lr}
 8004132:	b088      	sub	sp, #32
 8004134:	af02      	add	r7, sp, #8
 8004136:	60f8      	str	r0, [r7, #12]
 8004138:	4608      	mov	r0, r1
 800413a:	4611      	mov	r1, r2
 800413c:	461a      	mov	r2, r3
 800413e:	4603      	mov	r3, r0
 8004140:	817b      	strh	r3, [r7, #10]
 8004142:	460b      	mov	r3, r1
 8004144:	813b      	strh	r3, [r7, #8]
 8004146:	4613      	mov	r3, r2
 8004148:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004150:	b2db      	uxtb	r3, r3
 8004152:	2b20      	cmp	r3, #32
 8004154:	f040 80f9 	bne.w	800434a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004158:	6a3b      	ldr	r3, [r7, #32]
 800415a:	2b00      	cmp	r3, #0
 800415c:	d002      	beq.n	8004164 <HAL_I2C_Mem_Write+0x34>
 800415e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004160:	2b00      	cmp	r3, #0
 8004162:	d105      	bne.n	8004170 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800416a:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800416c:	2301      	movs	r3, #1
 800416e:	e0ed      	b.n	800434c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004176:	2b01      	cmp	r3, #1
 8004178:	d101      	bne.n	800417e <HAL_I2C_Mem_Write+0x4e>
 800417a:	2302      	movs	r3, #2
 800417c:	e0e6      	b.n	800434c <HAL_I2C_Mem_Write+0x21c>
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	2201      	movs	r2, #1
 8004182:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004186:	f7fe f98b 	bl	80024a0 <HAL_GetTick>
 800418a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800418c:	697b      	ldr	r3, [r7, #20]
 800418e:	9300      	str	r3, [sp, #0]
 8004190:	2319      	movs	r3, #25
 8004192:	2201      	movs	r2, #1
 8004194:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004198:	68f8      	ldr	r0, [r7, #12]
 800419a:	f000 fac3 	bl	8004724 <I2C_WaitOnFlagUntilTimeout>
 800419e:	4603      	mov	r3, r0
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d001      	beq.n	80041a8 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80041a4:	2301      	movs	r3, #1
 80041a6:	e0d1      	b.n	800434c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	2221      	movs	r2, #33	@ 0x21
 80041ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	2240      	movs	r2, #64	@ 0x40
 80041b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	2200      	movs	r2, #0
 80041bc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	6a3a      	ldr	r2, [r7, #32]
 80041c2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80041c8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	2200      	movs	r2, #0
 80041ce:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80041d0:	88f8      	ldrh	r0, [r7, #6]
 80041d2:	893a      	ldrh	r2, [r7, #8]
 80041d4:	8979      	ldrh	r1, [r7, #10]
 80041d6:	697b      	ldr	r3, [r7, #20]
 80041d8:	9301      	str	r3, [sp, #4]
 80041da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041dc:	9300      	str	r3, [sp, #0]
 80041de:	4603      	mov	r3, r0
 80041e0:	68f8      	ldr	r0, [r7, #12]
 80041e2:	f000 f9d3 	bl	800458c <I2C_RequestMemoryWrite>
 80041e6:	4603      	mov	r3, r0
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d005      	beq.n	80041f8 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	2200      	movs	r2, #0
 80041f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80041f4:	2301      	movs	r3, #1
 80041f6:	e0a9      	b.n	800434c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041fc:	b29b      	uxth	r3, r3
 80041fe:	2bff      	cmp	r3, #255	@ 0xff
 8004200:	d90e      	bls.n	8004220 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	22ff      	movs	r2, #255	@ 0xff
 8004206:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800420c:	b2da      	uxtb	r2, r3
 800420e:	8979      	ldrh	r1, [r7, #10]
 8004210:	2300      	movs	r3, #0
 8004212:	9300      	str	r3, [sp, #0]
 8004214:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004218:	68f8      	ldr	r0, [r7, #12]
 800421a:	f000 fc47 	bl	8004aac <I2C_TransferConfig>
 800421e:	e00f      	b.n	8004240 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004224:	b29a      	uxth	r2, r3
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800422e:	b2da      	uxtb	r2, r3
 8004230:	8979      	ldrh	r1, [r7, #10]
 8004232:	2300      	movs	r3, #0
 8004234:	9300      	str	r3, [sp, #0]
 8004236:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800423a:	68f8      	ldr	r0, [r7, #12]
 800423c:	f000 fc36 	bl	8004aac <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004240:	697a      	ldr	r2, [r7, #20]
 8004242:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004244:	68f8      	ldr	r0, [r7, #12]
 8004246:	f000 fac6 	bl	80047d6 <I2C_WaitOnTXISFlagUntilTimeout>
 800424a:	4603      	mov	r3, r0
 800424c:	2b00      	cmp	r3, #0
 800424e:	d001      	beq.n	8004254 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8004250:	2301      	movs	r3, #1
 8004252:	e07b      	b.n	800434c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004258:	781a      	ldrb	r2, [r3, #0]
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004264:	1c5a      	adds	r2, r3, #1
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800426e:	b29b      	uxth	r3, r3
 8004270:	3b01      	subs	r3, #1
 8004272:	b29a      	uxth	r2, r3
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800427c:	3b01      	subs	r3, #1
 800427e:	b29a      	uxth	r2, r3
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004288:	b29b      	uxth	r3, r3
 800428a:	2b00      	cmp	r3, #0
 800428c:	d034      	beq.n	80042f8 <HAL_I2C_Mem_Write+0x1c8>
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004292:	2b00      	cmp	r3, #0
 8004294:	d130      	bne.n	80042f8 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004296:	697b      	ldr	r3, [r7, #20]
 8004298:	9300      	str	r3, [sp, #0]
 800429a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800429c:	2200      	movs	r2, #0
 800429e:	2180      	movs	r1, #128	@ 0x80
 80042a0:	68f8      	ldr	r0, [r7, #12]
 80042a2:	f000 fa3f 	bl	8004724 <I2C_WaitOnFlagUntilTimeout>
 80042a6:	4603      	mov	r3, r0
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d001      	beq.n	80042b0 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80042ac:	2301      	movs	r3, #1
 80042ae:	e04d      	b.n	800434c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042b4:	b29b      	uxth	r3, r3
 80042b6:	2bff      	cmp	r3, #255	@ 0xff
 80042b8:	d90e      	bls.n	80042d8 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	22ff      	movs	r2, #255	@ 0xff
 80042be:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80042c4:	b2da      	uxtb	r2, r3
 80042c6:	8979      	ldrh	r1, [r7, #10]
 80042c8:	2300      	movs	r3, #0
 80042ca:	9300      	str	r3, [sp, #0]
 80042cc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80042d0:	68f8      	ldr	r0, [r7, #12]
 80042d2:	f000 fbeb 	bl	8004aac <I2C_TransferConfig>
 80042d6:	e00f      	b.n	80042f8 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042dc:	b29a      	uxth	r2, r3
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80042e6:	b2da      	uxtb	r2, r3
 80042e8:	8979      	ldrh	r1, [r7, #10]
 80042ea:	2300      	movs	r3, #0
 80042ec:	9300      	str	r3, [sp, #0]
 80042ee:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80042f2:	68f8      	ldr	r0, [r7, #12]
 80042f4:	f000 fbda 	bl	8004aac <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042fc:	b29b      	uxth	r3, r3
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d19e      	bne.n	8004240 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004302:	697a      	ldr	r2, [r7, #20]
 8004304:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004306:	68f8      	ldr	r0, [r7, #12]
 8004308:	f000 faac 	bl	8004864 <I2C_WaitOnSTOPFlagUntilTimeout>
 800430c:	4603      	mov	r3, r0
 800430e:	2b00      	cmp	r3, #0
 8004310:	d001      	beq.n	8004316 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8004312:	2301      	movs	r3, #1
 8004314:	e01a      	b.n	800434c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	2220      	movs	r2, #32
 800431c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	6859      	ldr	r1, [r3, #4]
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	681a      	ldr	r2, [r3, #0]
 8004328:	4b0a      	ldr	r3, [pc, #40]	@ (8004354 <HAL_I2C_Mem_Write+0x224>)
 800432a:	400b      	ands	r3, r1
 800432c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	2220      	movs	r2, #32
 8004332:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	2200      	movs	r2, #0
 800433a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	2200      	movs	r2, #0
 8004342:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004346:	2300      	movs	r3, #0
 8004348:	e000      	b.n	800434c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800434a:	2302      	movs	r3, #2
  }
}
 800434c:	4618      	mov	r0, r3
 800434e:	3718      	adds	r7, #24
 8004350:	46bd      	mov	sp, r7
 8004352:	bd80      	pop	{r7, pc}
 8004354:	fe00e800 	.word	0xfe00e800

08004358 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004358:	b580      	push	{r7, lr}
 800435a:	b088      	sub	sp, #32
 800435c:	af02      	add	r7, sp, #8
 800435e:	60f8      	str	r0, [r7, #12]
 8004360:	4608      	mov	r0, r1
 8004362:	4611      	mov	r1, r2
 8004364:	461a      	mov	r2, r3
 8004366:	4603      	mov	r3, r0
 8004368:	817b      	strh	r3, [r7, #10]
 800436a:	460b      	mov	r3, r1
 800436c:	813b      	strh	r3, [r7, #8]
 800436e:	4613      	mov	r3, r2
 8004370:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004378:	b2db      	uxtb	r3, r3
 800437a:	2b20      	cmp	r3, #32
 800437c:	f040 80fd 	bne.w	800457a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8004380:	6a3b      	ldr	r3, [r7, #32]
 8004382:	2b00      	cmp	r3, #0
 8004384:	d002      	beq.n	800438c <HAL_I2C_Mem_Read+0x34>
 8004386:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004388:	2b00      	cmp	r3, #0
 800438a:	d105      	bne.n	8004398 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004392:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8004394:	2301      	movs	r3, #1
 8004396:	e0f1      	b.n	800457c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800439e:	2b01      	cmp	r3, #1
 80043a0:	d101      	bne.n	80043a6 <HAL_I2C_Mem_Read+0x4e>
 80043a2:	2302      	movs	r3, #2
 80043a4:	e0ea      	b.n	800457c <HAL_I2C_Mem_Read+0x224>
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	2201      	movs	r2, #1
 80043aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80043ae:	f7fe f877 	bl	80024a0 <HAL_GetTick>
 80043b2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80043b4:	697b      	ldr	r3, [r7, #20]
 80043b6:	9300      	str	r3, [sp, #0]
 80043b8:	2319      	movs	r3, #25
 80043ba:	2201      	movs	r2, #1
 80043bc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80043c0:	68f8      	ldr	r0, [r7, #12]
 80043c2:	f000 f9af 	bl	8004724 <I2C_WaitOnFlagUntilTimeout>
 80043c6:	4603      	mov	r3, r0
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d001      	beq.n	80043d0 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80043cc:	2301      	movs	r3, #1
 80043ce:	e0d5      	b.n	800457c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	2222      	movs	r2, #34	@ 0x22
 80043d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	2240      	movs	r2, #64	@ 0x40
 80043dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	2200      	movs	r2, #0
 80043e4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	6a3a      	ldr	r2, [r7, #32]
 80043ea:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80043f0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	2200      	movs	r2, #0
 80043f6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80043f8:	88f8      	ldrh	r0, [r7, #6]
 80043fa:	893a      	ldrh	r2, [r7, #8]
 80043fc:	8979      	ldrh	r1, [r7, #10]
 80043fe:	697b      	ldr	r3, [r7, #20]
 8004400:	9301      	str	r3, [sp, #4]
 8004402:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004404:	9300      	str	r3, [sp, #0]
 8004406:	4603      	mov	r3, r0
 8004408:	68f8      	ldr	r0, [r7, #12]
 800440a:	f000 f913 	bl	8004634 <I2C_RequestMemoryRead>
 800440e:	4603      	mov	r3, r0
 8004410:	2b00      	cmp	r3, #0
 8004412:	d005      	beq.n	8004420 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	2200      	movs	r2, #0
 8004418:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 800441c:	2301      	movs	r3, #1
 800441e:	e0ad      	b.n	800457c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004424:	b29b      	uxth	r3, r3
 8004426:	2bff      	cmp	r3, #255	@ 0xff
 8004428:	d90e      	bls.n	8004448 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	2201      	movs	r2, #1
 800442e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004434:	b2da      	uxtb	r2, r3
 8004436:	8979      	ldrh	r1, [r7, #10]
 8004438:	4b52      	ldr	r3, [pc, #328]	@ (8004584 <HAL_I2C_Mem_Read+0x22c>)
 800443a:	9300      	str	r3, [sp, #0]
 800443c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004440:	68f8      	ldr	r0, [r7, #12]
 8004442:	f000 fb33 	bl	8004aac <I2C_TransferConfig>
 8004446:	e00f      	b.n	8004468 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800444c:	b29a      	uxth	r2, r3
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004456:	b2da      	uxtb	r2, r3
 8004458:	8979      	ldrh	r1, [r7, #10]
 800445a:	4b4a      	ldr	r3, [pc, #296]	@ (8004584 <HAL_I2C_Mem_Read+0x22c>)
 800445c:	9300      	str	r3, [sp, #0]
 800445e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004462:	68f8      	ldr	r0, [r7, #12]
 8004464:	f000 fb22 	bl	8004aac <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8004468:	697b      	ldr	r3, [r7, #20]
 800446a:	9300      	str	r3, [sp, #0]
 800446c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800446e:	2200      	movs	r2, #0
 8004470:	2104      	movs	r1, #4
 8004472:	68f8      	ldr	r0, [r7, #12]
 8004474:	f000 f956 	bl	8004724 <I2C_WaitOnFlagUntilTimeout>
 8004478:	4603      	mov	r3, r0
 800447a:	2b00      	cmp	r3, #0
 800447c:	d001      	beq.n	8004482 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800447e:	2301      	movs	r3, #1
 8004480:	e07c      	b.n	800457c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800448c:	b2d2      	uxtb	r2, r2
 800448e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004494:	1c5a      	adds	r2, r3, #1
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800449e:	3b01      	subs	r3, #1
 80044a0:	b29a      	uxth	r2, r3
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044aa:	b29b      	uxth	r3, r3
 80044ac:	3b01      	subs	r3, #1
 80044ae:	b29a      	uxth	r2, r3
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044b8:	b29b      	uxth	r3, r3
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d034      	beq.n	8004528 <HAL_I2C_Mem_Read+0x1d0>
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d130      	bne.n	8004528 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80044c6:	697b      	ldr	r3, [r7, #20]
 80044c8:	9300      	str	r3, [sp, #0]
 80044ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044cc:	2200      	movs	r2, #0
 80044ce:	2180      	movs	r1, #128	@ 0x80
 80044d0:	68f8      	ldr	r0, [r7, #12]
 80044d2:	f000 f927 	bl	8004724 <I2C_WaitOnFlagUntilTimeout>
 80044d6:	4603      	mov	r3, r0
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d001      	beq.n	80044e0 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80044dc:	2301      	movs	r3, #1
 80044de:	e04d      	b.n	800457c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044e4:	b29b      	uxth	r3, r3
 80044e6:	2bff      	cmp	r3, #255	@ 0xff
 80044e8:	d90e      	bls.n	8004508 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	2201      	movs	r2, #1
 80044ee:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80044f4:	b2da      	uxtb	r2, r3
 80044f6:	8979      	ldrh	r1, [r7, #10]
 80044f8:	2300      	movs	r3, #0
 80044fa:	9300      	str	r3, [sp, #0]
 80044fc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004500:	68f8      	ldr	r0, [r7, #12]
 8004502:	f000 fad3 	bl	8004aac <I2C_TransferConfig>
 8004506:	e00f      	b.n	8004528 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800450c:	b29a      	uxth	r2, r3
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004516:	b2da      	uxtb	r2, r3
 8004518:	8979      	ldrh	r1, [r7, #10]
 800451a:	2300      	movs	r3, #0
 800451c:	9300      	str	r3, [sp, #0]
 800451e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004522:	68f8      	ldr	r0, [r7, #12]
 8004524:	f000 fac2 	bl	8004aac <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800452c:	b29b      	uxth	r3, r3
 800452e:	2b00      	cmp	r3, #0
 8004530:	d19a      	bne.n	8004468 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004532:	697a      	ldr	r2, [r7, #20]
 8004534:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004536:	68f8      	ldr	r0, [r7, #12]
 8004538:	f000 f994 	bl	8004864 <I2C_WaitOnSTOPFlagUntilTimeout>
 800453c:	4603      	mov	r3, r0
 800453e:	2b00      	cmp	r3, #0
 8004540:	d001      	beq.n	8004546 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8004542:	2301      	movs	r3, #1
 8004544:	e01a      	b.n	800457c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	2220      	movs	r2, #32
 800454c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	6859      	ldr	r1, [r3, #4]
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	681a      	ldr	r2, [r3, #0]
 8004558:	4b0b      	ldr	r3, [pc, #44]	@ (8004588 <HAL_I2C_Mem_Read+0x230>)
 800455a:	400b      	ands	r3, r1
 800455c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	2220      	movs	r2, #32
 8004562:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	2200      	movs	r2, #0
 800456a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	2200      	movs	r2, #0
 8004572:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004576:	2300      	movs	r3, #0
 8004578:	e000      	b.n	800457c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800457a:	2302      	movs	r3, #2
  }
}
 800457c:	4618      	mov	r0, r3
 800457e:	3718      	adds	r7, #24
 8004580:	46bd      	mov	sp, r7
 8004582:	bd80      	pop	{r7, pc}
 8004584:	80002400 	.word	0x80002400
 8004588:	fe00e800 	.word	0xfe00e800

0800458c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800458c:	b580      	push	{r7, lr}
 800458e:	b086      	sub	sp, #24
 8004590:	af02      	add	r7, sp, #8
 8004592:	60f8      	str	r0, [r7, #12]
 8004594:	4608      	mov	r0, r1
 8004596:	4611      	mov	r1, r2
 8004598:	461a      	mov	r2, r3
 800459a:	4603      	mov	r3, r0
 800459c:	817b      	strh	r3, [r7, #10]
 800459e:	460b      	mov	r3, r1
 80045a0:	813b      	strh	r3, [r7, #8]
 80045a2:	4613      	mov	r3, r2
 80045a4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80045a6:	88fb      	ldrh	r3, [r7, #6]
 80045a8:	b2da      	uxtb	r2, r3
 80045aa:	8979      	ldrh	r1, [r7, #10]
 80045ac:	4b20      	ldr	r3, [pc, #128]	@ (8004630 <I2C_RequestMemoryWrite+0xa4>)
 80045ae:	9300      	str	r3, [sp, #0]
 80045b0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80045b4:	68f8      	ldr	r0, [r7, #12]
 80045b6:	f000 fa79 	bl	8004aac <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80045ba:	69fa      	ldr	r2, [r7, #28]
 80045bc:	69b9      	ldr	r1, [r7, #24]
 80045be:	68f8      	ldr	r0, [r7, #12]
 80045c0:	f000 f909 	bl	80047d6 <I2C_WaitOnTXISFlagUntilTimeout>
 80045c4:	4603      	mov	r3, r0
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d001      	beq.n	80045ce <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80045ca:	2301      	movs	r3, #1
 80045cc:	e02c      	b.n	8004628 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80045ce:	88fb      	ldrh	r3, [r7, #6]
 80045d0:	2b01      	cmp	r3, #1
 80045d2:	d105      	bne.n	80045e0 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80045d4:	893b      	ldrh	r3, [r7, #8]
 80045d6:	b2da      	uxtb	r2, r3
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	629a      	str	r2, [r3, #40]	@ 0x28
 80045de:	e015      	b.n	800460c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80045e0:	893b      	ldrh	r3, [r7, #8]
 80045e2:	0a1b      	lsrs	r3, r3, #8
 80045e4:	b29b      	uxth	r3, r3
 80045e6:	b2da      	uxtb	r2, r3
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80045ee:	69fa      	ldr	r2, [r7, #28]
 80045f0:	69b9      	ldr	r1, [r7, #24]
 80045f2:	68f8      	ldr	r0, [r7, #12]
 80045f4:	f000 f8ef 	bl	80047d6 <I2C_WaitOnTXISFlagUntilTimeout>
 80045f8:	4603      	mov	r3, r0
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d001      	beq.n	8004602 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80045fe:	2301      	movs	r3, #1
 8004600:	e012      	b.n	8004628 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004602:	893b      	ldrh	r3, [r7, #8]
 8004604:	b2da      	uxtb	r2, r3
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800460c:	69fb      	ldr	r3, [r7, #28]
 800460e:	9300      	str	r3, [sp, #0]
 8004610:	69bb      	ldr	r3, [r7, #24]
 8004612:	2200      	movs	r2, #0
 8004614:	2180      	movs	r1, #128	@ 0x80
 8004616:	68f8      	ldr	r0, [r7, #12]
 8004618:	f000 f884 	bl	8004724 <I2C_WaitOnFlagUntilTimeout>
 800461c:	4603      	mov	r3, r0
 800461e:	2b00      	cmp	r3, #0
 8004620:	d001      	beq.n	8004626 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8004622:	2301      	movs	r3, #1
 8004624:	e000      	b.n	8004628 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8004626:	2300      	movs	r3, #0
}
 8004628:	4618      	mov	r0, r3
 800462a:	3710      	adds	r7, #16
 800462c:	46bd      	mov	sp, r7
 800462e:	bd80      	pop	{r7, pc}
 8004630:	80002000 	.word	0x80002000

08004634 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8004634:	b580      	push	{r7, lr}
 8004636:	b086      	sub	sp, #24
 8004638:	af02      	add	r7, sp, #8
 800463a:	60f8      	str	r0, [r7, #12]
 800463c:	4608      	mov	r0, r1
 800463e:	4611      	mov	r1, r2
 8004640:	461a      	mov	r2, r3
 8004642:	4603      	mov	r3, r0
 8004644:	817b      	strh	r3, [r7, #10]
 8004646:	460b      	mov	r3, r1
 8004648:	813b      	strh	r3, [r7, #8]
 800464a:	4613      	mov	r3, r2
 800464c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800464e:	88fb      	ldrh	r3, [r7, #6]
 8004650:	b2da      	uxtb	r2, r3
 8004652:	8979      	ldrh	r1, [r7, #10]
 8004654:	4b20      	ldr	r3, [pc, #128]	@ (80046d8 <I2C_RequestMemoryRead+0xa4>)
 8004656:	9300      	str	r3, [sp, #0]
 8004658:	2300      	movs	r3, #0
 800465a:	68f8      	ldr	r0, [r7, #12]
 800465c:	f000 fa26 	bl	8004aac <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004660:	69fa      	ldr	r2, [r7, #28]
 8004662:	69b9      	ldr	r1, [r7, #24]
 8004664:	68f8      	ldr	r0, [r7, #12]
 8004666:	f000 f8b6 	bl	80047d6 <I2C_WaitOnTXISFlagUntilTimeout>
 800466a:	4603      	mov	r3, r0
 800466c:	2b00      	cmp	r3, #0
 800466e:	d001      	beq.n	8004674 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8004670:	2301      	movs	r3, #1
 8004672:	e02c      	b.n	80046ce <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004674:	88fb      	ldrh	r3, [r7, #6]
 8004676:	2b01      	cmp	r3, #1
 8004678:	d105      	bne.n	8004686 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800467a:	893b      	ldrh	r3, [r7, #8]
 800467c:	b2da      	uxtb	r2, r3
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	629a      	str	r2, [r3, #40]	@ 0x28
 8004684:	e015      	b.n	80046b2 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004686:	893b      	ldrh	r3, [r7, #8]
 8004688:	0a1b      	lsrs	r3, r3, #8
 800468a:	b29b      	uxth	r3, r3
 800468c:	b2da      	uxtb	r2, r3
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004694:	69fa      	ldr	r2, [r7, #28]
 8004696:	69b9      	ldr	r1, [r7, #24]
 8004698:	68f8      	ldr	r0, [r7, #12]
 800469a:	f000 f89c 	bl	80047d6 <I2C_WaitOnTXISFlagUntilTimeout>
 800469e:	4603      	mov	r3, r0
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d001      	beq.n	80046a8 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80046a4:	2301      	movs	r3, #1
 80046a6:	e012      	b.n	80046ce <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80046a8:	893b      	ldrh	r3, [r7, #8]
 80046aa:	b2da      	uxtb	r2, r3
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80046b2:	69fb      	ldr	r3, [r7, #28]
 80046b4:	9300      	str	r3, [sp, #0]
 80046b6:	69bb      	ldr	r3, [r7, #24]
 80046b8:	2200      	movs	r2, #0
 80046ba:	2140      	movs	r1, #64	@ 0x40
 80046bc:	68f8      	ldr	r0, [r7, #12]
 80046be:	f000 f831 	bl	8004724 <I2C_WaitOnFlagUntilTimeout>
 80046c2:	4603      	mov	r3, r0
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d001      	beq.n	80046cc <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80046c8:	2301      	movs	r3, #1
 80046ca:	e000      	b.n	80046ce <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80046cc:	2300      	movs	r3, #0
}
 80046ce:	4618      	mov	r0, r3
 80046d0:	3710      	adds	r7, #16
 80046d2:	46bd      	mov	sp, r7
 80046d4:	bd80      	pop	{r7, pc}
 80046d6:	bf00      	nop
 80046d8:	80002000 	.word	0x80002000

080046dc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80046dc:	b480      	push	{r7}
 80046de:	b083      	sub	sp, #12
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	699b      	ldr	r3, [r3, #24]
 80046ea:	f003 0302 	and.w	r3, r3, #2
 80046ee:	2b02      	cmp	r3, #2
 80046f0:	d103      	bne.n	80046fa <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	2200      	movs	r2, #0
 80046f8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	699b      	ldr	r3, [r3, #24]
 8004700:	f003 0301 	and.w	r3, r3, #1
 8004704:	2b01      	cmp	r3, #1
 8004706:	d007      	beq.n	8004718 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	699a      	ldr	r2, [r3, #24]
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f042 0201 	orr.w	r2, r2, #1
 8004716:	619a      	str	r2, [r3, #24]
  }
}
 8004718:	bf00      	nop
 800471a:	370c      	adds	r7, #12
 800471c:	46bd      	mov	sp, r7
 800471e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004722:	4770      	bx	lr

08004724 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004724:	b580      	push	{r7, lr}
 8004726:	b084      	sub	sp, #16
 8004728:	af00      	add	r7, sp, #0
 800472a:	60f8      	str	r0, [r7, #12]
 800472c:	60b9      	str	r1, [r7, #8]
 800472e:	603b      	str	r3, [r7, #0]
 8004730:	4613      	mov	r3, r2
 8004732:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004734:	e03b      	b.n	80047ae <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004736:	69ba      	ldr	r2, [r7, #24]
 8004738:	6839      	ldr	r1, [r7, #0]
 800473a:	68f8      	ldr	r0, [r7, #12]
 800473c:	f000 f8d6 	bl	80048ec <I2C_IsErrorOccurred>
 8004740:	4603      	mov	r3, r0
 8004742:	2b00      	cmp	r3, #0
 8004744:	d001      	beq.n	800474a <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8004746:	2301      	movs	r3, #1
 8004748:	e041      	b.n	80047ce <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004750:	d02d      	beq.n	80047ae <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004752:	f7fd fea5 	bl	80024a0 <HAL_GetTick>
 8004756:	4602      	mov	r2, r0
 8004758:	69bb      	ldr	r3, [r7, #24]
 800475a:	1ad3      	subs	r3, r2, r3
 800475c:	683a      	ldr	r2, [r7, #0]
 800475e:	429a      	cmp	r2, r3
 8004760:	d302      	bcc.n	8004768 <I2C_WaitOnFlagUntilTimeout+0x44>
 8004762:	683b      	ldr	r3, [r7, #0]
 8004764:	2b00      	cmp	r3, #0
 8004766:	d122      	bne.n	80047ae <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	699a      	ldr	r2, [r3, #24]
 800476e:	68bb      	ldr	r3, [r7, #8]
 8004770:	4013      	ands	r3, r2
 8004772:	68ba      	ldr	r2, [r7, #8]
 8004774:	429a      	cmp	r2, r3
 8004776:	bf0c      	ite	eq
 8004778:	2301      	moveq	r3, #1
 800477a:	2300      	movne	r3, #0
 800477c:	b2db      	uxtb	r3, r3
 800477e:	461a      	mov	r2, r3
 8004780:	79fb      	ldrb	r3, [r7, #7]
 8004782:	429a      	cmp	r2, r3
 8004784:	d113      	bne.n	80047ae <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800478a:	f043 0220 	orr.w	r2, r3, #32
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	2220      	movs	r2, #32
 8004796:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	2200      	movs	r2, #0
 800479e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	2200      	movs	r2, #0
 80047a6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80047aa:	2301      	movs	r3, #1
 80047ac:	e00f      	b.n	80047ce <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	699a      	ldr	r2, [r3, #24]
 80047b4:	68bb      	ldr	r3, [r7, #8]
 80047b6:	4013      	ands	r3, r2
 80047b8:	68ba      	ldr	r2, [r7, #8]
 80047ba:	429a      	cmp	r2, r3
 80047bc:	bf0c      	ite	eq
 80047be:	2301      	moveq	r3, #1
 80047c0:	2300      	movne	r3, #0
 80047c2:	b2db      	uxtb	r3, r3
 80047c4:	461a      	mov	r2, r3
 80047c6:	79fb      	ldrb	r3, [r7, #7]
 80047c8:	429a      	cmp	r2, r3
 80047ca:	d0b4      	beq.n	8004736 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80047cc:	2300      	movs	r3, #0
}
 80047ce:	4618      	mov	r0, r3
 80047d0:	3710      	adds	r7, #16
 80047d2:	46bd      	mov	sp, r7
 80047d4:	bd80      	pop	{r7, pc}

080047d6 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80047d6:	b580      	push	{r7, lr}
 80047d8:	b084      	sub	sp, #16
 80047da:	af00      	add	r7, sp, #0
 80047dc:	60f8      	str	r0, [r7, #12]
 80047de:	60b9      	str	r1, [r7, #8]
 80047e0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80047e2:	e033      	b.n	800484c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80047e4:	687a      	ldr	r2, [r7, #4]
 80047e6:	68b9      	ldr	r1, [r7, #8]
 80047e8:	68f8      	ldr	r0, [r7, #12]
 80047ea:	f000 f87f 	bl	80048ec <I2C_IsErrorOccurred>
 80047ee:	4603      	mov	r3, r0
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d001      	beq.n	80047f8 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80047f4:	2301      	movs	r3, #1
 80047f6:	e031      	b.n	800485c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047f8:	68bb      	ldr	r3, [r7, #8]
 80047fa:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80047fe:	d025      	beq.n	800484c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004800:	f7fd fe4e 	bl	80024a0 <HAL_GetTick>
 8004804:	4602      	mov	r2, r0
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	1ad3      	subs	r3, r2, r3
 800480a:	68ba      	ldr	r2, [r7, #8]
 800480c:	429a      	cmp	r2, r3
 800480e:	d302      	bcc.n	8004816 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004810:	68bb      	ldr	r3, [r7, #8]
 8004812:	2b00      	cmp	r3, #0
 8004814:	d11a      	bne.n	800484c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	699b      	ldr	r3, [r3, #24]
 800481c:	f003 0302 	and.w	r3, r3, #2
 8004820:	2b02      	cmp	r3, #2
 8004822:	d013      	beq.n	800484c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004828:	f043 0220 	orr.w	r2, r3, #32
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	2220      	movs	r2, #32
 8004834:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	2200      	movs	r2, #0
 800483c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	2200      	movs	r2, #0
 8004844:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004848:	2301      	movs	r3, #1
 800484a:	e007      	b.n	800485c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	699b      	ldr	r3, [r3, #24]
 8004852:	f003 0302 	and.w	r3, r3, #2
 8004856:	2b02      	cmp	r3, #2
 8004858:	d1c4      	bne.n	80047e4 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800485a:	2300      	movs	r3, #0
}
 800485c:	4618      	mov	r0, r3
 800485e:	3710      	adds	r7, #16
 8004860:	46bd      	mov	sp, r7
 8004862:	bd80      	pop	{r7, pc}

08004864 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004864:	b580      	push	{r7, lr}
 8004866:	b084      	sub	sp, #16
 8004868:	af00      	add	r7, sp, #0
 800486a:	60f8      	str	r0, [r7, #12]
 800486c:	60b9      	str	r1, [r7, #8]
 800486e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004870:	e02f      	b.n	80048d2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004872:	687a      	ldr	r2, [r7, #4]
 8004874:	68b9      	ldr	r1, [r7, #8]
 8004876:	68f8      	ldr	r0, [r7, #12]
 8004878:	f000 f838 	bl	80048ec <I2C_IsErrorOccurred>
 800487c:	4603      	mov	r3, r0
 800487e:	2b00      	cmp	r3, #0
 8004880:	d001      	beq.n	8004886 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004882:	2301      	movs	r3, #1
 8004884:	e02d      	b.n	80048e2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004886:	f7fd fe0b 	bl	80024a0 <HAL_GetTick>
 800488a:	4602      	mov	r2, r0
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	1ad3      	subs	r3, r2, r3
 8004890:	68ba      	ldr	r2, [r7, #8]
 8004892:	429a      	cmp	r2, r3
 8004894:	d302      	bcc.n	800489c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004896:	68bb      	ldr	r3, [r7, #8]
 8004898:	2b00      	cmp	r3, #0
 800489a:	d11a      	bne.n	80048d2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	699b      	ldr	r3, [r3, #24]
 80048a2:	f003 0320 	and.w	r3, r3, #32
 80048a6:	2b20      	cmp	r3, #32
 80048a8:	d013      	beq.n	80048d2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048ae:	f043 0220 	orr.w	r2, r3, #32
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	2220      	movs	r2, #32
 80048ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	2200      	movs	r2, #0
 80048c2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	2200      	movs	r2, #0
 80048ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80048ce:	2301      	movs	r3, #1
 80048d0:	e007      	b.n	80048e2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	699b      	ldr	r3, [r3, #24]
 80048d8:	f003 0320 	and.w	r3, r3, #32
 80048dc:	2b20      	cmp	r3, #32
 80048de:	d1c8      	bne.n	8004872 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80048e0:	2300      	movs	r3, #0
}
 80048e2:	4618      	mov	r0, r3
 80048e4:	3710      	adds	r7, #16
 80048e6:	46bd      	mov	sp, r7
 80048e8:	bd80      	pop	{r7, pc}
	...

080048ec <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80048ec:	b580      	push	{r7, lr}
 80048ee:	b08a      	sub	sp, #40	@ 0x28
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	60f8      	str	r0, [r7, #12]
 80048f4:	60b9      	str	r1, [r7, #8]
 80048f6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80048f8:	2300      	movs	r3, #0
 80048fa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	699b      	ldr	r3, [r3, #24]
 8004904:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004906:	2300      	movs	r3, #0
 8004908:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800490e:	69bb      	ldr	r3, [r7, #24]
 8004910:	f003 0310 	and.w	r3, r3, #16
 8004914:	2b00      	cmp	r3, #0
 8004916:	d068      	beq.n	80049ea <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	2210      	movs	r2, #16
 800491e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004920:	e049      	b.n	80049b6 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004922:	68bb      	ldr	r3, [r7, #8]
 8004924:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004928:	d045      	beq.n	80049b6 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800492a:	f7fd fdb9 	bl	80024a0 <HAL_GetTick>
 800492e:	4602      	mov	r2, r0
 8004930:	69fb      	ldr	r3, [r7, #28]
 8004932:	1ad3      	subs	r3, r2, r3
 8004934:	68ba      	ldr	r2, [r7, #8]
 8004936:	429a      	cmp	r2, r3
 8004938:	d302      	bcc.n	8004940 <I2C_IsErrorOccurred+0x54>
 800493a:	68bb      	ldr	r3, [r7, #8]
 800493c:	2b00      	cmp	r3, #0
 800493e:	d13a      	bne.n	80049b6 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	685b      	ldr	r3, [r3, #4]
 8004946:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800494a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004952:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	699b      	ldr	r3, [r3, #24]
 800495a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800495e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004962:	d121      	bne.n	80049a8 <I2C_IsErrorOccurred+0xbc>
 8004964:	697b      	ldr	r3, [r7, #20]
 8004966:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800496a:	d01d      	beq.n	80049a8 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800496c:	7cfb      	ldrb	r3, [r7, #19]
 800496e:	2b20      	cmp	r3, #32
 8004970:	d01a      	beq.n	80049a8 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	685a      	ldr	r2, [r3, #4]
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004980:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004982:	f7fd fd8d 	bl	80024a0 <HAL_GetTick>
 8004986:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004988:	e00e      	b.n	80049a8 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800498a:	f7fd fd89 	bl	80024a0 <HAL_GetTick>
 800498e:	4602      	mov	r2, r0
 8004990:	69fb      	ldr	r3, [r7, #28]
 8004992:	1ad3      	subs	r3, r2, r3
 8004994:	2b19      	cmp	r3, #25
 8004996:	d907      	bls.n	80049a8 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8004998:	6a3b      	ldr	r3, [r7, #32]
 800499a:	f043 0320 	orr.w	r3, r3, #32
 800499e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80049a0:	2301      	movs	r3, #1
 80049a2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80049a6:	e006      	b.n	80049b6 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	699b      	ldr	r3, [r3, #24]
 80049ae:	f003 0320 	and.w	r3, r3, #32
 80049b2:	2b20      	cmp	r3, #32
 80049b4:	d1e9      	bne.n	800498a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	699b      	ldr	r3, [r3, #24]
 80049bc:	f003 0320 	and.w	r3, r3, #32
 80049c0:	2b20      	cmp	r3, #32
 80049c2:	d003      	beq.n	80049cc <I2C_IsErrorOccurred+0xe0>
 80049c4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d0aa      	beq.n	8004922 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80049cc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d103      	bne.n	80049dc <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	2220      	movs	r2, #32
 80049da:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80049dc:	6a3b      	ldr	r3, [r7, #32]
 80049de:	f043 0304 	orr.w	r3, r3, #4
 80049e2:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80049e4:	2301      	movs	r3, #1
 80049e6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	699b      	ldr	r3, [r3, #24]
 80049f0:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80049f2:	69bb      	ldr	r3, [r7, #24]
 80049f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d00b      	beq.n	8004a14 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80049fc:	6a3b      	ldr	r3, [r7, #32]
 80049fe:	f043 0301 	orr.w	r3, r3, #1
 8004a02:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004a0c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004a0e:	2301      	movs	r3, #1
 8004a10:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004a14:	69bb      	ldr	r3, [r7, #24]
 8004a16:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d00b      	beq.n	8004a36 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004a1e:	6a3b      	ldr	r3, [r7, #32]
 8004a20:	f043 0308 	orr.w	r3, r3, #8
 8004a24:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004a2e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004a30:	2301      	movs	r3, #1
 8004a32:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004a36:	69bb      	ldr	r3, [r7, #24]
 8004a38:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d00b      	beq.n	8004a58 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004a40:	6a3b      	ldr	r3, [r7, #32]
 8004a42:	f043 0302 	orr.w	r3, r3, #2
 8004a46:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004a50:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004a52:	2301      	movs	r3, #1
 8004a54:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8004a58:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d01c      	beq.n	8004a9a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004a60:	68f8      	ldr	r0, [r7, #12]
 8004a62:	f7ff fe3b 	bl	80046dc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	6859      	ldr	r1, [r3, #4]
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	681a      	ldr	r2, [r3, #0]
 8004a70:	4b0d      	ldr	r3, [pc, #52]	@ (8004aa8 <I2C_IsErrorOccurred+0x1bc>)
 8004a72:	400b      	ands	r3, r1
 8004a74:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004a7a:	6a3b      	ldr	r3, [r7, #32]
 8004a7c:	431a      	orrs	r2, r3
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	2220      	movs	r2, #32
 8004a86:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	2200      	movs	r2, #0
 8004a96:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8004a9a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	3728      	adds	r7, #40	@ 0x28
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	bd80      	pop	{r7, pc}
 8004aa6:	bf00      	nop
 8004aa8:	fe00e800 	.word	0xfe00e800

08004aac <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004aac:	b480      	push	{r7}
 8004aae:	b087      	sub	sp, #28
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	60f8      	str	r0, [r7, #12]
 8004ab4:	607b      	str	r3, [r7, #4]
 8004ab6:	460b      	mov	r3, r1
 8004ab8:	817b      	strh	r3, [r7, #10]
 8004aba:	4613      	mov	r3, r2
 8004abc:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004abe:	897b      	ldrh	r3, [r7, #10]
 8004ac0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004ac4:	7a7b      	ldrb	r3, [r7, #9]
 8004ac6:	041b      	lsls	r3, r3, #16
 8004ac8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004acc:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004ad2:	6a3b      	ldr	r3, [r7, #32]
 8004ad4:	4313      	orrs	r3, r2
 8004ad6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004ada:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	685a      	ldr	r2, [r3, #4]
 8004ae2:	6a3b      	ldr	r3, [r7, #32]
 8004ae4:	0d5b      	lsrs	r3, r3, #21
 8004ae6:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8004aea:	4b08      	ldr	r3, [pc, #32]	@ (8004b0c <I2C_TransferConfig+0x60>)
 8004aec:	430b      	orrs	r3, r1
 8004aee:	43db      	mvns	r3, r3
 8004af0:	ea02 0103 	and.w	r1, r2, r3
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	697a      	ldr	r2, [r7, #20]
 8004afa:	430a      	orrs	r2, r1
 8004afc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004afe:	bf00      	nop
 8004b00:	371c      	adds	r7, #28
 8004b02:	46bd      	mov	sp, r7
 8004b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b08:	4770      	bx	lr
 8004b0a:	bf00      	nop
 8004b0c:	03ff63ff 	.word	0x03ff63ff

08004b10 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004b10:	b480      	push	{r7}
 8004b12:	b083      	sub	sp, #12
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
 8004b18:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004b20:	b2db      	uxtb	r3, r3
 8004b22:	2b20      	cmp	r3, #32
 8004b24:	d138      	bne.n	8004b98 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004b2c:	2b01      	cmp	r3, #1
 8004b2e:	d101      	bne.n	8004b34 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004b30:	2302      	movs	r3, #2
 8004b32:	e032      	b.n	8004b9a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2201      	movs	r2, #1
 8004b38:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2224      	movs	r2, #36	@ 0x24
 8004b40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	681a      	ldr	r2, [r3, #0]
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f022 0201 	bic.w	r2, r2, #1
 8004b52:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	681a      	ldr	r2, [r3, #0]
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004b62:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	6819      	ldr	r1, [r3, #0]
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	683a      	ldr	r2, [r7, #0]
 8004b70:	430a      	orrs	r2, r1
 8004b72:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	681a      	ldr	r2, [r3, #0]
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f042 0201 	orr.w	r2, r2, #1
 8004b82:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2220      	movs	r2, #32
 8004b88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2200      	movs	r2, #0
 8004b90:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004b94:	2300      	movs	r3, #0
 8004b96:	e000      	b.n	8004b9a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004b98:	2302      	movs	r3, #2
  }
}
 8004b9a:	4618      	mov	r0, r3
 8004b9c:	370c      	adds	r7, #12
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba4:	4770      	bx	lr

08004ba6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004ba6:	b480      	push	{r7}
 8004ba8:	b085      	sub	sp, #20
 8004baa:	af00      	add	r7, sp, #0
 8004bac:	6078      	str	r0, [r7, #4]
 8004bae:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004bb6:	b2db      	uxtb	r3, r3
 8004bb8:	2b20      	cmp	r3, #32
 8004bba:	d139      	bne.n	8004c30 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004bc2:	2b01      	cmp	r3, #1
 8004bc4:	d101      	bne.n	8004bca <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004bc6:	2302      	movs	r3, #2
 8004bc8:	e033      	b.n	8004c32 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	2201      	movs	r2, #1
 8004bce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	2224      	movs	r2, #36	@ 0x24
 8004bd6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	681a      	ldr	r2, [r3, #0]
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f022 0201 	bic.w	r2, r2, #1
 8004be8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004bf8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004bfa:	683b      	ldr	r3, [r7, #0]
 8004bfc:	021b      	lsls	r3, r3, #8
 8004bfe:	68fa      	ldr	r2, [r7, #12]
 8004c00:	4313      	orrs	r3, r2
 8004c02:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	68fa      	ldr	r2, [r7, #12]
 8004c0a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	681a      	ldr	r2, [r3, #0]
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f042 0201 	orr.w	r2, r2, #1
 8004c1a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	2220      	movs	r2, #32
 8004c20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2200      	movs	r2, #0
 8004c28:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004c2c:	2300      	movs	r3, #0
 8004c2e:	e000      	b.n	8004c32 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004c30:	2302      	movs	r3, #2
  }
}
 8004c32:	4618      	mov	r0, r3
 8004c34:	3714      	adds	r7, #20
 8004c36:	46bd      	mov	sp, r7
 8004c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3c:	4770      	bx	lr
	...

08004c40 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004c40:	b480      	push	{r7}
 8004c42:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004c44:	4b05      	ldr	r3, [pc, #20]	@ (8004c5c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	4a04      	ldr	r2, [pc, #16]	@ (8004c5c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004c4a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004c4e:	6013      	str	r3, [r2, #0]
}
 8004c50:	bf00      	nop
 8004c52:	46bd      	mov	sp, r7
 8004c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c58:	4770      	bx	lr
 8004c5a:	bf00      	nop
 8004c5c:	40007000 	.word	0x40007000

08004c60 <HAL_PWR_EnterSLEEPMode>:
  * @note  When WFI entry is used, tick interrupt have to be disabled if not desired as
  *        the interrupt wake up source.
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 8004c60:	b580      	push	{r7, lr}
 8004c62:	b082      	sub	sp, #8
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	6078      	str	r0, [r7, #4]
 8004c68:	460b      	mov	r3, r1
 8004c6a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Set Regulator parameter */
  if (Regulator == PWR_MAINREGULATOR_ON)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d10c      	bne.n	8004c8c <HAL_PWR_EnterSLEEPMode+0x2c>
  {
    /* If in low-power run mode at this point, exit it */
    if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF))
 8004c72:	4b13      	ldr	r3, [pc, #76]	@ (8004cc0 <HAL_PWR_EnterSLEEPMode+0x60>)
 8004c74:	695b      	ldr	r3, [r3, #20]
 8004c76:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004c7a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004c7e:	d10e      	bne.n	8004c9e <HAL_PWR_EnterSLEEPMode+0x3e>
    {
      if (HAL_PWREx_DisableLowPowerRunMode() != HAL_OK)
 8004c80:	f000 f896 	bl	8004db0 <HAL_PWREx_DisableLowPowerRunMode>
 8004c84:	4603      	mov	r3, r0
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d009      	beq.n	8004c9e <HAL_PWR_EnterSLEEPMode+0x3e>
      {
        return ;
 8004c8a:	e016      	b.n	8004cba <HAL_PWR_EnterSLEEPMode+0x5a>
  }
  else
  {
    /* If in run mode, first move to low-power run mode.
       The system clock frequency must be below 2 MHz at this point. */
    if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF) == RESET)
 8004c8c:	4b0c      	ldr	r3, [pc, #48]	@ (8004cc0 <HAL_PWR_EnterSLEEPMode+0x60>)
 8004c8e:	695b      	ldr	r3, [r3, #20]
 8004c90:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004c94:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004c98:	d001      	beq.n	8004c9e <HAL_PWR_EnterSLEEPMode+0x3e>
    {
      HAL_PWREx_EnableLowPowerRunMode();
 8004c9a:	f000 f879 	bl	8004d90 <HAL_PWREx_EnableLowPowerRunMode>
    }
  }

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8004c9e:	4b09      	ldr	r3, [pc, #36]	@ (8004cc4 <HAL_PWR_EnterSLEEPMode+0x64>)
 8004ca0:	691b      	ldr	r3, [r3, #16]
 8004ca2:	4a08      	ldr	r2, [pc, #32]	@ (8004cc4 <HAL_PWR_EnterSLEEPMode+0x64>)
 8004ca4:	f023 0304 	bic.w	r3, r3, #4
 8004ca8:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8004caa:	78fb      	ldrb	r3, [r7, #3]
 8004cac:	2b01      	cmp	r3, #1
 8004cae:	d101      	bne.n	8004cb4 <HAL_PWR_EnterSLEEPMode+0x54>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8004cb0:	bf30      	wfi
 8004cb2:	e002      	b.n	8004cba <HAL_PWR_EnterSLEEPMode+0x5a>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8004cb4:	bf40      	sev
    __WFE();
 8004cb6:	bf20      	wfe
    __WFE();
 8004cb8:	bf20      	wfe
  }

}
 8004cba:	3708      	adds	r7, #8
 8004cbc:	46bd      	mov	sp, r7
 8004cbe:	bd80      	pop	{r7, pc}
 8004cc0:	40007000 	.word	0x40007000
 8004cc4:	e000ed00 	.word	0xe000ed00

08004cc8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004cc8:	b480      	push	{r7}
 8004cca:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004ccc:	4b04      	ldr	r3, [pc, #16]	@ (8004ce0 <HAL_PWREx_GetVoltageRange+0x18>)
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8004cd4:	4618      	mov	r0, r3
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cdc:	4770      	bx	lr
 8004cde:	bf00      	nop
 8004ce0:	40007000 	.word	0x40007000

08004ce4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004ce4:	b480      	push	{r7}
 8004ce6:	b085      	sub	sp, #20
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004cf2:	d130      	bne.n	8004d56 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004cf4:	4b23      	ldr	r3, [pc, #140]	@ (8004d84 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004cfc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004d00:	d038      	beq.n	8004d74 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004d02:	4b20      	ldr	r3, [pc, #128]	@ (8004d84 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004d0a:	4a1e      	ldr	r2, [pc, #120]	@ (8004d84 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004d0c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004d10:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004d12:	4b1d      	ldr	r3, [pc, #116]	@ (8004d88 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	2232      	movs	r2, #50	@ 0x32
 8004d18:	fb02 f303 	mul.w	r3, r2, r3
 8004d1c:	4a1b      	ldr	r2, [pc, #108]	@ (8004d8c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004d1e:	fba2 2303 	umull	r2, r3, r2, r3
 8004d22:	0c9b      	lsrs	r3, r3, #18
 8004d24:	3301      	adds	r3, #1
 8004d26:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004d28:	e002      	b.n	8004d30 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	3b01      	subs	r3, #1
 8004d2e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004d30:	4b14      	ldr	r3, [pc, #80]	@ (8004d84 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004d32:	695b      	ldr	r3, [r3, #20]
 8004d34:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004d38:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004d3c:	d102      	bne.n	8004d44 <HAL_PWREx_ControlVoltageScaling+0x60>
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d1f2      	bne.n	8004d2a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004d44:	4b0f      	ldr	r3, [pc, #60]	@ (8004d84 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004d46:	695b      	ldr	r3, [r3, #20]
 8004d48:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004d4c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004d50:	d110      	bne.n	8004d74 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8004d52:	2303      	movs	r3, #3
 8004d54:	e00f      	b.n	8004d76 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8004d56:	4b0b      	ldr	r3, [pc, #44]	@ (8004d84 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004d5e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004d62:	d007      	beq.n	8004d74 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004d64:	4b07      	ldr	r3, [pc, #28]	@ (8004d84 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004d6c:	4a05      	ldr	r2, [pc, #20]	@ (8004d84 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004d6e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004d72:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004d74:	2300      	movs	r3, #0
}
 8004d76:	4618      	mov	r0, r3
 8004d78:	3714      	adds	r7, #20
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d80:	4770      	bx	lr
 8004d82:	bf00      	nop
 8004d84:	40007000 	.word	0x40007000
 8004d88:	20000000 	.word	0x20000000
 8004d8c:	431bde83 	.word	0x431bde83

08004d90 <HAL_PWREx_EnableLowPowerRunMode>:
  *        Setting RUN_PD in FLASH_ACR then appropriately reducing the clock frequency must
  *        be done before calling HAL_PWREx_EnableLowPowerRunMode() API.
  * @retval None
  */
void HAL_PWREx_EnableLowPowerRunMode(void)
{
 8004d90:	b480      	push	{r7}
 8004d92:	af00      	add	r7, sp, #0
  /* Set Regulator parameter */
  SET_BIT(PWR->CR1, PWR_CR1_LPR);
 8004d94:	4b05      	ldr	r3, [pc, #20]	@ (8004dac <HAL_PWREx_EnableLowPowerRunMode+0x1c>)
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	4a04      	ldr	r2, [pc, #16]	@ (8004dac <HAL_PWREx_EnableLowPowerRunMode+0x1c>)
 8004d9a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004d9e:	6013      	str	r3, [r2, #0]
}
 8004da0:	bf00      	nop
 8004da2:	46bd      	mov	sp, r7
 8004da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da8:	4770      	bx	lr
 8004daa:	bf00      	nop
 8004dac:	40007000 	.word	0x40007000

08004db0 <HAL_PWREx_DisableLowPowerRunMode>:
  *        returns HAL_TIMEOUT status). The system clock frequency can then be
  *        increased above 2 MHz.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_DisableLowPowerRunMode(void)
{
 8004db0:	b480      	push	{r7}
 8004db2:	b083      	sub	sp, #12
 8004db4:	af00      	add	r7, sp, #0
  uint32_t wait_loop_index;

  /* Clear LPR bit */
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 8004db6:	4b17      	ldr	r3, [pc, #92]	@ (8004e14 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	4a16      	ldr	r2, [pc, #88]	@ (8004e14 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 8004dbc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004dc0:	6013      	str	r3, [r2, #0]

  /* Wait until REGLPF is reset */
  wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004dc2:	4b15      	ldr	r3, [pc, #84]	@ (8004e18 <HAL_PWREx_DisableLowPowerRunMode+0x68>)
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	2232      	movs	r2, #50	@ 0x32
 8004dc8:	fb02 f303 	mul.w	r3, r2, r3
 8004dcc:	4a13      	ldr	r2, [pc, #76]	@ (8004e1c <HAL_PWREx_DisableLowPowerRunMode+0x6c>)
 8004dce:	fba2 2303 	umull	r2, r3, r2, r3
 8004dd2:	0c9b      	lsrs	r3, r3, #18
 8004dd4:	3301      	adds	r3, #1
 8004dd6:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 8004dd8:	e002      	b.n	8004de0 <HAL_PWREx_DisableLowPowerRunMode+0x30>
  {
    wait_loop_index--;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	3b01      	subs	r3, #1
 8004dde:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 8004de0:	4b0c      	ldr	r3, [pc, #48]	@ (8004e14 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 8004de2:	695b      	ldr	r3, [r3, #20]
 8004de4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004de8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004dec:	d102      	bne.n	8004df4 <HAL_PWREx_DisableLowPowerRunMode+0x44>
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d1f2      	bne.n	8004dda <HAL_PWREx_DisableLowPowerRunMode+0x2a>
  }
  if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF))
 8004df4:	4b07      	ldr	r3, [pc, #28]	@ (8004e14 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 8004df6:	695b      	ldr	r3, [r3, #20]
 8004df8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004dfc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004e00:	d101      	bne.n	8004e06 <HAL_PWREx_DisableLowPowerRunMode+0x56>
  {
    return HAL_TIMEOUT;
 8004e02:	2303      	movs	r3, #3
 8004e04:	e000      	b.n	8004e08 <HAL_PWREx_DisableLowPowerRunMode+0x58>
  }

  return HAL_OK;
 8004e06:	2300      	movs	r3, #0
}
 8004e08:	4618      	mov	r0, r3
 8004e0a:	370c      	adds	r7, #12
 8004e0c:	46bd      	mov	sp, r7
 8004e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e12:	4770      	bx	lr
 8004e14:	40007000 	.word	0x40007000
 8004e18:	20000000 	.word	0x20000000
 8004e1c:	431bde83 	.word	0x431bde83

08004e20 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004e20:	b580      	push	{r7, lr}
 8004e22:	b088      	sub	sp, #32
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d102      	bne.n	8004e34 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004e2e:	2301      	movs	r3, #1
 8004e30:	f000 bc02 	b.w	8005638 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004e34:	4b96      	ldr	r3, [pc, #600]	@ (8005090 <HAL_RCC_OscConfig+0x270>)
 8004e36:	689b      	ldr	r3, [r3, #8]
 8004e38:	f003 030c 	and.w	r3, r3, #12
 8004e3c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004e3e:	4b94      	ldr	r3, [pc, #592]	@ (8005090 <HAL_RCC_OscConfig+0x270>)
 8004e40:	68db      	ldr	r3, [r3, #12]
 8004e42:	f003 0303 	and.w	r3, r3, #3
 8004e46:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f003 0310 	and.w	r3, r3, #16
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	f000 80e4 	beq.w	800501e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004e56:	69bb      	ldr	r3, [r7, #24]
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d007      	beq.n	8004e6c <HAL_RCC_OscConfig+0x4c>
 8004e5c:	69bb      	ldr	r3, [r7, #24]
 8004e5e:	2b0c      	cmp	r3, #12
 8004e60:	f040 808b 	bne.w	8004f7a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004e64:	697b      	ldr	r3, [r7, #20]
 8004e66:	2b01      	cmp	r3, #1
 8004e68:	f040 8087 	bne.w	8004f7a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004e6c:	4b88      	ldr	r3, [pc, #544]	@ (8005090 <HAL_RCC_OscConfig+0x270>)
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f003 0302 	and.w	r3, r3, #2
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d005      	beq.n	8004e84 <HAL_RCC_OscConfig+0x64>
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	699b      	ldr	r3, [r3, #24]
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d101      	bne.n	8004e84 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8004e80:	2301      	movs	r3, #1
 8004e82:	e3d9      	b.n	8005638 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	6a1a      	ldr	r2, [r3, #32]
 8004e88:	4b81      	ldr	r3, [pc, #516]	@ (8005090 <HAL_RCC_OscConfig+0x270>)
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f003 0308 	and.w	r3, r3, #8
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d004      	beq.n	8004e9e <HAL_RCC_OscConfig+0x7e>
 8004e94:	4b7e      	ldr	r3, [pc, #504]	@ (8005090 <HAL_RCC_OscConfig+0x270>)
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004e9c:	e005      	b.n	8004eaa <HAL_RCC_OscConfig+0x8a>
 8004e9e:	4b7c      	ldr	r3, [pc, #496]	@ (8005090 <HAL_RCC_OscConfig+0x270>)
 8004ea0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004ea4:	091b      	lsrs	r3, r3, #4
 8004ea6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004eaa:	4293      	cmp	r3, r2
 8004eac:	d223      	bcs.n	8004ef6 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	6a1b      	ldr	r3, [r3, #32]
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	f000 fd8c 	bl	80059d0 <RCC_SetFlashLatencyFromMSIRange>
 8004eb8:	4603      	mov	r3, r0
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d001      	beq.n	8004ec2 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8004ebe:	2301      	movs	r3, #1
 8004ec0:	e3ba      	b.n	8005638 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004ec2:	4b73      	ldr	r3, [pc, #460]	@ (8005090 <HAL_RCC_OscConfig+0x270>)
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	4a72      	ldr	r2, [pc, #456]	@ (8005090 <HAL_RCC_OscConfig+0x270>)
 8004ec8:	f043 0308 	orr.w	r3, r3, #8
 8004ecc:	6013      	str	r3, [r2, #0]
 8004ece:	4b70      	ldr	r3, [pc, #448]	@ (8005090 <HAL_RCC_OscConfig+0x270>)
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	6a1b      	ldr	r3, [r3, #32]
 8004eda:	496d      	ldr	r1, [pc, #436]	@ (8005090 <HAL_RCC_OscConfig+0x270>)
 8004edc:	4313      	orrs	r3, r2
 8004ede:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004ee0:	4b6b      	ldr	r3, [pc, #428]	@ (8005090 <HAL_RCC_OscConfig+0x270>)
 8004ee2:	685b      	ldr	r3, [r3, #4]
 8004ee4:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	69db      	ldr	r3, [r3, #28]
 8004eec:	021b      	lsls	r3, r3, #8
 8004eee:	4968      	ldr	r1, [pc, #416]	@ (8005090 <HAL_RCC_OscConfig+0x270>)
 8004ef0:	4313      	orrs	r3, r2
 8004ef2:	604b      	str	r3, [r1, #4]
 8004ef4:	e025      	b.n	8004f42 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004ef6:	4b66      	ldr	r3, [pc, #408]	@ (8005090 <HAL_RCC_OscConfig+0x270>)
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	4a65      	ldr	r2, [pc, #404]	@ (8005090 <HAL_RCC_OscConfig+0x270>)
 8004efc:	f043 0308 	orr.w	r3, r3, #8
 8004f00:	6013      	str	r3, [r2, #0]
 8004f02:	4b63      	ldr	r3, [pc, #396]	@ (8005090 <HAL_RCC_OscConfig+0x270>)
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6a1b      	ldr	r3, [r3, #32]
 8004f0e:	4960      	ldr	r1, [pc, #384]	@ (8005090 <HAL_RCC_OscConfig+0x270>)
 8004f10:	4313      	orrs	r3, r2
 8004f12:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004f14:	4b5e      	ldr	r3, [pc, #376]	@ (8005090 <HAL_RCC_OscConfig+0x270>)
 8004f16:	685b      	ldr	r3, [r3, #4]
 8004f18:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	69db      	ldr	r3, [r3, #28]
 8004f20:	021b      	lsls	r3, r3, #8
 8004f22:	495b      	ldr	r1, [pc, #364]	@ (8005090 <HAL_RCC_OscConfig+0x270>)
 8004f24:	4313      	orrs	r3, r2
 8004f26:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004f28:	69bb      	ldr	r3, [r7, #24]
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d109      	bne.n	8004f42 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	6a1b      	ldr	r3, [r3, #32]
 8004f32:	4618      	mov	r0, r3
 8004f34:	f000 fd4c 	bl	80059d0 <RCC_SetFlashLatencyFromMSIRange>
 8004f38:	4603      	mov	r3, r0
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d001      	beq.n	8004f42 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8004f3e:	2301      	movs	r3, #1
 8004f40:	e37a      	b.n	8005638 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004f42:	f000 fc81 	bl	8005848 <HAL_RCC_GetSysClockFreq>
 8004f46:	4602      	mov	r2, r0
 8004f48:	4b51      	ldr	r3, [pc, #324]	@ (8005090 <HAL_RCC_OscConfig+0x270>)
 8004f4a:	689b      	ldr	r3, [r3, #8]
 8004f4c:	091b      	lsrs	r3, r3, #4
 8004f4e:	f003 030f 	and.w	r3, r3, #15
 8004f52:	4950      	ldr	r1, [pc, #320]	@ (8005094 <HAL_RCC_OscConfig+0x274>)
 8004f54:	5ccb      	ldrb	r3, [r1, r3]
 8004f56:	f003 031f 	and.w	r3, r3, #31
 8004f5a:	fa22 f303 	lsr.w	r3, r2, r3
 8004f5e:	4a4e      	ldr	r2, [pc, #312]	@ (8005098 <HAL_RCC_OscConfig+0x278>)
 8004f60:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004f62:	4b4e      	ldr	r3, [pc, #312]	@ (800509c <HAL_RCC_OscConfig+0x27c>)
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	4618      	mov	r0, r3
 8004f68:	f7fd fa4a 	bl	8002400 <HAL_InitTick>
 8004f6c:	4603      	mov	r3, r0
 8004f6e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004f70:	7bfb      	ldrb	r3, [r7, #15]
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d052      	beq.n	800501c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8004f76:	7bfb      	ldrb	r3, [r7, #15]
 8004f78:	e35e      	b.n	8005638 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	699b      	ldr	r3, [r3, #24]
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d032      	beq.n	8004fe8 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004f82:	4b43      	ldr	r3, [pc, #268]	@ (8005090 <HAL_RCC_OscConfig+0x270>)
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	4a42      	ldr	r2, [pc, #264]	@ (8005090 <HAL_RCC_OscConfig+0x270>)
 8004f88:	f043 0301 	orr.w	r3, r3, #1
 8004f8c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004f8e:	f7fd fa87 	bl	80024a0 <HAL_GetTick>
 8004f92:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004f94:	e008      	b.n	8004fa8 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004f96:	f7fd fa83 	bl	80024a0 <HAL_GetTick>
 8004f9a:	4602      	mov	r2, r0
 8004f9c:	693b      	ldr	r3, [r7, #16]
 8004f9e:	1ad3      	subs	r3, r2, r3
 8004fa0:	2b02      	cmp	r3, #2
 8004fa2:	d901      	bls.n	8004fa8 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8004fa4:	2303      	movs	r3, #3
 8004fa6:	e347      	b.n	8005638 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004fa8:	4b39      	ldr	r3, [pc, #228]	@ (8005090 <HAL_RCC_OscConfig+0x270>)
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f003 0302 	and.w	r3, r3, #2
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d0f0      	beq.n	8004f96 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004fb4:	4b36      	ldr	r3, [pc, #216]	@ (8005090 <HAL_RCC_OscConfig+0x270>)
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	4a35      	ldr	r2, [pc, #212]	@ (8005090 <HAL_RCC_OscConfig+0x270>)
 8004fba:	f043 0308 	orr.w	r3, r3, #8
 8004fbe:	6013      	str	r3, [r2, #0]
 8004fc0:	4b33      	ldr	r3, [pc, #204]	@ (8005090 <HAL_RCC_OscConfig+0x270>)
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	6a1b      	ldr	r3, [r3, #32]
 8004fcc:	4930      	ldr	r1, [pc, #192]	@ (8005090 <HAL_RCC_OscConfig+0x270>)
 8004fce:	4313      	orrs	r3, r2
 8004fd0:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004fd2:	4b2f      	ldr	r3, [pc, #188]	@ (8005090 <HAL_RCC_OscConfig+0x270>)
 8004fd4:	685b      	ldr	r3, [r3, #4]
 8004fd6:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	69db      	ldr	r3, [r3, #28]
 8004fde:	021b      	lsls	r3, r3, #8
 8004fe0:	492b      	ldr	r1, [pc, #172]	@ (8005090 <HAL_RCC_OscConfig+0x270>)
 8004fe2:	4313      	orrs	r3, r2
 8004fe4:	604b      	str	r3, [r1, #4]
 8004fe6:	e01a      	b.n	800501e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004fe8:	4b29      	ldr	r3, [pc, #164]	@ (8005090 <HAL_RCC_OscConfig+0x270>)
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	4a28      	ldr	r2, [pc, #160]	@ (8005090 <HAL_RCC_OscConfig+0x270>)
 8004fee:	f023 0301 	bic.w	r3, r3, #1
 8004ff2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004ff4:	f7fd fa54 	bl	80024a0 <HAL_GetTick>
 8004ff8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004ffa:	e008      	b.n	800500e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004ffc:	f7fd fa50 	bl	80024a0 <HAL_GetTick>
 8005000:	4602      	mov	r2, r0
 8005002:	693b      	ldr	r3, [r7, #16]
 8005004:	1ad3      	subs	r3, r2, r3
 8005006:	2b02      	cmp	r3, #2
 8005008:	d901      	bls.n	800500e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800500a:	2303      	movs	r3, #3
 800500c:	e314      	b.n	8005638 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800500e:	4b20      	ldr	r3, [pc, #128]	@ (8005090 <HAL_RCC_OscConfig+0x270>)
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f003 0302 	and.w	r3, r3, #2
 8005016:	2b00      	cmp	r3, #0
 8005018:	d1f0      	bne.n	8004ffc <HAL_RCC_OscConfig+0x1dc>
 800501a:	e000      	b.n	800501e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800501c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f003 0301 	and.w	r3, r3, #1
 8005026:	2b00      	cmp	r3, #0
 8005028:	d073      	beq.n	8005112 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800502a:	69bb      	ldr	r3, [r7, #24]
 800502c:	2b08      	cmp	r3, #8
 800502e:	d005      	beq.n	800503c <HAL_RCC_OscConfig+0x21c>
 8005030:	69bb      	ldr	r3, [r7, #24]
 8005032:	2b0c      	cmp	r3, #12
 8005034:	d10e      	bne.n	8005054 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005036:	697b      	ldr	r3, [r7, #20]
 8005038:	2b03      	cmp	r3, #3
 800503a:	d10b      	bne.n	8005054 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800503c:	4b14      	ldr	r3, [pc, #80]	@ (8005090 <HAL_RCC_OscConfig+0x270>)
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005044:	2b00      	cmp	r3, #0
 8005046:	d063      	beq.n	8005110 <HAL_RCC_OscConfig+0x2f0>
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	685b      	ldr	r3, [r3, #4]
 800504c:	2b00      	cmp	r3, #0
 800504e:	d15f      	bne.n	8005110 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8005050:	2301      	movs	r3, #1
 8005052:	e2f1      	b.n	8005638 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	685b      	ldr	r3, [r3, #4]
 8005058:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800505c:	d106      	bne.n	800506c <HAL_RCC_OscConfig+0x24c>
 800505e:	4b0c      	ldr	r3, [pc, #48]	@ (8005090 <HAL_RCC_OscConfig+0x270>)
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	4a0b      	ldr	r2, [pc, #44]	@ (8005090 <HAL_RCC_OscConfig+0x270>)
 8005064:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005068:	6013      	str	r3, [r2, #0]
 800506a:	e025      	b.n	80050b8 <HAL_RCC_OscConfig+0x298>
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	685b      	ldr	r3, [r3, #4]
 8005070:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005074:	d114      	bne.n	80050a0 <HAL_RCC_OscConfig+0x280>
 8005076:	4b06      	ldr	r3, [pc, #24]	@ (8005090 <HAL_RCC_OscConfig+0x270>)
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	4a05      	ldr	r2, [pc, #20]	@ (8005090 <HAL_RCC_OscConfig+0x270>)
 800507c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005080:	6013      	str	r3, [r2, #0]
 8005082:	4b03      	ldr	r3, [pc, #12]	@ (8005090 <HAL_RCC_OscConfig+0x270>)
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	4a02      	ldr	r2, [pc, #8]	@ (8005090 <HAL_RCC_OscConfig+0x270>)
 8005088:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800508c:	6013      	str	r3, [r2, #0]
 800508e:	e013      	b.n	80050b8 <HAL_RCC_OscConfig+0x298>
 8005090:	40021000 	.word	0x40021000
 8005094:	080078c8 	.word	0x080078c8
 8005098:	20000000 	.word	0x20000000
 800509c:	20000004 	.word	0x20000004
 80050a0:	4ba0      	ldr	r3, [pc, #640]	@ (8005324 <HAL_RCC_OscConfig+0x504>)
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	4a9f      	ldr	r2, [pc, #636]	@ (8005324 <HAL_RCC_OscConfig+0x504>)
 80050a6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80050aa:	6013      	str	r3, [r2, #0]
 80050ac:	4b9d      	ldr	r3, [pc, #628]	@ (8005324 <HAL_RCC_OscConfig+0x504>)
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	4a9c      	ldr	r2, [pc, #624]	@ (8005324 <HAL_RCC_OscConfig+0x504>)
 80050b2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80050b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	685b      	ldr	r3, [r3, #4]
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d013      	beq.n	80050e8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050c0:	f7fd f9ee 	bl	80024a0 <HAL_GetTick>
 80050c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80050c6:	e008      	b.n	80050da <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80050c8:	f7fd f9ea 	bl	80024a0 <HAL_GetTick>
 80050cc:	4602      	mov	r2, r0
 80050ce:	693b      	ldr	r3, [r7, #16]
 80050d0:	1ad3      	subs	r3, r2, r3
 80050d2:	2b64      	cmp	r3, #100	@ 0x64
 80050d4:	d901      	bls.n	80050da <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80050d6:	2303      	movs	r3, #3
 80050d8:	e2ae      	b.n	8005638 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80050da:	4b92      	ldr	r3, [pc, #584]	@ (8005324 <HAL_RCC_OscConfig+0x504>)
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d0f0      	beq.n	80050c8 <HAL_RCC_OscConfig+0x2a8>
 80050e6:	e014      	b.n	8005112 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050e8:	f7fd f9da 	bl	80024a0 <HAL_GetTick>
 80050ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80050ee:	e008      	b.n	8005102 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80050f0:	f7fd f9d6 	bl	80024a0 <HAL_GetTick>
 80050f4:	4602      	mov	r2, r0
 80050f6:	693b      	ldr	r3, [r7, #16]
 80050f8:	1ad3      	subs	r3, r2, r3
 80050fa:	2b64      	cmp	r3, #100	@ 0x64
 80050fc:	d901      	bls.n	8005102 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80050fe:	2303      	movs	r3, #3
 8005100:	e29a      	b.n	8005638 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005102:	4b88      	ldr	r3, [pc, #544]	@ (8005324 <HAL_RCC_OscConfig+0x504>)
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800510a:	2b00      	cmp	r3, #0
 800510c:	d1f0      	bne.n	80050f0 <HAL_RCC_OscConfig+0x2d0>
 800510e:	e000      	b.n	8005112 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005110:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f003 0302 	and.w	r3, r3, #2
 800511a:	2b00      	cmp	r3, #0
 800511c:	d060      	beq.n	80051e0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800511e:	69bb      	ldr	r3, [r7, #24]
 8005120:	2b04      	cmp	r3, #4
 8005122:	d005      	beq.n	8005130 <HAL_RCC_OscConfig+0x310>
 8005124:	69bb      	ldr	r3, [r7, #24]
 8005126:	2b0c      	cmp	r3, #12
 8005128:	d119      	bne.n	800515e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800512a:	697b      	ldr	r3, [r7, #20]
 800512c:	2b02      	cmp	r3, #2
 800512e:	d116      	bne.n	800515e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005130:	4b7c      	ldr	r3, [pc, #496]	@ (8005324 <HAL_RCC_OscConfig+0x504>)
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005138:	2b00      	cmp	r3, #0
 800513a:	d005      	beq.n	8005148 <HAL_RCC_OscConfig+0x328>
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	68db      	ldr	r3, [r3, #12]
 8005140:	2b00      	cmp	r3, #0
 8005142:	d101      	bne.n	8005148 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8005144:	2301      	movs	r3, #1
 8005146:	e277      	b.n	8005638 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005148:	4b76      	ldr	r3, [pc, #472]	@ (8005324 <HAL_RCC_OscConfig+0x504>)
 800514a:	685b      	ldr	r3, [r3, #4]
 800514c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	691b      	ldr	r3, [r3, #16]
 8005154:	061b      	lsls	r3, r3, #24
 8005156:	4973      	ldr	r1, [pc, #460]	@ (8005324 <HAL_RCC_OscConfig+0x504>)
 8005158:	4313      	orrs	r3, r2
 800515a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800515c:	e040      	b.n	80051e0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	68db      	ldr	r3, [r3, #12]
 8005162:	2b00      	cmp	r3, #0
 8005164:	d023      	beq.n	80051ae <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005166:	4b6f      	ldr	r3, [pc, #444]	@ (8005324 <HAL_RCC_OscConfig+0x504>)
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	4a6e      	ldr	r2, [pc, #440]	@ (8005324 <HAL_RCC_OscConfig+0x504>)
 800516c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005170:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005172:	f7fd f995 	bl	80024a0 <HAL_GetTick>
 8005176:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005178:	e008      	b.n	800518c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800517a:	f7fd f991 	bl	80024a0 <HAL_GetTick>
 800517e:	4602      	mov	r2, r0
 8005180:	693b      	ldr	r3, [r7, #16]
 8005182:	1ad3      	subs	r3, r2, r3
 8005184:	2b02      	cmp	r3, #2
 8005186:	d901      	bls.n	800518c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8005188:	2303      	movs	r3, #3
 800518a:	e255      	b.n	8005638 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800518c:	4b65      	ldr	r3, [pc, #404]	@ (8005324 <HAL_RCC_OscConfig+0x504>)
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005194:	2b00      	cmp	r3, #0
 8005196:	d0f0      	beq.n	800517a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005198:	4b62      	ldr	r3, [pc, #392]	@ (8005324 <HAL_RCC_OscConfig+0x504>)
 800519a:	685b      	ldr	r3, [r3, #4]
 800519c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	691b      	ldr	r3, [r3, #16]
 80051a4:	061b      	lsls	r3, r3, #24
 80051a6:	495f      	ldr	r1, [pc, #380]	@ (8005324 <HAL_RCC_OscConfig+0x504>)
 80051a8:	4313      	orrs	r3, r2
 80051aa:	604b      	str	r3, [r1, #4]
 80051ac:	e018      	b.n	80051e0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80051ae:	4b5d      	ldr	r3, [pc, #372]	@ (8005324 <HAL_RCC_OscConfig+0x504>)
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	4a5c      	ldr	r2, [pc, #368]	@ (8005324 <HAL_RCC_OscConfig+0x504>)
 80051b4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80051b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051ba:	f7fd f971 	bl	80024a0 <HAL_GetTick>
 80051be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80051c0:	e008      	b.n	80051d4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80051c2:	f7fd f96d 	bl	80024a0 <HAL_GetTick>
 80051c6:	4602      	mov	r2, r0
 80051c8:	693b      	ldr	r3, [r7, #16]
 80051ca:	1ad3      	subs	r3, r2, r3
 80051cc:	2b02      	cmp	r3, #2
 80051ce:	d901      	bls.n	80051d4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80051d0:	2303      	movs	r3, #3
 80051d2:	e231      	b.n	8005638 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80051d4:	4b53      	ldr	r3, [pc, #332]	@ (8005324 <HAL_RCC_OscConfig+0x504>)
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d1f0      	bne.n	80051c2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f003 0308 	and.w	r3, r3, #8
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d03c      	beq.n	8005266 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	695b      	ldr	r3, [r3, #20]
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d01c      	beq.n	800522e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80051f4:	4b4b      	ldr	r3, [pc, #300]	@ (8005324 <HAL_RCC_OscConfig+0x504>)
 80051f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80051fa:	4a4a      	ldr	r2, [pc, #296]	@ (8005324 <HAL_RCC_OscConfig+0x504>)
 80051fc:	f043 0301 	orr.w	r3, r3, #1
 8005200:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005204:	f7fd f94c 	bl	80024a0 <HAL_GetTick>
 8005208:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800520a:	e008      	b.n	800521e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800520c:	f7fd f948 	bl	80024a0 <HAL_GetTick>
 8005210:	4602      	mov	r2, r0
 8005212:	693b      	ldr	r3, [r7, #16]
 8005214:	1ad3      	subs	r3, r2, r3
 8005216:	2b02      	cmp	r3, #2
 8005218:	d901      	bls.n	800521e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800521a:	2303      	movs	r3, #3
 800521c:	e20c      	b.n	8005638 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800521e:	4b41      	ldr	r3, [pc, #260]	@ (8005324 <HAL_RCC_OscConfig+0x504>)
 8005220:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005224:	f003 0302 	and.w	r3, r3, #2
 8005228:	2b00      	cmp	r3, #0
 800522a:	d0ef      	beq.n	800520c <HAL_RCC_OscConfig+0x3ec>
 800522c:	e01b      	b.n	8005266 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800522e:	4b3d      	ldr	r3, [pc, #244]	@ (8005324 <HAL_RCC_OscConfig+0x504>)
 8005230:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005234:	4a3b      	ldr	r2, [pc, #236]	@ (8005324 <HAL_RCC_OscConfig+0x504>)
 8005236:	f023 0301 	bic.w	r3, r3, #1
 800523a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800523e:	f7fd f92f 	bl	80024a0 <HAL_GetTick>
 8005242:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005244:	e008      	b.n	8005258 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005246:	f7fd f92b 	bl	80024a0 <HAL_GetTick>
 800524a:	4602      	mov	r2, r0
 800524c:	693b      	ldr	r3, [r7, #16]
 800524e:	1ad3      	subs	r3, r2, r3
 8005250:	2b02      	cmp	r3, #2
 8005252:	d901      	bls.n	8005258 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8005254:	2303      	movs	r3, #3
 8005256:	e1ef      	b.n	8005638 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005258:	4b32      	ldr	r3, [pc, #200]	@ (8005324 <HAL_RCC_OscConfig+0x504>)
 800525a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800525e:	f003 0302 	and.w	r3, r3, #2
 8005262:	2b00      	cmp	r3, #0
 8005264:	d1ef      	bne.n	8005246 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f003 0304 	and.w	r3, r3, #4
 800526e:	2b00      	cmp	r3, #0
 8005270:	f000 80a6 	beq.w	80053c0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005274:	2300      	movs	r3, #0
 8005276:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8005278:	4b2a      	ldr	r3, [pc, #168]	@ (8005324 <HAL_RCC_OscConfig+0x504>)
 800527a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800527c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005280:	2b00      	cmp	r3, #0
 8005282:	d10d      	bne.n	80052a0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005284:	4b27      	ldr	r3, [pc, #156]	@ (8005324 <HAL_RCC_OscConfig+0x504>)
 8005286:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005288:	4a26      	ldr	r2, [pc, #152]	@ (8005324 <HAL_RCC_OscConfig+0x504>)
 800528a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800528e:	6593      	str	r3, [r2, #88]	@ 0x58
 8005290:	4b24      	ldr	r3, [pc, #144]	@ (8005324 <HAL_RCC_OscConfig+0x504>)
 8005292:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005294:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005298:	60bb      	str	r3, [r7, #8]
 800529a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800529c:	2301      	movs	r3, #1
 800529e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80052a0:	4b21      	ldr	r3, [pc, #132]	@ (8005328 <HAL_RCC_OscConfig+0x508>)
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d118      	bne.n	80052de <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80052ac:	4b1e      	ldr	r3, [pc, #120]	@ (8005328 <HAL_RCC_OscConfig+0x508>)
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	4a1d      	ldr	r2, [pc, #116]	@ (8005328 <HAL_RCC_OscConfig+0x508>)
 80052b2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80052b6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80052b8:	f7fd f8f2 	bl	80024a0 <HAL_GetTick>
 80052bc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80052be:	e008      	b.n	80052d2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80052c0:	f7fd f8ee 	bl	80024a0 <HAL_GetTick>
 80052c4:	4602      	mov	r2, r0
 80052c6:	693b      	ldr	r3, [r7, #16]
 80052c8:	1ad3      	subs	r3, r2, r3
 80052ca:	2b02      	cmp	r3, #2
 80052cc:	d901      	bls.n	80052d2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80052ce:	2303      	movs	r3, #3
 80052d0:	e1b2      	b.n	8005638 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80052d2:	4b15      	ldr	r3, [pc, #84]	@ (8005328 <HAL_RCC_OscConfig+0x508>)
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d0f0      	beq.n	80052c0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	689b      	ldr	r3, [r3, #8]
 80052e2:	2b01      	cmp	r3, #1
 80052e4:	d108      	bne.n	80052f8 <HAL_RCC_OscConfig+0x4d8>
 80052e6:	4b0f      	ldr	r3, [pc, #60]	@ (8005324 <HAL_RCC_OscConfig+0x504>)
 80052e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80052ec:	4a0d      	ldr	r2, [pc, #52]	@ (8005324 <HAL_RCC_OscConfig+0x504>)
 80052ee:	f043 0301 	orr.w	r3, r3, #1
 80052f2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80052f6:	e029      	b.n	800534c <HAL_RCC_OscConfig+0x52c>
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	689b      	ldr	r3, [r3, #8]
 80052fc:	2b05      	cmp	r3, #5
 80052fe:	d115      	bne.n	800532c <HAL_RCC_OscConfig+0x50c>
 8005300:	4b08      	ldr	r3, [pc, #32]	@ (8005324 <HAL_RCC_OscConfig+0x504>)
 8005302:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005306:	4a07      	ldr	r2, [pc, #28]	@ (8005324 <HAL_RCC_OscConfig+0x504>)
 8005308:	f043 0304 	orr.w	r3, r3, #4
 800530c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005310:	4b04      	ldr	r3, [pc, #16]	@ (8005324 <HAL_RCC_OscConfig+0x504>)
 8005312:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005316:	4a03      	ldr	r2, [pc, #12]	@ (8005324 <HAL_RCC_OscConfig+0x504>)
 8005318:	f043 0301 	orr.w	r3, r3, #1
 800531c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005320:	e014      	b.n	800534c <HAL_RCC_OscConfig+0x52c>
 8005322:	bf00      	nop
 8005324:	40021000 	.word	0x40021000
 8005328:	40007000 	.word	0x40007000
 800532c:	4b9a      	ldr	r3, [pc, #616]	@ (8005598 <HAL_RCC_OscConfig+0x778>)
 800532e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005332:	4a99      	ldr	r2, [pc, #612]	@ (8005598 <HAL_RCC_OscConfig+0x778>)
 8005334:	f023 0301 	bic.w	r3, r3, #1
 8005338:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800533c:	4b96      	ldr	r3, [pc, #600]	@ (8005598 <HAL_RCC_OscConfig+0x778>)
 800533e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005342:	4a95      	ldr	r2, [pc, #596]	@ (8005598 <HAL_RCC_OscConfig+0x778>)
 8005344:	f023 0304 	bic.w	r3, r3, #4
 8005348:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	689b      	ldr	r3, [r3, #8]
 8005350:	2b00      	cmp	r3, #0
 8005352:	d016      	beq.n	8005382 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005354:	f7fd f8a4 	bl	80024a0 <HAL_GetTick>
 8005358:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800535a:	e00a      	b.n	8005372 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800535c:	f7fd f8a0 	bl	80024a0 <HAL_GetTick>
 8005360:	4602      	mov	r2, r0
 8005362:	693b      	ldr	r3, [r7, #16]
 8005364:	1ad3      	subs	r3, r2, r3
 8005366:	f241 3288 	movw	r2, #5000	@ 0x1388
 800536a:	4293      	cmp	r3, r2
 800536c:	d901      	bls.n	8005372 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800536e:	2303      	movs	r3, #3
 8005370:	e162      	b.n	8005638 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005372:	4b89      	ldr	r3, [pc, #548]	@ (8005598 <HAL_RCC_OscConfig+0x778>)
 8005374:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005378:	f003 0302 	and.w	r3, r3, #2
 800537c:	2b00      	cmp	r3, #0
 800537e:	d0ed      	beq.n	800535c <HAL_RCC_OscConfig+0x53c>
 8005380:	e015      	b.n	80053ae <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005382:	f7fd f88d 	bl	80024a0 <HAL_GetTick>
 8005386:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005388:	e00a      	b.n	80053a0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800538a:	f7fd f889 	bl	80024a0 <HAL_GetTick>
 800538e:	4602      	mov	r2, r0
 8005390:	693b      	ldr	r3, [r7, #16]
 8005392:	1ad3      	subs	r3, r2, r3
 8005394:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005398:	4293      	cmp	r3, r2
 800539a:	d901      	bls.n	80053a0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800539c:	2303      	movs	r3, #3
 800539e:	e14b      	b.n	8005638 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80053a0:	4b7d      	ldr	r3, [pc, #500]	@ (8005598 <HAL_RCC_OscConfig+0x778>)
 80053a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80053a6:	f003 0302 	and.w	r3, r3, #2
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d1ed      	bne.n	800538a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80053ae:	7ffb      	ldrb	r3, [r7, #31]
 80053b0:	2b01      	cmp	r3, #1
 80053b2:	d105      	bne.n	80053c0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80053b4:	4b78      	ldr	r3, [pc, #480]	@ (8005598 <HAL_RCC_OscConfig+0x778>)
 80053b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80053b8:	4a77      	ldr	r2, [pc, #476]	@ (8005598 <HAL_RCC_OscConfig+0x778>)
 80053ba:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80053be:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f003 0320 	and.w	r3, r3, #32
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d03c      	beq.n	8005446 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d01c      	beq.n	800540e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80053d4:	4b70      	ldr	r3, [pc, #448]	@ (8005598 <HAL_RCC_OscConfig+0x778>)
 80053d6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80053da:	4a6f      	ldr	r2, [pc, #444]	@ (8005598 <HAL_RCC_OscConfig+0x778>)
 80053dc:	f043 0301 	orr.w	r3, r3, #1
 80053e0:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053e4:	f7fd f85c 	bl	80024a0 <HAL_GetTick>
 80053e8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80053ea:	e008      	b.n	80053fe <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80053ec:	f7fd f858 	bl	80024a0 <HAL_GetTick>
 80053f0:	4602      	mov	r2, r0
 80053f2:	693b      	ldr	r3, [r7, #16]
 80053f4:	1ad3      	subs	r3, r2, r3
 80053f6:	2b02      	cmp	r3, #2
 80053f8:	d901      	bls.n	80053fe <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80053fa:	2303      	movs	r3, #3
 80053fc:	e11c      	b.n	8005638 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80053fe:	4b66      	ldr	r3, [pc, #408]	@ (8005598 <HAL_RCC_OscConfig+0x778>)
 8005400:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005404:	f003 0302 	and.w	r3, r3, #2
 8005408:	2b00      	cmp	r3, #0
 800540a:	d0ef      	beq.n	80053ec <HAL_RCC_OscConfig+0x5cc>
 800540c:	e01b      	b.n	8005446 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800540e:	4b62      	ldr	r3, [pc, #392]	@ (8005598 <HAL_RCC_OscConfig+0x778>)
 8005410:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005414:	4a60      	ldr	r2, [pc, #384]	@ (8005598 <HAL_RCC_OscConfig+0x778>)
 8005416:	f023 0301 	bic.w	r3, r3, #1
 800541a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800541e:	f7fd f83f 	bl	80024a0 <HAL_GetTick>
 8005422:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005424:	e008      	b.n	8005438 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005426:	f7fd f83b 	bl	80024a0 <HAL_GetTick>
 800542a:	4602      	mov	r2, r0
 800542c:	693b      	ldr	r3, [r7, #16]
 800542e:	1ad3      	subs	r3, r2, r3
 8005430:	2b02      	cmp	r3, #2
 8005432:	d901      	bls.n	8005438 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8005434:	2303      	movs	r3, #3
 8005436:	e0ff      	b.n	8005638 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005438:	4b57      	ldr	r3, [pc, #348]	@ (8005598 <HAL_RCC_OscConfig+0x778>)
 800543a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800543e:	f003 0302 	and.w	r3, r3, #2
 8005442:	2b00      	cmp	r3, #0
 8005444:	d1ef      	bne.n	8005426 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800544a:	2b00      	cmp	r3, #0
 800544c:	f000 80f3 	beq.w	8005636 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005454:	2b02      	cmp	r3, #2
 8005456:	f040 80c9 	bne.w	80055ec <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800545a:	4b4f      	ldr	r3, [pc, #316]	@ (8005598 <HAL_RCC_OscConfig+0x778>)
 800545c:	68db      	ldr	r3, [r3, #12]
 800545e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005460:	697b      	ldr	r3, [r7, #20]
 8005462:	f003 0203 	and.w	r2, r3, #3
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800546a:	429a      	cmp	r2, r3
 800546c:	d12c      	bne.n	80054c8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800546e:	697b      	ldr	r3, [r7, #20]
 8005470:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005478:	3b01      	subs	r3, #1
 800547a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800547c:	429a      	cmp	r2, r3
 800547e:	d123      	bne.n	80054c8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005480:	697b      	ldr	r3, [r7, #20]
 8005482:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800548a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800548c:	429a      	cmp	r2, r3
 800548e:	d11b      	bne.n	80054c8 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005490:	697b      	ldr	r3, [r7, #20]
 8005492:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800549a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800549c:	429a      	cmp	r2, r3
 800549e:	d113      	bne.n	80054c8 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80054a0:	697b      	ldr	r3, [r7, #20]
 80054a2:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80054aa:	085b      	lsrs	r3, r3, #1
 80054ac:	3b01      	subs	r3, #1
 80054ae:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80054b0:	429a      	cmp	r2, r3
 80054b2:	d109      	bne.n	80054c8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80054b4:	697b      	ldr	r3, [r7, #20]
 80054b6:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054be:	085b      	lsrs	r3, r3, #1
 80054c0:	3b01      	subs	r3, #1
 80054c2:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80054c4:	429a      	cmp	r2, r3
 80054c6:	d06b      	beq.n	80055a0 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80054c8:	69bb      	ldr	r3, [r7, #24]
 80054ca:	2b0c      	cmp	r3, #12
 80054cc:	d062      	beq.n	8005594 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80054ce:	4b32      	ldr	r3, [pc, #200]	@ (8005598 <HAL_RCC_OscConfig+0x778>)
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d001      	beq.n	80054de <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80054da:	2301      	movs	r3, #1
 80054dc:	e0ac      	b.n	8005638 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80054de:	4b2e      	ldr	r3, [pc, #184]	@ (8005598 <HAL_RCC_OscConfig+0x778>)
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	4a2d      	ldr	r2, [pc, #180]	@ (8005598 <HAL_RCC_OscConfig+0x778>)
 80054e4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80054e8:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80054ea:	f7fc ffd9 	bl	80024a0 <HAL_GetTick>
 80054ee:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80054f0:	e008      	b.n	8005504 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80054f2:	f7fc ffd5 	bl	80024a0 <HAL_GetTick>
 80054f6:	4602      	mov	r2, r0
 80054f8:	693b      	ldr	r3, [r7, #16]
 80054fa:	1ad3      	subs	r3, r2, r3
 80054fc:	2b02      	cmp	r3, #2
 80054fe:	d901      	bls.n	8005504 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8005500:	2303      	movs	r3, #3
 8005502:	e099      	b.n	8005638 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005504:	4b24      	ldr	r3, [pc, #144]	@ (8005598 <HAL_RCC_OscConfig+0x778>)
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800550c:	2b00      	cmp	r3, #0
 800550e:	d1f0      	bne.n	80054f2 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005510:	4b21      	ldr	r3, [pc, #132]	@ (8005598 <HAL_RCC_OscConfig+0x778>)
 8005512:	68da      	ldr	r2, [r3, #12]
 8005514:	4b21      	ldr	r3, [pc, #132]	@ (800559c <HAL_RCC_OscConfig+0x77c>)
 8005516:	4013      	ands	r3, r2
 8005518:	687a      	ldr	r2, [r7, #4]
 800551a:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 800551c:	687a      	ldr	r2, [r7, #4]
 800551e:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8005520:	3a01      	subs	r2, #1
 8005522:	0112      	lsls	r2, r2, #4
 8005524:	4311      	orrs	r1, r2
 8005526:	687a      	ldr	r2, [r7, #4]
 8005528:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800552a:	0212      	lsls	r2, r2, #8
 800552c:	4311      	orrs	r1, r2
 800552e:	687a      	ldr	r2, [r7, #4]
 8005530:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005532:	0852      	lsrs	r2, r2, #1
 8005534:	3a01      	subs	r2, #1
 8005536:	0552      	lsls	r2, r2, #21
 8005538:	4311      	orrs	r1, r2
 800553a:	687a      	ldr	r2, [r7, #4]
 800553c:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800553e:	0852      	lsrs	r2, r2, #1
 8005540:	3a01      	subs	r2, #1
 8005542:	0652      	lsls	r2, r2, #25
 8005544:	4311      	orrs	r1, r2
 8005546:	687a      	ldr	r2, [r7, #4]
 8005548:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800554a:	06d2      	lsls	r2, r2, #27
 800554c:	430a      	orrs	r2, r1
 800554e:	4912      	ldr	r1, [pc, #72]	@ (8005598 <HAL_RCC_OscConfig+0x778>)
 8005550:	4313      	orrs	r3, r2
 8005552:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005554:	4b10      	ldr	r3, [pc, #64]	@ (8005598 <HAL_RCC_OscConfig+0x778>)
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	4a0f      	ldr	r2, [pc, #60]	@ (8005598 <HAL_RCC_OscConfig+0x778>)
 800555a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800555e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005560:	4b0d      	ldr	r3, [pc, #52]	@ (8005598 <HAL_RCC_OscConfig+0x778>)
 8005562:	68db      	ldr	r3, [r3, #12]
 8005564:	4a0c      	ldr	r2, [pc, #48]	@ (8005598 <HAL_RCC_OscConfig+0x778>)
 8005566:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800556a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800556c:	f7fc ff98 	bl	80024a0 <HAL_GetTick>
 8005570:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005572:	e008      	b.n	8005586 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005574:	f7fc ff94 	bl	80024a0 <HAL_GetTick>
 8005578:	4602      	mov	r2, r0
 800557a:	693b      	ldr	r3, [r7, #16]
 800557c:	1ad3      	subs	r3, r2, r3
 800557e:	2b02      	cmp	r3, #2
 8005580:	d901      	bls.n	8005586 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8005582:	2303      	movs	r3, #3
 8005584:	e058      	b.n	8005638 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005586:	4b04      	ldr	r3, [pc, #16]	@ (8005598 <HAL_RCC_OscConfig+0x778>)
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800558e:	2b00      	cmp	r3, #0
 8005590:	d0f0      	beq.n	8005574 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005592:	e050      	b.n	8005636 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005594:	2301      	movs	r3, #1
 8005596:	e04f      	b.n	8005638 <HAL_RCC_OscConfig+0x818>
 8005598:	40021000 	.word	0x40021000
 800559c:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80055a0:	4b27      	ldr	r3, [pc, #156]	@ (8005640 <HAL_RCC_OscConfig+0x820>)
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d144      	bne.n	8005636 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80055ac:	4b24      	ldr	r3, [pc, #144]	@ (8005640 <HAL_RCC_OscConfig+0x820>)
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	4a23      	ldr	r2, [pc, #140]	@ (8005640 <HAL_RCC_OscConfig+0x820>)
 80055b2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80055b6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80055b8:	4b21      	ldr	r3, [pc, #132]	@ (8005640 <HAL_RCC_OscConfig+0x820>)
 80055ba:	68db      	ldr	r3, [r3, #12]
 80055bc:	4a20      	ldr	r2, [pc, #128]	@ (8005640 <HAL_RCC_OscConfig+0x820>)
 80055be:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80055c2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80055c4:	f7fc ff6c 	bl	80024a0 <HAL_GetTick>
 80055c8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80055ca:	e008      	b.n	80055de <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80055cc:	f7fc ff68 	bl	80024a0 <HAL_GetTick>
 80055d0:	4602      	mov	r2, r0
 80055d2:	693b      	ldr	r3, [r7, #16]
 80055d4:	1ad3      	subs	r3, r2, r3
 80055d6:	2b02      	cmp	r3, #2
 80055d8:	d901      	bls.n	80055de <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 80055da:	2303      	movs	r3, #3
 80055dc:	e02c      	b.n	8005638 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80055de:	4b18      	ldr	r3, [pc, #96]	@ (8005640 <HAL_RCC_OscConfig+0x820>)
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d0f0      	beq.n	80055cc <HAL_RCC_OscConfig+0x7ac>
 80055ea:	e024      	b.n	8005636 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80055ec:	69bb      	ldr	r3, [r7, #24]
 80055ee:	2b0c      	cmp	r3, #12
 80055f0:	d01f      	beq.n	8005632 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80055f2:	4b13      	ldr	r3, [pc, #76]	@ (8005640 <HAL_RCC_OscConfig+0x820>)
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	4a12      	ldr	r2, [pc, #72]	@ (8005640 <HAL_RCC_OscConfig+0x820>)
 80055f8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80055fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055fe:	f7fc ff4f 	bl	80024a0 <HAL_GetTick>
 8005602:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005604:	e008      	b.n	8005618 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005606:	f7fc ff4b 	bl	80024a0 <HAL_GetTick>
 800560a:	4602      	mov	r2, r0
 800560c:	693b      	ldr	r3, [r7, #16]
 800560e:	1ad3      	subs	r3, r2, r3
 8005610:	2b02      	cmp	r3, #2
 8005612:	d901      	bls.n	8005618 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8005614:	2303      	movs	r3, #3
 8005616:	e00f      	b.n	8005638 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005618:	4b09      	ldr	r3, [pc, #36]	@ (8005640 <HAL_RCC_OscConfig+0x820>)
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005620:	2b00      	cmp	r3, #0
 8005622:	d1f0      	bne.n	8005606 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8005624:	4b06      	ldr	r3, [pc, #24]	@ (8005640 <HAL_RCC_OscConfig+0x820>)
 8005626:	68da      	ldr	r2, [r3, #12]
 8005628:	4905      	ldr	r1, [pc, #20]	@ (8005640 <HAL_RCC_OscConfig+0x820>)
 800562a:	4b06      	ldr	r3, [pc, #24]	@ (8005644 <HAL_RCC_OscConfig+0x824>)
 800562c:	4013      	ands	r3, r2
 800562e:	60cb      	str	r3, [r1, #12]
 8005630:	e001      	b.n	8005636 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005632:	2301      	movs	r3, #1
 8005634:	e000      	b.n	8005638 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8005636:	2300      	movs	r3, #0
}
 8005638:	4618      	mov	r0, r3
 800563a:	3720      	adds	r7, #32
 800563c:	46bd      	mov	sp, r7
 800563e:	bd80      	pop	{r7, pc}
 8005640:	40021000 	.word	0x40021000
 8005644:	feeefffc 	.word	0xfeeefffc

08005648 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005648:	b580      	push	{r7, lr}
 800564a:	b084      	sub	sp, #16
 800564c:	af00      	add	r7, sp, #0
 800564e:	6078      	str	r0, [r7, #4]
 8005650:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	2b00      	cmp	r3, #0
 8005656:	d101      	bne.n	800565c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005658:	2301      	movs	r3, #1
 800565a:	e0e7      	b.n	800582c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800565c:	4b75      	ldr	r3, [pc, #468]	@ (8005834 <HAL_RCC_ClockConfig+0x1ec>)
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	f003 0307 	and.w	r3, r3, #7
 8005664:	683a      	ldr	r2, [r7, #0]
 8005666:	429a      	cmp	r2, r3
 8005668:	d910      	bls.n	800568c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800566a:	4b72      	ldr	r3, [pc, #456]	@ (8005834 <HAL_RCC_ClockConfig+0x1ec>)
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	f023 0207 	bic.w	r2, r3, #7
 8005672:	4970      	ldr	r1, [pc, #448]	@ (8005834 <HAL_RCC_ClockConfig+0x1ec>)
 8005674:	683b      	ldr	r3, [r7, #0]
 8005676:	4313      	orrs	r3, r2
 8005678:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800567a:	4b6e      	ldr	r3, [pc, #440]	@ (8005834 <HAL_RCC_ClockConfig+0x1ec>)
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	f003 0307 	and.w	r3, r3, #7
 8005682:	683a      	ldr	r2, [r7, #0]
 8005684:	429a      	cmp	r2, r3
 8005686:	d001      	beq.n	800568c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005688:	2301      	movs	r3, #1
 800568a:	e0cf      	b.n	800582c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	f003 0302 	and.w	r3, r3, #2
 8005694:	2b00      	cmp	r3, #0
 8005696:	d010      	beq.n	80056ba <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	689a      	ldr	r2, [r3, #8]
 800569c:	4b66      	ldr	r3, [pc, #408]	@ (8005838 <HAL_RCC_ClockConfig+0x1f0>)
 800569e:	689b      	ldr	r3, [r3, #8]
 80056a0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80056a4:	429a      	cmp	r2, r3
 80056a6:	d908      	bls.n	80056ba <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80056a8:	4b63      	ldr	r3, [pc, #396]	@ (8005838 <HAL_RCC_ClockConfig+0x1f0>)
 80056aa:	689b      	ldr	r3, [r3, #8]
 80056ac:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	689b      	ldr	r3, [r3, #8]
 80056b4:	4960      	ldr	r1, [pc, #384]	@ (8005838 <HAL_RCC_ClockConfig+0x1f0>)
 80056b6:	4313      	orrs	r3, r2
 80056b8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	f003 0301 	and.w	r3, r3, #1
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d04c      	beq.n	8005760 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	685b      	ldr	r3, [r3, #4]
 80056ca:	2b03      	cmp	r3, #3
 80056cc:	d107      	bne.n	80056de <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80056ce:	4b5a      	ldr	r3, [pc, #360]	@ (8005838 <HAL_RCC_ClockConfig+0x1f0>)
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d121      	bne.n	800571e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80056da:	2301      	movs	r3, #1
 80056dc:	e0a6      	b.n	800582c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	685b      	ldr	r3, [r3, #4]
 80056e2:	2b02      	cmp	r3, #2
 80056e4:	d107      	bne.n	80056f6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80056e6:	4b54      	ldr	r3, [pc, #336]	@ (8005838 <HAL_RCC_ClockConfig+0x1f0>)
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d115      	bne.n	800571e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80056f2:	2301      	movs	r3, #1
 80056f4:	e09a      	b.n	800582c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	685b      	ldr	r3, [r3, #4]
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d107      	bne.n	800570e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80056fe:	4b4e      	ldr	r3, [pc, #312]	@ (8005838 <HAL_RCC_ClockConfig+0x1f0>)
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	f003 0302 	and.w	r3, r3, #2
 8005706:	2b00      	cmp	r3, #0
 8005708:	d109      	bne.n	800571e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800570a:	2301      	movs	r3, #1
 800570c:	e08e      	b.n	800582c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800570e:	4b4a      	ldr	r3, [pc, #296]	@ (8005838 <HAL_RCC_ClockConfig+0x1f0>)
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005716:	2b00      	cmp	r3, #0
 8005718:	d101      	bne.n	800571e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800571a:	2301      	movs	r3, #1
 800571c:	e086      	b.n	800582c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800571e:	4b46      	ldr	r3, [pc, #280]	@ (8005838 <HAL_RCC_ClockConfig+0x1f0>)
 8005720:	689b      	ldr	r3, [r3, #8]
 8005722:	f023 0203 	bic.w	r2, r3, #3
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	685b      	ldr	r3, [r3, #4]
 800572a:	4943      	ldr	r1, [pc, #268]	@ (8005838 <HAL_RCC_ClockConfig+0x1f0>)
 800572c:	4313      	orrs	r3, r2
 800572e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005730:	f7fc feb6 	bl	80024a0 <HAL_GetTick>
 8005734:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005736:	e00a      	b.n	800574e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005738:	f7fc feb2 	bl	80024a0 <HAL_GetTick>
 800573c:	4602      	mov	r2, r0
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	1ad3      	subs	r3, r2, r3
 8005742:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005746:	4293      	cmp	r3, r2
 8005748:	d901      	bls.n	800574e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800574a:	2303      	movs	r3, #3
 800574c:	e06e      	b.n	800582c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800574e:	4b3a      	ldr	r3, [pc, #232]	@ (8005838 <HAL_RCC_ClockConfig+0x1f0>)
 8005750:	689b      	ldr	r3, [r3, #8]
 8005752:	f003 020c 	and.w	r2, r3, #12
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	685b      	ldr	r3, [r3, #4]
 800575a:	009b      	lsls	r3, r3, #2
 800575c:	429a      	cmp	r2, r3
 800575e:	d1eb      	bne.n	8005738 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	f003 0302 	and.w	r3, r3, #2
 8005768:	2b00      	cmp	r3, #0
 800576a:	d010      	beq.n	800578e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	689a      	ldr	r2, [r3, #8]
 8005770:	4b31      	ldr	r3, [pc, #196]	@ (8005838 <HAL_RCC_ClockConfig+0x1f0>)
 8005772:	689b      	ldr	r3, [r3, #8]
 8005774:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005778:	429a      	cmp	r2, r3
 800577a:	d208      	bcs.n	800578e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800577c:	4b2e      	ldr	r3, [pc, #184]	@ (8005838 <HAL_RCC_ClockConfig+0x1f0>)
 800577e:	689b      	ldr	r3, [r3, #8]
 8005780:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	689b      	ldr	r3, [r3, #8]
 8005788:	492b      	ldr	r1, [pc, #172]	@ (8005838 <HAL_RCC_ClockConfig+0x1f0>)
 800578a:	4313      	orrs	r3, r2
 800578c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800578e:	4b29      	ldr	r3, [pc, #164]	@ (8005834 <HAL_RCC_ClockConfig+0x1ec>)
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	f003 0307 	and.w	r3, r3, #7
 8005796:	683a      	ldr	r2, [r7, #0]
 8005798:	429a      	cmp	r2, r3
 800579a:	d210      	bcs.n	80057be <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800579c:	4b25      	ldr	r3, [pc, #148]	@ (8005834 <HAL_RCC_ClockConfig+0x1ec>)
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f023 0207 	bic.w	r2, r3, #7
 80057a4:	4923      	ldr	r1, [pc, #140]	@ (8005834 <HAL_RCC_ClockConfig+0x1ec>)
 80057a6:	683b      	ldr	r3, [r7, #0]
 80057a8:	4313      	orrs	r3, r2
 80057aa:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80057ac:	4b21      	ldr	r3, [pc, #132]	@ (8005834 <HAL_RCC_ClockConfig+0x1ec>)
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	f003 0307 	and.w	r3, r3, #7
 80057b4:	683a      	ldr	r2, [r7, #0]
 80057b6:	429a      	cmp	r2, r3
 80057b8:	d001      	beq.n	80057be <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80057ba:	2301      	movs	r3, #1
 80057bc:	e036      	b.n	800582c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	f003 0304 	and.w	r3, r3, #4
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d008      	beq.n	80057dc <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80057ca:	4b1b      	ldr	r3, [pc, #108]	@ (8005838 <HAL_RCC_ClockConfig+0x1f0>)
 80057cc:	689b      	ldr	r3, [r3, #8]
 80057ce:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	68db      	ldr	r3, [r3, #12]
 80057d6:	4918      	ldr	r1, [pc, #96]	@ (8005838 <HAL_RCC_ClockConfig+0x1f0>)
 80057d8:	4313      	orrs	r3, r2
 80057da:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f003 0308 	and.w	r3, r3, #8
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d009      	beq.n	80057fc <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80057e8:	4b13      	ldr	r3, [pc, #76]	@ (8005838 <HAL_RCC_ClockConfig+0x1f0>)
 80057ea:	689b      	ldr	r3, [r3, #8]
 80057ec:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	691b      	ldr	r3, [r3, #16]
 80057f4:	00db      	lsls	r3, r3, #3
 80057f6:	4910      	ldr	r1, [pc, #64]	@ (8005838 <HAL_RCC_ClockConfig+0x1f0>)
 80057f8:	4313      	orrs	r3, r2
 80057fa:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80057fc:	f000 f824 	bl	8005848 <HAL_RCC_GetSysClockFreq>
 8005800:	4602      	mov	r2, r0
 8005802:	4b0d      	ldr	r3, [pc, #52]	@ (8005838 <HAL_RCC_ClockConfig+0x1f0>)
 8005804:	689b      	ldr	r3, [r3, #8]
 8005806:	091b      	lsrs	r3, r3, #4
 8005808:	f003 030f 	and.w	r3, r3, #15
 800580c:	490b      	ldr	r1, [pc, #44]	@ (800583c <HAL_RCC_ClockConfig+0x1f4>)
 800580e:	5ccb      	ldrb	r3, [r1, r3]
 8005810:	f003 031f 	and.w	r3, r3, #31
 8005814:	fa22 f303 	lsr.w	r3, r2, r3
 8005818:	4a09      	ldr	r2, [pc, #36]	@ (8005840 <HAL_RCC_ClockConfig+0x1f8>)
 800581a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800581c:	4b09      	ldr	r3, [pc, #36]	@ (8005844 <HAL_RCC_ClockConfig+0x1fc>)
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	4618      	mov	r0, r3
 8005822:	f7fc fded 	bl	8002400 <HAL_InitTick>
 8005826:	4603      	mov	r3, r0
 8005828:	72fb      	strb	r3, [r7, #11]

  return status;
 800582a:	7afb      	ldrb	r3, [r7, #11]
}
 800582c:	4618      	mov	r0, r3
 800582e:	3710      	adds	r7, #16
 8005830:	46bd      	mov	sp, r7
 8005832:	bd80      	pop	{r7, pc}
 8005834:	40022000 	.word	0x40022000
 8005838:	40021000 	.word	0x40021000
 800583c:	080078c8 	.word	0x080078c8
 8005840:	20000000 	.word	0x20000000
 8005844:	20000004 	.word	0x20000004

08005848 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005848:	b480      	push	{r7}
 800584a:	b089      	sub	sp, #36	@ 0x24
 800584c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800584e:	2300      	movs	r3, #0
 8005850:	61fb      	str	r3, [r7, #28]
 8005852:	2300      	movs	r3, #0
 8005854:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005856:	4b3e      	ldr	r3, [pc, #248]	@ (8005950 <HAL_RCC_GetSysClockFreq+0x108>)
 8005858:	689b      	ldr	r3, [r3, #8]
 800585a:	f003 030c 	and.w	r3, r3, #12
 800585e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005860:	4b3b      	ldr	r3, [pc, #236]	@ (8005950 <HAL_RCC_GetSysClockFreq+0x108>)
 8005862:	68db      	ldr	r3, [r3, #12]
 8005864:	f003 0303 	and.w	r3, r3, #3
 8005868:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800586a:	693b      	ldr	r3, [r7, #16]
 800586c:	2b00      	cmp	r3, #0
 800586e:	d005      	beq.n	800587c <HAL_RCC_GetSysClockFreq+0x34>
 8005870:	693b      	ldr	r3, [r7, #16]
 8005872:	2b0c      	cmp	r3, #12
 8005874:	d121      	bne.n	80058ba <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	2b01      	cmp	r3, #1
 800587a:	d11e      	bne.n	80058ba <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800587c:	4b34      	ldr	r3, [pc, #208]	@ (8005950 <HAL_RCC_GetSysClockFreq+0x108>)
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	f003 0308 	and.w	r3, r3, #8
 8005884:	2b00      	cmp	r3, #0
 8005886:	d107      	bne.n	8005898 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005888:	4b31      	ldr	r3, [pc, #196]	@ (8005950 <HAL_RCC_GetSysClockFreq+0x108>)
 800588a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800588e:	0a1b      	lsrs	r3, r3, #8
 8005890:	f003 030f 	and.w	r3, r3, #15
 8005894:	61fb      	str	r3, [r7, #28]
 8005896:	e005      	b.n	80058a4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005898:	4b2d      	ldr	r3, [pc, #180]	@ (8005950 <HAL_RCC_GetSysClockFreq+0x108>)
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	091b      	lsrs	r3, r3, #4
 800589e:	f003 030f 	and.w	r3, r3, #15
 80058a2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80058a4:	4a2b      	ldr	r2, [pc, #172]	@ (8005954 <HAL_RCC_GetSysClockFreq+0x10c>)
 80058a6:	69fb      	ldr	r3, [r7, #28]
 80058a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80058ac:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80058ae:	693b      	ldr	r3, [r7, #16]
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d10d      	bne.n	80058d0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80058b4:	69fb      	ldr	r3, [r7, #28]
 80058b6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80058b8:	e00a      	b.n	80058d0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80058ba:	693b      	ldr	r3, [r7, #16]
 80058bc:	2b04      	cmp	r3, #4
 80058be:	d102      	bne.n	80058c6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80058c0:	4b25      	ldr	r3, [pc, #148]	@ (8005958 <HAL_RCC_GetSysClockFreq+0x110>)
 80058c2:	61bb      	str	r3, [r7, #24]
 80058c4:	e004      	b.n	80058d0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80058c6:	693b      	ldr	r3, [r7, #16]
 80058c8:	2b08      	cmp	r3, #8
 80058ca:	d101      	bne.n	80058d0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80058cc:	4b23      	ldr	r3, [pc, #140]	@ (800595c <HAL_RCC_GetSysClockFreq+0x114>)
 80058ce:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80058d0:	693b      	ldr	r3, [r7, #16]
 80058d2:	2b0c      	cmp	r3, #12
 80058d4:	d134      	bne.n	8005940 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80058d6:	4b1e      	ldr	r3, [pc, #120]	@ (8005950 <HAL_RCC_GetSysClockFreq+0x108>)
 80058d8:	68db      	ldr	r3, [r3, #12]
 80058da:	f003 0303 	and.w	r3, r3, #3
 80058de:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80058e0:	68bb      	ldr	r3, [r7, #8]
 80058e2:	2b02      	cmp	r3, #2
 80058e4:	d003      	beq.n	80058ee <HAL_RCC_GetSysClockFreq+0xa6>
 80058e6:	68bb      	ldr	r3, [r7, #8]
 80058e8:	2b03      	cmp	r3, #3
 80058ea:	d003      	beq.n	80058f4 <HAL_RCC_GetSysClockFreq+0xac>
 80058ec:	e005      	b.n	80058fa <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80058ee:	4b1a      	ldr	r3, [pc, #104]	@ (8005958 <HAL_RCC_GetSysClockFreq+0x110>)
 80058f0:	617b      	str	r3, [r7, #20]
      break;
 80058f2:	e005      	b.n	8005900 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80058f4:	4b19      	ldr	r3, [pc, #100]	@ (800595c <HAL_RCC_GetSysClockFreq+0x114>)
 80058f6:	617b      	str	r3, [r7, #20]
      break;
 80058f8:	e002      	b.n	8005900 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80058fa:	69fb      	ldr	r3, [r7, #28]
 80058fc:	617b      	str	r3, [r7, #20]
      break;
 80058fe:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005900:	4b13      	ldr	r3, [pc, #76]	@ (8005950 <HAL_RCC_GetSysClockFreq+0x108>)
 8005902:	68db      	ldr	r3, [r3, #12]
 8005904:	091b      	lsrs	r3, r3, #4
 8005906:	f003 0307 	and.w	r3, r3, #7
 800590a:	3301      	adds	r3, #1
 800590c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800590e:	4b10      	ldr	r3, [pc, #64]	@ (8005950 <HAL_RCC_GetSysClockFreq+0x108>)
 8005910:	68db      	ldr	r3, [r3, #12]
 8005912:	0a1b      	lsrs	r3, r3, #8
 8005914:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005918:	697a      	ldr	r2, [r7, #20]
 800591a:	fb03 f202 	mul.w	r2, r3, r2
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	fbb2 f3f3 	udiv	r3, r2, r3
 8005924:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005926:	4b0a      	ldr	r3, [pc, #40]	@ (8005950 <HAL_RCC_GetSysClockFreq+0x108>)
 8005928:	68db      	ldr	r3, [r3, #12]
 800592a:	0e5b      	lsrs	r3, r3, #25
 800592c:	f003 0303 	and.w	r3, r3, #3
 8005930:	3301      	adds	r3, #1
 8005932:	005b      	lsls	r3, r3, #1
 8005934:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005936:	697a      	ldr	r2, [r7, #20]
 8005938:	683b      	ldr	r3, [r7, #0]
 800593a:	fbb2 f3f3 	udiv	r3, r2, r3
 800593e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005940:	69bb      	ldr	r3, [r7, #24]
}
 8005942:	4618      	mov	r0, r3
 8005944:	3724      	adds	r7, #36	@ 0x24
 8005946:	46bd      	mov	sp, r7
 8005948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594c:	4770      	bx	lr
 800594e:	bf00      	nop
 8005950:	40021000 	.word	0x40021000
 8005954:	080078e0 	.word	0x080078e0
 8005958:	00f42400 	.word	0x00f42400
 800595c:	007a1200 	.word	0x007a1200

08005960 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005960:	b480      	push	{r7}
 8005962:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005964:	4b03      	ldr	r3, [pc, #12]	@ (8005974 <HAL_RCC_GetHCLKFreq+0x14>)
 8005966:	681b      	ldr	r3, [r3, #0]
}
 8005968:	4618      	mov	r0, r3
 800596a:	46bd      	mov	sp, r7
 800596c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005970:	4770      	bx	lr
 8005972:	bf00      	nop
 8005974:	20000000 	.word	0x20000000

08005978 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005978:	b580      	push	{r7, lr}
 800597a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800597c:	f7ff fff0 	bl	8005960 <HAL_RCC_GetHCLKFreq>
 8005980:	4602      	mov	r2, r0
 8005982:	4b06      	ldr	r3, [pc, #24]	@ (800599c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005984:	689b      	ldr	r3, [r3, #8]
 8005986:	0a1b      	lsrs	r3, r3, #8
 8005988:	f003 0307 	and.w	r3, r3, #7
 800598c:	4904      	ldr	r1, [pc, #16]	@ (80059a0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800598e:	5ccb      	ldrb	r3, [r1, r3]
 8005990:	f003 031f 	and.w	r3, r3, #31
 8005994:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005998:	4618      	mov	r0, r3
 800599a:	bd80      	pop	{r7, pc}
 800599c:	40021000 	.word	0x40021000
 80059a0:	080078d8 	.word	0x080078d8

080059a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80059a4:	b580      	push	{r7, lr}
 80059a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80059a8:	f7ff ffda 	bl	8005960 <HAL_RCC_GetHCLKFreq>
 80059ac:	4602      	mov	r2, r0
 80059ae:	4b06      	ldr	r3, [pc, #24]	@ (80059c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80059b0:	689b      	ldr	r3, [r3, #8]
 80059b2:	0adb      	lsrs	r3, r3, #11
 80059b4:	f003 0307 	and.w	r3, r3, #7
 80059b8:	4904      	ldr	r1, [pc, #16]	@ (80059cc <HAL_RCC_GetPCLK2Freq+0x28>)
 80059ba:	5ccb      	ldrb	r3, [r1, r3]
 80059bc:	f003 031f 	and.w	r3, r3, #31
 80059c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80059c4:	4618      	mov	r0, r3
 80059c6:	bd80      	pop	{r7, pc}
 80059c8:	40021000 	.word	0x40021000
 80059cc:	080078d8 	.word	0x080078d8

080059d0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80059d0:	b580      	push	{r7, lr}
 80059d2:	b086      	sub	sp, #24
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80059d8:	2300      	movs	r3, #0
 80059da:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80059dc:	4b2a      	ldr	r3, [pc, #168]	@ (8005a88 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80059de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80059e0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d003      	beq.n	80059f0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80059e8:	f7ff f96e 	bl	8004cc8 <HAL_PWREx_GetVoltageRange>
 80059ec:	6178      	str	r0, [r7, #20]
 80059ee:	e014      	b.n	8005a1a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80059f0:	4b25      	ldr	r3, [pc, #148]	@ (8005a88 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80059f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80059f4:	4a24      	ldr	r2, [pc, #144]	@ (8005a88 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80059f6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80059fa:	6593      	str	r3, [r2, #88]	@ 0x58
 80059fc:	4b22      	ldr	r3, [pc, #136]	@ (8005a88 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80059fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a00:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005a04:	60fb      	str	r3, [r7, #12]
 8005a06:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005a08:	f7ff f95e 	bl	8004cc8 <HAL_PWREx_GetVoltageRange>
 8005a0c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005a0e:	4b1e      	ldr	r3, [pc, #120]	@ (8005a88 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005a10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a12:	4a1d      	ldr	r2, [pc, #116]	@ (8005a88 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005a14:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005a18:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005a1a:	697b      	ldr	r3, [r7, #20]
 8005a1c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005a20:	d10b      	bne.n	8005a3a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	2b80      	cmp	r3, #128	@ 0x80
 8005a26:	d919      	bls.n	8005a5c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	2ba0      	cmp	r3, #160	@ 0xa0
 8005a2c:	d902      	bls.n	8005a34 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005a2e:	2302      	movs	r3, #2
 8005a30:	613b      	str	r3, [r7, #16]
 8005a32:	e013      	b.n	8005a5c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005a34:	2301      	movs	r3, #1
 8005a36:	613b      	str	r3, [r7, #16]
 8005a38:	e010      	b.n	8005a5c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	2b80      	cmp	r3, #128	@ 0x80
 8005a3e:	d902      	bls.n	8005a46 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8005a40:	2303      	movs	r3, #3
 8005a42:	613b      	str	r3, [r7, #16]
 8005a44:	e00a      	b.n	8005a5c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	2b80      	cmp	r3, #128	@ 0x80
 8005a4a:	d102      	bne.n	8005a52 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005a4c:	2302      	movs	r3, #2
 8005a4e:	613b      	str	r3, [r7, #16]
 8005a50:	e004      	b.n	8005a5c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	2b70      	cmp	r3, #112	@ 0x70
 8005a56:	d101      	bne.n	8005a5c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005a58:	2301      	movs	r3, #1
 8005a5a:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005a5c:	4b0b      	ldr	r3, [pc, #44]	@ (8005a8c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	f023 0207 	bic.w	r2, r3, #7
 8005a64:	4909      	ldr	r1, [pc, #36]	@ (8005a8c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005a66:	693b      	ldr	r3, [r7, #16]
 8005a68:	4313      	orrs	r3, r2
 8005a6a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005a6c:	4b07      	ldr	r3, [pc, #28]	@ (8005a8c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	f003 0307 	and.w	r3, r3, #7
 8005a74:	693a      	ldr	r2, [r7, #16]
 8005a76:	429a      	cmp	r2, r3
 8005a78:	d001      	beq.n	8005a7e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8005a7a:	2301      	movs	r3, #1
 8005a7c:	e000      	b.n	8005a80 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8005a7e:	2300      	movs	r3, #0
}
 8005a80:	4618      	mov	r0, r3
 8005a82:	3718      	adds	r7, #24
 8005a84:	46bd      	mov	sp, r7
 8005a86:	bd80      	pop	{r7, pc}
 8005a88:	40021000 	.word	0x40021000
 8005a8c:	40022000 	.word	0x40022000

08005a90 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005a90:	b580      	push	{r7, lr}
 8005a92:	b086      	sub	sp, #24
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005a98:	2300      	movs	r3, #0
 8005a9a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005a9c:	2300      	movs	r3, #0
 8005a9e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d031      	beq.n	8005b10 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ab0:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8005ab4:	d01a      	beq.n	8005aec <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8005ab6:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8005aba:	d814      	bhi.n	8005ae6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d009      	beq.n	8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8005ac0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005ac4:	d10f      	bne.n	8005ae6 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8005ac6:	4b5d      	ldr	r3, [pc, #372]	@ (8005c3c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005ac8:	68db      	ldr	r3, [r3, #12]
 8005aca:	4a5c      	ldr	r2, [pc, #368]	@ (8005c3c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005acc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005ad0:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005ad2:	e00c      	b.n	8005aee <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	3304      	adds	r3, #4
 8005ad8:	2100      	movs	r1, #0
 8005ada:	4618      	mov	r0, r3
 8005adc:	f000 f9de 	bl	8005e9c <RCCEx_PLLSAI1_Config>
 8005ae0:	4603      	mov	r3, r0
 8005ae2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005ae4:	e003      	b.n	8005aee <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005ae6:	2301      	movs	r3, #1
 8005ae8:	74fb      	strb	r3, [r7, #19]
      break;
 8005aea:	e000      	b.n	8005aee <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8005aec:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005aee:	7cfb      	ldrb	r3, [r7, #19]
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d10b      	bne.n	8005b0c <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005af4:	4b51      	ldr	r3, [pc, #324]	@ (8005c3c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005af6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005afa:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b02:	494e      	ldr	r1, [pc, #312]	@ (8005c3c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005b04:	4313      	orrs	r3, r2
 8005b06:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8005b0a:	e001      	b.n	8005b10 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b0c:	7cfb      	ldrb	r3, [r7, #19]
 8005b0e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	f000 809e 	beq.w	8005c5a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005b1e:	2300      	movs	r3, #0
 8005b20:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005b22:	4b46      	ldr	r3, [pc, #280]	@ (8005c3c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005b24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b26:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d101      	bne.n	8005b32 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8005b2e:	2301      	movs	r3, #1
 8005b30:	e000      	b.n	8005b34 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8005b32:	2300      	movs	r3, #0
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d00d      	beq.n	8005b54 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005b38:	4b40      	ldr	r3, [pc, #256]	@ (8005c3c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005b3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b3c:	4a3f      	ldr	r2, [pc, #252]	@ (8005c3c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005b3e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005b42:	6593      	str	r3, [r2, #88]	@ 0x58
 8005b44:	4b3d      	ldr	r3, [pc, #244]	@ (8005c3c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005b46:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b48:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005b4c:	60bb      	str	r3, [r7, #8]
 8005b4e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005b50:	2301      	movs	r3, #1
 8005b52:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005b54:	4b3a      	ldr	r3, [pc, #232]	@ (8005c40 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	4a39      	ldr	r2, [pc, #228]	@ (8005c40 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8005b5a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005b5e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005b60:	f7fc fc9e 	bl	80024a0 <HAL_GetTick>
 8005b64:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005b66:	e009      	b.n	8005b7c <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005b68:	f7fc fc9a 	bl	80024a0 <HAL_GetTick>
 8005b6c:	4602      	mov	r2, r0
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	1ad3      	subs	r3, r2, r3
 8005b72:	2b02      	cmp	r3, #2
 8005b74:	d902      	bls.n	8005b7c <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8005b76:	2303      	movs	r3, #3
 8005b78:	74fb      	strb	r3, [r7, #19]
        break;
 8005b7a:	e005      	b.n	8005b88 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005b7c:	4b30      	ldr	r3, [pc, #192]	@ (8005c40 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d0ef      	beq.n	8005b68 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8005b88:	7cfb      	ldrb	r3, [r7, #19]
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d15a      	bne.n	8005c44 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005b8e:	4b2b      	ldr	r3, [pc, #172]	@ (8005c3c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005b90:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b94:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005b98:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005b9a:	697b      	ldr	r3, [r7, #20]
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d01e      	beq.n	8005bde <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005ba4:	697a      	ldr	r2, [r7, #20]
 8005ba6:	429a      	cmp	r2, r3
 8005ba8:	d019      	beq.n	8005bde <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005baa:	4b24      	ldr	r3, [pc, #144]	@ (8005c3c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005bac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005bb0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005bb4:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005bb6:	4b21      	ldr	r3, [pc, #132]	@ (8005c3c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005bb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005bbc:	4a1f      	ldr	r2, [pc, #124]	@ (8005c3c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005bbe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005bc2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005bc6:	4b1d      	ldr	r3, [pc, #116]	@ (8005c3c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005bc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005bcc:	4a1b      	ldr	r2, [pc, #108]	@ (8005c3c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005bce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005bd2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005bd6:	4a19      	ldr	r2, [pc, #100]	@ (8005c3c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005bd8:	697b      	ldr	r3, [r7, #20]
 8005bda:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005bde:	697b      	ldr	r3, [r7, #20]
 8005be0:	f003 0301 	and.w	r3, r3, #1
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d016      	beq.n	8005c16 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005be8:	f7fc fc5a 	bl	80024a0 <HAL_GetTick>
 8005bec:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005bee:	e00b      	b.n	8005c08 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005bf0:	f7fc fc56 	bl	80024a0 <HAL_GetTick>
 8005bf4:	4602      	mov	r2, r0
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	1ad3      	subs	r3, r2, r3
 8005bfa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005bfe:	4293      	cmp	r3, r2
 8005c00:	d902      	bls.n	8005c08 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8005c02:	2303      	movs	r3, #3
 8005c04:	74fb      	strb	r3, [r7, #19]
            break;
 8005c06:	e006      	b.n	8005c16 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005c08:	4b0c      	ldr	r3, [pc, #48]	@ (8005c3c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005c0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c0e:	f003 0302 	and.w	r3, r3, #2
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d0ec      	beq.n	8005bf0 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8005c16:	7cfb      	ldrb	r3, [r7, #19]
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d10b      	bne.n	8005c34 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005c1c:	4b07      	ldr	r3, [pc, #28]	@ (8005c3c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005c1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c22:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005c2a:	4904      	ldr	r1, [pc, #16]	@ (8005c3c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005c2c:	4313      	orrs	r3, r2
 8005c2e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8005c32:	e009      	b.n	8005c48 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005c34:	7cfb      	ldrb	r3, [r7, #19]
 8005c36:	74bb      	strb	r3, [r7, #18]
 8005c38:	e006      	b.n	8005c48 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8005c3a:	bf00      	nop
 8005c3c:	40021000 	.word	0x40021000
 8005c40:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c44:	7cfb      	ldrb	r3, [r7, #19]
 8005c46:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005c48:	7c7b      	ldrb	r3, [r7, #17]
 8005c4a:	2b01      	cmp	r3, #1
 8005c4c:	d105      	bne.n	8005c5a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005c4e:	4b8a      	ldr	r3, [pc, #552]	@ (8005e78 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005c50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c52:	4a89      	ldr	r2, [pc, #548]	@ (8005e78 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005c54:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005c58:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	f003 0301 	and.w	r3, r3, #1
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d00a      	beq.n	8005c7c <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005c66:	4b84      	ldr	r3, [pc, #528]	@ (8005e78 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005c68:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c6c:	f023 0203 	bic.w	r2, r3, #3
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	6a1b      	ldr	r3, [r3, #32]
 8005c74:	4980      	ldr	r1, [pc, #512]	@ (8005e78 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005c76:	4313      	orrs	r3, r2
 8005c78:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	f003 0302 	and.w	r3, r3, #2
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d00a      	beq.n	8005c9e <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005c88:	4b7b      	ldr	r3, [pc, #492]	@ (8005e78 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005c8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c8e:	f023 020c 	bic.w	r2, r3, #12
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c96:	4978      	ldr	r1, [pc, #480]	@ (8005e78 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005c98:	4313      	orrs	r3, r2
 8005c9a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	f003 0320 	and.w	r3, r3, #32
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d00a      	beq.n	8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005caa:	4b73      	ldr	r3, [pc, #460]	@ (8005e78 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005cac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005cb0:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005cb8:	496f      	ldr	r1, [pc, #444]	@ (8005e78 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005cba:	4313      	orrs	r3, r2
 8005cbc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d00a      	beq.n	8005ce2 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005ccc:	4b6a      	ldr	r3, [pc, #424]	@ (8005e78 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005cce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005cd2:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005cda:	4967      	ldr	r1, [pc, #412]	@ (8005e78 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005cdc:	4313      	orrs	r3, r2
 8005cde:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d00a      	beq.n	8005d04 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005cee:	4b62      	ldr	r3, [pc, #392]	@ (8005e78 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005cf0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005cf4:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005cfc:	495e      	ldr	r1, [pc, #376]	@ (8005e78 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005cfe:	4313      	orrs	r3, r2
 8005d00:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d00a      	beq.n	8005d26 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005d10:	4b59      	ldr	r3, [pc, #356]	@ (8005e78 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005d12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d16:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d1e:	4956      	ldr	r1, [pc, #344]	@ (8005e78 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005d20:	4313      	orrs	r3, r2
 8005d22:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d00a      	beq.n	8005d48 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005d32:	4b51      	ldr	r3, [pc, #324]	@ (8005e78 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005d34:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d38:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d40:	494d      	ldr	r1, [pc, #308]	@ (8005e78 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005d42:	4313      	orrs	r3, r2
 8005d44:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d028      	beq.n	8005da6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005d54:	4b48      	ldr	r3, [pc, #288]	@ (8005e78 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005d56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d5a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d62:	4945      	ldr	r1, [pc, #276]	@ (8005e78 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005d64:	4313      	orrs	r3, r2
 8005d66:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d6e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005d72:	d106      	bne.n	8005d82 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005d74:	4b40      	ldr	r3, [pc, #256]	@ (8005e78 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005d76:	68db      	ldr	r3, [r3, #12]
 8005d78:	4a3f      	ldr	r2, [pc, #252]	@ (8005e78 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005d7a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005d7e:	60d3      	str	r3, [r2, #12]
 8005d80:	e011      	b.n	8005da6 <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d86:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005d8a:	d10c      	bne.n	8005da6 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	3304      	adds	r3, #4
 8005d90:	2101      	movs	r1, #1
 8005d92:	4618      	mov	r0, r3
 8005d94:	f000 f882 	bl	8005e9c <RCCEx_PLLSAI1_Config>
 8005d98:	4603      	mov	r3, r0
 8005d9a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005d9c:	7cfb      	ldrb	r3, [r7, #19]
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d001      	beq.n	8005da6 <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8005da2:	7cfb      	ldrb	r3, [r7, #19]
 8005da4:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d028      	beq.n	8005e04 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005db2:	4b31      	ldr	r3, [pc, #196]	@ (8005e78 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005db4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005db8:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005dc0:	492d      	ldr	r1, [pc, #180]	@ (8005e78 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005dc2:	4313      	orrs	r3, r2
 8005dc4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005dcc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005dd0:	d106      	bne.n	8005de0 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005dd2:	4b29      	ldr	r3, [pc, #164]	@ (8005e78 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005dd4:	68db      	ldr	r3, [r3, #12]
 8005dd6:	4a28      	ldr	r2, [pc, #160]	@ (8005e78 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005dd8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005ddc:	60d3      	str	r3, [r2, #12]
 8005dde:	e011      	b.n	8005e04 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005de4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005de8:	d10c      	bne.n	8005e04 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	3304      	adds	r3, #4
 8005dee:	2101      	movs	r1, #1
 8005df0:	4618      	mov	r0, r3
 8005df2:	f000 f853 	bl	8005e9c <RCCEx_PLLSAI1_Config>
 8005df6:	4603      	mov	r3, r0
 8005df8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005dfa:	7cfb      	ldrb	r3, [r7, #19]
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d001      	beq.n	8005e04 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8005e00:	7cfb      	ldrb	r3, [r7, #19]
 8005e02:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d01c      	beq.n	8005e4a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005e10:	4b19      	ldr	r3, [pc, #100]	@ (8005e78 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005e12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e16:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005e1e:	4916      	ldr	r1, [pc, #88]	@ (8005e78 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005e20:	4313      	orrs	r3, r2
 8005e22:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005e2a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005e2e:	d10c      	bne.n	8005e4a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	3304      	adds	r3, #4
 8005e34:	2102      	movs	r1, #2
 8005e36:	4618      	mov	r0, r3
 8005e38:	f000 f830 	bl	8005e9c <RCCEx_PLLSAI1_Config>
 8005e3c:	4603      	mov	r3, r0
 8005e3e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005e40:	7cfb      	ldrb	r3, [r7, #19]
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d001      	beq.n	8005e4a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8005e46:	7cfb      	ldrb	r3, [r7, #19]
 8005e48:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d00a      	beq.n	8005e6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005e56:	4b08      	ldr	r3, [pc, #32]	@ (8005e78 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005e58:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e5c:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005e64:	4904      	ldr	r1, [pc, #16]	@ (8005e78 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005e66:	4313      	orrs	r3, r2
 8005e68:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005e6c:	7cbb      	ldrb	r3, [r7, #18]
}
 8005e6e:	4618      	mov	r0, r3
 8005e70:	3718      	adds	r7, #24
 8005e72:	46bd      	mov	sp, r7
 8005e74:	bd80      	pop	{r7, pc}
 8005e76:	bf00      	nop
 8005e78:	40021000 	.word	0x40021000

08005e7c <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8005e7c:	b480      	push	{r7}
 8005e7e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8005e80:	4b05      	ldr	r3, [pc, #20]	@ (8005e98 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	4a04      	ldr	r2, [pc, #16]	@ (8005e98 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8005e86:	f043 0304 	orr.w	r3, r3, #4
 8005e8a:	6013      	str	r3, [r2, #0]
}
 8005e8c:	bf00      	nop
 8005e8e:	46bd      	mov	sp, r7
 8005e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e94:	4770      	bx	lr
 8005e96:	bf00      	nop
 8005e98:	40021000 	.word	0x40021000

08005e9c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005e9c:	b580      	push	{r7, lr}
 8005e9e:	b084      	sub	sp, #16
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	6078      	str	r0, [r7, #4]
 8005ea4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005ea6:	2300      	movs	r3, #0
 8005ea8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005eaa:	4b74      	ldr	r3, [pc, #464]	@ (800607c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005eac:	68db      	ldr	r3, [r3, #12]
 8005eae:	f003 0303 	and.w	r3, r3, #3
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d018      	beq.n	8005ee8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005eb6:	4b71      	ldr	r3, [pc, #452]	@ (800607c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005eb8:	68db      	ldr	r3, [r3, #12]
 8005eba:	f003 0203 	and.w	r2, r3, #3
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	429a      	cmp	r2, r3
 8005ec4:	d10d      	bne.n	8005ee2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
       ||
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d009      	beq.n	8005ee2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8005ece:	4b6b      	ldr	r3, [pc, #428]	@ (800607c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005ed0:	68db      	ldr	r3, [r3, #12]
 8005ed2:	091b      	lsrs	r3, r3, #4
 8005ed4:	f003 0307 	and.w	r3, r3, #7
 8005ed8:	1c5a      	adds	r2, r3, #1
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	685b      	ldr	r3, [r3, #4]
       ||
 8005ede:	429a      	cmp	r2, r3
 8005ee0:	d047      	beq.n	8005f72 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005ee2:	2301      	movs	r3, #1
 8005ee4:	73fb      	strb	r3, [r7, #15]
 8005ee6:	e044      	b.n	8005f72 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	2b03      	cmp	r3, #3
 8005eee:	d018      	beq.n	8005f22 <RCCEx_PLLSAI1_Config+0x86>
 8005ef0:	2b03      	cmp	r3, #3
 8005ef2:	d825      	bhi.n	8005f40 <RCCEx_PLLSAI1_Config+0xa4>
 8005ef4:	2b01      	cmp	r3, #1
 8005ef6:	d002      	beq.n	8005efe <RCCEx_PLLSAI1_Config+0x62>
 8005ef8:	2b02      	cmp	r3, #2
 8005efa:	d009      	beq.n	8005f10 <RCCEx_PLLSAI1_Config+0x74>
 8005efc:	e020      	b.n	8005f40 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005efe:	4b5f      	ldr	r3, [pc, #380]	@ (800607c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	f003 0302 	and.w	r3, r3, #2
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d11d      	bne.n	8005f46 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8005f0a:	2301      	movs	r3, #1
 8005f0c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005f0e:	e01a      	b.n	8005f46 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005f10:	4b5a      	ldr	r3, [pc, #360]	@ (800607c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d116      	bne.n	8005f4a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8005f1c:	2301      	movs	r3, #1
 8005f1e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005f20:	e013      	b.n	8005f4a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005f22:	4b56      	ldr	r3, [pc, #344]	@ (800607c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d10f      	bne.n	8005f4e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005f2e:	4b53      	ldr	r3, [pc, #332]	@ (800607c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d109      	bne.n	8005f4e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8005f3a:	2301      	movs	r3, #1
 8005f3c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005f3e:	e006      	b.n	8005f4e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005f40:	2301      	movs	r3, #1
 8005f42:	73fb      	strb	r3, [r7, #15]
      break;
 8005f44:	e004      	b.n	8005f50 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005f46:	bf00      	nop
 8005f48:	e002      	b.n	8005f50 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005f4a:	bf00      	nop
 8005f4c:	e000      	b.n	8005f50 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005f4e:	bf00      	nop
    }

    if(status == HAL_OK)
 8005f50:	7bfb      	ldrb	r3, [r7, #15]
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d10d      	bne.n	8005f72 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005f56:	4b49      	ldr	r3, [pc, #292]	@ (800607c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005f58:	68db      	ldr	r3, [r3, #12]
 8005f5a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	6819      	ldr	r1, [r3, #0]
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	685b      	ldr	r3, [r3, #4]
 8005f66:	3b01      	subs	r3, #1
 8005f68:	011b      	lsls	r3, r3, #4
 8005f6a:	430b      	orrs	r3, r1
 8005f6c:	4943      	ldr	r1, [pc, #268]	@ (800607c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005f6e:	4313      	orrs	r3, r2
 8005f70:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005f72:	7bfb      	ldrb	r3, [r7, #15]
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d17c      	bne.n	8006072 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005f78:	4b40      	ldr	r3, [pc, #256]	@ (800607c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	4a3f      	ldr	r2, [pc, #252]	@ (800607c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005f7e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005f82:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005f84:	f7fc fa8c 	bl	80024a0 <HAL_GetTick>
 8005f88:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005f8a:	e009      	b.n	8005fa0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005f8c:	f7fc fa88 	bl	80024a0 <HAL_GetTick>
 8005f90:	4602      	mov	r2, r0
 8005f92:	68bb      	ldr	r3, [r7, #8]
 8005f94:	1ad3      	subs	r3, r2, r3
 8005f96:	2b02      	cmp	r3, #2
 8005f98:	d902      	bls.n	8005fa0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005f9a:	2303      	movs	r3, #3
 8005f9c:	73fb      	strb	r3, [r7, #15]
        break;
 8005f9e:	e005      	b.n	8005fac <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005fa0:	4b36      	ldr	r3, [pc, #216]	@ (800607c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d1ef      	bne.n	8005f8c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005fac:	7bfb      	ldrb	r3, [r7, #15]
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d15f      	bne.n	8006072 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005fb2:	683b      	ldr	r3, [r7, #0]
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d110      	bne.n	8005fda <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005fb8:	4b30      	ldr	r3, [pc, #192]	@ (800607c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005fba:	691b      	ldr	r3, [r3, #16]
 8005fbc:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8005fc0:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005fc4:	687a      	ldr	r2, [r7, #4]
 8005fc6:	6892      	ldr	r2, [r2, #8]
 8005fc8:	0211      	lsls	r1, r2, #8
 8005fca:	687a      	ldr	r2, [r7, #4]
 8005fcc:	68d2      	ldr	r2, [r2, #12]
 8005fce:	06d2      	lsls	r2, r2, #27
 8005fd0:	430a      	orrs	r2, r1
 8005fd2:	492a      	ldr	r1, [pc, #168]	@ (800607c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005fd4:	4313      	orrs	r3, r2
 8005fd6:	610b      	str	r3, [r1, #16]
 8005fd8:	e027      	b.n	800602a <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005fda:	683b      	ldr	r3, [r7, #0]
 8005fdc:	2b01      	cmp	r3, #1
 8005fde:	d112      	bne.n	8006006 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005fe0:	4b26      	ldr	r3, [pc, #152]	@ (800607c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005fe2:	691b      	ldr	r3, [r3, #16]
 8005fe4:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8005fe8:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005fec:	687a      	ldr	r2, [r7, #4]
 8005fee:	6892      	ldr	r2, [r2, #8]
 8005ff0:	0211      	lsls	r1, r2, #8
 8005ff2:	687a      	ldr	r2, [r7, #4]
 8005ff4:	6912      	ldr	r2, [r2, #16]
 8005ff6:	0852      	lsrs	r2, r2, #1
 8005ff8:	3a01      	subs	r2, #1
 8005ffa:	0552      	lsls	r2, r2, #21
 8005ffc:	430a      	orrs	r2, r1
 8005ffe:	491f      	ldr	r1, [pc, #124]	@ (800607c <RCCEx_PLLSAI1_Config+0x1e0>)
 8006000:	4313      	orrs	r3, r2
 8006002:	610b      	str	r3, [r1, #16]
 8006004:	e011      	b.n	800602a <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006006:	4b1d      	ldr	r3, [pc, #116]	@ (800607c <RCCEx_PLLSAI1_Config+0x1e0>)
 8006008:	691b      	ldr	r3, [r3, #16]
 800600a:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800600e:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8006012:	687a      	ldr	r2, [r7, #4]
 8006014:	6892      	ldr	r2, [r2, #8]
 8006016:	0211      	lsls	r1, r2, #8
 8006018:	687a      	ldr	r2, [r7, #4]
 800601a:	6952      	ldr	r2, [r2, #20]
 800601c:	0852      	lsrs	r2, r2, #1
 800601e:	3a01      	subs	r2, #1
 8006020:	0652      	lsls	r2, r2, #25
 8006022:	430a      	orrs	r2, r1
 8006024:	4915      	ldr	r1, [pc, #84]	@ (800607c <RCCEx_PLLSAI1_Config+0x1e0>)
 8006026:	4313      	orrs	r3, r2
 8006028:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800602a:	4b14      	ldr	r3, [pc, #80]	@ (800607c <RCCEx_PLLSAI1_Config+0x1e0>)
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	4a13      	ldr	r2, [pc, #76]	@ (800607c <RCCEx_PLLSAI1_Config+0x1e0>)
 8006030:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006034:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006036:	f7fc fa33 	bl	80024a0 <HAL_GetTick>
 800603a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800603c:	e009      	b.n	8006052 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800603e:	f7fc fa2f 	bl	80024a0 <HAL_GetTick>
 8006042:	4602      	mov	r2, r0
 8006044:	68bb      	ldr	r3, [r7, #8]
 8006046:	1ad3      	subs	r3, r2, r3
 8006048:	2b02      	cmp	r3, #2
 800604a:	d902      	bls.n	8006052 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 800604c:	2303      	movs	r3, #3
 800604e:	73fb      	strb	r3, [r7, #15]
          break;
 8006050:	e005      	b.n	800605e <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006052:	4b0a      	ldr	r3, [pc, #40]	@ (800607c <RCCEx_PLLSAI1_Config+0x1e0>)
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800605a:	2b00      	cmp	r3, #0
 800605c:	d0ef      	beq.n	800603e <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800605e:	7bfb      	ldrb	r3, [r7, #15]
 8006060:	2b00      	cmp	r3, #0
 8006062:	d106      	bne.n	8006072 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8006064:	4b05      	ldr	r3, [pc, #20]	@ (800607c <RCCEx_PLLSAI1_Config+0x1e0>)
 8006066:	691a      	ldr	r2, [r3, #16]
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	699b      	ldr	r3, [r3, #24]
 800606c:	4903      	ldr	r1, [pc, #12]	@ (800607c <RCCEx_PLLSAI1_Config+0x1e0>)
 800606e:	4313      	orrs	r3, r2
 8006070:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8006072:	7bfb      	ldrb	r3, [r7, #15]
}
 8006074:	4618      	mov	r0, r3
 8006076:	3710      	adds	r7, #16
 8006078:	46bd      	mov	sp, r7
 800607a:	bd80      	pop	{r7, pc}
 800607c:	40021000 	.word	0x40021000

08006080 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8006080:	b580      	push	{r7, lr}
 8006082:	b084      	sub	sp, #16
 8006084:	af00      	add	r7, sp, #0
 8006086:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8006088:	2301      	movs	r3, #1
 800608a:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	2b00      	cmp	r3, #0
 8006090:	d079      	beq.n	8006186 <HAL_RTC_Init+0x106>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8006098:	b2db      	uxtb	r3, r3
 800609a:	2b00      	cmp	r3, #0
 800609c:	d106      	bne.n	80060ac <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	2200      	movs	r2, #0
 80060a2:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 80060a6:	6878      	ldr	r0, [r7, #4]
 80060a8:	f7fc f864 	bl	8002174 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	2202      	movs	r2, #2
 80060b0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	68db      	ldr	r3, [r3, #12]
 80060ba:	f003 0310 	and.w	r3, r3, #16
 80060be:	2b10      	cmp	r3, #16
 80060c0:	d058      	beq.n	8006174 <HAL_RTC_Init+0xf4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	22ca      	movs	r2, #202	@ 0xca
 80060c8:	625a      	str	r2, [r3, #36]	@ 0x24
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	2253      	movs	r2, #83	@ 0x53
 80060d0:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 80060d2:	6878      	ldr	r0, [r7, #4]
 80060d4:	f000 fb26 	bl	8006724 <RTC_EnterInitMode>
 80060d8:	4603      	mov	r3, r0
 80060da:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 80060dc:	7bfb      	ldrb	r3, [r7, #15]
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d127      	bne.n	8006132 <HAL_RTC_Init+0xb2>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	689b      	ldr	r3, [r3, #8]
 80060e8:	687a      	ldr	r2, [r7, #4]
 80060ea:	6812      	ldr	r2, [r2, #0]
 80060ec:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 80060f0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80060f4:	6093      	str	r3, [r2, #8]
#endif
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	6899      	ldr	r1, [r3, #8]
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	685a      	ldr	r2, [r3, #4]
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	691b      	ldr	r3, [r3, #16]
 8006104:	431a      	orrs	r2, r3
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	699b      	ldr	r3, [r3, #24]
 800610a:	431a      	orrs	r2, r3
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	430a      	orrs	r2, r1
 8006112:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	687a      	ldr	r2, [r7, #4]
 800611a:	68d2      	ldr	r2, [r2, #12]
 800611c:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	6919      	ldr	r1, [r3, #16]
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	689b      	ldr	r3, [r3, #8]
 8006128:	041a      	lsls	r2, r3, #16
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	430a      	orrs	r2, r1
 8006130:	611a      	str	r2, [r3, #16]
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif
      }

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8006132:	6878      	ldr	r0, [r7, #4]
 8006134:	f000 fb2a 	bl	800678c <RTC_ExitInitMode>
 8006138:	4603      	mov	r3, r0
 800613a:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 800613c:	7bfb      	ldrb	r3, [r7, #15]
 800613e:	2b00      	cmp	r3, #0
 8006140:	d113      	bne.n	800616a <HAL_RTC_Init+0xea>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	f022 0203 	bic.w	r2, r2, #3
 8006150:	64da      	str	r2, [r3, #76]	@ 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	69da      	ldr	r2, [r3, #28]
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	695b      	ldr	r3, [r3, #20]
 8006160:	431a      	orrs	r2, r3
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	430a      	orrs	r2, r1
 8006168:	64da      	str	r2, [r3, #76]	@ 0x4c
#endif
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	22ff      	movs	r2, #255	@ 0xff
 8006170:	625a      	str	r2, [r3, #36]	@ 0x24
 8006172:	e001      	b.n	8006178 <HAL_RTC_Init+0xf8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8006174:	2300      	movs	r3, #0
 8006176:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8006178:	7bfb      	ldrb	r3, [r7, #15]
 800617a:	2b00      	cmp	r3, #0
 800617c:	d103      	bne.n	8006186 <HAL_RTC_Init+0x106>
    {
        hrtc->State = HAL_RTC_STATE_READY;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	2201      	movs	r2, #1
 8006182:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
  }

  return status;
 8006186:	7bfb      	ldrb	r3, [r7, #15]
}
 8006188:	4618      	mov	r0, r3
 800618a:	3710      	adds	r7, #16
 800618c:	46bd      	mov	sp, r7
 800618e:	bd80      	pop	{r7, pc}

08006190 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8006190:	b590      	push	{r4, r7, lr}
 8006192:	b087      	sub	sp, #28
 8006194:	af00      	add	r7, sp, #0
 8006196:	60f8      	str	r0, [r7, #12]
 8006198:	60b9      	str	r1, [r7, #8]
 800619a:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	f893 3020 	ldrb.w	r3, [r3, #32]
 80061a2:	2b01      	cmp	r3, #1
 80061a4:	d101      	bne.n	80061aa <HAL_RTC_SetTime+0x1a>
 80061a6:	2302      	movs	r3, #2
 80061a8:	e08b      	b.n	80062c2 <HAL_RTC_SetTime+0x132>
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	2201      	movs	r2, #1
 80061ae:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	2202      	movs	r2, #2
 80061b6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	22ca      	movs	r2, #202	@ 0xca
 80061c0:	625a      	str	r2, [r3, #36]	@ 0x24
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	2253      	movs	r2, #83	@ 0x53
 80061c8:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80061ca:	68f8      	ldr	r0, [r7, #12]
 80061cc:	f000 faaa 	bl	8006724 <RTC_EnterInitMode>
 80061d0:	4603      	mov	r3, r0
 80061d2:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 80061d4:	7cfb      	ldrb	r3, [r7, #19]
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d163      	bne.n	80062a2 <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d126      	bne.n	800622e <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	689b      	ldr	r3, [r3, #8]
 80061e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d102      	bne.n	80061f4 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 80061ee:	68bb      	ldr	r3, [r7, #8]
 80061f0:	2200      	movs	r2, #0
 80061f2:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80061f4:	68bb      	ldr	r3, [r7, #8]
 80061f6:	781b      	ldrb	r3, [r3, #0]
 80061f8:	4618      	mov	r0, r3
 80061fa:	f000 fb05 	bl	8006808 <RTC_ByteToBcd2>
 80061fe:	4603      	mov	r3, r0
 8006200:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006202:	68bb      	ldr	r3, [r7, #8]
 8006204:	785b      	ldrb	r3, [r3, #1]
 8006206:	4618      	mov	r0, r3
 8006208:	f000 fafe 	bl	8006808 <RTC_ByteToBcd2>
 800620c:	4603      	mov	r3, r0
 800620e:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8006210:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8006212:	68bb      	ldr	r3, [r7, #8]
 8006214:	789b      	ldrb	r3, [r3, #2]
 8006216:	4618      	mov	r0, r3
 8006218:	f000 faf6 	bl	8006808 <RTC_ByteToBcd2>
 800621c:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800621e:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8006222:	68bb      	ldr	r3, [r7, #8]
 8006224:	78db      	ldrb	r3, [r3, #3]
 8006226:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8006228:	4313      	orrs	r3, r2
 800622a:	617b      	str	r3, [r7, #20]
 800622c:	e018      	b.n	8006260 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	689b      	ldr	r3, [r3, #8]
 8006234:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006238:	2b00      	cmp	r3, #0
 800623a:	d102      	bne.n	8006242 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800623c:	68bb      	ldr	r3, [r7, #8]
 800623e:	2200      	movs	r2, #0
 8006240:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8006242:	68bb      	ldr	r3, [r7, #8]
 8006244:	781b      	ldrb	r3, [r3, #0]
 8006246:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006248:	68bb      	ldr	r3, [r7, #8]
 800624a:	785b      	ldrb	r3, [r3, #1]
 800624c:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800624e:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8006250:	68ba      	ldr	r2, [r7, #8]
 8006252:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006254:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8006256:	68bb      	ldr	r3, [r7, #8]
 8006258:	78db      	ldrb	r3, [r3, #3]
 800625a:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800625c:	4313      	orrs	r3, r2
 800625e:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	681a      	ldr	r2, [r3, #0]
 8006264:	697b      	ldr	r3, [r7, #20]
 8006266:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 800626a:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 800626e:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	689a      	ldr	r2, [r3, #8]
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800627e:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	6899      	ldr	r1, [r3, #8]
 8006286:	68bb      	ldr	r3, [r7, #8]
 8006288:	68da      	ldr	r2, [r3, #12]
 800628a:	68bb      	ldr	r3, [r7, #8]
 800628c:	691b      	ldr	r3, [r3, #16]
 800628e:	431a      	orrs	r2, r3
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	430a      	orrs	r2, r1
 8006296:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8006298:	68f8      	ldr	r0, [r7, #12]
 800629a:	f000 fa77 	bl	800678c <RTC_ExitInitMode>
 800629e:	4603      	mov	r3, r0
 80062a0:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	22ff      	movs	r2, #255	@ 0xff
 80062a8:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 80062aa:	7cfb      	ldrb	r3, [r7, #19]
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d103      	bne.n	80062b8 <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	2201      	movs	r2, #1
 80062b4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	2200      	movs	r2, #0
 80062bc:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 80062c0:	7cfb      	ldrb	r3, [r7, #19]
}
 80062c2:	4618      	mov	r0, r3
 80062c4:	371c      	adds	r7, #28
 80062c6:	46bd      	mov	sp, r7
 80062c8:	bd90      	pop	{r4, r7, pc}

080062ca <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80062ca:	b590      	push	{r4, r7, lr}
 80062cc:	b087      	sub	sp, #28
 80062ce:	af00      	add	r7, sp, #0
 80062d0:	60f8      	str	r0, [r7, #12]
 80062d2:	60b9      	str	r1, [r7, #8]
 80062d4:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80062dc:	2b01      	cmp	r3, #1
 80062de:	d101      	bne.n	80062e4 <HAL_RTC_SetDate+0x1a>
 80062e0:	2302      	movs	r3, #2
 80062e2:	e075      	b.n	80063d0 <HAL_RTC_SetDate+0x106>
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	2201      	movs	r2, #1
 80062e8:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	2202      	movs	r2, #2
 80062f0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d10e      	bne.n	8006318 <HAL_RTC_SetDate+0x4e>
 80062fa:	68bb      	ldr	r3, [r7, #8]
 80062fc:	785b      	ldrb	r3, [r3, #1]
 80062fe:	f003 0310 	and.w	r3, r3, #16
 8006302:	2b00      	cmp	r3, #0
 8006304:	d008      	beq.n	8006318 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8006306:	68bb      	ldr	r3, [r7, #8]
 8006308:	785b      	ldrb	r3, [r3, #1]
 800630a:	f023 0310 	bic.w	r3, r3, #16
 800630e:	b2db      	uxtb	r3, r3
 8006310:	330a      	adds	r3, #10
 8006312:	b2da      	uxtb	r2, r3
 8006314:	68bb      	ldr	r3, [r7, #8]
 8006316:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	2b00      	cmp	r3, #0
 800631c:	d11c      	bne.n	8006358 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800631e:	68bb      	ldr	r3, [r7, #8]
 8006320:	78db      	ldrb	r3, [r3, #3]
 8006322:	4618      	mov	r0, r3
 8006324:	f000 fa70 	bl	8006808 <RTC_ByteToBcd2>
 8006328:	4603      	mov	r3, r0
 800632a:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800632c:	68bb      	ldr	r3, [r7, #8]
 800632e:	785b      	ldrb	r3, [r3, #1]
 8006330:	4618      	mov	r0, r3
 8006332:	f000 fa69 	bl	8006808 <RTC_ByteToBcd2>
 8006336:	4603      	mov	r3, r0
 8006338:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800633a:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 800633c:	68bb      	ldr	r3, [r7, #8]
 800633e:	789b      	ldrb	r3, [r3, #2]
 8006340:	4618      	mov	r0, r3
 8006342:	f000 fa61 	bl	8006808 <RTC_ByteToBcd2>
 8006346:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8006348:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 800634c:	68bb      	ldr	r3, [r7, #8]
 800634e:	781b      	ldrb	r3, [r3, #0]
 8006350:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8006352:	4313      	orrs	r3, r2
 8006354:	617b      	str	r3, [r7, #20]
 8006356:	e00e      	b.n	8006376 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8006358:	68bb      	ldr	r3, [r7, #8]
 800635a:	78db      	ldrb	r3, [r3, #3]
 800635c:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800635e:	68bb      	ldr	r3, [r7, #8]
 8006360:	785b      	ldrb	r3, [r3, #1]
 8006362:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8006364:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 8006366:	68ba      	ldr	r2, [r7, #8]
 8006368:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800636a:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800636c:	68bb      	ldr	r3, [r7, #8]
 800636e:	781b      	ldrb	r3, [r3, #0]
 8006370:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8006372:	4313      	orrs	r3, r2
 8006374:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	22ca      	movs	r2, #202	@ 0xca
 800637c:	625a      	str	r2, [r3, #36]	@ 0x24
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	2253      	movs	r2, #83	@ 0x53
 8006384:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8006386:	68f8      	ldr	r0, [r7, #12]
 8006388:	f000 f9cc 	bl	8006724 <RTC_EnterInitMode>
 800638c:	4603      	mov	r3, r0
 800638e:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8006390:	7cfb      	ldrb	r3, [r7, #19]
 8006392:	2b00      	cmp	r3, #0
 8006394:	d10c      	bne.n	80063b0 <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	681a      	ldr	r2, [r3, #0]
 800639a:	697b      	ldr	r3, [r7, #20]
 800639c:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80063a0:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80063a4:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80063a6:	68f8      	ldr	r0, [r7, #12]
 80063a8:	f000 f9f0 	bl	800678c <RTC_ExitInitMode>
 80063ac:	4603      	mov	r3, r0
 80063ae:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	22ff      	movs	r2, #255	@ 0xff
 80063b6:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 80063b8:	7cfb      	ldrb	r3, [r7, #19]
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d103      	bne.n	80063c6 <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	2201      	movs	r2, #1
 80063c2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	2200      	movs	r2, #0
 80063ca:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 80063ce:	7cfb      	ldrb	r3, [r7, #19]
}
 80063d0:	4618      	mov	r0, r3
 80063d2:	371c      	adds	r7, #28
 80063d4:	46bd      	mov	sp, r7
 80063d6:	bd90      	pop	{r4, r7, pc}

080063d8 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 80063d8:	b590      	push	{r4, r7, lr}
 80063da:	b089      	sub	sp, #36	@ 0x24
 80063dc:	af00      	add	r7, sp, #0
 80063de:	60f8      	str	r0, [r7, #12]
 80063e0:	60b9      	str	r1, [r7, #8]
 80063e2:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80063ea:	2b01      	cmp	r3, #1
 80063ec:	d101      	bne.n	80063f2 <HAL_RTC_SetAlarm_IT+0x1a>
 80063ee:	2302      	movs	r3, #2
 80063f0:	e127      	b.n	8006642 <HAL_RTC_SetAlarm_IT+0x26a>
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	2201      	movs	r2, #1
 80063f6:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	2202      	movs	r2, #2
 80063fe:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  if (Format == RTC_FORMAT_BIN)
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	2b00      	cmp	r3, #0
 8006406:	d137      	bne.n	8006478 <HAL_RTC_SetAlarm_IT+0xa0>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	689b      	ldr	r3, [r3, #8]
 800640e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006412:	2b00      	cmp	r3, #0
 8006414:	d102      	bne.n	800641c <HAL_RTC_SetAlarm_IT+0x44>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8006416:	68bb      	ldr	r3, [r7, #8]
 8006418:	2200      	movs	r2, #0
 800641a:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800641c:	68bb      	ldr	r3, [r7, #8]
 800641e:	781b      	ldrb	r3, [r3, #0]
 8006420:	4618      	mov	r0, r3
 8006422:	f000 f9f1 	bl	8006808 <RTC_ByteToBcd2>
 8006426:	4603      	mov	r3, r0
 8006428:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800642a:	68bb      	ldr	r3, [r7, #8]
 800642c:	785b      	ldrb	r3, [r3, #1]
 800642e:	4618      	mov	r0, r3
 8006430:	f000 f9ea 	bl	8006808 <RTC_ByteToBcd2>
 8006434:	4603      	mov	r3, r0
 8006436:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006438:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800643a:	68bb      	ldr	r3, [r7, #8]
 800643c:	789b      	ldrb	r3, [r3, #2]
 800643e:	4618      	mov	r0, r3
 8006440:	f000 f9e2 	bl	8006808 <RTC_ByteToBcd2>
 8006444:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8006446:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800644a:	68bb      	ldr	r3, [r7, #8]
 800644c:	78db      	ldrb	r3, [r3, #3]
 800644e:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8006450:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8006454:	68bb      	ldr	r3, [r7, #8]
 8006456:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800645a:	4618      	mov	r0, r3
 800645c:	f000 f9d4 	bl	8006808 <RTC_ByteToBcd2>
 8006460:	4603      	mov	r3, r0
 8006462:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8006464:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8006468:	68bb      	ldr	r3, [r7, #8]
 800646a:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800646c:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800646e:	68bb      	ldr	r3, [r7, #8]
 8006470:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006472:	4313      	orrs	r3, r2
 8006474:	61fb      	str	r3, [r7, #28]
 8006476:	e023      	b.n	80064c0 <HAL_RTC_SetAlarm_IT+0xe8>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	689b      	ldr	r3, [r3, #8]
 800647e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006482:	2b00      	cmp	r3, #0
 8006484:	d102      	bne.n	800648c <HAL_RTC_SetAlarm_IT+0xb4>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8006486:	68bb      	ldr	r3, [r7, #8]
 8006488:	2200      	movs	r2, #0
 800648a:	70da      	strb	r2, [r3, #3]
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

#endif /* USE_FULL_ASSERT */
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800648c:	68bb      	ldr	r3, [r7, #8]
 800648e:	781b      	ldrb	r3, [r3, #0]
 8006490:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8006492:	68bb      	ldr	r3, [r7, #8]
 8006494:	785b      	ldrb	r3, [r3, #1]
 8006496:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006498:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800649a:	68ba      	ldr	r2, [r7, #8]
 800649c:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800649e:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80064a0:	68bb      	ldr	r3, [r7, #8]
 80064a2:	78db      	ldrb	r3, [r3, #3]
 80064a4:	059b      	lsls	r3, r3, #22
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80064a6:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80064a8:	68bb      	ldr	r3, [r7, #8]
 80064aa:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80064ae:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80064b0:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80064b2:	68bb      	ldr	r3, [r7, #8]
 80064b4:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80064b6:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80064b8:	68bb      	ldr	r3, [r7, #8]
 80064ba:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80064bc:	4313      	orrs	r3, r2
 80064be:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 80064c0:	68bb      	ldr	r3, [r7, #8]
 80064c2:	685a      	ldr	r2, [r3, #4]
 80064c4:	68bb      	ldr	r3, [r7, #8]
 80064c6:	69db      	ldr	r3, [r3, #28]
 80064c8:	4313      	orrs	r3, r2
 80064ca:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	22ca      	movs	r2, #202	@ 0xca
 80064d2:	625a      	str	r2, [r3, #36]	@ 0x24
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	2253      	movs	r2, #83	@ 0x53
 80064da:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 80064dc:	68bb      	ldr	r3, [r7, #8]
 80064de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064e0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80064e4:	d14a      	bne.n	800657c <HAL_RTC_SetAlarm_IT+0x1a4>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	689a      	ldr	r2, [r3, #8]
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80064f4:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	68db      	ldr	r3, [r3, #12]
 80064fc:	b2da      	uxtb	r2, r3
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	f462 72c0 	orn	r2, r2, #384	@ 0x180
 8006506:	60da      	str	r2, [r3, #12]

#if defined (RTC_FLAG_ALRAWF)
    uint32_t tickstart = HAL_GetTick();
 8006508:	f7fb ffca 	bl	80024a0 <HAL_GetTick>
 800650c:	6138      	str	r0, [r7, #16]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800650e:	e015      	b.n	800653c <HAL_RTC_SetAlarm_IT+0x164>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006510:	f7fb ffc6 	bl	80024a0 <HAL_GetTick>
 8006514:	4602      	mov	r2, r0
 8006516:	693b      	ldr	r3, [r7, #16]
 8006518:	1ad3      	subs	r3, r2, r3
 800651a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800651e:	d90d      	bls.n	800653c <HAL_RTC_SetAlarm_IT+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	22ff      	movs	r2, #255	@ 0xff
 8006526:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	2203      	movs	r2, #3
 800652c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	2200      	movs	r2, #0
 8006534:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8006538:	2303      	movs	r3, #3
 800653a:	e082      	b.n	8006642 <HAL_RTC_SetAlarm_IT+0x26a>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	68db      	ldr	r3, [r3, #12]
 8006542:	f003 0301 	and.w	r3, r3, #1
 8006546:	2b00      	cmp	r3, #0
 8006548:	d0e2      	beq.n	8006510 <HAL_RTC_SetAlarm_IT+0x138>
      }
    }
#endif

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	69fa      	ldr	r2, [r7, #28]
 8006550:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	69ba      	ldr	r2, [r7, #24]
 8006558:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	689a      	ldr	r2, [r3, #8]
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006568:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	689a      	ldr	r2, [r3, #8]
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006578:	609a      	str	r2, [r3, #8]
 800657a:	e049      	b.n	8006610 <HAL_RTC_SetAlarm_IT+0x238>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	689a      	ldr	r2, [r3, #8]
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800658a:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	68db      	ldr	r3, [r3, #12]
 8006592:	b2da      	uxtb	r2, r3
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	f462 7220 	orn	r2, r2, #640	@ 0x280
 800659c:	60da      	str	r2, [r3, #12]

#if defined (RTC_FLAG_ALRBWF)
    uint32_t tickstart = HAL_GetTick();
 800659e:	f7fb ff7f 	bl	80024a0 <HAL_GetTick>
 80065a2:	6178      	str	r0, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 80065a4:	e015      	b.n	80065d2 <HAL_RTC_SetAlarm_IT+0x1fa>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80065a6:	f7fb ff7b 	bl	80024a0 <HAL_GetTick>
 80065aa:	4602      	mov	r2, r0
 80065ac:	697b      	ldr	r3, [r7, #20]
 80065ae:	1ad3      	subs	r3, r2, r3
 80065b0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80065b4:	d90d      	bls.n	80065d2 <HAL_RTC_SetAlarm_IT+0x1fa>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	22ff      	movs	r2, #255	@ 0xff
 80065bc:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	2203      	movs	r2, #3
 80065c2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	2200      	movs	r2, #0
 80065ca:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 80065ce:	2303      	movs	r3, #3
 80065d0:	e037      	b.n	8006642 <HAL_RTC_SetAlarm_IT+0x26a>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	68db      	ldr	r3, [r3, #12]
 80065d8:	f003 0302 	and.w	r3, r3, #2
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d0e2      	beq.n	80065a6 <HAL_RTC_SetAlarm_IT+0x1ce>
      }
    }
#endif

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	69fa      	ldr	r2, [r7, #28]
 80065e6:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	69ba      	ldr	r2, [r7, #24]
 80065ee:	649a      	str	r2, [r3, #72]	@ 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	689a      	ldr	r2, [r3, #8]
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80065fe:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	689a      	ldr	r2, [r3, #8]
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800660e:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8006610:	4b0e      	ldr	r3, [pc, #56]	@ (800664c <HAL_RTC_SetAlarm_IT+0x274>)
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	4a0d      	ldr	r2, [pc, #52]	@ (800664c <HAL_RTC_SetAlarm_IT+0x274>)
 8006616:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800661a:	6013      	str	r3, [r2, #0]
  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 800661c:	4b0b      	ldr	r3, [pc, #44]	@ (800664c <HAL_RTC_SetAlarm_IT+0x274>)
 800661e:	689b      	ldr	r3, [r3, #8]
 8006620:	4a0a      	ldr	r2, [pc, #40]	@ (800664c <HAL_RTC_SetAlarm_IT+0x274>)
 8006622:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006626:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	22ff      	movs	r2, #255	@ 0xff
 800662e:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	2201      	movs	r2, #1
 8006634:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	2200      	movs	r2, #0
 800663c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8006640:	2300      	movs	r3, #0
}
 8006642:	4618      	mov	r0, r3
 8006644:	3724      	adds	r7, #36	@ 0x24
 8006646:	46bd      	mov	sp, r7
 8006648:	bd90      	pop	{r4, r7, pc}
 800664a:	bf00      	nop
 800664c:	40010400 	.word	0x40010400

08006650 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8006650:	b580      	push	{r7, lr}
 8006652:	b082      	sub	sp, #8
 8006654:	af00      	add	r7, sp, #0
 8006656:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8006658:	4b1f      	ldr	r3, [pc, #124]	@ (80066d8 <HAL_RTC_AlarmIRQHandler+0x88>)
 800665a:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800665e:	615a      	str	r2, [r3, #20]
  }

#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  /* Get the AlarmA interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	689b      	ldr	r3, [r3, #8]
 8006666:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800666a:	2b00      	cmp	r3, #0
 800666c:	d012      	beq.n	8006694 <HAL_RTC_AlarmIRQHandler+0x44>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	68db      	ldr	r3, [r3, #12]
 8006674:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006678:	2b00      	cmp	r3, #0
 800667a:	d00b      	beq.n	8006694 <HAL_RTC_AlarmIRQHandler+0x44>
    {
      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	68db      	ldr	r3, [r3, #12]
 8006682:	b2da      	uxtb	r2, r3
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	f462 72c0 	orn	r2, r2, #384	@ 0x180
 800668c:	60da      	str	r2, [r3, #12]

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 800668e:	6878      	ldr	r0, [r7, #4]
 8006690:	f7fb fc4a 	bl	8001f28 <HAL_RTC_AlarmAEventCallback>
#endif
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	689b      	ldr	r3, [r3, #8]
 800669a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d012      	beq.n	80066c8 <HAL_RTC_AlarmIRQHandler+0x78>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	68db      	ldr	r3, [r3, #12]
 80066a8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d00b      	beq.n	80066c8 <HAL_RTC_AlarmIRQHandler+0x78>
    {
      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	68db      	ldr	r3, [r3, #12]
 80066b6:	b2da      	uxtb	r2, r3
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	f462 7220 	orn	r2, r2, #640	@ 0x280
 80066c0:	60da      	str	r2, [r3, #12]

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 80066c2:	6878      	ldr	r0, [r7, #4]
 80066c4:	f000 f8c0 	bl	8006848 <HAL_RTCEx_AlarmBEventCallback>
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	2201      	movs	r2, #1
 80066cc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
}
 80066d0:	bf00      	nop
 80066d2:	3708      	adds	r7, #8
 80066d4:	46bd      	mov	sp, r7
 80066d6:	bd80      	pop	{r7, pc}
 80066d8:	40010400 	.word	0x40010400

080066dc <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80066dc:	b580      	push	{r7, lr}
 80066de:	b084      	sub	sp, #16
 80066e0:	af00      	add	r7, sp, #0
 80066e2:	6078      	str	r0, [r7, #4]
#elif defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  /* Clear RSF flag (use a read-modify-write sequence to preserve the other read-write bits) */
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	4a0d      	ldr	r2, [pc, #52]	@ (8006720 <HAL_RTC_WaitForSynchro+0x44>)
 80066ea:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 80066ec:	f7fb fed8 	bl	80024a0 <HAL_GetTick>
 80066f0:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80066f2:	e009      	b.n	8006708 <HAL_RTC_WaitForSynchro+0x2c>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80066f4:	f7fb fed4 	bl	80024a0 <HAL_GetTick>
 80066f8:	4602      	mov	r2, r0
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	1ad3      	subs	r3, r2, r3
 80066fe:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006702:	d901      	bls.n	8006708 <HAL_RTC_WaitForSynchro+0x2c>
    {
      return HAL_TIMEOUT;
 8006704:	2303      	movs	r3, #3
 8006706:	e007      	b.n	8006718 <HAL_RTC_WaitForSynchro+0x3c>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	68db      	ldr	r3, [r3, #12]
 800670e:	f003 0320 	and.w	r3, r3, #32
 8006712:	2b00      	cmp	r3, #0
 8006714:	d0ee      	beq.n	80066f4 <HAL_RTC_WaitForSynchro+0x18>
    }
  }

  return HAL_OK;
 8006716:	2300      	movs	r3, #0
}
 8006718:	4618      	mov	r0, r3
 800671a:	3710      	adds	r7, #16
 800671c:	46bd      	mov	sp, r7
 800671e:	bd80      	pop	{r7, pc}
 8006720:	0003ff5f 	.word	0x0003ff5f

08006724 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8006724:	b580      	push	{r7, lr}
 8006726:	b084      	sub	sp, #16
 8006728:	af00      	add	r7, sp, #0
 800672a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800672c:	2300      	movs	r3, #0
 800672e:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	68db      	ldr	r3, [r3, #12]
 8006736:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800673a:	2b00      	cmp	r3, #0
 800673c:	d120      	bne.n	8006780 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006746:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8006748:	f7fb feaa 	bl	80024a0 <HAL_GetTick>
 800674c:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800674e:	e00d      	b.n	800676c <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8006750:	f7fb fea6 	bl	80024a0 <HAL_GetTick>
 8006754:	4602      	mov	r2, r0
 8006756:	68bb      	ldr	r3, [r7, #8]
 8006758:	1ad3      	subs	r3, r2, r3
 800675a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800675e:	d905      	bls.n	800676c <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8006760:	2303      	movs	r3, #3
 8006762:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	2203      	movs	r2, #3
 8006768:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	68db      	ldr	r3, [r3, #12]
 8006772:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006776:	2b00      	cmp	r3, #0
 8006778:	d102      	bne.n	8006780 <RTC_EnterInitMode+0x5c>
 800677a:	7bfb      	ldrb	r3, [r7, #15]
 800677c:	2b03      	cmp	r3, #3
 800677e:	d1e7      	bne.n	8006750 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 8006780:	7bfb      	ldrb	r3, [r7, #15]
}
 8006782:	4618      	mov	r0, r3
 8006784:	3710      	adds	r7, #16
 8006786:	46bd      	mov	sp, r7
 8006788:	bd80      	pop	{r7, pc}
	...

0800678c <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800678c:	b580      	push	{r7, lr}
 800678e:	b084      	sub	sp, #16
 8006790:	af00      	add	r7, sp, #0
 8006792:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006794:	2300      	movs	r3, #0
 8006796:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8006798:	4b1a      	ldr	r3, [pc, #104]	@ (8006804 <RTC_ExitInitMode+0x78>)
 800679a:	68db      	ldr	r3, [r3, #12]
 800679c:	4a19      	ldr	r2, [pc, #100]	@ (8006804 <RTC_ExitInitMode+0x78>)
 800679e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80067a2:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 80067a4:	4b17      	ldr	r3, [pc, #92]	@ (8006804 <RTC_ExitInitMode+0x78>)
 80067a6:	689b      	ldr	r3, [r3, #8]
 80067a8:	f003 0320 	and.w	r3, r3, #32
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d10c      	bne.n	80067ca <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80067b0:	6878      	ldr	r0, [r7, #4]
 80067b2:	f7ff ff93 	bl	80066dc <HAL_RTC_WaitForSynchro>
 80067b6:	4603      	mov	r3, r0
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d01e      	beq.n	80067fa <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	2203      	movs	r2, #3
 80067c0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      status = HAL_TIMEOUT;
 80067c4:	2303      	movs	r3, #3
 80067c6:	73fb      	strb	r3, [r7, #15]
 80067c8:	e017      	b.n	80067fa <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80067ca:	4b0e      	ldr	r3, [pc, #56]	@ (8006804 <RTC_ExitInitMode+0x78>)
 80067cc:	689b      	ldr	r3, [r3, #8]
 80067ce:	4a0d      	ldr	r2, [pc, #52]	@ (8006804 <RTC_ExitInitMode+0x78>)
 80067d0:	f023 0320 	bic.w	r3, r3, #32
 80067d4:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80067d6:	6878      	ldr	r0, [r7, #4]
 80067d8:	f7ff ff80 	bl	80066dc <HAL_RTC_WaitForSynchro>
 80067dc:	4603      	mov	r3, r0
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d005      	beq.n	80067ee <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	2203      	movs	r2, #3
 80067e6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      status = HAL_TIMEOUT;
 80067ea:	2303      	movs	r3, #3
 80067ec:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80067ee:	4b05      	ldr	r3, [pc, #20]	@ (8006804 <RTC_ExitInitMode+0x78>)
 80067f0:	689b      	ldr	r3, [r3, #8]
 80067f2:	4a04      	ldr	r2, [pc, #16]	@ (8006804 <RTC_ExitInitMode+0x78>)
 80067f4:	f043 0320 	orr.w	r3, r3, #32
 80067f8:	6093      	str	r3, [r2, #8]
  }

  return status;
 80067fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80067fc:	4618      	mov	r0, r3
 80067fe:	3710      	adds	r7, #16
 8006800:	46bd      	mov	sp, r7
 8006802:	bd80      	pop	{r7, pc}
 8006804:	40002800 	.word	0x40002800

08006808 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8006808:	b480      	push	{r7}
 800680a:	b085      	sub	sp, #20
 800680c:	af00      	add	r7, sp, #0
 800680e:	4603      	mov	r3, r0
 8006810:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8006812:	2300      	movs	r3, #0
 8006814:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 8006816:	79fb      	ldrb	r3, [r7, #7]
 8006818:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 800681a:	e005      	b.n	8006828 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	3301      	adds	r3, #1
 8006820:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 8006822:	7afb      	ldrb	r3, [r7, #11]
 8006824:	3b0a      	subs	r3, #10
 8006826:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 8006828:	7afb      	ldrb	r3, [r7, #11]
 800682a:	2b09      	cmp	r3, #9
 800682c:	d8f6      	bhi.n	800681c <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	b2db      	uxtb	r3, r3
 8006832:	011b      	lsls	r3, r3, #4
 8006834:	b2da      	uxtb	r2, r3
 8006836:	7afb      	ldrb	r3, [r7, #11]
 8006838:	4313      	orrs	r3, r2
 800683a:	b2db      	uxtb	r3, r3
}
 800683c:	4618      	mov	r0, r3
 800683e:	3714      	adds	r7, #20
 8006840:	46bd      	mov	sp, r7
 8006842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006846:	4770      	bx	lr

08006848 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8006848:	b480      	push	{r7}
 800684a:	b083      	sub	sp, #12
 800684c:	af00      	add	r7, sp, #0
 800684e:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8006850:	bf00      	nop
 8006852:	370c      	adds	r7, #12
 8006854:	46bd      	mov	sp, r7
 8006856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800685a:	4770      	bx	lr

0800685c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800685c:	b580      	push	{r7, lr}
 800685e:	b082      	sub	sp, #8
 8006860:	af00      	add	r7, sp, #0
 8006862:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	2b00      	cmp	r3, #0
 8006868:	d101      	bne.n	800686e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800686a:	2301      	movs	r3, #1
 800686c:	e049      	b.n	8006902 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006874:	b2db      	uxtb	r3, r3
 8006876:	2b00      	cmp	r3, #0
 8006878:	d106      	bne.n	8006888 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	2200      	movs	r2, #0
 800687e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006882:	6878      	ldr	r0, [r7, #4]
 8006884:	f7fb fcae 	bl	80021e4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	2202      	movs	r2, #2
 800688c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681a      	ldr	r2, [r3, #0]
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	3304      	adds	r3, #4
 8006898:	4619      	mov	r1, r3
 800689a:	4610      	mov	r0, r2
 800689c:	f000 f94c 	bl	8006b38 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	2201      	movs	r2, #1
 80068a4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	2201      	movs	r2, #1
 80068ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	2201      	movs	r2, #1
 80068b4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	2201      	movs	r2, #1
 80068bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	2201      	movs	r2, #1
 80068c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	2201      	movs	r2, #1
 80068cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	2201      	movs	r2, #1
 80068d4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	2201      	movs	r2, #1
 80068dc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	2201      	movs	r2, #1
 80068e4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	2201      	movs	r2, #1
 80068ec:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	2201      	movs	r2, #1
 80068f4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	2201      	movs	r2, #1
 80068fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006900:	2300      	movs	r3, #0
}
 8006902:	4618      	mov	r0, r3
 8006904:	3708      	adds	r7, #8
 8006906:	46bd      	mov	sp, r7
 8006908:	bd80      	pop	{r7, pc}
	...

0800690c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800690c:	b480      	push	{r7}
 800690e:	b085      	sub	sp, #20
 8006910:	af00      	add	r7, sp, #0
 8006912:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800691a:	b2db      	uxtb	r3, r3
 800691c:	2b01      	cmp	r3, #1
 800691e:	d001      	beq.n	8006924 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006920:	2301      	movs	r3, #1
 8006922:	e033      	b.n	800698c <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	2202      	movs	r2, #2
 8006928:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	4a19      	ldr	r2, [pc, #100]	@ (8006998 <HAL_TIM_Base_Start+0x8c>)
 8006932:	4293      	cmp	r3, r2
 8006934:	d009      	beq.n	800694a <HAL_TIM_Base_Start+0x3e>
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800693e:	d004      	beq.n	800694a <HAL_TIM_Base_Start+0x3e>
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	4a15      	ldr	r2, [pc, #84]	@ (800699c <HAL_TIM_Base_Start+0x90>)
 8006946:	4293      	cmp	r3, r2
 8006948:	d115      	bne.n	8006976 <HAL_TIM_Base_Start+0x6a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	689a      	ldr	r2, [r3, #8]
 8006950:	4b13      	ldr	r3, [pc, #76]	@ (80069a0 <HAL_TIM_Base_Start+0x94>)
 8006952:	4013      	ands	r3, r2
 8006954:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	2b06      	cmp	r3, #6
 800695a:	d015      	beq.n	8006988 <HAL_TIM_Base_Start+0x7c>
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006962:	d011      	beq.n	8006988 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	681a      	ldr	r2, [r3, #0]
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	f042 0201 	orr.w	r2, r2, #1
 8006972:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006974:	e008      	b.n	8006988 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	681a      	ldr	r2, [r3, #0]
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	f042 0201 	orr.w	r2, r2, #1
 8006984:	601a      	str	r2, [r3, #0]
 8006986:	e000      	b.n	800698a <HAL_TIM_Base_Start+0x7e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006988:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800698a:	2300      	movs	r3, #0
}
 800698c:	4618      	mov	r0, r3
 800698e:	3714      	adds	r7, #20
 8006990:	46bd      	mov	sp, r7
 8006992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006996:	4770      	bx	lr
 8006998:	40012c00 	.word	0x40012c00
 800699c:	40014000 	.word	0x40014000
 80069a0:	00010007 	.word	0x00010007

080069a4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80069a4:	b580      	push	{r7, lr}
 80069a6:	b084      	sub	sp, #16
 80069a8:	af00      	add	r7, sp, #0
 80069aa:	6078      	str	r0, [r7, #4]
 80069ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80069ae:	2300      	movs	r3, #0
 80069b0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80069b8:	2b01      	cmp	r3, #1
 80069ba:	d101      	bne.n	80069c0 <HAL_TIM_ConfigClockSource+0x1c>
 80069bc:	2302      	movs	r3, #2
 80069be:	e0b6      	b.n	8006b2e <HAL_TIM_ConfigClockSource+0x18a>
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	2201      	movs	r2, #1
 80069c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	2202      	movs	r2, #2
 80069cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	689b      	ldr	r3, [r3, #8]
 80069d6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80069d8:	68bb      	ldr	r3, [r7, #8]
 80069da:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80069de:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80069e2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80069e4:	68bb      	ldr	r3, [r7, #8]
 80069e6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80069ea:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	68ba      	ldr	r2, [r7, #8]
 80069f2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80069f4:	683b      	ldr	r3, [r7, #0]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80069fc:	d03e      	beq.n	8006a7c <HAL_TIM_ConfigClockSource+0xd8>
 80069fe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006a02:	f200 8087 	bhi.w	8006b14 <HAL_TIM_ConfigClockSource+0x170>
 8006a06:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006a0a:	f000 8086 	beq.w	8006b1a <HAL_TIM_ConfigClockSource+0x176>
 8006a0e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006a12:	d87f      	bhi.n	8006b14 <HAL_TIM_ConfigClockSource+0x170>
 8006a14:	2b70      	cmp	r3, #112	@ 0x70
 8006a16:	d01a      	beq.n	8006a4e <HAL_TIM_ConfigClockSource+0xaa>
 8006a18:	2b70      	cmp	r3, #112	@ 0x70
 8006a1a:	d87b      	bhi.n	8006b14 <HAL_TIM_ConfigClockSource+0x170>
 8006a1c:	2b60      	cmp	r3, #96	@ 0x60
 8006a1e:	d050      	beq.n	8006ac2 <HAL_TIM_ConfigClockSource+0x11e>
 8006a20:	2b60      	cmp	r3, #96	@ 0x60
 8006a22:	d877      	bhi.n	8006b14 <HAL_TIM_ConfigClockSource+0x170>
 8006a24:	2b50      	cmp	r3, #80	@ 0x50
 8006a26:	d03c      	beq.n	8006aa2 <HAL_TIM_ConfigClockSource+0xfe>
 8006a28:	2b50      	cmp	r3, #80	@ 0x50
 8006a2a:	d873      	bhi.n	8006b14 <HAL_TIM_ConfigClockSource+0x170>
 8006a2c:	2b40      	cmp	r3, #64	@ 0x40
 8006a2e:	d058      	beq.n	8006ae2 <HAL_TIM_ConfigClockSource+0x13e>
 8006a30:	2b40      	cmp	r3, #64	@ 0x40
 8006a32:	d86f      	bhi.n	8006b14 <HAL_TIM_ConfigClockSource+0x170>
 8006a34:	2b30      	cmp	r3, #48	@ 0x30
 8006a36:	d064      	beq.n	8006b02 <HAL_TIM_ConfigClockSource+0x15e>
 8006a38:	2b30      	cmp	r3, #48	@ 0x30
 8006a3a:	d86b      	bhi.n	8006b14 <HAL_TIM_ConfigClockSource+0x170>
 8006a3c:	2b20      	cmp	r3, #32
 8006a3e:	d060      	beq.n	8006b02 <HAL_TIM_ConfigClockSource+0x15e>
 8006a40:	2b20      	cmp	r3, #32
 8006a42:	d867      	bhi.n	8006b14 <HAL_TIM_ConfigClockSource+0x170>
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d05c      	beq.n	8006b02 <HAL_TIM_ConfigClockSource+0x15e>
 8006a48:	2b10      	cmp	r3, #16
 8006a4a:	d05a      	beq.n	8006b02 <HAL_TIM_ConfigClockSource+0x15e>
 8006a4c:	e062      	b.n	8006b14 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006a52:	683b      	ldr	r3, [r7, #0]
 8006a54:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006a56:	683b      	ldr	r3, [r7, #0]
 8006a58:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006a5a:	683b      	ldr	r3, [r7, #0]
 8006a5c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006a5e:	f000 f955 	bl	8006d0c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	689b      	ldr	r3, [r3, #8]
 8006a68:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006a6a:	68bb      	ldr	r3, [r7, #8]
 8006a6c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006a70:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	68ba      	ldr	r2, [r7, #8]
 8006a78:	609a      	str	r2, [r3, #8]
      break;
 8006a7a:	e04f      	b.n	8006b1c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006a80:	683b      	ldr	r3, [r7, #0]
 8006a82:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006a84:	683b      	ldr	r3, [r7, #0]
 8006a86:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006a88:	683b      	ldr	r3, [r7, #0]
 8006a8a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006a8c:	f000 f93e 	bl	8006d0c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	689a      	ldr	r2, [r3, #8]
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006a9e:	609a      	str	r2, [r3, #8]
      break;
 8006aa0:	e03c      	b.n	8006b1c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006aa6:	683b      	ldr	r3, [r7, #0]
 8006aa8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006aaa:	683b      	ldr	r3, [r7, #0]
 8006aac:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006aae:	461a      	mov	r2, r3
 8006ab0:	f000 f8b2 	bl	8006c18 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	2150      	movs	r1, #80	@ 0x50
 8006aba:	4618      	mov	r0, r3
 8006abc:	f000 f90b 	bl	8006cd6 <TIM_ITRx_SetConfig>
      break;
 8006ac0:	e02c      	b.n	8006b1c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006ac6:	683b      	ldr	r3, [r7, #0]
 8006ac8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006aca:	683b      	ldr	r3, [r7, #0]
 8006acc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006ace:	461a      	mov	r2, r3
 8006ad0:	f000 f8d1 	bl	8006c76 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	2160      	movs	r1, #96	@ 0x60
 8006ada:	4618      	mov	r0, r3
 8006adc:	f000 f8fb 	bl	8006cd6 <TIM_ITRx_SetConfig>
      break;
 8006ae0:	e01c      	b.n	8006b1c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006ae6:	683b      	ldr	r3, [r7, #0]
 8006ae8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006aea:	683b      	ldr	r3, [r7, #0]
 8006aec:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006aee:	461a      	mov	r2, r3
 8006af0:	f000 f892 	bl	8006c18 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	2140      	movs	r1, #64	@ 0x40
 8006afa:	4618      	mov	r0, r3
 8006afc:	f000 f8eb 	bl	8006cd6 <TIM_ITRx_SetConfig>
      break;
 8006b00:	e00c      	b.n	8006b1c <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681a      	ldr	r2, [r3, #0]
 8006b06:	683b      	ldr	r3, [r7, #0]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	4619      	mov	r1, r3
 8006b0c:	4610      	mov	r0, r2
 8006b0e:	f000 f8e2 	bl	8006cd6 <TIM_ITRx_SetConfig>
      break;
 8006b12:	e003      	b.n	8006b1c <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8006b14:	2301      	movs	r3, #1
 8006b16:	73fb      	strb	r3, [r7, #15]
      break;
 8006b18:	e000      	b.n	8006b1c <HAL_TIM_ConfigClockSource+0x178>
      break;
 8006b1a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	2201      	movs	r2, #1
 8006b20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	2200      	movs	r2, #0
 8006b28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006b2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b2e:	4618      	mov	r0, r3
 8006b30:	3710      	adds	r7, #16
 8006b32:	46bd      	mov	sp, r7
 8006b34:	bd80      	pop	{r7, pc}
	...

08006b38 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006b38:	b480      	push	{r7}
 8006b3a:	b085      	sub	sp, #20
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	6078      	str	r0, [r7, #4]
 8006b40:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	4a30      	ldr	r2, [pc, #192]	@ (8006c0c <TIM_Base_SetConfig+0xd4>)
 8006b4c:	4293      	cmp	r3, r2
 8006b4e:	d003      	beq.n	8006b58 <TIM_Base_SetConfig+0x20>
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006b56:	d108      	bne.n	8006b6a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006b5e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006b60:	683b      	ldr	r3, [r7, #0]
 8006b62:	685b      	ldr	r3, [r3, #4]
 8006b64:	68fa      	ldr	r2, [r7, #12]
 8006b66:	4313      	orrs	r3, r2
 8006b68:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	4a27      	ldr	r2, [pc, #156]	@ (8006c0c <TIM_Base_SetConfig+0xd4>)
 8006b6e:	4293      	cmp	r3, r2
 8006b70:	d00b      	beq.n	8006b8a <TIM_Base_SetConfig+0x52>
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006b78:	d007      	beq.n	8006b8a <TIM_Base_SetConfig+0x52>
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	4a24      	ldr	r2, [pc, #144]	@ (8006c10 <TIM_Base_SetConfig+0xd8>)
 8006b7e:	4293      	cmp	r3, r2
 8006b80:	d003      	beq.n	8006b8a <TIM_Base_SetConfig+0x52>
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	4a23      	ldr	r2, [pc, #140]	@ (8006c14 <TIM_Base_SetConfig+0xdc>)
 8006b86:	4293      	cmp	r3, r2
 8006b88:	d108      	bne.n	8006b9c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006b90:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006b92:	683b      	ldr	r3, [r7, #0]
 8006b94:	68db      	ldr	r3, [r3, #12]
 8006b96:	68fa      	ldr	r2, [r7, #12]
 8006b98:	4313      	orrs	r3, r2
 8006b9a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006ba2:	683b      	ldr	r3, [r7, #0]
 8006ba4:	695b      	ldr	r3, [r3, #20]
 8006ba6:	4313      	orrs	r3, r2
 8006ba8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	68fa      	ldr	r2, [r7, #12]
 8006bae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006bb0:	683b      	ldr	r3, [r7, #0]
 8006bb2:	689a      	ldr	r2, [r3, #8]
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006bb8:	683b      	ldr	r3, [r7, #0]
 8006bba:	681a      	ldr	r2, [r3, #0]
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	4a12      	ldr	r2, [pc, #72]	@ (8006c0c <TIM_Base_SetConfig+0xd4>)
 8006bc4:	4293      	cmp	r3, r2
 8006bc6:	d007      	beq.n	8006bd8 <TIM_Base_SetConfig+0xa0>
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	4a11      	ldr	r2, [pc, #68]	@ (8006c10 <TIM_Base_SetConfig+0xd8>)
 8006bcc:	4293      	cmp	r3, r2
 8006bce:	d003      	beq.n	8006bd8 <TIM_Base_SetConfig+0xa0>
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	4a10      	ldr	r2, [pc, #64]	@ (8006c14 <TIM_Base_SetConfig+0xdc>)
 8006bd4:	4293      	cmp	r3, r2
 8006bd6:	d103      	bne.n	8006be0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006bd8:	683b      	ldr	r3, [r7, #0]
 8006bda:	691a      	ldr	r2, [r3, #16]
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	2201      	movs	r2, #1
 8006be4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	691b      	ldr	r3, [r3, #16]
 8006bea:	f003 0301 	and.w	r3, r3, #1
 8006bee:	2b01      	cmp	r3, #1
 8006bf0:	d105      	bne.n	8006bfe <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	691b      	ldr	r3, [r3, #16]
 8006bf6:	f023 0201 	bic.w	r2, r3, #1
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	611a      	str	r2, [r3, #16]
  }
}
 8006bfe:	bf00      	nop
 8006c00:	3714      	adds	r7, #20
 8006c02:	46bd      	mov	sp, r7
 8006c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c08:	4770      	bx	lr
 8006c0a:	bf00      	nop
 8006c0c:	40012c00 	.word	0x40012c00
 8006c10:	40014000 	.word	0x40014000
 8006c14:	40014400 	.word	0x40014400

08006c18 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006c18:	b480      	push	{r7}
 8006c1a:	b087      	sub	sp, #28
 8006c1c:	af00      	add	r7, sp, #0
 8006c1e:	60f8      	str	r0, [r7, #12]
 8006c20:	60b9      	str	r1, [r7, #8]
 8006c22:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	6a1b      	ldr	r3, [r3, #32]
 8006c28:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	6a1b      	ldr	r3, [r3, #32]
 8006c2e:	f023 0201 	bic.w	r2, r3, #1
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	699b      	ldr	r3, [r3, #24]
 8006c3a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006c3c:	693b      	ldr	r3, [r7, #16]
 8006c3e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006c42:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	011b      	lsls	r3, r3, #4
 8006c48:	693a      	ldr	r2, [r7, #16]
 8006c4a:	4313      	orrs	r3, r2
 8006c4c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006c4e:	697b      	ldr	r3, [r7, #20]
 8006c50:	f023 030a 	bic.w	r3, r3, #10
 8006c54:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006c56:	697a      	ldr	r2, [r7, #20]
 8006c58:	68bb      	ldr	r3, [r7, #8]
 8006c5a:	4313      	orrs	r3, r2
 8006c5c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	693a      	ldr	r2, [r7, #16]
 8006c62:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	697a      	ldr	r2, [r7, #20]
 8006c68:	621a      	str	r2, [r3, #32]
}
 8006c6a:	bf00      	nop
 8006c6c:	371c      	adds	r7, #28
 8006c6e:	46bd      	mov	sp, r7
 8006c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c74:	4770      	bx	lr

08006c76 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006c76:	b480      	push	{r7}
 8006c78:	b087      	sub	sp, #28
 8006c7a:	af00      	add	r7, sp, #0
 8006c7c:	60f8      	str	r0, [r7, #12]
 8006c7e:	60b9      	str	r1, [r7, #8]
 8006c80:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	6a1b      	ldr	r3, [r3, #32]
 8006c86:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	6a1b      	ldr	r3, [r3, #32]
 8006c8c:	f023 0210 	bic.w	r2, r3, #16
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	699b      	ldr	r3, [r3, #24]
 8006c98:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006c9a:	693b      	ldr	r3, [r7, #16]
 8006c9c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006ca0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	031b      	lsls	r3, r3, #12
 8006ca6:	693a      	ldr	r2, [r7, #16]
 8006ca8:	4313      	orrs	r3, r2
 8006caa:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006cac:	697b      	ldr	r3, [r7, #20]
 8006cae:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006cb2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006cb4:	68bb      	ldr	r3, [r7, #8]
 8006cb6:	011b      	lsls	r3, r3, #4
 8006cb8:	697a      	ldr	r2, [r7, #20]
 8006cba:	4313      	orrs	r3, r2
 8006cbc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	693a      	ldr	r2, [r7, #16]
 8006cc2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	697a      	ldr	r2, [r7, #20]
 8006cc8:	621a      	str	r2, [r3, #32]
}
 8006cca:	bf00      	nop
 8006ccc:	371c      	adds	r7, #28
 8006cce:	46bd      	mov	sp, r7
 8006cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd4:	4770      	bx	lr

08006cd6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006cd6:	b480      	push	{r7}
 8006cd8:	b085      	sub	sp, #20
 8006cda:	af00      	add	r7, sp, #0
 8006cdc:	6078      	str	r0, [r7, #4]
 8006cde:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	689b      	ldr	r3, [r3, #8]
 8006ce4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006cec:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006cee:	683a      	ldr	r2, [r7, #0]
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	4313      	orrs	r3, r2
 8006cf4:	f043 0307 	orr.w	r3, r3, #7
 8006cf8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	68fa      	ldr	r2, [r7, #12]
 8006cfe:	609a      	str	r2, [r3, #8]
}
 8006d00:	bf00      	nop
 8006d02:	3714      	adds	r7, #20
 8006d04:	46bd      	mov	sp, r7
 8006d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d0a:	4770      	bx	lr

08006d0c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006d0c:	b480      	push	{r7}
 8006d0e:	b087      	sub	sp, #28
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	60f8      	str	r0, [r7, #12]
 8006d14:	60b9      	str	r1, [r7, #8]
 8006d16:	607a      	str	r2, [r7, #4]
 8006d18:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	689b      	ldr	r3, [r3, #8]
 8006d1e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006d20:	697b      	ldr	r3, [r7, #20]
 8006d22:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006d26:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006d28:	683b      	ldr	r3, [r7, #0]
 8006d2a:	021a      	lsls	r2, r3, #8
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	431a      	orrs	r2, r3
 8006d30:	68bb      	ldr	r3, [r7, #8]
 8006d32:	4313      	orrs	r3, r2
 8006d34:	697a      	ldr	r2, [r7, #20]
 8006d36:	4313      	orrs	r3, r2
 8006d38:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	697a      	ldr	r2, [r7, #20]
 8006d3e:	609a      	str	r2, [r3, #8]
}
 8006d40:	bf00      	nop
 8006d42:	371c      	adds	r7, #28
 8006d44:	46bd      	mov	sp, r7
 8006d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d4a:	4770      	bx	lr

08006d4c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006d4c:	b480      	push	{r7}
 8006d4e:	b085      	sub	sp, #20
 8006d50:	af00      	add	r7, sp, #0
 8006d52:	6078      	str	r0, [r7, #4]
 8006d54:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006d5c:	2b01      	cmp	r3, #1
 8006d5e:	d101      	bne.n	8006d64 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006d60:	2302      	movs	r3, #2
 8006d62:	e04f      	b.n	8006e04 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	2201      	movs	r2, #1
 8006d68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	2202      	movs	r2, #2
 8006d70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	685b      	ldr	r3, [r3, #4]
 8006d7a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	689b      	ldr	r3, [r3, #8]
 8006d82:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	4a21      	ldr	r2, [pc, #132]	@ (8006e10 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8006d8a:	4293      	cmp	r3, r2
 8006d8c:	d108      	bne.n	8006da0 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8006d94:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006d96:	683b      	ldr	r3, [r7, #0]
 8006d98:	685b      	ldr	r3, [r3, #4]
 8006d9a:	68fa      	ldr	r2, [r7, #12]
 8006d9c:	4313      	orrs	r3, r2
 8006d9e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006da6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006da8:	683b      	ldr	r3, [r7, #0]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	68fa      	ldr	r2, [r7, #12]
 8006dae:	4313      	orrs	r3, r2
 8006db0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	68fa      	ldr	r2, [r7, #12]
 8006db8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	4a14      	ldr	r2, [pc, #80]	@ (8006e10 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8006dc0:	4293      	cmp	r3, r2
 8006dc2:	d009      	beq.n	8006dd8 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006dcc:	d004      	beq.n	8006dd8 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	4a10      	ldr	r2, [pc, #64]	@ (8006e14 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006dd4:	4293      	cmp	r3, r2
 8006dd6:	d10c      	bne.n	8006df2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006dd8:	68bb      	ldr	r3, [r7, #8]
 8006dda:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006dde:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006de0:	683b      	ldr	r3, [r7, #0]
 8006de2:	689b      	ldr	r3, [r3, #8]
 8006de4:	68ba      	ldr	r2, [r7, #8]
 8006de6:	4313      	orrs	r3, r2
 8006de8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	68ba      	ldr	r2, [r7, #8]
 8006df0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	2201      	movs	r2, #1
 8006df6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	2200      	movs	r2, #0
 8006dfe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006e02:	2300      	movs	r3, #0
}
 8006e04:	4618      	mov	r0, r3
 8006e06:	3714      	adds	r7, #20
 8006e08:	46bd      	mov	sp, r7
 8006e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e0e:	4770      	bx	lr
 8006e10:	40012c00 	.word	0x40012c00
 8006e14:	40014000 	.word	0x40014000

08006e18 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006e18:	b580      	push	{r7, lr}
 8006e1a:	b082      	sub	sp, #8
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d101      	bne.n	8006e2a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006e26:	2301      	movs	r3, #1
 8006e28:	e040      	b.n	8006eac <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d106      	bne.n	8006e40 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	2200      	movs	r2, #0
 8006e36:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006e3a:	6878      	ldr	r0, [r7, #4]
 8006e3c:	f7fb f9f0 	bl	8002220 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	2224      	movs	r2, #36	@ 0x24
 8006e44:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	681a      	ldr	r2, [r3, #0]
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	f022 0201 	bic.w	r2, r2, #1
 8006e54:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d002      	beq.n	8006e64 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8006e5e:	6878      	ldr	r0, [r7, #4]
 8006e60:	f000 fade 	bl	8007420 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006e64:	6878      	ldr	r0, [r7, #4]
 8006e66:	f000 f8af 	bl	8006fc8 <UART_SetConfig>
 8006e6a:	4603      	mov	r3, r0
 8006e6c:	2b01      	cmp	r3, #1
 8006e6e:	d101      	bne.n	8006e74 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8006e70:	2301      	movs	r3, #1
 8006e72:	e01b      	b.n	8006eac <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	685a      	ldr	r2, [r3, #4]
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006e82:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	689a      	ldr	r2, [r3, #8]
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006e92:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	681a      	ldr	r2, [r3, #0]
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	f042 0201 	orr.w	r2, r2, #1
 8006ea2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006ea4:	6878      	ldr	r0, [r7, #4]
 8006ea6:	f000 fb5d 	bl	8007564 <UART_CheckIdleState>
 8006eaa:	4603      	mov	r3, r0
}
 8006eac:	4618      	mov	r0, r3
 8006eae:	3708      	adds	r7, #8
 8006eb0:	46bd      	mov	sp, r7
 8006eb2:	bd80      	pop	{r7, pc}

08006eb4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006eb4:	b580      	push	{r7, lr}
 8006eb6:	b08a      	sub	sp, #40	@ 0x28
 8006eb8:	af02      	add	r7, sp, #8
 8006eba:	60f8      	str	r0, [r7, #12]
 8006ebc:	60b9      	str	r1, [r7, #8]
 8006ebe:	603b      	str	r3, [r7, #0]
 8006ec0:	4613      	mov	r3, r2
 8006ec2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006ec8:	2b20      	cmp	r3, #32
 8006eca:	d177      	bne.n	8006fbc <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8006ecc:	68bb      	ldr	r3, [r7, #8]
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d002      	beq.n	8006ed8 <HAL_UART_Transmit+0x24>
 8006ed2:	88fb      	ldrh	r3, [r7, #6]
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d101      	bne.n	8006edc <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8006ed8:	2301      	movs	r3, #1
 8006eda:	e070      	b.n	8006fbe <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	2200      	movs	r2, #0
 8006ee0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	2221      	movs	r2, #33	@ 0x21
 8006ee8:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006eea:	f7fb fad9 	bl	80024a0 <HAL_GetTick>
 8006eee:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	88fa      	ldrh	r2, [r7, #6]
 8006ef4:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	88fa      	ldrh	r2, [r7, #6]
 8006efc:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	689b      	ldr	r3, [r3, #8]
 8006f04:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006f08:	d108      	bne.n	8006f1c <HAL_UART_Transmit+0x68>
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	691b      	ldr	r3, [r3, #16]
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d104      	bne.n	8006f1c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8006f12:	2300      	movs	r3, #0
 8006f14:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006f16:	68bb      	ldr	r3, [r7, #8]
 8006f18:	61bb      	str	r3, [r7, #24]
 8006f1a:	e003      	b.n	8006f24 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8006f1c:	68bb      	ldr	r3, [r7, #8]
 8006f1e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006f20:	2300      	movs	r3, #0
 8006f22:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006f24:	e02f      	b.n	8006f86 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006f26:	683b      	ldr	r3, [r7, #0]
 8006f28:	9300      	str	r3, [sp, #0]
 8006f2a:	697b      	ldr	r3, [r7, #20]
 8006f2c:	2200      	movs	r2, #0
 8006f2e:	2180      	movs	r1, #128	@ 0x80
 8006f30:	68f8      	ldr	r0, [r7, #12]
 8006f32:	f000 fbbf 	bl	80076b4 <UART_WaitOnFlagUntilTimeout>
 8006f36:	4603      	mov	r3, r0
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d004      	beq.n	8006f46 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	2220      	movs	r2, #32
 8006f40:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8006f42:	2303      	movs	r3, #3
 8006f44:	e03b      	b.n	8006fbe <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8006f46:	69fb      	ldr	r3, [r7, #28]
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d10b      	bne.n	8006f64 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006f4c:	69bb      	ldr	r3, [r7, #24]
 8006f4e:	881a      	ldrh	r2, [r3, #0]
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006f58:	b292      	uxth	r2, r2
 8006f5a:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8006f5c:	69bb      	ldr	r3, [r7, #24]
 8006f5e:	3302      	adds	r3, #2
 8006f60:	61bb      	str	r3, [r7, #24]
 8006f62:	e007      	b.n	8006f74 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006f64:	69fb      	ldr	r3, [r7, #28]
 8006f66:	781a      	ldrb	r2, [r3, #0]
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8006f6e:	69fb      	ldr	r3, [r7, #28]
 8006f70:	3301      	adds	r3, #1
 8006f72:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8006f7a:	b29b      	uxth	r3, r3
 8006f7c:	3b01      	subs	r3, #1
 8006f7e:	b29a      	uxth	r2, r3
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8006f8c:	b29b      	uxth	r3, r3
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d1c9      	bne.n	8006f26 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006f92:	683b      	ldr	r3, [r7, #0]
 8006f94:	9300      	str	r3, [sp, #0]
 8006f96:	697b      	ldr	r3, [r7, #20]
 8006f98:	2200      	movs	r2, #0
 8006f9a:	2140      	movs	r1, #64	@ 0x40
 8006f9c:	68f8      	ldr	r0, [r7, #12]
 8006f9e:	f000 fb89 	bl	80076b4 <UART_WaitOnFlagUntilTimeout>
 8006fa2:	4603      	mov	r3, r0
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d004      	beq.n	8006fb2 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	2220      	movs	r2, #32
 8006fac:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8006fae:	2303      	movs	r3, #3
 8006fb0:	e005      	b.n	8006fbe <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	2220      	movs	r2, #32
 8006fb6:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8006fb8:	2300      	movs	r3, #0
 8006fba:	e000      	b.n	8006fbe <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8006fbc:	2302      	movs	r3, #2
  }
}
 8006fbe:	4618      	mov	r0, r3
 8006fc0:	3720      	adds	r7, #32
 8006fc2:	46bd      	mov	sp, r7
 8006fc4:	bd80      	pop	{r7, pc}
	...

08006fc8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006fc8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006fcc:	b08a      	sub	sp, #40	@ 0x28
 8006fce:	af00      	add	r7, sp, #0
 8006fd0:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006fd2:	2300      	movs	r3, #0
 8006fd4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	689a      	ldr	r2, [r3, #8]
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	691b      	ldr	r3, [r3, #16]
 8006fe0:	431a      	orrs	r2, r3
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	695b      	ldr	r3, [r3, #20]
 8006fe6:	431a      	orrs	r2, r3
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	69db      	ldr	r3, [r3, #28]
 8006fec:	4313      	orrs	r3, r2
 8006fee:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	681a      	ldr	r2, [r3, #0]
 8006ff6:	4bb4      	ldr	r3, [pc, #720]	@ (80072c8 <UART_SetConfig+0x300>)
 8006ff8:	4013      	ands	r3, r2
 8006ffa:	68fa      	ldr	r2, [r7, #12]
 8006ffc:	6812      	ldr	r2, [r2, #0]
 8006ffe:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007000:	430b      	orrs	r3, r1
 8007002:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	685b      	ldr	r3, [r3, #4]
 800700a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	68da      	ldr	r2, [r3, #12]
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	430a      	orrs	r2, r1
 8007018:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	699b      	ldr	r3, [r3, #24]
 800701e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	4aa9      	ldr	r2, [pc, #676]	@ (80072cc <UART_SetConfig+0x304>)
 8007026:	4293      	cmp	r3, r2
 8007028:	d004      	beq.n	8007034 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	6a1b      	ldr	r3, [r3, #32]
 800702e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007030:	4313      	orrs	r3, r2
 8007032:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	689b      	ldr	r3, [r3, #8]
 800703a:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007044:	430a      	orrs	r2, r1
 8007046:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	4aa0      	ldr	r2, [pc, #640]	@ (80072d0 <UART_SetConfig+0x308>)
 800704e:	4293      	cmp	r3, r2
 8007050:	d126      	bne.n	80070a0 <UART_SetConfig+0xd8>
 8007052:	4ba0      	ldr	r3, [pc, #640]	@ (80072d4 <UART_SetConfig+0x30c>)
 8007054:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007058:	f003 0303 	and.w	r3, r3, #3
 800705c:	2b03      	cmp	r3, #3
 800705e:	d81b      	bhi.n	8007098 <UART_SetConfig+0xd0>
 8007060:	a201      	add	r2, pc, #4	@ (adr r2, 8007068 <UART_SetConfig+0xa0>)
 8007062:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007066:	bf00      	nop
 8007068:	08007079 	.word	0x08007079
 800706c:	08007089 	.word	0x08007089
 8007070:	08007081 	.word	0x08007081
 8007074:	08007091 	.word	0x08007091
 8007078:	2301      	movs	r3, #1
 800707a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800707e:	e080      	b.n	8007182 <UART_SetConfig+0x1ba>
 8007080:	2302      	movs	r3, #2
 8007082:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007086:	e07c      	b.n	8007182 <UART_SetConfig+0x1ba>
 8007088:	2304      	movs	r3, #4
 800708a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800708e:	e078      	b.n	8007182 <UART_SetConfig+0x1ba>
 8007090:	2308      	movs	r3, #8
 8007092:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007096:	e074      	b.n	8007182 <UART_SetConfig+0x1ba>
 8007098:	2310      	movs	r3, #16
 800709a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800709e:	e070      	b.n	8007182 <UART_SetConfig+0x1ba>
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	4a8c      	ldr	r2, [pc, #560]	@ (80072d8 <UART_SetConfig+0x310>)
 80070a6:	4293      	cmp	r3, r2
 80070a8:	d138      	bne.n	800711c <UART_SetConfig+0x154>
 80070aa:	4b8a      	ldr	r3, [pc, #552]	@ (80072d4 <UART_SetConfig+0x30c>)
 80070ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80070b0:	f003 030c 	and.w	r3, r3, #12
 80070b4:	2b0c      	cmp	r3, #12
 80070b6:	d82d      	bhi.n	8007114 <UART_SetConfig+0x14c>
 80070b8:	a201      	add	r2, pc, #4	@ (adr r2, 80070c0 <UART_SetConfig+0xf8>)
 80070ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070be:	bf00      	nop
 80070c0:	080070f5 	.word	0x080070f5
 80070c4:	08007115 	.word	0x08007115
 80070c8:	08007115 	.word	0x08007115
 80070cc:	08007115 	.word	0x08007115
 80070d0:	08007105 	.word	0x08007105
 80070d4:	08007115 	.word	0x08007115
 80070d8:	08007115 	.word	0x08007115
 80070dc:	08007115 	.word	0x08007115
 80070e0:	080070fd 	.word	0x080070fd
 80070e4:	08007115 	.word	0x08007115
 80070e8:	08007115 	.word	0x08007115
 80070ec:	08007115 	.word	0x08007115
 80070f0:	0800710d 	.word	0x0800710d
 80070f4:	2300      	movs	r3, #0
 80070f6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80070fa:	e042      	b.n	8007182 <UART_SetConfig+0x1ba>
 80070fc:	2302      	movs	r3, #2
 80070fe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007102:	e03e      	b.n	8007182 <UART_SetConfig+0x1ba>
 8007104:	2304      	movs	r3, #4
 8007106:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800710a:	e03a      	b.n	8007182 <UART_SetConfig+0x1ba>
 800710c:	2308      	movs	r3, #8
 800710e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007112:	e036      	b.n	8007182 <UART_SetConfig+0x1ba>
 8007114:	2310      	movs	r3, #16
 8007116:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800711a:	e032      	b.n	8007182 <UART_SetConfig+0x1ba>
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	4a6a      	ldr	r2, [pc, #424]	@ (80072cc <UART_SetConfig+0x304>)
 8007122:	4293      	cmp	r3, r2
 8007124:	d12a      	bne.n	800717c <UART_SetConfig+0x1b4>
 8007126:	4b6b      	ldr	r3, [pc, #428]	@ (80072d4 <UART_SetConfig+0x30c>)
 8007128:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800712c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8007130:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007134:	d01a      	beq.n	800716c <UART_SetConfig+0x1a4>
 8007136:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800713a:	d81b      	bhi.n	8007174 <UART_SetConfig+0x1ac>
 800713c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007140:	d00c      	beq.n	800715c <UART_SetConfig+0x194>
 8007142:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007146:	d815      	bhi.n	8007174 <UART_SetConfig+0x1ac>
 8007148:	2b00      	cmp	r3, #0
 800714a:	d003      	beq.n	8007154 <UART_SetConfig+0x18c>
 800714c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007150:	d008      	beq.n	8007164 <UART_SetConfig+0x19c>
 8007152:	e00f      	b.n	8007174 <UART_SetConfig+0x1ac>
 8007154:	2300      	movs	r3, #0
 8007156:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800715a:	e012      	b.n	8007182 <UART_SetConfig+0x1ba>
 800715c:	2302      	movs	r3, #2
 800715e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007162:	e00e      	b.n	8007182 <UART_SetConfig+0x1ba>
 8007164:	2304      	movs	r3, #4
 8007166:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800716a:	e00a      	b.n	8007182 <UART_SetConfig+0x1ba>
 800716c:	2308      	movs	r3, #8
 800716e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007172:	e006      	b.n	8007182 <UART_SetConfig+0x1ba>
 8007174:	2310      	movs	r3, #16
 8007176:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800717a:	e002      	b.n	8007182 <UART_SetConfig+0x1ba>
 800717c:	2310      	movs	r3, #16
 800717e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	4a51      	ldr	r2, [pc, #324]	@ (80072cc <UART_SetConfig+0x304>)
 8007188:	4293      	cmp	r3, r2
 800718a:	d17a      	bne.n	8007282 <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800718c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007190:	2b08      	cmp	r3, #8
 8007192:	d824      	bhi.n	80071de <UART_SetConfig+0x216>
 8007194:	a201      	add	r2, pc, #4	@ (adr r2, 800719c <UART_SetConfig+0x1d4>)
 8007196:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800719a:	bf00      	nop
 800719c:	080071c1 	.word	0x080071c1
 80071a0:	080071df 	.word	0x080071df
 80071a4:	080071c9 	.word	0x080071c9
 80071a8:	080071df 	.word	0x080071df
 80071ac:	080071cf 	.word	0x080071cf
 80071b0:	080071df 	.word	0x080071df
 80071b4:	080071df 	.word	0x080071df
 80071b8:	080071df 	.word	0x080071df
 80071bc:	080071d7 	.word	0x080071d7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80071c0:	f7fe fbda 	bl	8005978 <HAL_RCC_GetPCLK1Freq>
 80071c4:	61f8      	str	r0, [r7, #28]
        break;
 80071c6:	e010      	b.n	80071ea <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80071c8:	4b44      	ldr	r3, [pc, #272]	@ (80072dc <UART_SetConfig+0x314>)
 80071ca:	61fb      	str	r3, [r7, #28]
        break;
 80071cc:	e00d      	b.n	80071ea <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80071ce:	f7fe fb3b 	bl	8005848 <HAL_RCC_GetSysClockFreq>
 80071d2:	61f8      	str	r0, [r7, #28]
        break;
 80071d4:	e009      	b.n	80071ea <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80071d6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80071da:	61fb      	str	r3, [r7, #28]
        break;
 80071dc:	e005      	b.n	80071ea <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 80071de:	2300      	movs	r3, #0
 80071e0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80071e2:	2301      	movs	r3, #1
 80071e4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80071e8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80071ea:	69fb      	ldr	r3, [r7, #28]
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	f000 8107 	beq.w	8007400 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	685a      	ldr	r2, [r3, #4]
 80071f6:	4613      	mov	r3, r2
 80071f8:	005b      	lsls	r3, r3, #1
 80071fa:	4413      	add	r3, r2
 80071fc:	69fa      	ldr	r2, [r7, #28]
 80071fe:	429a      	cmp	r2, r3
 8007200:	d305      	bcc.n	800720e <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	685b      	ldr	r3, [r3, #4]
 8007206:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007208:	69fa      	ldr	r2, [r7, #28]
 800720a:	429a      	cmp	r2, r3
 800720c:	d903      	bls.n	8007216 <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 800720e:	2301      	movs	r3, #1
 8007210:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8007214:	e0f4      	b.n	8007400 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8007216:	69fb      	ldr	r3, [r7, #28]
 8007218:	2200      	movs	r2, #0
 800721a:	461c      	mov	r4, r3
 800721c:	4615      	mov	r5, r2
 800721e:	f04f 0200 	mov.w	r2, #0
 8007222:	f04f 0300 	mov.w	r3, #0
 8007226:	022b      	lsls	r3, r5, #8
 8007228:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800722c:	0222      	lsls	r2, r4, #8
 800722e:	68f9      	ldr	r1, [r7, #12]
 8007230:	6849      	ldr	r1, [r1, #4]
 8007232:	0849      	lsrs	r1, r1, #1
 8007234:	2000      	movs	r0, #0
 8007236:	4688      	mov	r8, r1
 8007238:	4681      	mov	r9, r0
 800723a:	eb12 0a08 	adds.w	sl, r2, r8
 800723e:	eb43 0b09 	adc.w	fp, r3, r9
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	685b      	ldr	r3, [r3, #4]
 8007246:	2200      	movs	r2, #0
 8007248:	603b      	str	r3, [r7, #0]
 800724a:	607a      	str	r2, [r7, #4]
 800724c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007250:	4650      	mov	r0, sl
 8007252:	4659      	mov	r1, fp
 8007254:	f7f9 fc20 	bl	8000a98 <__aeabi_uldivmod>
 8007258:	4602      	mov	r2, r0
 800725a:	460b      	mov	r3, r1
 800725c:	4613      	mov	r3, r2
 800725e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007260:	69bb      	ldr	r3, [r7, #24]
 8007262:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007266:	d308      	bcc.n	800727a <UART_SetConfig+0x2b2>
 8007268:	69bb      	ldr	r3, [r7, #24]
 800726a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800726e:	d204      	bcs.n	800727a <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	69ba      	ldr	r2, [r7, #24]
 8007276:	60da      	str	r2, [r3, #12]
 8007278:	e0c2      	b.n	8007400 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 800727a:	2301      	movs	r3, #1
 800727c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8007280:	e0be      	b.n	8007400 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	69db      	ldr	r3, [r3, #28]
 8007286:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800728a:	d16a      	bne.n	8007362 <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 800728c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007290:	2b08      	cmp	r3, #8
 8007292:	d834      	bhi.n	80072fe <UART_SetConfig+0x336>
 8007294:	a201      	add	r2, pc, #4	@ (adr r2, 800729c <UART_SetConfig+0x2d4>)
 8007296:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800729a:	bf00      	nop
 800729c:	080072c1 	.word	0x080072c1
 80072a0:	080072e1 	.word	0x080072e1
 80072a4:	080072e9 	.word	0x080072e9
 80072a8:	080072ff 	.word	0x080072ff
 80072ac:	080072ef 	.word	0x080072ef
 80072b0:	080072ff 	.word	0x080072ff
 80072b4:	080072ff 	.word	0x080072ff
 80072b8:	080072ff 	.word	0x080072ff
 80072bc:	080072f7 	.word	0x080072f7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80072c0:	f7fe fb5a 	bl	8005978 <HAL_RCC_GetPCLK1Freq>
 80072c4:	61f8      	str	r0, [r7, #28]
        break;
 80072c6:	e020      	b.n	800730a <UART_SetConfig+0x342>
 80072c8:	efff69f3 	.word	0xefff69f3
 80072cc:	40008000 	.word	0x40008000
 80072d0:	40013800 	.word	0x40013800
 80072d4:	40021000 	.word	0x40021000
 80072d8:	40004400 	.word	0x40004400
 80072dc:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80072e0:	f7fe fb60 	bl	80059a4 <HAL_RCC_GetPCLK2Freq>
 80072e4:	61f8      	str	r0, [r7, #28]
        break;
 80072e6:	e010      	b.n	800730a <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80072e8:	4b4c      	ldr	r3, [pc, #304]	@ (800741c <UART_SetConfig+0x454>)
 80072ea:	61fb      	str	r3, [r7, #28]
        break;
 80072ec:	e00d      	b.n	800730a <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80072ee:	f7fe faab 	bl	8005848 <HAL_RCC_GetSysClockFreq>
 80072f2:	61f8      	str	r0, [r7, #28]
        break;
 80072f4:	e009      	b.n	800730a <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80072f6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80072fa:	61fb      	str	r3, [r7, #28]
        break;
 80072fc:	e005      	b.n	800730a <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 80072fe:	2300      	movs	r3, #0
 8007300:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007302:	2301      	movs	r3, #1
 8007304:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8007308:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800730a:	69fb      	ldr	r3, [r7, #28]
 800730c:	2b00      	cmp	r3, #0
 800730e:	d077      	beq.n	8007400 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007310:	69fb      	ldr	r3, [r7, #28]
 8007312:	005a      	lsls	r2, r3, #1
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	685b      	ldr	r3, [r3, #4]
 8007318:	085b      	lsrs	r3, r3, #1
 800731a:	441a      	add	r2, r3
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	685b      	ldr	r3, [r3, #4]
 8007320:	fbb2 f3f3 	udiv	r3, r2, r3
 8007324:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007326:	69bb      	ldr	r3, [r7, #24]
 8007328:	2b0f      	cmp	r3, #15
 800732a:	d916      	bls.n	800735a <UART_SetConfig+0x392>
 800732c:	69bb      	ldr	r3, [r7, #24]
 800732e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007332:	d212      	bcs.n	800735a <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007334:	69bb      	ldr	r3, [r7, #24]
 8007336:	b29b      	uxth	r3, r3
 8007338:	f023 030f 	bic.w	r3, r3, #15
 800733c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800733e:	69bb      	ldr	r3, [r7, #24]
 8007340:	085b      	lsrs	r3, r3, #1
 8007342:	b29b      	uxth	r3, r3
 8007344:	f003 0307 	and.w	r3, r3, #7
 8007348:	b29a      	uxth	r2, r3
 800734a:	8afb      	ldrh	r3, [r7, #22]
 800734c:	4313      	orrs	r3, r2
 800734e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	8afa      	ldrh	r2, [r7, #22]
 8007356:	60da      	str	r2, [r3, #12]
 8007358:	e052      	b.n	8007400 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 800735a:	2301      	movs	r3, #1
 800735c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8007360:	e04e      	b.n	8007400 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007362:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007366:	2b08      	cmp	r3, #8
 8007368:	d827      	bhi.n	80073ba <UART_SetConfig+0x3f2>
 800736a:	a201      	add	r2, pc, #4	@ (adr r2, 8007370 <UART_SetConfig+0x3a8>)
 800736c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007370:	08007395 	.word	0x08007395
 8007374:	0800739d 	.word	0x0800739d
 8007378:	080073a5 	.word	0x080073a5
 800737c:	080073bb 	.word	0x080073bb
 8007380:	080073ab 	.word	0x080073ab
 8007384:	080073bb 	.word	0x080073bb
 8007388:	080073bb 	.word	0x080073bb
 800738c:	080073bb 	.word	0x080073bb
 8007390:	080073b3 	.word	0x080073b3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007394:	f7fe faf0 	bl	8005978 <HAL_RCC_GetPCLK1Freq>
 8007398:	61f8      	str	r0, [r7, #28]
        break;
 800739a:	e014      	b.n	80073c6 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800739c:	f7fe fb02 	bl	80059a4 <HAL_RCC_GetPCLK2Freq>
 80073a0:	61f8      	str	r0, [r7, #28]
        break;
 80073a2:	e010      	b.n	80073c6 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80073a4:	4b1d      	ldr	r3, [pc, #116]	@ (800741c <UART_SetConfig+0x454>)
 80073a6:	61fb      	str	r3, [r7, #28]
        break;
 80073a8:	e00d      	b.n	80073c6 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80073aa:	f7fe fa4d 	bl	8005848 <HAL_RCC_GetSysClockFreq>
 80073ae:	61f8      	str	r0, [r7, #28]
        break;
 80073b0:	e009      	b.n	80073c6 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80073b2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80073b6:	61fb      	str	r3, [r7, #28]
        break;
 80073b8:	e005      	b.n	80073c6 <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 80073ba:	2300      	movs	r3, #0
 80073bc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80073be:	2301      	movs	r3, #1
 80073c0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80073c4:	bf00      	nop
    }

    if (pclk != 0U)
 80073c6:	69fb      	ldr	r3, [r7, #28]
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d019      	beq.n	8007400 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	685b      	ldr	r3, [r3, #4]
 80073d0:	085a      	lsrs	r2, r3, #1
 80073d2:	69fb      	ldr	r3, [r7, #28]
 80073d4:	441a      	add	r2, r3
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	685b      	ldr	r3, [r3, #4]
 80073da:	fbb2 f3f3 	udiv	r3, r2, r3
 80073de:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80073e0:	69bb      	ldr	r3, [r7, #24]
 80073e2:	2b0f      	cmp	r3, #15
 80073e4:	d909      	bls.n	80073fa <UART_SetConfig+0x432>
 80073e6:	69bb      	ldr	r3, [r7, #24]
 80073e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80073ec:	d205      	bcs.n	80073fa <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80073ee:	69bb      	ldr	r3, [r7, #24]
 80073f0:	b29a      	uxth	r2, r3
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	60da      	str	r2, [r3, #12]
 80073f8:	e002      	b.n	8007400 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 80073fa:	2301      	movs	r3, #1
 80073fc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	2200      	movs	r2, #0
 8007404:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	2200      	movs	r2, #0
 800740a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800740c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8007410:	4618      	mov	r0, r3
 8007412:	3728      	adds	r7, #40	@ 0x28
 8007414:	46bd      	mov	sp, r7
 8007416:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800741a:	bf00      	nop
 800741c:	00f42400 	.word	0x00f42400

08007420 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007420:	b480      	push	{r7}
 8007422:	b083      	sub	sp, #12
 8007424:	af00      	add	r7, sp, #0
 8007426:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800742c:	f003 0308 	and.w	r3, r3, #8
 8007430:	2b00      	cmp	r3, #0
 8007432:	d00a      	beq.n	800744a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	685b      	ldr	r3, [r3, #4]
 800743a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	430a      	orrs	r2, r1
 8007448:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800744e:	f003 0301 	and.w	r3, r3, #1
 8007452:	2b00      	cmp	r3, #0
 8007454:	d00a      	beq.n	800746c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	685b      	ldr	r3, [r3, #4]
 800745c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	430a      	orrs	r2, r1
 800746a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007470:	f003 0302 	and.w	r3, r3, #2
 8007474:	2b00      	cmp	r3, #0
 8007476:	d00a      	beq.n	800748e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	685b      	ldr	r3, [r3, #4]
 800747e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	430a      	orrs	r2, r1
 800748c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007492:	f003 0304 	and.w	r3, r3, #4
 8007496:	2b00      	cmp	r3, #0
 8007498:	d00a      	beq.n	80074b0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	685b      	ldr	r3, [r3, #4]
 80074a0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	430a      	orrs	r2, r1
 80074ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074b4:	f003 0310 	and.w	r3, r3, #16
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d00a      	beq.n	80074d2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	689b      	ldr	r3, [r3, #8]
 80074c2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	430a      	orrs	r2, r1
 80074d0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074d6:	f003 0320 	and.w	r3, r3, #32
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d00a      	beq.n	80074f4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	689b      	ldr	r3, [r3, #8]
 80074e4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	430a      	orrs	r2, r1
 80074f2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d01a      	beq.n	8007536 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	685b      	ldr	r3, [r3, #4]
 8007506:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	430a      	orrs	r2, r1
 8007514:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800751a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800751e:	d10a      	bne.n	8007536 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	685b      	ldr	r3, [r3, #4]
 8007526:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	430a      	orrs	r2, r1
 8007534:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800753a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800753e:	2b00      	cmp	r3, #0
 8007540:	d00a      	beq.n	8007558 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	685b      	ldr	r3, [r3, #4]
 8007548:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	430a      	orrs	r2, r1
 8007556:	605a      	str	r2, [r3, #4]
  }
}
 8007558:	bf00      	nop
 800755a:	370c      	adds	r7, #12
 800755c:	46bd      	mov	sp, r7
 800755e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007562:	4770      	bx	lr

08007564 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007564:	b580      	push	{r7, lr}
 8007566:	b098      	sub	sp, #96	@ 0x60
 8007568:	af02      	add	r7, sp, #8
 800756a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	2200      	movs	r2, #0
 8007570:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007574:	f7fa ff94 	bl	80024a0 <HAL_GetTick>
 8007578:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	f003 0308 	and.w	r3, r3, #8
 8007584:	2b08      	cmp	r3, #8
 8007586:	d12e      	bne.n	80075e6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007588:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800758c:	9300      	str	r3, [sp, #0]
 800758e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007590:	2200      	movs	r2, #0
 8007592:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8007596:	6878      	ldr	r0, [r7, #4]
 8007598:	f000 f88c 	bl	80076b4 <UART_WaitOnFlagUntilTimeout>
 800759c:	4603      	mov	r3, r0
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d021      	beq.n	80075e6 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075aa:	e853 3f00 	ldrex	r3, [r3]
 80075ae:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80075b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80075b2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80075b6:	653b      	str	r3, [r7, #80]	@ 0x50
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	461a      	mov	r2, r3
 80075be:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80075c0:	647b      	str	r3, [r7, #68]	@ 0x44
 80075c2:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075c4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80075c6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80075c8:	e841 2300 	strex	r3, r2, [r1]
 80075cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80075ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d1e6      	bne.n	80075a2 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	2220      	movs	r2, #32
 80075d8:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	2200      	movs	r2, #0
 80075de:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80075e2:	2303      	movs	r3, #3
 80075e4:	e062      	b.n	80076ac <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	f003 0304 	and.w	r3, r3, #4
 80075f0:	2b04      	cmp	r3, #4
 80075f2:	d149      	bne.n	8007688 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80075f4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80075f8:	9300      	str	r3, [sp, #0]
 80075fa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80075fc:	2200      	movs	r2, #0
 80075fe:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007602:	6878      	ldr	r0, [r7, #4]
 8007604:	f000 f856 	bl	80076b4 <UART_WaitOnFlagUntilTimeout>
 8007608:	4603      	mov	r3, r0
 800760a:	2b00      	cmp	r3, #0
 800760c:	d03c      	beq.n	8007688 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007614:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007616:	e853 3f00 	ldrex	r3, [r3]
 800761a:	623b      	str	r3, [r7, #32]
   return(result);
 800761c:	6a3b      	ldr	r3, [r7, #32]
 800761e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007622:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	461a      	mov	r2, r3
 800762a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800762c:	633b      	str	r3, [r7, #48]	@ 0x30
 800762e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007630:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007632:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007634:	e841 2300 	strex	r3, r2, [r1]
 8007638:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800763a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800763c:	2b00      	cmp	r3, #0
 800763e:	d1e6      	bne.n	800760e <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	3308      	adds	r3, #8
 8007646:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007648:	693b      	ldr	r3, [r7, #16]
 800764a:	e853 3f00 	ldrex	r3, [r3]
 800764e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	f023 0301 	bic.w	r3, r3, #1
 8007656:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	3308      	adds	r3, #8
 800765e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007660:	61fa      	str	r2, [r7, #28]
 8007662:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007664:	69b9      	ldr	r1, [r7, #24]
 8007666:	69fa      	ldr	r2, [r7, #28]
 8007668:	e841 2300 	strex	r3, r2, [r1]
 800766c:	617b      	str	r3, [r7, #20]
   return(result);
 800766e:	697b      	ldr	r3, [r7, #20]
 8007670:	2b00      	cmp	r3, #0
 8007672:	d1e5      	bne.n	8007640 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	2220      	movs	r2, #32
 8007678:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	2200      	movs	r2, #0
 8007680:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007684:	2303      	movs	r3, #3
 8007686:	e011      	b.n	80076ac <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	2220      	movs	r2, #32
 800768c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	2220      	movs	r2, #32
 8007692:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	2200      	movs	r2, #0
 800769a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	2200      	movs	r2, #0
 80076a0:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	2200      	movs	r2, #0
 80076a6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80076aa:	2300      	movs	r3, #0
}
 80076ac:	4618      	mov	r0, r3
 80076ae:	3758      	adds	r7, #88	@ 0x58
 80076b0:	46bd      	mov	sp, r7
 80076b2:	bd80      	pop	{r7, pc}

080076b4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80076b4:	b580      	push	{r7, lr}
 80076b6:	b084      	sub	sp, #16
 80076b8:	af00      	add	r7, sp, #0
 80076ba:	60f8      	str	r0, [r7, #12]
 80076bc:	60b9      	str	r1, [r7, #8]
 80076be:	603b      	str	r3, [r7, #0]
 80076c0:	4613      	mov	r3, r2
 80076c2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80076c4:	e04f      	b.n	8007766 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80076c6:	69bb      	ldr	r3, [r7, #24]
 80076c8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80076cc:	d04b      	beq.n	8007766 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80076ce:	f7fa fee7 	bl	80024a0 <HAL_GetTick>
 80076d2:	4602      	mov	r2, r0
 80076d4:	683b      	ldr	r3, [r7, #0]
 80076d6:	1ad3      	subs	r3, r2, r3
 80076d8:	69ba      	ldr	r2, [r7, #24]
 80076da:	429a      	cmp	r2, r3
 80076dc:	d302      	bcc.n	80076e4 <UART_WaitOnFlagUntilTimeout+0x30>
 80076de:	69bb      	ldr	r3, [r7, #24]
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d101      	bne.n	80076e8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80076e4:	2303      	movs	r3, #3
 80076e6:	e04e      	b.n	8007786 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	f003 0304 	and.w	r3, r3, #4
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d037      	beq.n	8007766 <UART_WaitOnFlagUntilTimeout+0xb2>
 80076f6:	68bb      	ldr	r3, [r7, #8]
 80076f8:	2b80      	cmp	r3, #128	@ 0x80
 80076fa:	d034      	beq.n	8007766 <UART_WaitOnFlagUntilTimeout+0xb2>
 80076fc:	68bb      	ldr	r3, [r7, #8]
 80076fe:	2b40      	cmp	r3, #64	@ 0x40
 8007700:	d031      	beq.n	8007766 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	69db      	ldr	r3, [r3, #28]
 8007708:	f003 0308 	and.w	r3, r3, #8
 800770c:	2b08      	cmp	r3, #8
 800770e:	d110      	bne.n	8007732 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	2208      	movs	r2, #8
 8007716:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007718:	68f8      	ldr	r0, [r7, #12]
 800771a:	f000 f838 	bl	800778e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	2208      	movs	r2, #8
 8007722:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	2200      	movs	r2, #0
 800772a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800772e:	2301      	movs	r3, #1
 8007730:	e029      	b.n	8007786 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	69db      	ldr	r3, [r3, #28]
 8007738:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800773c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007740:	d111      	bne.n	8007766 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800774a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800774c:	68f8      	ldr	r0, [r7, #12]
 800774e:	f000 f81e 	bl	800778e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	2220      	movs	r2, #32
 8007756:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	2200      	movs	r2, #0
 800775e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8007762:	2303      	movs	r3, #3
 8007764:	e00f      	b.n	8007786 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	69da      	ldr	r2, [r3, #28]
 800776c:	68bb      	ldr	r3, [r7, #8]
 800776e:	4013      	ands	r3, r2
 8007770:	68ba      	ldr	r2, [r7, #8]
 8007772:	429a      	cmp	r2, r3
 8007774:	bf0c      	ite	eq
 8007776:	2301      	moveq	r3, #1
 8007778:	2300      	movne	r3, #0
 800777a:	b2db      	uxtb	r3, r3
 800777c:	461a      	mov	r2, r3
 800777e:	79fb      	ldrb	r3, [r7, #7]
 8007780:	429a      	cmp	r2, r3
 8007782:	d0a0      	beq.n	80076c6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007784:	2300      	movs	r3, #0
}
 8007786:	4618      	mov	r0, r3
 8007788:	3710      	adds	r7, #16
 800778a:	46bd      	mov	sp, r7
 800778c:	bd80      	pop	{r7, pc}

0800778e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800778e:	b480      	push	{r7}
 8007790:	b095      	sub	sp, #84	@ 0x54
 8007792:	af00      	add	r7, sp, #0
 8007794:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800779c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800779e:	e853 3f00 	ldrex	r3, [r3]
 80077a2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80077a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077a6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80077aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	461a      	mov	r2, r3
 80077b2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80077b4:	643b      	str	r3, [r7, #64]	@ 0x40
 80077b6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077b8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80077ba:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80077bc:	e841 2300 	strex	r3, r2, [r1]
 80077c0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80077c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d1e6      	bne.n	8007796 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	3308      	adds	r3, #8
 80077ce:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077d0:	6a3b      	ldr	r3, [r7, #32]
 80077d2:	e853 3f00 	ldrex	r3, [r3]
 80077d6:	61fb      	str	r3, [r7, #28]
   return(result);
 80077d8:	69fb      	ldr	r3, [r7, #28]
 80077da:	f023 0301 	bic.w	r3, r3, #1
 80077de:	64bb      	str	r3, [r7, #72]	@ 0x48
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	3308      	adds	r3, #8
 80077e6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80077e8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80077ea:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077ec:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80077ee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80077f0:	e841 2300 	strex	r3, r2, [r1]
 80077f4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80077f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d1e5      	bne.n	80077c8 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007800:	2b01      	cmp	r3, #1
 8007802:	d118      	bne.n	8007836 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	e853 3f00 	ldrex	r3, [r3]
 8007810:	60bb      	str	r3, [r7, #8]
   return(result);
 8007812:	68bb      	ldr	r3, [r7, #8]
 8007814:	f023 0310 	bic.w	r3, r3, #16
 8007818:	647b      	str	r3, [r7, #68]	@ 0x44
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	461a      	mov	r2, r3
 8007820:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007822:	61bb      	str	r3, [r7, #24]
 8007824:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007826:	6979      	ldr	r1, [r7, #20]
 8007828:	69ba      	ldr	r2, [r7, #24]
 800782a:	e841 2300 	strex	r3, r2, [r1]
 800782e:	613b      	str	r3, [r7, #16]
   return(result);
 8007830:	693b      	ldr	r3, [r7, #16]
 8007832:	2b00      	cmp	r3, #0
 8007834:	d1e6      	bne.n	8007804 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	2220      	movs	r2, #32
 800783a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	2200      	movs	r2, #0
 8007842:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	2200      	movs	r2, #0
 8007848:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800784a:	bf00      	nop
 800784c:	3754      	adds	r7, #84	@ 0x54
 800784e:	46bd      	mov	sp, r7
 8007850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007854:	4770      	bx	lr

08007856 <memset>:
 8007856:	4402      	add	r2, r0
 8007858:	4603      	mov	r3, r0
 800785a:	4293      	cmp	r3, r2
 800785c:	d100      	bne.n	8007860 <memset+0xa>
 800785e:	4770      	bx	lr
 8007860:	f803 1b01 	strb.w	r1, [r3], #1
 8007864:	e7f9      	b.n	800785a <memset+0x4>
	...

08007868 <__libc_init_array>:
 8007868:	b570      	push	{r4, r5, r6, lr}
 800786a:	4d0d      	ldr	r5, [pc, #52]	@ (80078a0 <__libc_init_array+0x38>)
 800786c:	4c0d      	ldr	r4, [pc, #52]	@ (80078a4 <__libc_init_array+0x3c>)
 800786e:	1b64      	subs	r4, r4, r5
 8007870:	10a4      	asrs	r4, r4, #2
 8007872:	2600      	movs	r6, #0
 8007874:	42a6      	cmp	r6, r4
 8007876:	d109      	bne.n	800788c <__libc_init_array+0x24>
 8007878:	4d0b      	ldr	r5, [pc, #44]	@ (80078a8 <__libc_init_array+0x40>)
 800787a:	4c0c      	ldr	r4, [pc, #48]	@ (80078ac <__libc_init_array+0x44>)
 800787c:	f000 f818 	bl	80078b0 <_init>
 8007880:	1b64      	subs	r4, r4, r5
 8007882:	10a4      	asrs	r4, r4, #2
 8007884:	2600      	movs	r6, #0
 8007886:	42a6      	cmp	r6, r4
 8007888:	d105      	bne.n	8007896 <__libc_init_array+0x2e>
 800788a:	bd70      	pop	{r4, r5, r6, pc}
 800788c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007890:	4798      	blx	r3
 8007892:	3601      	adds	r6, #1
 8007894:	e7ee      	b.n	8007874 <__libc_init_array+0xc>
 8007896:	f855 3b04 	ldr.w	r3, [r5], #4
 800789a:	4798      	blx	r3
 800789c:	3601      	adds	r6, #1
 800789e:	e7f2      	b.n	8007886 <__libc_init_array+0x1e>
 80078a0:	08007918 	.word	0x08007918
 80078a4:	08007918 	.word	0x08007918
 80078a8:	08007918 	.word	0x08007918
 80078ac:	0800791c 	.word	0x0800791c

080078b0 <_init>:
 80078b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078b2:	bf00      	nop
 80078b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80078b6:	bc08      	pop	{r3}
 80078b8:	469e      	mov	lr, r3
 80078ba:	4770      	bx	lr

080078bc <_fini>:
 80078bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078be:	bf00      	nop
 80078c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80078c2:	bc08      	pop	{r3}
 80078c4:	469e      	mov	lr, r3
 80078c6:	4770      	bx	lr
